// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'dart:async';
import 'dart:collection' show HashMap;

const libraryMirror = m.LibraryMirror(
  'dart:async',
  {'Future.delayed': _Future_delayed_$},
  {},
  {},
);
Function _Future_delayed_$(m.Scope scope$) => (
      Duration duration, [
      m.FunctionPointer? computation,
    ]) {
      if (computation == null) {
        return Future.delayed(duration);
      }
      FutureOr computationProxy() async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            computation!,
            [],
            {},
          );
      return Future.delayed(
        duration,
        computation == null ? null : computationProxy,
      );
    };
