// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/scrollbar.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/scrollbar_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/scrollbar.dart',
  {'Scrollbar.': _Scrollbar__$},
  {},
  {},
);
Function _Scrollbar__$(m.Scope scope$) => ({
      Key? key,
      required Widget child,
      ScrollController? controller,
      bool? thumbVisibility,
      bool? trackVisibility,
      double? thickness,
      Radius? radius,
      m.FunctionPointer? notificationPredicate,
      bool? interactive,
      ScrollbarOrientation? scrollbarOrientation,
      bool? isAlwaysShown,
      bool? showTrackOnHover,
      double? hoverThickness,
    }) {
      bool notificationPredicateProxy(
              ScrollNotification notificationPredicate_notification$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            notificationPredicate!,
            [notificationPredicate_notification$],
            {},
          );
      return Scrollbar(
        child: child,
        controller: controller,
        hoverThickness: hoverThickness,
        interactive: interactive,
        isAlwaysShown: isAlwaysShown,
        key: key,
        notificationPredicate:
            notificationPredicate == null ? null : notificationPredicateProxy,
        radius: radius,
        scrollbarOrientation: scrollbarOrientation,
        showTrackOnHover: showTrackOnHover,
        thickness: thickness,
        thumbVisibility: thumbVisibility,
        trackVisibility: trackVisibility,
      );
    };
