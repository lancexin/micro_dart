// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/basic.dart';
import 'dart:math';
import 'dart:ui' show Image, ImageFilter, TextHeightBehavior;
import 'package:flutter/animation.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/binding.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/localizations.dart';
import 'package:flutter/src/widgets/visibility.dart';
import 'package:flutter/src/widgets/widget_span.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/basic.dart',
  {
    'ClipRRect.': _ClipRRect__$,
    'Padding.': _Padding__$,
    'SizedBox.': _SizedBox__$,
    'AspectRatio.': _AspectRatio__$,
    'SliverToBoxAdapter.': _SliverToBoxAdapter__$,
    'SliverPadding.': _SliverPadding__$,
    'Row.': _Row__$,
    'Column.': _Column__$,
    'Expanded.': _Expanded__$,
  },
  {},
  {},
);
Function _ClipRRect__$(m.Scope scope$) => ({
      Key? key,
      BorderRadiusGeometry? borderRadius,
      CustomClipper<RRect>? clipper,
      Clip? clipBehavior,
      Widget? child,
    }) {
      return ClipRRect(
        borderRadius: borderRadius ?? BorderRadius.zero,
        child: child,
        clipBehavior: clipBehavior ?? Clip.antiAlias,
        clipper: clipper,
        key: key,
      );
    };
Function _Padding__$(m.Scope scope$) => ({
      Key? key,
      required EdgeInsetsGeometry padding,
      Widget? child,
    }) {
      return Padding(
        child: child,
        key: key,
        padding: padding,
      );
    };
Function _SizedBox__$(m.Scope scope$) => ({
      Key? key,
      double? width,
      double? height,
      Widget? child,
    }) {
      return SizedBox(
        child: child,
        height: height,
        key: key,
        width: width,
      );
    };
Function _AspectRatio__$(m.Scope scope$) => ({
      Key? key,
      required double aspectRatio,
      Widget? child,
    }) {
      return AspectRatio(
        aspectRatio: aspectRatio,
        child: child,
        key: key,
      );
    };
Function _SliverToBoxAdapter__$(m.Scope scope$) => ({
      Key? key,
      Widget? child,
    }) {
      return SliverToBoxAdapter(
        child: child,
        key: key,
      );
    };
Function _SliverPadding__$(m.Scope scope$) => ({
      Key? key,
      required EdgeInsetsGeometry padding,
      Widget? sliver,
    }) {
      return SliverPadding(
        key: key,
        padding: padding,
        sliver: sliver,
      );
    };
Function _Row__$(m.Scope scope$) => ({
      Key? key,
      MainAxisAlignment? mainAxisAlignment,
      MainAxisSize? mainAxisSize,
      CrossAxisAlignment? crossAxisAlignment,
      TextDirection? textDirection,
      VerticalDirection? verticalDirection,
      TextBaseline? textBaseline,
      List? children,
    }) {
      return Row(
        children: children == null ? const <Widget>[] : List.from(children),
        crossAxisAlignment: crossAxisAlignment ?? CrossAxisAlignment.center,
        key: key,
        mainAxisAlignment: mainAxisAlignment ?? MainAxisAlignment.start,
        mainAxisSize: mainAxisSize ?? MainAxisSize.max,
        textBaseline: textBaseline,
        textDirection: textDirection,
        verticalDirection: verticalDirection ?? VerticalDirection.down,
      );
    };
Function _Column__$(m.Scope scope$) => ({
      Key? key,
      MainAxisAlignment? mainAxisAlignment,
      MainAxisSize? mainAxisSize,
      CrossAxisAlignment? crossAxisAlignment,
      TextDirection? textDirection,
      VerticalDirection? verticalDirection,
      TextBaseline? textBaseline,
      List? children,
    }) {
      return Column(
        children: children == null ? const <Widget>[] : List.from(children),
        crossAxisAlignment: crossAxisAlignment ?? CrossAxisAlignment.center,
        key: key,
        mainAxisAlignment: mainAxisAlignment ?? MainAxisAlignment.start,
        mainAxisSize: mainAxisSize ?? MainAxisSize.max,
        textBaseline: textBaseline,
        textDirection: textDirection,
        verticalDirection: verticalDirection ?? VerticalDirection.down,
      );
    };
Function _Expanded__$(m.Scope scope$) => ({
      Key? key,
      int? flex,
      required Widget child,
    }) {
      return Expanded(
        child: child,
        flex: flex ?? 1,
        key: key,
      );
    };
