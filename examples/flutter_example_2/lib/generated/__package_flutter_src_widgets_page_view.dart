// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/page_view.dart';
import 'dart:math';
import 'package:flutter/foundation.dart'
    show clampDouble, precisionErrorTolerance;
import 'package:flutter/gestures.dart' show DragStartBehavior;
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/notification_listener.dart';
import 'package:flutter/src/widgets/page_storage.dart';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/widgets/scroll_context.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_delegate.dart';
import 'package:flutter/src/widgets/scroll_metrics.dart';
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/scroll_position.dart';
import 'package:flutter/src/widgets/scroll_position_with_single_context.dart';
import 'package:flutter/src/widgets/scroll_view.dart';
import 'package:flutter/src/widgets/scrollable.dart';
import 'package:flutter/src/widgets/sliver_fill.dart';
import 'package:flutter/src/widgets/viewport.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/page_view.dart',
  {
    'PageController.': _PageController__$,
    'PageView.builder': _PageView_builder_$,
  },
  {},
  {
    'PageController': m.ClassMirror(
      'PageController',
      {
        'nextPage': _PageController_nextPage$,
        'previousPage': _PageController_previousPage$,
      },
      {},
    )
  },
);
Function _PageController__$(m.Scope scope$) => ({
      int? initialPage,
      bool? keepPage,
      double? viewportFraction,
    }) {
      return PageController(
        initialPage: initialPage ?? 0,
        keepPage: keepPage ?? true,
        viewportFraction: viewportFraction ?? 1.0,
      );
    };
Function _PageController_nextPage$(
  m.Scope scope$,
  PageController target$,
) =>
    target$.nextPage;
Function _PageController_previousPage$(
  m.Scope scope$,
  PageController target$,
) =>
    target$.previousPage;
Function _PageView_builder_$(m.Scope scope$) => ({
      Key? key,
      Axis? scrollDirection,
      bool? reverse,
      PageController? controller,
      ScrollPhysics? physics,
      bool? pageSnapping,
      m.FunctionPointer? onPageChanged,
      required m.FunctionPointer itemBuilder,
      m.FunctionPointer? findChildIndexCallback,
      int? itemCount,
      DragStartBehavior? dragStartBehavior,
      bool? allowImplicitScrolling,
      String? restorationId,
      Clip? clipBehavior,
      ScrollBehavior? scrollBehavior,
      bool? padEnds,
    }) {
      int? findChildIndexCallbackProxy(Key findChildIndexCallback_key$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            findChildIndexCallback!,
            [findChildIndexCallback_key$],
            {},
          );
      Widget? itemBuilderProxy(
        BuildContext itemBuilder_context$,
        int itemBuilder_index$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            itemBuilder,
            [
              itemBuilder_context$,
              itemBuilder_index$,
            ],
            {},
          );
      void onPageChangedProxy(int onPageChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onPageChanged!,
            [onPageChanged_value$],
            {},
          );
      return PageView.builder(
        allowImplicitScrolling: allowImplicitScrolling ?? false,
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        controller: controller,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        findChildIndexCallback:
            findChildIndexCallback == null ? null : findChildIndexCallbackProxy,
        itemBuilder: itemBuilderProxy,
        itemCount: itemCount,
        key: key,
        onPageChanged: onPageChanged == null ? null : onPageChangedProxy,
        padEnds: padEnds ?? true,
        pageSnapping: pageSnapping ?? true,
        physics: physics,
        restorationId: restorationId,
        reverse: reverse ?? false,
        scrollBehavior: scrollBehavior,
        scrollDirection: scrollDirection ?? Axis.horizontal,
      );
    };
