// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/app_bar.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/action_buttons.dart';
import 'package:flutter/src/material/app_bar_theme.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/flexible_space_bar.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icon_button_theme.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/scaffold.dart';
import 'package:flutter/src/material/tabs.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/app_bar.dart',
  {'AppBar.': _AppBar__$},
  {},
  {},
);
Function _AppBar__$(m.Scope scope$) => ({
      Key? key,
      Widget? leading,
      bool? automaticallyImplyLeading,
      Widget? title,
      List? actions,
      Widget? flexibleSpace,
      PreferredSizeWidget? bottom,
      double? elevation,
      double? scrolledUnderElevation,
      m.FunctionPointer? notificationPredicate,
      Color? shadowColor,
      Color? surfaceTintColor,
      ShapeBorder? shape,
      Color? backgroundColor,
      Color? foregroundColor,
      IconThemeData? iconTheme,
      IconThemeData? actionsIconTheme,
      bool? primary,
      bool? centerTitle,
      bool? excludeHeaderSemantics,
      double? titleSpacing,
      double? toolbarOpacity,
      double? bottomOpacity,
      double? toolbarHeight,
      double? leadingWidth,
      TextStyle? toolbarTextStyle,
      TextStyle? titleTextStyle,
      SystemUiOverlayStyle? systemOverlayStyle,
      bool? forceMaterialTransparency,
      Clip? clipBehavior,
    }) {
      bool notificationPredicateProxy(
              ScrollNotification notificationPredicate_notification$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            notificationPredicate!,
            [notificationPredicate_notification$],
            {},
          );
      return AppBar(
        actions: actions == null ? null : List.from(actions),
        actionsIconTheme: actionsIconTheme,
        automaticallyImplyLeading: automaticallyImplyLeading ?? true,
        backgroundColor: backgroundColor,
        bottom: bottom,
        bottomOpacity: bottomOpacity ?? 1.0,
        centerTitle: centerTitle,
        clipBehavior: clipBehavior,
        elevation: elevation,
        excludeHeaderSemantics: excludeHeaderSemantics ?? false,
        flexibleSpace: flexibleSpace,
        forceMaterialTransparency: forceMaterialTransparency ?? false,
        foregroundColor: foregroundColor,
        iconTheme: iconTheme,
        key: key,
        leading: leading,
        leadingWidth: leadingWidth,
        notificationPredicate: notificationPredicate == null
            ? defaultScrollNotificationPredicate
            : notificationPredicateProxy,
        primary: primary ?? true,
        scrolledUnderElevation: scrolledUnderElevation,
        shadowColor: shadowColor,
        shape: shape,
        surfaceTintColor: surfaceTintColor,
        systemOverlayStyle: systemOverlayStyle,
        title: title,
        titleSpacing: titleSpacing,
        titleTextStyle: titleTextStyle,
        toolbarHeight: toolbarHeight,
        toolbarOpacity: toolbarOpacity ?? 1.0,
        toolbarTextStyle: toolbarTextStyle,
      );
    };
