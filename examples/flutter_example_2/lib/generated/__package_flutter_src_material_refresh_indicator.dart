// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/refresh_indicator.dart';
import 'dart:async';
import 'dart:math';
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart' show clampDouble;
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/progress_indicator.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/refresh_indicator.dart',
  {'RefreshIndicator.': _RefreshIndicator__$},
  {},
  {},
);
Function _RefreshIndicator__$(m.Scope scope$) => ({
      Key? key,
      required Widget child,
      double? displacement,
      double? edgeOffset,
      required m.FunctionPointer onRefresh,
      Color? color,
      Color? backgroundColor,
      m.FunctionPointer? notificationPredicate,
      String? semanticsLabel,
      String? semanticsValue,
      double? strokeWidth,
      RefreshIndicatorTriggerMode? triggerMode,
    }) {
      bool notificationPredicateProxy(
              ScrollNotification notificationPredicate_notification$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            notificationPredicate!,
            [notificationPredicate_notification$],
            {},
          );
      Future<void> onRefreshProxy() async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            onRefresh,
            [],
            {},
          );
      return RefreshIndicator(
        backgroundColor: backgroundColor,
        child: child,
        color: color,
        displacement: displacement ?? 40.0,
        edgeOffset: edgeOffset ?? 0.0,
        key: key,
        notificationPredicate: notificationPredicate == null
            ? defaultScrollNotificationPredicate
            : notificationPredicateProxy,
        onRefresh: onRefreshProxy,
        semanticsLabel: semanticsLabel,
        semanticsValue: semanticsValue,
        strokeWidth: strokeWidth ?? RefreshProgressIndicator.defaultStrokeWidth,
        triggerMode: triggerMode ?? RefreshIndicatorTriggerMode.onEdge,
      );
    };
