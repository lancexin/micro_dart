// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:platform/src/testing/fake_platform.dart';
import 'dart:convert';
import 'package:platform/src/interface/platform.dart';

const libraryMirror = m.LibraryMirror(
  'package:platform/src/testing/fake_platform.dart',
  {
    'FakePlatform.': _FakePlatform__$,
    'FakePlatform.fromPlatform': _FakePlatform_fromPlatform_$,
    'FakePlatform.fromJson': _FakePlatform_fromJson_$,
  },
  {},
  {
    'FakePlatform': m.ClassMirror(
      'FakePlatform',
      {
        '#as': FakePlatform_as$,
        '#is': FakePlatform_is$,
        'packageConfig': _FakePlatform_packageConfig$,
        'numberOfProcessors': _FakePlatform_numberOfProcessors$,
        'pathSeparator': _FakePlatform_pathSeparator$,
        'operatingSystem': _FakePlatform_operatingSystem$,
        'operatingSystemVersion': _FakePlatform_operatingSystemVersion$,
        'localHostname': _FakePlatform_localHostname$,
        'environment': _FakePlatform_environment$,
        'executable': _FakePlatform_executable$,
        'resolvedExecutable': _FakePlatform_resolvedExecutable$,
        'script': _FakePlatform_script$,
        'executableArguments': _FakePlatform_executableArguments$,
        'version': _FakePlatform_version$,
        'stdinSupportsAnsi': _FakePlatform_stdinSupportsAnsi$,
        'stdoutSupportsAnsi': _FakePlatform_stdoutSupportsAnsi$,
        'localeName': _FakePlatform_localeName$,
        'copyWith': _FakePlatform_copyWith$,
      },
      {'packageConfig': _FakePlatform_packageConfig_set$},
    )
  },
);
Function FakePlatform_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FakePlatform;
Function FakePlatform_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FakePlatform;
Function _FakePlatform_packageConfig$(
  m.Scope scope$,
  FakePlatform target$,
) =>
    () {
      return target$.packageConfig;
    };
void _FakePlatform_packageConfig_set$(
  m.Scope scope$,
  FakePlatform target$,
) =>
    (dynamic other$) {
      target$.packageConfig = other$;
    };
Function _FakePlatform_numberOfProcessors$(
  m.Scope scope$,
  FakePlatform target$,
) =>
    () {
      return target$.numberOfProcessors;
    };
Function _FakePlatform_pathSeparator$(
  m.Scope scope$,
  FakePlatform target$,
) =>
    () {
      return target$.pathSeparator;
    };
Function _FakePlatform_operatingSystem$(
  m.Scope scope$,
  FakePlatform target$,
) =>
    () {
      return target$.operatingSystem;
    };
Function _FakePlatform_operatingSystemVersion$(
  m.Scope scope$,
  FakePlatform target$,
) =>
    () {
      return target$.operatingSystemVersion;
    };
Function _FakePlatform_localHostname$(
  m.Scope scope$,
  FakePlatform target$,
) =>
    () {
      return target$.localHostname;
    };
Function _FakePlatform_environment$(
  m.Scope scope$,
  FakePlatform target$,
) =>
    () {
      return target$.environment;
    };
Function _FakePlatform_executable$(
  m.Scope scope$,
  FakePlatform target$,
) =>
    () {
      return target$.executable;
    };
Function _FakePlatform_resolvedExecutable$(
  m.Scope scope$,
  FakePlatform target$,
) =>
    () {
      return target$.resolvedExecutable;
    };
Function _FakePlatform_script$(
  m.Scope scope$,
  FakePlatform target$,
) =>
    () {
      return target$.script;
    };
Function _FakePlatform_executableArguments$(
  m.Scope scope$,
  FakePlatform target$,
) =>
    () {
      return target$.executableArguments;
    };
Function _FakePlatform_version$(
  m.Scope scope$,
  FakePlatform target$,
) =>
    () {
      return target$.version;
    };
Function _FakePlatform_stdinSupportsAnsi$(
  m.Scope scope$,
  FakePlatform target$,
) =>
    () {
      return target$.stdinSupportsAnsi;
    };
Function _FakePlatform_stdoutSupportsAnsi$(
  m.Scope scope$,
  FakePlatform target$,
) =>
    () {
      return target$.stdoutSupportsAnsi;
    };
Function _FakePlatform_localeName$(
  m.Scope scope$,
  FakePlatform target$,
) =>
    () {
      return target$.localeName;
    };
Function _FakePlatform__$(m.Scope scope$) => ({
      int? numberOfProcessors,
      String? pathSeparator,
      String? operatingSystem,
      String? operatingSystemVersion,
      String? localHostname,
      Map? environment,
      String? executable,
      String? resolvedExecutable,
      Uri? script,
      List? executableArguments,
      String? packageConfig,
      String? version,
      bool? stdinSupportsAnsi,
      bool? stdoutSupportsAnsi,
      String? localeName,
    }) {
      return FakePlatform(
        environment: environment == null ? null : Map.from(environment),
        executable: executable,
        executableArguments:
            executableArguments == null ? null : List.from(executableArguments),
        localHostname: localHostname,
        localeName: localeName,
        numberOfProcessors: numberOfProcessors,
        operatingSystem: operatingSystem,
        operatingSystemVersion: operatingSystemVersion,
        packageConfig: packageConfig,
        pathSeparator: pathSeparator,
        resolvedExecutable: resolvedExecutable,
        script: script,
        stdinSupportsAnsi: stdinSupportsAnsi,
        stdoutSupportsAnsi: stdoutSupportsAnsi,
        version: version,
      );
    };
Function _FakePlatform_fromPlatform_$(m.Scope scope$) =>
    FakePlatform.fromPlatform;
Function _FakePlatform_fromJson_$(m.Scope scope$) => FakePlatform.fromJson;
Function _FakePlatform_copyWith$(
  m.Scope scope$,
  FakePlatform target$,
) =>
    target$.copyWith;
