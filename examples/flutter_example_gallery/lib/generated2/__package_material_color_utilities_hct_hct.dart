// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:material_color_utilities/hct/hct.dart';
import 'package:material_color_utilities/utils/color_utils.dart';
import 'package:material_color_utilities/hct/cam16.dart';
import 'package:material_color_utilities/hct/hct_solver.dart';

const libraryMirror = m.LibraryMirror(
  'package:material_color_utilities/hct/hct.dart',
  {
    'Hct.from': _Hct_from$,
    'Hct.fromInt': _Hct_fromInt$,
  },
  {},
  {
    'Hct': m.ClassMirror(
      'Hct',
      {
        '#as': Hct_as$,
        '#is': Hct_is$,
        'hue': _Hct_hue$,
        'chroma': _Hct_chroma$,
        'tone': _Hct_tone$,
        '==': _Hct_eq$$,
        'toString': _Hct_toString$,
        'toInt': _Hct_toInt$,
      },
      {
        'hue': _Hct_hue_set$,
        'chroma': _Hct_chroma_set$,
        'tone': _Hct_tone_set$,
      },
    )
  },
);
Function Hct_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Hct;
Function Hct_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Hct;
Function _Hct_hue$(
  m.Scope scope$,
  Hct target$,
) =>
    () {
      return target$.hue;
    };
void _Hct_hue_set$(
  m.Scope scope$,
  Hct target$,
) =>
    (dynamic other$) {
      target$.hue = other$;
    };
Function _Hct_chroma$(
  m.Scope scope$,
  Hct target$,
) =>
    () {
      return target$.chroma;
    };
void _Hct_chroma_set$(
  m.Scope scope$,
  Hct target$,
) =>
    (dynamic other$) {
      target$.chroma = other$;
    };
Function _Hct_tone$(
  m.Scope scope$,
  Hct target$,
) =>
    () {
      return target$.tone;
    };
void _Hct_tone_set$(
  m.Scope scope$,
  Hct target$,
) =>
    (dynamic other$) {
      target$.tone = other$;
    };
Function _Hct_from$(m.Scope scope$) => Hct.from;
Function _Hct_eq$$(
  m.Scope scope$,
  Hct target$,
) =>
    (Object other$) => target$ == other$;
Function _Hct_toString$(
  m.Scope scope$,
  Hct target$,
) =>
    target$.toString;
Function _Hct_fromInt$(m.Scope scope$) => Hct.fromInt;
Function _Hct_toInt$(
  m.Scope scope$,
  Hct target$,
) =>
    target$.toInt;
