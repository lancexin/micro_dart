// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:dual_screen/src/two_pane.dart';
import 'dart:math';
import 'dart:ui' show DisplayFeature;
import 'package:flutter/widgets.dart';

const libraryMirror = m.LibraryMirror(
  'package:dual_screen/src/two_pane.dart',
  {
    'TwoPane.': _TwoPane__$,
    'TwoPanePriority.both': _TwoPanePriority_both$,
    'TwoPanePriority.start': _TwoPanePriority_start$,
    'TwoPanePriority.end': _TwoPanePriority_end$,
    'TwoPanePriority.values': _TwoPanePriority_values$,
    'TwoPaneAllowedOverrides.direction': _TwoPaneAllowedOverrides_direction$,
    'TwoPaneAllowedOverrides.panePriority':
        _TwoPaneAllowedOverrides_panePriority$,
    'TwoPaneAllowedOverrides.paneProportion':
        _TwoPaneAllowedOverrides_paneProportion$,
    'TwoPaneAllowedOverrides.values': _TwoPaneAllowedOverrides_values$,
  },
  {},
  {
    'TwoPane': m.ClassMirror(
      'TwoPane',
      {
        '#as': TwoPane_as$,
        '#is': TwoPane_is$,
        'startPane': _TwoPane_startPane$,
        'endPane': _TwoPane_endPane$,
        'paneProportion': _TwoPane_paneProportion$,
        'textDirection': _TwoPane_textDirection$,
        'verticalDirection': _TwoPane_verticalDirection$,
        'direction': _TwoPane_direction$,
        'panePriority': _TwoPane_panePriority$,
        'padding': _TwoPane_padding$,
        'allowedOverrides': _TwoPane_allowedOverrides$,
        'build': _TwoPane_build$,
      },
      {},
    ),
    'TwoPanePriority': m.ClassMirror(
      'TwoPanePriority',
      {},
      {},
    ),
    'TwoPaneAllowedOverrides': m.ClassMirror(
      'TwoPaneAllowedOverrides',
      {},
      {},
    ),
  },
);
Function TwoPane_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TwoPane;
Function TwoPane_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TwoPane;
Function _TwoPane_startPane$(
  m.Scope scope$,
  TwoPane target$,
) =>
    () {
      return target$.startPane;
    };
Function _TwoPane_endPane$(
  m.Scope scope$,
  TwoPane target$,
) =>
    () {
      return target$.endPane;
    };
Function _TwoPane_paneProportion$(
  m.Scope scope$,
  TwoPane target$,
) =>
    () {
      return target$.paneProportion;
    };
Function _TwoPane_textDirection$(
  m.Scope scope$,
  TwoPane target$,
) =>
    () {
      return target$.textDirection;
    };
Function _TwoPane_verticalDirection$(
  m.Scope scope$,
  TwoPane target$,
) =>
    () {
      return target$.verticalDirection;
    };
Function _TwoPane_direction$(
  m.Scope scope$,
  TwoPane target$,
) =>
    () {
      return target$.direction;
    };
Function _TwoPane_panePriority$(
  m.Scope scope$,
  TwoPane target$,
) =>
    () {
      return target$.panePriority;
    };
Function _TwoPane_padding$(
  m.Scope scope$,
  TwoPane target$,
) =>
    () {
      return target$.padding;
    };
Function _TwoPane_allowedOverrides$(
  m.Scope scope$,
  TwoPane target$,
) =>
    () {
      return target$.allowedOverrides;
    };
Function _TwoPane__$(m.Scope scope$) => ({
      Key? key,
      required Widget startPane,
      required Widget endPane,
      double? paneProportion,
      TextDirection? textDirection,
      VerticalDirection? verticalDirection,
      Axis? direction,
      TwoPanePriority? panePriority,
      EdgeInsets? padding,
      Set? allowedOverrides,
    }) {
      return TwoPane(
        allowedOverrides: allowedOverrides == null
            ? const {
                TwoPaneAllowedOverrides.paneProportion,
                TwoPaneAllowedOverrides.direction,
                TwoPaneAllowedOverrides.panePriority
              }
            : Set.from(allowedOverrides),
        direction: direction ?? Axis.horizontal,
        endPane: endPane,
        key: key,
        padding: padding ?? EdgeInsets.zero,
        panePriority: panePriority ?? TwoPanePriority.both,
        paneProportion: paneProportion ?? 0.5,
        startPane: startPane,
        textDirection: textDirection,
        verticalDirection: verticalDirection ?? VerticalDirection.down,
      );
    };
Function _TwoPane_build$(
  m.Scope scope$,
  TwoPane target$,
) =>
    target$.build;
Function _TwoPanePriority_both$(m.Scope scope$) => () => TwoPanePriority.both;
Function _TwoPanePriority_start$(m.Scope scope$) => () => TwoPanePriority.start;
Function _TwoPanePriority_end$(m.Scope scope$) => () => TwoPanePriority.end;
Function _TwoPanePriority_values$(m.Scope scope$) =>
    () => TwoPanePriority.values;
Function _TwoPaneAllowedOverrides_direction$(m.Scope scope$) =>
    () => TwoPaneAllowedOverrides.direction;
Function _TwoPaneAllowedOverrides_panePriority$(m.Scope scope$) =>
    () => TwoPaneAllowedOverrides.panePriority;
Function _TwoPaneAllowedOverrides_paneProportion$(m.Scope scope$) =>
    () => TwoPaneAllowedOverrides.paneProportion;
Function _TwoPaneAllowedOverrides_values$(m.Scope scope$) =>
    () => TwoPaneAllowedOverrides.values;
