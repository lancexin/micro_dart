// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:collection/src/boollist.dart';
import 'dart:collection' show ListMixin;
import 'dart:typed_data' show Uint32List;
import 'package:collection/src/unmodifiable_wrappers.dart'
    show NonGrowableListMixin;

const libraryMirror = m.LibraryMirror(
  'package:collection/src/boollist.dart',
  {
    'BoolList.': _BoolList__$,
    'BoolList.empty': _BoolList_empty_$,
    'BoolList.generate': _BoolList_generate_$,
    'BoolList.of': _BoolList_of_$,
  },
  {},
  {
    'BoolList': m.ClassMirror(
      'BoolList',
      {
        '#as': BoolList_as$,
        '#is': BoolList_is$,
        'length': _BoolList_length$,
        'iterator': _BoolList_iterator$,
        '[]': _BoolList_$index$$,
        '[]=': _BoolList_$index_set$$,
        'fillRange': _BoolList_fillRange$,
      },
      {},
    )
  },
);
Function BoolList_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as BoolList;
Function BoolList_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is BoolList;
Function _BoolList_length$(
  m.Scope scope$,
  BoolList target$,
) =>
    () {
      return target$.length;
    };
Function _BoolList_iterator$(
  m.Scope scope$,
  BoolList target$,
) =>
    () {
      return target$.iterator;
    };
Function _BoolList__$(m.Scope scope$) => (
      int length, {
      bool? fill,
      bool? growable,
    }) {
      return BoolList(
        length,
        fill: fill ?? false,
        growable: growable ?? false,
      );
    };
Function _BoolList_empty_$(m.Scope scope$) => BoolList.empty;
Function _BoolList_generate_$(m.Scope scope$) => (
      int length,
      m.FunctionPointer generator, {
      bool? growable,
    }) {
      bool generatorProxy(int generator_$p0$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            generator,
            [generator_$p0$],
            {},
          );
      return BoolList.generate(
        length,
        generatorProxy,
        growable: growable ?? true,
      );
    };
Function _BoolList_of_$(m.Scope scope$) => BoolList.of;
Function _BoolList_$index$$(
  m.Scope scope$,
  BoolList target$,
) =>
    (int index) => target$[index];
Function _BoolList_$index_set$$(
  m.Scope scope$,
  BoolList target$,
) =>
    (
      int index,
      bool other,
    ) =>
        target$[index] = other;
Function _BoolList_fillRange$(
  m.Scope scope$,
  BoolList target$,
) =>
    target$.fillRange;
