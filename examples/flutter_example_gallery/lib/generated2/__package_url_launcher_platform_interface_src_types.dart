// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:url_launcher_platform_interface/src/types.dart';
import 'package:flutter/foundation.dart';

const libraryMirror = m.LibraryMirror(
  'package:url_launcher_platform_interface/src/types.dart',
  {
    'InAppWebViewConfiguration.': _InAppWebViewConfiguration__$,
    'LaunchOptions.': _LaunchOptions__$,
    'PreferredLaunchMode.platformDefault':
        _PreferredLaunchMode_platformDefault$,
    'PreferredLaunchMode.inAppWebView': _PreferredLaunchMode_inAppWebView$,
    'PreferredLaunchMode.externalApplication':
        _PreferredLaunchMode_externalApplication$,
    'PreferredLaunchMode.externalNonBrowserApplication':
        _PreferredLaunchMode_externalNonBrowserApplication$,
    'PreferredLaunchMode.values': _PreferredLaunchMode_values$,
  },
  {},
  {
    'InAppWebViewConfiguration': m.ClassMirror(
      'InAppWebViewConfiguration',
      {
        '#as': InAppWebViewConfiguration_as$,
        '#is': InAppWebViewConfiguration_is$,
        'enableJavaScript': _InAppWebViewConfiguration_enableJavaScript$,
        'enableDomStorage': _InAppWebViewConfiguration_enableDomStorage$,
        'headers': _InAppWebViewConfiguration_headers$,
      },
      {},
    ),
    'LaunchOptions': m.ClassMirror(
      'LaunchOptions',
      {
        '#as': LaunchOptions_as$,
        '#is': LaunchOptions_is$,
        'mode': _LaunchOptions_mode$,
        'webViewConfiguration': _LaunchOptions_webViewConfiguration$,
        'webOnlyWindowName': _LaunchOptions_webOnlyWindowName$,
      },
      {},
    ),
    'PreferredLaunchMode': m.ClassMirror(
      'PreferredLaunchMode',
      {},
      {},
    ),
  },
);
Function InAppWebViewConfiguration_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as InAppWebViewConfiguration;
Function InAppWebViewConfiguration_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is InAppWebViewConfiguration;
Function _InAppWebViewConfiguration_enableJavaScript$(
  m.Scope scope$,
  InAppWebViewConfiguration target$,
) =>
    () {
      return target$.enableJavaScript;
    };
Function _InAppWebViewConfiguration_enableDomStorage$(
  m.Scope scope$,
  InAppWebViewConfiguration target$,
) =>
    () {
      return target$.enableDomStorage;
    };
Function _InAppWebViewConfiguration_headers$(
  m.Scope scope$,
  InAppWebViewConfiguration target$,
) =>
    () {
      return target$.headers;
    };
Function _InAppWebViewConfiguration__$(m.Scope scope$) => ({
      bool? enableJavaScript,
      bool? enableDomStorage,
      Map? headers,
    }) {
      return InAppWebViewConfiguration(
        enableDomStorage: enableDomStorage ?? true,
        enableJavaScript: enableJavaScript ?? true,
        headers: headers == null ? const <String, String>{} : Map.from(headers),
      );
    };
Function LaunchOptions_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as LaunchOptions;
Function LaunchOptions_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is LaunchOptions;
Function _LaunchOptions_mode$(
  m.Scope scope$,
  LaunchOptions target$,
) =>
    () {
      return target$.mode;
    };
Function _LaunchOptions_webViewConfiguration$(
  m.Scope scope$,
  LaunchOptions target$,
) =>
    () {
      return target$.webViewConfiguration;
    };
Function _LaunchOptions_webOnlyWindowName$(
  m.Scope scope$,
  LaunchOptions target$,
) =>
    () {
      return target$.webOnlyWindowName;
    };
Function _LaunchOptions__$(m.Scope scope$) => ({
      PreferredLaunchMode? mode,
      InAppWebViewConfiguration? webViewConfiguration,
      String? webOnlyWindowName,
    }) {
      return LaunchOptions(
        mode: mode ?? PreferredLaunchMode.platformDefault,
        webOnlyWindowName: webOnlyWindowName,
        webViewConfiguration:
            webViewConfiguration ?? const InAppWebViewConfiguration(),
      );
    };
Function _PreferredLaunchMode_platformDefault$(m.Scope scope$) =>
    () => PreferredLaunchMode.platformDefault;
Function _PreferredLaunchMode_inAppWebView$(m.Scope scope$) =>
    () => PreferredLaunchMode.inAppWebView;
Function _PreferredLaunchMode_externalApplication$(m.Scope scope$) =>
    () => PreferredLaunchMode.externalApplication;
Function _PreferredLaunchMode_externalNonBrowserApplication$(m.Scope scope$) =>
    () => PreferredLaunchMode.externalNonBrowserApplication;
Function _PreferredLaunchMode_values$(m.Scope scope$) =>
    () => PreferredLaunchMode.values;
