// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:intl/src/intl_helpers.dart';
import 'package:intl/src/global_state.dart';
import 'package:intl/src/intl_helpers.dart';

const libraryMirror = m.LibraryMirror(
  'package:intl/src/intl_helpers.dart',
  {
    'messageLookup': _messageLookup$,
    'UninitializedLocaleData.throwOnFallback':
        _UninitializedLocaleData_throwOnFallback$,
    'UninitializedLocaleData.': _UninitializedLocaleData__$,
    'LocaleDataException.': _LocaleDataException__$,
    'initializeInternalMessageLookup': _initializeInternalMessageLookup$,
    'computeMessageName': _computeMessageName$,
    'canonicalizedLocale': _canonicalizedLocale$,
    'verifiedLocale': _verifiedLocale$,
    'shortLocale': _shortLocale$,
  },
  {'messageLookup': _messageLookup_set$},
  {
    'UninitializedLocaleData': m.ClassMirror(
      'UninitializedLocaleData',
      {
        '#as': UninitializedLocaleData_as$,
        '#is': UninitializedLocaleData_is$,
        'message': _UninitializedLocaleData_message$,
        'fallbackData': _UninitializedLocaleData_fallbackData$,
        'keys': _UninitializedLocaleData_keys$,
        '[]': _UninitializedLocaleData_$index$$,
        'lookupMessage': _UninitializedLocaleData_lookupMessage$,
        'findLocale': _UninitializedLocaleData_findLocale$,
        'containsKey': _UninitializedLocaleData_containsKey$,
        'addLocale': _UninitializedLocaleData_addLocale$,
      },
      {},
    ),
    'MessageLookup': m.ClassMirror(
      'MessageLookup',
      {
        '#as': MessageLookup_as$,
        '#is': MessageLookup_is$,
        'lookupMessage': _MessageLookup_lookupMessage$,
        'addLocale': _MessageLookup_addLocale$,
      },
      {},
    ),
    'LocaleDataException': m.ClassMirror(
      'LocaleDataException',
      {
        '#as': LocaleDataException_as$,
        '#is': LocaleDataException_is$,
        'message': _LocaleDataException_message$,
        'toString': _LocaleDataException_toString$,
      },
      {},
    ),
    'LocaleDataReader': m.ClassMirror(
      'LocaleDataReader',
      {
        '#as': LocaleDataReader_as$,
        '#is': LocaleDataReader_is$,
        'read': _LocaleDataReader_read$,
      },
      {},
    ),
  },
);
Function _messageLookup$(m.Scope scope$) => () => messageLookup;
void _messageLookup_set$(MessageLookup other$) {
  messageLookup = other$;
}

Function UninitializedLocaleData_as$<F>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as UninitializedLocaleData<F>;
Function UninitializedLocaleData_is$<F>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is UninitializedLocaleData<F>;
Function _UninitializedLocaleData_message$<F>(
  m.Scope scope$,
  UninitializedLocaleData<F> target$,
) =>
    () {
      return target$.message;
    };
Function _UninitializedLocaleData_fallbackData$<F>(
  m.Scope scope$,
  UninitializedLocaleData<F> target$,
) =>
    () {
      return target$.fallbackData;
    };
Function _UninitializedLocaleData_throwOnFallback$(m.Scope scope$) =>
    () => UninitializedLocaleData.throwOnFallback;
Function _UninitializedLocaleData_keys$<F>(
  m.Scope scope$,
  UninitializedLocaleData<F> target$,
) =>
    () {
      return target$.keys;
    };
Function _UninitializedLocaleData__$(m.Scope scope$) => (
      String message,
      dynamic fallbackData,
    ) {
      return UninitializedLocaleData(
        message,
        fallbackData,
      );
    };
Function _UninitializedLocaleData_$index$$<F>(
  m.Scope scope$,
  UninitializedLocaleData<F> target$,
) =>
    (String index) => target$[index];
Function _UninitializedLocaleData_lookupMessage$(
  m.Scope scope$,
  UninitializedLocaleData target$,
) =>
    (
      String? messageText,
      String? locale,
      String? name,
      List? args,
      String? meaning, {
      m.FunctionPointer? ifAbsent,
    }) {
      String? ifAbsentProxy(
        String? ifAbsent_messageText$,
        List? ifAbsent_args$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            ifAbsent!,
            [
              ifAbsent_messageText$,
              ifAbsent_args$,
            ],
            {},
          );
      return target$.lookupMessage(
        messageText,
        locale,
        name,
        args == null ? null : List.from(args),
        meaning,
        ifAbsent: ifAbsent == null ? null : ifAbsentProxy,
      );
    };
Function _UninitializedLocaleData_findLocale$<F>(
  m.Scope scope$,
  UninitializedLocaleData<F> target$,
) =>
    target$.findLocale;
Function _UninitializedLocaleData_containsKey$<F>(
  m.Scope scope$,
  UninitializedLocaleData<F> target$,
) =>
    target$.containsKey;
Function _UninitializedLocaleData_addLocale$<F>(
  m.Scope scope$,
  UninitializedLocaleData<F> target$,
) =>
    target$.addLocale;
Function MessageLookup_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MessageLookup;
Function MessageLookup_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MessageLookup;
Function _MessageLookup_lookupMessage$(
  m.Scope scope$,
  MessageLookup target$,
) =>
    (
      String? messageText,
      String? locale,
      String? name,
      List? args,
      String? meaning, {
      m.FunctionPointer? ifAbsent,
    }) {
      String? ifAbsentProxy(
        String? ifAbsent_messageText$,
        List? ifAbsent_args$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            ifAbsent!,
            [
              ifAbsent_messageText$,
              ifAbsent_args$,
            ],
            {},
          );
      return target$.lookupMessage(
        messageText,
        locale,
        name,
        args == null ? null : List.from(args),
        meaning,
        ifAbsent: ifAbsent == null ? null : ifAbsentProxy,
      );
    };
Function _MessageLookup_addLocale$(
  m.Scope scope$,
  MessageLookup target$,
) =>
    target$.addLocale;
Function LocaleDataException_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as LocaleDataException;
Function LocaleDataException_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is LocaleDataException;
Function _LocaleDataException_message$(
  m.Scope scope$,
  LocaleDataException target$,
) =>
    () {
      return target$.message;
    };
Function _LocaleDataException__$(m.Scope scope$) => (String message) {
      return LocaleDataException(message);
    };
Function _LocaleDataException_toString$(
  m.Scope scope$,
  LocaleDataException target$,
) =>
    target$.toString;
Function LocaleDataReader_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as LocaleDataReader;
Function LocaleDataReader_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is LocaleDataReader;
Function _LocaleDataReader_read$(
  m.Scope scope$,
  LocaleDataReader target$,
) =>
    target$.read;
Function _initializeInternalMessageLookup$(m.Scope scope$) =>
    initializeInternalMessageLookup;
Function _computeMessageName$(m.Scope scope$) => computeMessageName;
Function _canonicalizedLocale$(m.Scope scope$) => canonicalizedLocale;
Function _verifiedLocale$(m.Scope scope$) => (
      String? newLocale,
      m.FunctionPointer localeExists,
      m.FunctionPointer? onFailure,
    ) {
      bool localeExistsProxy(String localeExists_$p0$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            localeExists,
            [localeExists_$p0$],
            {},
          );
      String? onFailureProxy(String onFailure_$p0$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onFailure!,
            [onFailure_$p0$],
            {},
          );
      return verifiedLocale(
        newLocale,
        localeExistsProxy,
        onFailure == null ? null : onFailureProxy,
      );
    };
Function _shortLocale$(m.Scope scope$) => shortLocale;
