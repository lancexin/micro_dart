// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:characters/src/characters.dart';
import 'package:characters/src/characters_impl.dart';

const libraryMirror = m.LibraryMirror(
  'package:characters/src/characters.dart',
  {
    'Characters.empty': _Characters_empty$,
    'Characters.': _Characters__$,
    'CharacterRange.': _CharacterRange__$,
    'CharacterRange.at': _CharacterRange_at_$,
  },
  {},
  {
    'Characters': m.ClassMirror(
      'Characters',
      {
        '#as': Characters_as$,
        '#is': Characters_is$,
        'string': _Characters_string$,
        'iterator': _Characters_iterator$,
        'iteratorAtEnd': _Characters_iteratorAtEnd$,
        'hashCode': _Characters_hashCode$,
        'contains': _Characters_contains$,
        'containsAll': _Characters_containsAll$,
        'startsWith': _Characters_startsWith$,
        'endsWith': _Characters_endsWith$,
        'findFirst': _Characters_findFirst$,
        'findLast': _Characters_findLast$,
        'where': _Characters_where$,
        'skip': _Characters_skip$,
        'take': _Characters_take$,
        'getRange': _Characters_getRange$,
        'characterAt': _Characters_characterAt$,
        'skipLast': _Characters_skipLast$,
        'takeLast': _Characters_takeLast$,
        'skipWhile': _Characters_skipWhile$,
        'takeWhile': _Characters_takeWhile$,
        'skipLastWhile': _Characters_skipLastWhile$,
        'takeLastWhile': _Characters_takeLastWhile$,
        '+': _Characters_plus$$,
        'replaceAll': _Characters_replaceAll$,
        'split': _Characters_split$,
        'replaceFirst': _Characters_replaceFirst$,
        'toLowerCase': _Characters_toLowerCase$,
        'toUpperCase': _Characters_toUpperCase$,
        '==': _Characters_eq$$,
        'toString': _Characters_toString$,
      },
      {},
    ),
    'CharacterRange': m.ClassMirror(
      'CharacterRange',
      {
        '#as': CharacterRange_as$,
        '#is': CharacterRange_is$,
        'source': _CharacterRange_source$,
        'utf16CodeUnits': _CharacterRange_utf16CodeUnits$,
        'runes': _CharacterRange_runes$,
        'currentCharacters': _CharacterRange_currentCharacters$,
        'charactersBefore': _CharacterRange_charactersBefore$,
        'charactersAfter': _CharacterRange_charactersAfter$,
        'stringBefore': _CharacterRange_stringBefore$,
        'stringBeforeLength': _CharacterRange_stringBeforeLength$,
        'stringAfter': _CharacterRange_stringAfter$,
        'stringAfterLength': _CharacterRange_stringAfterLength$,
        'isEmpty': _CharacterRange_isEmpty$,
        'isNotEmpty': _CharacterRange_isNotEmpty$,
        'copy': _CharacterRange_copy$,
        'moveNext': _CharacterRange_moveNext$,
        'moveNextAll': _CharacterRange_moveNextAll$,
        'moveTo': _CharacterRange_moveTo$,
        'moveUntil': _CharacterRange_moveUntil$,
        'moveBack': _CharacterRange_moveBack$,
        'moveBackAll': _CharacterRange_moveBackAll$,
        'moveBackTo': _CharacterRange_moveBackTo$,
        'moveBackUntil': _CharacterRange_moveBackUntil$,
        'expandNext': _CharacterRange_expandNext$,
        'expandTo': _CharacterRange_expandTo$,
        'expandUntil': _CharacterRange_expandUntil$,
        'expandWhile': _CharacterRange_expandWhile$,
        'expandAll': _CharacterRange_expandAll$,
        'expandBack': _CharacterRange_expandBack$,
        'expandBackTo': _CharacterRange_expandBackTo$,
        'expandBackUntil': _CharacterRange_expandBackUntil$,
        'expandBackWhile': _CharacterRange_expandBackWhile$,
        'expandBackAll': _CharacterRange_expandBackAll$,
        'collapseToStart': _CharacterRange_collapseToStart$,
        'collapseToFirst': _CharacterRange_collapseToFirst$,
        'collapseToLast': _CharacterRange_collapseToLast$,
        'collapseToEnd': _CharacterRange_collapseToEnd$,
        'dropFirst': _CharacterRange_dropFirst$,
        'dropTo': _CharacterRange_dropTo$,
        'dropUntil': _CharacterRange_dropUntil$,
        'dropWhile': _CharacterRange_dropWhile$,
        'dropLast': _CharacterRange_dropLast$,
        'dropBackTo': _CharacterRange_dropBackTo$,
        'dropBackUntil': _CharacterRange_dropBackUntil$,
        'dropBackWhile': _CharacterRange_dropBackWhile$,
        'replaceRange': _CharacterRange_replaceRange$,
        'replaceAll': _CharacterRange_replaceAll$,
        'split': _CharacterRange_split$,
        'replaceFirst': _CharacterRange_replaceFirst$,
        'startsWith': _CharacterRange_startsWith$,
        'endsWith': _CharacterRange_endsWith$,
        'isPrecededBy': _CharacterRange_isPrecededBy$,
        'isFollowedBy': _CharacterRange_isFollowedBy$,
      },
      {},
    ),
  },
);
Function Characters_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Characters;
Function Characters_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Characters;
Function _Characters_empty$(m.Scope scope$) => () => Characters.empty;
Function _Characters_string$(
  m.Scope scope$,
  Characters target$,
) =>
    () {
      return target$.string;
    };
Function _Characters_iterator$(
  m.Scope scope$,
  Characters target$,
) =>
    () {
      return target$.iterator;
    };
Function _Characters_iteratorAtEnd$(
  m.Scope scope$,
  Characters target$,
) =>
    () {
      return target$.iteratorAtEnd;
    };
Function _Characters_hashCode$(
  m.Scope scope$,
  Characters target$,
) =>
    () {
      return target$.hashCode;
    };
Function _Characters__$(m.Scope scope$) => (String string) {
      return Characters(string);
    };
Function _Characters_contains$(
  m.Scope scope$,
  Characters target$,
) =>
    target$.contains;
Function _Characters_containsAll$(
  m.Scope scope$,
  Characters target$,
) =>
    target$.containsAll;
Function _Characters_startsWith$(
  m.Scope scope$,
  Characters target$,
) =>
    target$.startsWith;
Function _Characters_endsWith$(
  m.Scope scope$,
  Characters target$,
) =>
    target$.endsWith;
Function _Characters_findFirst$(
  m.Scope scope$,
  Characters target$,
) =>
    target$.findFirst;
Function _Characters_findLast$(
  m.Scope scope$,
  Characters target$,
) =>
    target$.findLast;
Function _Characters_where$(
  m.Scope scope$,
  Characters target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(String test_$p0$) => scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_$p0$],
            {},
          );
      return target$.where(testProxy);
    };
Function _Characters_skip$(
  m.Scope scope$,
  Characters target$,
) =>
    target$.skip;
Function _Characters_take$(
  m.Scope scope$,
  Characters target$,
) =>
    target$.take;
Function _Characters_getRange$(
  m.Scope scope$,
  Characters target$,
) =>
    target$.getRange;
Function _Characters_characterAt$(
  m.Scope scope$,
  Characters target$,
) =>
    target$.characterAt;
Function _Characters_skipLast$(
  m.Scope scope$,
  Characters target$,
) =>
    target$.skipLast;
Function _Characters_takeLast$(
  m.Scope scope$,
  Characters target$,
) =>
    target$.takeLast;
Function _Characters_skipWhile$(
  m.Scope scope$,
  Characters target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(String test_$p0$) => scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_$p0$],
            {},
          );
      return target$.skipWhile(testProxy);
    };
Function _Characters_takeWhile$(
  m.Scope scope$,
  Characters target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(String test_$p0$) => scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_$p0$],
            {},
          );
      return target$.takeWhile(testProxy);
    };
Function _Characters_skipLastWhile$(
  m.Scope scope$,
  Characters target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(String test_$p0$) => scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_$p0$],
            {},
          );
      return target$.skipLastWhile(testProxy);
    };
Function _Characters_takeLastWhile$(
  m.Scope scope$,
  Characters target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(String test_$p0$) => scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_$p0$],
            {},
          );
      return target$.takeLastWhile(testProxy);
    };
Function _Characters_plus$$(
  m.Scope scope$,
  Characters target$,
) =>
    (Characters other$) => target$ + other$;
Function _Characters_replaceAll$(
  m.Scope scope$,
  Characters target$,
) =>
    target$.replaceAll;
Function _Characters_split$(
  m.Scope scope$,
  Characters target$,
) =>
    target$.split;
Function _Characters_replaceFirst$(
  m.Scope scope$,
  Characters target$,
) =>
    target$.replaceFirst;
Function _Characters_toLowerCase$(
  m.Scope scope$,
  Characters target$,
) =>
    target$.toLowerCase;
Function _Characters_toUpperCase$(
  m.Scope scope$,
  Characters target$,
) =>
    target$.toUpperCase;
Function _Characters_eq$$(
  m.Scope scope$,
  Characters target$,
) =>
    (Object other$) => target$ == other$;
Function _Characters_toString$(
  m.Scope scope$,
  Characters target$,
) =>
    target$.toString;
Function CharacterRange_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CharacterRange;
Function CharacterRange_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CharacterRange;
Function _CharacterRange_source$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    () {
      return target$.source;
    };
Function _CharacterRange_utf16CodeUnits$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    () {
      return target$.utf16CodeUnits;
    };
Function _CharacterRange_runes$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    () {
      return target$.runes;
    };
Function _CharacterRange_currentCharacters$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    () {
      return target$.currentCharacters;
    };
Function _CharacterRange_charactersBefore$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    () {
      return target$.charactersBefore;
    };
Function _CharacterRange_charactersAfter$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    () {
      return target$.charactersAfter;
    };
Function _CharacterRange_stringBefore$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    () {
      return target$.stringBefore;
    };
Function _CharacterRange_stringBeforeLength$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    () {
      return target$.stringBeforeLength;
    };
Function _CharacterRange_stringAfter$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    () {
      return target$.stringAfter;
    };
Function _CharacterRange_stringAfterLength$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    () {
      return target$.stringAfterLength;
    };
Function _CharacterRange_isEmpty$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    () {
      return target$.isEmpty;
    };
Function _CharacterRange_isNotEmpty$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    () {
      return target$.isNotEmpty;
    };
Function _CharacterRange__$(m.Scope scope$) => (String string) {
      return CharacterRange(string);
    };
Function _CharacterRange_at_$(m.Scope scope$) => CharacterRange.at;
Function _CharacterRange_copy$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.copy;
Function _CharacterRange_moveNext$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.moveNext;
Function _CharacterRange_moveNextAll$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.moveNextAll;
Function _CharacterRange_moveTo$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.moveTo;
Function _CharacterRange_moveUntil$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.moveUntil;
Function _CharacterRange_moveBack$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.moveBack;
Function _CharacterRange_moveBackAll$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.moveBackAll;
Function _CharacterRange_moveBackTo$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.moveBackTo;
Function _CharacterRange_moveBackUntil$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.moveBackUntil;
Function _CharacterRange_expandNext$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.expandNext;
Function _CharacterRange_expandTo$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.expandTo;
Function _CharacterRange_expandUntil$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.expandUntil;
Function _CharacterRange_expandWhile$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(String test_$p0$) => scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_$p0$],
            {},
          );
      target$.expandWhile(testProxy);
    };
Function _CharacterRange_expandAll$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.expandAll;
Function _CharacterRange_expandBack$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.expandBack;
Function _CharacterRange_expandBackTo$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.expandBackTo;
Function _CharacterRange_expandBackUntil$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.expandBackUntil;
Function _CharacterRange_expandBackWhile$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(String test_$p0$) => scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_$p0$],
            {},
          );
      target$.expandBackWhile(testProxy);
    };
Function _CharacterRange_expandBackAll$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.expandBackAll;
Function _CharacterRange_collapseToStart$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.collapseToStart;
Function _CharacterRange_collapseToFirst$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.collapseToFirst;
Function _CharacterRange_collapseToLast$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.collapseToLast;
Function _CharacterRange_collapseToEnd$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.collapseToEnd;
Function _CharacterRange_dropFirst$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.dropFirst;
Function _CharacterRange_dropTo$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.dropTo;
Function _CharacterRange_dropUntil$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.dropUntil;
Function _CharacterRange_dropWhile$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(String test_$p0$) => scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_$p0$],
            {},
          );
      target$.dropWhile(testProxy);
    };
Function _CharacterRange_dropLast$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.dropLast;
Function _CharacterRange_dropBackTo$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.dropBackTo;
Function _CharacterRange_dropBackUntil$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.dropBackUntil;
Function _CharacterRange_dropBackWhile$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(String test_$p0$) => scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_$p0$],
            {},
          );
      target$.dropBackWhile(testProxy);
    };
Function _CharacterRange_replaceRange$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.replaceRange;
Function _CharacterRange_replaceAll$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.replaceAll;
Function _CharacterRange_split$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.split;
Function _CharacterRange_replaceFirst$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.replaceFirst;
Function _CharacterRange_startsWith$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.startsWith;
Function _CharacterRange_endsWith$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.endsWith;
Function _CharacterRange_isPrecededBy$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.isPrecededBy;
Function _CharacterRange_isFollowedBy$(
  m.Scope scope$,
  CharacterRange target$,
) =>
    target$.isFollowedBy;
