// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:platform/src/interface/platform.dart';
import 'dart:convert';

const libraryMirror = m.LibraryMirror(
  'package:platform/src/interface/platform.dart',
  {
    'Platform.linux': _Platform_linux$,
    'Platform.windows': _Platform_windows$,
    'Platform.macOS': _Platform_macOS$,
    'Platform.android': _Platform_android$,
    'Platform.iOS': _Platform_iOS$,
    'Platform.fuchsia': _Platform_fuchsia$,
    'Platform.operatingSystemValues': _Platform_operatingSystemValues$,
  },
  {},
  {
    'Platform': m.ClassMirror(
      'Platform',
      {
        '#as': Platform_as$,
        '#is': Platform_is$,
        'numberOfProcessors': _Platform_numberOfProcessors$,
        'pathSeparator': _Platform_pathSeparator$,
        'operatingSystem': _Platform_operatingSystem$,
        'operatingSystemVersion': _Platform_operatingSystemVersion$,
        'localHostname': _Platform_localHostname$,
        'isLinux': _Platform_isLinux$,
        'isMacOS': _Platform_isMacOS$,
        'isWindows': _Platform_isWindows$,
        'isAndroid': _Platform_isAndroid$,
        'isIOS': _Platform_isIOS$,
        'isFuchsia': _Platform_isFuchsia$,
        'environment': _Platform_environment$,
        'executable': _Platform_executable$,
        'resolvedExecutable': _Platform_resolvedExecutable$,
        'script': _Platform_script$,
        'executableArguments': _Platform_executableArguments$,
        'packageConfig': _Platform_packageConfig$,
        'version': _Platform_version$,
        'stdinSupportsAnsi': _Platform_stdinSupportsAnsi$,
        'stdoutSupportsAnsi': _Platform_stdoutSupportsAnsi$,
        'localeName': _Platform_localeName$,
        'toJson': _Platform_toJson$,
      },
      {},
    )
  },
);
Function Platform_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Platform;
Function Platform_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Platform;
Function _Platform_linux$(m.Scope scope$) => () => Platform.linux;
Function _Platform_windows$(m.Scope scope$) => () => Platform.windows;
Function _Platform_macOS$(m.Scope scope$) => () => Platform.macOS;
Function _Platform_android$(m.Scope scope$) => () => Platform.android;
Function _Platform_iOS$(m.Scope scope$) => () => Platform.iOS;
Function _Platform_fuchsia$(m.Scope scope$) => () => Platform.fuchsia;
Function _Platform_operatingSystemValues$(m.Scope scope$) =>
    () => Platform.operatingSystemValues;
Function _Platform_numberOfProcessors$(
  m.Scope scope$,
  Platform target$,
) =>
    () {
      return target$.numberOfProcessors;
    };
Function _Platform_pathSeparator$(
  m.Scope scope$,
  Platform target$,
) =>
    () {
      return target$.pathSeparator;
    };
Function _Platform_operatingSystem$(
  m.Scope scope$,
  Platform target$,
) =>
    () {
      return target$.operatingSystem;
    };
Function _Platform_operatingSystemVersion$(
  m.Scope scope$,
  Platform target$,
) =>
    () {
      return target$.operatingSystemVersion;
    };
Function _Platform_localHostname$(
  m.Scope scope$,
  Platform target$,
) =>
    () {
      return target$.localHostname;
    };
Function _Platform_isLinux$(
  m.Scope scope$,
  Platform target$,
) =>
    () {
      return target$.isLinux;
    };
Function _Platform_isMacOS$(
  m.Scope scope$,
  Platform target$,
) =>
    () {
      return target$.isMacOS;
    };
Function _Platform_isWindows$(
  m.Scope scope$,
  Platform target$,
) =>
    () {
      return target$.isWindows;
    };
Function _Platform_isAndroid$(
  m.Scope scope$,
  Platform target$,
) =>
    () {
      return target$.isAndroid;
    };
Function _Platform_isIOS$(
  m.Scope scope$,
  Platform target$,
) =>
    () {
      return target$.isIOS;
    };
Function _Platform_isFuchsia$(
  m.Scope scope$,
  Platform target$,
) =>
    () {
      return target$.isFuchsia;
    };
Function _Platform_environment$(
  m.Scope scope$,
  Platform target$,
) =>
    () {
      return target$.environment;
    };
Function _Platform_executable$(
  m.Scope scope$,
  Platform target$,
) =>
    () {
      return target$.executable;
    };
Function _Platform_resolvedExecutable$(
  m.Scope scope$,
  Platform target$,
) =>
    () {
      return target$.resolvedExecutable;
    };
Function _Platform_script$(
  m.Scope scope$,
  Platform target$,
) =>
    () {
      return target$.script;
    };
Function _Platform_executableArguments$(
  m.Scope scope$,
  Platform target$,
) =>
    () {
      return target$.executableArguments;
    };
Function _Platform_packageConfig$(
  m.Scope scope$,
  Platform target$,
) =>
    () {
      return target$.packageConfig;
    };
Function _Platform_version$(
  m.Scope scope$,
  Platform target$,
) =>
    () {
      return target$.version;
    };
Function _Platform_stdinSupportsAnsi$(
  m.Scope scope$,
  Platform target$,
) =>
    () {
      return target$.stdinSupportsAnsi;
    };
Function _Platform_stdoutSupportsAnsi$(
  m.Scope scope$,
  Platform target$,
) =>
    () {
      return target$.stdoutSupportsAnsi;
    };
Function _Platform_localeName$(
  m.Scope scope$,
  Platform target$,
) =>
    () {
      return target$.localeName;
    };
Function _Platform_toJson$(
  m.Scope scope$,
  Platform target$,
) =>
    target$.toJson;
