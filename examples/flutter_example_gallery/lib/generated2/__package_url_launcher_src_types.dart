// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:url_launcher/src/types.dart';
import 'package:flutter/foundation.dart';

const libraryMirror = m.LibraryMirror(
  'package:url_launcher/src/types.dart',
  {
    'WebViewConfiguration.': _WebViewConfiguration__$,
    'LaunchMode.platformDefault': _LaunchMode_platformDefault$,
    'LaunchMode.inAppWebView': _LaunchMode_inAppWebView$,
    'LaunchMode.externalApplication': _LaunchMode_externalApplication$,
    'LaunchMode.externalNonBrowserApplication':
        _LaunchMode_externalNonBrowserApplication$,
    'LaunchMode.values': _LaunchMode_values$,
  },
  {},
  {
    'WebViewConfiguration': m.ClassMirror(
      'WebViewConfiguration',
      {
        '#as': WebViewConfiguration_as$,
        '#is': WebViewConfiguration_is$,
        'enableJavaScript': _WebViewConfiguration_enableJavaScript$,
        'enableDomStorage': _WebViewConfiguration_enableDomStorage$,
        'headers': _WebViewConfiguration_headers$,
      },
      {},
    ),
    'LaunchMode': m.ClassMirror(
      'LaunchMode',
      {},
      {},
    ),
  },
);
Function WebViewConfiguration_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as WebViewConfiguration;
Function WebViewConfiguration_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is WebViewConfiguration;
Function _WebViewConfiguration_enableJavaScript$(
  m.Scope scope$,
  WebViewConfiguration target$,
) =>
    () {
      return target$.enableJavaScript;
    };
Function _WebViewConfiguration_enableDomStorage$(
  m.Scope scope$,
  WebViewConfiguration target$,
) =>
    () {
      return target$.enableDomStorage;
    };
Function _WebViewConfiguration_headers$(
  m.Scope scope$,
  WebViewConfiguration target$,
) =>
    () {
      return target$.headers;
    };
Function _WebViewConfiguration__$(m.Scope scope$) => ({
      bool? enableJavaScript,
      bool? enableDomStorage,
      Map? headers,
    }) {
      return WebViewConfiguration(
        enableDomStorage: enableDomStorage ?? true,
        enableJavaScript: enableJavaScript ?? true,
        headers: headers == null ? const <String, String>{} : Map.from(headers),
      );
    };
Function _LaunchMode_platformDefault$(m.Scope scope$) =>
    () => LaunchMode.platformDefault;
Function _LaunchMode_inAppWebView$(m.Scope scope$) =>
    () => LaunchMode.inAppWebView;
Function _LaunchMode_externalApplication$(m.Scope scope$) =>
    () => LaunchMode.externalApplication;
Function _LaunchMode_externalNonBrowserApplication$(m.Scope scope$) =>
    () => LaunchMode.externalNonBrowserApplication;
Function _LaunchMode_values$(m.Scope scope$) => () => LaunchMode.values;
