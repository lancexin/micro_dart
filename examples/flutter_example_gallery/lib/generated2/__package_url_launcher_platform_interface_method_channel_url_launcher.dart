// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:url_launcher_platform_interface/method_channel_url_launcher.dart';
import 'dart:async';
import 'package:flutter/services.dart';
import 'package:url_launcher_platform_interface/link.dart';
import 'package:url_launcher_platform_interface/url_launcher_platform_interface.dart';

const libraryMirror = m.LibraryMirror(
  'package:url_launcher_platform_interface/method_channel_url_launcher.dart',
  {'MethodChannelUrlLauncher.': _MethodChannelUrlLauncher__$},
  {},
  {
    'MethodChannelUrlLauncher': m.ClassMirror(
      'MethodChannelUrlLauncher',
      {
        '#as': MethodChannelUrlLauncher_as$,
        '#is': MethodChannelUrlLauncher_is$,
        'linkDelegate': _MethodChannelUrlLauncher_linkDelegate$,
        'canLaunch': _MethodChannelUrlLauncher_canLaunch$,
        'closeWebView': _MethodChannelUrlLauncher_closeWebView$,
        'launch': _MethodChannelUrlLauncher_launch$,
      },
      {},
    )
  },
);
Function MethodChannelUrlLauncher_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MethodChannelUrlLauncher;
Function MethodChannelUrlLauncher_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MethodChannelUrlLauncher;
Function _MethodChannelUrlLauncher_linkDelegate$(
  m.Scope scope$,
  MethodChannelUrlLauncher target$,
) =>
    () {
      return target$.linkDelegate;
    };
Function _MethodChannelUrlLauncher__$(m.Scope scope$) => () {
      return MethodChannelUrlLauncher();
    };
Function _MethodChannelUrlLauncher_canLaunch$(
  m.Scope scope$,
  MethodChannelUrlLauncher target$,
) =>
    target$.canLaunch;
Function _MethodChannelUrlLauncher_closeWebView$(
  m.Scope scope$,
  MethodChannelUrlLauncher target$,
) =>
    target$.closeWebView;
Function _MethodChannelUrlLauncher_launch$(
  m.Scope scope$,
  MethodChannelUrlLauncher target$,
) =>
    target$.launch;
