// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:intl/src/intl/bidi_formatter.dart';
import 'dart:convert';
import 'package:intl/src/intl/bidi.dart';
import 'package:intl/src/intl/text_direction.dart';

const libraryMirror = m.LibraryMirror(
  'package:intl/src/intl/bidi_formatter.dart',
  {
    'BidiFormatter.LTR': _BidiFormatter_LTR_$,
    'BidiFormatter.RTL': _BidiFormatter_RTL_$,
    'BidiFormatter.UNKNOWN': _BidiFormatter_UNKNOWN_$,
  },
  {},
  {
    'BidiFormatter': m.ClassMirror(
      'BidiFormatter',
      {
        '#as': BidiFormatter_as$,
        '#is': BidiFormatter_is$,
        'contextDirection': _BidiFormatter_contextDirection$,
        'isRTL': _BidiFormatter_isRTL$,
        'wrapWithSpan': _BidiFormatter_wrapWithSpan$,
        'wrapWithUnicode': _BidiFormatter_wrapWithUnicode$,
        'estimateDirection': _BidiFormatter_estimateDirection$,
      },
      {'contextDirection': _BidiFormatter_contextDirection_set$},
    )
  },
);
Function BidiFormatter_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as BidiFormatter;
Function BidiFormatter_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is BidiFormatter;
Function _BidiFormatter_contextDirection$(
  m.Scope scope$,
  BidiFormatter target$,
) =>
    () {
      return target$.contextDirection;
    };
void _BidiFormatter_contextDirection_set$(
  m.Scope scope$,
  BidiFormatter target$,
) =>
    (dynamic other$) {
      target$.contextDirection = other$;
    };
Function _BidiFormatter_isRTL$(
  m.Scope scope$,
  BidiFormatter target$,
) =>
    () {
      return target$.isRTL;
    };
Function _BidiFormatter_LTR_$(m.Scope scope$) => BidiFormatter.LTR;
Function _BidiFormatter_RTL_$(m.Scope scope$) => BidiFormatter.RTL;
Function _BidiFormatter_UNKNOWN_$(m.Scope scope$) => BidiFormatter.UNKNOWN;
Function _BidiFormatter_wrapWithSpan$(
  m.Scope scope$,
  BidiFormatter target$,
) =>
    target$.wrapWithSpan;
Function _BidiFormatter_wrapWithUnicode$(
  m.Scope scope$,
  BidiFormatter target$,
) =>
    target$.wrapWithUnicode;
Function _BidiFormatter_estimateDirection$(
  m.Scope scope$,
  BidiFormatter target$,
) =>
    target$.estimateDirection;
