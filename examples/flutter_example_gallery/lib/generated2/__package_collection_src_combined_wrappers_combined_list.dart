// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:collection/src/combined_wrappers/combined_list.dart';
import 'dart:collection';
import 'package:collection/src/combined_wrappers/combined_iterator.dart';

const libraryMirror = m.LibraryMirror(
  'package:collection/src/combined_wrappers/combined_list.dart',
  {'CombinedListView.': _CombinedListView__$},
  {},
  {
    'CombinedListView': m.ClassMirror(
      'CombinedListView',
      {
        '#as': CombinedListView_as$,
        '#is': CombinedListView_is$,
        'iterator': _CombinedListView_iterator$,
        'length': _CombinedListView_length$,
        '[]': _CombinedListView_$index$$,
        '[]=': _CombinedListView_$index_set$$,
        'clear': _CombinedListView_clear$,
        'remove': _CombinedListView_remove$,
        'removeWhere': _CombinedListView_removeWhere$,
        'retainWhere': _CombinedListView_retainWhere$,
      },
      {'length': _CombinedListView_length_set$},
    )
  },
);
Function CombinedListView_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CombinedListView<T>;
Function CombinedListView_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CombinedListView<T>;
Function _CombinedListView_iterator$<T>(
  m.Scope scope$,
  CombinedListView<T> target$,
) =>
    () {
      return target$.iterator;
    };
void _CombinedListView_length_set$<T>(
  m.Scope scope$,
  CombinedListView target$,
) =>
    (dynamic other$) {
      target$.length = other$;
    };
Function _CombinedListView_length$<T>(
  m.Scope scope$,
  CombinedListView<T> target$,
) =>
    () {
      return target$.length;
    };
Function _CombinedListView__$(m.Scope scope$) => (List _lists) {
      return CombinedListView(List.from(_lists));
    };
Function _CombinedListView_$index$$<T>(
  m.Scope scope$,
  CombinedListView<T> target$,
) =>
    (int index) => target$[index];
Function _CombinedListView_$index_set$$<T>(
  m.Scope scope$,
  CombinedListView<T> target$,
) =>
    (
      int index,
      T other,
    ) =>
        target$[index] = other;
Function _CombinedListView_clear$<T>(
  m.Scope scope$,
  CombinedListView<T> target$,
) =>
    target$.clear;
Function _CombinedListView_remove$<T>(
  m.Scope scope$,
  CombinedListView<T> target$,
) =>
    target$.remove;
Function _CombinedListView_removeWhere$(
  m.Scope scope$,
  CombinedListView target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(dynamic test_$p0$) => scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_$p0$],
            {},
          );
      target$.removeWhere(testProxy);
    };
Function _CombinedListView_retainWhere$(
  m.Scope scope$,
  CombinedListView target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(dynamic test_$p0$) => scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_$p0$],
            {},
          );
      target$.retainWhere(testProxy);
    };
