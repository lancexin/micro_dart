// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:intl/number_symbols.dart';

const libraryMirror = m.LibraryMirror(
  'package:intl/number_symbols.dart',
  {
    'NumberSymbols.': _NumberSymbols__$,
    'CompactNumberSymbols.': _CompactNumberSymbols__$,
  },
  {},
  {
    'NumberSymbols': m.ClassMirror(
      'NumberSymbols',
      {
        '#as': NumberSymbols_as$,
        '#is': NumberSymbols_is$,
        'NAME': _NumberSymbols_NAME$,
        'DECIMAL_SEP': _NumberSymbols_DECIMAL_SEP$,
        'GROUP_SEP': _NumberSymbols_GROUP_SEP$,
        'PERCENT': _NumberSymbols_PERCENT$,
        'ZERO_DIGIT': _NumberSymbols_ZERO_DIGIT$,
        'PLUS_SIGN': _NumberSymbols_PLUS_SIGN$,
        'MINUS_SIGN': _NumberSymbols_MINUS_SIGN$,
        'EXP_SYMBOL': _NumberSymbols_EXP_SYMBOL$,
        'PERMILL': _NumberSymbols_PERMILL$,
        'INFINITY': _NumberSymbols_INFINITY$,
        'NAN': _NumberSymbols_NAN$,
        'DECIMAL_PATTERN': _NumberSymbols_DECIMAL_PATTERN$,
        'SCIENTIFIC_PATTERN': _NumberSymbols_SCIENTIFIC_PATTERN$,
        'PERCENT_PATTERN': _NumberSymbols_PERCENT_PATTERN$,
        'CURRENCY_PATTERN': _NumberSymbols_CURRENCY_PATTERN$,
        'DEF_CURRENCY_CODE': _NumberSymbols_DEF_CURRENCY_CODE$,
        'toString': _NumberSymbols_toString$,
      },
      {},
    ),
    'CompactNumberSymbols': m.ClassMirror(
      'CompactNumberSymbols',
      {
        '#as': CompactNumberSymbols_as$,
        '#is': CompactNumberSymbols_is$,
        'COMPACT_DECIMAL_SHORT_PATTERN':
            _CompactNumberSymbols_COMPACT_DECIMAL_SHORT_PATTERN$,
        'COMPACT_DECIMAL_LONG_PATTERN':
            _CompactNumberSymbols_COMPACT_DECIMAL_LONG_PATTERN$,
        'COMPACT_DECIMAL_SHORT_CURRENCY_PATTERN':
            _CompactNumberSymbols_COMPACT_DECIMAL_SHORT_CURRENCY_PATTERN$,
      },
      {},
    ),
  },
);
Function NumberSymbols_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as NumberSymbols;
Function NumberSymbols_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is NumberSymbols;
Function _NumberSymbols_NAME$(
  m.Scope scope$,
  NumberSymbols target$,
) =>
    () {
      return target$.NAME;
    };
Function _NumberSymbols_DECIMAL_SEP$(
  m.Scope scope$,
  NumberSymbols target$,
) =>
    () {
      return target$.DECIMAL_SEP;
    };
Function _NumberSymbols_GROUP_SEP$(
  m.Scope scope$,
  NumberSymbols target$,
) =>
    () {
      return target$.GROUP_SEP;
    };
Function _NumberSymbols_PERCENT$(
  m.Scope scope$,
  NumberSymbols target$,
) =>
    () {
      return target$.PERCENT;
    };
Function _NumberSymbols_ZERO_DIGIT$(
  m.Scope scope$,
  NumberSymbols target$,
) =>
    () {
      return target$.ZERO_DIGIT;
    };
Function _NumberSymbols_PLUS_SIGN$(
  m.Scope scope$,
  NumberSymbols target$,
) =>
    () {
      return target$.PLUS_SIGN;
    };
Function _NumberSymbols_MINUS_SIGN$(
  m.Scope scope$,
  NumberSymbols target$,
) =>
    () {
      return target$.MINUS_SIGN;
    };
Function _NumberSymbols_EXP_SYMBOL$(
  m.Scope scope$,
  NumberSymbols target$,
) =>
    () {
      return target$.EXP_SYMBOL;
    };
Function _NumberSymbols_PERMILL$(
  m.Scope scope$,
  NumberSymbols target$,
) =>
    () {
      return target$.PERMILL;
    };
Function _NumberSymbols_INFINITY$(
  m.Scope scope$,
  NumberSymbols target$,
) =>
    () {
      return target$.INFINITY;
    };
Function _NumberSymbols_NAN$(
  m.Scope scope$,
  NumberSymbols target$,
) =>
    () {
      return target$.NAN;
    };
Function _NumberSymbols_DECIMAL_PATTERN$(
  m.Scope scope$,
  NumberSymbols target$,
) =>
    () {
      return target$.DECIMAL_PATTERN;
    };
Function _NumberSymbols_SCIENTIFIC_PATTERN$(
  m.Scope scope$,
  NumberSymbols target$,
) =>
    () {
      return target$.SCIENTIFIC_PATTERN;
    };
Function _NumberSymbols_PERCENT_PATTERN$(
  m.Scope scope$,
  NumberSymbols target$,
) =>
    () {
      return target$.PERCENT_PATTERN;
    };
Function _NumberSymbols_CURRENCY_PATTERN$(
  m.Scope scope$,
  NumberSymbols target$,
) =>
    () {
      return target$.CURRENCY_PATTERN;
    };
Function _NumberSymbols_DEF_CURRENCY_CODE$(
  m.Scope scope$,
  NumberSymbols target$,
) =>
    () {
      return target$.DEF_CURRENCY_CODE;
    };
Function _NumberSymbols__$(m.Scope scope$) => ({
      required String NAME,
      required String DECIMAL_SEP,
      required String GROUP_SEP,
      required String PERCENT,
      required String ZERO_DIGIT,
      required String PLUS_SIGN,
      required String MINUS_SIGN,
      required String EXP_SYMBOL,
      required String PERMILL,
      required String INFINITY,
      required String NAN,
      required String DECIMAL_PATTERN,
      required String SCIENTIFIC_PATTERN,
      required String PERCENT_PATTERN,
      required String CURRENCY_PATTERN,
      required String DEF_CURRENCY_CODE,
    }) {
      return NumberSymbols(
        CURRENCY_PATTERN: CURRENCY_PATTERN,
        DECIMAL_PATTERN: DECIMAL_PATTERN,
        DECIMAL_SEP: DECIMAL_SEP,
        DEF_CURRENCY_CODE: DEF_CURRENCY_CODE,
        EXP_SYMBOL: EXP_SYMBOL,
        GROUP_SEP: GROUP_SEP,
        INFINITY: INFINITY,
        MINUS_SIGN: MINUS_SIGN,
        NAME: NAME,
        NAN: NAN,
        PERCENT: PERCENT,
        PERCENT_PATTERN: PERCENT_PATTERN,
        PERMILL: PERMILL,
        PLUS_SIGN: PLUS_SIGN,
        SCIENTIFIC_PATTERN: SCIENTIFIC_PATTERN,
        ZERO_DIGIT: ZERO_DIGIT,
      );
    };
Function _NumberSymbols_toString$(
  m.Scope scope$,
  NumberSymbols target$,
) =>
    target$.toString;
Function CompactNumberSymbols_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CompactNumberSymbols;
Function CompactNumberSymbols_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CompactNumberSymbols;
Function _CompactNumberSymbols_COMPACT_DECIMAL_SHORT_PATTERN$(
  m.Scope scope$,
  CompactNumberSymbols target$,
) =>
    () {
      return target$.COMPACT_DECIMAL_SHORT_PATTERN;
    };
Function _CompactNumberSymbols_COMPACT_DECIMAL_LONG_PATTERN$(
  m.Scope scope$,
  CompactNumberSymbols target$,
) =>
    () {
      return target$.COMPACT_DECIMAL_LONG_PATTERN;
    };
Function _CompactNumberSymbols_COMPACT_DECIMAL_SHORT_CURRENCY_PATTERN$(
  m.Scope scope$,
  CompactNumberSymbols target$,
) =>
    () {
      return target$.COMPACT_DECIMAL_SHORT_CURRENCY_PATTERN;
    };
Function _CompactNumberSymbols__$(m.Scope scope$) => ({
      required Map COMPACT_DECIMAL_SHORT_PATTERN,
      Map? COMPACT_DECIMAL_LONG_PATTERN,
      required Map COMPACT_DECIMAL_SHORT_CURRENCY_PATTERN,
    }) {
      return CompactNumberSymbols(
        COMPACT_DECIMAL_LONG_PATTERN: COMPACT_DECIMAL_LONG_PATTERN == null
            ? null
            : Map.from(COMPACT_DECIMAL_LONG_PATTERN),
        COMPACT_DECIMAL_SHORT_CURRENCY_PATTERN:
            Map.from(COMPACT_DECIMAL_SHORT_CURRENCY_PATTERN),
        COMPACT_DECIMAL_SHORT_PATTERN: Map.from(COMPACT_DECIMAL_SHORT_PATTERN),
      );
    };
