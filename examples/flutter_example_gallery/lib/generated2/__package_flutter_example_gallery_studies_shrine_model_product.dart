// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter_example_gallery/studies/shrine/model/product.dart';
import 'package:flutter/material.dart';
import 'package:flutter_example_gallery/gen_l10n/gallery_localizations.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter_example_gallery/studies/shrine/model/product.dart',
  {
    'categoryAll': _categoryAll$,
    'categoryAccessories': _categoryAccessories$,
    'categoryClothing': _categoryClothing$,
    'categoryHome': _categoryHome$,
    'categories': _categories$,
    'Category.': _Category__$,
    'Product.': _Product__$,
  },
  {
    'categoryAll': _categoryAll_set$,
    'categoryAccessories': _categoryAccessories_set$,
    'categoryClothing': _categoryClothing_set$,
    'categoryHome': _categoryHome_set$,
    'categories': _categories_set$,
  },
  {
    'Category': m.ClassMirror(
      'Category',
      {
        '#as': Category_as$,
        '#is': Category_is$,
        'name': _Category_name$,
      },
      {},
    ),
    'Product': m.ClassMirror(
      'Product',
      {
        '#as': Product_as$,
        '#is': Product_is$,
        'category': _Product_category$,
        'id': _Product_id$,
        'isFeatured': _Product_isFeatured$,
        'assetAspectRatio': _Product_assetAspectRatio$,
        'name': _Product_name$,
        'price': _Product_price$,
        'assetName': _Product_assetName$,
        'assetPackage': _Product_assetPackage$,
      },
      {},
    ),
  },
);
Function _categoryAll$(m.Scope scope$) => () => categoryAll;
void _categoryAll_set$(Category other$) {
  categoryAll = other$;
}

Function _categoryAccessories$(m.Scope scope$) => () => categoryAccessories;
void _categoryAccessories_set$(Category other$) {
  categoryAccessories = other$;
}

Function _categoryClothing$(m.Scope scope$) => () => categoryClothing;
void _categoryClothing_set$(Category other$) {
  categoryClothing = other$;
}

Function _categoryHome$(m.Scope scope$) => () => categoryHome;
void _categoryHome_set$(Category other$) {
  categoryHome = other$;
}

Function _categories$(m.Scope scope$) => () => categories;
void _categories_set$(List<Category> other$) {
  categories = other$;
}

Function Category_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Category;
Function Category_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Category;
Function _Category_name$(
  m.Scope scope$,
  Category target$,
) =>
    () {
      return target$.name;
    };
Function _Category__$(m.Scope scope$) => ({required m.FunctionPointer name}) {
      String nameProxy(BuildContext name_$p0$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            name,
            [name_$p0$],
            {},
          );
      return Category(name: nameProxy);
    };
Function Product_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Product;
Function Product_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Product;
Function _Product_category$(
  m.Scope scope$,
  Product target$,
) =>
    () {
      return target$.category;
    };
Function _Product_id$(
  m.Scope scope$,
  Product target$,
) =>
    () {
      return target$.id;
    };
Function _Product_isFeatured$(
  m.Scope scope$,
  Product target$,
) =>
    () {
      return target$.isFeatured;
    };
Function _Product_assetAspectRatio$(
  m.Scope scope$,
  Product target$,
) =>
    () {
      return target$.assetAspectRatio;
    };
Function _Product_name$(
  m.Scope scope$,
  Product target$,
) =>
    () {
      return target$.name;
    };
Function _Product_price$(
  m.Scope scope$,
  Product target$,
) =>
    () {
      return target$.price;
    };
Function _Product_assetName$(
  m.Scope scope$,
  Product target$,
) =>
    () {
      return target$.assetName;
    };
Function _Product_assetPackage$(
  m.Scope scope$,
  Product target$,
) =>
    () {
      return target$.assetPackage;
    };
Function _Product__$(m.Scope scope$) => ({
      required Category category,
      required int id,
      required bool isFeatured,
      required m.FunctionPointer name,
      required int price,
      double? assetAspectRatio,
    }) {
      String nameProxy(BuildContext name_$p0$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            name,
            [name_$p0$],
            {},
          );
      return Product(
        assetAspectRatio: assetAspectRatio ?? 1,
        category: category,
        id: id,
        isFeatured: isFeatured,
        name: nameProxy,
        price: price,
      );
    };
