// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:collection/src/equality_map.dart';
import 'dart:collection';
import 'package:collection/src/equality.dart';
import 'package:collection/src/wrappers.dart';

const libraryMirror = m.LibraryMirror(
  'package:collection/src/equality_map.dart',
  {
    'EqualityMap.': _EqualityMap__$,
    'EqualityMap.from': _EqualityMap_from_$,
  },
  {},
  {
    'EqualityMap': m.ClassMirror(
      'EqualityMap',
      {
        '#as': EqualityMap_as$,
        '#is': EqualityMap_is$,
      },
      {},
    )
  },
);
Function EqualityMap_as$<K, V>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as EqualityMap<K, V>;
Function EqualityMap_is$<K, V>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is EqualityMap<K, V>;
Function _EqualityMap__$(m.Scope scope$) => (Equality equality) {
      return EqualityMap(equality);
    };
Function _EqualityMap_from_$(m.Scope scope$) => EqualityMap.from;
