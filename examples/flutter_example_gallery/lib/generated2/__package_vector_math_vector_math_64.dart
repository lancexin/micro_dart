// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:vector_math/vector_math_64.dart';
import 'dart:math';
import 'dart:typed_data';

const libraryMirror = m.LibraryMirror(
  'package:vector_math/vector_math_64.dart',
  {
    'Aabb2.': _Aabb2__$,
    'Aabb2.copy': _Aabb2_copy_$,
    'Aabb2.minMax': _Aabb2_minMax_$,
    'Aabb2.centerAndHalfExtents': _Aabb2_centerAndHalfExtents_$,
    'Aabb2.fromBuffer': _Aabb2_fromBuffer_$,
    'Aabb3.': _Aabb3__$,
    'Aabb3.copy': _Aabb3_copy_$,
    'Aabb3.minMax': _Aabb3_minMax_$,
    'Aabb3.fromSphere': _Aabb3_fromSphere_$,
    'Aabb3.fromTriangle': _Aabb3_fromTriangle_$,
    'Aabb3.fromQuad': _Aabb3_fromQuad_$,
    'Aabb3.fromObb3': _Aabb3_fromObb3_$,
    'Aabb3.fromRay': _Aabb3_fromRay_$,
    'Aabb3.centerAndHalfExtents': _Aabb3_centerAndHalfExtents_$,
    'Aabb3.fromBuffer': _Aabb3_fromBuffer_$,
    'Colors.transparent': _Colors_transparent$,
    'Colors.aliceBlue': _Colors_aliceBlue$,
    'Colors.antiqueWhite': _Colors_antiqueWhite$,
    'Colors.aqua': _Colors_aqua$,
    'Colors.aquamarine': _Colors_aquamarine$,
    'Colors.azure': _Colors_azure$,
    'Colors.beige': _Colors_beige$,
    'Colors.bisque': _Colors_bisque$,
    'Colors.black': _Colors_black$,
    'Colors.blanchedAlmond': _Colors_blanchedAlmond$,
    'Colors.blue': _Colors_blue$,
    'Colors.blueViolet': _Colors_blueViolet$,
    'Colors.brown': _Colors_brown$,
    'Colors.burlyWood': _Colors_burlyWood$,
    'Colors.cadetBlue': _Colors_cadetBlue$,
    'Colors.chartreuse': _Colors_chartreuse$,
    'Colors.chocolate': _Colors_chocolate$,
    'Colors.coral': _Colors_coral$,
    'Colors.cornflowerBlue': _Colors_cornflowerBlue$,
    'Colors.cornsilk': _Colors_cornsilk$,
    'Colors.crimson': _Colors_crimson$,
    'Colors.cyan': _Colors_cyan$,
    'Colors.darkBlue': _Colors_darkBlue$,
    'Colors.darkCyan': _Colors_darkCyan$,
    'Colors.darkGoldenrod': _Colors_darkGoldenrod$,
    'Colors.darkGray': _Colors_darkGray$,
    'Colors.darkGreen': _Colors_darkGreen$,
    'Colors.darkKhaki': _Colors_darkKhaki$,
    'Colors.darkMagenta': _Colors_darkMagenta$,
    'Colors.darkOliveGreen': _Colors_darkOliveGreen$,
    'Colors.darkOrange': _Colors_darkOrange$,
    'Colors.darkOrchid': _Colors_darkOrchid$,
    'Colors.darkRed': _Colors_darkRed$,
    'Colors.darkSalmon': _Colors_darkSalmon$,
    'Colors.darkSeaGreen': _Colors_darkSeaGreen$,
    'Colors.darkSlateBlue': _Colors_darkSlateBlue$,
    'Colors.darkSlateGray': _Colors_darkSlateGray$,
    'Colors.darkTurquoise': _Colors_darkTurquoise$,
    'Colors.darkViolet': _Colors_darkViolet$,
    'Colors.deepPink': _Colors_deepPink$,
    'Colors.deepSkyBlue': _Colors_deepSkyBlue$,
    'Colors.dimGray': _Colors_dimGray$,
    'Colors.dodgerBlue': _Colors_dodgerBlue$,
    'Colors.firebrick': _Colors_firebrick$,
    'Colors.floralWhite': _Colors_floralWhite$,
    'Colors.forestGreen': _Colors_forestGreen$,
    'Colors.fuchsia': _Colors_fuchsia$,
    'Colors.gainsboro': _Colors_gainsboro$,
    'Colors.ghostWhite': _Colors_ghostWhite$,
    'Colors.gold': _Colors_gold$,
    'Colors.goldenrod': _Colors_goldenrod$,
    'Colors.gray': _Colors_gray$,
    'Colors.green': _Colors_green$,
    'Colors.greenYellow': _Colors_greenYellow$,
    'Colors.honeydew': _Colors_honeydew$,
    'Colors.hotPink': _Colors_hotPink$,
    'Colors.indianRed': _Colors_indianRed$,
    'Colors.indigo': _Colors_indigo$,
    'Colors.ivory': _Colors_ivory$,
    'Colors.khaki': _Colors_khaki$,
    'Colors.lavender': _Colors_lavender$,
    'Colors.lavenderBlush': _Colors_lavenderBlush$,
    'Colors.lawnGreen': _Colors_lawnGreen$,
    'Colors.lemonChiffon': _Colors_lemonChiffon$,
    'Colors.lightBlue': _Colors_lightBlue$,
    'Colors.lightCoral': _Colors_lightCoral$,
    'Colors.lightCyan': _Colors_lightCyan$,
    'Colors.lightGoldenrodYellow': _Colors_lightGoldenrodYellow$,
    'Colors.lightGreen': _Colors_lightGreen$,
    'Colors.lightGray': _Colors_lightGray$,
    'Colors.lightPink': _Colors_lightPink$,
    'Colors.lightSalmon': _Colors_lightSalmon$,
    'Colors.lightSeaGreen': _Colors_lightSeaGreen$,
    'Colors.lightSkyBlue': _Colors_lightSkyBlue$,
    'Colors.lightSlateGray': _Colors_lightSlateGray$,
    'Colors.lightSteelBlue': _Colors_lightSteelBlue$,
    'Colors.lightYellow': _Colors_lightYellow$,
    'Colors.lime': _Colors_lime$,
    'Colors.limeGreen': _Colors_limeGreen$,
    'Colors.linen': _Colors_linen$,
    'Colors.magenta': _Colors_magenta$,
    'Colors.maroon': _Colors_maroon$,
    'Colors.mediumAquamarine': _Colors_mediumAquamarine$,
    'Colors.mediumBlue': _Colors_mediumBlue$,
    'Colors.mediumOrchid': _Colors_mediumOrchid$,
    'Colors.mediumPurple': _Colors_mediumPurple$,
    'Colors.mediumSeaGreen': _Colors_mediumSeaGreen$,
    'Colors.mediumSlateBlue': _Colors_mediumSlateBlue$,
    'Colors.mediumSpringGreen': _Colors_mediumSpringGreen$,
    'Colors.mediumTurquoise': _Colors_mediumTurquoise$,
    'Colors.mediumVioletRed': _Colors_mediumVioletRed$,
    'Colors.midnightBlue': _Colors_midnightBlue$,
    'Colors.mintCream': _Colors_mintCream$,
    'Colors.mistyRose': _Colors_mistyRose$,
    'Colors.moccasin': _Colors_moccasin$,
    'Colors.navajoWhite': _Colors_navajoWhite$,
    'Colors.navy': _Colors_navy$,
    'Colors.oldLace': _Colors_oldLace$,
    'Colors.olive': _Colors_olive$,
    'Colors.oliveDrab': _Colors_oliveDrab$,
    'Colors.orange': _Colors_orange$,
    'Colors.orangeRed': _Colors_orangeRed$,
    'Colors.orchid': _Colors_orchid$,
    'Colors.paleGoldenrod': _Colors_paleGoldenrod$,
    'Colors.paleGreen': _Colors_paleGreen$,
    'Colors.paleTurquoise': _Colors_paleTurquoise$,
    'Colors.paleVioletRed': _Colors_paleVioletRed$,
    'Colors.papayaWhip': _Colors_papayaWhip$,
    'Colors.peachPuff': _Colors_peachPuff$,
    'Colors.peru': _Colors_peru$,
    'Colors.pink': _Colors_pink$,
    'Colors.plum': _Colors_plum$,
    'Colors.powderBlue': _Colors_powderBlue$,
    'Colors.purple': _Colors_purple$,
    'Colors.red': _Colors_red$,
    'Colors.rosyBrown': _Colors_rosyBrown$,
    'Colors.royalBlue': _Colors_royalBlue$,
    'Colors.saddleBrown': _Colors_saddleBrown$,
    'Colors.salmon': _Colors_salmon$,
    'Colors.sandyBrown': _Colors_sandyBrown$,
    'Colors.seaGreen': _Colors_seaGreen$,
    'Colors.seaShell': _Colors_seaShell$,
    'Colors.sienna': _Colors_sienna$,
    'Colors.silver': _Colors_silver$,
    'Colors.skyBlue': _Colors_skyBlue$,
    'Colors.slateBlue': _Colors_slateBlue$,
    'Colors.slateGray': _Colors_slateGray$,
    'Colors.snow': _Colors_snow$,
    'Colors.springGreen': _Colors_springGreen$,
    'Colors.steelBlue': _Colors_steelBlue$,
    'Colors.tan': _Colors_tan$,
    'Colors.teal': _Colors_teal$,
    'Colors.thistle': _Colors_thistle$,
    'Colors.tomato': _Colors_tomato$,
    'Colors.turquoise': _Colors_turquoise$,
    'Colors.violet': _Colors_violet$,
    'Colors.wheat': _Colors_wheat$,
    'Colors.white': _Colors_white$,
    'Colors.whiteSmoke': _Colors_whiteSmoke$,
    'Colors.yellow': _Colors_yellow$,
    'Colors.yellowGreen': _Colors_yellowGreen$,
    'Colors.fromRgba': _Colors_fromRgba$,
    'Colors.fromHexString': _Colors_fromHexString$,
    'Colors.toHexString': _Colors_toHexString$,
    'Colors.alphaBlend': _Colors_alphaBlend$,
    'Colors.toGrayscale': _Colors_toGrayscale$,
    'Colors.linearToGamma': _Colors_linearToGamma$,
    'Colors.gammaToLinear': _Colors_gammaToLinear$,
    'Colors.rgbToHsv': _Colors_rgbToHsv$,
    'Colors.hsvToRgb': _Colors_hsvToRgb$,
    'Colors.rgbToHsl': _Colors_rgbToHsl$,
    'Colors.hslToRgb': _Colors_hslToRgb$,
    'degrees2Radians': _degrees2Radians$,
    'radians2Degrees': _radians2Degrees$,
    'relativeError': _relativeError$,
    'absoluteError': _absoluteError$,
    'Frustum.': _Frustum__$,
    'Frustum.copy': _Frustum_copy_$,
    'Frustum.matrix': _Frustum_matrix_$,
    'IntersectionResult.': _IntersectionResult__$,
    'Matrix2.': _Matrix2__$,
    'Matrix2.fromList': _Matrix2_fromList_$,
    'Matrix2.zero': _Matrix2_zero_$,
    'Matrix2.identity': _Matrix2_identity_$,
    'Matrix2.copy': _Matrix2_copy_$,
    'Matrix2.columns': _Matrix2_columns_$,
    'Matrix2.outer': _Matrix2_outer_$,
    'Matrix2.rotation': _Matrix2_rotation_$,
    'Matrix2.solve': _Matrix2_solve$,
    'Matrix3.': _Matrix3__$,
    'Matrix3.fromList': _Matrix3_fromList_$,
    'Matrix3.zero': _Matrix3_zero_$,
    'Matrix3.identity': _Matrix3_identity_$,
    'Matrix3.copy': _Matrix3_copy_$,
    'Matrix3.columns': _Matrix3_columns_$,
    'Matrix3.outer': _Matrix3_outer_$,
    'Matrix3.rotationX': _Matrix3_rotationX_$,
    'Matrix3.rotationY': _Matrix3_rotationY_$,
    'Matrix3.rotationZ': _Matrix3_rotationZ_$,
    'Matrix3.solve2': _Matrix3_solve2$,
    'Matrix3.solve': _Matrix3_solve$,
    'Matrix4.': _Matrix4__$,
    'Matrix4.fromList': _Matrix4_fromList_$,
    'Matrix4.zero': _Matrix4_zero_$,
    'Matrix4.identity': _Matrix4_identity_$,
    'Matrix4.copy': _Matrix4_copy_$,
    'Matrix4.inverted': _Matrix4_inverted_$,
    'Matrix4.columns': _Matrix4_columns_$,
    'Matrix4.outer': _Matrix4_outer_$,
    'Matrix4.rotationX': _Matrix4_rotationX_$,
    'Matrix4.rotationY': _Matrix4_rotationY_$,
    'Matrix4.rotationZ': _Matrix4_rotationZ_$,
    'Matrix4.translation': _Matrix4_translation_$,
    'Matrix4.translationValues': _Matrix4_translationValues_$,
    'Matrix4.diagonal3': _Matrix4_diagonal3_$,
    'Matrix4.diagonal3Values': _Matrix4_diagonal3Values_$,
    'Matrix4.skewX': _Matrix4_skewX_$,
    'Matrix4.skewY': _Matrix4_skewY_$,
    'Matrix4.skew': _Matrix4_skew_$,
    'Matrix4.fromFloat64List': _Matrix4_fromFloat64List_$,
    'Matrix4.fromBuffer': _Matrix4_fromBuffer_$,
    'Matrix4.compose': _Matrix4_compose_$,
    'Matrix4.solve2': _Matrix4_solve2$,
    'Matrix4.solve3': _Matrix4_solve3$,
    'Matrix4.solve': _Matrix4_solve$,
    'Matrix4.tryInvert': _Matrix4_tryInvert$,
    'Obb3.': _Obb3__$,
    'Obb3.copy': _Obb3_copy_$,
    'Obb3.centerExtentsAxes': _Obb3_centerExtentsAxes_$,
    'setRotationMatrix': _setRotationMatrix$,
    'setModelMatrix': _setModelMatrix$,
    'setViewMatrix': _setViewMatrix$,
    'makeViewMatrix': _makeViewMatrix$,
    'setPerspectiveMatrix': _setPerspectiveMatrix$,
    'makePerspectiveMatrix': _makePerspectiveMatrix$,
    'setInfiniteMatrix': _setInfiniteMatrix$,
    'makeInfiniteMatrix': _makeInfiniteMatrix$,
    'setFrustumMatrix': _setFrustumMatrix$,
    'makeFrustumMatrix': _makeFrustumMatrix$,
    'setOrthographicMatrix': _setOrthographicMatrix$,
    'makeOrthographicMatrix': _makeOrthographicMatrix$,
    'makePlaneProjection': _makePlaneProjection$,
    'makePlaneReflection': _makePlaneReflection$,
    'unproject': _unproject$,
    'pickRay': _pickRay$,
    'Plane.': _Plane__$,
    'Plane.copy': _Plane_copy_$,
    'Plane.components': _Plane_components_$,
    'Plane.normalconstant': _Plane_normalconstant_$,
    'Plane.intersection': _Plane_intersection$,
    'Quad.': _Quad__$,
    'Quad.copy': _Quad_copy_$,
    'Quad.points': _Quad_points_$,
    'Quaternion.': _Quaternion__$,
    'Quaternion.fromRotation': _Quaternion_fromRotation_$,
    'Quaternion.axisAngle': _Quaternion_axisAngle_$,
    'Quaternion.fromTwoVectors': _Quaternion_fromTwoVectors_$,
    'Quaternion.copy': _Quaternion_copy_$,
    'Quaternion.random': _Quaternion_random_$,
    'Quaternion.identity': _Quaternion_identity_$,
    'Quaternion.dq': _Quaternion_dq_$,
    'Quaternion.euler': _Quaternion_euler_$,
    'Quaternion.fromFloat64List': _Quaternion_fromFloat64List_$,
    'Quaternion.fromBuffer': _Quaternion_fromBuffer_$,
    'Ray.': _Ray__$,
    'Ray.copy': _Ray_copy_$,
    'Ray.originDirection': _Ray_originDirection_$,
    'Sphere.': _Sphere__$,
    'Sphere.copy': _Sphere_copy_$,
    'Sphere.centerRadius': _Sphere_centerRadius_$,
    'Triangle.': _Triangle__$,
    'Triangle.copy': _Triangle_copy_$,
    'Triangle.points': _Triangle_points_$,
    'degrees': _degrees$,
    'radians': _radians$,
    'mix': _mix$,
    'smoothStep': _smoothStep$,
    'catmullRom': _catmullRom$,
    'dot2': _dot2$,
    'dot3': _dot3$,
    'cross3': _cross3$,
    'cross2': _cross2$,
    'cross2A': _cross2A$,
    'cross2B': _cross2B$,
    'buildPlaneVectors': _buildPlaneVectors$,
    'Vector2.': _Vector2__$,
    'Vector2.array': _Vector2_array_$,
    'Vector2.zero': _Vector2_zero_$,
    'Vector2.all': _Vector2_all_$,
    'Vector2.copy': _Vector2_copy_$,
    'Vector2.fromFloat64List': _Vector2_fromFloat64List_$,
    'Vector2.fromBuffer': _Vector2_fromBuffer_$,
    'Vector2.random': _Vector2_random_$,
    'Vector2.min': _Vector2_min$,
    'Vector2.max': _Vector2_max$,
    'Vector2.mix': _Vector2_mix$,
    'Vector3.': _Vector3__$,
    'Vector3.array': _Vector3_array_$,
    'Vector3.zero': _Vector3_zero_$,
    'Vector3.all': _Vector3_all_$,
    'Vector3.copy': _Vector3_copy_$,
    'Vector3.fromFloat64List': _Vector3_fromFloat64List_$,
    'Vector3.fromBuffer': _Vector3_fromBuffer_$,
    'Vector3.random': _Vector3_random_$,
    'Vector3.min': _Vector3_min$,
    'Vector3.max': _Vector3_max$,
    'Vector3.mix': _Vector3_mix$,
    'Vector4.': _Vector4__$,
    'Vector4.array': _Vector4_array_$,
    'Vector4.zero': _Vector4_zero_$,
    'Vector4.identity': _Vector4_identity_$,
    'Vector4.all': _Vector4_all_$,
    'Vector4.copy': _Vector4_copy_$,
    'Vector4.fromFloat64List': _Vector4_fromFloat64List_$,
    'Vector4.fromBuffer': _Vector4_fromBuffer_$,
    'Vector4.random': _Vector4_random_$,
    'Vector4.min': _Vector4_min$,
    'Vector4.max': _Vector4_max$,
    'Vector4.mix': _Vector4_mix$,
  },
  {},
  {
    'Aabb2': m.ClassMirror(
      'Aabb2',
      {
        '#as': Aabb2_as$,
        '#is': Aabb2_is$,
        'min': _Aabb2_min$,
        'max': _Aabb2_max$,
        'center': _Aabb2_center$,
        'setCenterAndHalfExtents': _Aabb2_setCenterAndHalfExtents$,
        'copyCenterAndHalfExtents': _Aabb2_copyCenterAndHalfExtents$,
        'copyFrom': _Aabb2_copyFrom$,
        'transform': _Aabb2_transform$,
        'rotate': _Aabb2_rotate$,
        'transformed': _Aabb2_transformed$,
        'rotated': _Aabb2_rotated$,
        'hull': _Aabb2_hull$,
        'hullPoint': _Aabb2_hullPoint$,
        'containsAabb2': _Aabb2_containsAabb2$,
        'containsVector2': _Aabb2_containsVector2$,
        'intersectsWithAabb2': _Aabb2_intersectsWithAabb2$,
        'intersectsWithVector2': _Aabb2_intersectsWithVector2$,
      },
      {},
    ),
    'Aabb3': m.ClassMirror(
      'Aabb3',
      {
        '#as': Aabb3_as$,
        '#is': Aabb3_is$,
        'min': _Aabb3_min$,
        'max': _Aabb3_max$,
        'center': _Aabb3_center$,
        'setCenterAndHalfExtents': _Aabb3_setCenterAndHalfExtents$,
        'setSphere': _Aabb3_setSphere$,
        'setTriangle': _Aabb3_setTriangle$,
        'setQuad': _Aabb3_setQuad$,
        'setObb3': _Aabb3_setObb3$,
        'setRay': _Aabb3_setRay$,
        'copyCenterAndHalfExtents': _Aabb3_copyCenterAndHalfExtents$,
        'copyCenter': _Aabb3_copyCenter$,
        'copyFrom': _Aabb3_copyFrom$,
        'transform': _Aabb3_transform$,
        'rotate': _Aabb3_rotate$,
        'transformed': _Aabb3_transformed$,
        'rotated': _Aabb3_rotated$,
        'getPN': _Aabb3_getPN$,
        'hull': _Aabb3_hull$,
        'hullPoint': _Aabb3_hullPoint$,
        'containsAabb3': _Aabb3_containsAabb3$,
        'containsSphere': _Aabb3_containsSphere$,
        'containsVector3': _Aabb3_containsVector3$,
        'containsTriangle': _Aabb3_containsTriangle$,
        'intersectsWithAabb3': _Aabb3_intersectsWithAabb3$,
        'intersectsWithSphere': _Aabb3_intersectsWithSphere$,
        'intersectsWithVector3': _Aabb3_intersectsWithVector3$,
        'intersectsWithTriangle': _Aabb3_intersectsWithTriangle$,
        'intersectsWithPlane': _Aabb3_intersectsWithPlane$,
        'intersectsWithQuad': _Aabb3_intersectsWithQuad$,
      },
      {},
    ),
    'Colors': m.ClassMirror(
      'Colors',
      {
        '#as': Colors_as$,
        '#is': Colors_is$,
      },
      {},
    ),
    'Frustum': m.ClassMirror(
      'Frustum',
      {
        '#as': Frustum_as$,
        '#is': Frustum_is$,
        'plane0': _Frustum_plane0$,
        'plane1': _Frustum_plane1$,
        'plane2': _Frustum_plane2$,
        'plane3': _Frustum_plane3$,
        'plane4': _Frustum_plane4$,
        'plane5': _Frustum_plane5$,
        'copyFrom': _Frustum_copyFrom$,
        'setFromMatrix': _Frustum_setFromMatrix$,
        'containsVector3': _Frustum_containsVector3$,
        'intersectsWithAabb3': _Frustum_intersectsWithAabb3$,
        'intersectsWithSphere': _Frustum_intersectsWithSphere$,
        'calculateCorners': _Frustum_calculateCorners$,
      },
      {},
    ),
    'IntersectionResult': m.ClassMirror(
      'IntersectionResult',
      {
        '#as': IntersectionResult_as$,
        '#is': IntersectionResult_is$,
        'axis': _IntersectionResult_axis$,
        'depth': _IntersectionResult_depth$,
      },
      {},
    ),
    'Matrix2': m.ClassMirror(
      'Matrix2',
      {
        '#as': Matrix2_as$,
        '#is': Matrix2_is$,
        'storage': _Matrix2_storage$,
        'dimension': _Matrix2_dimension$,
        'hashCode': _Matrix2_hashCode$,
        'row0': _Matrix2_row0$,
        'row1': _Matrix2_row1$,
        'index': _Matrix2_index$,
        'entry': _Matrix2_entry$,
        'setEntry': _Matrix2_setEntry$,
        'setValues': _Matrix2_setValues$,
        'setColumns': _Matrix2_setColumns$,
        'setFrom': _Matrix2_setFrom$,
        'setOuter': _Matrix2_setOuter$,
        'splatDiagonal': _Matrix2_splatDiagonal$,
        'setDiagonal': _Matrix2_setDiagonal$,
        'toString': _Matrix2_toString$,
        '[]': _Matrix2_$index$$,
        '[]=': _Matrix2_$index_set$$,
        '==': _Matrix2_eq$$,
        'setRow': _Matrix2_setRow$,
        'getRow': _Matrix2_getRow$,
        'setColumn': _Matrix2_setColumn$,
        'getColumn': _Matrix2_getColumn$,
        'clone': _Matrix2_clone$,
        'copyInto': _Matrix2_copyInto$,
        '*': _Matrix2_times$$,
        '+': _Matrix2_plus$$,
        '-': _Matrix2_minus$$,
        'unary-': _Matrix2_unary_minus$$,
        'setZero': _Matrix2_setZero$,
        'setIdentity': _Matrix2_setIdentity$,
        'transposed': _Matrix2_transposed$,
        'transpose': _Matrix2_transpose$,
        'absolute': _Matrix2_absolute$,
        'determinant': _Matrix2_determinant$,
        'dotRow': _Matrix2_dotRow$,
        'dotColumn': _Matrix2_dotColumn$,
        'trace': _Matrix2_trace$,
        'infinityNorm': _Matrix2_infinityNorm$,
        'relativeError': _Matrix2_relativeError$,
        'absoluteError': _Matrix2_absoluteError$,
        'invert': _Matrix2_invert$,
        'copyInverse': _Matrix2_copyInverse$,
        'setRotation': _Matrix2_setRotation$,
        'scaleAdjoint': _Matrix2_scaleAdjoint$,
        'scale': _Matrix2_scale$,
        'scaled': _Matrix2_scaled$,
        'add': _Matrix2_add$,
        'sub': _Matrix2_sub$,
        'negate': _Matrix2_negate$,
        'multiply': _Matrix2_multiply$,
        'multiplied': _Matrix2_multiplied$,
        'transposeMultiply': _Matrix2_transposeMultiply$,
        'multiplyTranspose': _Matrix2_multiplyTranspose$,
        'transform': _Matrix2_transform$,
        'transformed': _Matrix2_transformed$,
        'copyIntoArray': _Matrix2_copyIntoArray$,
        'copyFromArray': _Matrix2_copyFromArray$,
      },
      {
        'row0': _Matrix2_row0_set$,
        'row1': _Matrix2_row1_set$,
      },
    ),
    'Matrix3': m.ClassMirror(
      'Matrix3',
      {
        '#as': Matrix3_as$,
        '#is': Matrix3_is$,
        'storage': _Matrix3_storage$,
        'dimension': _Matrix3_dimension$,
        'hashCode': _Matrix3_hashCode$,
        'row0': _Matrix3_row0$,
        'row1': _Matrix3_row1$,
        'row2': _Matrix3_row2$,
        'right': _Matrix3_right$,
        'up': _Matrix3_up$,
        'forward': _Matrix3_forward$,
        'index': _Matrix3_index$,
        'entry': _Matrix3_entry$,
        'setEntry': _Matrix3_setEntry$,
        'setValues': _Matrix3_setValues$,
        'setColumns': _Matrix3_setColumns$,
        'setFrom': _Matrix3_setFrom$,
        'setOuter': _Matrix3_setOuter$,
        'splatDiagonal': _Matrix3_splatDiagonal$,
        'setDiagonal': _Matrix3_setDiagonal$,
        'setUpper2x2': _Matrix3_setUpper2x2$,
        'toString': _Matrix3_toString$,
        '[]': _Matrix3_$index$$,
        '[]=': _Matrix3_$index_set$$,
        '==': _Matrix3_eq$$,
        'setRow': _Matrix3_setRow$,
        'getRow': _Matrix3_getRow$,
        'setColumn': _Matrix3_setColumn$,
        'getColumn': _Matrix3_getColumn$,
        'clone': _Matrix3_clone$,
        'copyInto': _Matrix3_copyInto$,
        '*': _Matrix3_times$$,
        '+': _Matrix3_plus$$,
        '-': _Matrix3_minus$$,
        'unary-': _Matrix3_unary_minus$$,
        'setZero': _Matrix3_setZero$,
        'setIdentity': _Matrix3_setIdentity$,
        'transposed': _Matrix3_transposed$,
        'transpose': _Matrix3_transpose$,
        'absolute': _Matrix3_absolute$,
        'determinant': _Matrix3_determinant$,
        'dotRow': _Matrix3_dotRow$,
        'dotColumn': _Matrix3_dotColumn$,
        'trace': _Matrix3_trace$,
        'infinityNorm': _Matrix3_infinityNorm$,
        'relativeError': _Matrix3_relativeError$,
        'absoluteError': _Matrix3_absoluteError$,
        'invert': _Matrix3_invert$,
        'copyInverse': _Matrix3_copyInverse$,
        'copyNormalMatrix': _Matrix3_copyNormalMatrix$,
        'setRotationX': _Matrix3_setRotationX$,
        'setRotationY': _Matrix3_setRotationY$,
        'setRotationZ': _Matrix3_setRotationZ$,
        'scaleAdjoint': _Matrix3_scaleAdjoint$,
        'absoluteRotate': _Matrix3_absoluteRotate$,
        'absoluteRotate2': _Matrix3_absoluteRotate2$,
        'transform2': _Matrix3_transform2$,
        'scale': _Matrix3_scale$,
        'scaled': _Matrix3_scaled$,
        'add': _Matrix3_add$,
        'sub': _Matrix3_sub$,
        'negate': _Matrix3_negate$,
        'multiply': _Matrix3_multiply$,
        'multiplied': _Matrix3_multiplied$,
        'transposeMultiply': _Matrix3_transposeMultiply$,
        'multiplyTranspose': _Matrix3_multiplyTranspose$,
        'transform': _Matrix3_transform$,
        'transformed': _Matrix3_transformed$,
        'copyIntoArray': _Matrix3_copyIntoArray$,
        'copyFromArray': _Matrix3_copyFromArray$,
        'applyToVector3Array': _Matrix3_applyToVector3Array$,
        'isIdentity': _Matrix3_isIdentity$,
        'isZero': _Matrix3_isZero$,
      },
      {
        'row0': _Matrix3_row0_set$,
        'row1': _Matrix3_row1_set$,
        'row2': _Matrix3_row2_set$,
      },
    ),
    'Matrix4': m.ClassMirror(
      'Matrix4',
      {
        '#as': Matrix4_as$,
        '#is': Matrix4_is$,
        'storage': _Matrix4_storage$,
        'dimension': _Matrix4_dimension$,
        'hashCode': _Matrix4_hashCode$,
        'row0': _Matrix4_row0$,
        'row1': _Matrix4_row1$,
        'row2': _Matrix4_row2$,
        'row3': _Matrix4_row3$,
        'right': _Matrix4_right$,
        'up': _Matrix4_up$,
        'forward': _Matrix4_forward$,
        'index': _Matrix4_index$,
        'entry': _Matrix4_entry$,
        'setEntry': _Matrix4_setEntry$,
        'splatDiagonal': _Matrix4_splatDiagonal$,
        'setValues': _Matrix4_setValues$,
        'setColumns': _Matrix4_setColumns$,
        'setFrom': _Matrix4_setFrom$,
        'setFromTranslationRotation': _Matrix4_setFromTranslationRotation$,
        'setFromTranslationRotationScale':
            _Matrix4_setFromTranslationRotationScale$,
        'setUpper2x2': _Matrix4_setUpper2x2$,
        'setDiagonal': _Matrix4_setDiagonal$,
        'setOuter': _Matrix4_setOuter$,
        'toString': _Matrix4_toString$,
        '[]': _Matrix4_$index$$,
        '[]=': _Matrix4_$index_set$$,
        '==': _Matrix4_eq$$,
        'setRow': _Matrix4_setRow$,
        'getRow': _Matrix4_getRow$,
        'setColumn': _Matrix4_setColumn$,
        'getColumn': _Matrix4_getColumn$,
        'clone': _Matrix4_clone$,
        'copyInto': _Matrix4_copyInto$,
        'unary-': _Matrix4_unary_minus$$,
        '*': _Matrix4_times$$,
        '+': _Matrix4_plus$$,
        '-': _Matrix4_minus$$,
        'translate': _Matrix4_translate$,
        'leftTranslate': _Matrix4_leftTranslate$,
        'rotate': _Matrix4_rotate$,
        'rotateX': _Matrix4_rotateX$,
        'rotateY': _Matrix4_rotateY$,
        'rotateZ': _Matrix4_rotateZ$,
        'scale': _Matrix4_scale$,
        'scaled': _Matrix4_scaled$,
        'setZero': _Matrix4_setZero$,
        'setIdentity': _Matrix4_setIdentity$,
        'transposed': _Matrix4_transposed$,
        'transpose': _Matrix4_transpose$,
        'absolute': _Matrix4_absolute$,
        'determinant': _Matrix4_determinant$,
        'dotRow': _Matrix4_dotRow$,
        'dotColumn': _Matrix4_dotColumn$,
        'trace': _Matrix4_trace$,
        'infinityNorm': _Matrix4_infinityNorm$,
        'relativeError': _Matrix4_relativeError$,
        'absoluteError': _Matrix4_absoluteError$,
        'getTranslation': _Matrix4_getTranslation$,
        'setTranslation': _Matrix4_setTranslation$,
        'setTranslationRaw': _Matrix4_setTranslationRaw$,
        'getRotation': _Matrix4_getRotation$,
        'copyRotation': _Matrix4_copyRotation$,
        'setRotation': _Matrix4_setRotation$,
        'getNormalMatrix': _Matrix4_getNormalMatrix$,
        'getMaxScaleOnAxis': _Matrix4_getMaxScaleOnAxis$,
        'transposeRotation': _Matrix4_transposeRotation$,
        'invert': _Matrix4_invert$,
        'copyInverse': _Matrix4_copyInverse$,
        'invertRotation': _Matrix4_invertRotation$,
        'setRotationX': _Matrix4_setRotationX$,
        'setRotationY': _Matrix4_setRotationY$,
        'setRotationZ': _Matrix4_setRotationZ$,
        'scaleAdjoint': _Matrix4_scaleAdjoint$,
        'absoluteRotate': _Matrix4_absoluteRotate$,
        'add': _Matrix4_add$,
        'sub': _Matrix4_sub$,
        'negate': _Matrix4_negate$,
        'multiply': _Matrix4_multiply$,
        'multiplied': _Matrix4_multiplied$,
        'transposeMultiply': _Matrix4_transposeMultiply$,
        'multiplyTranspose': _Matrix4_multiplyTranspose$,
        'decompose': _Matrix4_decompose$,
        'rotate3': _Matrix4_rotate3$,
        'rotated3': _Matrix4_rotated3$,
        'transform3': _Matrix4_transform3$,
        'transformed3': _Matrix4_transformed3$,
        'transform': _Matrix4_transform$,
        'perspectiveTransform': _Matrix4_perspectiveTransform$,
        'transformed': _Matrix4_transformed$,
        'copyIntoArray': _Matrix4_copyIntoArray$,
        'copyFromArray': _Matrix4_copyFromArray$,
        'applyToVector3Array': _Matrix4_applyToVector3Array$,
        'isIdentity': _Matrix4_isIdentity$,
        'isZero': _Matrix4_isZero$,
      },
      {
        'row0': _Matrix4_row0_set$,
        'row1': _Matrix4_row1_set$,
        'row2': _Matrix4_row2_set$,
        'row3': _Matrix4_row3_set$,
      },
    ),
    'Obb3': m.ClassMirror(
      'Obb3',
      {
        '#as': Obb3_as$,
        '#is': Obb3_is$,
        'center': _Obb3_center$,
        'halfExtents': _Obb3_halfExtents$,
        'axis0': _Obb3_axis0$,
        'axis1': _Obb3_axis1$,
        'axis2': _Obb3_axis2$,
        'copyFrom': _Obb3_copyFrom$,
        'copyInto': _Obb3_copyInto$,
        'resetRotation': _Obb3_resetRotation$,
        'translate': _Obb3_translate$,
        'rotate': _Obb3_rotate$,
        'transform': _Obb3_transform$,
        'copyCorner': _Obb3_copyCorner$,
        'closestPointTo': _Obb3_closestPointTo$,
        'intersectsWithObb3': _Obb3_intersectsWithObb3$,
        'intersectsWithTriangle': _Obb3_intersectsWithTriangle$,
        'intersectsWithVector3': _Obb3_intersectsWithVector3$,
        'intersectsWithQuad': _Obb3_intersectsWithQuad$,
      },
      {},
    ),
    'Plane': m.ClassMirror(
      'Plane',
      {
        '#as': Plane_as$,
        '#is': Plane_is$,
        'constant': _Plane_constant$,
        'normal': _Plane_normal$,
        'copyFrom': _Plane_copyFrom$,
        'setFromComponents': _Plane_setFromComponents$,
        'normalize': _Plane_normalize$,
        'distanceToVector3': _Plane_distanceToVector3$,
      },
      {'constant': _Plane_constant_set$},
    ),
    'Quad': m.ClassMirror(
      'Quad',
      {
        '#as': Quad_as$,
        '#is': Quad_is$,
        'point0': _Quad_point0$,
        'point1': _Quad_point1$,
        'point2': _Quad_point2$,
        'point3': _Quad_point3$,
        'copyFrom': _Quad_copyFrom$,
        'copyNormalInto': _Quad_copyNormalInto$,
        'copyTriangles': _Quad_copyTriangles$,
        'transform': _Quad_transform$,
        'translate': _Quad_translate$,
      },
      {},
    ),
    'Quaternion': m.ClassMirror(
      'Quaternion',
      {
        '#as': Quaternion_as$,
        '#is': Quaternion_is$,
        'storage': _Quaternion_storage$,
        'x': _Quaternion_x$,
        'y': _Quaternion_y$,
        'z': _Quaternion_z$,
        'w': _Quaternion_w$,
        'radians': _Quaternion_radians$,
        'axis': _Quaternion_axis$,
        'length2': _Quaternion_length2$,
        'length': _Quaternion_length$,
        'clone': _Quaternion_clone$,
        'setFrom': _Quaternion_setFrom$,
        'setValues': _Quaternion_setValues$,
        'setAxisAngle': _Quaternion_setAxisAngle$,
        'setFromRotation': _Quaternion_setFromRotation$,
        'setFromTwoVectors': _Quaternion_setFromTwoVectors$,
        'setRandom': _Quaternion_setRandom$,
        'setDQ': _Quaternion_setDQ$,
        'setEuler': _Quaternion_setEuler$,
        'normalize': _Quaternion_normalize$,
        'conjugate': _Quaternion_conjugate$,
        'inverse': _Quaternion_inverse$,
        'normalized': _Quaternion_normalized$,
        'conjugated': _Quaternion_conjugated$,
        'inverted': _Quaternion_inverted$,
        'rotated': _Quaternion_rotated$,
        'rotate': _Quaternion_rotate$,
        'add': _Quaternion_add$,
        'sub': _Quaternion_sub$,
        'scale': _Quaternion_scale$,
        'scaled': _Quaternion_scaled$,
        '*': _Quaternion_times$$,
        '+': _Quaternion_plus$$,
        '-': _Quaternion_minus$$,
        'unary-': _Quaternion_unary_minus$$,
        '[]': _Quaternion_$index$$,
        '[]=': _Quaternion_$index_set$$,
        'asRotationMatrix': _Quaternion_asRotationMatrix$,
        'copyRotationInto': _Quaternion_copyRotationInto$,
        'toString': _Quaternion_toString$,
        'relativeError': _Quaternion_relativeError$,
        'absoluteError': _Quaternion_absoluteError$,
      },
      {
        'x': _Quaternion_x_set$,
        'y': _Quaternion_y_set$,
        'z': _Quaternion_z_set$,
        'w': _Quaternion_w_set$,
      },
    ),
    'Ray': m.ClassMirror(
      'Ray',
      {
        '#as': Ray_as$,
        '#is': Ray_is$,
        'origin': _Ray_origin$,
        'direction': _Ray_direction$,
        'copyFrom': _Ray_copyFrom$,
        'at': _Ray_at$,
        'copyAt': _Ray_copyAt$,
        'intersectsWithSphere': _Ray_intersectsWithSphere$,
        'intersectsWithTriangle': _Ray_intersectsWithTriangle$,
        'intersectsWithQuad': _Ray_intersectsWithQuad$,
        'intersectsWithAabb3': _Ray_intersectsWithAabb3$,
      },
      {},
    ),
    'Sphere': m.ClassMirror(
      'Sphere',
      {
        '#as': Sphere_as$,
        '#is': Sphere_is$,
        'radius': _Sphere_radius$,
        'center': _Sphere_center$,
        'copyFrom': _Sphere_copyFrom$,
        'containsVector3': _Sphere_containsVector3$,
        'intersectsWithVector3': _Sphere_intersectsWithVector3$,
        'intersectsWithSphere': _Sphere_intersectsWithSphere$,
      },
      {'radius': _Sphere_radius_set$},
    ),
    'Triangle': m.ClassMirror(
      'Triangle',
      {
        '#as': Triangle_as$,
        '#is': Triangle_is$,
        'point0': _Triangle_point0$,
        'point1': _Triangle_point1$,
        'point2': _Triangle_point2$,
        'copyFrom': _Triangle_copyFrom$,
        'copyNormalInto': _Triangle_copyNormalInto$,
        'transform': _Triangle_transform$,
        'translate': _Triangle_translate$,
      },
      {},
    ),
    'Vector': m.ClassMirror(
      'Vector',
      {
        '#as': Vector_as$,
        '#is': Vector_is$,
        'storage': _Vector_storage$,
      },
      {},
    ),
    'Vector2': m.ClassMirror(
      'Vector2',
      {
        '#as': Vector2_as$,
        '#is': Vector2_is$,
        'storage': _Vector2_storage$,
        'hashCode': _Vector2_hashCode$,
        'length': _Vector2_length$,
        'length2': _Vector2_length2$,
        'isInfinite': _Vector2_isInfinite$,
        'isNaN': _Vector2_isNaN$,
        'xx': _Vector2_xx$,
        'xy': _Vector2_xy$,
        'yx': _Vector2_yx$,
        'yy': _Vector2_yy$,
        'xxx': _Vector2_xxx$,
        'xxy': _Vector2_xxy$,
        'xyx': _Vector2_xyx$,
        'xyy': _Vector2_xyy$,
        'yxx': _Vector2_yxx$,
        'yxy': _Vector2_yxy$,
        'yyx': _Vector2_yyx$,
        'yyy': _Vector2_yyy$,
        'xxxx': _Vector2_xxxx$,
        'xxxy': _Vector2_xxxy$,
        'xxyx': _Vector2_xxyx$,
        'xxyy': _Vector2_xxyy$,
        'xyxx': _Vector2_xyxx$,
        'xyxy': _Vector2_xyxy$,
        'xyyx': _Vector2_xyyx$,
        'xyyy': _Vector2_xyyy$,
        'yxxx': _Vector2_yxxx$,
        'yxxy': _Vector2_yxxy$,
        'yxyx': _Vector2_yxyx$,
        'yxyy': _Vector2_yxyy$,
        'yyxx': _Vector2_yyxx$,
        'yyxy': _Vector2_yyxy$,
        'yyyx': _Vector2_yyyx$,
        'yyyy': _Vector2_yyyy$,
        'r': _Vector2_r$,
        'g': _Vector2_g$,
        's': _Vector2_s$,
        't': _Vector2_t$,
        'x': _Vector2_x$,
        'y': _Vector2_y$,
        'rr': _Vector2_rr$,
        'rg': _Vector2_rg$,
        'gr': _Vector2_gr$,
        'gg': _Vector2_gg$,
        'rrr': _Vector2_rrr$,
        'rrg': _Vector2_rrg$,
        'rgr': _Vector2_rgr$,
        'rgg': _Vector2_rgg$,
        'grr': _Vector2_grr$,
        'grg': _Vector2_grg$,
        'ggr': _Vector2_ggr$,
        'ggg': _Vector2_ggg$,
        'rrrr': _Vector2_rrrr$,
        'rrrg': _Vector2_rrrg$,
        'rrgr': _Vector2_rrgr$,
        'rrgg': _Vector2_rrgg$,
        'rgrr': _Vector2_rgrr$,
        'rgrg': _Vector2_rgrg$,
        'rggr': _Vector2_rggr$,
        'rggg': _Vector2_rggg$,
        'grrr': _Vector2_grrr$,
        'grrg': _Vector2_grrg$,
        'grgr': _Vector2_grgr$,
        'grgg': _Vector2_grgg$,
        'ggrr': _Vector2_ggrr$,
        'ggrg': _Vector2_ggrg$,
        'gggr': _Vector2_gggr$,
        'gggg': _Vector2_gggg$,
        'ss': _Vector2_ss$,
        'st': _Vector2_st$,
        'ts': _Vector2_ts$,
        'tt': _Vector2_tt$,
        'sss': _Vector2_sss$,
        'sst': _Vector2_sst$,
        'sts': _Vector2_sts$,
        'stt': _Vector2_stt$,
        'tss': _Vector2_tss$,
        'tst': _Vector2_tst$,
        'tts': _Vector2_tts$,
        'ttt': _Vector2_ttt$,
        'ssss': _Vector2_ssss$,
        'ssst': _Vector2_ssst$,
        'ssts': _Vector2_ssts$,
        'sstt': _Vector2_sstt$,
        'stss': _Vector2_stss$,
        'stst': _Vector2_stst$,
        'stts': _Vector2_stts$,
        'sttt': _Vector2_sttt$,
        'tsss': _Vector2_tsss$,
        'tsst': _Vector2_tsst$,
        'tsts': _Vector2_tsts$,
        'tstt': _Vector2_tstt$,
        'ttss': _Vector2_ttss$,
        'ttst': _Vector2_ttst$,
        'ttts': _Vector2_ttts$,
        'tttt': _Vector2_tttt$,
        'setValues': _Vector2_setValues$,
        'setZero': _Vector2_setZero$,
        'setFrom': _Vector2_setFrom$,
        'splat': _Vector2_splat$,
        'toString': _Vector2_toString$,
        '==': _Vector2_eq$$,
        'unary-': _Vector2_unary_minus$$,
        '-': _Vector2_minus$$,
        '+': _Vector2_plus$$,
        '/': _Vector2_over$$,
        '*': _Vector2_times$$,
        '[]': _Vector2_$index$$,
        '[]=': _Vector2_$index_set$$,
        'normalize': _Vector2_normalize$,
        'normalized': _Vector2_normalized$,
        'normalizeInto': _Vector2_normalizeInto$,
        'distanceTo': _Vector2_distanceTo$,
        'distanceToSquared': _Vector2_distanceToSquared$,
        'angleTo': _Vector2_angleTo$,
        'angleToSigned': _Vector2_angleToSigned$,
        'dot': _Vector2_dot$,
        'postmultiply': _Vector2_postmultiply$,
        'cross': _Vector2_cross$,
        'scaleOrthogonalInto': _Vector2_scaleOrthogonalInto$,
        'reflect': _Vector2_reflect$,
        'reflected': _Vector2_reflected$,
        'relativeError': _Vector2_relativeError$,
        'absoluteError': _Vector2_absoluteError$,
        'add': _Vector2_add$,
        'addScaled': _Vector2_addScaled$,
        'sub': _Vector2_sub$,
        'multiply': _Vector2_multiply$,
        'divide': _Vector2_divide$,
        'scale': _Vector2_scale$,
        'scaled': _Vector2_scaled$,
        'negate': _Vector2_negate$,
        'absolute': _Vector2_absolute$,
        'clamp': _Vector2_clamp$,
        'clampScalar': _Vector2_clampScalar$,
        'floor': _Vector2_floor$,
        'ceil': _Vector2_ceil$,
        'round': _Vector2_round$,
        'roundToZero': _Vector2_roundToZero$,
        'clone': _Vector2_clone$,
        'copyInto': _Vector2_copyInto$,
        'copyIntoArray': _Vector2_copyIntoArray$,
        'copyFromArray': _Vector2_copyFromArray$,
      },
      {
        'length': _Vector2_length_set$,
        'xy': _Vector2_xy_set$,
        'yx': _Vector2_yx_set$,
        'r': _Vector2_r_set$,
        'g': _Vector2_g_set$,
        's': _Vector2_s_set$,
        't': _Vector2_t_set$,
        'x': _Vector2_x_set$,
        'y': _Vector2_y_set$,
        'rg': _Vector2_rg_set$,
        'gr': _Vector2_gr_set$,
        'st': _Vector2_st_set$,
        'ts': _Vector2_ts_set$,
      },
    ),
    'Vector3': m.ClassMirror(
      'Vector3',
      {
        '#as': Vector3_as$,
        '#is': Vector3_is$,
        'storage': _Vector3_storage$,
        'hashCode': _Vector3_hashCode$,
        'length': _Vector3_length$,
        'length2': _Vector3_length2$,
        'isInfinite': _Vector3_isInfinite$,
        'isNaN': _Vector3_isNaN$,
        'xx': _Vector3_xx$,
        'xy': _Vector3_xy$,
        'xz': _Vector3_xz$,
        'yx': _Vector3_yx$,
        'yy': _Vector3_yy$,
        'yz': _Vector3_yz$,
        'zx': _Vector3_zx$,
        'zy': _Vector3_zy$,
        'zz': _Vector3_zz$,
        'xxx': _Vector3_xxx$,
        'xxy': _Vector3_xxy$,
        'xxz': _Vector3_xxz$,
        'xyx': _Vector3_xyx$,
        'xyy': _Vector3_xyy$,
        'xyz': _Vector3_xyz$,
        'xzx': _Vector3_xzx$,
        'xzy': _Vector3_xzy$,
        'xzz': _Vector3_xzz$,
        'yxx': _Vector3_yxx$,
        'yxy': _Vector3_yxy$,
        'yxz': _Vector3_yxz$,
        'yyx': _Vector3_yyx$,
        'yyy': _Vector3_yyy$,
        'yyz': _Vector3_yyz$,
        'yzx': _Vector3_yzx$,
        'yzy': _Vector3_yzy$,
        'yzz': _Vector3_yzz$,
        'zxx': _Vector3_zxx$,
        'zxy': _Vector3_zxy$,
        'zxz': _Vector3_zxz$,
        'zyx': _Vector3_zyx$,
        'zyy': _Vector3_zyy$,
        'zyz': _Vector3_zyz$,
        'zzx': _Vector3_zzx$,
        'zzy': _Vector3_zzy$,
        'zzz': _Vector3_zzz$,
        'xxxx': _Vector3_xxxx$,
        'xxxy': _Vector3_xxxy$,
        'xxxz': _Vector3_xxxz$,
        'xxyx': _Vector3_xxyx$,
        'xxyy': _Vector3_xxyy$,
        'xxyz': _Vector3_xxyz$,
        'xxzx': _Vector3_xxzx$,
        'xxzy': _Vector3_xxzy$,
        'xxzz': _Vector3_xxzz$,
        'xyxx': _Vector3_xyxx$,
        'xyxy': _Vector3_xyxy$,
        'xyxz': _Vector3_xyxz$,
        'xyyx': _Vector3_xyyx$,
        'xyyy': _Vector3_xyyy$,
        'xyyz': _Vector3_xyyz$,
        'xyzx': _Vector3_xyzx$,
        'xyzy': _Vector3_xyzy$,
        'xyzz': _Vector3_xyzz$,
        'xzxx': _Vector3_xzxx$,
        'xzxy': _Vector3_xzxy$,
        'xzxz': _Vector3_xzxz$,
        'xzyx': _Vector3_xzyx$,
        'xzyy': _Vector3_xzyy$,
        'xzyz': _Vector3_xzyz$,
        'xzzx': _Vector3_xzzx$,
        'xzzy': _Vector3_xzzy$,
        'xzzz': _Vector3_xzzz$,
        'yxxx': _Vector3_yxxx$,
        'yxxy': _Vector3_yxxy$,
        'yxxz': _Vector3_yxxz$,
        'yxyx': _Vector3_yxyx$,
        'yxyy': _Vector3_yxyy$,
        'yxyz': _Vector3_yxyz$,
        'yxzx': _Vector3_yxzx$,
        'yxzy': _Vector3_yxzy$,
        'yxzz': _Vector3_yxzz$,
        'yyxx': _Vector3_yyxx$,
        'yyxy': _Vector3_yyxy$,
        'yyxz': _Vector3_yyxz$,
        'yyyx': _Vector3_yyyx$,
        'yyyy': _Vector3_yyyy$,
        'yyyz': _Vector3_yyyz$,
        'yyzx': _Vector3_yyzx$,
        'yyzy': _Vector3_yyzy$,
        'yyzz': _Vector3_yyzz$,
        'yzxx': _Vector3_yzxx$,
        'yzxy': _Vector3_yzxy$,
        'yzxz': _Vector3_yzxz$,
        'yzyx': _Vector3_yzyx$,
        'yzyy': _Vector3_yzyy$,
        'yzyz': _Vector3_yzyz$,
        'yzzx': _Vector3_yzzx$,
        'yzzy': _Vector3_yzzy$,
        'yzzz': _Vector3_yzzz$,
        'zxxx': _Vector3_zxxx$,
        'zxxy': _Vector3_zxxy$,
        'zxxz': _Vector3_zxxz$,
        'zxyx': _Vector3_zxyx$,
        'zxyy': _Vector3_zxyy$,
        'zxyz': _Vector3_zxyz$,
        'zxzx': _Vector3_zxzx$,
        'zxzy': _Vector3_zxzy$,
        'zxzz': _Vector3_zxzz$,
        'zyxx': _Vector3_zyxx$,
        'zyxy': _Vector3_zyxy$,
        'zyxz': _Vector3_zyxz$,
        'zyyx': _Vector3_zyyx$,
        'zyyy': _Vector3_zyyy$,
        'zyyz': _Vector3_zyyz$,
        'zyzx': _Vector3_zyzx$,
        'zyzy': _Vector3_zyzy$,
        'zyzz': _Vector3_zyzz$,
        'zzxx': _Vector3_zzxx$,
        'zzxy': _Vector3_zzxy$,
        'zzxz': _Vector3_zzxz$,
        'zzyx': _Vector3_zzyx$,
        'zzyy': _Vector3_zzyy$,
        'zzyz': _Vector3_zzyz$,
        'zzzx': _Vector3_zzzx$,
        'zzzy': _Vector3_zzzy$,
        'zzzz': _Vector3_zzzz$,
        'r': _Vector3_r$,
        'g': _Vector3_g$,
        'b': _Vector3_b$,
        's': _Vector3_s$,
        't': _Vector3_t$,
        'p': _Vector3_p$,
        'x': _Vector3_x$,
        'y': _Vector3_y$,
        'z': _Vector3_z$,
        'rr': _Vector3_rr$,
        'rg': _Vector3_rg$,
        'rb': _Vector3_rb$,
        'gr': _Vector3_gr$,
        'gg': _Vector3_gg$,
        'gb': _Vector3_gb$,
        'br': _Vector3_br$,
        'bg': _Vector3_bg$,
        'bb': _Vector3_bb$,
        'rrr': _Vector3_rrr$,
        'rrg': _Vector3_rrg$,
        'rrb': _Vector3_rrb$,
        'rgr': _Vector3_rgr$,
        'rgg': _Vector3_rgg$,
        'rgb': _Vector3_rgb$,
        'rbr': _Vector3_rbr$,
        'rbg': _Vector3_rbg$,
        'rbb': _Vector3_rbb$,
        'grr': _Vector3_grr$,
        'grg': _Vector3_grg$,
        'grb': _Vector3_grb$,
        'ggr': _Vector3_ggr$,
        'ggg': _Vector3_ggg$,
        'ggb': _Vector3_ggb$,
        'gbr': _Vector3_gbr$,
        'gbg': _Vector3_gbg$,
        'gbb': _Vector3_gbb$,
        'brr': _Vector3_brr$,
        'brg': _Vector3_brg$,
        'brb': _Vector3_brb$,
        'bgr': _Vector3_bgr$,
        'bgg': _Vector3_bgg$,
        'bgb': _Vector3_bgb$,
        'bbr': _Vector3_bbr$,
        'bbg': _Vector3_bbg$,
        'bbb': _Vector3_bbb$,
        'rrrr': _Vector3_rrrr$,
        'rrrg': _Vector3_rrrg$,
        'rrrb': _Vector3_rrrb$,
        'rrgr': _Vector3_rrgr$,
        'rrgg': _Vector3_rrgg$,
        'rrgb': _Vector3_rrgb$,
        'rrbr': _Vector3_rrbr$,
        'rrbg': _Vector3_rrbg$,
        'rrbb': _Vector3_rrbb$,
        'rgrr': _Vector3_rgrr$,
        'rgrg': _Vector3_rgrg$,
        'rgrb': _Vector3_rgrb$,
        'rggr': _Vector3_rggr$,
        'rggg': _Vector3_rggg$,
        'rggb': _Vector3_rggb$,
        'rgbr': _Vector3_rgbr$,
        'rgbg': _Vector3_rgbg$,
        'rgbb': _Vector3_rgbb$,
        'rbrr': _Vector3_rbrr$,
        'rbrg': _Vector3_rbrg$,
        'rbrb': _Vector3_rbrb$,
        'rbgr': _Vector3_rbgr$,
        'rbgg': _Vector3_rbgg$,
        'rbgb': _Vector3_rbgb$,
        'rbbr': _Vector3_rbbr$,
        'rbbg': _Vector3_rbbg$,
        'rbbb': _Vector3_rbbb$,
        'grrr': _Vector3_grrr$,
        'grrg': _Vector3_grrg$,
        'grrb': _Vector3_grrb$,
        'grgr': _Vector3_grgr$,
        'grgg': _Vector3_grgg$,
        'grgb': _Vector3_grgb$,
        'grbr': _Vector3_grbr$,
        'grbg': _Vector3_grbg$,
        'grbb': _Vector3_grbb$,
        'ggrr': _Vector3_ggrr$,
        'ggrg': _Vector3_ggrg$,
        'ggrb': _Vector3_ggrb$,
        'gggr': _Vector3_gggr$,
        'gggg': _Vector3_gggg$,
        'gggb': _Vector3_gggb$,
        'ggbr': _Vector3_ggbr$,
        'ggbg': _Vector3_ggbg$,
        'ggbb': _Vector3_ggbb$,
        'gbrr': _Vector3_gbrr$,
        'gbrg': _Vector3_gbrg$,
        'gbrb': _Vector3_gbrb$,
        'gbgr': _Vector3_gbgr$,
        'gbgg': _Vector3_gbgg$,
        'gbgb': _Vector3_gbgb$,
        'gbbr': _Vector3_gbbr$,
        'gbbg': _Vector3_gbbg$,
        'gbbb': _Vector3_gbbb$,
        'brrr': _Vector3_brrr$,
        'brrg': _Vector3_brrg$,
        'brrb': _Vector3_brrb$,
        'brgr': _Vector3_brgr$,
        'brgg': _Vector3_brgg$,
        'brgb': _Vector3_brgb$,
        'brbr': _Vector3_brbr$,
        'brbg': _Vector3_brbg$,
        'brbb': _Vector3_brbb$,
        'bgrr': _Vector3_bgrr$,
        'bgrg': _Vector3_bgrg$,
        'bgrb': _Vector3_bgrb$,
        'bggr': _Vector3_bggr$,
        'bggg': _Vector3_bggg$,
        'bggb': _Vector3_bggb$,
        'bgbr': _Vector3_bgbr$,
        'bgbg': _Vector3_bgbg$,
        'bgbb': _Vector3_bgbb$,
        'bbrr': _Vector3_bbrr$,
        'bbrg': _Vector3_bbrg$,
        'bbrb': _Vector3_bbrb$,
        'bbgr': _Vector3_bbgr$,
        'bbgg': _Vector3_bbgg$,
        'bbgb': _Vector3_bbgb$,
        'bbbr': _Vector3_bbbr$,
        'bbbg': _Vector3_bbbg$,
        'bbbb': _Vector3_bbbb$,
        'ss': _Vector3_ss$,
        'st': _Vector3_st$,
        'sp': _Vector3_sp$,
        'ts': _Vector3_ts$,
        'tt': _Vector3_tt$,
        'tp': _Vector3_tp$,
        'ps': _Vector3_ps$,
        'pt': _Vector3_pt$,
        'pp': _Vector3_pp$,
        'sss': _Vector3_sss$,
        'sst': _Vector3_sst$,
        'ssp': _Vector3_ssp$,
        'sts': _Vector3_sts$,
        'stt': _Vector3_stt$,
        'stp': _Vector3_stp$,
        'sps': _Vector3_sps$,
        'spt': _Vector3_spt$,
        'spp': _Vector3_spp$,
        'tss': _Vector3_tss$,
        'tst': _Vector3_tst$,
        'tsp': _Vector3_tsp$,
        'tts': _Vector3_tts$,
        'ttt': _Vector3_ttt$,
        'ttp': _Vector3_ttp$,
        'tps': _Vector3_tps$,
        'tpt': _Vector3_tpt$,
        'tpp': _Vector3_tpp$,
        'pss': _Vector3_pss$,
        'pst': _Vector3_pst$,
        'psp': _Vector3_psp$,
        'pts': _Vector3_pts$,
        'ptt': _Vector3_ptt$,
        'ptp': _Vector3_ptp$,
        'pps': _Vector3_pps$,
        'ppt': _Vector3_ppt$,
        'ppp': _Vector3_ppp$,
        'ssss': _Vector3_ssss$,
        'ssst': _Vector3_ssst$,
        'sssp': _Vector3_sssp$,
        'ssts': _Vector3_ssts$,
        'sstt': _Vector3_sstt$,
        'sstp': _Vector3_sstp$,
        'ssps': _Vector3_ssps$,
        'sspt': _Vector3_sspt$,
        'sspp': _Vector3_sspp$,
        'stss': _Vector3_stss$,
        'stst': _Vector3_stst$,
        'stsp': _Vector3_stsp$,
        'stts': _Vector3_stts$,
        'sttt': _Vector3_sttt$,
        'sttp': _Vector3_sttp$,
        'stps': _Vector3_stps$,
        'stpt': _Vector3_stpt$,
        'stpp': _Vector3_stpp$,
        'spss': _Vector3_spss$,
        'spst': _Vector3_spst$,
        'spsp': _Vector3_spsp$,
        'spts': _Vector3_spts$,
        'sptt': _Vector3_sptt$,
        'sptp': _Vector3_sptp$,
        'spps': _Vector3_spps$,
        'sppt': _Vector3_sppt$,
        'sppp': _Vector3_sppp$,
        'tsss': _Vector3_tsss$,
        'tsst': _Vector3_tsst$,
        'tssp': _Vector3_tssp$,
        'tsts': _Vector3_tsts$,
        'tstt': _Vector3_tstt$,
        'tstp': _Vector3_tstp$,
        'tsps': _Vector3_tsps$,
        'tspt': _Vector3_tspt$,
        'tspp': _Vector3_tspp$,
        'ttss': _Vector3_ttss$,
        'ttst': _Vector3_ttst$,
        'ttsp': _Vector3_ttsp$,
        'ttts': _Vector3_ttts$,
        'tttt': _Vector3_tttt$,
        'tttp': _Vector3_tttp$,
        'ttps': _Vector3_ttps$,
        'ttpt': _Vector3_ttpt$,
        'ttpp': _Vector3_ttpp$,
        'tpss': _Vector3_tpss$,
        'tpst': _Vector3_tpst$,
        'tpsp': _Vector3_tpsp$,
        'tpts': _Vector3_tpts$,
        'tptt': _Vector3_tptt$,
        'tptp': _Vector3_tptp$,
        'tpps': _Vector3_tpps$,
        'tppt': _Vector3_tppt$,
        'tppp': _Vector3_tppp$,
        'psss': _Vector3_psss$,
        'psst': _Vector3_psst$,
        'pssp': _Vector3_pssp$,
        'psts': _Vector3_psts$,
        'pstt': _Vector3_pstt$,
        'pstp': _Vector3_pstp$,
        'psps': _Vector3_psps$,
        'pspt': _Vector3_pspt$,
        'pspp': _Vector3_pspp$,
        'ptss': _Vector3_ptss$,
        'ptst': _Vector3_ptst$,
        'ptsp': _Vector3_ptsp$,
        'ptts': _Vector3_ptts$,
        'pttt': _Vector3_pttt$,
        'pttp': _Vector3_pttp$,
        'ptps': _Vector3_ptps$,
        'ptpt': _Vector3_ptpt$,
        'ptpp': _Vector3_ptpp$,
        'ppss': _Vector3_ppss$,
        'ppst': _Vector3_ppst$,
        'ppsp': _Vector3_ppsp$,
        'ppts': _Vector3_ppts$,
        'pptt': _Vector3_pptt$,
        'pptp': _Vector3_pptp$,
        'ppps': _Vector3_ppps$,
        'pppt': _Vector3_pppt$,
        'pppp': _Vector3_pppp$,
        'setValues': _Vector3_setValues$,
        'setZero': _Vector3_setZero$,
        'setFrom': _Vector3_setFrom$,
        'splat': _Vector3_splat$,
        'toString': _Vector3_toString$,
        '==': _Vector3_eq$$,
        'unary-': _Vector3_unary_minus$$,
        '-': _Vector3_minus$$,
        '+': _Vector3_plus$$,
        '/': _Vector3_over$$,
        '*': _Vector3_times$$,
        '[]': _Vector3_$index$$,
        '[]=': _Vector3_$index_set$$,
        'normalize': _Vector3_normalize$,
        'normalized': _Vector3_normalized$,
        'normalizeInto': _Vector3_normalizeInto$,
        'distanceTo': _Vector3_distanceTo$,
        'distanceToSquared': _Vector3_distanceToSquared$,
        'angleTo': _Vector3_angleTo$,
        'angleToSigned': _Vector3_angleToSigned$,
        'dot': _Vector3_dot$,
        'postmultiply': _Vector3_postmultiply$,
        'cross': _Vector3_cross$,
        'crossInto': _Vector3_crossInto$,
        'reflect': _Vector3_reflect$,
        'reflected': _Vector3_reflected$,
        'applyProjection': _Vector3_applyProjection$,
        'applyAxisAngle': _Vector3_applyAxisAngle$,
        'applyQuaternion': _Vector3_applyQuaternion$,
        'applyMatrix3': _Vector3_applyMatrix3$,
        'applyMatrix4': _Vector3_applyMatrix4$,
        'relativeError': _Vector3_relativeError$,
        'absoluteError': _Vector3_absoluteError$,
        'add': _Vector3_add$,
        'addScaled': _Vector3_addScaled$,
        'sub': _Vector3_sub$,
        'multiply': _Vector3_multiply$,
        'divide': _Vector3_divide$,
        'scale': _Vector3_scale$,
        'scaled': _Vector3_scaled$,
        'negate': _Vector3_negate$,
        'absolute': _Vector3_absolute$,
        'clamp': _Vector3_clamp$,
        'clampScalar': _Vector3_clampScalar$,
        'floor': _Vector3_floor$,
        'ceil': _Vector3_ceil$,
        'round': _Vector3_round$,
        'roundToZero': _Vector3_roundToZero$,
        'clone': _Vector3_clone$,
        'copyInto': _Vector3_copyInto$,
        'copyIntoArray': _Vector3_copyIntoArray$,
        'copyFromArray': _Vector3_copyFromArray$,
      },
      {
        'length': _Vector3_length_set$,
        'xy': _Vector3_xy_set$,
        'xz': _Vector3_xz_set$,
        'yx': _Vector3_yx_set$,
        'yz': _Vector3_yz_set$,
        'zx': _Vector3_zx_set$,
        'zy': _Vector3_zy_set$,
        'xyz': _Vector3_xyz_set$,
        'xzy': _Vector3_xzy_set$,
        'yxz': _Vector3_yxz_set$,
        'yzx': _Vector3_yzx_set$,
        'zxy': _Vector3_zxy_set$,
        'zyx': _Vector3_zyx_set$,
        'r': _Vector3_r_set$,
        'g': _Vector3_g_set$,
        'b': _Vector3_b_set$,
        's': _Vector3_s_set$,
        't': _Vector3_t_set$,
        'p': _Vector3_p_set$,
        'x': _Vector3_x_set$,
        'y': _Vector3_y_set$,
        'z': _Vector3_z_set$,
        'rg': _Vector3_rg_set$,
        'rb': _Vector3_rb_set$,
        'gr': _Vector3_gr_set$,
        'gb': _Vector3_gb_set$,
        'br': _Vector3_br_set$,
        'bg': _Vector3_bg_set$,
        'rgb': _Vector3_rgb_set$,
        'rbg': _Vector3_rbg_set$,
        'grb': _Vector3_grb_set$,
        'gbr': _Vector3_gbr_set$,
        'brg': _Vector3_brg_set$,
        'bgr': _Vector3_bgr_set$,
        'st': _Vector3_st_set$,
        'sp': _Vector3_sp_set$,
        'ts': _Vector3_ts_set$,
        'tp': _Vector3_tp_set$,
        'ps': _Vector3_ps_set$,
        'pt': _Vector3_pt_set$,
        'stp': _Vector3_stp_set$,
        'spt': _Vector3_spt_set$,
        'tsp': _Vector3_tsp_set$,
        'tps': _Vector3_tps_set$,
        'pst': _Vector3_pst_set$,
        'pts': _Vector3_pts_set$,
      },
    ),
    'Vector4': m.ClassMirror(
      'Vector4',
      {
        '#as': Vector4_as$,
        '#is': Vector4_is$,
        'storage': _Vector4_storage$,
        'hashCode': _Vector4_hashCode$,
        'length': _Vector4_length$,
        'length2': _Vector4_length2$,
        'isInfinite': _Vector4_isInfinite$,
        'isNaN': _Vector4_isNaN$,
        'xx': _Vector4_xx$,
        'xy': _Vector4_xy$,
        'xz': _Vector4_xz$,
        'xw': _Vector4_xw$,
        'yx': _Vector4_yx$,
        'yy': _Vector4_yy$,
        'yz': _Vector4_yz$,
        'yw': _Vector4_yw$,
        'zx': _Vector4_zx$,
        'zy': _Vector4_zy$,
        'zz': _Vector4_zz$,
        'zw': _Vector4_zw$,
        'wx': _Vector4_wx$,
        'wy': _Vector4_wy$,
        'wz': _Vector4_wz$,
        'ww': _Vector4_ww$,
        'xxx': _Vector4_xxx$,
        'xxy': _Vector4_xxy$,
        'xxz': _Vector4_xxz$,
        'xxw': _Vector4_xxw$,
        'xyx': _Vector4_xyx$,
        'xyy': _Vector4_xyy$,
        'xyz': _Vector4_xyz$,
        'xyw': _Vector4_xyw$,
        'xzx': _Vector4_xzx$,
        'xzy': _Vector4_xzy$,
        'xzz': _Vector4_xzz$,
        'xzw': _Vector4_xzw$,
        'xwx': _Vector4_xwx$,
        'xwy': _Vector4_xwy$,
        'xwz': _Vector4_xwz$,
        'xww': _Vector4_xww$,
        'yxx': _Vector4_yxx$,
        'yxy': _Vector4_yxy$,
        'yxz': _Vector4_yxz$,
        'yxw': _Vector4_yxw$,
        'yyx': _Vector4_yyx$,
        'yyy': _Vector4_yyy$,
        'yyz': _Vector4_yyz$,
        'yyw': _Vector4_yyw$,
        'yzx': _Vector4_yzx$,
        'yzy': _Vector4_yzy$,
        'yzz': _Vector4_yzz$,
        'yzw': _Vector4_yzw$,
        'ywx': _Vector4_ywx$,
        'ywy': _Vector4_ywy$,
        'ywz': _Vector4_ywz$,
        'yww': _Vector4_yww$,
        'zxx': _Vector4_zxx$,
        'zxy': _Vector4_zxy$,
        'zxz': _Vector4_zxz$,
        'zxw': _Vector4_zxw$,
        'zyx': _Vector4_zyx$,
        'zyy': _Vector4_zyy$,
        'zyz': _Vector4_zyz$,
        'zyw': _Vector4_zyw$,
        'zzx': _Vector4_zzx$,
        'zzy': _Vector4_zzy$,
        'zzz': _Vector4_zzz$,
        'zzw': _Vector4_zzw$,
        'zwx': _Vector4_zwx$,
        'zwy': _Vector4_zwy$,
        'zwz': _Vector4_zwz$,
        'zww': _Vector4_zww$,
        'wxx': _Vector4_wxx$,
        'wxy': _Vector4_wxy$,
        'wxz': _Vector4_wxz$,
        'wxw': _Vector4_wxw$,
        'wyx': _Vector4_wyx$,
        'wyy': _Vector4_wyy$,
        'wyz': _Vector4_wyz$,
        'wyw': _Vector4_wyw$,
        'wzx': _Vector4_wzx$,
        'wzy': _Vector4_wzy$,
        'wzz': _Vector4_wzz$,
        'wzw': _Vector4_wzw$,
        'wwx': _Vector4_wwx$,
        'wwy': _Vector4_wwy$,
        'wwz': _Vector4_wwz$,
        'www': _Vector4_www$,
        'xxxx': _Vector4_xxxx$,
        'xxxy': _Vector4_xxxy$,
        'xxxz': _Vector4_xxxz$,
        'xxxw': _Vector4_xxxw$,
        'xxyx': _Vector4_xxyx$,
        'xxyy': _Vector4_xxyy$,
        'xxyz': _Vector4_xxyz$,
        'xxyw': _Vector4_xxyw$,
        'xxzx': _Vector4_xxzx$,
        'xxzy': _Vector4_xxzy$,
        'xxzz': _Vector4_xxzz$,
        'xxzw': _Vector4_xxzw$,
        'xxwx': _Vector4_xxwx$,
        'xxwy': _Vector4_xxwy$,
        'xxwz': _Vector4_xxwz$,
        'xxww': _Vector4_xxww$,
        'xyxx': _Vector4_xyxx$,
        'xyxy': _Vector4_xyxy$,
        'xyxz': _Vector4_xyxz$,
        'xyxw': _Vector4_xyxw$,
        'xyyx': _Vector4_xyyx$,
        'xyyy': _Vector4_xyyy$,
        'xyyz': _Vector4_xyyz$,
        'xyyw': _Vector4_xyyw$,
        'xyzx': _Vector4_xyzx$,
        'xyzy': _Vector4_xyzy$,
        'xyzz': _Vector4_xyzz$,
        'xyzw': _Vector4_xyzw$,
        'xywx': _Vector4_xywx$,
        'xywy': _Vector4_xywy$,
        'xywz': _Vector4_xywz$,
        'xyww': _Vector4_xyww$,
        'xzxx': _Vector4_xzxx$,
        'xzxy': _Vector4_xzxy$,
        'xzxz': _Vector4_xzxz$,
        'xzxw': _Vector4_xzxw$,
        'xzyx': _Vector4_xzyx$,
        'xzyy': _Vector4_xzyy$,
        'xzyz': _Vector4_xzyz$,
        'xzyw': _Vector4_xzyw$,
        'xzzx': _Vector4_xzzx$,
        'xzzy': _Vector4_xzzy$,
        'xzzz': _Vector4_xzzz$,
        'xzzw': _Vector4_xzzw$,
        'xzwx': _Vector4_xzwx$,
        'xzwy': _Vector4_xzwy$,
        'xzwz': _Vector4_xzwz$,
        'xzww': _Vector4_xzww$,
        'xwxx': _Vector4_xwxx$,
        'xwxy': _Vector4_xwxy$,
        'xwxz': _Vector4_xwxz$,
        'xwxw': _Vector4_xwxw$,
        'xwyx': _Vector4_xwyx$,
        'xwyy': _Vector4_xwyy$,
        'xwyz': _Vector4_xwyz$,
        'xwyw': _Vector4_xwyw$,
        'xwzx': _Vector4_xwzx$,
        'xwzy': _Vector4_xwzy$,
        'xwzz': _Vector4_xwzz$,
        'xwzw': _Vector4_xwzw$,
        'xwwx': _Vector4_xwwx$,
        'xwwy': _Vector4_xwwy$,
        'xwwz': _Vector4_xwwz$,
        'xwww': _Vector4_xwww$,
        'yxxx': _Vector4_yxxx$,
        'yxxy': _Vector4_yxxy$,
        'yxxz': _Vector4_yxxz$,
        'yxxw': _Vector4_yxxw$,
        'yxyx': _Vector4_yxyx$,
        'yxyy': _Vector4_yxyy$,
        'yxyz': _Vector4_yxyz$,
        'yxyw': _Vector4_yxyw$,
        'yxzx': _Vector4_yxzx$,
        'yxzy': _Vector4_yxzy$,
        'yxzz': _Vector4_yxzz$,
        'yxzw': _Vector4_yxzw$,
        'yxwx': _Vector4_yxwx$,
        'yxwy': _Vector4_yxwy$,
        'yxwz': _Vector4_yxwz$,
        'yxww': _Vector4_yxww$,
        'yyxx': _Vector4_yyxx$,
        'yyxy': _Vector4_yyxy$,
        'yyxz': _Vector4_yyxz$,
        'yyxw': _Vector4_yyxw$,
        'yyyx': _Vector4_yyyx$,
        'yyyy': _Vector4_yyyy$,
        'yyyz': _Vector4_yyyz$,
        'yyyw': _Vector4_yyyw$,
        'yyzx': _Vector4_yyzx$,
        'yyzy': _Vector4_yyzy$,
        'yyzz': _Vector4_yyzz$,
        'yyzw': _Vector4_yyzw$,
        'yywx': _Vector4_yywx$,
        'yywy': _Vector4_yywy$,
        'yywz': _Vector4_yywz$,
        'yyww': _Vector4_yyww$,
        'yzxx': _Vector4_yzxx$,
        'yzxy': _Vector4_yzxy$,
        'yzxz': _Vector4_yzxz$,
        'yzxw': _Vector4_yzxw$,
        'yzyx': _Vector4_yzyx$,
        'yzyy': _Vector4_yzyy$,
        'yzyz': _Vector4_yzyz$,
        'yzyw': _Vector4_yzyw$,
        'yzzx': _Vector4_yzzx$,
        'yzzy': _Vector4_yzzy$,
        'yzzz': _Vector4_yzzz$,
        'yzzw': _Vector4_yzzw$,
        'yzwx': _Vector4_yzwx$,
        'yzwy': _Vector4_yzwy$,
        'yzwz': _Vector4_yzwz$,
        'yzww': _Vector4_yzww$,
        'ywxx': _Vector4_ywxx$,
        'ywxy': _Vector4_ywxy$,
        'ywxz': _Vector4_ywxz$,
        'ywxw': _Vector4_ywxw$,
        'ywyx': _Vector4_ywyx$,
        'ywyy': _Vector4_ywyy$,
        'ywyz': _Vector4_ywyz$,
        'ywyw': _Vector4_ywyw$,
        'ywzx': _Vector4_ywzx$,
        'ywzy': _Vector4_ywzy$,
        'ywzz': _Vector4_ywzz$,
        'ywzw': _Vector4_ywzw$,
        'ywwx': _Vector4_ywwx$,
        'ywwy': _Vector4_ywwy$,
        'ywwz': _Vector4_ywwz$,
        'ywww': _Vector4_ywww$,
        'zxxx': _Vector4_zxxx$,
        'zxxy': _Vector4_zxxy$,
        'zxxz': _Vector4_zxxz$,
        'zxxw': _Vector4_zxxw$,
        'zxyx': _Vector4_zxyx$,
        'zxyy': _Vector4_zxyy$,
        'zxyz': _Vector4_zxyz$,
        'zxyw': _Vector4_zxyw$,
        'zxzx': _Vector4_zxzx$,
        'zxzy': _Vector4_zxzy$,
        'zxzz': _Vector4_zxzz$,
        'zxzw': _Vector4_zxzw$,
        'zxwx': _Vector4_zxwx$,
        'zxwy': _Vector4_zxwy$,
        'zxwz': _Vector4_zxwz$,
        'zxww': _Vector4_zxww$,
        'zyxx': _Vector4_zyxx$,
        'zyxy': _Vector4_zyxy$,
        'zyxz': _Vector4_zyxz$,
        'zyxw': _Vector4_zyxw$,
        'zyyx': _Vector4_zyyx$,
        'zyyy': _Vector4_zyyy$,
        'zyyz': _Vector4_zyyz$,
        'zyyw': _Vector4_zyyw$,
        'zyzx': _Vector4_zyzx$,
        'zyzy': _Vector4_zyzy$,
        'zyzz': _Vector4_zyzz$,
        'zyzw': _Vector4_zyzw$,
        'zywx': _Vector4_zywx$,
        'zywy': _Vector4_zywy$,
        'zywz': _Vector4_zywz$,
        'zyww': _Vector4_zyww$,
        'zzxx': _Vector4_zzxx$,
        'zzxy': _Vector4_zzxy$,
        'zzxz': _Vector4_zzxz$,
        'zzxw': _Vector4_zzxw$,
        'zzyx': _Vector4_zzyx$,
        'zzyy': _Vector4_zzyy$,
        'zzyz': _Vector4_zzyz$,
        'zzyw': _Vector4_zzyw$,
        'zzzx': _Vector4_zzzx$,
        'zzzy': _Vector4_zzzy$,
        'zzzz': _Vector4_zzzz$,
        'zzzw': _Vector4_zzzw$,
        'zzwx': _Vector4_zzwx$,
        'zzwy': _Vector4_zzwy$,
        'zzwz': _Vector4_zzwz$,
        'zzww': _Vector4_zzww$,
        'zwxx': _Vector4_zwxx$,
        'zwxy': _Vector4_zwxy$,
        'zwxz': _Vector4_zwxz$,
        'zwxw': _Vector4_zwxw$,
        'zwyx': _Vector4_zwyx$,
        'zwyy': _Vector4_zwyy$,
        'zwyz': _Vector4_zwyz$,
        'zwyw': _Vector4_zwyw$,
        'zwzx': _Vector4_zwzx$,
        'zwzy': _Vector4_zwzy$,
        'zwzz': _Vector4_zwzz$,
        'zwzw': _Vector4_zwzw$,
        'zwwx': _Vector4_zwwx$,
        'zwwy': _Vector4_zwwy$,
        'zwwz': _Vector4_zwwz$,
        'zwww': _Vector4_zwww$,
        'wxxx': _Vector4_wxxx$,
        'wxxy': _Vector4_wxxy$,
        'wxxz': _Vector4_wxxz$,
        'wxxw': _Vector4_wxxw$,
        'wxyx': _Vector4_wxyx$,
        'wxyy': _Vector4_wxyy$,
        'wxyz': _Vector4_wxyz$,
        'wxyw': _Vector4_wxyw$,
        'wxzx': _Vector4_wxzx$,
        'wxzy': _Vector4_wxzy$,
        'wxzz': _Vector4_wxzz$,
        'wxzw': _Vector4_wxzw$,
        'wxwx': _Vector4_wxwx$,
        'wxwy': _Vector4_wxwy$,
        'wxwz': _Vector4_wxwz$,
        'wxww': _Vector4_wxww$,
        'wyxx': _Vector4_wyxx$,
        'wyxy': _Vector4_wyxy$,
        'wyxz': _Vector4_wyxz$,
        'wyxw': _Vector4_wyxw$,
        'wyyx': _Vector4_wyyx$,
        'wyyy': _Vector4_wyyy$,
        'wyyz': _Vector4_wyyz$,
        'wyyw': _Vector4_wyyw$,
        'wyzx': _Vector4_wyzx$,
        'wyzy': _Vector4_wyzy$,
        'wyzz': _Vector4_wyzz$,
        'wyzw': _Vector4_wyzw$,
        'wywx': _Vector4_wywx$,
        'wywy': _Vector4_wywy$,
        'wywz': _Vector4_wywz$,
        'wyww': _Vector4_wyww$,
        'wzxx': _Vector4_wzxx$,
        'wzxy': _Vector4_wzxy$,
        'wzxz': _Vector4_wzxz$,
        'wzxw': _Vector4_wzxw$,
        'wzyx': _Vector4_wzyx$,
        'wzyy': _Vector4_wzyy$,
        'wzyz': _Vector4_wzyz$,
        'wzyw': _Vector4_wzyw$,
        'wzzx': _Vector4_wzzx$,
        'wzzy': _Vector4_wzzy$,
        'wzzz': _Vector4_wzzz$,
        'wzzw': _Vector4_wzzw$,
        'wzwx': _Vector4_wzwx$,
        'wzwy': _Vector4_wzwy$,
        'wzwz': _Vector4_wzwz$,
        'wzww': _Vector4_wzww$,
        'wwxx': _Vector4_wwxx$,
        'wwxy': _Vector4_wwxy$,
        'wwxz': _Vector4_wwxz$,
        'wwxw': _Vector4_wwxw$,
        'wwyx': _Vector4_wwyx$,
        'wwyy': _Vector4_wwyy$,
        'wwyz': _Vector4_wwyz$,
        'wwyw': _Vector4_wwyw$,
        'wwzx': _Vector4_wwzx$,
        'wwzy': _Vector4_wwzy$,
        'wwzz': _Vector4_wwzz$,
        'wwzw': _Vector4_wwzw$,
        'wwwx': _Vector4_wwwx$,
        'wwwy': _Vector4_wwwy$,
        'wwwz': _Vector4_wwwz$,
        'wwww': _Vector4_wwww$,
        'r': _Vector4_r$,
        'g': _Vector4_g$,
        'b': _Vector4_b$,
        'a': _Vector4_a$,
        's': _Vector4_s$,
        't': _Vector4_t$,
        'p': _Vector4_p$,
        'q': _Vector4_q$,
        'x': _Vector4_x$,
        'y': _Vector4_y$,
        'z': _Vector4_z$,
        'w': _Vector4_w$,
        'rr': _Vector4_rr$,
        'rg': _Vector4_rg$,
        'rb': _Vector4_rb$,
        'ra': _Vector4_ra$,
        'gr': _Vector4_gr$,
        'gg': _Vector4_gg$,
        'gb': _Vector4_gb$,
        'ga': _Vector4_ga$,
        'br': _Vector4_br$,
        'bg': _Vector4_bg$,
        'bb': _Vector4_bb$,
        'ba': _Vector4_ba$,
        'ar': _Vector4_ar$,
        'ag': _Vector4_ag$,
        'ab': _Vector4_ab$,
        'aa': _Vector4_aa$,
        'rrr': _Vector4_rrr$,
        'rrg': _Vector4_rrg$,
        'rrb': _Vector4_rrb$,
        'rra': _Vector4_rra$,
        'rgr': _Vector4_rgr$,
        'rgg': _Vector4_rgg$,
        'rgb': _Vector4_rgb$,
        'rga': _Vector4_rga$,
        'rbr': _Vector4_rbr$,
        'rbg': _Vector4_rbg$,
        'rbb': _Vector4_rbb$,
        'rba': _Vector4_rba$,
        'rar': _Vector4_rar$,
        'rag': _Vector4_rag$,
        'rab': _Vector4_rab$,
        'raa': _Vector4_raa$,
        'grr': _Vector4_grr$,
        'grg': _Vector4_grg$,
        'grb': _Vector4_grb$,
        'gra': _Vector4_gra$,
        'ggr': _Vector4_ggr$,
        'ggg': _Vector4_ggg$,
        'ggb': _Vector4_ggb$,
        'gga': _Vector4_gga$,
        'gbr': _Vector4_gbr$,
        'gbg': _Vector4_gbg$,
        'gbb': _Vector4_gbb$,
        'gba': _Vector4_gba$,
        'gar': _Vector4_gar$,
        'gag': _Vector4_gag$,
        'gab': _Vector4_gab$,
        'gaa': _Vector4_gaa$,
        'brr': _Vector4_brr$,
        'brg': _Vector4_brg$,
        'brb': _Vector4_brb$,
        'bra': _Vector4_bra$,
        'bgr': _Vector4_bgr$,
        'bgg': _Vector4_bgg$,
        'bgb': _Vector4_bgb$,
        'bga': _Vector4_bga$,
        'bbr': _Vector4_bbr$,
        'bbg': _Vector4_bbg$,
        'bbb': _Vector4_bbb$,
        'bba': _Vector4_bba$,
        'bar': _Vector4_bar$,
        'bag': _Vector4_bag$,
        'bab': _Vector4_bab$,
        'baa': _Vector4_baa$,
        'arr': _Vector4_arr$,
        'arg': _Vector4_arg$,
        'arb': _Vector4_arb$,
        'ara': _Vector4_ara$,
        'agr': _Vector4_agr$,
        'agg': _Vector4_agg$,
        'agb': _Vector4_agb$,
        'aga': _Vector4_aga$,
        'abr': _Vector4_abr$,
        'abg': _Vector4_abg$,
        'abb': _Vector4_abb$,
        'aba': _Vector4_aba$,
        'aar': _Vector4_aar$,
        'aag': _Vector4_aag$,
        'aab': _Vector4_aab$,
        'aaa': _Vector4_aaa$,
        'rrrr': _Vector4_rrrr$,
        'rrrg': _Vector4_rrrg$,
        'rrrb': _Vector4_rrrb$,
        'rrra': _Vector4_rrra$,
        'rrgr': _Vector4_rrgr$,
        'rrgg': _Vector4_rrgg$,
        'rrgb': _Vector4_rrgb$,
        'rrga': _Vector4_rrga$,
        'rrbr': _Vector4_rrbr$,
        'rrbg': _Vector4_rrbg$,
        'rrbb': _Vector4_rrbb$,
        'rrba': _Vector4_rrba$,
        'rrar': _Vector4_rrar$,
        'rrag': _Vector4_rrag$,
        'rrab': _Vector4_rrab$,
        'rraa': _Vector4_rraa$,
        'rgrr': _Vector4_rgrr$,
        'rgrg': _Vector4_rgrg$,
        'rgrb': _Vector4_rgrb$,
        'rgra': _Vector4_rgra$,
        'rggr': _Vector4_rggr$,
        'rggg': _Vector4_rggg$,
        'rggb': _Vector4_rggb$,
        'rgga': _Vector4_rgga$,
        'rgbr': _Vector4_rgbr$,
        'rgbg': _Vector4_rgbg$,
        'rgbb': _Vector4_rgbb$,
        'rgba': _Vector4_rgba$,
        'rgar': _Vector4_rgar$,
        'rgag': _Vector4_rgag$,
        'rgab': _Vector4_rgab$,
        'rgaa': _Vector4_rgaa$,
        'rbrr': _Vector4_rbrr$,
        'rbrg': _Vector4_rbrg$,
        'rbrb': _Vector4_rbrb$,
        'rbra': _Vector4_rbra$,
        'rbgr': _Vector4_rbgr$,
        'rbgg': _Vector4_rbgg$,
        'rbgb': _Vector4_rbgb$,
        'rbga': _Vector4_rbga$,
        'rbbr': _Vector4_rbbr$,
        'rbbg': _Vector4_rbbg$,
        'rbbb': _Vector4_rbbb$,
        'rbba': _Vector4_rbba$,
        'rbar': _Vector4_rbar$,
        'rbag': _Vector4_rbag$,
        'rbab': _Vector4_rbab$,
        'rbaa': _Vector4_rbaa$,
        'rarr': _Vector4_rarr$,
        'rarg': _Vector4_rarg$,
        'rarb': _Vector4_rarb$,
        'rara': _Vector4_rara$,
        'ragr': _Vector4_ragr$,
        'ragg': _Vector4_ragg$,
        'ragb': _Vector4_ragb$,
        'raga': _Vector4_raga$,
        'rabr': _Vector4_rabr$,
        'rabg': _Vector4_rabg$,
        'rabb': _Vector4_rabb$,
        'raba': _Vector4_raba$,
        'raar': _Vector4_raar$,
        'raag': _Vector4_raag$,
        'raab': _Vector4_raab$,
        'raaa': _Vector4_raaa$,
        'grrr': _Vector4_grrr$,
        'grrg': _Vector4_grrg$,
        'grrb': _Vector4_grrb$,
        'grra': _Vector4_grra$,
        'grgr': _Vector4_grgr$,
        'grgg': _Vector4_grgg$,
        'grgb': _Vector4_grgb$,
        'grga': _Vector4_grga$,
        'grbr': _Vector4_grbr$,
        'grbg': _Vector4_grbg$,
        'grbb': _Vector4_grbb$,
        'grba': _Vector4_grba$,
        'grar': _Vector4_grar$,
        'grag': _Vector4_grag$,
        'grab': _Vector4_grab$,
        'graa': _Vector4_graa$,
        'ggrr': _Vector4_ggrr$,
        'ggrg': _Vector4_ggrg$,
        'ggrb': _Vector4_ggrb$,
        'ggra': _Vector4_ggra$,
        'gggr': _Vector4_gggr$,
        'gggg': _Vector4_gggg$,
        'gggb': _Vector4_gggb$,
        'ggga': _Vector4_ggga$,
        'ggbr': _Vector4_ggbr$,
        'ggbg': _Vector4_ggbg$,
        'ggbb': _Vector4_ggbb$,
        'ggba': _Vector4_ggba$,
        'ggar': _Vector4_ggar$,
        'ggag': _Vector4_ggag$,
        'ggab': _Vector4_ggab$,
        'ggaa': _Vector4_ggaa$,
        'gbrr': _Vector4_gbrr$,
        'gbrg': _Vector4_gbrg$,
        'gbrb': _Vector4_gbrb$,
        'gbra': _Vector4_gbra$,
        'gbgr': _Vector4_gbgr$,
        'gbgg': _Vector4_gbgg$,
        'gbgb': _Vector4_gbgb$,
        'gbga': _Vector4_gbga$,
        'gbbr': _Vector4_gbbr$,
        'gbbg': _Vector4_gbbg$,
        'gbbb': _Vector4_gbbb$,
        'gbba': _Vector4_gbba$,
        'gbar': _Vector4_gbar$,
        'gbag': _Vector4_gbag$,
        'gbab': _Vector4_gbab$,
        'gbaa': _Vector4_gbaa$,
        'garr': _Vector4_garr$,
        'garg': _Vector4_garg$,
        'garb': _Vector4_garb$,
        'gara': _Vector4_gara$,
        'gagr': _Vector4_gagr$,
        'gagg': _Vector4_gagg$,
        'gagb': _Vector4_gagb$,
        'gaga': _Vector4_gaga$,
        'gabr': _Vector4_gabr$,
        'gabg': _Vector4_gabg$,
        'gabb': _Vector4_gabb$,
        'gaba': _Vector4_gaba$,
        'gaar': _Vector4_gaar$,
        'gaag': _Vector4_gaag$,
        'gaab': _Vector4_gaab$,
        'gaaa': _Vector4_gaaa$,
        'brrr': _Vector4_brrr$,
        'brrg': _Vector4_brrg$,
        'brrb': _Vector4_brrb$,
        'brra': _Vector4_brra$,
        'brgr': _Vector4_brgr$,
        'brgg': _Vector4_brgg$,
        'brgb': _Vector4_brgb$,
        'brga': _Vector4_brga$,
        'brbr': _Vector4_brbr$,
        'brbg': _Vector4_brbg$,
        'brbb': _Vector4_brbb$,
        'brba': _Vector4_brba$,
        'brar': _Vector4_brar$,
        'brag': _Vector4_brag$,
        'brab': _Vector4_brab$,
        'braa': _Vector4_braa$,
        'bgrr': _Vector4_bgrr$,
        'bgrg': _Vector4_bgrg$,
        'bgrb': _Vector4_bgrb$,
        'bgra': _Vector4_bgra$,
        'bggr': _Vector4_bggr$,
        'bggg': _Vector4_bggg$,
        'bggb': _Vector4_bggb$,
        'bgga': _Vector4_bgga$,
        'bgbr': _Vector4_bgbr$,
        'bgbg': _Vector4_bgbg$,
        'bgbb': _Vector4_bgbb$,
        'bgba': _Vector4_bgba$,
        'bgar': _Vector4_bgar$,
        'bgag': _Vector4_bgag$,
        'bgab': _Vector4_bgab$,
        'bgaa': _Vector4_bgaa$,
        'bbrr': _Vector4_bbrr$,
        'bbrg': _Vector4_bbrg$,
        'bbrb': _Vector4_bbrb$,
        'bbra': _Vector4_bbra$,
        'bbgr': _Vector4_bbgr$,
        'bbgg': _Vector4_bbgg$,
        'bbgb': _Vector4_bbgb$,
        'bbga': _Vector4_bbga$,
        'bbbr': _Vector4_bbbr$,
        'bbbg': _Vector4_bbbg$,
        'bbbb': _Vector4_bbbb$,
        'bbba': _Vector4_bbba$,
        'bbar': _Vector4_bbar$,
        'bbag': _Vector4_bbag$,
        'bbab': _Vector4_bbab$,
        'bbaa': _Vector4_bbaa$,
        'barr': _Vector4_barr$,
        'barg': _Vector4_barg$,
        'barb': _Vector4_barb$,
        'bara': _Vector4_bara$,
        'bagr': _Vector4_bagr$,
        'bagg': _Vector4_bagg$,
        'bagb': _Vector4_bagb$,
        'baga': _Vector4_baga$,
        'babr': _Vector4_babr$,
        'babg': _Vector4_babg$,
        'babb': _Vector4_babb$,
        'baba': _Vector4_baba$,
        'baar': _Vector4_baar$,
        'baag': _Vector4_baag$,
        'baab': _Vector4_baab$,
        'baaa': _Vector4_baaa$,
        'arrr': _Vector4_arrr$,
        'arrg': _Vector4_arrg$,
        'arrb': _Vector4_arrb$,
        'arra': _Vector4_arra$,
        'argr': _Vector4_argr$,
        'argg': _Vector4_argg$,
        'argb': _Vector4_argb$,
        'arga': _Vector4_arga$,
        'arbr': _Vector4_arbr$,
        'arbg': _Vector4_arbg$,
        'arbb': _Vector4_arbb$,
        'arba': _Vector4_arba$,
        'arar': _Vector4_arar$,
        'arag': _Vector4_arag$,
        'arab': _Vector4_arab$,
        'araa': _Vector4_araa$,
        'agrr': _Vector4_agrr$,
        'agrg': _Vector4_agrg$,
        'agrb': _Vector4_agrb$,
        'agra': _Vector4_agra$,
        'aggr': _Vector4_aggr$,
        'aggg': _Vector4_aggg$,
        'aggb': _Vector4_aggb$,
        'agga': _Vector4_agga$,
        'agbr': _Vector4_agbr$,
        'agbg': _Vector4_agbg$,
        'agbb': _Vector4_agbb$,
        'agba': _Vector4_agba$,
        'agar': _Vector4_agar$,
        'agag': _Vector4_agag$,
        'agab': _Vector4_agab$,
        'agaa': _Vector4_agaa$,
        'abrr': _Vector4_abrr$,
        'abrg': _Vector4_abrg$,
        'abrb': _Vector4_abrb$,
        'abra': _Vector4_abra$,
        'abgr': _Vector4_abgr$,
        'abgg': _Vector4_abgg$,
        'abgb': _Vector4_abgb$,
        'abga': _Vector4_abga$,
        'abbr': _Vector4_abbr$,
        'abbg': _Vector4_abbg$,
        'abbb': _Vector4_abbb$,
        'abba': _Vector4_abba$,
        'abar': _Vector4_abar$,
        'abag': _Vector4_abag$,
        'abab': _Vector4_abab$,
        'abaa': _Vector4_abaa$,
        'aarr': _Vector4_aarr$,
        'aarg': _Vector4_aarg$,
        'aarb': _Vector4_aarb$,
        'aara': _Vector4_aara$,
        'aagr': _Vector4_aagr$,
        'aagg': _Vector4_aagg$,
        'aagb': _Vector4_aagb$,
        'aaga': _Vector4_aaga$,
        'aabr': _Vector4_aabr$,
        'aabg': _Vector4_aabg$,
        'aabb': _Vector4_aabb$,
        'aaba': _Vector4_aaba$,
        'aaar': _Vector4_aaar$,
        'aaag': _Vector4_aaag$,
        'aaab': _Vector4_aaab$,
        'aaaa': _Vector4_aaaa$,
        'ss': _Vector4_ss$,
        'st': _Vector4_st$,
        'sp': _Vector4_sp$,
        'sq': _Vector4_sq$,
        'ts': _Vector4_ts$,
        'tt': _Vector4_tt$,
        'tp': _Vector4_tp$,
        'tq': _Vector4_tq$,
        'ps': _Vector4_ps$,
        'pt': _Vector4_pt$,
        'pp': _Vector4_pp$,
        'pq': _Vector4_pq$,
        'qs': _Vector4_qs$,
        'qt': _Vector4_qt$,
        'qp': _Vector4_qp$,
        'qq': _Vector4_qq$,
        'sss': _Vector4_sss$,
        'sst': _Vector4_sst$,
        'ssp': _Vector4_ssp$,
        'ssq': _Vector4_ssq$,
        'sts': _Vector4_sts$,
        'stt': _Vector4_stt$,
        'stp': _Vector4_stp$,
        'stq': _Vector4_stq$,
        'sps': _Vector4_sps$,
        'spt': _Vector4_spt$,
        'spp': _Vector4_spp$,
        'spq': _Vector4_spq$,
        'sqs': _Vector4_sqs$,
        'sqt': _Vector4_sqt$,
        'sqp': _Vector4_sqp$,
        'sqq': _Vector4_sqq$,
        'tss': _Vector4_tss$,
        'tst': _Vector4_tst$,
        'tsp': _Vector4_tsp$,
        'tsq': _Vector4_tsq$,
        'tts': _Vector4_tts$,
        'ttt': _Vector4_ttt$,
        'ttp': _Vector4_ttp$,
        'ttq': _Vector4_ttq$,
        'tps': _Vector4_tps$,
        'tpt': _Vector4_tpt$,
        'tpp': _Vector4_tpp$,
        'tpq': _Vector4_tpq$,
        'tqs': _Vector4_tqs$,
        'tqt': _Vector4_tqt$,
        'tqp': _Vector4_tqp$,
        'tqq': _Vector4_tqq$,
        'pss': _Vector4_pss$,
        'pst': _Vector4_pst$,
        'psp': _Vector4_psp$,
        'psq': _Vector4_psq$,
        'pts': _Vector4_pts$,
        'ptt': _Vector4_ptt$,
        'ptp': _Vector4_ptp$,
        'ptq': _Vector4_ptq$,
        'pps': _Vector4_pps$,
        'ppt': _Vector4_ppt$,
        'ppp': _Vector4_ppp$,
        'ppq': _Vector4_ppq$,
        'pqs': _Vector4_pqs$,
        'pqt': _Vector4_pqt$,
        'pqp': _Vector4_pqp$,
        'pqq': _Vector4_pqq$,
        'qss': _Vector4_qss$,
        'qst': _Vector4_qst$,
        'qsp': _Vector4_qsp$,
        'qsq': _Vector4_qsq$,
        'qts': _Vector4_qts$,
        'qtt': _Vector4_qtt$,
        'qtp': _Vector4_qtp$,
        'qtq': _Vector4_qtq$,
        'qps': _Vector4_qps$,
        'qpt': _Vector4_qpt$,
        'qpp': _Vector4_qpp$,
        'qpq': _Vector4_qpq$,
        'qqs': _Vector4_qqs$,
        'qqt': _Vector4_qqt$,
        'qqp': _Vector4_qqp$,
        'qqq': _Vector4_qqq$,
        'ssss': _Vector4_ssss$,
        'ssst': _Vector4_ssst$,
        'sssp': _Vector4_sssp$,
        'sssq': _Vector4_sssq$,
        'ssts': _Vector4_ssts$,
        'sstt': _Vector4_sstt$,
        'sstp': _Vector4_sstp$,
        'sstq': _Vector4_sstq$,
        'ssps': _Vector4_ssps$,
        'sspt': _Vector4_sspt$,
        'sspp': _Vector4_sspp$,
        'sspq': _Vector4_sspq$,
        'ssqs': _Vector4_ssqs$,
        'ssqt': _Vector4_ssqt$,
        'ssqp': _Vector4_ssqp$,
        'ssqq': _Vector4_ssqq$,
        'stss': _Vector4_stss$,
        'stst': _Vector4_stst$,
        'stsp': _Vector4_stsp$,
        'stsq': _Vector4_stsq$,
        'stts': _Vector4_stts$,
        'sttt': _Vector4_sttt$,
        'sttp': _Vector4_sttp$,
        'sttq': _Vector4_sttq$,
        'stps': _Vector4_stps$,
        'stpt': _Vector4_stpt$,
        'stpp': _Vector4_stpp$,
        'stpq': _Vector4_stpq$,
        'stqs': _Vector4_stqs$,
        'stqt': _Vector4_stqt$,
        'stqp': _Vector4_stqp$,
        'stqq': _Vector4_stqq$,
        'spss': _Vector4_spss$,
        'spst': _Vector4_spst$,
        'spsp': _Vector4_spsp$,
        'spsq': _Vector4_spsq$,
        'spts': _Vector4_spts$,
        'sptt': _Vector4_sptt$,
        'sptp': _Vector4_sptp$,
        'sptq': _Vector4_sptq$,
        'spps': _Vector4_spps$,
        'sppt': _Vector4_sppt$,
        'sppp': _Vector4_sppp$,
        'sppq': _Vector4_sppq$,
        'spqs': _Vector4_spqs$,
        'spqt': _Vector4_spqt$,
        'spqp': _Vector4_spqp$,
        'spqq': _Vector4_spqq$,
        'sqss': _Vector4_sqss$,
        'sqst': _Vector4_sqst$,
        'sqsp': _Vector4_sqsp$,
        'sqsq': _Vector4_sqsq$,
        'sqts': _Vector4_sqts$,
        'sqtt': _Vector4_sqtt$,
        'sqtp': _Vector4_sqtp$,
        'sqtq': _Vector4_sqtq$,
        'sqps': _Vector4_sqps$,
        'sqpt': _Vector4_sqpt$,
        'sqpp': _Vector4_sqpp$,
        'sqpq': _Vector4_sqpq$,
        'sqqs': _Vector4_sqqs$,
        'sqqt': _Vector4_sqqt$,
        'sqqp': _Vector4_sqqp$,
        'sqqq': _Vector4_sqqq$,
        'tsss': _Vector4_tsss$,
        'tsst': _Vector4_tsst$,
        'tssp': _Vector4_tssp$,
        'tssq': _Vector4_tssq$,
        'tsts': _Vector4_tsts$,
        'tstt': _Vector4_tstt$,
        'tstp': _Vector4_tstp$,
        'tstq': _Vector4_tstq$,
        'tsps': _Vector4_tsps$,
        'tspt': _Vector4_tspt$,
        'tspp': _Vector4_tspp$,
        'tspq': _Vector4_tspq$,
        'tsqs': _Vector4_tsqs$,
        'tsqt': _Vector4_tsqt$,
        'tsqp': _Vector4_tsqp$,
        'tsqq': _Vector4_tsqq$,
        'ttss': _Vector4_ttss$,
        'ttst': _Vector4_ttst$,
        'ttsp': _Vector4_ttsp$,
        'ttsq': _Vector4_ttsq$,
        'ttts': _Vector4_ttts$,
        'tttt': _Vector4_tttt$,
        'tttp': _Vector4_tttp$,
        'tttq': _Vector4_tttq$,
        'ttps': _Vector4_ttps$,
        'ttpt': _Vector4_ttpt$,
        'ttpp': _Vector4_ttpp$,
        'ttpq': _Vector4_ttpq$,
        'ttqs': _Vector4_ttqs$,
        'ttqt': _Vector4_ttqt$,
        'ttqp': _Vector4_ttqp$,
        'ttqq': _Vector4_ttqq$,
        'tpss': _Vector4_tpss$,
        'tpst': _Vector4_tpst$,
        'tpsp': _Vector4_tpsp$,
        'tpsq': _Vector4_tpsq$,
        'tpts': _Vector4_tpts$,
        'tptt': _Vector4_tptt$,
        'tptp': _Vector4_tptp$,
        'tptq': _Vector4_tptq$,
        'tpps': _Vector4_tpps$,
        'tppt': _Vector4_tppt$,
        'tppp': _Vector4_tppp$,
        'tppq': _Vector4_tppq$,
        'tpqs': _Vector4_tpqs$,
        'tpqt': _Vector4_tpqt$,
        'tpqp': _Vector4_tpqp$,
        'tpqq': _Vector4_tpqq$,
        'tqss': _Vector4_tqss$,
        'tqst': _Vector4_tqst$,
        'tqsp': _Vector4_tqsp$,
        'tqsq': _Vector4_tqsq$,
        'tqts': _Vector4_tqts$,
        'tqtt': _Vector4_tqtt$,
        'tqtp': _Vector4_tqtp$,
        'tqtq': _Vector4_tqtq$,
        'tqps': _Vector4_tqps$,
        'tqpt': _Vector4_tqpt$,
        'tqpp': _Vector4_tqpp$,
        'tqpq': _Vector4_tqpq$,
        'tqqs': _Vector4_tqqs$,
        'tqqt': _Vector4_tqqt$,
        'tqqp': _Vector4_tqqp$,
        'tqqq': _Vector4_tqqq$,
        'psss': _Vector4_psss$,
        'psst': _Vector4_psst$,
        'pssp': _Vector4_pssp$,
        'pssq': _Vector4_pssq$,
        'psts': _Vector4_psts$,
        'pstt': _Vector4_pstt$,
        'pstp': _Vector4_pstp$,
        'pstq': _Vector4_pstq$,
        'psps': _Vector4_psps$,
        'pspt': _Vector4_pspt$,
        'pspp': _Vector4_pspp$,
        'pspq': _Vector4_pspq$,
        'psqs': _Vector4_psqs$,
        'psqt': _Vector4_psqt$,
        'psqp': _Vector4_psqp$,
        'psqq': _Vector4_psqq$,
        'ptss': _Vector4_ptss$,
        'ptst': _Vector4_ptst$,
        'ptsp': _Vector4_ptsp$,
        'ptsq': _Vector4_ptsq$,
        'ptts': _Vector4_ptts$,
        'pttt': _Vector4_pttt$,
        'pttp': _Vector4_pttp$,
        'pttq': _Vector4_pttq$,
        'ptps': _Vector4_ptps$,
        'ptpt': _Vector4_ptpt$,
        'ptpp': _Vector4_ptpp$,
        'ptpq': _Vector4_ptpq$,
        'ptqs': _Vector4_ptqs$,
        'ptqt': _Vector4_ptqt$,
        'ptqp': _Vector4_ptqp$,
        'ptqq': _Vector4_ptqq$,
        'ppss': _Vector4_ppss$,
        'ppst': _Vector4_ppst$,
        'ppsp': _Vector4_ppsp$,
        'ppsq': _Vector4_ppsq$,
        'ppts': _Vector4_ppts$,
        'pptt': _Vector4_pptt$,
        'pptp': _Vector4_pptp$,
        'pptq': _Vector4_pptq$,
        'ppps': _Vector4_ppps$,
        'pppt': _Vector4_pppt$,
        'pppp': _Vector4_pppp$,
        'pppq': _Vector4_pppq$,
        'ppqs': _Vector4_ppqs$,
        'ppqt': _Vector4_ppqt$,
        'ppqp': _Vector4_ppqp$,
        'ppqq': _Vector4_ppqq$,
        'pqss': _Vector4_pqss$,
        'pqst': _Vector4_pqst$,
        'pqsp': _Vector4_pqsp$,
        'pqsq': _Vector4_pqsq$,
        'pqts': _Vector4_pqts$,
        'pqtt': _Vector4_pqtt$,
        'pqtp': _Vector4_pqtp$,
        'pqtq': _Vector4_pqtq$,
        'pqps': _Vector4_pqps$,
        'pqpt': _Vector4_pqpt$,
        'pqpp': _Vector4_pqpp$,
        'pqpq': _Vector4_pqpq$,
        'pqqs': _Vector4_pqqs$,
        'pqqt': _Vector4_pqqt$,
        'pqqp': _Vector4_pqqp$,
        'pqqq': _Vector4_pqqq$,
        'qsss': _Vector4_qsss$,
        'qsst': _Vector4_qsst$,
        'qssp': _Vector4_qssp$,
        'qssq': _Vector4_qssq$,
        'qsts': _Vector4_qsts$,
        'qstt': _Vector4_qstt$,
        'qstp': _Vector4_qstp$,
        'qstq': _Vector4_qstq$,
        'qsps': _Vector4_qsps$,
        'qspt': _Vector4_qspt$,
        'qspp': _Vector4_qspp$,
        'qspq': _Vector4_qspq$,
        'qsqs': _Vector4_qsqs$,
        'qsqt': _Vector4_qsqt$,
        'qsqp': _Vector4_qsqp$,
        'qsqq': _Vector4_qsqq$,
        'qtss': _Vector4_qtss$,
        'qtst': _Vector4_qtst$,
        'qtsp': _Vector4_qtsp$,
        'qtsq': _Vector4_qtsq$,
        'qtts': _Vector4_qtts$,
        'qttt': _Vector4_qttt$,
        'qttp': _Vector4_qttp$,
        'qttq': _Vector4_qttq$,
        'qtps': _Vector4_qtps$,
        'qtpt': _Vector4_qtpt$,
        'qtpp': _Vector4_qtpp$,
        'qtpq': _Vector4_qtpq$,
        'qtqs': _Vector4_qtqs$,
        'qtqt': _Vector4_qtqt$,
        'qtqp': _Vector4_qtqp$,
        'qtqq': _Vector4_qtqq$,
        'qpss': _Vector4_qpss$,
        'qpst': _Vector4_qpst$,
        'qpsp': _Vector4_qpsp$,
        'qpsq': _Vector4_qpsq$,
        'qpts': _Vector4_qpts$,
        'qptt': _Vector4_qptt$,
        'qptp': _Vector4_qptp$,
        'qptq': _Vector4_qptq$,
        'qpps': _Vector4_qpps$,
        'qppt': _Vector4_qppt$,
        'qppp': _Vector4_qppp$,
        'qppq': _Vector4_qppq$,
        'qpqs': _Vector4_qpqs$,
        'qpqt': _Vector4_qpqt$,
        'qpqp': _Vector4_qpqp$,
        'qpqq': _Vector4_qpqq$,
        'qqss': _Vector4_qqss$,
        'qqst': _Vector4_qqst$,
        'qqsp': _Vector4_qqsp$,
        'qqsq': _Vector4_qqsq$,
        'qqts': _Vector4_qqts$,
        'qqtt': _Vector4_qqtt$,
        'qqtp': _Vector4_qqtp$,
        'qqtq': _Vector4_qqtq$,
        'qqps': _Vector4_qqps$,
        'qqpt': _Vector4_qqpt$,
        'qqpp': _Vector4_qqpp$,
        'qqpq': _Vector4_qqpq$,
        'qqqs': _Vector4_qqqs$,
        'qqqt': _Vector4_qqqt$,
        'qqqp': _Vector4_qqqp$,
        'qqqq': _Vector4_qqqq$,
        'setValues': _Vector4_setValues$,
        'setZero': _Vector4_setZero$,
        'setIdentity': _Vector4_setIdentity$,
        'setFrom': _Vector4_setFrom$,
        'splat': _Vector4_splat$,
        'toString': _Vector4_toString$,
        '==': _Vector4_eq$$,
        'unary-': _Vector4_unary_minus$$,
        '-': _Vector4_minus$$,
        '+': _Vector4_plus$$,
        '/': _Vector4_over$$,
        '*': _Vector4_times$$,
        '[]': _Vector4_$index$$,
        '[]=': _Vector4_$index_set$$,
        'normalize': _Vector4_normalize$,
        'normalized': _Vector4_normalized$,
        'normalizeInto': _Vector4_normalizeInto$,
        'distanceTo': _Vector4_distanceTo$,
        'distanceToSquared': _Vector4_distanceToSquared$,
        'dot': _Vector4_dot$,
        'applyMatrix4': _Vector4_applyMatrix4$,
        'relativeError': _Vector4_relativeError$,
        'absoluteError': _Vector4_absoluteError$,
        'add': _Vector4_add$,
        'addScaled': _Vector4_addScaled$,
        'sub': _Vector4_sub$,
        'multiply': _Vector4_multiply$,
        'div': _Vector4_div$,
        'scale': _Vector4_scale$,
        'scaled': _Vector4_scaled$,
        'negate': _Vector4_negate$,
        'absolute': _Vector4_absolute$,
        'clamp': _Vector4_clamp$,
        'clampScalar': _Vector4_clampScalar$,
        'floor': _Vector4_floor$,
        'ceil': _Vector4_ceil$,
        'round': _Vector4_round$,
        'roundToZero': _Vector4_roundToZero$,
        'clone': _Vector4_clone$,
        'copyInto': _Vector4_copyInto$,
        'copyIntoArray': _Vector4_copyIntoArray$,
        'copyFromArray': _Vector4_copyFromArray$,
      },
      {
        'length': _Vector4_length_set$,
        'xy': _Vector4_xy_set$,
        'xz': _Vector4_xz_set$,
        'xw': _Vector4_xw_set$,
        'yx': _Vector4_yx_set$,
        'yz': _Vector4_yz_set$,
        'yw': _Vector4_yw_set$,
        'zx': _Vector4_zx_set$,
        'zy': _Vector4_zy_set$,
        'zw': _Vector4_zw_set$,
        'wx': _Vector4_wx_set$,
        'wy': _Vector4_wy_set$,
        'wz': _Vector4_wz_set$,
        'xyz': _Vector4_xyz_set$,
        'xyw': _Vector4_xyw_set$,
        'xzy': _Vector4_xzy_set$,
        'xzw': _Vector4_xzw_set$,
        'xwy': _Vector4_xwy_set$,
        'xwz': _Vector4_xwz_set$,
        'yxz': _Vector4_yxz_set$,
        'yxw': _Vector4_yxw_set$,
        'yzx': _Vector4_yzx_set$,
        'yzw': _Vector4_yzw_set$,
        'ywx': _Vector4_ywx_set$,
        'ywz': _Vector4_ywz_set$,
        'zxy': _Vector4_zxy_set$,
        'zxw': _Vector4_zxw_set$,
        'zyx': _Vector4_zyx_set$,
        'zyw': _Vector4_zyw_set$,
        'zwx': _Vector4_zwx_set$,
        'zwy': _Vector4_zwy_set$,
        'wxy': _Vector4_wxy_set$,
        'wxz': _Vector4_wxz_set$,
        'wyx': _Vector4_wyx_set$,
        'wyz': _Vector4_wyz_set$,
        'wzx': _Vector4_wzx_set$,
        'wzy': _Vector4_wzy_set$,
        'xyzw': _Vector4_xyzw_set$,
        'xywz': _Vector4_xywz_set$,
        'xzyw': _Vector4_xzyw_set$,
        'xzwy': _Vector4_xzwy_set$,
        'xwyz': _Vector4_xwyz_set$,
        'xwzy': _Vector4_xwzy_set$,
        'yxzw': _Vector4_yxzw_set$,
        'yxwz': _Vector4_yxwz_set$,
        'yzxw': _Vector4_yzxw_set$,
        'yzwx': _Vector4_yzwx_set$,
        'ywxz': _Vector4_ywxz_set$,
        'ywzx': _Vector4_ywzx_set$,
        'zxyw': _Vector4_zxyw_set$,
        'zxwy': _Vector4_zxwy_set$,
        'zyxw': _Vector4_zyxw_set$,
        'zywx': _Vector4_zywx_set$,
        'zwxy': _Vector4_zwxy_set$,
        'zwyx': _Vector4_zwyx_set$,
        'wxyz': _Vector4_wxyz_set$,
        'wxzy': _Vector4_wxzy_set$,
        'wyxz': _Vector4_wyxz_set$,
        'wyzx': _Vector4_wyzx_set$,
        'wzxy': _Vector4_wzxy_set$,
        'wzyx': _Vector4_wzyx_set$,
        'r': _Vector4_r_set$,
        'g': _Vector4_g_set$,
        'b': _Vector4_b_set$,
        'a': _Vector4_a_set$,
        's': _Vector4_s_set$,
        't': _Vector4_t_set$,
        'p': _Vector4_p_set$,
        'q': _Vector4_q_set$,
        'x': _Vector4_x_set$,
        'y': _Vector4_y_set$,
        'z': _Vector4_z_set$,
        'w': _Vector4_w_set$,
        'rg': _Vector4_rg_set$,
        'rb': _Vector4_rb_set$,
        'ra': _Vector4_ra_set$,
        'gr': _Vector4_gr_set$,
        'gb': _Vector4_gb_set$,
        'ga': _Vector4_ga_set$,
        'br': _Vector4_br_set$,
        'bg': _Vector4_bg_set$,
        'ba': _Vector4_ba_set$,
        'ar': _Vector4_ar_set$,
        'ag': _Vector4_ag_set$,
        'ab': _Vector4_ab_set$,
        'rgb': _Vector4_rgb_set$,
        'rga': _Vector4_rga_set$,
        'rbg': _Vector4_rbg_set$,
        'rba': _Vector4_rba_set$,
        'rag': _Vector4_rag_set$,
        'rab': _Vector4_rab_set$,
        'grb': _Vector4_grb_set$,
        'gra': _Vector4_gra_set$,
        'gbr': _Vector4_gbr_set$,
        'gba': _Vector4_gba_set$,
        'gar': _Vector4_gar_set$,
        'gab': _Vector4_gab_set$,
        'brg': _Vector4_brg_set$,
        'bra': _Vector4_bra_set$,
        'bgr': _Vector4_bgr_set$,
        'bga': _Vector4_bga_set$,
        'bar': _Vector4_bar_set$,
        'bag': _Vector4_bag_set$,
        'arg': _Vector4_arg_set$,
        'arb': _Vector4_arb_set$,
        'agr': _Vector4_agr_set$,
        'agb': _Vector4_agb_set$,
        'abr': _Vector4_abr_set$,
        'abg': _Vector4_abg_set$,
        'rgba': _Vector4_rgba_set$,
        'rgab': _Vector4_rgab_set$,
        'rbga': _Vector4_rbga_set$,
        'rbag': _Vector4_rbag_set$,
        'ragb': _Vector4_ragb_set$,
        'rabg': _Vector4_rabg_set$,
        'grba': _Vector4_grba_set$,
        'grab': _Vector4_grab_set$,
        'gbra': _Vector4_gbra_set$,
        'gbar': _Vector4_gbar_set$,
        'garb': _Vector4_garb_set$,
        'gabr': _Vector4_gabr_set$,
        'brga': _Vector4_brga_set$,
        'brag': _Vector4_brag_set$,
        'bgra': _Vector4_bgra_set$,
        'bgar': _Vector4_bgar_set$,
        'barg': _Vector4_barg_set$,
        'bagr': _Vector4_bagr_set$,
        'argb': _Vector4_argb_set$,
        'arbg': _Vector4_arbg_set$,
        'agrb': _Vector4_agrb_set$,
        'agbr': _Vector4_agbr_set$,
        'abrg': _Vector4_abrg_set$,
        'abgr': _Vector4_abgr_set$,
        'st': _Vector4_st_set$,
        'sp': _Vector4_sp_set$,
        'sq': _Vector4_sq_set$,
        'ts': _Vector4_ts_set$,
        'tp': _Vector4_tp_set$,
        'tq': _Vector4_tq_set$,
        'ps': _Vector4_ps_set$,
        'pt': _Vector4_pt_set$,
        'pq': _Vector4_pq_set$,
        'qs': _Vector4_qs_set$,
        'qt': _Vector4_qt_set$,
        'qp': _Vector4_qp_set$,
        'stp': _Vector4_stp_set$,
        'stq': _Vector4_stq_set$,
        'spt': _Vector4_spt_set$,
        'spq': _Vector4_spq_set$,
        'sqt': _Vector4_sqt_set$,
        'sqp': _Vector4_sqp_set$,
        'tsp': _Vector4_tsp_set$,
        'tsq': _Vector4_tsq_set$,
        'tps': _Vector4_tps_set$,
        'tpq': _Vector4_tpq_set$,
        'tqs': _Vector4_tqs_set$,
        'tqp': _Vector4_tqp_set$,
        'pst': _Vector4_pst_set$,
        'psq': _Vector4_psq_set$,
        'pts': _Vector4_pts_set$,
        'ptq': _Vector4_ptq_set$,
        'pqs': _Vector4_pqs_set$,
        'pqt': _Vector4_pqt_set$,
        'qst': _Vector4_qst_set$,
        'qsp': _Vector4_qsp_set$,
        'qts': _Vector4_qts_set$,
        'qtp': _Vector4_qtp_set$,
        'qps': _Vector4_qps_set$,
        'qpt': _Vector4_qpt_set$,
        'stpq': _Vector4_stpq_set$,
        'stqp': _Vector4_stqp_set$,
        'sptq': _Vector4_sptq_set$,
        'spqt': _Vector4_spqt_set$,
        'sqtp': _Vector4_sqtp_set$,
        'sqpt': _Vector4_sqpt_set$,
        'tspq': _Vector4_tspq_set$,
        'tsqp': _Vector4_tsqp_set$,
        'tpsq': _Vector4_tpsq_set$,
        'tpqs': _Vector4_tpqs_set$,
        'tqsp': _Vector4_tqsp_set$,
        'tqps': _Vector4_tqps_set$,
        'pstq': _Vector4_pstq_set$,
        'psqt': _Vector4_psqt_set$,
        'ptsq': _Vector4_ptsq_set$,
        'ptqs': _Vector4_ptqs_set$,
        'pqst': _Vector4_pqst_set$,
        'pqts': _Vector4_pqts_set$,
        'qstp': _Vector4_qstp_set$,
        'qspt': _Vector4_qspt_set$,
        'qtsp': _Vector4_qtsp_set$,
        'qtps': _Vector4_qtps_set$,
        'qpst': _Vector4_qpst_set$,
        'qpts': _Vector4_qpts_set$,
      },
    ),
  },
);
Function Aabb2_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Aabb2;
Function Aabb2_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Aabb2;
Function _Aabb2_min$(
  m.Scope scope$,
  Aabb2 target$,
) =>
    () {
      return target$.min;
    };
Function _Aabb2_max$(
  m.Scope scope$,
  Aabb2 target$,
) =>
    () {
      return target$.max;
    };
Function _Aabb2_center$(
  m.Scope scope$,
  Aabb2 target$,
) =>
    () {
      return target$.center;
    };
Function _Aabb2__$(m.Scope scope$) => () {
      return Aabb2();
    };
Function _Aabb2_copy_$(m.Scope scope$) => Aabb2.copy;
Function _Aabb2_minMax_$(m.Scope scope$) => Aabb2.minMax;
Function _Aabb2_centerAndHalfExtents_$(m.Scope scope$) =>
    Aabb2.centerAndHalfExtents;
Function _Aabb2_fromBuffer_$(m.Scope scope$) => Aabb2.fromBuffer;
Function _Aabb2_setCenterAndHalfExtents$(
  m.Scope scope$,
  Aabb2 target$,
) =>
    target$.setCenterAndHalfExtents;
Function _Aabb2_copyCenterAndHalfExtents$(
  m.Scope scope$,
  Aabb2 target$,
) =>
    target$.copyCenterAndHalfExtents;
Function _Aabb2_copyFrom$(
  m.Scope scope$,
  Aabb2 target$,
) =>
    target$.copyFrom;
Function _Aabb2_transform$(
  m.Scope scope$,
  Aabb2 target$,
) =>
    target$.transform;
Function _Aabb2_rotate$(
  m.Scope scope$,
  Aabb2 target$,
) =>
    target$.rotate;
Function _Aabb2_transformed$(
  m.Scope scope$,
  Aabb2 target$,
) =>
    target$.transformed;
Function _Aabb2_rotated$(
  m.Scope scope$,
  Aabb2 target$,
) =>
    target$.rotated;
Function _Aabb2_hull$(
  m.Scope scope$,
  Aabb2 target$,
) =>
    target$.hull;
Function _Aabb2_hullPoint$(
  m.Scope scope$,
  Aabb2 target$,
) =>
    target$.hullPoint;
Function _Aabb2_containsAabb2$(
  m.Scope scope$,
  Aabb2 target$,
) =>
    target$.containsAabb2;
Function _Aabb2_containsVector2$(
  m.Scope scope$,
  Aabb2 target$,
) =>
    target$.containsVector2;
Function _Aabb2_intersectsWithAabb2$(
  m.Scope scope$,
  Aabb2 target$,
) =>
    target$.intersectsWithAabb2;
Function _Aabb2_intersectsWithVector2$(
  m.Scope scope$,
  Aabb2 target$,
) =>
    target$.intersectsWithVector2;
Function Aabb3_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Aabb3;
Function Aabb3_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Aabb3;
Function _Aabb3_min$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    () {
      return target$.min;
    };
Function _Aabb3_max$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    () {
      return target$.max;
    };
Function _Aabb3_center$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    () {
      return target$.center;
    };
Function _Aabb3__$(m.Scope scope$) => () {
      return Aabb3();
    };
Function _Aabb3_copy_$(m.Scope scope$) => Aabb3.copy;
Function _Aabb3_minMax_$(m.Scope scope$) => Aabb3.minMax;
Function _Aabb3_fromSphere_$(m.Scope scope$) => Aabb3.fromSphere;
Function _Aabb3_fromTriangle_$(m.Scope scope$) => Aabb3.fromTriangle;
Function _Aabb3_fromQuad_$(m.Scope scope$) => Aabb3.fromQuad;
Function _Aabb3_fromObb3_$(m.Scope scope$) => Aabb3.fromObb3;
Function _Aabb3_fromRay_$(m.Scope scope$) => Aabb3.fromRay;
Function _Aabb3_centerAndHalfExtents_$(m.Scope scope$) =>
    Aabb3.centerAndHalfExtents;
Function _Aabb3_fromBuffer_$(m.Scope scope$) => Aabb3.fromBuffer;
Function _Aabb3_setCenterAndHalfExtents$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.setCenterAndHalfExtents;
Function _Aabb3_setSphere$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.setSphere;
Function _Aabb3_setTriangle$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.setTriangle;
Function _Aabb3_setQuad$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.setQuad;
Function _Aabb3_setObb3$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.setObb3;
Function _Aabb3_setRay$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.setRay;
Function _Aabb3_copyCenterAndHalfExtents$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.copyCenterAndHalfExtents;
Function _Aabb3_copyCenter$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.copyCenter;
Function _Aabb3_copyFrom$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.copyFrom;
Function _Aabb3_transform$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.transform;
Function _Aabb3_rotate$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.rotate;
Function _Aabb3_transformed$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.transformed;
Function _Aabb3_rotated$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.rotated;
Function _Aabb3_getPN$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.getPN;
Function _Aabb3_hull$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.hull;
Function _Aabb3_hullPoint$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.hullPoint;
Function _Aabb3_containsAabb3$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.containsAabb3;
Function _Aabb3_containsSphere$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.containsSphere;
Function _Aabb3_containsVector3$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.containsVector3;
Function _Aabb3_containsTriangle$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.containsTriangle;
Function _Aabb3_intersectsWithAabb3$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.intersectsWithAabb3;
Function _Aabb3_intersectsWithSphere$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.intersectsWithSphere;
Function _Aabb3_intersectsWithVector3$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.intersectsWithVector3;
Function _Aabb3_intersectsWithTriangle$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.intersectsWithTriangle;
Function _Aabb3_intersectsWithPlane$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.intersectsWithPlane;
Function _Aabb3_intersectsWithQuad$(
  m.Scope scope$,
  Aabb3 target$,
) =>
    target$.intersectsWithQuad;
Function Colors_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Colors;
Function Colors_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Colors;
Function _Colors_transparent$(m.Scope scope$) => () => Colors.transparent;
Function _Colors_aliceBlue$(m.Scope scope$) => () => Colors.aliceBlue;
Function _Colors_antiqueWhite$(m.Scope scope$) => () => Colors.antiqueWhite;
Function _Colors_aqua$(m.Scope scope$) => () => Colors.aqua;
Function _Colors_aquamarine$(m.Scope scope$) => () => Colors.aquamarine;
Function _Colors_azure$(m.Scope scope$) => () => Colors.azure;
Function _Colors_beige$(m.Scope scope$) => () => Colors.beige;
Function _Colors_bisque$(m.Scope scope$) => () => Colors.bisque;
Function _Colors_black$(m.Scope scope$) => () => Colors.black;
Function _Colors_blanchedAlmond$(m.Scope scope$) => () => Colors.blanchedAlmond;
Function _Colors_blue$(m.Scope scope$) => () => Colors.blue;
Function _Colors_blueViolet$(m.Scope scope$) => () => Colors.blueViolet;
Function _Colors_brown$(m.Scope scope$) => () => Colors.brown;
Function _Colors_burlyWood$(m.Scope scope$) => () => Colors.burlyWood;
Function _Colors_cadetBlue$(m.Scope scope$) => () => Colors.cadetBlue;
Function _Colors_chartreuse$(m.Scope scope$) => () => Colors.chartreuse;
Function _Colors_chocolate$(m.Scope scope$) => () => Colors.chocolate;
Function _Colors_coral$(m.Scope scope$) => () => Colors.coral;
Function _Colors_cornflowerBlue$(m.Scope scope$) => () => Colors.cornflowerBlue;
Function _Colors_cornsilk$(m.Scope scope$) => () => Colors.cornsilk;
Function _Colors_crimson$(m.Scope scope$) => () => Colors.crimson;
Function _Colors_cyan$(m.Scope scope$) => () => Colors.cyan;
Function _Colors_darkBlue$(m.Scope scope$) => () => Colors.darkBlue;
Function _Colors_darkCyan$(m.Scope scope$) => () => Colors.darkCyan;
Function _Colors_darkGoldenrod$(m.Scope scope$) => () => Colors.darkGoldenrod;
Function _Colors_darkGray$(m.Scope scope$) => () => Colors.darkGray;
Function _Colors_darkGreen$(m.Scope scope$) => () => Colors.darkGreen;
Function _Colors_darkKhaki$(m.Scope scope$) => () => Colors.darkKhaki;
Function _Colors_darkMagenta$(m.Scope scope$) => () => Colors.darkMagenta;
Function _Colors_darkOliveGreen$(m.Scope scope$) => () => Colors.darkOliveGreen;
Function _Colors_darkOrange$(m.Scope scope$) => () => Colors.darkOrange;
Function _Colors_darkOrchid$(m.Scope scope$) => () => Colors.darkOrchid;
Function _Colors_darkRed$(m.Scope scope$) => () => Colors.darkRed;
Function _Colors_darkSalmon$(m.Scope scope$) => () => Colors.darkSalmon;
Function _Colors_darkSeaGreen$(m.Scope scope$) => () => Colors.darkSeaGreen;
Function _Colors_darkSlateBlue$(m.Scope scope$) => () => Colors.darkSlateBlue;
Function _Colors_darkSlateGray$(m.Scope scope$) => () => Colors.darkSlateGray;
Function _Colors_darkTurquoise$(m.Scope scope$) => () => Colors.darkTurquoise;
Function _Colors_darkViolet$(m.Scope scope$) => () => Colors.darkViolet;
Function _Colors_deepPink$(m.Scope scope$) => () => Colors.deepPink;
Function _Colors_deepSkyBlue$(m.Scope scope$) => () => Colors.deepSkyBlue;
Function _Colors_dimGray$(m.Scope scope$) => () => Colors.dimGray;
Function _Colors_dodgerBlue$(m.Scope scope$) => () => Colors.dodgerBlue;
Function _Colors_firebrick$(m.Scope scope$) => () => Colors.firebrick;
Function _Colors_floralWhite$(m.Scope scope$) => () => Colors.floralWhite;
Function _Colors_forestGreen$(m.Scope scope$) => () => Colors.forestGreen;
Function _Colors_fuchsia$(m.Scope scope$) => () => Colors.fuchsia;
Function _Colors_gainsboro$(m.Scope scope$) => () => Colors.gainsboro;
Function _Colors_ghostWhite$(m.Scope scope$) => () => Colors.ghostWhite;
Function _Colors_gold$(m.Scope scope$) => () => Colors.gold;
Function _Colors_goldenrod$(m.Scope scope$) => () => Colors.goldenrod;
Function _Colors_gray$(m.Scope scope$) => () => Colors.gray;
Function _Colors_green$(m.Scope scope$) => () => Colors.green;
Function _Colors_greenYellow$(m.Scope scope$) => () => Colors.greenYellow;
Function _Colors_honeydew$(m.Scope scope$) => () => Colors.honeydew;
Function _Colors_hotPink$(m.Scope scope$) => () => Colors.hotPink;
Function _Colors_indianRed$(m.Scope scope$) => () => Colors.indianRed;
Function _Colors_indigo$(m.Scope scope$) => () => Colors.indigo;
Function _Colors_ivory$(m.Scope scope$) => () => Colors.ivory;
Function _Colors_khaki$(m.Scope scope$) => () => Colors.khaki;
Function _Colors_lavender$(m.Scope scope$) => () => Colors.lavender;
Function _Colors_lavenderBlush$(m.Scope scope$) => () => Colors.lavenderBlush;
Function _Colors_lawnGreen$(m.Scope scope$) => () => Colors.lawnGreen;
Function _Colors_lemonChiffon$(m.Scope scope$) => () => Colors.lemonChiffon;
Function _Colors_lightBlue$(m.Scope scope$) => () => Colors.lightBlue;
Function _Colors_lightCoral$(m.Scope scope$) => () => Colors.lightCoral;
Function _Colors_lightCyan$(m.Scope scope$) => () => Colors.lightCyan;
Function _Colors_lightGoldenrodYellow$(m.Scope scope$) =>
    () => Colors.lightGoldenrodYellow;
Function _Colors_lightGreen$(m.Scope scope$) => () => Colors.lightGreen;
Function _Colors_lightGray$(m.Scope scope$) => () => Colors.lightGray;
Function _Colors_lightPink$(m.Scope scope$) => () => Colors.lightPink;
Function _Colors_lightSalmon$(m.Scope scope$) => () => Colors.lightSalmon;
Function _Colors_lightSeaGreen$(m.Scope scope$) => () => Colors.lightSeaGreen;
Function _Colors_lightSkyBlue$(m.Scope scope$) => () => Colors.lightSkyBlue;
Function _Colors_lightSlateGray$(m.Scope scope$) => () => Colors.lightSlateGray;
Function _Colors_lightSteelBlue$(m.Scope scope$) => () => Colors.lightSteelBlue;
Function _Colors_lightYellow$(m.Scope scope$) => () => Colors.lightYellow;
Function _Colors_lime$(m.Scope scope$) => () => Colors.lime;
Function _Colors_limeGreen$(m.Scope scope$) => () => Colors.limeGreen;
Function _Colors_linen$(m.Scope scope$) => () => Colors.linen;
Function _Colors_magenta$(m.Scope scope$) => () => Colors.magenta;
Function _Colors_maroon$(m.Scope scope$) => () => Colors.maroon;
Function _Colors_mediumAquamarine$(m.Scope scope$) =>
    () => Colors.mediumAquamarine;
Function _Colors_mediumBlue$(m.Scope scope$) => () => Colors.mediumBlue;
Function _Colors_mediumOrchid$(m.Scope scope$) => () => Colors.mediumOrchid;
Function _Colors_mediumPurple$(m.Scope scope$) => () => Colors.mediumPurple;
Function _Colors_mediumSeaGreen$(m.Scope scope$) => () => Colors.mediumSeaGreen;
Function _Colors_mediumSlateBlue$(m.Scope scope$) =>
    () => Colors.mediumSlateBlue;
Function _Colors_mediumSpringGreen$(m.Scope scope$) =>
    () => Colors.mediumSpringGreen;
Function _Colors_mediumTurquoise$(m.Scope scope$) =>
    () => Colors.mediumTurquoise;
Function _Colors_mediumVioletRed$(m.Scope scope$) =>
    () => Colors.mediumVioletRed;
Function _Colors_midnightBlue$(m.Scope scope$) => () => Colors.midnightBlue;
Function _Colors_mintCream$(m.Scope scope$) => () => Colors.mintCream;
Function _Colors_mistyRose$(m.Scope scope$) => () => Colors.mistyRose;
Function _Colors_moccasin$(m.Scope scope$) => () => Colors.moccasin;
Function _Colors_navajoWhite$(m.Scope scope$) => () => Colors.navajoWhite;
Function _Colors_navy$(m.Scope scope$) => () => Colors.navy;
Function _Colors_oldLace$(m.Scope scope$) => () => Colors.oldLace;
Function _Colors_olive$(m.Scope scope$) => () => Colors.olive;
Function _Colors_oliveDrab$(m.Scope scope$) => () => Colors.oliveDrab;
Function _Colors_orange$(m.Scope scope$) => () => Colors.orange;
Function _Colors_orangeRed$(m.Scope scope$) => () => Colors.orangeRed;
Function _Colors_orchid$(m.Scope scope$) => () => Colors.orchid;
Function _Colors_paleGoldenrod$(m.Scope scope$) => () => Colors.paleGoldenrod;
Function _Colors_paleGreen$(m.Scope scope$) => () => Colors.paleGreen;
Function _Colors_paleTurquoise$(m.Scope scope$) => () => Colors.paleTurquoise;
Function _Colors_paleVioletRed$(m.Scope scope$) => () => Colors.paleVioletRed;
Function _Colors_papayaWhip$(m.Scope scope$) => () => Colors.papayaWhip;
Function _Colors_peachPuff$(m.Scope scope$) => () => Colors.peachPuff;
Function _Colors_peru$(m.Scope scope$) => () => Colors.peru;
Function _Colors_pink$(m.Scope scope$) => () => Colors.pink;
Function _Colors_plum$(m.Scope scope$) => () => Colors.plum;
Function _Colors_powderBlue$(m.Scope scope$) => () => Colors.powderBlue;
Function _Colors_purple$(m.Scope scope$) => () => Colors.purple;
Function _Colors_red$(m.Scope scope$) => () => Colors.red;
Function _Colors_rosyBrown$(m.Scope scope$) => () => Colors.rosyBrown;
Function _Colors_royalBlue$(m.Scope scope$) => () => Colors.royalBlue;
Function _Colors_saddleBrown$(m.Scope scope$) => () => Colors.saddleBrown;
Function _Colors_salmon$(m.Scope scope$) => () => Colors.salmon;
Function _Colors_sandyBrown$(m.Scope scope$) => () => Colors.sandyBrown;
Function _Colors_seaGreen$(m.Scope scope$) => () => Colors.seaGreen;
Function _Colors_seaShell$(m.Scope scope$) => () => Colors.seaShell;
Function _Colors_sienna$(m.Scope scope$) => () => Colors.sienna;
Function _Colors_silver$(m.Scope scope$) => () => Colors.silver;
Function _Colors_skyBlue$(m.Scope scope$) => () => Colors.skyBlue;
Function _Colors_slateBlue$(m.Scope scope$) => () => Colors.slateBlue;
Function _Colors_slateGray$(m.Scope scope$) => () => Colors.slateGray;
Function _Colors_snow$(m.Scope scope$) => () => Colors.snow;
Function _Colors_springGreen$(m.Scope scope$) => () => Colors.springGreen;
Function _Colors_steelBlue$(m.Scope scope$) => () => Colors.steelBlue;
Function _Colors_tan$(m.Scope scope$) => () => Colors.tan;
Function _Colors_teal$(m.Scope scope$) => () => Colors.teal;
Function _Colors_thistle$(m.Scope scope$) => () => Colors.thistle;
Function _Colors_tomato$(m.Scope scope$) => () => Colors.tomato;
Function _Colors_turquoise$(m.Scope scope$) => () => Colors.turquoise;
Function _Colors_violet$(m.Scope scope$) => () => Colors.violet;
Function _Colors_wheat$(m.Scope scope$) => () => Colors.wheat;
Function _Colors_white$(m.Scope scope$) => () => Colors.white;
Function _Colors_whiteSmoke$(m.Scope scope$) => () => Colors.whiteSmoke;
Function _Colors_yellow$(m.Scope scope$) => () => Colors.yellow;
Function _Colors_yellowGreen$(m.Scope scope$) => () => Colors.yellowGreen;
Function _Colors_fromRgba$(m.Scope scope$) => Colors.fromRgba;
Function _Colors_fromHexString$(m.Scope scope$) => Colors.fromHexString;
Function _Colors_toHexString$(m.Scope scope$) => Colors.toHexString;
Function _Colors_alphaBlend$(m.Scope scope$) => Colors.alphaBlend;
Function _Colors_toGrayscale$(m.Scope scope$) => Colors.toGrayscale;
Function _Colors_linearToGamma$(m.Scope scope$) => Colors.linearToGamma;
Function _Colors_gammaToLinear$(m.Scope scope$) => Colors.gammaToLinear;
Function _Colors_rgbToHsv$(m.Scope scope$) => Colors.rgbToHsv;
Function _Colors_hsvToRgb$(m.Scope scope$) => Colors.hsvToRgb;
Function _Colors_rgbToHsl$(m.Scope scope$) => Colors.rgbToHsl;
Function _Colors_hslToRgb$(m.Scope scope$) => Colors.hslToRgb;
Function _degrees2Radians$(m.Scope scope$) => () => degrees2Radians;
Function _radians2Degrees$(m.Scope scope$) => () => radians2Degrees;
Function _relativeError$(m.Scope scope$) => relativeError;
Function _absoluteError$(m.Scope scope$) => absoluteError;
Function Frustum_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Frustum;
Function Frustum_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Frustum;
Function _Frustum_plane0$(
  m.Scope scope$,
  Frustum target$,
) =>
    () {
      return target$.plane0;
    };
Function _Frustum_plane1$(
  m.Scope scope$,
  Frustum target$,
) =>
    () {
      return target$.plane1;
    };
Function _Frustum_plane2$(
  m.Scope scope$,
  Frustum target$,
) =>
    () {
      return target$.plane2;
    };
Function _Frustum_plane3$(
  m.Scope scope$,
  Frustum target$,
) =>
    () {
      return target$.plane3;
    };
Function _Frustum_plane4$(
  m.Scope scope$,
  Frustum target$,
) =>
    () {
      return target$.plane4;
    };
Function _Frustum_plane5$(
  m.Scope scope$,
  Frustum target$,
) =>
    () {
      return target$.plane5;
    };
Function _Frustum__$(m.Scope scope$) => () {
      return Frustum();
    };
Function _Frustum_copy_$(m.Scope scope$) => Frustum.copy;
Function _Frustum_matrix_$(m.Scope scope$) => Frustum.matrix;
Function _Frustum_copyFrom$(
  m.Scope scope$,
  Frustum target$,
) =>
    target$.copyFrom;
Function _Frustum_setFromMatrix$(
  m.Scope scope$,
  Frustum target$,
) =>
    target$.setFromMatrix;
Function _Frustum_containsVector3$(
  m.Scope scope$,
  Frustum target$,
) =>
    target$.containsVector3;
Function _Frustum_intersectsWithAabb3$(
  m.Scope scope$,
  Frustum target$,
) =>
    target$.intersectsWithAabb3;
Function _Frustum_intersectsWithSphere$(
  m.Scope scope$,
  Frustum target$,
) =>
    target$.intersectsWithSphere;
Function _Frustum_calculateCorners$(
  m.Scope scope$,
  Frustum target$,
) =>
    target$.calculateCorners;
Function IntersectionResult_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as IntersectionResult;
Function IntersectionResult_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is IntersectionResult;
Function _IntersectionResult_axis$(
  m.Scope scope$,
  IntersectionResult target$,
) =>
    () {
      return target$.axis;
    };
Function _IntersectionResult_depth$(
  m.Scope scope$,
  IntersectionResult target$,
) =>
    () {
      return target$.depth;
    };
Function _IntersectionResult__$(m.Scope scope$) => () {
      return IntersectionResult();
    };
Function Matrix2_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Matrix2;
Function Matrix2_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Matrix2;
Function _Matrix2_storage$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    () {
      return target$.storage;
    };
Function _Matrix2_dimension$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    () {
      return target$.dimension;
    };
Function _Matrix2_hashCode$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    () {
      return target$.hashCode;
    };
Function _Matrix2_row0$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    () {
      return target$.row0;
    };
Function _Matrix2_row1$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    () {
      return target$.row1;
    };
void _Matrix2_row0_set$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    (dynamic other$) {
      target$.row0 = other$;
    };
void _Matrix2_row1_set$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    (dynamic other$) {
      target$.row1 = other$;
    };
Function _Matrix2__$(m.Scope scope$) => (
      double arg0,
      double arg1,
      double arg2,
      double arg3,
    ) {
      return Matrix2(
        arg0,
        arg1,
        arg2,
        arg3,
      );
    };
Function _Matrix2_fromList_$(m.Scope scope$) => Matrix2.fromList;
Function _Matrix2_zero_$(m.Scope scope$) => Matrix2.zero;
Function _Matrix2_identity_$(m.Scope scope$) => Matrix2.identity;
Function _Matrix2_copy_$(m.Scope scope$) => Matrix2.copy;
Function _Matrix2_columns_$(m.Scope scope$) => Matrix2.columns;
Function _Matrix2_outer_$(m.Scope scope$) => Matrix2.outer;
Function _Matrix2_rotation_$(m.Scope scope$) => Matrix2.rotation;
Function _Matrix2_solve$(m.Scope scope$) => Matrix2.solve;
Function _Matrix2_index$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.index;
Function _Matrix2_entry$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.entry;
Function _Matrix2_setEntry$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.setEntry;
Function _Matrix2_setValues$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.setValues;
Function _Matrix2_setColumns$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.setColumns;
Function _Matrix2_setFrom$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.setFrom;
Function _Matrix2_setOuter$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.setOuter;
Function _Matrix2_splatDiagonal$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.splatDiagonal;
Function _Matrix2_setDiagonal$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.setDiagonal;
Function _Matrix2_toString$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.toString;
Function _Matrix2_$index$$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    (int index) => target$[index];
Function _Matrix2_$index_set$$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    (
      int index,
      double other,
    ) =>
        target$[index] = other;
Function _Matrix2_eq$$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    (Object other$) => target$ == other$;
Function _Matrix2_setRow$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.setRow;
Function _Matrix2_getRow$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.getRow;
Function _Matrix2_setColumn$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.setColumn;
Function _Matrix2_getColumn$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.getColumn;
Function _Matrix2_clone$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.clone;
Function _Matrix2_copyInto$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.copyInto;
Function _Matrix2_times$$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    (dynamic other$) => target$ * other$;
Function _Matrix2_plus$$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    (Matrix2 other$) => target$ + other$;
Function _Matrix2_minus$$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    (Matrix2 other$) => target$ - other$;
Function _Matrix2_unary_minus$$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    () => -target$;
Function _Matrix2_setZero$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.setZero;
Function _Matrix2_setIdentity$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.setIdentity;
Function _Matrix2_transposed$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.transposed;
Function _Matrix2_transpose$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.transpose;
Function _Matrix2_absolute$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.absolute;
Function _Matrix2_determinant$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.determinant;
Function _Matrix2_dotRow$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.dotRow;
Function _Matrix2_dotColumn$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.dotColumn;
Function _Matrix2_trace$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.trace;
Function _Matrix2_infinityNorm$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.infinityNorm;
Function _Matrix2_relativeError$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.relativeError;
Function _Matrix2_absoluteError$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.absoluteError;
Function _Matrix2_invert$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.invert;
Function _Matrix2_copyInverse$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.copyInverse;
Function _Matrix2_setRotation$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.setRotation;
Function _Matrix2_scaleAdjoint$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.scaleAdjoint;
Function _Matrix2_scale$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.scale;
Function _Matrix2_scaled$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.scaled;
Function _Matrix2_add$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.add;
Function _Matrix2_sub$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.sub;
Function _Matrix2_negate$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.negate;
Function _Matrix2_multiply$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.multiply;
Function _Matrix2_multiplied$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.multiplied;
Function _Matrix2_transposeMultiply$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.transposeMultiply;
Function _Matrix2_multiplyTranspose$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.multiplyTranspose;
Function _Matrix2_transform$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.transform;
Function _Matrix2_transformed$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.transformed;
Function _Matrix2_copyIntoArray$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.copyIntoArray;
Function _Matrix2_copyFromArray$(
  m.Scope scope$,
  Matrix2 target$,
) =>
    target$.copyFromArray;
Function Matrix3_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Matrix3;
Function Matrix3_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Matrix3;
Function _Matrix3_storage$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    () {
      return target$.storage;
    };
Function _Matrix3_dimension$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    () {
      return target$.dimension;
    };
Function _Matrix3_hashCode$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    () {
      return target$.hashCode;
    };
Function _Matrix3_row0$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    () {
      return target$.row0;
    };
Function _Matrix3_row1$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    () {
      return target$.row1;
    };
Function _Matrix3_row2$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    () {
      return target$.row2;
    };
void _Matrix3_row0_set$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    (dynamic other$) {
      target$.row0 = other$;
    };
void _Matrix3_row1_set$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    (dynamic other$) {
      target$.row1 = other$;
    };
void _Matrix3_row2_set$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    (dynamic other$) {
      target$.row2 = other$;
    };
Function _Matrix3_right$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    () {
      return target$.right;
    };
Function _Matrix3_up$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    () {
      return target$.up;
    };
Function _Matrix3_forward$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    () {
      return target$.forward;
    };
Function _Matrix3__$(m.Scope scope$) => (
      double arg0,
      double arg1,
      double arg2,
      double arg3,
      double arg4,
      double arg5,
      double arg6,
      double arg7,
      double arg8,
    ) {
      return Matrix3(
        arg0,
        arg1,
        arg2,
        arg3,
        arg4,
        arg5,
        arg6,
        arg7,
        arg8,
      );
    };
Function _Matrix3_fromList_$(m.Scope scope$) => Matrix3.fromList;
Function _Matrix3_zero_$(m.Scope scope$) => Matrix3.zero;
Function _Matrix3_identity_$(m.Scope scope$) => Matrix3.identity;
Function _Matrix3_copy_$(m.Scope scope$) => Matrix3.copy;
Function _Matrix3_columns_$(m.Scope scope$) => Matrix3.columns;
Function _Matrix3_outer_$(m.Scope scope$) => Matrix3.outer;
Function _Matrix3_rotationX_$(m.Scope scope$) => Matrix3.rotationX;
Function _Matrix3_rotationY_$(m.Scope scope$) => Matrix3.rotationY;
Function _Matrix3_rotationZ_$(m.Scope scope$) => Matrix3.rotationZ;
Function _Matrix3_solve2$(m.Scope scope$) => Matrix3.solve2;
Function _Matrix3_solve$(m.Scope scope$) => Matrix3.solve;
Function _Matrix3_index$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.index;
Function _Matrix3_entry$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.entry;
Function _Matrix3_setEntry$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.setEntry;
Function _Matrix3_setValues$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.setValues;
Function _Matrix3_setColumns$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.setColumns;
Function _Matrix3_setFrom$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.setFrom;
Function _Matrix3_setOuter$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.setOuter;
Function _Matrix3_splatDiagonal$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.splatDiagonal;
Function _Matrix3_setDiagonal$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.setDiagonal;
Function _Matrix3_setUpper2x2$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.setUpper2x2;
Function _Matrix3_toString$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.toString;
Function _Matrix3_$index$$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    (int index) => target$[index];
Function _Matrix3_$index_set$$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    (
      int index,
      double other,
    ) =>
        target$[index] = other;
Function _Matrix3_eq$$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    (Object other$) => target$ == other$;
Function _Matrix3_setRow$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.setRow;
Function _Matrix3_getRow$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.getRow;
Function _Matrix3_setColumn$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.setColumn;
Function _Matrix3_getColumn$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.getColumn;
Function _Matrix3_clone$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.clone;
Function _Matrix3_copyInto$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.copyInto;
Function _Matrix3_times$$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    (dynamic other$) => target$ * other$;
Function _Matrix3_plus$$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    (Matrix3 other$) => target$ + other$;
Function _Matrix3_minus$$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    (Matrix3 other$) => target$ - other$;
Function _Matrix3_unary_minus$$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    () => -target$;
Function _Matrix3_setZero$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.setZero;
Function _Matrix3_setIdentity$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.setIdentity;
Function _Matrix3_transposed$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.transposed;
Function _Matrix3_transpose$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.transpose;
Function _Matrix3_absolute$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.absolute;
Function _Matrix3_determinant$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.determinant;
Function _Matrix3_dotRow$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.dotRow;
Function _Matrix3_dotColumn$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.dotColumn;
Function _Matrix3_trace$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.trace;
Function _Matrix3_infinityNorm$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.infinityNorm;
Function _Matrix3_relativeError$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.relativeError;
Function _Matrix3_absoluteError$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.absoluteError;
Function _Matrix3_invert$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.invert;
Function _Matrix3_copyInverse$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.copyInverse;
Function _Matrix3_copyNormalMatrix$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.copyNormalMatrix;
Function _Matrix3_setRotationX$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.setRotationX;
Function _Matrix3_setRotationY$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.setRotationY;
Function _Matrix3_setRotationZ$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.setRotationZ;
Function _Matrix3_scaleAdjoint$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.scaleAdjoint;
Function _Matrix3_absoluteRotate$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.absoluteRotate;
Function _Matrix3_absoluteRotate2$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.absoluteRotate2;
Function _Matrix3_transform2$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.transform2;
Function _Matrix3_scale$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.scale;
Function _Matrix3_scaled$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.scaled;
Function _Matrix3_add$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.add;
Function _Matrix3_sub$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.sub;
Function _Matrix3_negate$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.negate;
Function _Matrix3_multiply$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.multiply;
Function _Matrix3_multiplied$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.multiplied;
Function _Matrix3_transposeMultiply$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.transposeMultiply;
Function _Matrix3_multiplyTranspose$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.multiplyTranspose;
Function _Matrix3_transform$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.transform;
Function _Matrix3_transformed$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.transformed;
Function _Matrix3_copyIntoArray$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.copyIntoArray;
Function _Matrix3_copyFromArray$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.copyFromArray;
Function _Matrix3_applyToVector3Array$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.applyToVector3Array;
Function _Matrix3_isIdentity$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.isIdentity;
Function _Matrix3_isZero$(
  m.Scope scope$,
  Matrix3 target$,
) =>
    target$.isZero;
Function Matrix4_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Matrix4;
Function Matrix4_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Matrix4;
Function _Matrix4_storage$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    () {
      return target$.storage;
    };
Function _Matrix4_dimension$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    () {
      return target$.dimension;
    };
Function _Matrix4_hashCode$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    () {
      return target$.hashCode;
    };
Function _Matrix4_row0$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    () {
      return target$.row0;
    };
Function _Matrix4_row1$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    () {
      return target$.row1;
    };
Function _Matrix4_row2$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    () {
      return target$.row2;
    };
Function _Matrix4_row3$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    () {
      return target$.row3;
    };
void _Matrix4_row0_set$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    (dynamic other$) {
      target$.row0 = other$;
    };
void _Matrix4_row1_set$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    (dynamic other$) {
      target$.row1 = other$;
    };
void _Matrix4_row2_set$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    (dynamic other$) {
      target$.row2 = other$;
    };
void _Matrix4_row3_set$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    (dynamic other$) {
      target$.row3 = other$;
    };
Function _Matrix4_right$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    () {
      return target$.right;
    };
Function _Matrix4_up$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    () {
      return target$.up;
    };
Function _Matrix4_forward$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    () {
      return target$.forward;
    };
Function _Matrix4__$(m.Scope scope$) => (
      double arg0,
      double arg1,
      double arg2,
      double arg3,
      double arg4,
      double arg5,
      double arg6,
      double arg7,
      double arg8,
      double arg9,
      double arg10,
      double arg11,
      double arg12,
      double arg13,
      double arg14,
      double arg15,
    ) {
      return Matrix4(
        arg0,
        arg1,
        arg2,
        arg3,
        arg4,
        arg5,
        arg6,
        arg7,
        arg8,
        arg9,
        arg10,
        arg11,
        arg12,
        arg13,
        arg14,
        arg15,
      );
    };
Function _Matrix4_fromList_$(m.Scope scope$) => Matrix4.fromList;
Function _Matrix4_zero_$(m.Scope scope$) => Matrix4.zero;
Function _Matrix4_identity_$(m.Scope scope$) => Matrix4.identity;
Function _Matrix4_copy_$(m.Scope scope$) => Matrix4.copy;
Function _Matrix4_inverted_$(m.Scope scope$) => Matrix4.inverted;
Function _Matrix4_columns_$(m.Scope scope$) => Matrix4.columns;
Function _Matrix4_outer_$(m.Scope scope$) => Matrix4.outer;
Function _Matrix4_rotationX_$(m.Scope scope$) => Matrix4.rotationX;
Function _Matrix4_rotationY_$(m.Scope scope$) => Matrix4.rotationY;
Function _Matrix4_rotationZ_$(m.Scope scope$) => Matrix4.rotationZ;
Function _Matrix4_translation_$(m.Scope scope$) => Matrix4.translation;
Function _Matrix4_translationValues_$(m.Scope scope$) =>
    Matrix4.translationValues;
Function _Matrix4_diagonal3_$(m.Scope scope$) => Matrix4.diagonal3;
Function _Matrix4_diagonal3Values_$(m.Scope scope$) => Matrix4.diagonal3Values;
Function _Matrix4_skewX_$(m.Scope scope$) => Matrix4.skewX;
Function _Matrix4_skewY_$(m.Scope scope$) => Matrix4.skewY;
Function _Matrix4_skew_$(m.Scope scope$) => Matrix4.skew;
Function _Matrix4_fromFloat64List_$(m.Scope scope$) => Matrix4.fromFloat64List;
Function _Matrix4_fromBuffer_$(m.Scope scope$) => Matrix4.fromBuffer;
Function _Matrix4_compose_$(m.Scope scope$) => Matrix4.compose;
Function _Matrix4_solve2$(m.Scope scope$) => Matrix4.solve2;
Function _Matrix4_solve3$(m.Scope scope$) => Matrix4.solve3;
Function _Matrix4_solve$(m.Scope scope$) => Matrix4.solve;
Function _Matrix4_tryInvert$(m.Scope scope$) => Matrix4.tryInvert;
Function _Matrix4_index$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.index;
Function _Matrix4_entry$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.entry;
Function _Matrix4_setEntry$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.setEntry;
Function _Matrix4_splatDiagonal$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.splatDiagonal;
Function _Matrix4_setValues$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.setValues;
Function _Matrix4_setColumns$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.setColumns;
Function _Matrix4_setFrom$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.setFrom;
Function _Matrix4_setFromTranslationRotation$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.setFromTranslationRotation;
Function _Matrix4_setFromTranslationRotationScale$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.setFromTranslationRotationScale;
Function _Matrix4_setUpper2x2$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.setUpper2x2;
Function _Matrix4_setDiagonal$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.setDiagonal;
Function _Matrix4_setOuter$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.setOuter;
Function _Matrix4_toString$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.toString;
Function _Matrix4_$index$$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    (int index) => target$[index];
Function _Matrix4_$index_set$$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    (
      int index,
      double other,
    ) =>
        target$[index] = other;
Function _Matrix4_eq$$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    (Object other$) => target$ == other$;
Function _Matrix4_setRow$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.setRow;
Function _Matrix4_getRow$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.getRow;
Function _Matrix4_setColumn$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.setColumn;
Function _Matrix4_getColumn$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.getColumn;
Function _Matrix4_clone$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.clone;
Function _Matrix4_copyInto$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.copyInto;
Function _Matrix4_unary_minus$$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    () => -target$;
Function _Matrix4_times$$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    (dynamic other$) => target$ * other$;
Function _Matrix4_plus$$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    (Matrix4 other$) => target$ + other$;
Function _Matrix4_minus$$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    (Matrix4 other$) => target$ - other$;
Function _Matrix4_translate$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.translate;
Function _Matrix4_leftTranslate$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.leftTranslate;
Function _Matrix4_rotate$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.rotate;
Function _Matrix4_rotateX$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.rotateX;
Function _Matrix4_rotateY$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.rotateY;
Function _Matrix4_rotateZ$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.rotateZ;
Function _Matrix4_scale$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.scale;
Function _Matrix4_scaled$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.scaled;
Function _Matrix4_setZero$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.setZero;
Function _Matrix4_setIdentity$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.setIdentity;
Function _Matrix4_transposed$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.transposed;
Function _Matrix4_transpose$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.transpose;
Function _Matrix4_absolute$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.absolute;
Function _Matrix4_determinant$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.determinant;
Function _Matrix4_dotRow$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.dotRow;
Function _Matrix4_dotColumn$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.dotColumn;
Function _Matrix4_trace$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.trace;
Function _Matrix4_infinityNorm$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.infinityNorm;
Function _Matrix4_relativeError$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.relativeError;
Function _Matrix4_absoluteError$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.absoluteError;
Function _Matrix4_getTranslation$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.getTranslation;
Function _Matrix4_setTranslation$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.setTranslation;
Function _Matrix4_setTranslationRaw$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.setTranslationRaw;
Function _Matrix4_getRotation$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.getRotation;
Function _Matrix4_copyRotation$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.copyRotation;
Function _Matrix4_setRotation$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.setRotation;
Function _Matrix4_getNormalMatrix$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.getNormalMatrix;
Function _Matrix4_getMaxScaleOnAxis$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.getMaxScaleOnAxis;
Function _Matrix4_transposeRotation$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.transposeRotation;
Function _Matrix4_invert$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.invert;
Function _Matrix4_copyInverse$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.copyInverse;
Function _Matrix4_invertRotation$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.invertRotation;
Function _Matrix4_setRotationX$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.setRotationX;
Function _Matrix4_setRotationY$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.setRotationY;
Function _Matrix4_setRotationZ$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.setRotationZ;
Function _Matrix4_scaleAdjoint$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.scaleAdjoint;
Function _Matrix4_absoluteRotate$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.absoluteRotate;
Function _Matrix4_add$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.add;
Function _Matrix4_sub$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.sub;
Function _Matrix4_negate$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.negate;
Function _Matrix4_multiply$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.multiply;
Function _Matrix4_multiplied$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.multiplied;
Function _Matrix4_transposeMultiply$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.transposeMultiply;
Function _Matrix4_multiplyTranspose$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.multiplyTranspose;
Function _Matrix4_decompose$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.decompose;
Function _Matrix4_rotate3$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.rotate3;
Function _Matrix4_rotated3$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.rotated3;
Function _Matrix4_transform3$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.transform3;
Function _Matrix4_transformed3$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.transformed3;
Function _Matrix4_transform$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.transform;
Function _Matrix4_perspectiveTransform$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.perspectiveTransform;
Function _Matrix4_transformed$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.transformed;
Function _Matrix4_copyIntoArray$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.copyIntoArray;
Function _Matrix4_copyFromArray$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.copyFromArray;
Function _Matrix4_applyToVector3Array$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.applyToVector3Array;
Function _Matrix4_isIdentity$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.isIdentity;
Function _Matrix4_isZero$(
  m.Scope scope$,
  Matrix4 target$,
) =>
    target$.isZero;
Function Obb3_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Obb3;
Function Obb3_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Obb3;
Function _Obb3_center$(
  m.Scope scope$,
  Obb3 target$,
) =>
    () {
      return target$.center;
    };
Function _Obb3_halfExtents$(
  m.Scope scope$,
  Obb3 target$,
) =>
    () {
      return target$.halfExtents;
    };
Function _Obb3_axis0$(
  m.Scope scope$,
  Obb3 target$,
) =>
    () {
      return target$.axis0;
    };
Function _Obb3_axis1$(
  m.Scope scope$,
  Obb3 target$,
) =>
    () {
      return target$.axis1;
    };
Function _Obb3_axis2$(
  m.Scope scope$,
  Obb3 target$,
) =>
    () {
      return target$.axis2;
    };
Function _Obb3__$(m.Scope scope$) => () {
      return Obb3();
    };
Function _Obb3_copy_$(m.Scope scope$) => Obb3.copy;
Function _Obb3_centerExtentsAxes_$(m.Scope scope$) => Obb3.centerExtentsAxes;
Function _Obb3_copyFrom$(
  m.Scope scope$,
  Obb3 target$,
) =>
    target$.copyFrom;
Function _Obb3_copyInto$(
  m.Scope scope$,
  Obb3 target$,
) =>
    target$.copyInto;
Function _Obb3_resetRotation$(
  m.Scope scope$,
  Obb3 target$,
) =>
    target$.resetRotation;
Function _Obb3_translate$(
  m.Scope scope$,
  Obb3 target$,
) =>
    target$.translate;
Function _Obb3_rotate$(
  m.Scope scope$,
  Obb3 target$,
) =>
    target$.rotate;
Function _Obb3_transform$(
  m.Scope scope$,
  Obb3 target$,
) =>
    target$.transform;
Function _Obb3_copyCorner$(
  m.Scope scope$,
  Obb3 target$,
) =>
    target$.copyCorner;
Function _Obb3_closestPointTo$(
  m.Scope scope$,
  Obb3 target$,
) =>
    target$.closestPointTo;
Function _Obb3_intersectsWithObb3$(
  m.Scope scope$,
  Obb3 target$,
) =>
    target$.intersectsWithObb3;
Function _Obb3_intersectsWithTriangle$(
  m.Scope scope$,
  Obb3 target$,
) =>
    target$.intersectsWithTriangle;
Function _Obb3_intersectsWithVector3$(
  m.Scope scope$,
  Obb3 target$,
) =>
    target$.intersectsWithVector3;
Function _Obb3_intersectsWithQuad$(
  m.Scope scope$,
  Obb3 target$,
) =>
    target$.intersectsWithQuad;
Function _setRotationMatrix$(m.Scope scope$) => setRotationMatrix;
Function _setModelMatrix$(m.Scope scope$) => setModelMatrix;
Function _setViewMatrix$(m.Scope scope$) => setViewMatrix;
Function _makeViewMatrix$(m.Scope scope$) => makeViewMatrix;
Function _setPerspectiveMatrix$(m.Scope scope$) => setPerspectiveMatrix;
Function _makePerspectiveMatrix$(m.Scope scope$) => makePerspectiveMatrix;
Function _setInfiniteMatrix$(m.Scope scope$) => setInfiniteMatrix;
Function _makeInfiniteMatrix$(m.Scope scope$) => makeInfiniteMatrix;
Function _setFrustumMatrix$(m.Scope scope$) => setFrustumMatrix;
Function _makeFrustumMatrix$(m.Scope scope$) => makeFrustumMatrix;
Function _setOrthographicMatrix$(m.Scope scope$) => setOrthographicMatrix;
Function _makeOrthographicMatrix$(m.Scope scope$) => makeOrthographicMatrix;
Function _makePlaneProjection$(m.Scope scope$) => makePlaneProjection;
Function _makePlaneReflection$(m.Scope scope$) => makePlaneReflection;
Function _unproject$(m.Scope scope$) => unproject;
Function _pickRay$(m.Scope scope$) => pickRay;
Function Plane_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Plane;
Function Plane_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Plane;
Function _Plane_constant$(
  m.Scope scope$,
  Plane target$,
) =>
    () {
      return target$.constant;
    };
void _Plane_constant_set$(
  m.Scope scope$,
  Plane target$,
) =>
    (dynamic other$) {
      target$.constant = other$;
    };
Function _Plane_normal$(
  m.Scope scope$,
  Plane target$,
) =>
    () {
      return target$.normal;
    };
Function _Plane__$(m.Scope scope$) => () {
      return Plane();
    };
Function _Plane_copy_$(m.Scope scope$) => Plane.copy;
Function _Plane_components_$(m.Scope scope$) => Plane.components;
Function _Plane_normalconstant_$(m.Scope scope$) => Plane.normalconstant;
Function _Plane_intersection$(m.Scope scope$) => Plane.intersection;
Function _Plane_copyFrom$(
  m.Scope scope$,
  Plane target$,
) =>
    target$.copyFrom;
Function _Plane_setFromComponents$(
  m.Scope scope$,
  Plane target$,
) =>
    target$.setFromComponents;
Function _Plane_normalize$(
  m.Scope scope$,
  Plane target$,
) =>
    target$.normalize;
Function _Plane_distanceToVector3$(
  m.Scope scope$,
  Plane target$,
) =>
    target$.distanceToVector3;
Function Quad_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Quad;
Function Quad_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Quad;
Function _Quad_point0$(
  m.Scope scope$,
  Quad target$,
) =>
    () {
      return target$.point0;
    };
Function _Quad_point1$(
  m.Scope scope$,
  Quad target$,
) =>
    () {
      return target$.point1;
    };
Function _Quad_point2$(
  m.Scope scope$,
  Quad target$,
) =>
    () {
      return target$.point2;
    };
Function _Quad_point3$(
  m.Scope scope$,
  Quad target$,
) =>
    () {
      return target$.point3;
    };
Function _Quad__$(m.Scope scope$) => () {
      return Quad();
    };
Function _Quad_copy_$(m.Scope scope$) => Quad.copy;
Function _Quad_points_$(m.Scope scope$) => Quad.points;
Function _Quad_copyFrom$(
  m.Scope scope$,
  Quad target$,
) =>
    target$.copyFrom;
Function _Quad_copyNormalInto$(
  m.Scope scope$,
  Quad target$,
) =>
    target$.copyNormalInto;
Function _Quad_copyTriangles$(
  m.Scope scope$,
  Quad target$,
) =>
    target$.copyTriangles;
Function _Quad_transform$(
  m.Scope scope$,
  Quad target$,
) =>
    target$.transform;
Function _Quad_translate$(
  m.Scope scope$,
  Quad target$,
) =>
    target$.translate;
Function Quaternion_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Quaternion;
Function Quaternion_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Quaternion;
Function _Quaternion_storage$(
  m.Scope scope$,
  Quaternion target$,
) =>
    () {
      return target$.storage;
    };
Function _Quaternion_x$(
  m.Scope scope$,
  Quaternion target$,
) =>
    () {
      return target$.x;
    };
void _Quaternion_x_set$(
  m.Scope scope$,
  Quaternion target$,
) =>
    (dynamic other$) {
      target$.x = other$;
    };
Function _Quaternion_y$(
  m.Scope scope$,
  Quaternion target$,
) =>
    () {
      return target$.y;
    };
void _Quaternion_y_set$(
  m.Scope scope$,
  Quaternion target$,
) =>
    (dynamic other$) {
      target$.y = other$;
    };
Function _Quaternion_z$(
  m.Scope scope$,
  Quaternion target$,
) =>
    () {
      return target$.z;
    };
void _Quaternion_z_set$(
  m.Scope scope$,
  Quaternion target$,
) =>
    (dynamic other$) {
      target$.z = other$;
    };
Function _Quaternion_w$(
  m.Scope scope$,
  Quaternion target$,
) =>
    () {
      return target$.w;
    };
void _Quaternion_w_set$(
  m.Scope scope$,
  Quaternion target$,
) =>
    (dynamic other$) {
      target$.w = other$;
    };
Function _Quaternion_radians$(
  m.Scope scope$,
  Quaternion target$,
) =>
    () {
      return target$.radians;
    };
Function _Quaternion_axis$(
  m.Scope scope$,
  Quaternion target$,
) =>
    () {
      return target$.axis;
    };
Function _Quaternion_length2$(
  m.Scope scope$,
  Quaternion target$,
) =>
    () {
      return target$.length2;
    };
Function _Quaternion_length$(
  m.Scope scope$,
  Quaternion target$,
) =>
    () {
      return target$.length;
    };
Function _Quaternion__$(m.Scope scope$) => (
      double x,
      double y,
      double z,
      double w,
    ) {
      return Quaternion(
        x,
        y,
        z,
        w,
      );
    };
Function _Quaternion_fromRotation_$(m.Scope scope$) => Quaternion.fromRotation;
Function _Quaternion_axisAngle_$(m.Scope scope$) => Quaternion.axisAngle;
Function _Quaternion_fromTwoVectors_$(m.Scope scope$) =>
    Quaternion.fromTwoVectors;
Function _Quaternion_copy_$(m.Scope scope$) => Quaternion.copy;
Function _Quaternion_random_$(m.Scope scope$) => Quaternion.random;
Function _Quaternion_identity_$(m.Scope scope$) => Quaternion.identity;
Function _Quaternion_dq_$(m.Scope scope$) => Quaternion.dq;
Function _Quaternion_euler_$(m.Scope scope$) => Quaternion.euler;
Function _Quaternion_fromFloat64List_$(m.Scope scope$) =>
    Quaternion.fromFloat64List;
Function _Quaternion_fromBuffer_$(m.Scope scope$) => Quaternion.fromBuffer;
Function _Quaternion_clone$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.clone;
Function _Quaternion_setFrom$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.setFrom;
Function _Quaternion_setValues$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.setValues;
Function _Quaternion_setAxisAngle$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.setAxisAngle;
Function _Quaternion_setFromRotation$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.setFromRotation;
Function _Quaternion_setFromTwoVectors$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.setFromTwoVectors;
Function _Quaternion_setRandom$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.setRandom;
Function _Quaternion_setDQ$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.setDQ;
Function _Quaternion_setEuler$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.setEuler;
Function _Quaternion_normalize$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.normalize;
Function _Quaternion_conjugate$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.conjugate;
Function _Quaternion_inverse$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.inverse;
Function _Quaternion_normalized$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.normalized;
Function _Quaternion_conjugated$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.conjugated;
Function _Quaternion_inverted$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.inverted;
Function _Quaternion_rotated$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.rotated;
Function _Quaternion_rotate$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.rotate;
Function _Quaternion_add$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.add;
Function _Quaternion_sub$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.sub;
Function _Quaternion_scale$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.scale;
Function _Quaternion_scaled$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.scaled;
Function _Quaternion_times$$(
  m.Scope scope$,
  Quaternion target$,
) =>
    (Quaternion other$) => target$ * other$;
Function _Quaternion_plus$$(
  m.Scope scope$,
  Quaternion target$,
) =>
    (Quaternion other$) => target$ + other$;
Function _Quaternion_minus$$(
  m.Scope scope$,
  Quaternion target$,
) =>
    (Quaternion other$) => target$ - other$;
Function _Quaternion_unary_minus$$(
  m.Scope scope$,
  Quaternion target$,
) =>
    () => -target$;
Function _Quaternion_$index$$(
  m.Scope scope$,
  Quaternion target$,
) =>
    (int index) => target$[index];
Function _Quaternion_$index_set$$(
  m.Scope scope$,
  Quaternion target$,
) =>
    (
      int index,
      double other,
    ) =>
        target$[index] = other;
Function _Quaternion_asRotationMatrix$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.asRotationMatrix;
Function _Quaternion_copyRotationInto$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.copyRotationInto;
Function _Quaternion_toString$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.toString;
Function _Quaternion_relativeError$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.relativeError;
Function _Quaternion_absoluteError$(
  m.Scope scope$,
  Quaternion target$,
) =>
    target$.absoluteError;
Function Ray_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Ray;
Function Ray_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Ray;
Function _Ray_origin$(
  m.Scope scope$,
  Ray target$,
) =>
    () {
      return target$.origin;
    };
Function _Ray_direction$(
  m.Scope scope$,
  Ray target$,
) =>
    () {
      return target$.direction;
    };
Function _Ray__$(m.Scope scope$) => () {
      return Ray();
    };
Function _Ray_copy_$(m.Scope scope$) => Ray.copy;
Function _Ray_originDirection_$(m.Scope scope$) => Ray.originDirection;
Function _Ray_copyFrom$(
  m.Scope scope$,
  Ray target$,
) =>
    target$.copyFrom;
Function _Ray_at$(
  m.Scope scope$,
  Ray target$,
) =>
    target$.at;
Function _Ray_copyAt$(
  m.Scope scope$,
  Ray target$,
) =>
    target$.copyAt;
Function _Ray_intersectsWithSphere$(
  m.Scope scope$,
  Ray target$,
) =>
    target$.intersectsWithSphere;
Function _Ray_intersectsWithTriangle$(
  m.Scope scope$,
  Ray target$,
) =>
    target$.intersectsWithTriangle;
Function _Ray_intersectsWithQuad$(
  m.Scope scope$,
  Ray target$,
) =>
    target$.intersectsWithQuad;
Function _Ray_intersectsWithAabb3$(
  m.Scope scope$,
  Ray target$,
) =>
    target$.intersectsWithAabb3;
Function Sphere_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Sphere;
Function Sphere_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Sphere;
Function _Sphere_radius$(
  m.Scope scope$,
  Sphere target$,
) =>
    () {
      return target$.radius;
    };
void _Sphere_radius_set$(
  m.Scope scope$,
  Sphere target$,
) =>
    (dynamic other$) {
      target$.radius = other$;
    };
Function _Sphere_center$(
  m.Scope scope$,
  Sphere target$,
) =>
    () {
      return target$.center;
    };
Function _Sphere__$(m.Scope scope$) => () {
      return Sphere();
    };
Function _Sphere_copy_$(m.Scope scope$) => Sphere.copy;
Function _Sphere_centerRadius_$(m.Scope scope$) => Sphere.centerRadius;
Function _Sphere_copyFrom$(
  m.Scope scope$,
  Sphere target$,
) =>
    target$.copyFrom;
Function _Sphere_containsVector3$(
  m.Scope scope$,
  Sphere target$,
) =>
    target$.containsVector3;
Function _Sphere_intersectsWithVector3$(
  m.Scope scope$,
  Sphere target$,
) =>
    target$.intersectsWithVector3;
Function _Sphere_intersectsWithSphere$(
  m.Scope scope$,
  Sphere target$,
) =>
    target$.intersectsWithSphere;
Function Triangle_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Triangle;
Function Triangle_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Triangle;
Function _Triangle_point0$(
  m.Scope scope$,
  Triangle target$,
) =>
    () {
      return target$.point0;
    };
Function _Triangle_point1$(
  m.Scope scope$,
  Triangle target$,
) =>
    () {
      return target$.point1;
    };
Function _Triangle_point2$(
  m.Scope scope$,
  Triangle target$,
) =>
    () {
      return target$.point2;
    };
Function _Triangle__$(m.Scope scope$) => () {
      return Triangle();
    };
Function _Triangle_copy_$(m.Scope scope$) => Triangle.copy;
Function _Triangle_points_$(m.Scope scope$) => Triangle.points;
Function _Triangle_copyFrom$(
  m.Scope scope$,
  Triangle target$,
) =>
    target$.copyFrom;
Function _Triangle_copyNormalInto$(
  m.Scope scope$,
  Triangle target$,
) =>
    target$.copyNormalInto;
Function _Triangle_transform$(
  m.Scope scope$,
  Triangle target$,
) =>
    target$.transform;
Function _Triangle_translate$(
  m.Scope scope$,
  Triangle target$,
) =>
    target$.translate;
Function _degrees$(m.Scope scope$) => degrees;
Function _radians$(m.Scope scope$) => radians;
Function _mix$(m.Scope scope$) => mix;
Function _smoothStep$(m.Scope scope$) => smoothStep;
Function _catmullRom$(m.Scope scope$) => catmullRom;
Function Vector_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Vector;
Function Vector_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Vector;
Function _Vector_storage$(
  m.Scope scope$,
  Vector target$,
) =>
    () {
      return target$.storage;
    };
Function _dot2$(m.Scope scope$) => dot2;
Function _dot3$(m.Scope scope$) => dot3;
Function _cross3$(m.Scope scope$) => cross3;
Function _cross2$(m.Scope scope$) => cross2;
Function _cross2A$(m.Scope scope$) => cross2A;
Function _cross2B$(m.Scope scope$) => cross2B;
Function _buildPlaneVectors$(m.Scope scope$) => buildPlaneVectors;
Function Vector2_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Vector2;
Function Vector2_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Vector2;
Function _Vector2_storage$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.storage;
    };
Function _Vector2_hashCode$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.hashCode;
    };
void _Vector2_length_set$(
  m.Scope scope$,
  Vector2 target$,
) =>
    (dynamic other$) {
      target$.length = other$;
    };
Function _Vector2_length$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.length;
    };
Function _Vector2_length2$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.length2;
    };
Function _Vector2_isInfinite$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.isInfinite;
    };
Function _Vector2_isNaN$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.isNaN;
    };
void _Vector2_xy_set$(
  m.Scope scope$,
  Vector2 target$,
) =>
    (dynamic other$) {
      target$.xy = other$;
    };
void _Vector2_yx_set$(
  m.Scope scope$,
  Vector2 target$,
) =>
    (dynamic other$) {
      target$.yx = other$;
    };
void _Vector2_r_set$(
  m.Scope scope$,
  Vector2 target$,
) =>
    (dynamic other$) {
      target$.r = other$;
    };
void _Vector2_g_set$(
  m.Scope scope$,
  Vector2 target$,
) =>
    (dynamic other$) {
      target$.g = other$;
    };
void _Vector2_s_set$(
  m.Scope scope$,
  Vector2 target$,
) =>
    (dynamic other$) {
      target$.s = other$;
    };
void _Vector2_t_set$(
  m.Scope scope$,
  Vector2 target$,
) =>
    (dynamic other$) {
      target$.t = other$;
    };
void _Vector2_x_set$(
  m.Scope scope$,
  Vector2 target$,
) =>
    (dynamic other$) {
      target$.x = other$;
    };
void _Vector2_y_set$(
  m.Scope scope$,
  Vector2 target$,
) =>
    (dynamic other$) {
      target$.y = other$;
    };
void _Vector2_rg_set$(
  m.Scope scope$,
  Vector2 target$,
) =>
    (dynamic other$) {
      target$.rg = other$;
    };
void _Vector2_gr_set$(
  m.Scope scope$,
  Vector2 target$,
) =>
    (dynamic other$) {
      target$.gr = other$;
    };
void _Vector2_st_set$(
  m.Scope scope$,
  Vector2 target$,
) =>
    (dynamic other$) {
      target$.st = other$;
    };
void _Vector2_ts_set$(
  m.Scope scope$,
  Vector2 target$,
) =>
    (dynamic other$) {
      target$.ts = other$;
    };
Function _Vector2_xx$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.xx;
    };
Function _Vector2_xy$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.xy;
    };
Function _Vector2_yx$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.yx;
    };
Function _Vector2_yy$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.yy;
    };
Function _Vector2_xxx$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.xxx;
    };
Function _Vector2_xxy$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.xxy;
    };
Function _Vector2_xyx$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.xyx;
    };
Function _Vector2_xyy$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.xyy;
    };
Function _Vector2_yxx$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.yxx;
    };
Function _Vector2_yxy$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.yxy;
    };
Function _Vector2_yyx$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.yyx;
    };
Function _Vector2_yyy$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.yyy;
    };
Function _Vector2_xxxx$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.xxxx;
    };
Function _Vector2_xxxy$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.xxxy;
    };
Function _Vector2_xxyx$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.xxyx;
    };
Function _Vector2_xxyy$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.xxyy;
    };
Function _Vector2_xyxx$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.xyxx;
    };
Function _Vector2_xyxy$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.xyxy;
    };
Function _Vector2_xyyx$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.xyyx;
    };
Function _Vector2_xyyy$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.xyyy;
    };
Function _Vector2_yxxx$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.yxxx;
    };
Function _Vector2_yxxy$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.yxxy;
    };
Function _Vector2_yxyx$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.yxyx;
    };
Function _Vector2_yxyy$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.yxyy;
    };
Function _Vector2_yyxx$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.yyxx;
    };
Function _Vector2_yyxy$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.yyxy;
    };
Function _Vector2_yyyx$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.yyyx;
    };
Function _Vector2_yyyy$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.yyyy;
    };
Function _Vector2_r$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.r;
    };
Function _Vector2_g$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.g;
    };
Function _Vector2_s$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.s;
    };
Function _Vector2_t$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.t;
    };
Function _Vector2_x$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.x;
    };
Function _Vector2_y$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.y;
    };
Function _Vector2_rr$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.rr;
    };
Function _Vector2_rg$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.rg;
    };
Function _Vector2_gr$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.gr;
    };
Function _Vector2_gg$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.gg;
    };
Function _Vector2_rrr$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.rrr;
    };
Function _Vector2_rrg$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.rrg;
    };
Function _Vector2_rgr$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.rgr;
    };
Function _Vector2_rgg$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.rgg;
    };
Function _Vector2_grr$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.grr;
    };
Function _Vector2_grg$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.grg;
    };
Function _Vector2_ggr$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.ggr;
    };
Function _Vector2_ggg$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.ggg;
    };
Function _Vector2_rrrr$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.rrrr;
    };
Function _Vector2_rrrg$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.rrrg;
    };
Function _Vector2_rrgr$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.rrgr;
    };
Function _Vector2_rrgg$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.rrgg;
    };
Function _Vector2_rgrr$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.rgrr;
    };
Function _Vector2_rgrg$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.rgrg;
    };
Function _Vector2_rggr$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.rggr;
    };
Function _Vector2_rggg$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.rggg;
    };
Function _Vector2_grrr$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.grrr;
    };
Function _Vector2_grrg$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.grrg;
    };
Function _Vector2_grgr$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.grgr;
    };
Function _Vector2_grgg$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.grgg;
    };
Function _Vector2_ggrr$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.ggrr;
    };
Function _Vector2_ggrg$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.ggrg;
    };
Function _Vector2_gggr$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.gggr;
    };
Function _Vector2_gggg$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.gggg;
    };
Function _Vector2_ss$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.ss;
    };
Function _Vector2_st$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.st;
    };
Function _Vector2_ts$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.ts;
    };
Function _Vector2_tt$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.tt;
    };
Function _Vector2_sss$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.sss;
    };
Function _Vector2_sst$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.sst;
    };
Function _Vector2_sts$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.sts;
    };
Function _Vector2_stt$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.stt;
    };
Function _Vector2_tss$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.tss;
    };
Function _Vector2_tst$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.tst;
    };
Function _Vector2_tts$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.tts;
    };
Function _Vector2_ttt$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.ttt;
    };
Function _Vector2_ssss$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.ssss;
    };
Function _Vector2_ssst$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.ssst;
    };
Function _Vector2_ssts$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.ssts;
    };
Function _Vector2_sstt$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.sstt;
    };
Function _Vector2_stss$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.stss;
    };
Function _Vector2_stst$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.stst;
    };
Function _Vector2_stts$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.stts;
    };
Function _Vector2_sttt$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.sttt;
    };
Function _Vector2_tsss$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.tsss;
    };
Function _Vector2_tsst$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.tsst;
    };
Function _Vector2_tsts$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.tsts;
    };
Function _Vector2_tstt$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.tstt;
    };
Function _Vector2_ttss$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.ttss;
    };
Function _Vector2_ttst$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.ttst;
    };
Function _Vector2_ttts$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.ttts;
    };
Function _Vector2_tttt$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () {
      return target$.tttt;
    };
Function _Vector2__$(m.Scope scope$) => (
      double x,
      double y,
    ) {
      return Vector2(
        x,
        y,
      );
    };
Function _Vector2_array_$(m.Scope scope$) => Vector2.array;
Function _Vector2_zero_$(m.Scope scope$) => Vector2.zero;
Function _Vector2_all_$(m.Scope scope$) => Vector2.all;
Function _Vector2_copy_$(m.Scope scope$) => Vector2.copy;
Function _Vector2_fromFloat64List_$(m.Scope scope$) => Vector2.fromFloat64List;
Function _Vector2_fromBuffer_$(m.Scope scope$) => Vector2.fromBuffer;
Function _Vector2_random_$(m.Scope scope$) => Vector2.random;
Function _Vector2_min$(m.Scope scope$) => Vector2.min;
Function _Vector2_max$(m.Scope scope$) => Vector2.max;
Function _Vector2_mix$(m.Scope scope$) => Vector2.mix;
Function _Vector2_setValues$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.setValues;
Function _Vector2_setZero$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.setZero;
Function _Vector2_setFrom$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.setFrom;
Function _Vector2_splat$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.splat;
Function _Vector2_toString$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.toString;
Function _Vector2_eq$$(
  m.Scope scope$,
  Vector2 target$,
) =>
    (Object other$) => target$ == other$;
Function _Vector2_unary_minus$$(
  m.Scope scope$,
  Vector2 target$,
) =>
    () => -target$;
Function _Vector2_minus$$(
  m.Scope scope$,
  Vector2 target$,
) =>
    (Vector2 other$) => target$ - other$;
Function _Vector2_plus$$(
  m.Scope scope$,
  Vector2 target$,
) =>
    (Vector2 other$) => target$ + other$;
Function _Vector2_over$$(
  m.Scope scope$,
  Vector2 target$,
) =>
    (double other$) => target$ / other$;
Function _Vector2_times$$(
  m.Scope scope$,
  Vector2 target$,
) =>
    (double other$) => target$ * other$;
Function _Vector2_$index$$(
  m.Scope scope$,
  Vector2 target$,
) =>
    (int index) => target$[index];
Function _Vector2_$index_set$$(
  m.Scope scope$,
  Vector2 target$,
) =>
    (
      int index,
      double other,
    ) =>
        target$[index] = other;
Function _Vector2_normalize$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.normalize;
Function _Vector2_normalized$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.normalized;
Function _Vector2_normalizeInto$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.normalizeInto;
Function _Vector2_distanceTo$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.distanceTo;
Function _Vector2_distanceToSquared$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.distanceToSquared;
Function _Vector2_angleTo$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.angleTo;
Function _Vector2_angleToSigned$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.angleToSigned;
Function _Vector2_dot$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.dot;
Function _Vector2_postmultiply$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.postmultiply;
Function _Vector2_cross$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.cross;
Function _Vector2_scaleOrthogonalInto$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.scaleOrthogonalInto;
Function _Vector2_reflect$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.reflect;
Function _Vector2_reflected$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.reflected;
Function _Vector2_relativeError$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.relativeError;
Function _Vector2_absoluteError$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.absoluteError;
Function _Vector2_add$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.add;
Function _Vector2_addScaled$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.addScaled;
Function _Vector2_sub$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.sub;
Function _Vector2_multiply$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.multiply;
Function _Vector2_divide$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.divide;
Function _Vector2_scale$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.scale;
Function _Vector2_scaled$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.scaled;
Function _Vector2_negate$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.negate;
Function _Vector2_absolute$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.absolute;
Function _Vector2_clamp$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.clamp;
Function _Vector2_clampScalar$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.clampScalar;
Function _Vector2_floor$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.floor;
Function _Vector2_ceil$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.ceil;
Function _Vector2_round$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.round;
Function _Vector2_roundToZero$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.roundToZero;
Function _Vector2_clone$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.clone;
Function _Vector2_copyInto$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.copyInto;
Function _Vector2_copyIntoArray$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.copyIntoArray;
Function _Vector2_copyFromArray$(
  m.Scope scope$,
  Vector2 target$,
) =>
    target$.copyFromArray;
Function Vector3_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Vector3;
Function Vector3_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Vector3;
Function _Vector3_storage$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.storage;
    };
Function _Vector3_hashCode$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.hashCode;
    };
void _Vector3_length_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.length = other$;
    };
Function _Vector3_length$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.length;
    };
Function _Vector3_length2$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.length2;
    };
Function _Vector3_isInfinite$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.isInfinite;
    };
Function _Vector3_isNaN$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.isNaN;
    };
void _Vector3_xy_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.xy = other$;
    };
void _Vector3_xz_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.xz = other$;
    };
void _Vector3_yx_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.yx = other$;
    };
void _Vector3_yz_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.yz = other$;
    };
void _Vector3_zx_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.zx = other$;
    };
void _Vector3_zy_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.zy = other$;
    };
void _Vector3_xyz_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.xyz = other$;
    };
void _Vector3_xzy_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.xzy = other$;
    };
void _Vector3_yxz_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.yxz = other$;
    };
void _Vector3_yzx_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.yzx = other$;
    };
void _Vector3_zxy_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.zxy = other$;
    };
void _Vector3_zyx_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.zyx = other$;
    };
void _Vector3_r_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.r = other$;
    };
void _Vector3_g_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.g = other$;
    };
void _Vector3_b_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.b = other$;
    };
void _Vector3_s_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.s = other$;
    };
void _Vector3_t_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.t = other$;
    };
void _Vector3_p_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.p = other$;
    };
void _Vector3_x_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.x = other$;
    };
void _Vector3_y_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.y = other$;
    };
void _Vector3_z_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.z = other$;
    };
void _Vector3_rg_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.rg = other$;
    };
void _Vector3_rb_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.rb = other$;
    };
void _Vector3_gr_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.gr = other$;
    };
void _Vector3_gb_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.gb = other$;
    };
void _Vector3_br_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.br = other$;
    };
void _Vector3_bg_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.bg = other$;
    };
void _Vector3_rgb_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.rgb = other$;
    };
void _Vector3_rbg_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.rbg = other$;
    };
void _Vector3_grb_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.grb = other$;
    };
void _Vector3_gbr_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.gbr = other$;
    };
void _Vector3_brg_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.brg = other$;
    };
void _Vector3_bgr_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.bgr = other$;
    };
void _Vector3_st_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.st = other$;
    };
void _Vector3_sp_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.sp = other$;
    };
void _Vector3_ts_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.ts = other$;
    };
void _Vector3_tp_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.tp = other$;
    };
void _Vector3_ps_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.ps = other$;
    };
void _Vector3_pt_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.pt = other$;
    };
void _Vector3_stp_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.stp = other$;
    };
void _Vector3_spt_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.spt = other$;
    };
void _Vector3_tsp_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.tsp = other$;
    };
void _Vector3_tps_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.tps = other$;
    };
void _Vector3_pst_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.pst = other$;
    };
void _Vector3_pts_set$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (dynamic other$) {
      target$.pts = other$;
    };
Function _Vector3_xx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xx;
    };
Function _Vector3_xy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xy;
    };
Function _Vector3_xz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xz;
    };
Function _Vector3_yx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yx;
    };
Function _Vector3_yy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yy;
    };
Function _Vector3_yz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yz;
    };
Function _Vector3_zx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zx;
    };
Function _Vector3_zy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zy;
    };
Function _Vector3_zz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zz;
    };
Function _Vector3_xxx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xxx;
    };
Function _Vector3_xxy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xxy;
    };
Function _Vector3_xxz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xxz;
    };
Function _Vector3_xyx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xyx;
    };
Function _Vector3_xyy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xyy;
    };
Function _Vector3_xyz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xyz;
    };
Function _Vector3_xzx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xzx;
    };
Function _Vector3_xzy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xzy;
    };
Function _Vector3_xzz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xzz;
    };
Function _Vector3_yxx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yxx;
    };
Function _Vector3_yxy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yxy;
    };
Function _Vector3_yxz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yxz;
    };
Function _Vector3_yyx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yyx;
    };
Function _Vector3_yyy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yyy;
    };
Function _Vector3_yyz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yyz;
    };
Function _Vector3_yzx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yzx;
    };
Function _Vector3_yzy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yzy;
    };
Function _Vector3_yzz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yzz;
    };
Function _Vector3_zxx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zxx;
    };
Function _Vector3_zxy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zxy;
    };
Function _Vector3_zxz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zxz;
    };
Function _Vector3_zyx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zyx;
    };
Function _Vector3_zyy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zyy;
    };
Function _Vector3_zyz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zyz;
    };
Function _Vector3_zzx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zzx;
    };
Function _Vector3_zzy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zzy;
    };
Function _Vector3_zzz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zzz;
    };
Function _Vector3_xxxx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xxxx;
    };
Function _Vector3_xxxy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xxxy;
    };
Function _Vector3_xxxz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xxxz;
    };
Function _Vector3_xxyx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xxyx;
    };
Function _Vector3_xxyy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xxyy;
    };
Function _Vector3_xxyz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xxyz;
    };
Function _Vector3_xxzx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xxzx;
    };
Function _Vector3_xxzy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xxzy;
    };
Function _Vector3_xxzz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xxzz;
    };
Function _Vector3_xyxx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xyxx;
    };
Function _Vector3_xyxy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xyxy;
    };
Function _Vector3_xyxz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xyxz;
    };
Function _Vector3_xyyx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xyyx;
    };
Function _Vector3_xyyy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xyyy;
    };
Function _Vector3_xyyz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xyyz;
    };
Function _Vector3_xyzx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xyzx;
    };
Function _Vector3_xyzy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xyzy;
    };
Function _Vector3_xyzz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xyzz;
    };
Function _Vector3_xzxx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xzxx;
    };
Function _Vector3_xzxy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xzxy;
    };
Function _Vector3_xzxz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xzxz;
    };
Function _Vector3_xzyx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xzyx;
    };
Function _Vector3_xzyy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xzyy;
    };
Function _Vector3_xzyz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xzyz;
    };
Function _Vector3_xzzx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xzzx;
    };
Function _Vector3_xzzy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xzzy;
    };
Function _Vector3_xzzz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.xzzz;
    };
Function _Vector3_yxxx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yxxx;
    };
Function _Vector3_yxxy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yxxy;
    };
Function _Vector3_yxxz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yxxz;
    };
Function _Vector3_yxyx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yxyx;
    };
Function _Vector3_yxyy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yxyy;
    };
Function _Vector3_yxyz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yxyz;
    };
Function _Vector3_yxzx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yxzx;
    };
Function _Vector3_yxzy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yxzy;
    };
Function _Vector3_yxzz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yxzz;
    };
Function _Vector3_yyxx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yyxx;
    };
Function _Vector3_yyxy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yyxy;
    };
Function _Vector3_yyxz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yyxz;
    };
Function _Vector3_yyyx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yyyx;
    };
Function _Vector3_yyyy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yyyy;
    };
Function _Vector3_yyyz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yyyz;
    };
Function _Vector3_yyzx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yyzx;
    };
Function _Vector3_yyzy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yyzy;
    };
Function _Vector3_yyzz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yyzz;
    };
Function _Vector3_yzxx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yzxx;
    };
Function _Vector3_yzxy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yzxy;
    };
Function _Vector3_yzxz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yzxz;
    };
Function _Vector3_yzyx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yzyx;
    };
Function _Vector3_yzyy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yzyy;
    };
Function _Vector3_yzyz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yzyz;
    };
Function _Vector3_yzzx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yzzx;
    };
Function _Vector3_yzzy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yzzy;
    };
Function _Vector3_yzzz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.yzzz;
    };
Function _Vector3_zxxx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zxxx;
    };
Function _Vector3_zxxy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zxxy;
    };
Function _Vector3_zxxz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zxxz;
    };
Function _Vector3_zxyx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zxyx;
    };
Function _Vector3_zxyy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zxyy;
    };
Function _Vector3_zxyz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zxyz;
    };
Function _Vector3_zxzx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zxzx;
    };
Function _Vector3_zxzy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zxzy;
    };
Function _Vector3_zxzz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zxzz;
    };
Function _Vector3_zyxx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zyxx;
    };
Function _Vector3_zyxy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zyxy;
    };
Function _Vector3_zyxz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zyxz;
    };
Function _Vector3_zyyx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zyyx;
    };
Function _Vector3_zyyy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zyyy;
    };
Function _Vector3_zyyz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zyyz;
    };
Function _Vector3_zyzx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zyzx;
    };
Function _Vector3_zyzy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zyzy;
    };
Function _Vector3_zyzz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zyzz;
    };
Function _Vector3_zzxx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zzxx;
    };
Function _Vector3_zzxy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zzxy;
    };
Function _Vector3_zzxz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zzxz;
    };
Function _Vector3_zzyx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zzyx;
    };
Function _Vector3_zzyy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zzyy;
    };
Function _Vector3_zzyz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zzyz;
    };
Function _Vector3_zzzx$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zzzx;
    };
Function _Vector3_zzzy$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zzzy;
    };
Function _Vector3_zzzz$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.zzzz;
    };
Function _Vector3_r$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.r;
    };
Function _Vector3_g$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.g;
    };
Function _Vector3_b$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.b;
    };
Function _Vector3_s$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.s;
    };
Function _Vector3_t$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.t;
    };
Function _Vector3_p$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.p;
    };
Function _Vector3_x$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.x;
    };
Function _Vector3_y$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.y;
    };
Function _Vector3_z$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.z;
    };
Function _Vector3_rr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rr;
    };
Function _Vector3_rg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rg;
    };
Function _Vector3_rb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rb;
    };
Function _Vector3_gr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.gr;
    };
Function _Vector3_gg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.gg;
    };
Function _Vector3_gb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.gb;
    };
Function _Vector3_br$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.br;
    };
Function _Vector3_bg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bg;
    };
Function _Vector3_bb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bb;
    };
Function _Vector3_rrr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rrr;
    };
Function _Vector3_rrg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rrg;
    };
Function _Vector3_rrb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rrb;
    };
Function _Vector3_rgr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rgr;
    };
Function _Vector3_rgg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rgg;
    };
Function _Vector3_rgb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rgb;
    };
Function _Vector3_rbr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rbr;
    };
Function _Vector3_rbg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rbg;
    };
Function _Vector3_rbb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rbb;
    };
Function _Vector3_grr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.grr;
    };
Function _Vector3_grg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.grg;
    };
Function _Vector3_grb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.grb;
    };
Function _Vector3_ggr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ggr;
    };
Function _Vector3_ggg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ggg;
    };
Function _Vector3_ggb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ggb;
    };
Function _Vector3_gbr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.gbr;
    };
Function _Vector3_gbg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.gbg;
    };
Function _Vector3_gbb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.gbb;
    };
Function _Vector3_brr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.brr;
    };
Function _Vector3_brg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.brg;
    };
Function _Vector3_brb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.brb;
    };
Function _Vector3_bgr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bgr;
    };
Function _Vector3_bgg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bgg;
    };
Function _Vector3_bgb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bgb;
    };
Function _Vector3_bbr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bbr;
    };
Function _Vector3_bbg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bbg;
    };
Function _Vector3_bbb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bbb;
    };
Function _Vector3_rrrr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rrrr;
    };
Function _Vector3_rrrg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rrrg;
    };
Function _Vector3_rrrb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rrrb;
    };
Function _Vector3_rrgr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rrgr;
    };
Function _Vector3_rrgg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rrgg;
    };
Function _Vector3_rrgb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rrgb;
    };
Function _Vector3_rrbr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rrbr;
    };
Function _Vector3_rrbg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rrbg;
    };
Function _Vector3_rrbb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rrbb;
    };
Function _Vector3_rgrr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rgrr;
    };
Function _Vector3_rgrg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rgrg;
    };
Function _Vector3_rgrb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rgrb;
    };
Function _Vector3_rggr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rggr;
    };
Function _Vector3_rggg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rggg;
    };
Function _Vector3_rggb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rggb;
    };
Function _Vector3_rgbr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rgbr;
    };
Function _Vector3_rgbg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rgbg;
    };
Function _Vector3_rgbb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rgbb;
    };
Function _Vector3_rbrr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rbrr;
    };
Function _Vector3_rbrg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rbrg;
    };
Function _Vector3_rbrb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rbrb;
    };
Function _Vector3_rbgr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rbgr;
    };
Function _Vector3_rbgg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rbgg;
    };
Function _Vector3_rbgb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rbgb;
    };
Function _Vector3_rbbr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rbbr;
    };
Function _Vector3_rbbg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rbbg;
    };
Function _Vector3_rbbb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.rbbb;
    };
Function _Vector3_grrr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.grrr;
    };
Function _Vector3_grrg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.grrg;
    };
Function _Vector3_grrb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.grrb;
    };
Function _Vector3_grgr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.grgr;
    };
Function _Vector3_grgg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.grgg;
    };
Function _Vector3_grgb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.grgb;
    };
Function _Vector3_grbr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.grbr;
    };
Function _Vector3_grbg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.grbg;
    };
Function _Vector3_grbb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.grbb;
    };
Function _Vector3_ggrr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ggrr;
    };
Function _Vector3_ggrg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ggrg;
    };
Function _Vector3_ggrb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ggrb;
    };
Function _Vector3_gggr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.gggr;
    };
Function _Vector3_gggg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.gggg;
    };
Function _Vector3_gggb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.gggb;
    };
Function _Vector3_ggbr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ggbr;
    };
Function _Vector3_ggbg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ggbg;
    };
Function _Vector3_ggbb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ggbb;
    };
Function _Vector3_gbrr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.gbrr;
    };
Function _Vector3_gbrg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.gbrg;
    };
Function _Vector3_gbrb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.gbrb;
    };
Function _Vector3_gbgr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.gbgr;
    };
Function _Vector3_gbgg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.gbgg;
    };
Function _Vector3_gbgb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.gbgb;
    };
Function _Vector3_gbbr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.gbbr;
    };
Function _Vector3_gbbg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.gbbg;
    };
Function _Vector3_gbbb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.gbbb;
    };
Function _Vector3_brrr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.brrr;
    };
Function _Vector3_brrg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.brrg;
    };
Function _Vector3_brrb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.brrb;
    };
Function _Vector3_brgr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.brgr;
    };
Function _Vector3_brgg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.brgg;
    };
Function _Vector3_brgb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.brgb;
    };
Function _Vector3_brbr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.brbr;
    };
Function _Vector3_brbg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.brbg;
    };
Function _Vector3_brbb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.brbb;
    };
Function _Vector3_bgrr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bgrr;
    };
Function _Vector3_bgrg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bgrg;
    };
Function _Vector3_bgrb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bgrb;
    };
Function _Vector3_bggr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bggr;
    };
Function _Vector3_bggg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bggg;
    };
Function _Vector3_bggb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bggb;
    };
Function _Vector3_bgbr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bgbr;
    };
Function _Vector3_bgbg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bgbg;
    };
Function _Vector3_bgbb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bgbb;
    };
Function _Vector3_bbrr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bbrr;
    };
Function _Vector3_bbrg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bbrg;
    };
Function _Vector3_bbrb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bbrb;
    };
Function _Vector3_bbgr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bbgr;
    };
Function _Vector3_bbgg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bbgg;
    };
Function _Vector3_bbgb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bbgb;
    };
Function _Vector3_bbbr$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bbbr;
    };
Function _Vector3_bbbg$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bbbg;
    };
Function _Vector3_bbbb$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.bbbb;
    };
Function _Vector3_ss$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ss;
    };
Function _Vector3_st$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.st;
    };
Function _Vector3_sp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.sp;
    };
Function _Vector3_ts$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ts;
    };
Function _Vector3_tt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tt;
    };
Function _Vector3_tp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tp;
    };
Function _Vector3_ps$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ps;
    };
Function _Vector3_pt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.pt;
    };
Function _Vector3_pp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.pp;
    };
Function _Vector3_sss$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.sss;
    };
Function _Vector3_sst$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.sst;
    };
Function _Vector3_ssp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ssp;
    };
Function _Vector3_sts$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.sts;
    };
Function _Vector3_stt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.stt;
    };
Function _Vector3_stp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.stp;
    };
Function _Vector3_sps$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.sps;
    };
Function _Vector3_spt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.spt;
    };
Function _Vector3_spp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.spp;
    };
Function _Vector3_tss$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tss;
    };
Function _Vector3_tst$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tst;
    };
Function _Vector3_tsp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tsp;
    };
Function _Vector3_tts$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tts;
    };
Function _Vector3_ttt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ttt;
    };
Function _Vector3_ttp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ttp;
    };
Function _Vector3_tps$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tps;
    };
Function _Vector3_tpt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tpt;
    };
Function _Vector3_tpp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tpp;
    };
Function _Vector3_pss$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.pss;
    };
Function _Vector3_pst$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.pst;
    };
Function _Vector3_psp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.psp;
    };
Function _Vector3_pts$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.pts;
    };
Function _Vector3_ptt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ptt;
    };
Function _Vector3_ptp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ptp;
    };
Function _Vector3_pps$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.pps;
    };
Function _Vector3_ppt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ppt;
    };
Function _Vector3_ppp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ppp;
    };
Function _Vector3_ssss$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ssss;
    };
Function _Vector3_ssst$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ssst;
    };
Function _Vector3_sssp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.sssp;
    };
Function _Vector3_ssts$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ssts;
    };
Function _Vector3_sstt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.sstt;
    };
Function _Vector3_sstp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.sstp;
    };
Function _Vector3_ssps$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ssps;
    };
Function _Vector3_sspt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.sspt;
    };
Function _Vector3_sspp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.sspp;
    };
Function _Vector3_stss$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.stss;
    };
Function _Vector3_stst$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.stst;
    };
Function _Vector3_stsp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.stsp;
    };
Function _Vector3_stts$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.stts;
    };
Function _Vector3_sttt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.sttt;
    };
Function _Vector3_sttp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.sttp;
    };
Function _Vector3_stps$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.stps;
    };
Function _Vector3_stpt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.stpt;
    };
Function _Vector3_stpp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.stpp;
    };
Function _Vector3_spss$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.spss;
    };
Function _Vector3_spst$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.spst;
    };
Function _Vector3_spsp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.spsp;
    };
Function _Vector3_spts$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.spts;
    };
Function _Vector3_sptt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.sptt;
    };
Function _Vector3_sptp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.sptp;
    };
Function _Vector3_spps$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.spps;
    };
Function _Vector3_sppt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.sppt;
    };
Function _Vector3_sppp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.sppp;
    };
Function _Vector3_tsss$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tsss;
    };
Function _Vector3_tsst$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tsst;
    };
Function _Vector3_tssp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tssp;
    };
Function _Vector3_tsts$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tsts;
    };
Function _Vector3_tstt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tstt;
    };
Function _Vector3_tstp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tstp;
    };
Function _Vector3_tsps$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tsps;
    };
Function _Vector3_tspt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tspt;
    };
Function _Vector3_tspp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tspp;
    };
Function _Vector3_ttss$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ttss;
    };
Function _Vector3_ttst$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ttst;
    };
Function _Vector3_ttsp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ttsp;
    };
Function _Vector3_ttts$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ttts;
    };
Function _Vector3_tttt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tttt;
    };
Function _Vector3_tttp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tttp;
    };
Function _Vector3_ttps$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ttps;
    };
Function _Vector3_ttpt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ttpt;
    };
Function _Vector3_ttpp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ttpp;
    };
Function _Vector3_tpss$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tpss;
    };
Function _Vector3_tpst$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tpst;
    };
Function _Vector3_tpsp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tpsp;
    };
Function _Vector3_tpts$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tpts;
    };
Function _Vector3_tptt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tptt;
    };
Function _Vector3_tptp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tptp;
    };
Function _Vector3_tpps$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tpps;
    };
Function _Vector3_tppt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tppt;
    };
Function _Vector3_tppp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.tppp;
    };
Function _Vector3_psss$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.psss;
    };
Function _Vector3_psst$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.psst;
    };
Function _Vector3_pssp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.pssp;
    };
Function _Vector3_psts$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.psts;
    };
Function _Vector3_pstt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.pstt;
    };
Function _Vector3_pstp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.pstp;
    };
Function _Vector3_psps$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.psps;
    };
Function _Vector3_pspt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.pspt;
    };
Function _Vector3_pspp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.pspp;
    };
Function _Vector3_ptss$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ptss;
    };
Function _Vector3_ptst$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ptst;
    };
Function _Vector3_ptsp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ptsp;
    };
Function _Vector3_ptts$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ptts;
    };
Function _Vector3_pttt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.pttt;
    };
Function _Vector3_pttp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.pttp;
    };
Function _Vector3_ptps$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ptps;
    };
Function _Vector3_ptpt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ptpt;
    };
Function _Vector3_ptpp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ptpp;
    };
Function _Vector3_ppss$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ppss;
    };
Function _Vector3_ppst$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ppst;
    };
Function _Vector3_ppsp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ppsp;
    };
Function _Vector3_ppts$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ppts;
    };
Function _Vector3_pptt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.pptt;
    };
Function _Vector3_pptp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.pptp;
    };
Function _Vector3_ppps$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.ppps;
    };
Function _Vector3_pppt$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.pppt;
    };
Function _Vector3_pppp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () {
      return target$.pppp;
    };
Function _Vector3__$(m.Scope scope$) => (
      double x,
      double y,
      double z,
    ) {
      return Vector3(
        x,
        y,
        z,
      );
    };
Function _Vector3_array_$(m.Scope scope$) => Vector3.array;
Function _Vector3_zero_$(m.Scope scope$) => Vector3.zero;
Function _Vector3_all_$(m.Scope scope$) => Vector3.all;
Function _Vector3_copy_$(m.Scope scope$) => Vector3.copy;
Function _Vector3_fromFloat64List_$(m.Scope scope$) => Vector3.fromFloat64List;
Function _Vector3_fromBuffer_$(m.Scope scope$) => Vector3.fromBuffer;
Function _Vector3_random_$(m.Scope scope$) => Vector3.random;
Function _Vector3_min$(m.Scope scope$) => Vector3.min;
Function _Vector3_max$(m.Scope scope$) => Vector3.max;
Function _Vector3_mix$(m.Scope scope$) => Vector3.mix;
Function _Vector3_setValues$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.setValues;
Function _Vector3_setZero$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.setZero;
Function _Vector3_setFrom$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.setFrom;
Function _Vector3_splat$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.splat;
Function _Vector3_toString$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.toString;
Function _Vector3_eq$$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (Object other$) => target$ == other$;
Function _Vector3_unary_minus$$(
  m.Scope scope$,
  Vector3 target$,
) =>
    () => -target$;
Function _Vector3_minus$$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (Vector3 other$) => target$ - other$;
Function _Vector3_plus$$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (Vector3 other$) => target$ + other$;
Function _Vector3_over$$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (double other$) => target$ / other$;
Function _Vector3_times$$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (double other$) => target$ * other$;
Function _Vector3_$index$$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (int index) => target$[index];
Function _Vector3_$index_set$$(
  m.Scope scope$,
  Vector3 target$,
) =>
    (
      int index,
      double other,
    ) =>
        target$[index] = other;
Function _Vector3_normalize$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.normalize;
Function _Vector3_normalized$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.normalized;
Function _Vector3_normalizeInto$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.normalizeInto;
Function _Vector3_distanceTo$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.distanceTo;
Function _Vector3_distanceToSquared$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.distanceToSquared;
Function _Vector3_angleTo$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.angleTo;
Function _Vector3_angleToSigned$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.angleToSigned;
Function _Vector3_dot$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.dot;
Function _Vector3_postmultiply$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.postmultiply;
Function _Vector3_cross$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.cross;
Function _Vector3_crossInto$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.crossInto;
Function _Vector3_reflect$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.reflect;
Function _Vector3_reflected$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.reflected;
Function _Vector3_applyProjection$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.applyProjection;
Function _Vector3_applyAxisAngle$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.applyAxisAngle;
Function _Vector3_applyQuaternion$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.applyQuaternion;
Function _Vector3_applyMatrix3$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.applyMatrix3;
Function _Vector3_applyMatrix4$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.applyMatrix4;
Function _Vector3_relativeError$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.relativeError;
Function _Vector3_absoluteError$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.absoluteError;
Function _Vector3_add$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.add;
Function _Vector3_addScaled$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.addScaled;
Function _Vector3_sub$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.sub;
Function _Vector3_multiply$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.multiply;
Function _Vector3_divide$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.divide;
Function _Vector3_scale$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.scale;
Function _Vector3_scaled$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.scaled;
Function _Vector3_negate$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.negate;
Function _Vector3_absolute$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.absolute;
Function _Vector3_clamp$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.clamp;
Function _Vector3_clampScalar$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.clampScalar;
Function _Vector3_floor$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.floor;
Function _Vector3_ceil$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.ceil;
Function _Vector3_round$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.round;
Function _Vector3_roundToZero$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.roundToZero;
Function _Vector3_clone$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.clone;
Function _Vector3_copyInto$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.copyInto;
Function _Vector3_copyIntoArray$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.copyIntoArray;
Function _Vector3_copyFromArray$(
  m.Scope scope$,
  Vector3 target$,
) =>
    target$.copyFromArray;
Function Vector4_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Vector4;
Function Vector4_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Vector4;
Function _Vector4_storage$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.storage;
    };
Function _Vector4_hashCode$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.hashCode;
    };
void _Vector4_length_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.length = other$;
    };
Function _Vector4_length$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.length;
    };
Function _Vector4_length2$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.length2;
    };
Function _Vector4_isInfinite$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.isInfinite;
    };
Function _Vector4_isNaN$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.isNaN;
    };
void _Vector4_xy_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.xy = other$;
    };
void _Vector4_xz_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.xz = other$;
    };
void _Vector4_xw_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.xw = other$;
    };
void _Vector4_yx_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.yx = other$;
    };
void _Vector4_yz_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.yz = other$;
    };
void _Vector4_yw_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.yw = other$;
    };
void _Vector4_zx_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.zx = other$;
    };
void _Vector4_zy_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.zy = other$;
    };
void _Vector4_zw_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.zw = other$;
    };
void _Vector4_wx_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.wx = other$;
    };
void _Vector4_wy_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.wy = other$;
    };
void _Vector4_wz_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.wz = other$;
    };
void _Vector4_xyz_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.xyz = other$;
    };
void _Vector4_xyw_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.xyw = other$;
    };
void _Vector4_xzy_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.xzy = other$;
    };
void _Vector4_xzw_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.xzw = other$;
    };
void _Vector4_xwy_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.xwy = other$;
    };
void _Vector4_xwz_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.xwz = other$;
    };
void _Vector4_yxz_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.yxz = other$;
    };
void _Vector4_yxw_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.yxw = other$;
    };
void _Vector4_yzx_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.yzx = other$;
    };
void _Vector4_yzw_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.yzw = other$;
    };
void _Vector4_ywx_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.ywx = other$;
    };
void _Vector4_ywz_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.ywz = other$;
    };
void _Vector4_zxy_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.zxy = other$;
    };
void _Vector4_zxw_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.zxw = other$;
    };
void _Vector4_zyx_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.zyx = other$;
    };
void _Vector4_zyw_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.zyw = other$;
    };
void _Vector4_zwx_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.zwx = other$;
    };
void _Vector4_zwy_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.zwy = other$;
    };
void _Vector4_wxy_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.wxy = other$;
    };
void _Vector4_wxz_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.wxz = other$;
    };
void _Vector4_wyx_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.wyx = other$;
    };
void _Vector4_wyz_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.wyz = other$;
    };
void _Vector4_wzx_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.wzx = other$;
    };
void _Vector4_wzy_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.wzy = other$;
    };
void _Vector4_xyzw_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.xyzw = other$;
    };
void _Vector4_xywz_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.xywz = other$;
    };
void _Vector4_xzyw_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.xzyw = other$;
    };
void _Vector4_xzwy_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.xzwy = other$;
    };
void _Vector4_xwyz_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.xwyz = other$;
    };
void _Vector4_xwzy_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.xwzy = other$;
    };
void _Vector4_yxzw_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.yxzw = other$;
    };
void _Vector4_yxwz_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.yxwz = other$;
    };
void _Vector4_yzxw_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.yzxw = other$;
    };
void _Vector4_yzwx_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.yzwx = other$;
    };
void _Vector4_ywxz_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.ywxz = other$;
    };
void _Vector4_ywzx_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.ywzx = other$;
    };
void _Vector4_zxyw_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.zxyw = other$;
    };
void _Vector4_zxwy_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.zxwy = other$;
    };
void _Vector4_zyxw_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.zyxw = other$;
    };
void _Vector4_zywx_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.zywx = other$;
    };
void _Vector4_zwxy_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.zwxy = other$;
    };
void _Vector4_zwyx_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.zwyx = other$;
    };
void _Vector4_wxyz_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.wxyz = other$;
    };
void _Vector4_wxzy_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.wxzy = other$;
    };
void _Vector4_wyxz_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.wyxz = other$;
    };
void _Vector4_wyzx_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.wyzx = other$;
    };
void _Vector4_wzxy_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.wzxy = other$;
    };
void _Vector4_wzyx_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.wzyx = other$;
    };
void _Vector4_r_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.r = other$;
    };
void _Vector4_g_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.g = other$;
    };
void _Vector4_b_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.b = other$;
    };
void _Vector4_a_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.a = other$;
    };
void _Vector4_s_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.s = other$;
    };
void _Vector4_t_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.t = other$;
    };
void _Vector4_p_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.p = other$;
    };
void _Vector4_q_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.q = other$;
    };
void _Vector4_x_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.x = other$;
    };
void _Vector4_y_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.y = other$;
    };
void _Vector4_z_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.z = other$;
    };
void _Vector4_w_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.w = other$;
    };
void _Vector4_rg_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.rg = other$;
    };
void _Vector4_rb_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.rb = other$;
    };
void _Vector4_ra_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.ra = other$;
    };
void _Vector4_gr_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.gr = other$;
    };
void _Vector4_gb_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.gb = other$;
    };
void _Vector4_ga_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.ga = other$;
    };
void _Vector4_br_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.br = other$;
    };
void _Vector4_bg_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.bg = other$;
    };
void _Vector4_ba_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.ba = other$;
    };
void _Vector4_ar_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.ar = other$;
    };
void _Vector4_ag_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.ag = other$;
    };
void _Vector4_ab_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.ab = other$;
    };
void _Vector4_rgb_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.rgb = other$;
    };
void _Vector4_rga_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.rga = other$;
    };
void _Vector4_rbg_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.rbg = other$;
    };
void _Vector4_rba_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.rba = other$;
    };
void _Vector4_rag_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.rag = other$;
    };
void _Vector4_rab_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.rab = other$;
    };
void _Vector4_grb_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.grb = other$;
    };
void _Vector4_gra_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.gra = other$;
    };
void _Vector4_gbr_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.gbr = other$;
    };
void _Vector4_gba_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.gba = other$;
    };
void _Vector4_gar_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.gar = other$;
    };
void _Vector4_gab_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.gab = other$;
    };
void _Vector4_brg_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.brg = other$;
    };
void _Vector4_bra_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.bra = other$;
    };
void _Vector4_bgr_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.bgr = other$;
    };
void _Vector4_bga_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.bga = other$;
    };
void _Vector4_bar_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.bar = other$;
    };
void _Vector4_bag_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.bag = other$;
    };
void _Vector4_arg_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.arg = other$;
    };
void _Vector4_arb_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.arb = other$;
    };
void _Vector4_agr_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.agr = other$;
    };
void _Vector4_agb_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.agb = other$;
    };
void _Vector4_abr_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.abr = other$;
    };
void _Vector4_abg_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.abg = other$;
    };
void _Vector4_rgba_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.rgba = other$;
    };
void _Vector4_rgab_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.rgab = other$;
    };
void _Vector4_rbga_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.rbga = other$;
    };
void _Vector4_rbag_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.rbag = other$;
    };
void _Vector4_ragb_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.ragb = other$;
    };
void _Vector4_rabg_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.rabg = other$;
    };
void _Vector4_grba_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.grba = other$;
    };
void _Vector4_grab_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.grab = other$;
    };
void _Vector4_gbra_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.gbra = other$;
    };
void _Vector4_gbar_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.gbar = other$;
    };
void _Vector4_garb_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.garb = other$;
    };
void _Vector4_gabr_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.gabr = other$;
    };
void _Vector4_brga_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.brga = other$;
    };
void _Vector4_brag_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.brag = other$;
    };
void _Vector4_bgra_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.bgra = other$;
    };
void _Vector4_bgar_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.bgar = other$;
    };
void _Vector4_barg_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.barg = other$;
    };
void _Vector4_bagr_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.bagr = other$;
    };
void _Vector4_argb_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.argb = other$;
    };
void _Vector4_arbg_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.arbg = other$;
    };
void _Vector4_agrb_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.agrb = other$;
    };
void _Vector4_agbr_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.agbr = other$;
    };
void _Vector4_abrg_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.abrg = other$;
    };
void _Vector4_abgr_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.abgr = other$;
    };
void _Vector4_st_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.st = other$;
    };
void _Vector4_sp_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.sp = other$;
    };
void _Vector4_sq_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.sq = other$;
    };
void _Vector4_ts_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.ts = other$;
    };
void _Vector4_tp_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.tp = other$;
    };
void _Vector4_tq_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.tq = other$;
    };
void _Vector4_ps_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.ps = other$;
    };
void _Vector4_pt_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.pt = other$;
    };
void _Vector4_pq_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.pq = other$;
    };
void _Vector4_qs_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.qs = other$;
    };
void _Vector4_qt_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.qt = other$;
    };
void _Vector4_qp_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.qp = other$;
    };
void _Vector4_stp_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.stp = other$;
    };
void _Vector4_stq_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.stq = other$;
    };
void _Vector4_spt_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.spt = other$;
    };
void _Vector4_spq_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.spq = other$;
    };
void _Vector4_sqt_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.sqt = other$;
    };
void _Vector4_sqp_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.sqp = other$;
    };
void _Vector4_tsp_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.tsp = other$;
    };
void _Vector4_tsq_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.tsq = other$;
    };
void _Vector4_tps_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.tps = other$;
    };
void _Vector4_tpq_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.tpq = other$;
    };
void _Vector4_tqs_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.tqs = other$;
    };
void _Vector4_tqp_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.tqp = other$;
    };
void _Vector4_pst_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.pst = other$;
    };
void _Vector4_psq_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.psq = other$;
    };
void _Vector4_pts_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.pts = other$;
    };
void _Vector4_ptq_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.ptq = other$;
    };
void _Vector4_pqs_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.pqs = other$;
    };
void _Vector4_pqt_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.pqt = other$;
    };
void _Vector4_qst_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.qst = other$;
    };
void _Vector4_qsp_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.qsp = other$;
    };
void _Vector4_qts_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.qts = other$;
    };
void _Vector4_qtp_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.qtp = other$;
    };
void _Vector4_qps_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.qps = other$;
    };
void _Vector4_qpt_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.qpt = other$;
    };
void _Vector4_stpq_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.stpq = other$;
    };
void _Vector4_stqp_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.stqp = other$;
    };
void _Vector4_sptq_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.sptq = other$;
    };
void _Vector4_spqt_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.spqt = other$;
    };
void _Vector4_sqtp_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.sqtp = other$;
    };
void _Vector4_sqpt_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.sqpt = other$;
    };
void _Vector4_tspq_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.tspq = other$;
    };
void _Vector4_tsqp_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.tsqp = other$;
    };
void _Vector4_tpsq_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.tpsq = other$;
    };
void _Vector4_tpqs_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.tpqs = other$;
    };
void _Vector4_tqsp_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.tqsp = other$;
    };
void _Vector4_tqps_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.tqps = other$;
    };
void _Vector4_pstq_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.pstq = other$;
    };
void _Vector4_psqt_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.psqt = other$;
    };
void _Vector4_ptsq_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.ptsq = other$;
    };
void _Vector4_ptqs_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.ptqs = other$;
    };
void _Vector4_pqst_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.pqst = other$;
    };
void _Vector4_pqts_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.pqts = other$;
    };
void _Vector4_qstp_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.qstp = other$;
    };
void _Vector4_qspt_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.qspt = other$;
    };
void _Vector4_qtsp_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.qtsp = other$;
    };
void _Vector4_qtps_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.qtps = other$;
    };
void _Vector4_qpst_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.qpst = other$;
    };
void _Vector4_qpts_set$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (dynamic other$) {
      target$.qpts = other$;
    };
Function _Vector4_xx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xx;
    };
Function _Vector4_xy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xy;
    };
Function _Vector4_xz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xz;
    };
Function _Vector4_xw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xw;
    };
Function _Vector4_yx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yx;
    };
Function _Vector4_yy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yy;
    };
Function _Vector4_yz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yz;
    };
Function _Vector4_yw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yw;
    };
Function _Vector4_zx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zx;
    };
Function _Vector4_zy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zy;
    };
Function _Vector4_zz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zz;
    };
Function _Vector4_zw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zw;
    };
Function _Vector4_wx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wx;
    };
Function _Vector4_wy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wy;
    };
Function _Vector4_wz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wz;
    };
Function _Vector4_ww$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ww;
    };
Function _Vector4_xxx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xxx;
    };
Function _Vector4_xxy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xxy;
    };
Function _Vector4_xxz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xxz;
    };
Function _Vector4_xxw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xxw;
    };
Function _Vector4_xyx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xyx;
    };
Function _Vector4_xyy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xyy;
    };
Function _Vector4_xyz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xyz;
    };
Function _Vector4_xyw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xyw;
    };
Function _Vector4_xzx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xzx;
    };
Function _Vector4_xzy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xzy;
    };
Function _Vector4_xzz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xzz;
    };
Function _Vector4_xzw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xzw;
    };
Function _Vector4_xwx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xwx;
    };
Function _Vector4_xwy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xwy;
    };
Function _Vector4_xwz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xwz;
    };
Function _Vector4_xww$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xww;
    };
Function _Vector4_yxx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yxx;
    };
Function _Vector4_yxy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yxy;
    };
Function _Vector4_yxz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yxz;
    };
Function _Vector4_yxw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yxw;
    };
Function _Vector4_yyx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yyx;
    };
Function _Vector4_yyy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yyy;
    };
Function _Vector4_yyz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yyz;
    };
Function _Vector4_yyw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yyw;
    };
Function _Vector4_yzx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yzx;
    };
Function _Vector4_yzy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yzy;
    };
Function _Vector4_yzz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yzz;
    };
Function _Vector4_yzw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yzw;
    };
Function _Vector4_ywx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ywx;
    };
Function _Vector4_ywy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ywy;
    };
Function _Vector4_ywz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ywz;
    };
Function _Vector4_yww$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yww;
    };
Function _Vector4_zxx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zxx;
    };
Function _Vector4_zxy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zxy;
    };
Function _Vector4_zxz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zxz;
    };
Function _Vector4_zxw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zxw;
    };
Function _Vector4_zyx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zyx;
    };
Function _Vector4_zyy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zyy;
    };
Function _Vector4_zyz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zyz;
    };
Function _Vector4_zyw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zyw;
    };
Function _Vector4_zzx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zzx;
    };
Function _Vector4_zzy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zzy;
    };
Function _Vector4_zzz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zzz;
    };
Function _Vector4_zzw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zzw;
    };
Function _Vector4_zwx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zwx;
    };
Function _Vector4_zwy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zwy;
    };
Function _Vector4_zwz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zwz;
    };
Function _Vector4_zww$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zww;
    };
Function _Vector4_wxx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wxx;
    };
Function _Vector4_wxy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wxy;
    };
Function _Vector4_wxz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wxz;
    };
Function _Vector4_wxw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wxw;
    };
Function _Vector4_wyx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wyx;
    };
Function _Vector4_wyy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wyy;
    };
Function _Vector4_wyz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wyz;
    };
Function _Vector4_wyw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wyw;
    };
Function _Vector4_wzx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wzx;
    };
Function _Vector4_wzy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wzy;
    };
Function _Vector4_wzz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wzz;
    };
Function _Vector4_wzw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wzw;
    };
Function _Vector4_wwx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wwx;
    };
Function _Vector4_wwy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wwy;
    };
Function _Vector4_wwz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wwz;
    };
Function _Vector4_www$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.www;
    };
Function _Vector4_xxxx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xxxx;
    };
Function _Vector4_xxxy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xxxy;
    };
Function _Vector4_xxxz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xxxz;
    };
Function _Vector4_xxxw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xxxw;
    };
Function _Vector4_xxyx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xxyx;
    };
Function _Vector4_xxyy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xxyy;
    };
Function _Vector4_xxyz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xxyz;
    };
Function _Vector4_xxyw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xxyw;
    };
Function _Vector4_xxzx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xxzx;
    };
Function _Vector4_xxzy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xxzy;
    };
Function _Vector4_xxzz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xxzz;
    };
Function _Vector4_xxzw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xxzw;
    };
Function _Vector4_xxwx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xxwx;
    };
Function _Vector4_xxwy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xxwy;
    };
Function _Vector4_xxwz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xxwz;
    };
Function _Vector4_xxww$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xxww;
    };
Function _Vector4_xyxx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xyxx;
    };
Function _Vector4_xyxy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xyxy;
    };
Function _Vector4_xyxz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xyxz;
    };
Function _Vector4_xyxw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xyxw;
    };
Function _Vector4_xyyx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xyyx;
    };
Function _Vector4_xyyy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xyyy;
    };
Function _Vector4_xyyz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xyyz;
    };
Function _Vector4_xyyw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xyyw;
    };
Function _Vector4_xyzx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xyzx;
    };
Function _Vector4_xyzy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xyzy;
    };
Function _Vector4_xyzz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xyzz;
    };
Function _Vector4_xyzw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xyzw;
    };
Function _Vector4_xywx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xywx;
    };
Function _Vector4_xywy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xywy;
    };
Function _Vector4_xywz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xywz;
    };
Function _Vector4_xyww$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xyww;
    };
Function _Vector4_xzxx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xzxx;
    };
Function _Vector4_xzxy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xzxy;
    };
Function _Vector4_xzxz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xzxz;
    };
Function _Vector4_xzxw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xzxw;
    };
Function _Vector4_xzyx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xzyx;
    };
Function _Vector4_xzyy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xzyy;
    };
Function _Vector4_xzyz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xzyz;
    };
Function _Vector4_xzyw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xzyw;
    };
Function _Vector4_xzzx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xzzx;
    };
Function _Vector4_xzzy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xzzy;
    };
Function _Vector4_xzzz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xzzz;
    };
Function _Vector4_xzzw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xzzw;
    };
Function _Vector4_xzwx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xzwx;
    };
Function _Vector4_xzwy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xzwy;
    };
Function _Vector4_xzwz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xzwz;
    };
Function _Vector4_xzww$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xzww;
    };
Function _Vector4_xwxx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xwxx;
    };
Function _Vector4_xwxy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xwxy;
    };
Function _Vector4_xwxz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xwxz;
    };
Function _Vector4_xwxw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xwxw;
    };
Function _Vector4_xwyx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xwyx;
    };
Function _Vector4_xwyy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xwyy;
    };
Function _Vector4_xwyz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xwyz;
    };
Function _Vector4_xwyw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xwyw;
    };
Function _Vector4_xwzx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xwzx;
    };
Function _Vector4_xwzy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xwzy;
    };
Function _Vector4_xwzz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xwzz;
    };
Function _Vector4_xwzw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xwzw;
    };
Function _Vector4_xwwx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xwwx;
    };
Function _Vector4_xwwy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xwwy;
    };
Function _Vector4_xwwz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xwwz;
    };
Function _Vector4_xwww$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.xwww;
    };
Function _Vector4_yxxx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yxxx;
    };
Function _Vector4_yxxy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yxxy;
    };
Function _Vector4_yxxz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yxxz;
    };
Function _Vector4_yxxw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yxxw;
    };
Function _Vector4_yxyx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yxyx;
    };
Function _Vector4_yxyy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yxyy;
    };
Function _Vector4_yxyz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yxyz;
    };
Function _Vector4_yxyw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yxyw;
    };
Function _Vector4_yxzx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yxzx;
    };
Function _Vector4_yxzy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yxzy;
    };
Function _Vector4_yxzz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yxzz;
    };
Function _Vector4_yxzw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yxzw;
    };
Function _Vector4_yxwx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yxwx;
    };
Function _Vector4_yxwy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yxwy;
    };
Function _Vector4_yxwz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yxwz;
    };
Function _Vector4_yxww$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yxww;
    };
Function _Vector4_yyxx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yyxx;
    };
Function _Vector4_yyxy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yyxy;
    };
Function _Vector4_yyxz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yyxz;
    };
Function _Vector4_yyxw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yyxw;
    };
Function _Vector4_yyyx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yyyx;
    };
Function _Vector4_yyyy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yyyy;
    };
Function _Vector4_yyyz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yyyz;
    };
Function _Vector4_yyyw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yyyw;
    };
Function _Vector4_yyzx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yyzx;
    };
Function _Vector4_yyzy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yyzy;
    };
Function _Vector4_yyzz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yyzz;
    };
Function _Vector4_yyzw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yyzw;
    };
Function _Vector4_yywx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yywx;
    };
Function _Vector4_yywy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yywy;
    };
Function _Vector4_yywz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yywz;
    };
Function _Vector4_yyww$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yyww;
    };
Function _Vector4_yzxx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yzxx;
    };
Function _Vector4_yzxy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yzxy;
    };
Function _Vector4_yzxz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yzxz;
    };
Function _Vector4_yzxw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yzxw;
    };
Function _Vector4_yzyx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yzyx;
    };
Function _Vector4_yzyy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yzyy;
    };
Function _Vector4_yzyz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yzyz;
    };
Function _Vector4_yzyw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yzyw;
    };
Function _Vector4_yzzx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yzzx;
    };
Function _Vector4_yzzy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yzzy;
    };
Function _Vector4_yzzz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yzzz;
    };
Function _Vector4_yzzw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yzzw;
    };
Function _Vector4_yzwx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yzwx;
    };
Function _Vector4_yzwy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yzwy;
    };
Function _Vector4_yzwz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yzwz;
    };
Function _Vector4_yzww$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.yzww;
    };
Function _Vector4_ywxx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ywxx;
    };
Function _Vector4_ywxy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ywxy;
    };
Function _Vector4_ywxz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ywxz;
    };
Function _Vector4_ywxw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ywxw;
    };
Function _Vector4_ywyx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ywyx;
    };
Function _Vector4_ywyy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ywyy;
    };
Function _Vector4_ywyz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ywyz;
    };
Function _Vector4_ywyw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ywyw;
    };
Function _Vector4_ywzx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ywzx;
    };
Function _Vector4_ywzy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ywzy;
    };
Function _Vector4_ywzz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ywzz;
    };
Function _Vector4_ywzw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ywzw;
    };
Function _Vector4_ywwx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ywwx;
    };
Function _Vector4_ywwy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ywwy;
    };
Function _Vector4_ywwz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ywwz;
    };
Function _Vector4_ywww$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ywww;
    };
Function _Vector4_zxxx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zxxx;
    };
Function _Vector4_zxxy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zxxy;
    };
Function _Vector4_zxxz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zxxz;
    };
Function _Vector4_zxxw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zxxw;
    };
Function _Vector4_zxyx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zxyx;
    };
Function _Vector4_zxyy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zxyy;
    };
Function _Vector4_zxyz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zxyz;
    };
Function _Vector4_zxyw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zxyw;
    };
Function _Vector4_zxzx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zxzx;
    };
Function _Vector4_zxzy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zxzy;
    };
Function _Vector4_zxzz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zxzz;
    };
Function _Vector4_zxzw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zxzw;
    };
Function _Vector4_zxwx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zxwx;
    };
Function _Vector4_zxwy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zxwy;
    };
Function _Vector4_zxwz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zxwz;
    };
Function _Vector4_zxww$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zxww;
    };
Function _Vector4_zyxx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zyxx;
    };
Function _Vector4_zyxy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zyxy;
    };
Function _Vector4_zyxz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zyxz;
    };
Function _Vector4_zyxw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zyxw;
    };
Function _Vector4_zyyx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zyyx;
    };
Function _Vector4_zyyy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zyyy;
    };
Function _Vector4_zyyz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zyyz;
    };
Function _Vector4_zyyw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zyyw;
    };
Function _Vector4_zyzx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zyzx;
    };
Function _Vector4_zyzy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zyzy;
    };
Function _Vector4_zyzz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zyzz;
    };
Function _Vector4_zyzw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zyzw;
    };
Function _Vector4_zywx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zywx;
    };
Function _Vector4_zywy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zywy;
    };
Function _Vector4_zywz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zywz;
    };
Function _Vector4_zyww$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zyww;
    };
Function _Vector4_zzxx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zzxx;
    };
Function _Vector4_zzxy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zzxy;
    };
Function _Vector4_zzxz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zzxz;
    };
Function _Vector4_zzxw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zzxw;
    };
Function _Vector4_zzyx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zzyx;
    };
Function _Vector4_zzyy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zzyy;
    };
Function _Vector4_zzyz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zzyz;
    };
Function _Vector4_zzyw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zzyw;
    };
Function _Vector4_zzzx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zzzx;
    };
Function _Vector4_zzzy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zzzy;
    };
Function _Vector4_zzzz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zzzz;
    };
Function _Vector4_zzzw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zzzw;
    };
Function _Vector4_zzwx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zzwx;
    };
Function _Vector4_zzwy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zzwy;
    };
Function _Vector4_zzwz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zzwz;
    };
Function _Vector4_zzww$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zzww;
    };
Function _Vector4_zwxx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zwxx;
    };
Function _Vector4_zwxy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zwxy;
    };
Function _Vector4_zwxz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zwxz;
    };
Function _Vector4_zwxw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zwxw;
    };
Function _Vector4_zwyx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zwyx;
    };
Function _Vector4_zwyy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zwyy;
    };
Function _Vector4_zwyz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zwyz;
    };
Function _Vector4_zwyw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zwyw;
    };
Function _Vector4_zwzx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zwzx;
    };
Function _Vector4_zwzy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zwzy;
    };
Function _Vector4_zwzz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zwzz;
    };
Function _Vector4_zwzw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zwzw;
    };
Function _Vector4_zwwx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zwwx;
    };
Function _Vector4_zwwy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zwwy;
    };
Function _Vector4_zwwz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zwwz;
    };
Function _Vector4_zwww$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.zwww;
    };
Function _Vector4_wxxx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wxxx;
    };
Function _Vector4_wxxy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wxxy;
    };
Function _Vector4_wxxz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wxxz;
    };
Function _Vector4_wxxw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wxxw;
    };
Function _Vector4_wxyx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wxyx;
    };
Function _Vector4_wxyy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wxyy;
    };
Function _Vector4_wxyz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wxyz;
    };
Function _Vector4_wxyw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wxyw;
    };
Function _Vector4_wxzx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wxzx;
    };
Function _Vector4_wxzy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wxzy;
    };
Function _Vector4_wxzz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wxzz;
    };
Function _Vector4_wxzw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wxzw;
    };
Function _Vector4_wxwx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wxwx;
    };
Function _Vector4_wxwy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wxwy;
    };
Function _Vector4_wxwz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wxwz;
    };
Function _Vector4_wxww$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wxww;
    };
Function _Vector4_wyxx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wyxx;
    };
Function _Vector4_wyxy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wyxy;
    };
Function _Vector4_wyxz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wyxz;
    };
Function _Vector4_wyxw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wyxw;
    };
Function _Vector4_wyyx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wyyx;
    };
Function _Vector4_wyyy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wyyy;
    };
Function _Vector4_wyyz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wyyz;
    };
Function _Vector4_wyyw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wyyw;
    };
Function _Vector4_wyzx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wyzx;
    };
Function _Vector4_wyzy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wyzy;
    };
Function _Vector4_wyzz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wyzz;
    };
Function _Vector4_wyzw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wyzw;
    };
Function _Vector4_wywx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wywx;
    };
Function _Vector4_wywy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wywy;
    };
Function _Vector4_wywz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wywz;
    };
Function _Vector4_wyww$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wyww;
    };
Function _Vector4_wzxx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wzxx;
    };
Function _Vector4_wzxy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wzxy;
    };
Function _Vector4_wzxz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wzxz;
    };
Function _Vector4_wzxw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wzxw;
    };
Function _Vector4_wzyx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wzyx;
    };
Function _Vector4_wzyy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wzyy;
    };
Function _Vector4_wzyz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wzyz;
    };
Function _Vector4_wzyw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wzyw;
    };
Function _Vector4_wzzx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wzzx;
    };
Function _Vector4_wzzy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wzzy;
    };
Function _Vector4_wzzz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wzzz;
    };
Function _Vector4_wzzw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wzzw;
    };
Function _Vector4_wzwx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wzwx;
    };
Function _Vector4_wzwy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wzwy;
    };
Function _Vector4_wzwz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wzwz;
    };
Function _Vector4_wzww$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wzww;
    };
Function _Vector4_wwxx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wwxx;
    };
Function _Vector4_wwxy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wwxy;
    };
Function _Vector4_wwxz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wwxz;
    };
Function _Vector4_wwxw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wwxw;
    };
Function _Vector4_wwyx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wwyx;
    };
Function _Vector4_wwyy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wwyy;
    };
Function _Vector4_wwyz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wwyz;
    };
Function _Vector4_wwyw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wwyw;
    };
Function _Vector4_wwzx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wwzx;
    };
Function _Vector4_wwzy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wwzy;
    };
Function _Vector4_wwzz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wwzz;
    };
Function _Vector4_wwzw$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wwzw;
    };
Function _Vector4_wwwx$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wwwx;
    };
Function _Vector4_wwwy$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wwwy;
    };
Function _Vector4_wwwz$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wwwz;
    };
Function _Vector4_wwww$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.wwww;
    };
Function _Vector4_r$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.r;
    };
Function _Vector4_g$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.g;
    };
Function _Vector4_b$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.b;
    };
Function _Vector4_a$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.a;
    };
Function _Vector4_s$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.s;
    };
Function _Vector4_t$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.t;
    };
Function _Vector4_p$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.p;
    };
Function _Vector4_q$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.q;
    };
Function _Vector4_x$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.x;
    };
Function _Vector4_y$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.y;
    };
Function _Vector4_z$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.z;
    };
Function _Vector4_w$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.w;
    };
Function _Vector4_rr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rr;
    };
Function _Vector4_rg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rg;
    };
Function _Vector4_rb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rb;
    };
Function _Vector4_ra$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ra;
    };
Function _Vector4_gr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gr;
    };
Function _Vector4_gg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gg;
    };
Function _Vector4_gb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gb;
    };
Function _Vector4_ga$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ga;
    };
Function _Vector4_br$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.br;
    };
Function _Vector4_bg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bg;
    };
Function _Vector4_bb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bb;
    };
Function _Vector4_ba$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ba;
    };
Function _Vector4_ar$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ar;
    };
Function _Vector4_ag$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ag;
    };
Function _Vector4_ab$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ab;
    };
Function _Vector4_aa$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aa;
    };
Function _Vector4_rrr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rrr;
    };
Function _Vector4_rrg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rrg;
    };
Function _Vector4_rrb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rrb;
    };
Function _Vector4_rra$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rra;
    };
Function _Vector4_rgr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rgr;
    };
Function _Vector4_rgg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rgg;
    };
Function _Vector4_rgb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rgb;
    };
Function _Vector4_rga$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rga;
    };
Function _Vector4_rbr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rbr;
    };
Function _Vector4_rbg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rbg;
    };
Function _Vector4_rbb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rbb;
    };
Function _Vector4_rba$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rba;
    };
Function _Vector4_rar$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rar;
    };
Function _Vector4_rag$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rag;
    };
Function _Vector4_rab$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rab;
    };
Function _Vector4_raa$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.raa;
    };
Function _Vector4_grr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.grr;
    };
Function _Vector4_grg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.grg;
    };
Function _Vector4_grb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.grb;
    };
Function _Vector4_gra$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gra;
    };
Function _Vector4_ggr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ggr;
    };
Function _Vector4_ggg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ggg;
    };
Function _Vector4_ggb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ggb;
    };
Function _Vector4_gga$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gga;
    };
Function _Vector4_gbr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gbr;
    };
Function _Vector4_gbg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gbg;
    };
Function _Vector4_gbb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gbb;
    };
Function _Vector4_gba$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gba;
    };
Function _Vector4_gar$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gar;
    };
Function _Vector4_gag$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gag;
    };
Function _Vector4_gab$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gab;
    };
Function _Vector4_gaa$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gaa;
    };
Function _Vector4_brr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.brr;
    };
Function _Vector4_brg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.brg;
    };
Function _Vector4_brb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.brb;
    };
Function _Vector4_bra$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bra;
    };
Function _Vector4_bgr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bgr;
    };
Function _Vector4_bgg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bgg;
    };
Function _Vector4_bgb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bgb;
    };
Function _Vector4_bga$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bga;
    };
Function _Vector4_bbr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bbr;
    };
Function _Vector4_bbg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bbg;
    };
Function _Vector4_bbb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bbb;
    };
Function _Vector4_bba$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bba;
    };
Function _Vector4_bar$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bar;
    };
Function _Vector4_bag$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bag;
    };
Function _Vector4_bab$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bab;
    };
Function _Vector4_baa$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.baa;
    };
Function _Vector4_arr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.arr;
    };
Function _Vector4_arg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.arg;
    };
Function _Vector4_arb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.arb;
    };
Function _Vector4_ara$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ara;
    };
Function _Vector4_agr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.agr;
    };
Function _Vector4_agg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.agg;
    };
Function _Vector4_agb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.agb;
    };
Function _Vector4_aga$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aga;
    };
Function _Vector4_abr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.abr;
    };
Function _Vector4_abg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.abg;
    };
Function _Vector4_abb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.abb;
    };
Function _Vector4_aba$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aba;
    };
Function _Vector4_aar$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aar;
    };
Function _Vector4_aag$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aag;
    };
Function _Vector4_aab$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aab;
    };
Function _Vector4_aaa$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aaa;
    };
Function _Vector4_rrrr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rrrr;
    };
Function _Vector4_rrrg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rrrg;
    };
Function _Vector4_rrrb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rrrb;
    };
Function _Vector4_rrra$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rrra;
    };
Function _Vector4_rrgr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rrgr;
    };
Function _Vector4_rrgg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rrgg;
    };
Function _Vector4_rrgb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rrgb;
    };
Function _Vector4_rrga$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rrga;
    };
Function _Vector4_rrbr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rrbr;
    };
Function _Vector4_rrbg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rrbg;
    };
Function _Vector4_rrbb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rrbb;
    };
Function _Vector4_rrba$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rrba;
    };
Function _Vector4_rrar$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rrar;
    };
Function _Vector4_rrag$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rrag;
    };
Function _Vector4_rrab$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rrab;
    };
Function _Vector4_rraa$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rraa;
    };
Function _Vector4_rgrr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rgrr;
    };
Function _Vector4_rgrg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rgrg;
    };
Function _Vector4_rgrb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rgrb;
    };
Function _Vector4_rgra$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rgra;
    };
Function _Vector4_rggr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rggr;
    };
Function _Vector4_rggg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rggg;
    };
Function _Vector4_rggb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rggb;
    };
Function _Vector4_rgga$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rgga;
    };
Function _Vector4_rgbr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rgbr;
    };
Function _Vector4_rgbg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rgbg;
    };
Function _Vector4_rgbb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rgbb;
    };
Function _Vector4_rgba$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rgba;
    };
Function _Vector4_rgar$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rgar;
    };
Function _Vector4_rgag$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rgag;
    };
Function _Vector4_rgab$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rgab;
    };
Function _Vector4_rgaa$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rgaa;
    };
Function _Vector4_rbrr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rbrr;
    };
Function _Vector4_rbrg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rbrg;
    };
Function _Vector4_rbrb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rbrb;
    };
Function _Vector4_rbra$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rbra;
    };
Function _Vector4_rbgr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rbgr;
    };
Function _Vector4_rbgg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rbgg;
    };
Function _Vector4_rbgb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rbgb;
    };
Function _Vector4_rbga$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rbga;
    };
Function _Vector4_rbbr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rbbr;
    };
Function _Vector4_rbbg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rbbg;
    };
Function _Vector4_rbbb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rbbb;
    };
Function _Vector4_rbba$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rbba;
    };
Function _Vector4_rbar$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rbar;
    };
Function _Vector4_rbag$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rbag;
    };
Function _Vector4_rbab$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rbab;
    };
Function _Vector4_rbaa$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rbaa;
    };
Function _Vector4_rarr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rarr;
    };
Function _Vector4_rarg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rarg;
    };
Function _Vector4_rarb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rarb;
    };
Function _Vector4_rara$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rara;
    };
Function _Vector4_ragr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ragr;
    };
Function _Vector4_ragg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ragg;
    };
Function _Vector4_ragb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ragb;
    };
Function _Vector4_raga$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.raga;
    };
Function _Vector4_rabr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rabr;
    };
Function _Vector4_rabg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rabg;
    };
Function _Vector4_rabb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.rabb;
    };
Function _Vector4_raba$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.raba;
    };
Function _Vector4_raar$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.raar;
    };
Function _Vector4_raag$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.raag;
    };
Function _Vector4_raab$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.raab;
    };
Function _Vector4_raaa$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.raaa;
    };
Function _Vector4_grrr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.grrr;
    };
Function _Vector4_grrg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.grrg;
    };
Function _Vector4_grrb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.grrb;
    };
Function _Vector4_grra$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.grra;
    };
Function _Vector4_grgr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.grgr;
    };
Function _Vector4_grgg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.grgg;
    };
Function _Vector4_grgb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.grgb;
    };
Function _Vector4_grga$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.grga;
    };
Function _Vector4_grbr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.grbr;
    };
Function _Vector4_grbg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.grbg;
    };
Function _Vector4_grbb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.grbb;
    };
Function _Vector4_grba$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.grba;
    };
Function _Vector4_grar$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.grar;
    };
Function _Vector4_grag$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.grag;
    };
Function _Vector4_grab$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.grab;
    };
Function _Vector4_graa$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.graa;
    };
Function _Vector4_ggrr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ggrr;
    };
Function _Vector4_ggrg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ggrg;
    };
Function _Vector4_ggrb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ggrb;
    };
Function _Vector4_ggra$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ggra;
    };
Function _Vector4_gggr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gggr;
    };
Function _Vector4_gggg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gggg;
    };
Function _Vector4_gggb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gggb;
    };
Function _Vector4_ggga$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ggga;
    };
Function _Vector4_ggbr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ggbr;
    };
Function _Vector4_ggbg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ggbg;
    };
Function _Vector4_ggbb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ggbb;
    };
Function _Vector4_ggba$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ggba;
    };
Function _Vector4_ggar$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ggar;
    };
Function _Vector4_ggag$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ggag;
    };
Function _Vector4_ggab$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ggab;
    };
Function _Vector4_ggaa$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ggaa;
    };
Function _Vector4_gbrr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gbrr;
    };
Function _Vector4_gbrg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gbrg;
    };
Function _Vector4_gbrb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gbrb;
    };
Function _Vector4_gbra$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gbra;
    };
Function _Vector4_gbgr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gbgr;
    };
Function _Vector4_gbgg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gbgg;
    };
Function _Vector4_gbgb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gbgb;
    };
Function _Vector4_gbga$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gbga;
    };
Function _Vector4_gbbr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gbbr;
    };
Function _Vector4_gbbg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gbbg;
    };
Function _Vector4_gbbb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gbbb;
    };
Function _Vector4_gbba$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gbba;
    };
Function _Vector4_gbar$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gbar;
    };
Function _Vector4_gbag$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gbag;
    };
Function _Vector4_gbab$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gbab;
    };
Function _Vector4_gbaa$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gbaa;
    };
Function _Vector4_garr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.garr;
    };
Function _Vector4_garg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.garg;
    };
Function _Vector4_garb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.garb;
    };
Function _Vector4_gara$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gara;
    };
Function _Vector4_gagr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gagr;
    };
Function _Vector4_gagg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gagg;
    };
Function _Vector4_gagb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gagb;
    };
Function _Vector4_gaga$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gaga;
    };
Function _Vector4_gabr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gabr;
    };
Function _Vector4_gabg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gabg;
    };
Function _Vector4_gabb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gabb;
    };
Function _Vector4_gaba$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gaba;
    };
Function _Vector4_gaar$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gaar;
    };
Function _Vector4_gaag$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gaag;
    };
Function _Vector4_gaab$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gaab;
    };
Function _Vector4_gaaa$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.gaaa;
    };
Function _Vector4_brrr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.brrr;
    };
Function _Vector4_brrg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.brrg;
    };
Function _Vector4_brrb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.brrb;
    };
Function _Vector4_brra$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.brra;
    };
Function _Vector4_brgr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.brgr;
    };
Function _Vector4_brgg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.brgg;
    };
Function _Vector4_brgb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.brgb;
    };
Function _Vector4_brga$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.brga;
    };
Function _Vector4_brbr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.brbr;
    };
Function _Vector4_brbg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.brbg;
    };
Function _Vector4_brbb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.brbb;
    };
Function _Vector4_brba$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.brba;
    };
Function _Vector4_brar$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.brar;
    };
Function _Vector4_brag$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.brag;
    };
Function _Vector4_brab$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.brab;
    };
Function _Vector4_braa$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.braa;
    };
Function _Vector4_bgrr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bgrr;
    };
Function _Vector4_bgrg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bgrg;
    };
Function _Vector4_bgrb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bgrb;
    };
Function _Vector4_bgra$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bgra;
    };
Function _Vector4_bggr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bggr;
    };
Function _Vector4_bggg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bggg;
    };
Function _Vector4_bggb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bggb;
    };
Function _Vector4_bgga$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bgga;
    };
Function _Vector4_bgbr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bgbr;
    };
Function _Vector4_bgbg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bgbg;
    };
Function _Vector4_bgbb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bgbb;
    };
Function _Vector4_bgba$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bgba;
    };
Function _Vector4_bgar$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bgar;
    };
Function _Vector4_bgag$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bgag;
    };
Function _Vector4_bgab$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bgab;
    };
Function _Vector4_bgaa$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bgaa;
    };
Function _Vector4_bbrr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bbrr;
    };
Function _Vector4_bbrg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bbrg;
    };
Function _Vector4_bbrb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bbrb;
    };
Function _Vector4_bbra$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bbra;
    };
Function _Vector4_bbgr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bbgr;
    };
Function _Vector4_bbgg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bbgg;
    };
Function _Vector4_bbgb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bbgb;
    };
Function _Vector4_bbga$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bbga;
    };
Function _Vector4_bbbr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bbbr;
    };
Function _Vector4_bbbg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bbbg;
    };
Function _Vector4_bbbb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bbbb;
    };
Function _Vector4_bbba$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bbba;
    };
Function _Vector4_bbar$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bbar;
    };
Function _Vector4_bbag$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bbag;
    };
Function _Vector4_bbab$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bbab;
    };
Function _Vector4_bbaa$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bbaa;
    };
Function _Vector4_barr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.barr;
    };
Function _Vector4_barg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.barg;
    };
Function _Vector4_barb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.barb;
    };
Function _Vector4_bara$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bara;
    };
Function _Vector4_bagr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bagr;
    };
Function _Vector4_bagg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bagg;
    };
Function _Vector4_bagb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.bagb;
    };
Function _Vector4_baga$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.baga;
    };
Function _Vector4_babr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.babr;
    };
Function _Vector4_babg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.babg;
    };
Function _Vector4_babb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.babb;
    };
Function _Vector4_baba$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.baba;
    };
Function _Vector4_baar$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.baar;
    };
Function _Vector4_baag$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.baag;
    };
Function _Vector4_baab$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.baab;
    };
Function _Vector4_baaa$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.baaa;
    };
Function _Vector4_arrr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.arrr;
    };
Function _Vector4_arrg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.arrg;
    };
Function _Vector4_arrb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.arrb;
    };
Function _Vector4_arra$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.arra;
    };
Function _Vector4_argr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.argr;
    };
Function _Vector4_argg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.argg;
    };
Function _Vector4_argb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.argb;
    };
Function _Vector4_arga$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.arga;
    };
Function _Vector4_arbr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.arbr;
    };
Function _Vector4_arbg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.arbg;
    };
Function _Vector4_arbb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.arbb;
    };
Function _Vector4_arba$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.arba;
    };
Function _Vector4_arar$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.arar;
    };
Function _Vector4_arag$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.arag;
    };
Function _Vector4_arab$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.arab;
    };
Function _Vector4_araa$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.araa;
    };
Function _Vector4_agrr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.agrr;
    };
Function _Vector4_agrg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.agrg;
    };
Function _Vector4_agrb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.agrb;
    };
Function _Vector4_agra$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.agra;
    };
Function _Vector4_aggr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aggr;
    };
Function _Vector4_aggg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aggg;
    };
Function _Vector4_aggb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aggb;
    };
Function _Vector4_agga$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.agga;
    };
Function _Vector4_agbr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.agbr;
    };
Function _Vector4_agbg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.agbg;
    };
Function _Vector4_agbb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.agbb;
    };
Function _Vector4_agba$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.agba;
    };
Function _Vector4_agar$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.agar;
    };
Function _Vector4_agag$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.agag;
    };
Function _Vector4_agab$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.agab;
    };
Function _Vector4_agaa$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.agaa;
    };
Function _Vector4_abrr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.abrr;
    };
Function _Vector4_abrg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.abrg;
    };
Function _Vector4_abrb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.abrb;
    };
Function _Vector4_abra$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.abra;
    };
Function _Vector4_abgr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.abgr;
    };
Function _Vector4_abgg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.abgg;
    };
Function _Vector4_abgb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.abgb;
    };
Function _Vector4_abga$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.abga;
    };
Function _Vector4_abbr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.abbr;
    };
Function _Vector4_abbg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.abbg;
    };
Function _Vector4_abbb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.abbb;
    };
Function _Vector4_abba$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.abba;
    };
Function _Vector4_abar$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.abar;
    };
Function _Vector4_abag$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.abag;
    };
Function _Vector4_abab$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.abab;
    };
Function _Vector4_abaa$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.abaa;
    };
Function _Vector4_aarr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aarr;
    };
Function _Vector4_aarg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aarg;
    };
Function _Vector4_aarb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aarb;
    };
Function _Vector4_aara$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aara;
    };
Function _Vector4_aagr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aagr;
    };
Function _Vector4_aagg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aagg;
    };
Function _Vector4_aagb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aagb;
    };
Function _Vector4_aaga$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aaga;
    };
Function _Vector4_aabr$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aabr;
    };
Function _Vector4_aabg$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aabg;
    };
Function _Vector4_aabb$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aabb;
    };
Function _Vector4_aaba$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aaba;
    };
Function _Vector4_aaar$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aaar;
    };
Function _Vector4_aaag$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aaag;
    };
Function _Vector4_aaab$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aaab;
    };
Function _Vector4_aaaa$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.aaaa;
    };
Function _Vector4_ss$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ss;
    };
Function _Vector4_st$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.st;
    };
Function _Vector4_sp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sp;
    };
Function _Vector4_sq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sq;
    };
Function _Vector4_ts$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ts;
    };
Function _Vector4_tt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tt;
    };
Function _Vector4_tp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tp;
    };
Function _Vector4_tq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tq;
    };
Function _Vector4_ps$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ps;
    };
Function _Vector4_pt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pt;
    };
Function _Vector4_pp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pp;
    };
Function _Vector4_pq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pq;
    };
Function _Vector4_qs$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qs;
    };
Function _Vector4_qt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qt;
    };
Function _Vector4_qp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qp;
    };
Function _Vector4_qq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qq;
    };
Function _Vector4_sss$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sss;
    };
Function _Vector4_sst$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sst;
    };
Function _Vector4_ssp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ssp;
    };
Function _Vector4_ssq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ssq;
    };
Function _Vector4_sts$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sts;
    };
Function _Vector4_stt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.stt;
    };
Function _Vector4_stp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.stp;
    };
Function _Vector4_stq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.stq;
    };
Function _Vector4_sps$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sps;
    };
Function _Vector4_spt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.spt;
    };
Function _Vector4_spp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.spp;
    };
Function _Vector4_spq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.spq;
    };
Function _Vector4_sqs$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sqs;
    };
Function _Vector4_sqt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sqt;
    };
Function _Vector4_sqp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sqp;
    };
Function _Vector4_sqq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sqq;
    };
Function _Vector4_tss$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tss;
    };
Function _Vector4_tst$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tst;
    };
Function _Vector4_tsp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tsp;
    };
Function _Vector4_tsq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tsq;
    };
Function _Vector4_tts$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tts;
    };
Function _Vector4_ttt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ttt;
    };
Function _Vector4_ttp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ttp;
    };
Function _Vector4_ttq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ttq;
    };
Function _Vector4_tps$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tps;
    };
Function _Vector4_tpt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tpt;
    };
Function _Vector4_tpp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tpp;
    };
Function _Vector4_tpq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tpq;
    };
Function _Vector4_tqs$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tqs;
    };
Function _Vector4_tqt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tqt;
    };
Function _Vector4_tqp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tqp;
    };
Function _Vector4_tqq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tqq;
    };
Function _Vector4_pss$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pss;
    };
Function _Vector4_pst$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pst;
    };
Function _Vector4_psp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.psp;
    };
Function _Vector4_psq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.psq;
    };
Function _Vector4_pts$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pts;
    };
Function _Vector4_ptt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ptt;
    };
Function _Vector4_ptp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ptp;
    };
Function _Vector4_ptq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ptq;
    };
Function _Vector4_pps$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pps;
    };
Function _Vector4_ppt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ppt;
    };
Function _Vector4_ppp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ppp;
    };
Function _Vector4_ppq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ppq;
    };
Function _Vector4_pqs$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pqs;
    };
Function _Vector4_pqt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pqt;
    };
Function _Vector4_pqp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pqp;
    };
Function _Vector4_pqq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pqq;
    };
Function _Vector4_qss$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qss;
    };
Function _Vector4_qst$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qst;
    };
Function _Vector4_qsp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qsp;
    };
Function _Vector4_qsq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qsq;
    };
Function _Vector4_qts$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qts;
    };
Function _Vector4_qtt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qtt;
    };
Function _Vector4_qtp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qtp;
    };
Function _Vector4_qtq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qtq;
    };
Function _Vector4_qps$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qps;
    };
Function _Vector4_qpt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qpt;
    };
Function _Vector4_qpp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qpp;
    };
Function _Vector4_qpq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qpq;
    };
Function _Vector4_qqs$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qqs;
    };
Function _Vector4_qqt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qqt;
    };
Function _Vector4_qqp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qqp;
    };
Function _Vector4_qqq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qqq;
    };
Function _Vector4_ssss$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ssss;
    };
Function _Vector4_ssst$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ssst;
    };
Function _Vector4_sssp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sssp;
    };
Function _Vector4_sssq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sssq;
    };
Function _Vector4_ssts$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ssts;
    };
Function _Vector4_sstt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sstt;
    };
Function _Vector4_sstp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sstp;
    };
Function _Vector4_sstq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sstq;
    };
Function _Vector4_ssps$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ssps;
    };
Function _Vector4_sspt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sspt;
    };
Function _Vector4_sspp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sspp;
    };
Function _Vector4_sspq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sspq;
    };
Function _Vector4_ssqs$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ssqs;
    };
Function _Vector4_ssqt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ssqt;
    };
Function _Vector4_ssqp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ssqp;
    };
Function _Vector4_ssqq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ssqq;
    };
Function _Vector4_stss$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.stss;
    };
Function _Vector4_stst$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.stst;
    };
Function _Vector4_stsp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.stsp;
    };
Function _Vector4_stsq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.stsq;
    };
Function _Vector4_stts$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.stts;
    };
Function _Vector4_sttt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sttt;
    };
Function _Vector4_sttp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sttp;
    };
Function _Vector4_sttq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sttq;
    };
Function _Vector4_stps$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.stps;
    };
Function _Vector4_stpt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.stpt;
    };
Function _Vector4_stpp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.stpp;
    };
Function _Vector4_stpq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.stpq;
    };
Function _Vector4_stqs$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.stqs;
    };
Function _Vector4_stqt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.stqt;
    };
Function _Vector4_stqp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.stqp;
    };
Function _Vector4_stqq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.stqq;
    };
Function _Vector4_spss$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.spss;
    };
Function _Vector4_spst$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.spst;
    };
Function _Vector4_spsp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.spsp;
    };
Function _Vector4_spsq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.spsq;
    };
Function _Vector4_spts$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.spts;
    };
Function _Vector4_sptt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sptt;
    };
Function _Vector4_sptp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sptp;
    };
Function _Vector4_sptq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sptq;
    };
Function _Vector4_spps$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.spps;
    };
Function _Vector4_sppt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sppt;
    };
Function _Vector4_sppp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sppp;
    };
Function _Vector4_sppq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sppq;
    };
Function _Vector4_spqs$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.spqs;
    };
Function _Vector4_spqt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.spqt;
    };
Function _Vector4_spqp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.spqp;
    };
Function _Vector4_spqq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.spqq;
    };
Function _Vector4_sqss$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sqss;
    };
Function _Vector4_sqst$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sqst;
    };
Function _Vector4_sqsp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sqsp;
    };
Function _Vector4_sqsq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sqsq;
    };
Function _Vector4_sqts$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sqts;
    };
Function _Vector4_sqtt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sqtt;
    };
Function _Vector4_sqtp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sqtp;
    };
Function _Vector4_sqtq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sqtq;
    };
Function _Vector4_sqps$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sqps;
    };
Function _Vector4_sqpt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sqpt;
    };
Function _Vector4_sqpp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sqpp;
    };
Function _Vector4_sqpq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sqpq;
    };
Function _Vector4_sqqs$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sqqs;
    };
Function _Vector4_sqqt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sqqt;
    };
Function _Vector4_sqqp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sqqp;
    };
Function _Vector4_sqqq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.sqqq;
    };
Function _Vector4_tsss$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tsss;
    };
Function _Vector4_tsst$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tsst;
    };
Function _Vector4_tssp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tssp;
    };
Function _Vector4_tssq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tssq;
    };
Function _Vector4_tsts$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tsts;
    };
Function _Vector4_tstt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tstt;
    };
Function _Vector4_tstp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tstp;
    };
Function _Vector4_tstq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tstq;
    };
Function _Vector4_tsps$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tsps;
    };
Function _Vector4_tspt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tspt;
    };
Function _Vector4_tspp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tspp;
    };
Function _Vector4_tspq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tspq;
    };
Function _Vector4_tsqs$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tsqs;
    };
Function _Vector4_tsqt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tsqt;
    };
Function _Vector4_tsqp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tsqp;
    };
Function _Vector4_tsqq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tsqq;
    };
Function _Vector4_ttss$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ttss;
    };
Function _Vector4_ttst$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ttst;
    };
Function _Vector4_ttsp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ttsp;
    };
Function _Vector4_ttsq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ttsq;
    };
Function _Vector4_ttts$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ttts;
    };
Function _Vector4_tttt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tttt;
    };
Function _Vector4_tttp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tttp;
    };
Function _Vector4_tttq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tttq;
    };
Function _Vector4_ttps$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ttps;
    };
Function _Vector4_ttpt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ttpt;
    };
Function _Vector4_ttpp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ttpp;
    };
Function _Vector4_ttpq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ttpq;
    };
Function _Vector4_ttqs$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ttqs;
    };
Function _Vector4_ttqt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ttqt;
    };
Function _Vector4_ttqp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ttqp;
    };
Function _Vector4_ttqq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ttqq;
    };
Function _Vector4_tpss$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tpss;
    };
Function _Vector4_tpst$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tpst;
    };
Function _Vector4_tpsp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tpsp;
    };
Function _Vector4_tpsq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tpsq;
    };
Function _Vector4_tpts$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tpts;
    };
Function _Vector4_tptt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tptt;
    };
Function _Vector4_tptp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tptp;
    };
Function _Vector4_tptq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tptq;
    };
Function _Vector4_tpps$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tpps;
    };
Function _Vector4_tppt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tppt;
    };
Function _Vector4_tppp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tppp;
    };
Function _Vector4_tppq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tppq;
    };
Function _Vector4_tpqs$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tpqs;
    };
Function _Vector4_tpqt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tpqt;
    };
Function _Vector4_tpqp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tpqp;
    };
Function _Vector4_tpqq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tpqq;
    };
Function _Vector4_tqss$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tqss;
    };
Function _Vector4_tqst$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tqst;
    };
Function _Vector4_tqsp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tqsp;
    };
Function _Vector4_tqsq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tqsq;
    };
Function _Vector4_tqts$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tqts;
    };
Function _Vector4_tqtt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tqtt;
    };
Function _Vector4_tqtp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tqtp;
    };
Function _Vector4_tqtq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tqtq;
    };
Function _Vector4_tqps$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tqps;
    };
Function _Vector4_tqpt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tqpt;
    };
Function _Vector4_tqpp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tqpp;
    };
Function _Vector4_tqpq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tqpq;
    };
Function _Vector4_tqqs$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tqqs;
    };
Function _Vector4_tqqt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tqqt;
    };
Function _Vector4_tqqp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tqqp;
    };
Function _Vector4_tqqq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.tqqq;
    };
Function _Vector4_psss$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.psss;
    };
Function _Vector4_psst$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.psst;
    };
Function _Vector4_pssp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pssp;
    };
Function _Vector4_pssq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pssq;
    };
Function _Vector4_psts$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.psts;
    };
Function _Vector4_pstt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pstt;
    };
Function _Vector4_pstp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pstp;
    };
Function _Vector4_pstq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pstq;
    };
Function _Vector4_psps$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.psps;
    };
Function _Vector4_pspt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pspt;
    };
Function _Vector4_pspp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pspp;
    };
Function _Vector4_pspq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pspq;
    };
Function _Vector4_psqs$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.psqs;
    };
Function _Vector4_psqt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.psqt;
    };
Function _Vector4_psqp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.psqp;
    };
Function _Vector4_psqq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.psqq;
    };
Function _Vector4_ptss$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ptss;
    };
Function _Vector4_ptst$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ptst;
    };
Function _Vector4_ptsp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ptsp;
    };
Function _Vector4_ptsq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ptsq;
    };
Function _Vector4_ptts$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ptts;
    };
Function _Vector4_pttt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pttt;
    };
Function _Vector4_pttp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pttp;
    };
Function _Vector4_pttq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pttq;
    };
Function _Vector4_ptps$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ptps;
    };
Function _Vector4_ptpt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ptpt;
    };
Function _Vector4_ptpp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ptpp;
    };
Function _Vector4_ptpq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ptpq;
    };
Function _Vector4_ptqs$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ptqs;
    };
Function _Vector4_ptqt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ptqt;
    };
Function _Vector4_ptqp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ptqp;
    };
Function _Vector4_ptqq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ptqq;
    };
Function _Vector4_ppss$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ppss;
    };
Function _Vector4_ppst$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ppst;
    };
Function _Vector4_ppsp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ppsp;
    };
Function _Vector4_ppsq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ppsq;
    };
Function _Vector4_ppts$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ppts;
    };
Function _Vector4_pptt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pptt;
    };
Function _Vector4_pptp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pptp;
    };
Function _Vector4_pptq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pptq;
    };
Function _Vector4_ppps$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ppps;
    };
Function _Vector4_pppt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pppt;
    };
Function _Vector4_pppp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pppp;
    };
Function _Vector4_pppq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pppq;
    };
Function _Vector4_ppqs$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ppqs;
    };
Function _Vector4_ppqt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ppqt;
    };
Function _Vector4_ppqp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ppqp;
    };
Function _Vector4_ppqq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.ppqq;
    };
Function _Vector4_pqss$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pqss;
    };
Function _Vector4_pqst$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pqst;
    };
Function _Vector4_pqsp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pqsp;
    };
Function _Vector4_pqsq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pqsq;
    };
Function _Vector4_pqts$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pqts;
    };
Function _Vector4_pqtt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pqtt;
    };
Function _Vector4_pqtp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pqtp;
    };
Function _Vector4_pqtq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pqtq;
    };
Function _Vector4_pqps$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pqps;
    };
Function _Vector4_pqpt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pqpt;
    };
Function _Vector4_pqpp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pqpp;
    };
Function _Vector4_pqpq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pqpq;
    };
Function _Vector4_pqqs$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pqqs;
    };
Function _Vector4_pqqt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pqqt;
    };
Function _Vector4_pqqp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pqqp;
    };
Function _Vector4_pqqq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.pqqq;
    };
Function _Vector4_qsss$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qsss;
    };
Function _Vector4_qsst$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qsst;
    };
Function _Vector4_qssp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qssp;
    };
Function _Vector4_qssq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qssq;
    };
Function _Vector4_qsts$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qsts;
    };
Function _Vector4_qstt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qstt;
    };
Function _Vector4_qstp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qstp;
    };
Function _Vector4_qstq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qstq;
    };
Function _Vector4_qsps$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qsps;
    };
Function _Vector4_qspt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qspt;
    };
Function _Vector4_qspp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qspp;
    };
Function _Vector4_qspq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qspq;
    };
Function _Vector4_qsqs$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qsqs;
    };
Function _Vector4_qsqt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qsqt;
    };
Function _Vector4_qsqp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qsqp;
    };
Function _Vector4_qsqq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qsqq;
    };
Function _Vector4_qtss$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qtss;
    };
Function _Vector4_qtst$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qtst;
    };
Function _Vector4_qtsp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qtsp;
    };
Function _Vector4_qtsq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qtsq;
    };
Function _Vector4_qtts$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qtts;
    };
Function _Vector4_qttt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qttt;
    };
Function _Vector4_qttp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qttp;
    };
Function _Vector4_qttq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qttq;
    };
Function _Vector4_qtps$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qtps;
    };
Function _Vector4_qtpt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qtpt;
    };
Function _Vector4_qtpp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qtpp;
    };
Function _Vector4_qtpq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qtpq;
    };
Function _Vector4_qtqs$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qtqs;
    };
Function _Vector4_qtqt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qtqt;
    };
Function _Vector4_qtqp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qtqp;
    };
Function _Vector4_qtqq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qtqq;
    };
Function _Vector4_qpss$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qpss;
    };
Function _Vector4_qpst$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qpst;
    };
Function _Vector4_qpsp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qpsp;
    };
Function _Vector4_qpsq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qpsq;
    };
Function _Vector4_qpts$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qpts;
    };
Function _Vector4_qptt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qptt;
    };
Function _Vector4_qptp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qptp;
    };
Function _Vector4_qptq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qptq;
    };
Function _Vector4_qpps$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qpps;
    };
Function _Vector4_qppt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qppt;
    };
Function _Vector4_qppp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qppp;
    };
Function _Vector4_qppq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qppq;
    };
Function _Vector4_qpqs$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qpqs;
    };
Function _Vector4_qpqt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qpqt;
    };
Function _Vector4_qpqp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qpqp;
    };
Function _Vector4_qpqq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qpqq;
    };
Function _Vector4_qqss$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qqss;
    };
Function _Vector4_qqst$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qqst;
    };
Function _Vector4_qqsp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qqsp;
    };
Function _Vector4_qqsq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qqsq;
    };
Function _Vector4_qqts$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qqts;
    };
Function _Vector4_qqtt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qqtt;
    };
Function _Vector4_qqtp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qqtp;
    };
Function _Vector4_qqtq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qqtq;
    };
Function _Vector4_qqps$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qqps;
    };
Function _Vector4_qqpt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qqpt;
    };
Function _Vector4_qqpp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qqpp;
    };
Function _Vector4_qqpq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qqpq;
    };
Function _Vector4_qqqs$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qqqs;
    };
Function _Vector4_qqqt$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qqqt;
    };
Function _Vector4_qqqp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qqqp;
    };
Function _Vector4_qqqq$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () {
      return target$.qqqq;
    };
Function _Vector4__$(m.Scope scope$) => (
      double x,
      double y,
      double z,
      double w,
    ) {
      return Vector4(
        x,
        y,
        z,
        w,
      );
    };
Function _Vector4_array_$(m.Scope scope$) => Vector4.array;
Function _Vector4_zero_$(m.Scope scope$) => Vector4.zero;
Function _Vector4_identity_$(m.Scope scope$) => Vector4.identity;
Function _Vector4_all_$(m.Scope scope$) => Vector4.all;
Function _Vector4_copy_$(m.Scope scope$) => Vector4.copy;
Function _Vector4_fromFloat64List_$(m.Scope scope$) => Vector4.fromFloat64List;
Function _Vector4_fromBuffer_$(m.Scope scope$) => Vector4.fromBuffer;
Function _Vector4_random_$(m.Scope scope$) => Vector4.random;
Function _Vector4_min$(m.Scope scope$) => Vector4.min;
Function _Vector4_max$(m.Scope scope$) => Vector4.max;
Function _Vector4_mix$(m.Scope scope$) => Vector4.mix;
Function _Vector4_setValues$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.setValues;
Function _Vector4_setZero$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.setZero;
Function _Vector4_setIdentity$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.setIdentity;
Function _Vector4_setFrom$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.setFrom;
Function _Vector4_splat$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.splat;
Function _Vector4_toString$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.toString;
Function _Vector4_eq$$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (Object other$) => target$ == other$;
Function _Vector4_unary_minus$$(
  m.Scope scope$,
  Vector4 target$,
) =>
    () => -target$;
Function _Vector4_minus$$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (Vector4 other$) => target$ - other$;
Function _Vector4_plus$$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (Vector4 other$) => target$ + other$;
Function _Vector4_over$$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (double other$) => target$ / other$;
Function _Vector4_times$$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (double other$) => target$ * other$;
Function _Vector4_$index$$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (int index) => target$[index];
Function _Vector4_$index_set$$(
  m.Scope scope$,
  Vector4 target$,
) =>
    (
      int index,
      double other,
    ) =>
        target$[index] = other;
Function _Vector4_normalize$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.normalize;
Function _Vector4_normalized$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.normalized;
Function _Vector4_normalizeInto$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.normalizeInto;
Function _Vector4_distanceTo$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.distanceTo;
Function _Vector4_distanceToSquared$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.distanceToSquared;
Function _Vector4_dot$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.dot;
Function _Vector4_applyMatrix4$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.applyMatrix4;
Function _Vector4_relativeError$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.relativeError;
Function _Vector4_absoluteError$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.absoluteError;
Function _Vector4_add$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.add;
Function _Vector4_addScaled$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.addScaled;
Function _Vector4_sub$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.sub;
Function _Vector4_multiply$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.multiply;
Function _Vector4_div$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.div;
Function _Vector4_scale$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.scale;
Function _Vector4_scaled$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.scaled;
Function _Vector4_negate$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.negate;
Function _Vector4_absolute$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.absolute;
Function _Vector4_clamp$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.clamp;
Function _Vector4_clampScalar$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.clampScalar;
Function _Vector4_floor$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.floor;
Function _Vector4_ceil$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.ceil;
Function _Vector4_round$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.round;
Function _Vector4_roundToZero$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.roundToZero;
Function _Vector4_clone$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.clone;
Function _Vector4_copyInto$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.copyInto;
Function _Vector4_copyIntoArray$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.copyIntoArray;
Function _Vector4_copyFromArray$(
  m.Scope scope$,
  Vector4 target$,
) =>
    target$.copyFromArray;
