// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter_example_gallery/pages/splash.dart';
import 'dart:math';
import 'package:dual_screen/dual_screen.dart';
import 'package:flutter/material.dart';
import 'package:flutter_example_gallery/gen_l10n/gallery_localizations.dart';
import 'package:flutter_example_gallery/constants.dart';
import 'package:flutter_example_gallery/layout/adaptive.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter_example_gallery/pages/splash.dart',
  {
    'homePeekDesktop': _homePeekDesktop$,
    'homePeekMobile': _homePeekMobile$,
    'ToggleSplashNotification.': _ToggleSplashNotification__$,
    'SplashPageAnimation.': _SplashPageAnimation__$,
    'SplashPageAnimation.of': _SplashPageAnimation_of$,
    'SplashPage.': _SplashPage__$,
  },
  {},
  {
    'ToggleSplashNotification': m.ClassMirror(
      'ToggleSplashNotification',
      {
        '#as': ToggleSplashNotification_as$,
        '#is': ToggleSplashNotification_is$,
      },
      {},
    ),
    'SplashPageAnimation': m.ClassMirror(
      'SplashPageAnimation',
      {
        '#as': SplashPageAnimation_as$,
        '#is': SplashPageAnimation_is$,
        'isFinished': _SplashPageAnimation_isFinished$,
        'updateShouldNotify': _SplashPageAnimation_updateShouldNotify$,
      },
      {},
    ),
    'SplashPage': m.ClassMirror(
      'SplashPage',
      {
        '#as': SplashPage_as$,
        '#is': SplashPage_is$,
        'child': _SplashPage_child$,
        'createState': _SplashPage_createState$,
      },
      {},
    ),
  },
);
Function _homePeekDesktop$(m.Scope scope$) => () => homePeekDesktop;
Function _homePeekMobile$(m.Scope scope$) => () => homePeekMobile;
Function ToggleSplashNotification_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ToggleSplashNotification;
Function ToggleSplashNotification_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ToggleSplashNotification;
Function _ToggleSplashNotification__$(m.Scope scope$) => () {
      return ToggleSplashNotification();
    };
Function SplashPageAnimation_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SplashPageAnimation;
Function SplashPageAnimation_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SplashPageAnimation;
Function _SplashPageAnimation_isFinished$(
  m.Scope scope$,
  SplashPageAnimation target$,
) =>
    () {
      return target$.isFinished;
    };
Function _SplashPageAnimation__$(m.Scope scope$) => ({
      Key? key,
      required bool isFinished,
      required Widget child,
    }) {
      return SplashPageAnimation(
        child: child,
        isFinished: isFinished,
        key: key,
      );
    };
Function _SplashPageAnimation_of$(m.Scope scope$) => SplashPageAnimation.of;
Function _SplashPageAnimation_updateShouldNotify$(
  m.Scope scope$,
  SplashPageAnimation target$,
) =>
    target$.updateShouldNotify;
Function SplashPage_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SplashPage;
Function SplashPage_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SplashPage;
Function _SplashPage_child$(
  m.Scope scope$,
  SplashPage target$,
) =>
    () {
      return target$.child;
    };
Function _SplashPage__$(m.Scope scope$) => ({
      Key? key,
      required Widget child,
    }) {
      return SplashPage(
        child: child,
        key: key,
      );
    };
Function _SplashPage_createState$(
  m.Scope scope$,
  SplashPage target$,
) =>
    target$.createState;
