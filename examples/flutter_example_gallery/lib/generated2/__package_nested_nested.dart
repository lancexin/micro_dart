// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:nested/nested.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';

const libraryMirror = m.LibraryMirror(
  'package:nested/nested.dart',
  {
    'Nested.': _Nested__$,
    'SingleChildStatelessElement.': _SingleChildStatelessElement__$,
    'SingleChildStatefulElement.': _SingleChildStatefulElement__$,
    'SingleChildBuilder.': _SingleChildBuilder__$,
  },
  {},
  {
    'Nested': m.ClassMirror(
      'Nested',
      {
        '#as': Nested_as$,
        '#is': Nested_is$,
        'build': _Nested_build$,
        'createElement': _Nested_createElement$,
      },
      {},
    ),
    'SingleChildWidget': m.ClassMirror(
      'SingleChildWidget',
      {
        '#as': SingleChildWidget_as$,
        '#is': SingleChildWidget_is$,
        'createElement': _SingleChildWidget_createElement$,
      },
      {},
    ),
    'SingleChildStatelessWidget': m.ClassMirror(
      'SingleChildStatelessWidget',
      {
        '#as': SingleChildStatelessWidget_as$,
        '#is': SingleChildStatelessWidget_is$,
        'buildWithChild': _SingleChildStatelessWidget_buildWithChild$,
        'build': _SingleChildStatelessWidget_build$,
        'createElement': _SingleChildStatelessWidget_createElement$,
      },
      {},
    ),
    'SingleChildStatelessElement': m.ClassMirror(
      'SingleChildStatelessElement',
      {
        '#as': SingleChildStatelessElement_as$,
        '#is': SingleChildStatelessElement_is$,
        'widget': _SingleChildStatelessElement_widget$,
        'build': _SingleChildStatelessElement_build$,
      },
      {},
    ),
    'SingleChildStatefulWidget': m.ClassMirror(
      'SingleChildStatefulWidget',
      {
        '#as': SingleChildStatefulWidget_as$,
        '#is': SingleChildStatefulWidget_is$,
        'createElement': _SingleChildStatefulWidget_createElement$,
      },
      {},
    ),
    'SingleChildState': m.ClassMirror(
      'SingleChildState',
      {
        '#as': SingleChildState_as$,
        '#is': SingleChildState_is$,
        'buildWithChild': _SingleChildState_buildWithChild$,
        'build': _SingleChildState_build$,
      },
      {},
    ),
    'SingleChildStatefulElement': m.ClassMirror(
      'SingleChildStatefulElement',
      {
        '#as': SingleChildStatefulElement_as$,
        '#is': SingleChildStatefulElement_is$,
        'widget': _SingleChildStatefulElement_widget$,
        'state': _SingleChildStatefulElement_state$,
        'build': _SingleChildStatefulElement_build$,
      },
      {},
    ),
    'SingleChildBuilder': m.ClassMirror(
      'SingleChildBuilder',
      {
        '#as': SingleChildBuilder_as$,
        '#is': SingleChildBuilder_is$,
        'builder': _SingleChildBuilder_builder$,
        'buildWithChild': _SingleChildBuilder_buildWithChild$,
      },
      {},
    ),
  },
);
Function Nested_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Nested;
Function Nested_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Nested;
Function _Nested__$(m.Scope scope$) => ({
      Key? key,
      required List children,
      Widget? child,
    }) {
      return Nested(
        child: child,
        children: List.from(children),
        key: key,
      );
    };
Function _Nested_build$(
  m.Scope scope$,
  Nested target$,
) =>
    target$.build;
Function _Nested_createElement$(
  m.Scope scope$,
  Nested target$,
) =>
    target$.createElement;
Function SingleChildWidget_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SingleChildWidget;
Function SingleChildWidget_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SingleChildWidget;
Function _SingleChildWidget_createElement$(
  m.Scope scope$,
  SingleChildWidget target$,
) =>
    target$.createElement;
Function SingleChildStatelessWidget_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SingleChildStatelessWidget;
Function SingleChildStatelessWidget_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SingleChildStatelessWidget;
Function _SingleChildStatelessWidget_buildWithChild$(
  m.Scope scope$,
  SingleChildStatelessWidget target$,
) =>
    target$.buildWithChild;
Function _SingleChildStatelessWidget_build$(
  m.Scope scope$,
  SingleChildStatelessWidget target$,
) =>
    target$.build;
Function _SingleChildStatelessWidget_createElement$(
  m.Scope scope$,
  SingleChildStatelessWidget target$,
) =>
    target$.createElement;
Function SingleChildStatelessElement_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SingleChildStatelessElement;
Function SingleChildStatelessElement_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SingleChildStatelessElement;
Function _SingleChildStatelessElement_widget$(
  m.Scope scope$,
  SingleChildStatelessElement target$,
) =>
    () {
      return target$.widget;
    };
Function _SingleChildStatelessElement__$(m.Scope scope$) =>
    (SingleChildStatelessWidget widget) {
      return SingleChildStatelessElement(widget);
    };
Function _SingleChildStatelessElement_build$(
  m.Scope scope$,
  SingleChildStatelessElement target$,
) =>
    target$.build;
Function SingleChildStatefulWidget_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SingleChildStatefulWidget;
Function SingleChildStatefulWidget_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SingleChildStatefulWidget;
Function _SingleChildStatefulWidget_createElement$(
  m.Scope scope$,
  SingleChildStatefulWidget target$,
) =>
    target$.createElement;
Function SingleChildState_as$<T extends SingleChildStatefulWidget>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SingleChildState<T>;
Function SingleChildState_is$<T extends SingleChildStatefulWidget>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SingleChildState<T>;
Function _SingleChildState_buildWithChild$<T extends SingleChildStatefulWidget>(
  m.Scope scope$,
  SingleChildState<T> target$,
) =>
    target$.buildWithChild;
Function _SingleChildState_build$<T extends SingleChildStatefulWidget>(
  m.Scope scope$,
  SingleChildState<T> target$,
) =>
    target$.build;
Function SingleChildStatefulElement_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SingleChildStatefulElement;
Function SingleChildStatefulElement_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SingleChildStatefulElement;
Function _SingleChildStatefulElement_widget$(
  m.Scope scope$,
  SingleChildStatefulElement target$,
) =>
    () {
      return target$.widget;
    };
Function _SingleChildStatefulElement_state$(
  m.Scope scope$,
  SingleChildStatefulElement target$,
) =>
    () {
      return target$.state;
    };
Function _SingleChildStatefulElement__$(m.Scope scope$) =>
    (SingleChildStatefulWidget widget) {
      return SingleChildStatefulElement(widget);
    };
Function _SingleChildStatefulElement_build$(
  m.Scope scope$,
  SingleChildStatefulElement target$,
) =>
    target$.build;
Function SingleChildBuilder_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SingleChildBuilder;
Function SingleChildBuilder_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SingleChildBuilder;
Function _SingleChildBuilder_builder$(
  m.Scope scope$,
  SingleChildBuilder target$,
) =>
    () {
      return target$.builder;
    };
Function _SingleChildBuilder__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      return SingleChildBuilder(
        builder: builderProxy,
        child: child,
        key: key,
      );
    };
Function _SingleChildBuilder_buildWithChild$(
  m.Scope scope$,
  SingleChildBuilder target$,
) =>
    target$.buildWithChild;
