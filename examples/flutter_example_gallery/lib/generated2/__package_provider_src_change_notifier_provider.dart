// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:provider/src/change_notifier_provider.dart';
import 'package:flutter/widgets.dart';
import 'package:provider/src/listenable_provider.dart';
import 'package:provider/src/provider.dart';
import 'package:provider/src/proxy_provider.dart';

const libraryMirror = m.LibraryMirror(
  'package:provider/src/change_notifier_provider.dart',
  {
    'ChangeNotifierProvider.': _ChangeNotifierProvider__$,
    'ChangeNotifierProvider.value': _ChangeNotifierProvider_value_$,
    'ChangeNotifierProxyProvider.': _ChangeNotifierProxyProvider__$,
    'ChangeNotifierProxyProvider0.': _ChangeNotifierProxyProvider0__$,
    'ChangeNotifierProxyProvider2.': _ChangeNotifierProxyProvider2__$,
    'ChangeNotifierProxyProvider3.': _ChangeNotifierProxyProvider3__$,
    'ChangeNotifierProxyProvider4.': _ChangeNotifierProxyProvider4__$,
    'ChangeNotifierProxyProvider5.': _ChangeNotifierProxyProvider5__$,
    'ChangeNotifierProxyProvider6.': _ChangeNotifierProxyProvider6__$,
  },
  {},
  {
    'ChangeNotifierProvider': m.ClassMirror(
      'ChangeNotifierProvider',
      {
        '#as': ChangeNotifierProvider_as$,
        '#is': ChangeNotifierProvider_is$,
      },
      {},
    ),
    'ChangeNotifierProxyProvider': m.ClassMirror(
      'ChangeNotifierProxyProvider',
      {
        '#as': ChangeNotifierProxyProvider_as$,
        '#is': ChangeNotifierProxyProvider_is$,
      },
      {},
    ),
    'ChangeNotifierProxyProvider0': m.ClassMirror(
      'ChangeNotifierProxyProvider0',
      {
        '#as': ChangeNotifierProxyProvider0_as$,
        '#is': ChangeNotifierProxyProvider0_is$,
      },
      {},
    ),
    'ChangeNotifierProxyProvider2': m.ClassMirror(
      'ChangeNotifierProxyProvider2',
      {
        '#as': ChangeNotifierProxyProvider2_as$,
        '#is': ChangeNotifierProxyProvider2_is$,
      },
      {},
    ),
    'ChangeNotifierProxyProvider3': m.ClassMirror(
      'ChangeNotifierProxyProvider3',
      {
        '#as': ChangeNotifierProxyProvider3_as$,
        '#is': ChangeNotifierProxyProvider3_is$,
      },
      {},
    ),
    'ChangeNotifierProxyProvider4': m.ClassMirror(
      'ChangeNotifierProxyProvider4',
      {
        '#as': ChangeNotifierProxyProvider4_as$,
        '#is': ChangeNotifierProxyProvider4_is$,
      },
      {},
    ),
    'ChangeNotifierProxyProvider5': m.ClassMirror(
      'ChangeNotifierProxyProvider5',
      {
        '#as': ChangeNotifierProxyProvider5_as$,
        '#is': ChangeNotifierProxyProvider5_is$,
      },
      {},
    ),
    'ChangeNotifierProxyProvider6': m.ClassMirror(
      'ChangeNotifierProxyProvider6',
      {
        '#as': ChangeNotifierProxyProvider6_as$,
        '#is': ChangeNotifierProxyProvider6_is$,
      },
      {},
    ),
  },
);
Function ChangeNotifierProvider_as$<T extends ChangeNotifier?>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ChangeNotifierProvider<T>;
Function ChangeNotifierProvider_is$<T extends ChangeNotifier?>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ChangeNotifierProvider<T>;
Function _ChangeNotifierProvider__$(m.Scope scope$) =>
    <T extends ChangeNotifier?>({
      Key? key,
      required m.FunctionPointer create,
      bool? lazy,
      m.FunctionPointer? builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      T createProxy(BuildContext create_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            create,
            [create_context$],
            {},
          );
      return ChangeNotifierProvider<T>(
        builder: builder == null ? null : builderProxy,
        create: createProxy,
        key: key,
        lazy: lazy,
        child: child,
      );
    };
Function _ChangeNotifierProvider_value_$(m.Scope scope$) =>
    <T extends ChangeNotifier?>({
      Key? key,
      required dynamic value,
      m.FunctionPointer? builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      return ChangeNotifierProvider<T>.value(
        builder: builder == null ? null : builderProxy,
        child: child,
        key: key,
        value: value,
      );
    };
Function ChangeNotifierProxyProvider_as$<T, R extends ChangeNotifier?>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ChangeNotifierProxyProvider<T, R>;
Function ChangeNotifierProxyProvider_is$<T, R extends ChangeNotifier?>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ChangeNotifierProxyProvider<T, R>;
Function _ChangeNotifierProxyProvider__$(m.Scope scope$) =>
    <T, R extends ChangeNotifier?>({
      Key? key,
      required m.FunctionPointer create,
      required m.FunctionPointer update,
      bool? lazy,
      m.FunctionPointer? builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      R createProxy(BuildContext create_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            create,
            [create_context$],
            {},
          );
      R updateProxy(
        BuildContext update_context$,
        dynamic update_value$,
        dynamic update_previous$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            update,
            [
              update_context$,
              update_value$,
              update_previous$,
            ],
            {},
          );
      return ChangeNotifierProxyProvider<T, R>(
        builder: builder == null ? null : builderProxy,
        create: createProxy,
        key: key,
        lazy: lazy,
        update: updateProxy,
        child: child,
      );
    };
Function ChangeNotifierProxyProvider0_as$<R extends ChangeNotifier?>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ChangeNotifierProxyProvider0<R>;
Function ChangeNotifierProxyProvider0_is$<R extends ChangeNotifier?>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ChangeNotifierProxyProvider0<R>;
Function _ChangeNotifierProxyProvider0__$(m.Scope scope$) =>
    <R extends ChangeNotifier?>({
      Key? key,
      required m.FunctionPointer create,
      required m.FunctionPointer update,
      bool? lazy,
      m.FunctionPointer? builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      R createProxy(BuildContext create_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            create,
            [create_context$],
            {},
          );
      R updateProxy(
        BuildContext update_$p0$,
        dynamic update_value$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            update,
            [
              update_$p0$,
              update_value$,
            ],
            {},
          );
      return ChangeNotifierProxyProvider0<R>(
        builder: builder == null ? null : builderProxy,
        create: createProxy,
        key: key,
        lazy: lazy,
        update: updateProxy,
        child: child,
      );
    };
Function ChangeNotifierProxyProvider2_as$<T, T2, R extends ChangeNotifier?>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ChangeNotifierProxyProvider2<T, T2, R>;
Function ChangeNotifierProxyProvider2_is$<T, T2, R extends ChangeNotifier?>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ChangeNotifierProxyProvider2<T, T2, R>;
Function _ChangeNotifierProxyProvider2__$(m.Scope scope$) =>
    <T, T2, R extends ChangeNotifier?>({
      Key? key,
      required m.FunctionPointer create,
      required m.FunctionPointer update,
      bool? lazy,
      m.FunctionPointer? builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      R createProxy(BuildContext create_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            create,
            [create_context$],
            {},
          );
      R updateProxy(
        BuildContext update_context$,
        dynamic update_value$,
        dynamic update_value2$,
        dynamic update_previous$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            update,
            [
              update_context$,
              update_value$,
              update_value2$,
              update_previous$,
            ],
            {},
          );
      return ChangeNotifierProxyProvider2<T, T2, R>(
        builder: builder == null ? null : builderProxy,
        create: createProxy,
        key: key,
        lazy: lazy,
        update: updateProxy,
        child: child,
      );
    };
Function ChangeNotifierProxyProvider3_as$<T, T2, T3, R extends ChangeNotifier?>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ChangeNotifierProxyProvider3<T, T2, T3, R>;
Function ChangeNotifierProxyProvider3_is$<T, T2, T3, R extends ChangeNotifier?>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ChangeNotifierProxyProvider3<T, T2, T3, R>;
Function _ChangeNotifierProxyProvider3__$(m.Scope scope$) =>
    <T, T2, T3, R extends ChangeNotifier?>({
      Key? key,
      required m.FunctionPointer create,
      required m.FunctionPointer update,
      bool? lazy,
      m.FunctionPointer? builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      R createProxy(BuildContext create_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            create,
            [create_context$],
            {},
          );
      R updateProxy(
        BuildContext update_context$,
        dynamic update_value$,
        dynamic update_value2$,
        dynamic update_value3$,
        dynamic update_previous$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            update,
            [
              update_context$,
              update_value$,
              update_value2$,
              update_value3$,
              update_previous$,
            ],
            {},
          );
      return ChangeNotifierProxyProvider3<T, T2, T3, R>(
        builder: builder == null ? null : builderProxy,
        create: createProxy,
        key: key,
        lazy: lazy,
        update: updateProxy,
        child: child,
      );
    };
Function
    ChangeNotifierProxyProvider4_as$<T, T2, T3, T4, R extends ChangeNotifier?>(
  m.Scope scope$,
  dynamic target$,
) =>
        () => target$ as ChangeNotifierProxyProvider4<T, T2, T3, T4, R>;
Function
    ChangeNotifierProxyProvider4_is$<T, T2, T3, T4, R extends ChangeNotifier?>(
  m.Scope scope$,
  dynamic target$,
) =>
        () => target$ is ChangeNotifierProxyProvider4<T, T2, T3, T4, R>;
Function _ChangeNotifierProxyProvider4__$(m.Scope scope$) =>
    <T, T2, T3, T4, R extends ChangeNotifier?>({
      Key? key,
      required m.FunctionPointer create,
      required m.FunctionPointer update,
      bool? lazy,
      m.FunctionPointer? builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      R createProxy(BuildContext create_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            create,
            [create_context$],
            {},
          );
      R updateProxy(
        BuildContext update_context$,
        dynamic update_value$,
        dynamic update_value2$,
        dynamic update_value3$,
        dynamic update_value4$,
        dynamic update_previous$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            update,
            [
              update_context$,
              update_value$,
              update_value2$,
              update_value3$,
              update_value4$,
              update_previous$,
            ],
            {},
          );
      return ChangeNotifierProxyProvider4<T, T2, T3, T4, R>(
        builder: builder == null ? null : builderProxy,
        create: createProxy,
        key: key,
        lazy: lazy,
        update: updateProxy,
        child: child,
      );
    };
Function ChangeNotifierProxyProvider5_as$<T, T2, T3, T4, T5,
        R extends ChangeNotifier?>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ChangeNotifierProxyProvider5<T, T2, T3, T4, T5, R>;
Function ChangeNotifierProxyProvider5_is$<T, T2, T3, T4, T5,
        R extends ChangeNotifier?>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ChangeNotifierProxyProvider5<T, T2, T3, T4, T5, R>;
Function _ChangeNotifierProxyProvider5__$(m.Scope scope$) =>
    <T, T2, T3, T4, T5, R extends ChangeNotifier?>({
      Key? key,
      required m.FunctionPointer create,
      required m.FunctionPointer update,
      bool? lazy,
      m.FunctionPointer? builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      R createProxy(BuildContext create_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            create,
            [create_context$],
            {},
          );
      R updateProxy(
        BuildContext update_context$,
        dynamic update_value$,
        dynamic update_value2$,
        dynamic update_value3$,
        dynamic update_value4$,
        dynamic update_value5$,
        dynamic update_previous$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            update,
            [
              update_context$,
              update_value$,
              update_value2$,
              update_value3$,
              update_value4$,
              update_value5$,
              update_previous$,
            ],
            {},
          );
      return ChangeNotifierProxyProvider5<T, T2, T3, T4, T5, R>(
        builder: builder == null ? null : builderProxy,
        create: createProxy,
        key: key,
        lazy: lazy,
        update: updateProxy,
        child: child,
      );
    };
Function ChangeNotifierProxyProvider6_as$<T, T2, T3, T4, T5, T6,
        R extends ChangeNotifier?>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ChangeNotifierProxyProvider6<T, T2, T3, T4, T5, T6, R>;
Function ChangeNotifierProxyProvider6_is$<T, T2, T3, T4, T5, T6,
        R extends ChangeNotifier?>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ChangeNotifierProxyProvider6<T, T2, T3, T4, T5, T6, R>;
Function _ChangeNotifierProxyProvider6__$(m.Scope scope$) =>
    <T, T2, T3, T4, T5, T6, R extends ChangeNotifier?>({
      Key? key,
      required m.FunctionPointer create,
      required m.FunctionPointer update,
      bool? lazy,
      m.FunctionPointer? builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      R createProxy(BuildContext create_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            create,
            [create_context$],
            {},
          );
      R updateProxy(
        BuildContext update_context$,
        dynamic update_value$,
        dynamic update_value2$,
        dynamic update_value3$,
        dynamic update_value4$,
        dynamic update_value5$,
        dynamic update_value6$,
        dynamic update_previous$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            update,
            [
              update_context$,
              update_value$,
              update_value2$,
              update_value3$,
              update_value4$,
              update_value5$,
              update_value6$,
              update_previous$,
            ],
            {},
          );
      return ChangeNotifierProxyProvider6<T, T2, T3, T4, T5, T6, R>(
        builder: builder == null ? null : builderProxy,
        create: createProxy,
        key: key,
        lazy: lazy,
        update: updateProxy,
        child: child,
      );
    };
