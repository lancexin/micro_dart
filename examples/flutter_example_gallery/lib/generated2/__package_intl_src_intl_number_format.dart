// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:intl/src/intl/number_format.dart';
import 'dart:math';
import 'package:intl/number_symbols.dart';
import 'package:intl/number_symbols_data.dart';
import 'package:intl/src/intl_helpers.dart';
import 'package:intl/src/plural_rules.dart';
import 'package:intl/src/intl/constants.dart';
import 'package:intl/src/intl/number_format_parser.dart';
import 'package:intl/src/intl/number_parser.dart';

const libraryMirror = m.LibraryMirror(
  'package:intl/src/intl/number_format.dart',
  {
    'NumberFormat.': _NumberFormat__$,
    'NumberFormat.decimalPattern': _NumberFormat_decimalPattern_$,
    'NumberFormat.decimalPatternDigits': _NumberFormat_decimalPatternDigits_$,
    'NumberFormat.percentPattern': _NumberFormat_percentPattern_$,
    'NumberFormat.decimalPercentPattern': _NumberFormat_decimalPercentPattern_$,
    'NumberFormat.scientificPattern': _NumberFormat_scientificPattern_$,
    'NumberFormat.currency': _NumberFormat_currency_$,
    'NumberFormat.simpleCurrency': _NumberFormat_simpleCurrency_$,
    'NumberFormat.compact': _NumberFormat_compact_$,
    'NumberFormat.compactLong': _NumberFormat_compactLong_$,
    'NumberFormat.compactSimpleCurrency': _NumberFormat_compactSimpleCurrency_$,
    'NumberFormat.compactCurrency': _NumberFormat_compactCurrency_$,
    'NumberFormat.localeExists': _NumberFormat_localeExists$,
    'NumberFormat.numberOfIntegerDigits': _NumberFormat_numberOfIntegerDigits$,
  },
  {},
  {
    'NumberFormat': m.ClassMirror(
      'NumberFormat',
      {
        '#as': NumberFormat_as$,
        '#is': NumberFormat_is$,
        'negativePrefix': _NumberFormat_negativePrefix$,
        'positivePrefix': _NumberFormat_positivePrefix$,
        'negativeSuffix': _NumberFormat_negativeSuffix$,
        'positiveSuffix': _NumberFormat_positiveSuffix$,
        'maximumIntegerDigits': _NumberFormat_maximumIntegerDigits$,
        'minimumIntegerDigits': _NumberFormat_minimumIntegerDigits$,
        'minimumExponentDigits': _NumberFormat_minimumExponentDigits$,
        'minimumSignificantDigitsStrict':
            _NumberFormat_minimumSignificantDigitsStrict$,
        'significantDigitsInUse': _NumberFormat_significantDigitsInUse$,
        'multiplier': _NumberFormat_multiplier$,
        'currencyName': _NumberFormat_currencyName$,
        'currencySymbol': _NumberFormat_currencySymbol$,
        'decimalDigits': _NumberFormat_decimalDigits$,
        'localeZero': _NumberFormat_localeZero$,
        'maximumFractionDigits': _NumberFormat_maximumFractionDigits$,
        'minimumFractionDigits': _NumberFormat_minimumFractionDigits$,
        'maximumSignificantDigits': _NumberFormat_maximumSignificantDigits$,
        'minimumSignificantDigits': _NumberFormat_minimumSignificantDigits$,
        'locale': _NumberFormat_locale$,
        'symbols': _NumberFormat_symbols$,
        'simpleCurrencySymbol': _NumberFormat_simpleCurrencySymbol$,
        'format': _NumberFormat_format$,
        'parse': _NumberFormat_parse$,
        'turnOffGrouping': _NumberFormat_turnOffGrouping$,
        'toString': _NumberFormat_toString$,
      },
      {
        'maximumIntegerDigits': _NumberFormat_maximumIntegerDigits_set$,
        'minimumIntegerDigits': _NumberFormat_minimumIntegerDigits_set$,
        'minimumExponentDigits': _NumberFormat_minimumExponentDigits_set$,
        'minimumSignificantDigitsStrict':
            _NumberFormat_minimumSignificantDigitsStrict_set$,
        'significantDigitsInUse': _NumberFormat_significantDigitsInUse_set$,
        'currencyName': _NumberFormat_currencyName_set$,
        'maximumFractionDigits': _NumberFormat_maximumFractionDigits_set$,
        'minimumFractionDigits': _NumberFormat_minimumFractionDigits_set$,
        'maximumSignificantDigits': _NumberFormat_maximumSignificantDigits_set$,
        'minimumSignificantDigits': _NumberFormat_minimumSignificantDigits_set$,
        'significantDigits': _NumberFormat_significantDigits_set$,
      },
    )
  },
);
Function NumberFormat_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as NumberFormat;
Function NumberFormat_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is NumberFormat;
Function _NumberFormat_negativePrefix$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    () {
      return target$.negativePrefix;
    };
Function _NumberFormat_positivePrefix$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    () {
      return target$.positivePrefix;
    };
Function _NumberFormat_negativeSuffix$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    () {
      return target$.negativeSuffix;
    };
Function _NumberFormat_positiveSuffix$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    () {
      return target$.positiveSuffix;
    };
Function _NumberFormat_maximumIntegerDigits$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    () {
      return target$.maximumIntegerDigits;
    };
void _NumberFormat_maximumIntegerDigits_set$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    (dynamic other$) {
      target$.maximumIntegerDigits = other$;
    };
Function _NumberFormat_minimumIntegerDigits$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    () {
      return target$.minimumIntegerDigits;
    };
void _NumberFormat_minimumIntegerDigits_set$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    (dynamic other$) {
      target$.minimumIntegerDigits = other$;
    };
Function _NumberFormat_minimumExponentDigits$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    () {
      return target$.minimumExponentDigits;
    };
void _NumberFormat_minimumExponentDigits_set$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    (dynamic other$) {
      target$.minimumExponentDigits = other$;
    };
Function _NumberFormat_minimumSignificantDigitsStrict$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    () {
      return target$.minimumSignificantDigitsStrict;
    };
void _NumberFormat_minimumSignificantDigitsStrict_set$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    (dynamic other$) {
      target$.minimumSignificantDigitsStrict = other$;
    };
Function _NumberFormat_significantDigitsInUse$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    () {
      return target$.significantDigitsInUse;
    };
void _NumberFormat_significantDigitsInUse_set$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    (dynamic other$) {
      target$.significantDigitsInUse = other$;
    };
Function _NumberFormat_multiplier$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    () {
      return target$.multiplier;
    };
Function _NumberFormat_currencyName$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    () {
      return target$.currencyName;
    };
void _NumberFormat_currencyName_set$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    (dynamic other$) {
      target$.currencyName = other$;
    };
Function _NumberFormat_currencySymbol$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    () {
      return target$.currencySymbol;
    };
Function _NumberFormat_decimalDigits$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    () {
      return target$.decimalDigits;
    };
Function _NumberFormat_localeZero$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    () {
      return target$.localeZero;
    };
Function _NumberFormat_maximumFractionDigits$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    () {
      return target$.maximumFractionDigits;
    };
void _NumberFormat_maximumFractionDigits_set$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    (dynamic other$) {
      target$.maximumFractionDigits = other$;
    };
Function _NumberFormat_minimumFractionDigits$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    () {
      return target$.minimumFractionDigits;
    };
void _NumberFormat_minimumFractionDigits_set$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    (dynamic other$) {
      target$.minimumFractionDigits = other$;
    };
Function _NumberFormat_maximumSignificantDigits$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    () {
      return target$.maximumSignificantDigits;
    };
void _NumberFormat_maximumSignificantDigits_set$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    (dynamic other$) {
      target$.maximumSignificantDigits = other$;
    };
Function _NumberFormat_minimumSignificantDigits$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    () {
      return target$.minimumSignificantDigits;
    };
void _NumberFormat_minimumSignificantDigits_set$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    (dynamic other$) {
      target$.minimumSignificantDigits = other$;
    };
void _NumberFormat_significantDigits_set$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    (dynamic other$) {
      target$.significantDigits = other$;
    };
Function _NumberFormat_locale$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    () {
      return target$.locale;
    };
Function _NumberFormat_symbols$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    () {
      return target$.symbols;
    };
Function _NumberFormat__$(m.Scope scope$) => ([
      String? newPattern,
      String? locale,
    ]) {
      if (newPattern == null && locale == null) {
        return NumberFormat();
      }
      if (locale == null) {
        return NumberFormat(newPattern!);
      }
      return NumberFormat(
        newPattern!,
        locale!,
      );
    };
Function _NumberFormat_decimalPattern_$(m.Scope scope$) =>
    NumberFormat.decimalPattern;
Function _NumberFormat_decimalPatternDigits_$(m.Scope scope$) =>
    NumberFormat.decimalPatternDigits;
Function _NumberFormat_percentPattern_$(m.Scope scope$) =>
    NumberFormat.percentPattern;
Function _NumberFormat_decimalPercentPattern_$(m.Scope scope$) =>
    NumberFormat.decimalPercentPattern;
Function _NumberFormat_scientificPattern_$(m.Scope scope$) =>
    NumberFormat.scientificPattern;
Function _NumberFormat_currency_$(m.Scope scope$) => NumberFormat.currency;
Function _NumberFormat_simpleCurrency_$(m.Scope scope$) =>
    NumberFormat.simpleCurrency;
Function _NumberFormat_compact_$(m.Scope scope$) => NumberFormat.compact;
Function _NumberFormat_compactLong_$(m.Scope scope$) =>
    NumberFormat.compactLong;
Function _NumberFormat_compactSimpleCurrency_$(m.Scope scope$) =>
    NumberFormat.compactSimpleCurrency;
Function _NumberFormat_compactCurrency_$(m.Scope scope$) =>
    NumberFormat.compactCurrency;
Function _NumberFormat_simpleCurrencySymbol$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    target$.simpleCurrencySymbol;
Function _NumberFormat_localeExists$(m.Scope scope$) =>
    NumberFormat.localeExists;
Function _NumberFormat_format$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    target$.format;
Function _NumberFormat_parse$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    target$.parse;
Function _NumberFormat_numberOfIntegerDigits$(m.Scope scope$) =>
    NumberFormat.numberOfIntegerDigits;
Function _NumberFormat_turnOffGrouping$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    target$.turnOffGrouping;
Function _NumberFormat_toString$(
  m.Scope scope$,
  NumberFormat target$,
) =>
    target$.toString;
