// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:material_color_utilities/hct/hct_solver.dart';
import 'dart:math';
import 'package:material_color_utilities/utils/math_utils.dart';
import 'package:material_color_utilities/utils/color_utils.dart';
import 'package:material_color_utilities/hct/cam16.dart';
import 'package:material_color_utilities/hct/viewing_conditions.dart';

const libraryMirror = m.LibraryMirror(
  'package:material_color_utilities/hct/hct_solver.dart',
  {
    'HctSolver.': _HctSolver__$,
    'HctSolver.solveToInt': _HctSolver_solveToInt$,
    'HctSolver.solveToCam': _HctSolver_solveToCam$,
  },
  {},
  {
    'HctSolver': m.ClassMirror(
      'HctSolver',
      {
        '#as': HctSolver_as$,
        '#is': HctSolver_is$,
      },
      {},
    )
  },
);
Function HctSolver_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as HctSolver;
Function HctSolver_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is HctSolver;
Function _HctSolver__$(m.Scope scope$) => () {
      return HctSolver();
    };
Function _HctSolver_solveToInt$(m.Scope scope$) => HctSolver.solveToInt;
Function _HctSolver_solveToCam$(m.Scope scope$) => HctSolver.solveToCam;
