// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter_staggered_grid_view/src/widgets/masonry_grid_view.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter_staggered_grid_view/src/rendering/sliver_simple_grid_delegate.dart';
import 'package:flutter_staggered_grid_view/src/widgets/sliver_masonry_grid.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter_staggered_grid_view/src/widgets/masonry_grid_view.dart',
  {
    'MasonryGridView.': _MasonryGridView__$,
    'MasonryGridView.builder': _MasonryGridView_builder_$,
    'MasonryGridView.custom': _MasonryGridView_custom_$,
    'MasonryGridView.count': _MasonryGridView_count_$,
    'MasonryGridView.extent': _MasonryGridView_extent_$,
  },
  {},
  {
    'MasonryGridView': m.ClassMirror(
      'MasonryGridView',
      {
        '#as': MasonryGridView_as$,
        '#is': MasonryGridView_is$,
        'gridDelegate': _MasonryGridView_gridDelegate$,
        'mainAxisSpacing': _MasonryGridView_mainAxisSpacing$,
        'crossAxisSpacing': _MasonryGridView_crossAxisSpacing$,
        'childrenDelegate': _MasonryGridView_childrenDelegate$,
        'buildChildLayout': _MasonryGridView_buildChildLayout$,
      },
      {},
    )
  },
);
Function MasonryGridView_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MasonryGridView;
Function MasonryGridView_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MasonryGridView;
Function _MasonryGridView_gridDelegate$(
  m.Scope scope$,
  MasonryGridView target$,
) =>
    () {
      return target$.gridDelegate;
    };
Function _MasonryGridView_mainAxisSpacing$(
  m.Scope scope$,
  MasonryGridView target$,
) =>
    () {
      return target$.mainAxisSpacing;
    };
Function _MasonryGridView_crossAxisSpacing$(
  m.Scope scope$,
  MasonryGridView target$,
) =>
    () {
      return target$.crossAxisSpacing;
    };
Function _MasonryGridView_childrenDelegate$(
  m.Scope scope$,
  MasonryGridView target$,
) =>
    () {
      return target$.childrenDelegate;
    };
Function _MasonryGridView__$(m.Scope scope$) => ({
      Key? key,
      Axis? scrollDirection,
      bool? reverse,
      ScrollController? controller,
      bool? primary,
      ScrollPhysics? physics,
      bool? shrinkWrap,
      EdgeInsetsGeometry? padding,
      required SliverSimpleGridDelegate gridDelegate,
      double? mainAxisSpacing,
      double? crossAxisSpacing,
      bool? addAutomaticKeepAlives,
      bool? addRepaintBoundaries,
      bool? addSemanticIndexes,
      double? cacheExtent,
      List? children,
      int? semanticChildCount,
      DragStartBehavior? dragStartBehavior,
      Clip? clipBehavior,
      ScrollViewKeyboardDismissBehavior? keyboardDismissBehavior,
      String? restorationId,
    }) {
      return MasonryGridView(
        addAutomaticKeepAlives: addAutomaticKeepAlives ?? true,
        addRepaintBoundaries: addRepaintBoundaries ?? true,
        addSemanticIndexes: addSemanticIndexes ?? true,
        cacheExtent: cacheExtent,
        children: children == null ? const <Widget>[] : List.from(children),
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        controller: controller,
        crossAxisSpacing: crossAxisSpacing ?? 0.0,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        gridDelegate: gridDelegate,
        key: key,
        keyboardDismissBehavior:
            keyboardDismissBehavior ?? ScrollViewKeyboardDismissBehavior.manual,
        mainAxisSpacing: mainAxisSpacing ?? 0.0,
        padding: padding,
        physics: physics,
        primary: primary,
        restorationId: restorationId,
        reverse: reverse ?? false,
        scrollDirection: scrollDirection ?? Axis.vertical,
        semanticChildCount: semanticChildCount,
        shrinkWrap: shrinkWrap ?? false,
      );
    };
Function _MasonryGridView_builder_$(m.Scope scope$) => ({
      Key? key,
      Axis? scrollDirection,
      bool? reverse,
      ScrollController? controller,
      bool? primary,
      ScrollPhysics? physics,
      bool? shrinkWrap,
      EdgeInsetsGeometry? padding,
      required SliverSimpleGridDelegate gridDelegate,
      required m.FunctionPointer itemBuilder,
      int? itemCount,
      double? mainAxisSpacing,
      double? crossAxisSpacing,
      bool? addAutomaticKeepAlives,
      bool? addRepaintBoundaries,
      bool? addSemanticIndexes,
      double? cacheExtent,
      int? semanticChildCount,
      DragStartBehavior? dragStartBehavior,
      ScrollViewKeyboardDismissBehavior? keyboardDismissBehavior,
      String? restorationId,
      Clip? clipBehavior,
    }) {
      Widget itemBuilderProxy(
        BuildContext itemBuilder_context$,
        int itemBuilder_index$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            itemBuilder,
            [
              itemBuilder_context$,
              itemBuilder_index$,
            ],
            {},
          );
      return MasonryGridView.builder(
        addAutomaticKeepAlives: addAutomaticKeepAlives ?? true,
        addRepaintBoundaries: addRepaintBoundaries ?? true,
        addSemanticIndexes: addSemanticIndexes ?? true,
        cacheExtent: cacheExtent,
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        controller: controller,
        crossAxisSpacing: crossAxisSpacing ?? 0.0,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        gridDelegate: gridDelegate,
        itemBuilder: itemBuilderProxy,
        itemCount: itemCount,
        key: key,
        keyboardDismissBehavior:
            keyboardDismissBehavior ?? ScrollViewKeyboardDismissBehavior.manual,
        mainAxisSpacing: mainAxisSpacing ?? 0.0,
        padding: padding,
        physics: physics,
        primary: primary,
        restorationId: restorationId,
        reverse: reverse ?? false,
        scrollDirection: scrollDirection ?? Axis.vertical,
        semanticChildCount: semanticChildCount,
        shrinkWrap: shrinkWrap ?? false,
      );
    };
Function _MasonryGridView_custom_$(m.Scope scope$) => MasonryGridView.custom;
Function _MasonryGridView_count_$(m.Scope scope$) => ({
      Key? key,
      Axis? scrollDirection,
      bool? reverse,
      ScrollController? controller,
      bool? primary,
      ScrollPhysics? physics,
      bool? shrinkWrap,
      EdgeInsetsGeometry? padding,
      required int crossAxisCount,
      double? mainAxisSpacing,
      double? crossAxisSpacing,
      required m.FunctionPointer itemBuilder,
      int? itemCount,
      bool? addAutomaticKeepAlives,
      bool? addRepaintBoundaries,
      bool? addSemanticIndexes,
      double? cacheExtent,
      int? semanticChildCount,
      DragStartBehavior? dragStartBehavior,
      ScrollViewKeyboardDismissBehavior? keyboardDismissBehavior,
      String? restorationId,
      Clip? clipBehavior,
    }) {
      Widget itemBuilderProxy(
        BuildContext itemBuilder_context$,
        int itemBuilder_index$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            itemBuilder,
            [
              itemBuilder_context$,
              itemBuilder_index$,
            ],
            {},
          );
      return MasonryGridView.count(
        addAutomaticKeepAlives: addAutomaticKeepAlives ?? true,
        addRepaintBoundaries: addRepaintBoundaries ?? true,
        addSemanticIndexes: addSemanticIndexes ?? true,
        cacheExtent: cacheExtent,
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        controller: controller,
        crossAxisCount: crossAxisCount,
        crossAxisSpacing: crossAxisSpacing ?? 0.0,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        itemBuilder: itemBuilderProxy,
        itemCount: itemCount,
        key: key,
        keyboardDismissBehavior:
            keyboardDismissBehavior ?? ScrollViewKeyboardDismissBehavior.manual,
        mainAxisSpacing: mainAxisSpacing ?? 0.0,
        padding: padding,
        physics: physics,
        primary: primary,
        restorationId: restorationId,
        reverse: reverse ?? false,
        scrollDirection: scrollDirection ?? Axis.vertical,
        semanticChildCount: semanticChildCount,
        shrinkWrap: shrinkWrap ?? false,
      );
    };
Function _MasonryGridView_extent_$(m.Scope scope$) => ({
      Key? key,
      Axis? scrollDirection,
      bool? reverse,
      ScrollController? controller,
      bool? primary,
      ScrollPhysics? physics,
      bool? shrinkWrap,
      EdgeInsetsGeometry? padding,
      required double maxCrossAxisExtent,
      double? mainAxisSpacing,
      double? crossAxisSpacing,
      required m.FunctionPointer itemBuilder,
      int? itemCount,
      bool? addAutomaticKeepAlives,
      bool? addRepaintBoundaries,
      bool? addSemanticIndexes,
      double? cacheExtent,
      int? semanticChildCount,
      DragStartBehavior? dragStartBehavior,
      ScrollViewKeyboardDismissBehavior? keyboardDismissBehavior,
      String? restorationId,
      Clip? clipBehavior,
    }) {
      Widget itemBuilderProxy(
        BuildContext itemBuilder_context$,
        int itemBuilder_index$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            itemBuilder,
            [
              itemBuilder_context$,
              itemBuilder_index$,
            ],
            {},
          );
      return MasonryGridView.extent(
        addAutomaticKeepAlives: addAutomaticKeepAlives ?? true,
        addRepaintBoundaries: addRepaintBoundaries ?? true,
        addSemanticIndexes: addSemanticIndexes ?? true,
        cacheExtent: cacheExtent,
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        controller: controller,
        crossAxisSpacing: crossAxisSpacing ?? 0.0,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        itemBuilder: itemBuilderProxy,
        itemCount: itemCount,
        key: key,
        keyboardDismissBehavior:
            keyboardDismissBehavior ?? ScrollViewKeyboardDismissBehavior.manual,
        mainAxisSpacing: mainAxisSpacing ?? 0.0,
        maxCrossAxisExtent: maxCrossAxisExtent,
        padding: padding,
        physics: physics,
        primary: primary,
        restorationId: restorationId,
        reverse: reverse ?? false,
        scrollDirection: scrollDirection ?? Axis.vertical,
        semanticChildCount: semanticChildCount,
        shrinkWrap: shrinkWrap ?? false,
      );
    };
Function _MasonryGridView_buildChildLayout$(
  m.Scope scope$,
  MasonryGridView target$,
) =>
    target$.buildChildLayout;
