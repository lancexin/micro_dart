// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:intl/src/intl/text_direction.dart';

const libraryMirror = m.LibraryMirror(
  'package:intl/src/intl/text_direction.dart',
  {
    'TextDirection.LTR': _TextDirection_LTR$,
    'TextDirection.RTL': _TextDirection_RTL$,
    'TextDirection.UNKNOWN': _TextDirection_UNKNOWN$,
  },
  {},
  {
    'TextDirection': m.ClassMirror(
      'TextDirection',
      {
        '#as': TextDirection_as$,
        '#is': TextDirection_is$,
        'value': _TextDirection_value$,
        'spanText': _TextDirection_spanText$,
        'isDirectionChange': _TextDirection_isDirectionChange$,
      },
      {},
    )
  },
);
Function TextDirection_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextDirection;
Function TextDirection_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextDirection;
Function _TextDirection_LTR$(m.Scope scope$) => () => TextDirection.LTR;
Function _TextDirection_RTL$(m.Scope scope$) => () => TextDirection.RTL;
Function _TextDirection_UNKNOWN$(m.Scope scope$) => () => TextDirection.UNKNOWN;
Function _TextDirection_value$(
  m.Scope scope$,
  TextDirection target$,
) =>
    () {
      return target$.value;
    };
Function _TextDirection_spanText$(
  m.Scope scope$,
  TextDirection target$,
) =>
    () {
      return target$.spanText;
    };
Function _TextDirection_isDirectionChange$(
  m.Scope scope$,
  TextDirection target$,
) =>
    target$.isDirectionChange;
