// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:animations/src/shared_axis_transition.dart';
import 'package:flutter/material.dart';

const libraryMirror = m.LibraryMirror(
  'package:animations/src/shared_axis_transition.dart',
  {
    'SharedAxisPageTransitionsBuilder.': _SharedAxisPageTransitionsBuilder__$,
    'SharedAxisTransition.': _SharedAxisTransition__$,
    'SharedAxisTransitionType.vertical': _SharedAxisTransitionType_vertical$,
    'SharedAxisTransitionType.horizontal':
        _SharedAxisTransitionType_horizontal$,
    'SharedAxisTransitionType.scaled': _SharedAxisTransitionType_scaled$,
    'SharedAxisTransitionType.values': _SharedAxisTransitionType_values$,
  },
  {},
  {
    'SharedAxisPageTransitionsBuilder': m.ClassMirror(
      'SharedAxisPageTransitionsBuilder',
      {
        '#as': SharedAxisPageTransitionsBuilder_as$,
        '#is': SharedAxisPageTransitionsBuilder_is$,
        'transitionType': _SharedAxisPageTransitionsBuilder_transitionType$,
        'fillColor': _SharedAxisPageTransitionsBuilder_fillColor$,
        'buildTransitions': _SharedAxisPageTransitionsBuilder_buildTransitions$,
      },
      {},
    ),
    'SharedAxisTransition': m.ClassMirror(
      'SharedAxisTransition',
      {
        '#as': SharedAxisTransition_as$,
        '#is': SharedAxisTransition_is$,
        'animation': _SharedAxisTransition_animation$,
        'secondaryAnimation': _SharedAxisTransition_secondaryAnimation$,
        'transitionType': _SharedAxisTransition_transitionType$,
        'fillColor': _SharedAxisTransition_fillColor$,
        'child': _SharedAxisTransition_child$,
        'build': _SharedAxisTransition_build$,
      },
      {},
    ),
    'SharedAxisTransitionType': m.ClassMirror(
      'SharedAxisTransitionType',
      {},
      {},
    ),
  },
);
Function SharedAxisPageTransitionsBuilder_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SharedAxisPageTransitionsBuilder;
Function SharedAxisPageTransitionsBuilder_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SharedAxisPageTransitionsBuilder;
Function _SharedAxisPageTransitionsBuilder_transitionType$(
  m.Scope scope$,
  SharedAxisPageTransitionsBuilder target$,
) =>
    () {
      return target$.transitionType;
    };
Function _SharedAxisPageTransitionsBuilder_fillColor$(
  m.Scope scope$,
  SharedAxisPageTransitionsBuilder target$,
) =>
    () {
      return target$.fillColor;
    };
Function _SharedAxisPageTransitionsBuilder__$(m.Scope scope$) => ({
      required SharedAxisTransitionType transitionType,
      Color? fillColor,
    }) {
      return SharedAxisPageTransitionsBuilder(
        fillColor: fillColor,
        transitionType: transitionType,
      );
    };
Function _SharedAxisPageTransitionsBuilder_buildTransitions$<T>(
  m.Scope scope$,
  SharedAxisPageTransitionsBuilder target$,
) =>
    target$.buildTransitions<T>;
Function SharedAxisTransition_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SharedAxisTransition;
Function SharedAxisTransition_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SharedAxisTransition;
Function _SharedAxisTransition_animation$(
  m.Scope scope$,
  SharedAxisTransition target$,
) =>
    () {
      return target$.animation;
    };
Function _SharedAxisTransition_secondaryAnimation$(
  m.Scope scope$,
  SharedAxisTransition target$,
) =>
    () {
      return target$.secondaryAnimation;
    };
Function _SharedAxisTransition_transitionType$(
  m.Scope scope$,
  SharedAxisTransition target$,
) =>
    () {
      return target$.transitionType;
    };
Function _SharedAxisTransition_fillColor$(
  m.Scope scope$,
  SharedAxisTransition target$,
) =>
    () {
      return target$.fillColor;
    };
Function _SharedAxisTransition_child$(
  m.Scope scope$,
  SharedAxisTransition target$,
) =>
    () {
      return target$.child;
    };
Function _SharedAxisTransition__$(m.Scope scope$) => ({
      Key? key,
      required Animation<double> animation,
      required Animation<double> secondaryAnimation,
      required SharedAxisTransitionType transitionType,
      Color? fillColor,
      Widget? child,
    }) {
      return SharedAxisTransition(
        animation: animation,
        child: child,
        fillColor: fillColor,
        key: key,
        secondaryAnimation: secondaryAnimation,
        transitionType: transitionType,
      );
    };
Function _SharedAxisTransition_build$(
  m.Scope scope$,
  SharedAxisTransition target$,
) =>
    target$.build;
Function _SharedAxisTransitionType_vertical$(m.Scope scope$) =>
    () => SharedAxisTransitionType.vertical;
Function _SharedAxisTransitionType_horizontal$(m.Scope scope$) =>
    () => SharedAxisTransitionType.horizontal;
Function _SharedAxisTransitionType_scaled$(m.Scope scope$) =>
    () => SharedAxisTransitionType.scaled;
Function _SharedAxisTransitionType_values$(m.Scope scope$) =>
    () => SharedAxisTransitionType.values;
