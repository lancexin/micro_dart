// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:path_provider_platform_interface/src/method_channel_path_provider.dart';
import 'package:flutter/foundation.dart' show visibleForTesting;
import 'package:flutter/services.dart';
import 'package:platform/platform.dart';
import 'package:path_provider_platform_interface/path_provider_platform_interface.dart';

const libraryMirror = m.LibraryMirror(
  'package:path_provider_platform_interface/src/method_channel_path_provider.dart',
  {'MethodChannelPathProvider.': _MethodChannelPathProvider__$},
  {},
  {
    'MethodChannelPathProvider': m.ClassMirror(
      'MethodChannelPathProvider',
      {
        '#as': MethodChannelPathProvider_as$,
        '#is': MethodChannelPathProvider_is$,
        'methodChannel': _MethodChannelPathProvider_methodChannel$,
        'setMockPathProviderPlatform':
            _MethodChannelPathProvider_setMockPathProviderPlatform$,
        'getTemporaryPath': _MethodChannelPathProvider_getTemporaryPath$,
        'getApplicationSupportPath':
            _MethodChannelPathProvider_getApplicationSupportPath$,
        'getLibraryPath': _MethodChannelPathProvider_getLibraryPath$,
        'getApplicationDocumentsPath':
            _MethodChannelPathProvider_getApplicationDocumentsPath$,
        'getExternalStoragePath':
            _MethodChannelPathProvider_getExternalStoragePath$,
        'getExternalCachePaths':
            _MethodChannelPathProvider_getExternalCachePaths$,
        'getExternalStoragePaths':
            _MethodChannelPathProvider_getExternalStoragePaths$,
        'getDownloadsPath': _MethodChannelPathProvider_getDownloadsPath$,
      },
      {'methodChannel': _MethodChannelPathProvider_methodChannel_set$},
    )
  },
);
Function MethodChannelPathProvider_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MethodChannelPathProvider;
Function MethodChannelPathProvider_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MethodChannelPathProvider;
Function _MethodChannelPathProvider_methodChannel$(
  m.Scope scope$,
  MethodChannelPathProvider target$,
) =>
    () {
      return target$.methodChannel;
    };
void _MethodChannelPathProvider_methodChannel_set$(
  m.Scope scope$,
  MethodChannelPathProvider target$,
) =>
    (dynamic other$) {
      target$.methodChannel = other$;
    };
Function _MethodChannelPathProvider__$(m.Scope scope$) => () {
      return MethodChannelPathProvider();
    };
Function _MethodChannelPathProvider_setMockPathProviderPlatform$(
  m.Scope scope$,
  MethodChannelPathProvider target$,
) =>
    target$.setMockPathProviderPlatform;
Function _MethodChannelPathProvider_getTemporaryPath$(
  m.Scope scope$,
  MethodChannelPathProvider target$,
) =>
    target$.getTemporaryPath;
Function _MethodChannelPathProvider_getApplicationSupportPath$(
  m.Scope scope$,
  MethodChannelPathProvider target$,
) =>
    target$.getApplicationSupportPath;
Function _MethodChannelPathProvider_getLibraryPath$(
  m.Scope scope$,
  MethodChannelPathProvider target$,
) =>
    target$.getLibraryPath;
Function _MethodChannelPathProvider_getApplicationDocumentsPath$(
  m.Scope scope$,
  MethodChannelPathProvider target$,
) =>
    target$.getApplicationDocumentsPath;
Function _MethodChannelPathProvider_getExternalStoragePath$(
  m.Scope scope$,
  MethodChannelPathProvider target$,
) =>
    target$.getExternalStoragePath;
Function _MethodChannelPathProvider_getExternalCachePaths$(
  m.Scope scope$,
  MethodChannelPathProvider target$,
) =>
    target$.getExternalCachePaths;
Function _MethodChannelPathProvider_getExternalStoragePaths$(
  m.Scope scope$,
  MethodChannelPathProvider target$,
) =>
    target$.getExternalStoragePaths;
Function _MethodChannelPathProvider_getDownloadsPath$(
  m.Scope scope$,
  MethodChannelPathProvider target$,
) =>
    target$.getDownloadsPath;
