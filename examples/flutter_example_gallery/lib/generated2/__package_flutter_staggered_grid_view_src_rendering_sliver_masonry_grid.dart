// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter_staggered_grid_view/src/rendering/sliver_masonry_grid.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter_staggered_grid_view/src/foundation/extensions.dart';
import 'package:flutter_staggered_grid_view/src/rendering/sliver_simple_grid_delegate.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter_staggered_grid_view/src/rendering/sliver_masonry_grid.dart',
  {
    'SliverMasonryGridParentData.': _SliverMasonryGridParentData__$,
    'RenderSliverMasonryGrid.': _RenderSliverMasonryGrid__$,
  },
  {},
  {
    'SliverMasonryGridParentData': m.ClassMirror(
      'SliverMasonryGridParentData',
      {
        '#as': SliverMasonryGridParentData_as$,
        '#is': SliverMasonryGridParentData_is$,
        'crossAxisIndex': _SliverMasonryGridParentData_crossAxisIndex$,
        'lastMainAxisExtent': _SliverMasonryGridParentData_lastMainAxisExtent$,
        'toString': _SliverMasonryGridParentData_toString$,
      },
      {
        'crossAxisIndex': _SliverMasonryGridParentData_crossAxisIndex_set$,
        'lastMainAxisExtent':
            _SliverMasonryGridParentData_lastMainAxisExtent_set$,
      },
    ),
    'RenderSliverMasonryGrid': m.ClassMirror(
      'RenderSliverMasonryGrid',
      {
        '#as': RenderSliverMasonryGrid_as$,
        '#is': RenderSliverMasonryGrid_is$,
        'gridDelegate': _RenderSliverMasonryGrid_gridDelegate$,
        'mainAxisSpacing': _RenderSliverMasonryGrid_mainAxisSpacing$,
        'crossAxisSpacing': _RenderSliverMasonryGrid_crossAxisSpacing$,
        'setupParentData': _RenderSliverMasonryGrid_setupParentData$,
        'childCrossAxisPosition':
            _RenderSliverMasonryGrid_childCrossAxisPosition$,
        'addInitialChild': _RenderSliverMasonryGrid_addInitialChild$,
        'collectGarbage': _RenderSliverMasonryGrid_collectGarbage$,
        'insertAndLayoutLeadingChild':
            _RenderSliverMasonryGrid_insertAndLayoutLeadingChild$,
        'performLayout': _RenderSliverMasonryGrid_performLayout$,
      },
      {
        'gridDelegate': _RenderSliverMasonryGrid_gridDelegate_set$,
        'mainAxisSpacing': _RenderSliverMasonryGrid_mainAxisSpacing_set$,
        'crossAxisSpacing': _RenderSliverMasonryGrid_crossAxisSpacing_set$,
      },
    ),
  },
);
Function SliverMasonryGridParentData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverMasonryGridParentData;
Function SliverMasonryGridParentData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverMasonryGridParentData;
Function _SliverMasonryGridParentData_crossAxisIndex$(
  m.Scope scope$,
  SliverMasonryGridParentData target$,
) =>
    () {
      return target$.crossAxisIndex;
    };
void _SliverMasonryGridParentData_crossAxisIndex_set$(
  m.Scope scope$,
  SliverMasonryGridParentData target$,
) =>
    (dynamic other$) {
      target$.crossAxisIndex = other$;
    };
Function _SliverMasonryGridParentData_lastMainAxisExtent$(
  m.Scope scope$,
  SliverMasonryGridParentData target$,
) =>
    () {
      return target$.lastMainAxisExtent;
    };
void _SliverMasonryGridParentData_lastMainAxisExtent_set$(
  m.Scope scope$,
  SliverMasonryGridParentData target$,
) =>
    (dynamic other$) {
      target$.lastMainAxisExtent = other$;
    };
Function _SliverMasonryGridParentData__$(m.Scope scope$) => () {
      return SliverMasonryGridParentData();
    };
Function _SliverMasonryGridParentData_toString$(
  m.Scope scope$,
  SliverMasonryGridParentData target$,
) =>
    target$.toString;
Function RenderSliverMasonryGrid_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RenderSliverMasonryGrid;
Function RenderSliverMasonryGrid_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RenderSliverMasonryGrid;
Function _RenderSliverMasonryGrid_gridDelegate$(
  m.Scope scope$,
  RenderSliverMasonryGrid target$,
) =>
    () {
      return target$.gridDelegate;
    };
void _RenderSliverMasonryGrid_gridDelegate_set$(
  m.Scope scope$,
  RenderSliverMasonryGrid target$,
) =>
    (dynamic other$) {
      target$.gridDelegate = other$;
    };
Function _RenderSliverMasonryGrid_mainAxisSpacing$(
  m.Scope scope$,
  RenderSliverMasonryGrid target$,
) =>
    () {
      return target$.mainAxisSpacing;
    };
void _RenderSliverMasonryGrid_mainAxisSpacing_set$(
  m.Scope scope$,
  RenderSliverMasonryGrid target$,
) =>
    (dynamic other$) {
      target$.mainAxisSpacing = other$;
    };
Function _RenderSliverMasonryGrid_crossAxisSpacing$(
  m.Scope scope$,
  RenderSliverMasonryGrid target$,
) =>
    () {
      return target$.crossAxisSpacing;
    };
void _RenderSliverMasonryGrid_crossAxisSpacing_set$(
  m.Scope scope$,
  RenderSliverMasonryGrid target$,
) =>
    (dynamic other$) {
      target$.crossAxisSpacing = other$;
    };
Function _RenderSliverMasonryGrid__$(m.Scope scope$) => ({
      required RenderSliverBoxChildManager childManager,
      required SliverSimpleGridDelegate gridDelegate,
      required double mainAxisSpacing,
      required double crossAxisSpacing,
    }) {
      return RenderSliverMasonryGrid(
        childManager: childManager,
        crossAxisSpacing: crossAxisSpacing,
        gridDelegate: gridDelegate,
        mainAxisSpacing: mainAxisSpacing,
      );
    };
Function _RenderSliverMasonryGrid_setupParentData$(
  m.Scope scope$,
  RenderSliverMasonryGrid target$,
) =>
    target$.setupParentData;
Function _RenderSliverMasonryGrid_childCrossAxisPosition$(
  m.Scope scope$,
  RenderSliverMasonryGrid target$,
) =>
    target$.childCrossAxisPosition;
Function _RenderSliverMasonryGrid_addInitialChild$(
  m.Scope scope$,
  RenderSliverMasonryGrid target$,
) =>
    target$.addInitialChild;
Function _RenderSliverMasonryGrid_collectGarbage$(
  m.Scope scope$,
  RenderSliverMasonryGrid target$,
) =>
    target$.collectGarbage;
Function _RenderSliverMasonryGrid_insertAndLayoutLeadingChild$(
  m.Scope scope$,
  RenderSliverMasonryGrid target$,
) =>
    target$.insertAndLayoutLeadingChild;
Function _RenderSliverMasonryGrid_performLayout$(
  m.Scope scope$,
  RenderSliverMasonryGrid target$,
) =>
    target$.performLayout;
