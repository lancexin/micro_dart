// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:material_color_utilities/palettes/core_palette.dart';
import 'dart:math';
import 'package:material_color_utilities/hct/cam16.dart';
import 'package:material_color_utilities/palettes/tonal_palette.dart';

const libraryMirror = m.LibraryMirror(
  'package:material_color_utilities/palettes/core_palette.dart',
  {
    'CorePalette.size': _CorePalette_size$,
    'CorePalette.fromList': _CorePalette_fromList_$,
    'CorePalette.of': _CorePalette_of$,
    'CorePalette.contentOf': _CorePalette_contentOf$,
  },
  {},
  {
    'CorePalette': m.ClassMirror(
      'CorePalette',
      {
        '#as': CorePalette_as$,
        '#is': CorePalette_is$,
        'primary': _CorePalette_primary$,
        'secondary': _CorePalette_secondary$,
        'tertiary': _CorePalette_tertiary$,
        'neutral': _CorePalette_neutral$,
        'neutralVariant': _CorePalette_neutralVariant$,
        'error': _CorePalette_error$,
        'hashCode': _CorePalette_hashCode$,
        'asList': _CorePalette_asList$,
        '==': _CorePalette_eq$$,
        'toString': _CorePalette_toString$,
      },
      {},
    )
  },
);
Function CorePalette_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CorePalette;
Function CorePalette_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CorePalette;
Function _CorePalette_size$(m.Scope scope$) => () => CorePalette.size;
Function _CorePalette_primary$(
  m.Scope scope$,
  CorePalette target$,
) =>
    () {
      return target$.primary;
    };
Function _CorePalette_secondary$(
  m.Scope scope$,
  CorePalette target$,
) =>
    () {
      return target$.secondary;
    };
Function _CorePalette_tertiary$(
  m.Scope scope$,
  CorePalette target$,
) =>
    () {
      return target$.tertiary;
    };
Function _CorePalette_neutral$(
  m.Scope scope$,
  CorePalette target$,
) =>
    () {
      return target$.neutral;
    };
Function _CorePalette_neutralVariant$(
  m.Scope scope$,
  CorePalette target$,
) =>
    () {
      return target$.neutralVariant;
    };
Function _CorePalette_error$(
  m.Scope scope$,
  CorePalette target$,
) =>
    () {
      return target$.error;
    };
Function _CorePalette_hashCode$(
  m.Scope scope$,
  CorePalette target$,
) =>
    () {
      return target$.hashCode;
    };
Function _CorePalette_fromList_$(m.Scope scope$) => CorePalette.fromList;
Function _CorePalette_of$(m.Scope scope$) => CorePalette.of;
Function _CorePalette_contentOf$(m.Scope scope$) => CorePalette.contentOf;
Function _CorePalette_asList$(
  m.Scope scope$,
  CorePalette target$,
) =>
    target$.asList;
Function _CorePalette_eq$$(
  m.Scope scope$,
  CorePalette target$,
) =>
    (Object other$) => target$ == other$;
Function _CorePalette_toString$(
  m.Scope scope$,
  CorePalette target$,
) =>
    target$.toString;
