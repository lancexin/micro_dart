// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:path_provider/path_provider.dart';
import 'dart:io' show Directory;
import 'package:flutter/foundation.dart' show visibleForTesting;
import 'package:path_provider_platform_interface/path_provider_platform_interface.dart';

const libraryMirror = m.LibraryMirror(
  'package:path_provider/path_provider.dart',
  {
    'MissingPlatformDirectoryException.': _MissingPlatformDirectoryException__$,
    'getTemporaryDirectory': _getTemporaryDirectory$,
    'getApplicationSupportDirectory': _getApplicationSupportDirectory$,
    'getLibraryDirectory': _getLibraryDirectory$,
    'getApplicationDocumentsDirectory': _getApplicationDocumentsDirectory$,
    'getExternalStorageDirectory': _getExternalStorageDirectory$,
    'getExternalCacheDirectories': _getExternalCacheDirectories$,
    'getExternalStorageDirectories': _getExternalStorageDirectories$,
    'getDownloadsDirectory': _getDownloadsDirectory$,
  },
  {},
  {
    'MissingPlatformDirectoryException': m.ClassMirror(
      'MissingPlatformDirectoryException',
      {
        '#as': MissingPlatformDirectoryException_as$,
        '#is': MissingPlatformDirectoryException_is$,
        'message': _MissingPlatformDirectoryException_message$,
        'details': _MissingPlatformDirectoryException_details$,
        'toString': _MissingPlatformDirectoryException_toString$,
      },
      {},
    )
  },
);
Function MissingPlatformDirectoryException_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MissingPlatformDirectoryException;
Function MissingPlatformDirectoryException_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MissingPlatformDirectoryException;
Function _MissingPlatformDirectoryException_message$(
  m.Scope scope$,
  MissingPlatformDirectoryException target$,
) =>
    () {
      return target$.message;
    };
Function _MissingPlatformDirectoryException_details$(
  m.Scope scope$,
  MissingPlatformDirectoryException target$,
) =>
    () {
      return target$.details;
    };
Function _MissingPlatformDirectoryException__$(m.Scope scope$) => (
      String message, {
      Object? details,
    }) {
      return MissingPlatformDirectoryException(
        message,
        details: details,
      );
    };
Function _MissingPlatformDirectoryException_toString$(
  m.Scope scope$,
  MissingPlatformDirectoryException target$,
) =>
    target$.toString;
Function _getTemporaryDirectory$(m.Scope scope$) => getTemporaryDirectory;
Function _getApplicationSupportDirectory$(m.Scope scope$) =>
    getApplicationSupportDirectory;
Function _getLibraryDirectory$(m.Scope scope$) => getLibraryDirectory;
Function _getApplicationDocumentsDirectory$(m.Scope scope$) =>
    getApplicationDocumentsDirectory;
Function _getExternalStorageDirectory$(m.Scope scope$) =>
    getExternalStorageDirectory;
Function _getExternalCacheDirectories$(m.Scope scope$) =>
    getExternalCacheDirectories;
Function _getExternalStorageDirectories$(m.Scope scope$) =>
    getExternalStorageDirectories;
Function _getDownloadsDirectory$(m.Scope scope$) => getDownloadsDirectory;
