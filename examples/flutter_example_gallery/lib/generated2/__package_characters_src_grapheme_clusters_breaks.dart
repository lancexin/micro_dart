// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:characters/src/grapheme_clusters/breaks.dart';
import 'package:characters/src/grapheme_clusters/constants.dart';
import 'package:characters/src/grapheme_clusters/table.dart';

const libraryMirror = m.LibraryMirror(
  'package:characters/src/grapheme_clusters/breaks.dart',
  {
    'Breaks.': _Breaks__$,
    'BackBreaks.': _BackBreaks__$,
    'lookAhead': _lookAhead$,
    'lookAheadRegional': _lookAheadRegional$,
    'lookAheadPictorgraphicExtend': _lookAheadPictorgraphicExtend$,
    'isGraphemeClusterBoundary': _isGraphemeClusterBoundary$,
    'previousBreak': _previousBreak$,
    'nextBreak': _nextBreak$,
  },
  {},
  {
    'Breaks': m.ClassMirror(
      'Breaks',
      {
        '#as': Breaks_as$,
        '#is': Breaks_is$,
        'base': _Breaks_base$,
        'end': _Breaks_end$,
        'cursor': _Breaks_cursor$,
        'state': _Breaks_state$,
        'copy': _Breaks_copy$,
        'nextBreak': _Breaks_nextBreak$,
      },
      {
        'cursor': _Breaks_cursor_set$,
        'state': _Breaks_state_set$,
      },
    ),
    'BackBreaks': m.ClassMirror(
      'BackBreaks',
      {
        '#as': BackBreaks_as$,
        '#is': BackBreaks_is$,
        'base': _BackBreaks_base$,
        'start': _BackBreaks_start$,
        'cursor': _BackBreaks_cursor$,
        'state': _BackBreaks_state$,
        'copy': _BackBreaks_copy$,
        'nextBreak': _BackBreaks_nextBreak$,
      },
      {
        'cursor': _BackBreaks_cursor_set$,
        'state': _BackBreaks_state_set$,
      },
    ),
  },
);
Function Breaks_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Breaks;
Function Breaks_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Breaks;
Function _Breaks_base$(
  m.Scope scope$,
  Breaks target$,
) =>
    () {
      return target$.base;
    };
Function _Breaks_end$(
  m.Scope scope$,
  Breaks target$,
) =>
    () {
      return target$.end;
    };
Function _Breaks_cursor$(
  m.Scope scope$,
  Breaks target$,
) =>
    () {
      return target$.cursor;
    };
void _Breaks_cursor_set$(
  m.Scope scope$,
  Breaks target$,
) =>
    (dynamic other$) {
      target$.cursor = other$;
    };
Function _Breaks_state$(
  m.Scope scope$,
  Breaks target$,
) =>
    () {
      return target$.state;
    };
void _Breaks_state_set$(
  m.Scope scope$,
  Breaks target$,
) =>
    (dynamic other$) {
      target$.state = other$;
    };
Function _Breaks__$(m.Scope scope$) => (
      String base,
      int cursor,
      int end,
      int state,
    ) {
      return Breaks(
        base,
        cursor,
        end,
        state,
      );
    };
Function _Breaks_copy$(
  m.Scope scope$,
  Breaks target$,
) =>
    target$.copy;
Function _Breaks_nextBreak$(
  m.Scope scope$,
  Breaks target$,
) =>
    target$.nextBreak;
Function BackBreaks_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as BackBreaks;
Function BackBreaks_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is BackBreaks;
Function _BackBreaks_base$(
  m.Scope scope$,
  BackBreaks target$,
) =>
    () {
      return target$.base;
    };
Function _BackBreaks_start$(
  m.Scope scope$,
  BackBreaks target$,
) =>
    () {
      return target$.start;
    };
Function _BackBreaks_cursor$(
  m.Scope scope$,
  BackBreaks target$,
) =>
    () {
      return target$.cursor;
    };
void _BackBreaks_cursor_set$(
  m.Scope scope$,
  BackBreaks target$,
) =>
    (dynamic other$) {
      target$.cursor = other$;
    };
Function _BackBreaks_state$(
  m.Scope scope$,
  BackBreaks target$,
) =>
    () {
      return target$.state;
    };
void _BackBreaks_state_set$(
  m.Scope scope$,
  BackBreaks target$,
) =>
    (dynamic other$) {
      target$.state = other$;
    };
Function _BackBreaks__$(m.Scope scope$) => (
      String base,
      int cursor,
      int start,
      int state,
    ) {
      return BackBreaks(
        base,
        cursor,
        start,
        state,
      );
    };
Function _BackBreaks_copy$(
  m.Scope scope$,
  BackBreaks target$,
) =>
    target$.copy;
Function _BackBreaks_nextBreak$(
  m.Scope scope$,
  BackBreaks target$,
) =>
    target$.nextBreak;
Function _lookAhead$(m.Scope scope$) => lookAhead;
Function _lookAheadRegional$(m.Scope scope$) => lookAheadRegional;
Function _lookAheadPictorgraphicExtend$(m.Scope scope$) =>
    lookAheadPictorgraphicExtend;
Function _isGraphemeClusterBoundary$(m.Scope scope$) =>
    isGraphemeClusterBoundary;
Function _previousBreak$(m.Scope scope$) => previousBreak;
Function _nextBreak$(m.Scope scope$) => nextBreak;
