// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:intl/src/intl/bidi.dart';
import 'package:intl/src/global_state.dart';
import 'package:intl/src/intl/text_direction.dart';

const libraryMirror = m.LibraryMirror(
  'package:intl/src/intl/bidi.dart',
  {
    'Bidi.LRE': _Bidi_LRE$,
    'Bidi.RLE': _Bidi_RLE$,
    'Bidi.PDF': _Bidi_PDF$,
    'Bidi.LRM': _Bidi_LRM$,
    'Bidi.RLM': _Bidi_RLM$,
    'Bidi.': _Bidi__$,
    'Bidi.stripHtmlIfNeeded': _Bidi_stripHtmlIfNeeded$,
    'Bidi.startsWithLtr': _Bidi_startsWithLtr$,
    'Bidi.startsWithRtl': _Bidi_startsWithRtl$,
    'Bidi.endsWithLtr': _Bidi_endsWithLtr$,
    'Bidi.endsWithRtl': _Bidi_endsWithRtl$,
    'Bidi.hasAnyLtr': _Bidi_hasAnyLtr$,
    'Bidi.hasAnyRtl': _Bidi_hasAnyRtl$,
    'Bidi.isRtlLanguage': _Bidi_isRtlLanguage$,
    'Bidi.enforceRtlInHtml': _Bidi_enforceRtlInHtml$,
    'Bidi.enforceRtlInText': _Bidi_enforceRtlInText$,
    'Bidi.enforceLtrInHtml': _Bidi_enforceLtrInHtml$,
    'Bidi.enforceLtrInText': _Bidi_enforceLtrInText$,
    'Bidi.guardBracketInHtml': _Bidi_guardBracketInHtml$,
    'Bidi.guardBracketInText': _Bidi_guardBracketInText$,
    'Bidi.estimateDirectionOfText': _Bidi_estimateDirectionOfText$,
    'Bidi.normalizeHebrewQuote': _Bidi_normalizeHebrewQuote$,
    'Bidi.detectRtlDirectionality': _Bidi_detectRtlDirectionality$,
  },
  {},
  {
    'Bidi': m.ClassMirror(
      'Bidi',
      {
        '#as': Bidi_as$,
        '#is': Bidi_is$,
      },
      {},
    )
  },
);
Function Bidi_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Bidi;
Function Bidi_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Bidi;
Function _Bidi_LRE$(m.Scope scope$) => () => Bidi.LRE;
Function _Bidi_RLE$(m.Scope scope$) => () => Bidi.RLE;
Function _Bidi_PDF$(m.Scope scope$) => () => Bidi.PDF;
Function _Bidi_LRM$(m.Scope scope$) => () => Bidi.LRM;
Function _Bidi_RLM$(m.Scope scope$) => () => Bidi.RLM;
Function _Bidi__$(m.Scope scope$) => () {
      return Bidi();
    };
Function _Bidi_stripHtmlIfNeeded$(m.Scope scope$) => Bidi.stripHtmlIfNeeded;
Function _Bidi_startsWithLtr$(m.Scope scope$) => Bidi.startsWithLtr;
Function _Bidi_startsWithRtl$(m.Scope scope$) => Bidi.startsWithRtl;
Function _Bidi_endsWithLtr$(m.Scope scope$) => Bidi.endsWithLtr;
Function _Bidi_endsWithRtl$(m.Scope scope$) => Bidi.endsWithRtl;
Function _Bidi_hasAnyLtr$(m.Scope scope$) => Bidi.hasAnyLtr;
Function _Bidi_hasAnyRtl$(m.Scope scope$) => Bidi.hasAnyRtl;
Function _Bidi_isRtlLanguage$(m.Scope scope$) => Bidi.isRtlLanguage;
Function _Bidi_enforceRtlInHtml$(m.Scope scope$) => Bidi.enforceRtlInHtml;
Function _Bidi_enforceRtlInText$(m.Scope scope$) => Bidi.enforceRtlInText;
Function _Bidi_enforceLtrInHtml$(m.Scope scope$) => Bidi.enforceLtrInHtml;
Function _Bidi_enforceLtrInText$(m.Scope scope$) => Bidi.enforceLtrInText;
Function _Bidi_guardBracketInHtml$(m.Scope scope$) => Bidi.guardBracketInHtml;
Function _Bidi_guardBracketInText$(m.Scope scope$) => Bidi.guardBracketInText;
Function _Bidi_estimateDirectionOfText$(m.Scope scope$) =>
    Bidi.estimateDirectionOfText;
Function _Bidi_normalizeHebrewQuote$(m.Scope scope$) =>
    Bidi.normalizeHebrewQuote;
Function _Bidi_detectRtlDirectionality$(m.Scope scope$) =>
    Bidi.detectRtlDirectionality;
