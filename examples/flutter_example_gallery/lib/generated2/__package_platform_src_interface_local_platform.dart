// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:platform/src/interface/local_platform.dart';
import 'dart:io' show Platform, stdin, stdout;
import 'package:platform/src/interface/platform.dart';

const libraryMirror = m.LibraryMirror(
  'package:platform/src/interface/local_platform.dart',
  {'LocalPlatform.': _LocalPlatform__$},
  {},
  {
    'LocalPlatform': m.ClassMirror(
      'LocalPlatform',
      {
        '#as': LocalPlatform_as$,
        '#is': LocalPlatform_is$,
        'numberOfProcessors': _LocalPlatform_numberOfProcessors$,
        'pathSeparator': _LocalPlatform_pathSeparator$,
        'operatingSystem': _LocalPlatform_operatingSystem$,
        'operatingSystemVersion': _LocalPlatform_operatingSystemVersion$,
        'localHostname': _LocalPlatform_localHostname$,
        'environment': _LocalPlatform_environment$,
        'executable': _LocalPlatform_executable$,
        'resolvedExecutable': _LocalPlatform_resolvedExecutable$,
        'script': _LocalPlatform_script$,
        'executableArguments': _LocalPlatform_executableArguments$,
        'packageConfig': _LocalPlatform_packageConfig$,
        'version': _LocalPlatform_version$,
        'stdinSupportsAnsi': _LocalPlatform_stdinSupportsAnsi$,
        'stdoutSupportsAnsi': _LocalPlatform_stdoutSupportsAnsi$,
        'localeName': _LocalPlatform_localeName$,
      },
      {},
    )
  },
);
Function LocalPlatform_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as LocalPlatform;
Function LocalPlatform_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is LocalPlatform;
Function _LocalPlatform_numberOfProcessors$(
  m.Scope scope$,
  LocalPlatform target$,
) =>
    () {
      return target$.numberOfProcessors;
    };
Function _LocalPlatform_pathSeparator$(
  m.Scope scope$,
  LocalPlatform target$,
) =>
    () {
      return target$.pathSeparator;
    };
Function _LocalPlatform_operatingSystem$(
  m.Scope scope$,
  LocalPlatform target$,
) =>
    () {
      return target$.operatingSystem;
    };
Function _LocalPlatform_operatingSystemVersion$(
  m.Scope scope$,
  LocalPlatform target$,
) =>
    () {
      return target$.operatingSystemVersion;
    };
Function _LocalPlatform_localHostname$(
  m.Scope scope$,
  LocalPlatform target$,
) =>
    () {
      return target$.localHostname;
    };
Function _LocalPlatform_environment$(
  m.Scope scope$,
  LocalPlatform target$,
) =>
    () {
      return target$.environment;
    };
Function _LocalPlatform_executable$(
  m.Scope scope$,
  LocalPlatform target$,
) =>
    () {
      return target$.executable;
    };
Function _LocalPlatform_resolvedExecutable$(
  m.Scope scope$,
  LocalPlatform target$,
) =>
    () {
      return target$.resolvedExecutable;
    };
Function _LocalPlatform_script$(
  m.Scope scope$,
  LocalPlatform target$,
) =>
    () {
      return target$.script;
    };
Function _LocalPlatform_executableArguments$(
  m.Scope scope$,
  LocalPlatform target$,
) =>
    () {
      return target$.executableArguments;
    };
Function _LocalPlatform_packageConfig$(
  m.Scope scope$,
  LocalPlatform target$,
) =>
    () {
      return target$.packageConfig;
    };
Function _LocalPlatform_version$(
  m.Scope scope$,
  LocalPlatform target$,
) =>
    () {
      return target$.version;
    };
Function _LocalPlatform_stdinSupportsAnsi$(
  m.Scope scope$,
  LocalPlatform target$,
) =>
    () {
      return target$.stdinSupportsAnsi;
    };
Function _LocalPlatform_stdoutSupportsAnsi$(
  m.Scope scope$,
  LocalPlatform target$,
) =>
    () {
      return target$.stdoutSupportsAnsi;
    };
Function _LocalPlatform_localeName$(
  m.Scope scope$,
  LocalPlatform target$,
) =>
    () {
      return target$.localeName;
    };
Function _LocalPlatform__$(m.Scope scope$) => () {
      return LocalPlatform();
    };
