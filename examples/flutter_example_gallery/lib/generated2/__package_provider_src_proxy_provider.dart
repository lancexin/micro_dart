// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:provider/src/proxy_provider.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:provider/src/provider.dart';

const libraryMirror = m.LibraryMirror(
  'package:provider/src/proxy_provider.dart',
  {
    'ProxyProvider0.': _ProxyProvider0__$,
    'ProxyProvider.': _ProxyProvider__$,
    'ProxyProvider2.': _ProxyProvider2__$,
    'ProxyProvider3.': _ProxyProvider3__$,
    'ProxyProvider4.': _ProxyProvider4__$,
    'ProxyProvider5.': _ProxyProvider5__$,
    'ProxyProvider6.': _ProxyProvider6__$,
  },
  {},
  {
    'ProxyProvider0': m.ClassMirror(
      'ProxyProvider0',
      {
        '#as': ProxyProvider0_as$,
        '#is': ProxyProvider0_is$,
      },
      {},
    ),
    'ProxyProvider': m.ClassMirror(
      'ProxyProvider',
      {
        '#as': ProxyProvider_as$,
        '#is': ProxyProvider_is$,
      },
      {},
    ),
    'ProxyProvider2': m.ClassMirror(
      'ProxyProvider2',
      {
        '#as': ProxyProvider2_as$,
        '#is': ProxyProvider2_is$,
      },
      {},
    ),
    'ProxyProvider3': m.ClassMirror(
      'ProxyProvider3',
      {
        '#as': ProxyProvider3_as$,
        '#is': ProxyProvider3_is$,
      },
      {},
    ),
    'ProxyProvider4': m.ClassMirror(
      'ProxyProvider4',
      {
        '#as': ProxyProvider4_as$,
        '#is': ProxyProvider4_is$,
      },
      {},
    ),
    'ProxyProvider5': m.ClassMirror(
      'ProxyProvider5',
      {
        '#as': ProxyProvider5_as$,
        '#is': ProxyProvider5_is$,
      },
      {},
    ),
    'ProxyProvider6': m.ClassMirror(
      'ProxyProvider6',
      {
        '#as': ProxyProvider6_as$,
        '#is': ProxyProvider6_is$,
      },
      {},
    ),
  },
);
Function ProxyProvider0_as$<R>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ProxyProvider0<R>;
Function ProxyProvider0_is$<R>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ProxyProvider0<R>;
Function _ProxyProvider0__$(m.Scope scope$) => ({
      Key? key,
      m.FunctionPointer? create,
      required m.FunctionPointer update,
      m.FunctionPointer? updateShouldNotify,
      m.FunctionPointer? dispose,
      bool? lazy,
      m.FunctionPointer? builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      dynamic createProxy(BuildContext create_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            create!,
            [create_context$],
            {},
          );
      void disposeProxy(
        BuildContext dispose_context$,
        dynamic dispose_value$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            dispose!,
            [
              dispose_context$,
              dispose_value$,
            ],
            {},
          );
      dynamic updateProxy(
        BuildContext update_context$,
        dynamic update_value$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            update,
            [
              update_context$,
              update_value$,
            ],
            {},
          );
      bool updateShouldNotifyProxy(
        dynamic updateShouldNotify_previous$,
        dynamic updateShouldNotify_current$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            updateShouldNotify!,
            [
              updateShouldNotify_previous$,
              updateShouldNotify_current$,
            ],
            {},
          );
      return ProxyProvider0(
        builder: builder == null ? null : builderProxy,
        child: child,
        create: create == null ? null : createProxy,
        dispose: dispose == null ? null : disposeProxy,
        key: key,
        lazy: lazy,
        update: updateProxy,
        updateShouldNotify:
            updateShouldNotify == null ? null : updateShouldNotifyProxy,
      );
    };
Function ProxyProvider_as$<T, R>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ProxyProvider<T, R>;
Function ProxyProvider_is$<T, R>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ProxyProvider<T, R>;
Function _ProxyProvider__$(m.Scope scope$) => ({
      Key? key,
      m.FunctionPointer? create,
      required m.FunctionPointer update,
      m.FunctionPointer? updateShouldNotify,
      m.FunctionPointer? dispose,
      bool? lazy,
      m.FunctionPointer? builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      dynamic createProxy(BuildContext create_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            create!,
            [create_context$],
            {},
          );
      void disposeProxy(
        BuildContext dispose_context$,
        dynamic dispose_value$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            dispose!,
            [
              dispose_context$,
              dispose_value$,
            ],
            {},
          );
      dynamic updateProxy(
        BuildContext update_context$,
        dynamic update_value$,
        dynamic update_previous$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            update,
            [
              update_context$,
              update_value$,
              update_previous$,
            ],
            {},
          );
      bool updateShouldNotifyProxy(
        dynamic updateShouldNotify_previous$,
        dynamic updateShouldNotify_current$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            updateShouldNotify!,
            [
              updateShouldNotify_previous$,
              updateShouldNotify_current$,
            ],
            {},
          );
      return ProxyProvider(
        builder: builder == null ? null : builderProxy,
        child: child,
        create: create == null ? null : createProxy,
        dispose: dispose == null ? null : disposeProxy,
        key: key,
        lazy: lazy,
        update: updateProxy,
        updateShouldNotify:
            updateShouldNotify == null ? null : updateShouldNotifyProxy,
      );
    };
Function ProxyProvider2_as$<T, T2, R>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ProxyProvider2<T, T2, R>;
Function ProxyProvider2_is$<T, T2, R>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ProxyProvider2<T, T2, R>;
Function _ProxyProvider2__$(m.Scope scope$) => ({
      Key? key,
      m.FunctionPointer? create,
      required m.FunctionPointer update,
      m.FunctionPointer? updateShouldNotify,
      m.FunctionPointer? dispose,
      bool? lazy,
      m.FunctionPointer? builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      dynamic createProxy(BuildContext create_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            create!,
            [create_context$],
            {},
          );
      void disposeProxy(
        BuildContext dispose_context$,
        dynamic dispose_value$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            dispose!,
            [
              dispose_context$,
              dispose_value$,
            ],
            {},
          );
      dynamic updateProxy(
        BuildContext update_context$,
        dynamic update_value$,
        dynamic update_value2$,
        dynamic update_previous$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            update,
            [
              update_context$,
              update_value$,
              update_value2$,
              update_previous$,
            ],
            {},
          );
      bool updateShouldNotifyProxy(
        dynamic updateShouldNotify_previous$,
        dynamic updateShouldNotify_current$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            updateShouldNotify!,
            [
              updateShouldNotify_previous$,
              updateShouldNotify_current$,
            ],
            {},
          );
      return ProxyProvider2(
        builder: builder == null ? null : builderProxy,
        child: child,
        create: create == null ? null : createProxy,
        dispose: dispose == null ? null : disposeProxy,
        key: key,
        lazy: lazy,
        update: updateProxy,
        updateShouldNotify:
            updateShouldNotify == null ? null : updateShouldNotifyProxy,
      );
    };
Function ProxyProvider3_as$<T, T2, T3, R>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ProxyProvider3<T, T2, T3, R>;
Function ProxyProvider3_is$<T, T2, T3, R>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ProxyProvider3<T, T2, T3, R>;
Function _ProxyProvider3__$(m.Scope scope$) => ({
      Key? key,
      m.FunctionPointer? create,
      required m.FunctionPointer update,
      m.FunctionPointer? updateShouldNotify,
      m.FunctionPointer? dispose,
      bool? lazy,
      m.FunctionPointer? builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      dynamic createProxy(BuildContext create_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            create!,
            [create_context$],
            {},
          );
      void disposeProxy(
        BuildContext dispose_context$,
        dynamic dispose_value$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            dispose!,
            [
              dispose_context$,
              dispose_value$,
            ],
            {},
          );
      dynamic updateProxy(
        BuildContext update_context$,
        dynamic update_value$,
        dynamic update_value2$,
        dynamic update_value3$,
        dynamic update_previous$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            update,
            [
              update_context$,
              update_value$,
              update_value2$,
              update_value3$,
              update_previous$,
            ],
            {},
          );
      bool updateShouldNotifyProxy(
        dynamic updateShouldNotify_previous$,
        dynamic updateShouldNotify_current$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            updateShouldNotify!,
            [
              updateShouldNotify_previous$,
              updateShouldNotify_current$,
            ],
            {},
          );
      return ProxyProvider3(
        builder: builder == null ? null : builderProxy,
        child: child,
        create: create == null ? null : createProxy,
        dispose: dispose == null ? null : disposeProxy,
        key: key,
        lazy: lazy,
        update: updateProxy,
        updateShouldNotify:
            updateShouldNotify == null ? null : updateShouldNotifyProxy,
      );
    };
Function ProxyProvider4_as$<T, T2, T3, T4, R>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ProxyProvider4<T, T2, T3, T4, R>;
Function ProxyProvider4_is$<T, T2, T3, T4, R>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ProxyProvider4<T, T2, T3, T4, R>;
Function _ProxyProvider4__$(m.Scope scope$) => ({
      Key? key,
      m.FunctionPointer? create,
      required m.FunctionPointer update,
      m.FunctionPointer? updateShouldNotify,
      m.FunctionPointer? dispose,
      bool? lazy,
      m.FunctionPointer? builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      dynamic createProxy(BuildContext create_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            create!,
            [create_context$],
            {},
          );
      void disposeProxy(
        BuildContext dispose_context$,
        dynamic dispose_value$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            dispose!,
            [
              dispose_context$,
              dispose_value$,
            ],
            {},
          );
      dynamic updateProxy(
        BuildContext update_context$,
        dynamic update_value$,
        dynamic update_value2$,
        dynamic update_value3$,
        dynamic update_value4$,
        dynamic update_previous$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            update,
            [
              update_context$,
              update_value$,
              update_value2$,
              update_value3$,
              update_value4$,
              update_previous$,
            ],
            {},
          );
      bool updateShouldNotifyProxy(
        dynamic updateShouldNotify_previous$,
        dynamic updateShouldNotify_current$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            updateShouldNotify!,
            [
              updateShouldNotify_previous$,
              updateShouldNotify_current$,
            ],
            {},
          );
      return ProxyProvider4(
        builder: builder == null ? null : builderProxy,
        child: child,
        create: create == null ? null : createProxy,
        dispose: dispose == null ? null : disposeProxy,
        key: key,
        lazy: lazy,
        update: updateProxy,
        updateShouldNotify:
            updateShouldNotify == null ? null : updateShouldNotifyProxy,
      );
    };
Function ProxyProvider5_as$<T, T2, T3, T4, T5, R>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ProxyProvider5<T, T2, T3, T4, T5, R>;
Function ProxyProvider5_is$<T, T2, T3, T4, T5, R>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ProxyProvider5<T, T2, T3, T4, T5, R>;
Function _ProxyProvider5__$(m.Scope scope$) => ({
      Key? key,
      m.FunctionPointer? create,
      required m.FunctionPointer update,
      m.FunctionPointer? updateShouldNotify,
      m.FunctionPointer? dispose,
      bool? lazy,
      m.FunctionPointer? builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      dynamic createProxy(BuildContext create_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            create!,
            [create_context$],
            {},
          );
      void disposeProxy(
        BuildContext dispose_context$,
        dynamic dispose_value$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            dispose!,
            [
              dispose_context$,
              dispose_value$,
            ],
            {},
          );
      dynamic updateProxy(
        BuildContext update_context$,
        dynamic update_value$,
        dynamic update_value2$,
        dynamic update_value3$,
        dynamic update_value4$,
        dynamic update_value5$,
        dynamic update_previous$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            update,
            [
              update_context$,
              update_value$,
              update_value2$,
              update_value3$,
              update_value4$,
              update_value5$,
              update_previous$,
            ],
            {},
          );
      bool updateShouldNotifyProxy(
        dynamic updateShouldNotify_previous$,
        dynamic updateShouldNotify_current$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            updateShouldNotify!,
            [
              updateShouldNotify_previous$,
              updateShouldNotify_current$,
            ],
            {},
          );
      return ProxyProvider5(
        builder: builder == null ? null : builderProxy,
        child: child,
        create: create == null ? null : createProxy,
        dispose: dispose == null ? null : disposeProxy,
        key: key,
        lazy: lazy,
        update: updateProxy,
        updateShouldNotify:
            updateShouldNotify == null ? null : updateShouldNotifyProxy,
      );
    };
Function ProxyProvider6_as$<T, T2, T3, T4, T5, T6, R>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ProxyProvider6<T, T2, T3, T4, T5, T6, R>;
Function ProxyProvider6_is$<T, T2, T3, T4, T5, T6, R>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ProxyProvider6<T, T2, T3, T4, T5, T6, R>;
Function _ProxyProvider6__$(m.Scope scope$) => ({
      Key? key,
      m.FunctionPointer? create,
      required m.FunctionPointer update,
      m.FunctionPointer? updateShouldNotify,
      m.FunctionPointer? dispose,
      bool? lazy,
      m.FunctionPointer? builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      dynamic createProxy(BuildContext create_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            create!,
            [create_context$],
            {},
          );
      void disposeProxy(
        BuildContext dispose_context$,
        dynamic dispose_value$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            dispose!,
            [
              dispose_context$,
              dispose_value$,
            ],
            {},
          );
      dynamic updateProxy(
        BuildContext update_context$,
        dynamic update_value$,
        dynamic update_value2$,
        dynamic update_value3$,
        dynamic update_value4$,
        dynamic update_value5$,
        dynamic update_value6$,
        dynamic update_previous$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            update,
            [
              update_context$,
              update_value$,
              update_value2$,
              update_value3$,
              update_value4$,
              update_value5$,
              update_value6$,
              update_previous$,
            ],
            {},
          );
      bool updateShouldNotifyProxy(
        dynamic updateShouldNotify_previous$,
        dynamic updateShouldNotify_current$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            updateShouldNotify!,
            [
              updateShouldNotify_previous$,
              updateShouldNotify_current$,
            ],
            {},
          );
      return ProxyProvider6(
        builder: builder == null ? null : builderProxy,
        child: child,
        create: create == null ? null : createProxy,
        dispose: dispose == null ? null : disposeProxy,
        key: key,
        lazy: lazy,
        update: updateProxy,
        updateShouldNotify:
            updateShouldNotify == null ? null : updateShouldNotifyProxy,
      );
    };
