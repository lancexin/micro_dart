// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:collection/src/canonicalized_map.dart';
import 'dart:collection';

const libraryMirror = m.LibraryMirror(
  'package:collection/src/canonicalized_map.dart',
  {
    'CanonicalizedMap.': _CanonicalizedMap__$,
    'CanonicalizedMap.from': _CanonicalizedMap_from_$,
  },
  {},
  {
    'CanonicalizedMap': m.ClassMirror(
      'CanonicalizedMap',
      {
        '#as': CanonicalizedMap_as$,
        '#is': CanonicalizedMap_is$,
        'entries': _CanonicalizedMap_entries$,
        'isEmpty': _CanonicalizedMap_isEmpty$,
        'isNotEmpty': _CanonicalizedMap_isNotEmpty$,
        'keys': _CanonicalizedMap_keys$,
        'length': _CanonicalizedMap_length$,
        'values': _CanonicalizedMap_values$,
        '[]': _CanonicalizedMap_$index$$,
        '[]=': _CanonicalizedMap_$index_set$$,
        'addAll': _CanonicalizedMap_addAll$,
        'addEntries': _CanonicalizedMap_addEntries$,
        'cast': _CanonicalizedMap_cast$,
        'clear': _CanonicalizedMap_clear$,
        'containsKey': _CanonicalizedMap_containsKey$,
        'containsValue': _CanonicalizedMap_containsValue$,
        'forEach': _CanonicalizedMap_forEach$,
        'map': _CanonicalizedMap_map$,
        'putIfAbsent': _CanonicalizedMap_putIfAbsent$,
        'remove': _CanonicalizedMap_remove$,
        'removeWhere': _CanonicalizedMap_removeWhere$,
        'update': _CanonicalizedMap_update$,
        'updateAll': _CanonicalizedMap_updateAll$,
        'toString': _CanonicalizedMap_toString$,
      },
      {},
    )
  },
);
Function CanonicalizedMap_as$<C, K, V>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CanonicalizedMap<C, K, V>;
Function CanonicalizedMap_is$<C, K, V>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CanonicalizedMap<C, K, V>;
Function _CanonicalizedMap_entries$<C, K, V>(
  m.Scope scope$,
  CanonicalizedMap<C, K, V> target$,
) =>
    () {
      return target$.entries;
    };
Function _CanonicalizedMap_isEmpty$<C, K, V>(
  m.Scope scope$,
  CanonicalizedMap<C, K, V> target$,
) =>
    () {
      return target$.isEmpty;
    };
Function _CanonicalizedMap_isNotEmpty$<C, K, V>(
  m.Scope scope$,
  CanonicalizedMap<C, K, V> target$,
) =>
    () {
      return target$.isNotEmpty;
    };
Function _CanonicalizedMap_keys$<C, K, V>(
  m.Scope scope$,
  CanonicalizedMap<C, K, V> target$,
) =>
    () {
      return target$.keys;
    };
Function _CanonicalizedMap_length$<C, K, V>(
  m.Scope scope$,
  CanonicalizedMap<C, K, V> target$,
) =>
    () {
      return target$.length;
    };
Function _CanonicalizedMap_values$<C, K, V>(
  m.Scope scope$,
  CanonicalizedMap<C, K, V> target$,
) =>
    () {
      return target$.values;
    };
Function _CanonicalizedMap__$(m.Scope scope$) => (
      m.FunctionPointer canonicalize, {
      m.FunctionPointer? isValidKey,
    }) {
      dynamic canonicalizeProxy(dynamic canonicalize_key$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            canonicalize,
            [canonicalize_key$],
            {},
          );
      bool isValidKeyProxy(dynamic isValidKey_key$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            isValidKey!,
            [isValidKey_key$],
            {},
          );
      return CanonicalizedMap(
        canonicalizeProxy,
        isValidKey: isValidKey == null ? null : isValidKeyProxy,
      );
    };
Function _CanonicalizedMap_from_$(m.Scope scope$) => (
      Map other,
      m.FunctionPointer canonicalize, {
      m.FunctionPointer? isValidKey,
    }) {
      dynamic canonicalizeProxy(dynamic canonicalize_key$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            canonicalize,
            [canonicalize_key$],
            {},
          );
      bool isValidKeyProxy(dynamic isValidKey_key$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            isValidKey!,
            [isValidKey_key$],
            {},
          );
      return CanonicalizedMap.from(
        Map.from(other),
        canonicalizeProxy,
        isValidKey: isValidKey == null ? null : isValidKeyProxy,
      );
    };
Function _CanonicalizedMap_$index$$<C, K, V>(
  m.Scope scope$,
  CanonicalizedMap<C, K, V> target$,
) =>
    (Object? index) => target$[index];
Function _CanonicalizedMap_$index_set$$<C, K, V>(
  m.Scope scope$,
  CanonicalizedMap<C, K, V> target$,
) =>
    (
      K index,
      V other,
    ) =>
        target$[index] = other;
Function _CanonicalizedMap_addAll$<C, K, V>(
  m.Scope scope$,
  CanonicalizedMap<C, K, V> target$,
) =>
    target$.addAll;
Function _CanonicalizedMap_addEntries$<C, K, V>(
  m.Scope scope$,
  CanonicalizedMap<C, K, V> target$,
) =>
    target$.addEntries;
Function _CanonicalizedMap_cast$<C, K, V, K2, V2>(
  m.Scope scope$,
  CanonicalizedMap<C, K, V> target$,
) =>
    target$.cast<K2, V2>;
Function _CanonicalizedMap_clear$<C, K, V>(
  m.Scope scope$,
  CanonicalizedMap<C, K, V> target$,
) =>
    target$.clear;
Function _CanonicalizedMap_containsKey$<C, K, V>(
  m.Scope scope$,
  CanonicalizedMap<C, K, V> target$,
) =>
    target$.containsKey;
Function _CanonicalizedMap_containsValue$<C, K, V>(
  m.Scope scope$,
  CanonicalizedMap<C, K, V> target$,
) =>
    target$.containsValue;
Function _CanonicalizedMap_forEach$(
  m.Scope scope$,
  CanonicalizedMap target$,
) =>
    (m.FunctionPointer f) {
      void fProxy(
        dynamic f_$p0$,
        dynamic f_$p1$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            f,
            [
              f_$p0$,
              f_$p1$,
            ],
            {},
          );
      target$.forEach(fProxy);
    };
Function _CanonicalizedMap_map$(
  m.Scope scope$,
  CanonicalizedMap target$,
) =>
    (m.FunctionPointer transform) {
      MapEntry transformProxy(
        dynamic transform_$p0$,
        dynamic transform_$p1$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            transform,
            [
              transform_$p0$,
              transform_$p1$,
            ],
            {},
          );
      return target$.map(transformProxy);
    };
Function _CanonicalizedMap_putIfAbsent$(
  m.Scope scope$,
  CanonicalizedMap target$,
) =>
    (
      dynamic key,
      m.FunctionPointer ifAbsent,
    ) {
      dynamic ifAbsentProxy() => scope$.engine.callFunctionPointer(
            scope$,
            ifAbsent,
            [],
            {},
          );
      return target$.putIfAbsent(
        key,
        ifAbsentProxy,
      );
    };
Function _CanonicalizedMap_remove$<C, K, V>(
  m.Scope scope$,
  CanonicalizedMap<C, K, V> target$,
) =>
    target$.remove;
Function _CanonicalizedMap_removeWhere$(
  m.Scope scope$,
  CanonicalizedMap target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(
        dynamic test_key$,
        dynamic test_value$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            test,
            [
              test_key$,
              test_value$,
            ],
            {},
          );
      target$.removeWhere(testProxy);
    };
Function _CanonicalizedMap_update$(
  m.Scope scope$,
  CanonicalizedMap target$,
) =>
    (
      dynamic key,
      m.FunctionPointer update, {
      m.FunctionPointer? ifAbsent,
    }) {
      dynamic updateProxy(dynamic update_$p0$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            update,
            [update_$p0$],
            {},
          );
      dynamic ifAbsentProxy() => scope$.engine.callFunctionPointer(
            scope$,
            ifAbsent!,
            [],
            {},
          );
      return target$.update(
        key,
        updateProxy,
        ifAbsent: ifAbsent == null ? null : ifAbsentProxy,
      );
    };
Function _CanonicalizedMap_updateAll$(
  m.Scope scope$,
  CanonicalizedMap target$,
) =>
    (m.FunctionPointer update) {
      dynamic updateProxy(
        dynamic update_key$,
        dynamic update_value$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            update,
            [
              update_key$,
              update_value$,
            ],
            {},
          );
      target$.updateAll(updateProxy);
    };
Function _CanonicalizedMap_toString$<C, K, V>(
  m.Scope scope$,
  CanonicalizedMap<C, K, V> target$,
) =>
    target$.toString;
