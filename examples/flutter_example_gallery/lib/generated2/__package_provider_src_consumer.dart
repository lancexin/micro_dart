// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:provider/src/consumer.dart';
import 'package:flutter/widgets.dart';
import 'package:nested/nested.dart';
import 'package:provider/src/provider.dart';
import 'package:provider/src/selector.dart' show Selector;

const libraryMirror = m.LibraryMirror(
  'package:provider/src/consumer.dart',
  {
    'Consumer.': _Consumer__$,
    'Consumer2.': _Consumer2__$,
    'Consumer3.': _Consumer3__$,
    'Consumer4.': _Consumer4__$,
    'Consumer5.': _Consumer5__$,
    'Consumer6.': _Consumer6__$,
  },
  {},
  {
    'Consumer': m.ClassMirror(
      'Consumer',
      {
        '#as': Consumer_as$,
        '#is': Consumer_is$,
        'builder': _Consumer_builder$,
        'buildWithChild': _Consumer_buildWithChild$,
      },
      {},
    ),
    'Consumer2': m.ClassMirror(
      'Consumer2',
      {
        '#as': Consumer2_as$,
        '#is': Consumer2_is$,
        'builder': _Consumer2_builder$,
        'buildWithChild': _Consumer2_buildWithChild$,
      },
      {},
    ),
    'Consumer3': m.ClassMirror(
      'Consumer3',
      {
        '#as': Consumer3_as$,
        '#is': Consumer3_is$,
        'builder': _Consumer3_builder$,
        'buildWithChild': _Consumer3_buildWithChild$,
      },
      {},
    ),
    'Consumer4': m.ClassMirror(
      'Consumer4',
      {
        '#as': Consumer4_as$,
        '#is': Consumer4_is$,
        'builder': _Consumer4_builder$,
        'buildWithChild': _Consumer4_buildWithChild$,
      },
      {},
    ),
    'Consumer5': m.ClassMirror(
      'Consumer5',
      {
        '#as': Consumer5_as$,
        '#is': Consumer5_is$,
        'builder': _Consumer5_builder$,
        'buildWithChild': _Consumer5_buildWithChild$,
      },
      {},
    ),
    'Consumer6': m.ClassMirror(
      'Consumer6',
      {
        '#as': Consumer6_as$,
        '#is': Consumer6_is$,
        'builder': _Consumer6_builder$,
        'buildWithChild': _Consumer6_buildWithChild$,
      },
      {},
    ),
  },
);
Function Consumer_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Consumer<T>;
Function Consumer_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Consumer<T>;
Function _Consumer_builder$<T>(
  m.Scope scope$,
  Consumer<T> target$,
) =>
    () {
      return target$.builder;
    };
Function _Consumer__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        dynamic builder_value$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [
              builder_context$,
              builder_value$,
              builder_child$,
            ],
            {},
          );
      return Consumer(
        builder: builderProxy,
        child: child,
        key: key,
      );
    };
Function _Consumer_buildWithChild$<T>(
  m.Scope scope$,
  Consumer<T> target$,
) =>
    target$.buildWithChild;
Function Consumer2_as$<A, B>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Consumer2<A, B>;
Function Consumer2_is$<A, B>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Consumer2<A, B>;
Function _Consumer2_builder$<A, B>(
  m.Scope scope$,
  Consumer2<A, B> target$,
) =>
    () {
      return target$.builder;
    };
Function _Consumer2__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        dynamic builder_value$,
        dynamic builder_value2$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [
              builder_context$,
              builder_value$,
              builder_value2$,
              builder_child$,
            ],
            {},
          );
      return Consumer2(
        builder: builderProxy,
        child: child,
        key: key,
      );
    };
Function _Consumer2_buildWithChild$<A, B>(
  m.Scope scope$,
  Consumer2<A, B> target$,
) =>
    target$.buildWithChild;
Function Consumer3_as$<A, B, C>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Consumer3<A, B, C>;
Function Consumer3_is$<A, B, C>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Consumer3<A, B, C>;
Function _Consumer3_builder$<A, B, C>(
  m.Scope scope$,
  Consumer3<A, B, C> target$,
) =>
    () {
      return target$.builder;
    };
Function _Consumer3__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        dynamic builder_value$,
        dynamic builder_value2$,
        dynamic builder_value3$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [
              builder_context$,
              builder_value$,
              builder_value2$,
              builder_value3$,
              builder_child$,
            ],
            {},
          );
      return Consumer3(
        builder: builderProxy,
        child: child,
        key: key,
      );
    };
Function _Consumer3_buildWithChild$<A, B, C>(
  m.Scope scope$,
  Consumer3<A, B, C> target$,
) =>
    target$.buildWithChild;
Function Consumer4_as$<A, B, C, D>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Consumer4<A, B, C, D>;
Function Consumer4_is$<A, B, C, D>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Consumer4<A, B, C, D>;
Function _Consumer4_builder$<A, B, C, D>(
  m.Scope scope$,
  Consumer4<A, B, C, D> target$,
) =>
    () {
      return target$.builder;
    };
Function _Consumer4__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        dynamic builder_value$,
        dynamic builder_value2$,
        dynamic builder_value3$,
        dynamic builder_value4$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [
              builder_context$,
              builder_value$,
              builder_value2$,
              builder_value3$,
              builder_value4$,
              builder_child$,
            ],
            {},
          );
      return Consumer4(
        builder: builderProxy,
        child: child,
        key: key,
      );
    };
Function _Consumer4_buildWithChild$<A, B, C, D>(
  m.Scope scope$,
  Consumer4<A, B, C, D> target$,
) =>
    target$.buildWithChild;
Function Consumer5_as$<A, B, C, D, E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Consumer5<A, B, C, D, E>;
Function Consumer5_is$<A, B, C, D, E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Consumer5<A, B, C, D, E>;
Function _Consumer5_builder$<A, B, C, D, E>(
  m.Scope scope$,
  Consumer5<A, B, C, D, E> target$,
) =>
    () {
      return target$.builder;
    };
Function _Consumer5__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        dynamic builder_value$,
        dynamic builder_value2$,
        dynamic builder_value3$,
        dynamic builder_value4$,
        dynamic builder_value5$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [
              builder_context$,
              builder_value$,
              builder_value2$,
              builder_value3$,
              builder_value4$,
              builder_value5$,
              builder_child$,
            ],
            {},
          );
      return Consumer5(
        builder: builderProxy,
        child: child,
        key: key,
      );
    };
Function _Consumer5_buildWithChild$<A, B, C, D, E>(
  m.Scope scope$,
  Consumer5<A, B, C, D, E> target$,
) =>
    target$.buildWithChild;
Function Consumer6_as$<A, B, C, D, E, F>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Consumer6<A, B, C, D, E, F>;
Function Consumer6_is$<A, B, C, D, E, F>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Consumer6<A, B, C, D, E, F>;
Function _Consumer6_builder$<A, B, C, D, E, F>(
  m.Scope scope$,
  Consumer6<A, B, C, D, E, F> target$,
) =>
    () {
      return target$.builder;
    };
Function _Consumer6__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        dynamic builder_value$,
        dynamic builder_value2$,
        dynamic builder_value3$,
        dynamic builder_value4$,
        dynamic builder_value5$,
        dynamic builder_value6$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [
              builder_context$,
              builder_value$,
              builder_value2$,
              builder_value3$,
              builder_value4$,
              builder_value5$,
              builder_value6$,
              builder_child$,
            ],
            {},
          );
      return Consumer6(
        builder: builderProxy,
        child: child,
        key: key,
      );
    };
Function _Consumer6_buildWithChild$<A, B, C, D, E, F>(
  m.Scope scope$,
  Consumer6<A, B, C, D, E, F> target$,
) =>
    target$.buildWithChild;
