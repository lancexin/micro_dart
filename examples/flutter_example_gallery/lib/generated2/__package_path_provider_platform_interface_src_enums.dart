// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:path_provider_platform_interface/src/enums.dart';

const libraryMirror = m.LibraryMirror(
  'package:path_provider_platform_interface/src/enums.dart',
  {
    'StorageDirectory.music': _StorageDirectory_music$,
    'StorageDirectory.podcasts': _StorageDirectory_podcasts$,
    'StorageDirectory.ringtones': _StorageDirectory_ringtones$,
    'StorageDirectory.alarms': _StorageDirectory_alarms$,
    'StorageDirectory.notifications': _StorageDirectory_notifications$,
    'StorageDirectory.pictures': _StorageDirectory_pictures$,
    'StorageDirectory.movies': _StorageDirectory_movies$,
    'StorageDirectory.downloads': _StorageDirectory_downloads$,
    'StorageDirectory.dcim': _StorageDirectory_dcim$,
    'StorageDirectory.documents': _StorageDirectory_documents$,
    'StorageDirectory.values': _StorageDirectory_values$,
  },
  {},
  {
    'StorageDirectory': m.ClassMirror(
      'StorageDirectory',
      {},
      {},
    )
  },
);
Function _StorageDirectory_music$(m.Scope scope$) =>
    () => StorageDirectory.music;
Function _StorageDirectory_podcasts$(m.Scope scope$) =>
    () => StorageDirectory.podcasts;
Function _StorageDirectory_ringtones$(m.Scope scope$) =>
    () => StorageDirectory.ringtones;
Function _StorageDirectory_alarms$(m.Scope scope$) =>
    () => StorageDirectory.alarms;
Function _StorageDirectory_notifications$(m.Scope scope$) =>
    () => StorageDirectory.notifications;
Function _StorageDirectory_pictures$(m.Scope scope$) =>
    () => StorageDirectory.pictures;
Function _StorageDirectory_movies$(m.Scope scope$) =>
    () => StorageDirectory.movies;
Function _StorageDirectory_downloads$(m.Scope scope$) =>
    () => StorageDirectory.downloads;
Function _StorageDirectory_dcim$(m.Scope scope$) => () => StorageDirectory.dcim;
Function _StorageDirectory_documents$(m.Scope scope$) =>
    () => StorageDirectory.documents;
Function _StorageDirectory_values$(m.Scope scope$) =>
    () => StorageDirectory.values;
