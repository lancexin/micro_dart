// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:clock/src/clock.dart';
import 'package:clock/clock.dart';
import 'package:clock/src/stopwatch.dart';
import 'package:clock/src/utils.dart';

const libraryMirror = m.LibraryMirror(
  'package:clock/src/clock.dart',
  {
    'Clock.': _Clock__$,
    'Clock.fixed': _Clock_fixed_$,
  },
  {},
  {
    'Clock': m.ClassMirror(
      'Clock',
      {
        '#as': Clock_as$,
        '#is': Clock_is$,
        'now': _Clock_now$,
        'agoBy': _Clock_agoBy$,
        'fromNowBy': _Clock_fromNowBy$,
        'ago': _Clock_ago$,
        'fromNow': _Clock_fromNow$,
        'microsAgo': _Clock_microsAgo$,
        'microsFromNow': _Clock_microsFromNow$,
        'millisAgo': _Clock_millisAgo$,
        'millisFromNow': _Clock_millisFromNow$,
        'secondsAgo': _Clock_secondsAgo$,
        'secondsFromNow': _Clock_secondsFromNow$,
        'minutesAgo': _Clock_minutesAgo$,
        'minutesFromNow': _Clock_minutesFromNow$,
        'hoursAgo': _Clock_hoursAgo$,
        'hoursFromNow': _Clock_hoursFromNow$,
        'daysAgo': _Clock_daysAgo$,
        'daysFromNow': _Clock_daysFromNow$,
        'weeksAgo': _Clock_weeksAgo$,
        'weeksFromNow': _Clock_weeksFromNow$,
        'monthsAgo': _Clock_monthsAgo$,
        'monthsFromNow': _Clock_monthsFromNow$,
        'yearsAgo': _Clock_yearsAgo$,
        'yearsFromNow': _Clock_yearsFromNow$,
        'stopwatch': _Clock_stopwatch$,
      },
      {},
    )
  },
);
Function Clock_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Clock;
Function Clock_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Clock;
Function _Clock__$(m.Scope scope$) => ([m.FunctionPointer? currentTime]) {
      if (currentTime == null) {
        return Clock();
      }
      DateTime currentTimeProxy() => scope$.engine.callFunctionPointer(
            scope$,
            currentTime!,
            [],
            {},
          );
      return Clock(currentTime == null ? systemTime : currentTimeProxy);
    };
Function _Clock_fixed_$(m.Scope scope$) => Clock.fixed;
Function _Clock_now$(
  m.Scope scope$,
  Clock target$,
) =>
    target$.now;
Function _Clock_agoBy$(
  m.Scope scope$,
  Clock target$,
) =>
    target$.agoBy;
Function _Clock_fromNowBy$(
  m.Scope scope$,
  Clock target$,
) =>
    target$.fromNowBy;
Function _Clock_ago$(
  m.Scope scope$,
  Clock target$,
) =>
    target$.ago;
Function _Clock_fromNow$(
  m.Scope scope$,
  Clock target$,
) =>
    target$.fromNow;
Function _Clock_microsAgo$(
  m.Scope scope$,
  Clock target$,
) =>
    target$.microsAgo;
Function _Clock_microsFromNow$(
  m.Scope scope$,
  Clock target$,
) =>
    target$.microsFromNow;
Function _Clock_millisAgo$(
  m.Scope scope$,
  Clock target$,
) =>
    target$.millisAgo;
Function _Clock_millisFromNow$(
  m.Scope scope$,
  Clock target$,
) =>
    target$.millisFromNow;
Function _Clock_secondsAgo$(
  m.Scope scope$,
  Clock target$,
) =>
    target$.secondsAgo;
Function _Clock_secondsFromNow$(
  m.Scope scope$,
  Clock target$,
) =>
    target$.secondsFromNow;
Function _Clock_minutesAgo$(
  m.Scope scope$,
  Clock target$,
) =>
    target$.minutesAgo;
Function _Clock_minutesFromNow$(
  m.Scope scope$,
  Clock target$,
) =>
    target$.minutesFromNow;
Function _Clock_hoursAgo$(
  m.Scope scope$,
  Clock target$,
) =>
    target$.hoursAgo;
Function _Clock_hoursFromNow$(
  m.Scope scope$,
  Clock target$,
) =>
    target$.hoursFromNow;
Function _Clock_daysAgo$(
  m.Scope scope$,
  Clock target$,
) =>
    target$.daysAgo;
Function _Clock_daysFromNow$(
  m.Scope scope$,
  Clock target$,
) =>
    target$.daysFromNow;
Function _Clock_weeksAgo$(
  m.Scope scope$,
  Clock target$,
) =>
    target$.weeksAgo;
Function _Clock_weeksFromNow$(
  m.Scope scope$,
  Clock target$,
) =>
    target$.weeksFromNow;
Function _Clock_monthsAgo$(
  m.Scope scope$,
  Clock target$,
) =>
    target$.monthsAgo;
Function _Clock_monthsFromNow$(
  m.Scope scope$,
  Clock target$,
) =>
    target$.monthsFromNow;
Function _Clock_yearsAgo$(
  m.Scope scope$,
  Clock target$,
) =>
    target$.yearsAgo;
Function _Clock_yearsFromNow$(
  m.Scope scope$,
  Clock target$,
) =>
    target$.yearsFromNow;
Function _Clock_stopwatch$(
  m.Scope scope$,
  Clock target$,
) =>
    target$.stopwatch;
