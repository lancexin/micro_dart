// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:collection/src/equality.dart';
import 'dart:collection';
import 'package:collection/src/comparators.dart';

const libraryMirror = m.LibraryMirror(
  'package:collection/src/equality.dart',
  {
    'Equality.': _Equality__$,
    'EqualityBy.': _EqualityBy__$,
    'DefaultEquality.': _DefaultEquality__$,
    'IdentityEquality.': _IdentityEquality__$,
    'IterableEquality.': _IterableEquality__$,
    'ListEquality.': _ListEquality__$,
    'UnorderedIterableEquality.': _UnorderedIterableEquality__$,
    'SetEquality.': _SetEquality__$,
    'MapEquality.': _MapEquality__$,
    'MultiEquality.': _MultiEquality__$,
    'DeepCollectionEquality.': _DeepCollectionEquality__$,
    'DeepCollectionEquality.unordered': _DeepCollectionEquality_unordered_$,
    'CaseInsensitiveEquality.': _CaseInsensitiveEquality__$,
  },
  {},
  {
    'Equality': m.ClassMirror(
      'Equality',
      {
        '#as': Equality_as$,
        '#is': Equality_is$,
        'equals': _Equality_equals$,
        'hash': _Equality_hash$,
        'isValidKey': _Equality_isValidKey$,
      },
      {},
    ),
    'EqualityBy': m.ClassMirror(
      'EqualityBy',
      {
        '#as': EqualityBy_as$,
        '#is': EqualityBy_is$,
        'equals': _EqualityBy_equals$,
        'hash': _EqualityBy_hash$,
        'isValidKey': _EqualityBy_isValidKey$,
      },
      {},
    ),
    'DefaultEquality': m.ClassMirror(
      'DefaultEquality',
      {
        '#as': DefaultEquality_as$,
        '#is': DefaultEquality_is$,
        'equals': _DefaultEquality_equals$,
        'hash': _DefaultEquality_hash$,
        'isValidKey': _DefaultEquality_isValidKey$,
      },
      {},
    ),
    'IdentityEquality': m.ClassMirror(
      'IdentityEquality',
      {
        '#as': IdentityEquality_as$,
        '#is': IdentityEquality_is$,
        'equals': _IdentityEquality_equals$,
        'hash': _IdentityEquality_hash$,
        'isValidKey': _IdentityEquality_isValidKey$,
      },
      {},
    ),
    'IterableEquality': m.ClassMirror(
      'IterableEquality',
      {
        '#as': IterableEquality_as$,
        '#is': IterableEquality_is$,
        'equals': _IterableEquality_equals$,
        'hash': _IterableEquality_hash$,
        'isValidKey': _IterableEquality_isValidKey$,
      },
      {},
    ),
    'ListEquality': m.ClassMirror(
      'ListEquality',
      {
        '#as': ListEquality_as$,
        '#is': ListEquality_is$,
        'equals': _ListEquality_equals$,
        'hash': _ListEquality_hash$,
        'isValidKey': _ListEquality_isValidKey$,
      },
      {},
    ),
    'UnorderedIterableEquality': m.ClassMirror(
      'UnorderedIterableEquality',
      {
        '#as': UnorderedIterableEquality_as$,
        '#is': UnorderedIterableEquality_is$,
        'isValidKey': _UnorderedIterableEquality_isValidKey$,
      },
      {},
    ),
    'SetEquality': m.ClassMirror(
      'SetEquality',
      {
        '#as': SetEquality_as$,
        '#is': SetEquality_is$,
        'isValidKey': _SetEquality_isValidKey$,
      },
      {},
    ),
    'MapEquality': m.ClassMirror(
      'MapEquality',
      {
        '#as': MapEquality_as$,
        '#is': MapEquality_is$,
        'equals': _MapEquality_equals$,
        'hash': _MapEquality_hash$,
        'isValidKey': _MapEquality_isValidKey$,
      },
      {},
    ),
    'MultiEquality': m.ClassMirror(
      'MultiEquality',
      {
        '#as': MultiEquality_as$,
        '#is': MultiEquality_is$,
        'equals': _MultiEquality_equals$,
        'hash': _MultiEquality_hash$,
        'isValidKey': _MultiEquality_isValidKey$,
      },
      {},
    ),
    'DeepCollectionEquality': m.ClassMirror(
      'DeepCollectionEquality',
      {
        '#as': DeepCollectionEquality_as$,
        '#is': DeepCollectionEquality_is$,
        'equals': _DeepCollectionEquality_equals$,
        'hash': _DeepCollectionEquality_hash$,
        'isValidKey': _DeepCollectionEquality_isValidKey$,
      },
      {},
    ),
    'CaseInsensitiveEquality': m.ClassMirror(
      'CaseInsensitiveEquality',
      {
        '#as': CaseInsensitiveEquality_as$,
        '#is': CaseInsensitiveEquality_is$,
        'equals': _CaseInsensitiveEquality_equals$,
        'hash': _CaseInsensitiveEquality_hash$,
        'isValidKey': _CaseInsensitiveEquality_isValidKey$,
      },
      {},
    ),
  },
);
Function Equality_as$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Equality<E>;
Function Equality_is$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Equality<E>;
Function _Equality__$(m.Scope scope$) => () {
      return Equality();
    };
Function _Equality_equals$<E>(
  m.Scope scope$,
  Equality<E> target$,
) =>
    target$.equals;
Function _Equality_hash$<E>(
  m.Scope scope$,
  Equality<E> target$,
) =>
    target$.hash;
Function _Equality_isValidKey$<E>(
  m.Scope scope$,
  Equality<E> target$,
) =>
    target$.isValidKey;
Function EqualityBy_as$<E, F>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as EqualityBy<E, F>;
Function EqualityBy_is$<E, F>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is EqualityBy<E, F>;
Function _EqualityBy__$(m.Scope scope$) => (
      m.FunctionPointer comparisonKey, [
      Equality? inner,
    ]) {
      dynamic comparisonKeyProxy(dynamic comparisonKey_$p0$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            comparisonKey,
            [comparisonKey_$p0$],
            {},
          );
      if (inner == null) {
        return EqualityBy(comparisonKeyProxy);
      }
      return EqualityBy(
        comparisonKeyProxy,
        inner!,
      );
    };
Function _EqualityBy_equals$<E, F>(
  m.Scope scope$,
  EqualityBy<E, F> target$,
) =>
    target$.equals;
Function _EqualityBy_hash$<E, F>(
  m.Scope scope$,
  EqualityBy<E, F> target$,
) =>
    target$.hash;
Function _EqualityBy_isValidKey$<E, F>(
  m.Scope scope$,
  EqualityBy<E, F> target$,
) =>
    target$.isValidKey;
Function DefaultEquality_as$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DefaultEquality<E>;
Function DefaultEquality_is$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DefaultEquality<E>;
Function _DefaultEquality__$(m.Scope scope$) => () {
      return DefaultEquality();
    };
Function _DefaultEquality_equals$<E>(
  m.Scope scope$,
  DefaultEquality<E> target$,
) =>
    target$.equals;
Function _DefaultEquality_hash$<E>(
  m.Scope scope$,
  DefaultEquality<E> target$,
) =>
    target$.hash;
Function _DefaultEquality_isValidKey$<E>(
  m.Scope scope$,
  DefaultEquality<E> target$,
) =>
    target$.isValidKey;
Function IdentityEquality_as$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as IdentityEquality<E>;
Function IdentityEquality_is$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is IdentityEquality<E>;
Function _IdentityEquality__$(m.Scope scope$) => () {
      return IdentityEquality();
    };
Function _IdentityEquality_equals$<E>(
  m.Scope scope$,
  IdentityEquality<E> target$,
) =>
    target$.equals;
Function _IdentityEquality_hash$<E>(
  m.Scope scope$,
  IdentityEquality<E> target$,
) =>
    target$.hash;
Function _IdentityEquality_isValidKey$<E>(
  m.Scope scope$,
  IdentityEquality<E> target$,
) =>
    target$.isValidKey;
Function IterableEquality_as$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as IterableEquality<E>;
Function IterableEquality_is$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is IterableEquality<E>;
Function _IterableEquality__$(m.Scope scope$) => ([Equality? elementEquality]) {
      if (elementEquality == null) {
        return IterableEquality();
      }
      return IterableEquality(elementEquality!);
    };
Function _IterableEquality_equals$<E>(
  m.Scope scope$,
  IterableEquality<E> target$,
) =>
    target$.equals;
Function _IterableEquality_hash$<E>(
  m.Scope scope$,
  IterableEquality<E> target$,
) =>
    target$.hash;
Function _IterableEquality_isValidKey$<E>(
  m.Scope scope$,
  IterableEquality<E> target$,
) =>
    target$.isValidKey;
Function ListEquality_as$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ListEquality<E>;
Function ListEquality_is$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ListEquality<E>;
Function _ListEquality__$(m.Scope scope$) => ([Equality? elementEquality]) {
      if (elementEquality == null) {
        return ListEquality();
      }
      return ListEquality(elementEquality!);
    };
Function _ListEquality_equals$<E>(
  m.Scope scope$,
  ListEquality<E> target$,
) =>
    target$.equals;
Function _ListEquality_hash$<E>(
  m.Scope scope$,
  ListEquality<E> target$,
) =>
    target$.hash;
Function _ListEquality_isValidKey$<E>(
  m.Scope scope$,
  ListEquality<E> target$,
) =>
    target$.isValidKey;
Function UnorderedIterableEquality_as$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as UnorderedIterableEquality<E>;
Function UnorderedIterableEquality_is$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is UnorderedIterableEquality<E>;
Function _UnorderedIterableEquality__$(m.Scope scope$) =>
    ([Equality? elementEquality]) {
      if (elementEquality == null) {
        return UnorderedIterableEquality();
      }
      return UnorderedIterableEquality(elementEquality!);
    };
Function _UnorderedIterableEquality_isValidKey$<E>(
  m.Scope scope$,
  UnorderedIterableEquality<E> target$,
) =>
    target$.isValidKey;
Function SetEquality_as$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SetEquality<E>;
Function SetEquality_is$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SetEquality<E>;
Function _SetEquality__$(m.Scope scope$) => ([Equality? elementEquality]) {
      if (elementEquality == null) {
        return SetEquality();
      }
      return SetEquality(elementEquality!);
    };
Function _SetEquality_isValidKey$<E>(
  m.Scope scope$,
  SetEquality<E> target$,
) =>
    target$.isValidKey;
Function MapEquality_as$<K, V>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MapEquality<K, V>;
Function MapEquality_is$<K, V>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MapEquality<K, V>;
Function _MapEquality__$(m.Scope scope$) => ({
      Equality? keys,
      Equality? values,
    }) {
      return MapEquality(
        keys: keys ?? const DefaultEquality<Never>(),
        values: values ?? const DefaultEquality<Never>(),
      );
    };
Function _MapEquality_equals$<K, V>(
  m.Scope scope$,
  MapEquality<K, V> target$,
) =>
    target$.equals;
Function _MapEquality_hash$<K, V>(
  m.Scope scope$,
  MapEquality<K, V> target$,
) =>
    target$.hash;
Function _MapEquality_isValidKey$<K, V>(
  m.Scope scope$,
  MapEquality<K, V> target$,
) =>
    target$.isValidKey;
Function MultiEquality_as$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MultiEquality<E>;
Function MultiEquality_is$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MultiEquality<E>;
Function _MultiEquality__$(m.Scope scope$) => (Iterable equalities) {
      return MultiEquality(Iterable.castFrom(equalities));
    };
Function _MultiEquality_equals$<E>(
  m.Scope scope$,
  MultiEquality<E> target$,
) =>
    target$.equals;
Function _MultiEquality_hash$<E>(
  m.Scope scope$,
  MultiEquality<E> target$,
) =>
    target$.hash;
Function _MultiEquality_isValidKey$<E>(
  m.Scope scope$,
  MultiEquality<E> target$,
) =>
    target$.isValidKey;
Function DeepCollectionEquality_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DeepCollectionEquality;
Function DeepCollectionEquality_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DeepCollectionEquality;
Function _DeepCollectionEquality__$(m.Scope scope$) =>
    ([Equality<dynamic>? base]) {
      if (base == null) {
        return DeepCollectionEquality();
      }
      return DeepCollectionEquality(base!);
    };
Function _DeepCollectionEquality_unordered_$(m.Scope scope$) =>
    DeepCollectionEquality.unordered;
Function _DeepCollectionEquality_equals$(
  m.Scope scope$,
  DeepCollectionEquality target$,
) =>
    target$.equals;
Function _DeepCollectionEquality_hash$(
  m.Scope scope$,
  DeepCollectionEquality target$,
) =>
    target$.hash;
Function _DeepCollectionEquality_isValidKey$(
  m.Scope scope$,
  DeepCollectionEquality target$,
) =>
    target$.isValidKey;
Function CaseInsensitiveEquality_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CaseInsensitiveEquality;
Function CaseInsensitiveEquality_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CaseInsensitiveEquality;
Function _CaseInsensitiveEquality__$(m.Scope scope$) => () {
      return CaseInsensitiveEquality();
    };
Function _CaseInsensitiveEquality_equals$(
  m.Scope scope$,
  CaseInsensitiveEquality target$,
) =>
    target$.equals;
Function _CaseInsensitiveEquality_hash$(
  m.Scope scope$,
  CaseInsensitiveEquality target$,
) =>
    target$.hash;
Function _CaseInsensitiveEquality_isValidKey$(
  m.Scope scope$,
  CaseInsensitiveEquality target$,
) =>
    target$.isValidKey;
