// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:url_launcher_platform_interface/src/url_launcher_platform.dart';
import 'dart:async';
import 'package:plugin_platform_interface/plugin_platform_interface.dart';
import 'package:url_launcher_platform_interface/link.dart';
import 'package:url_launcher_platform_interface/method_channel_url_launcher.dart';
import 'package:url_launcher_platform_interface/url_launcher_platform_interface.dart';

const libraryMirror = m.LibraryMirror(
  'package:url_launcher_platform_interface/src/url_launcher_platform.dart',
  {'UrlLauncherPlatform.instance': _UrlLauncherPlatform_instance$},
  {'UrlLauncherPlatform.instance': _UrlLauncherPlatform_instance_set$},
  {
    'UrlLauncherPlatform': m.ClassMirror(
      'UrlLauncherPlatform',
      {
        '#as': UrlLauncherPlatform_as$,
        '#is': UrlLauncherPlatform_is$,
        'linkDelegate': _UrlLauncherPlatform_linkDelegate$,
        'canLaunch': _UrlLauncherPlatform_canLaunch$,
        'launch': _UrlLauncherPlatform_launch$,
        'launchUrl': _UrlLauncherPlatform_launchUrl$,
        'closeWebView': _UrlLauncherPlatform_closeWebView$,
      },
      {},
    )
  },
);
Function UrlLauncherPlatform_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as UrlLauncherPlatform;
Function UrlLauncherPlatform_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is UrlLauncherPlatform;
Function _UrlLauncherPlatform_instance$(m.Scope scope$) =>
    () => UrlLauncherPlatform.instance;
void _UrlLauncherPlatform_instance_set$(UrlLauncherPlatform other$) {
  UrlLauncherPlatform.instance = other$;
}

Function _UrlLauncherPlatform_linkDelegate$(
  m.Scope scope$,
  UrlLauncherPlatform target$,
) =>
    () {
      return target$.linkDelegate;
    };
Function _UrlLauncherPlatform_canLaunch$(
  m.Scope scope$,
  UrlLauncherPlatform target$,
) =>
    target$.canLaunch;
Function _UrlLauncherPlatform_launch$(
  m.Scope scope$,
  UrlLauncherPlatform target$,
) =>
    target$.launch;
Function _UrlLauncherPlatform_launchUrl$(
  m.Scope scope$,
  UrlLauncherPlatform target$,
) =>
    target$.launchUrl;
Function _UrlLauncherPlatform_closeWebView$(
  m.Scope scope$,
  UrlLauncherPlatform target$,
) =>
    target$.closeWebView;
