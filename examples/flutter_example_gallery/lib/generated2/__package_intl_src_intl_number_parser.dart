// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:intl/src/intl/number_parser.dart';
import 'package:intl/number_symbols.dart';
import 'package:intl/src/intl/constants.dart';
import 'package:intl/src/intl/number_format.dart';
import 'package:intl/src/intl/number_format_parser.dart';
import 'package:intl/src/intl/string_stack.dart';

const libraryMirror = m.LibraryMirror(
  'package:intl/src/intl/number_parser.dart',
  {'NumberParser.': _NumberParser__$},
  {},
  {
    'NumberParser': m.ClassMirror(
      'NumberParser',
      {
        '#as': NumberParser_as$,
        '#is': NumberParser_is$,
        'format': _NumberParser_format$,
        'text': _NumberParser_text$,
        'input': _NumberParser_input$,
        'value': _NumberParser_value$,
        'gotPositive': _NumberParser_gotPositive$,
        'gotNegative': _NumberParser_gotNegative$,
        'gotPositiveSuffix': _NumberParser_gotPositiveSuffix$,
        'gotNegativeSuffix': _NumberParser_gotNegativeSuffix$,
        'done': _NumberParser_done$,
        'prefixesSkipped': _NumberParser_prefixesSkipped$,
        'scale': _NumberParser_scale$,
        'symbols': _NumberParser_symbols$,
        'replacements': _NumberParser_replacements$,
        'groupingIsNotASpaceOrElseItIsSpaceFollowedByADigit':
            _NumberParser_groupingIsNotASpaceOrElseItIsSpaceFollowedByADigit$,
        'invalidFormat': _NumberParser_invalidFormat$,
        'handleSpace': _NumberParser_handleSpace$,
        'asDigit': _NumberParser_asDigit$,
        'checkPrefixes': _NumberParser_checkPrefixes$,
        'checkSuffixes': _NumberParser_checkSuffixes$,
        'processNonDigit': _NumberParser_processNonDigit$,
        'parse': _NumberParser_parse$,
        'invalidNumber': _NumberParser_invalidNumber$,
        'parseNumber': _NumberParser_parseNumber$,
      },
      {
        'value': _NumberParser_value_set$,
        'gotPositive': _NumberParser_gotPositive_set$,
        'gotNegative': _NumberParser_gotNegative_set$,
        'gotPositiveSuffix': _NumberParser_gotPositiveSuffix_set$,
        'gotNegativeSuffix': _NumberParser_gotNegativeSuffix_set$,
        'done': _NumberParser_done_set$,
        'prefixesSkipped': _NumberParser_prefixesSkipped_set$,
        'scale': _NumberParser_scale_set$,
      },
    )
  },
);
Function NumberParser_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as NumberParser;
Function NumberParser_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is NumberParser;
Function _NumberParser_format$(
  m.Scope scope$,
  NumberParser target$,
) =>
    () {
      return target$.format;
    };
Function _NumberParser_text$(
  m.Scope scope$,
  NumberParser target$,
) =>
    () {
      return target$.text;
    };
Function _NumberParser_input$(
  m.Scope scope$,
  NumberParser target$,
) =>
    () {
      return target$.input;
    };
Function _NumberParser_value$(
  m.Scope scope$,
  NumberParser target$,
) =>
    () {
      return target$.value;
    };
void _NumberParser_value_set$(
  m.Scope scope$,
  NumberParser target$,
) =>
    (dynamic other$) {
      target$.value = other$;
    };
Function _NumberParser_gotPositive$(
  m.Scope scope$,
  NumberParser target$,
) =>
    () {
      return target$.gotPositive;
    };
void _NumberParser_gotPositive_set$(
  m.Scope scope$,
  NumberParser target$,
) =>
    (dynamic other$) {
      target$.gotPositive = other$;
    };
Function _NumberParser_gotNegative$(
  m.Scope scope$,
  NumberParser target$,
) =>
    () {
      return target$.gotNegative;
    };
void _NumberParser_gotNegative_set$(
  m.Scope scope$,
  NumberParser target$,
) =>
    (dynamic other$) {
      target$.gotNegative = other$;
    };
Function _NumberParser_gotPositiveSuffix$(
  m.Scope scope$,
  NumberParser target$,
) =>
    () {
      return target$.gotPositiveSuffix;
    };
void _NumberParser_gotPositiveSuffix_set$(
  m.Scope scope$,
  NumberParser target$,
) =>
    (dynamic other$) {
      target$.gotPositiveSuffix = other$;
    };
Function _NumberParser_gotNegativeSuffix$(
  m.Scope scope$,
  NumberParser target$,
) =>
    () {
      return target$.gotNegativeSuffix;
    };
void _NumberParser_gotNegativeSuffix_set$(
  m.Scope scope$,
  NumberParser target$,
) =>
    (dynamic other$) {
      target$.gotNegativeSuffix = other$;
    };
Function _NumberParser_done$(
  m.Scope scope$,
  NumberParser target$,
) =>
    () {
      return target$.done;
    };
void _NumberParser_done_set$(
  m.Scope scope$,
  NumberParser target$,
) =>
    (dynamic other$) {
      target$.done = other$;
    };
Function _NumberParser_prefixesSkipped$(
  m.Scope scope$,
  NumberParser target$,
) =>
    () {
      return target$.prefixesSkipped;
    };
void _NumberParser_prefixesSkipped_set$(
  m.Scope scope$,
  NumberParser target$,
) =>
    (dynamic other$) {
      target$.prefixesSkipped = other$;
    };
Function _NumberParser_scale$(
  m.Scope scope$,
  NumberParser target$,
) =>
    () {
      return target$.scale;
    };
void _NumberParser_scale_set$(
  m.Scope scope$,
  NumberParser target$,
) =>
    (dynamic other$) {
      target$.scale = other$;
    };
Function _NumberParser_symbols$(
  m.Scope scope$,
  NumberParser target$,
) =>
    () {
      return target$.symbols;
    };
Function _NumberParser_replacements$(
  m.Scope scope$,
  NumberParser target$,
) =>
    () {
      return target$.replacements;
    };
Function _NumberParser_groupingIsNotASpaceOrElseItIsSpaceFollowedByADigit$(
  m.Scope scope$,
  NumberParser target$,
) =>
    () {
      return target$.groupingIsNotASpaceOrElseItIsSpaceFollowedByADigit;
    };
Function _NumberParser__$(m.Scope scope$) => (
      NumberFormat format,
      String text,
    ) {
      return NumberParser(
        format,
        text,
      );
    };
Function _NumberParser_invalidFormat$(
  m.Scope scope$,
  NumberParser target$,
) =>
    target$.invalidFormat;
Function _NumberParser_handleSpace$(
  m.Scope scope$,
  NumberParser target$,
) =>
    target$.handleSpace;
Function _NumberParser_asDigit$(
  m.Scope scope$,
  NumberParser target$,
) =>
    target$.asDigit;
Function _NumberParser_checkPrefixes$(
  m.Scope scope$,
  NumberParser target$,
) =>
    target$.checkPrefixes;
Function _NumberParser_checkSuffixes$(
  m.Scope scope$,
  NumberParser target$,
) =>
    target$.checkSuffixes;
Function _NumberParser_processNonDigit$(
  m.Scope scope$,
  NumberParser target$,
) =>
    target$.processNonDigit;
Function _NumberParser_parse$(
  m.Scope scope$,
  NumberParser target$,
) =>
    target$.parse;
Function _NumberParser_invalidNumber$(
  m.Scope scope$,
  NumberParser target$,
) =>
    target$.invalidNumber;
Function _NumberParser_parseNumber$(
  m.Scope scope$,
  NumberParser target$,
) =>
    target$.parseNumber;
