// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:animations/src/open_container.dart';
import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';

const libraryMirror = m.LibraryMirror(
  'package:animations/src/open_container.dart',
  {
    'OpenContainer.': _OpenContainer__$,
    'ContainerTransitionType.fade': _ContainerTransitionType_fade$,
    'ContainerTransitionType.fadeThrough':
        _ContainerTransitionType_fadeThrough$,
    'ContainerTransitionType.values': _ContainerTransitionType_values$,
  },
  {},
  {
    'OpenContainer': m.ClassMirror(
      'OpenContainer',
      {
        '#as': OpenContainer_as$,
        '#is': OpenContainer_is$,
        'closedColor': _OpenContainer_closedColor$,
        'openColor': _OpenContainer_openColor$,
        'middleColor': _OpenContainer_middleColor$,
        'closedElevation': _OpenContainer_closedElevation$,
        'openElevation': _OpenContainer_openElevation$,
        'closedShape': _OpenContainer_closedShape$,
        'openShape': _OpenContainer_openShape$,
        'onClosed': _OpenContainer_onClosed$,
        'closedBuilder': _OpenContainer_closedBuilder$,
        'openBuilder': _OpenContainer_openBuilder$,
        'tappable': _OpenContainer_tappable$,
        'transitionDuration': _OpenContainer_transitionDuration$,
        'transitionType': _OpenContainer_transitionType$,
        'useRootNavigator': _OpenContainer_useRootNavigator$,
        'routeSettings': _OpenContainer_routeSettings$,
        'clipBehavior': _OpenContainer_clipBehavior$,
        'createState': _OpenContainer_createState$,
      },
      {},
    ),
    'ContainerTransitionType': m.ClassMirror(
      'ContainerTransitionType',
      {},
      {},
    ),
  },
);
Function OpenContainer_as$<T extends Object?>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as OpenContainer<T>;
Function OpenContainer_is$<T extends Object?>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is OpenContainer<T>;
Function _OpenContainer_closedColor$<T extends Object?>(
  m.Scope scope$,
  OpenContainer<T> target$,
) =>
    () {
      return target$.closedColor;
    };
Function _OpenContainer_openColor$<T extends Object?>(
  m.Scope scope$,
  OpenContainer<T> target$,
) =>
    () {
      return target$.openColor;
    };
Function _OpenContainer_middleColor$<T extends Object?>(
  m.Scope scope$,
  OpenContainer<T> target$,
) =>
    () {
      return target$.middleColor;
    };
Function _OpenContainer_closedElevation$<T extends Object?>(
  m.Scope scope$,
  OpenContainer<T> target$,
) =>
    () {
      return target$.closedElevation;
    };
Function _OpenContainer_openElevation$<T extends Object?>(
  m.Scope scope$,
  OpenContainer<T> target$,
) =>
    () {
      return target$.openElevation;
    };
Function _OpenContainer_closedShape$<T extends Object?>(
  m.Scope scope$,
  OpenContainer<T> target$,
) =>
    () {
      return target$.closedShape;
    };
Function _OpenContainer_openShape$<T extends Object?>(
  m.Scope scope$,
  OpenContainer<T> target$,
) =>
    () {
      return target$.openShape;
    };
Function _OpenContainer_onClosed$<T extends Object?>(
  m.Scope scope$,
  OpenContainer<T> target$,
) =>
    () {
      return target$.onClosed;
    };
Function _OpenContainer_closedBuilder$<T extends Object?>(
  m.Scope scope$,
  OpenContainer<T> target$,
) =>
    () {
      return target$.closedBuilder;
    };
Function _OpenContainer_openBuilder$<T extends Object?>(
  m.Scope scope$,
  OpenContainer<T> target$,
) =>
    () {
      return target$.openBuilder;
    };
Function _OpenContainer_tappable$<T extends Object?>(
  m.Scope scope$,
  OpenContainer<T> target$,
) =>
    () {
      return target$.tappable;
    };
Function _OpenContainer_transitionDuration$<T extends Object?>(
  m.Scope scope$,
  OpenContainer<T> target$,
) =>
    () {
      return target$.transitionDuration;
    };
Function _OpenContainer_transitionType$<T extends Object?>(
  m.Scope scope$,
  OpenContainer<T> target$,
) =>
    () {
      return target$.transitionType;
    };
Function _OpenContainer_useRootNavigator$<T extends Object?>(
  m.Scope scope$,
  OpenContainer<T> target$,
) =>
    () {
      return target$.useRootNavigator;
    };
Function _OpenContainer_routeSettings$<T extends Object?>(
  m.Scope scope$,
  OpenContainer<T> target$,
) =>
    () {
      return target$.routeSettings;
    };
Function _OpenContainer_clipBehavior$<T extends Object?>(
  m.Scope scope$,
  OpenContainer<T> target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _OpenContainer__$(m.Scope scope$) => <T extends Object?>({
      Key? key,
      Color? closedColor,
      Color? openColor,
      Color? middleColor,
      double? closedElevation,
      double? openElevation,
      ShapeBorder? closedShape,
      ShapeBorder? openShape,
      m.FunctionPointer? onClosed,
      required m.FunctionPointer closedBuilder,
      required m.FunctionPointer openBuilder,
      bool? tappable,
      Duration? transitionDuration,
      ContainerTransitionType? transitionType,
      bool? useRootNavigator,
      RouteSettings? routeSettings,
      Clip? clipBehavior,
    }) {
      Widget closedBuilderProxy(
        BuildContext closedBuilder_context$,
        void Function() closedBuilder_action$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            closedBuilder,
            [
              closedBuilder_context$,
              closedBuilder_action$,
            ],
            {},
          );
      void onClosedProxy(dynamic onClosed_data$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onClosed!,
            [onClosed_data$],
            {},
          );
      Widget openBuilderProxy(
        BuildContext openBuilder_context$,
        void Function({T? returnValue}) openBuilder_action$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            openBuilder,
            [
              openBuilder_context$,
              openBuilder_action$,
            ],
            {},
          );
      return OpenContainer<T>(
        clipBehavior: clipBehavior ?? Clip.antiAlias,
        closedBuilder: closedBuilderProxy,
        closedColor: closedColor ?? Colors.white,
        closedElevation: closedElevation ?? 1.0,
        closedShape: closedShape ??
            const RoundedRectangleBorder(
                borderRadius: BorderRadius.all(Radius.circular(4.0))),
        key: key,
        middleColor: middleColor,
        onClosed: onClosed == null ? null : onClosedProxy,
        openBuilder: openBuilderProxy,
        openColor: openColor ?? Colors.white,
        openElevation: openElevation ?? 4.0,
        openShape: openShape ?? const RoundedRectangleBorder(),
        routeSettings: routeSettings,
        tappable: tappable ?? true,
        transitionDuration:
            transitionDuration ?? const Duration(milliseconds: 300),
        transitionType: transitionType ?? ContainerTransitionType.fade,
        useRootNavigator: useRootNavigator ?? false,
      );
    };
Function _OpenContainer_createState$<T extends Object?>(
  m.Scope scope$,
  OpenContainer<T> target$,
) =>
    target$.createState;
Function _ContainerTransitionType_fade$(m.Scope scope$) =>
    () => ContainerTransitionType.fade;
Function _ContainerTransitionType_fadeThrough$(m.Scope scope$) =>
    () => ContainerTransitionType.fadeThrough;
Function _ContainerTransitionType_values$(m.Scope scope$) =>
    () => ContainerTransitionType.values;
