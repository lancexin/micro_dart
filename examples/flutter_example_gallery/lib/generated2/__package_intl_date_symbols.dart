// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:intl/date_symbols.dart';

const libraryMirror = m.LibraryMirror(
  'package:intl/date_symbols.dart',
  {
    'en_USSymbols': _en_USSymbols$,
    'en_USPatterns': _en_USPatterns$,
    'DateSymbols.': _DateSymbols__$,
    'DateSymbols.deserializeFromMap': _DateSymbols_deserializeFromMap_$,
  },
  {},
  {
    'DateSymbols': m.ClassMirror(
      'DateSymbols',
      {
        '#as': DateSymbols_as$,
        '#is': DateSymbols_is$,
        'NAME': _DateSymbols_NAME$,
        'ERAS': _DateSymbols_ERAS$,
        'ERANAMES': _DateSymbols_ERANAMES$,
        'NARROWMONTHS': _DateSymbols_NARROWMONTHS$,
        'STANDALONENARROWMONTHS': _DateSymbols_STANDALONENARROWMONTHS$,
        'MONTHS': _DateSymbols_MONTHS$,
        'STANDALONEMONTHS': _DateSymbols_STANDALONEMONTHS$,
        'SHORTMONTHS': _DateSymbols_SHORTMONTHS$,
        'STANDALONESHORTMONTHS': _DateSymbols_STANDALONESHORTMONTHS$,
        'WEEKDAYS': _DateSymbols_WEEKDAYS$,
        'STANDALONEWEEKDAYS': _DateSymbols_STANDALONEWEEKDAYS$,
        'SHORTWEEKDAYS': _DateSymbols_SHORTWEEKDAYS$,
        'STANDALONESHORTWEEKDAYS': _DateSymbols_STANDALONESHORTWEEKDAYS$,
        'NARROWWEEKDAYS': _DateSymbols_NARROWWEEKDAYS$,
        'STANDALONENARROWWEEKDAYS': _DateSymbols_STANDALONENARROWWEEKDAYS$,
        'SHORTQUARTERS': _DateSymbols_SHORTQUARTERS$,
        'QUARTERS': _DateSymbols_QUARTERS$,
        'AMPMS': _DateSymbols_AMPMS$,
        'DATEFORMATS': _DateSymbols_DATEFORMATS$,
        'TIMEFORMATS': _DateSymbols_TIMEFORMATS$,
        'DATETIMEFORMATS': _DateSymbols_DATETIMEFORMATS$,
        'AVAILABLEFORMATS': _DateSymbols_AVAILABLEFORMATS$,
        'FIRSTDAYOFWEEK': _DateSymbols_FIRSTDAYOFWEEK$,
        'WEEKENDRANGE': _DateSymbols_WEEKENDRANGE$,
        'FIRSTWEEKCUTOFFDAY': _DateSymbols_FIRSTWEEKCUTOFFDAY$,
        'ZERODIGIT': _DateSymbols_ZERODIGIT$,
        'serializeToMap': _DateSymbols_serializeToMap$,
        'toString': _DateSymbols_toString$,
      },
      {
        'NAME': _DateSymbols_NAME_set$,
        'ERAS': _DateSymbols_ERAS_set$,
        'ERANAMES': _DateSymbols_ERANAMES_set$,
        'NARROWMONTHS': _DateSymbols_NARROWMONTHS_set$,
        'STANDALONENARROWMONTHS': _DateSymbols_STANDALONENARROWMONTHS_set$,
        'MONTHS': _DateSymbols_MONTHS_set$,
        'STANDALONEMONTHS': _DateSymbols_STANDALONEMONTHS_set$,
        'SHORTMONTHS': _DateSymbols_SHORTMONTHS_set$,
        'STANDALONESHORTMONTHS': _DateSymbols_STANDALONESHORTMONTHS_set$,
        'WEEKDAYS': _DateSymbols_WEEKDAYS_set$,
        'STANDALONEWEEKDAYS': _DateSymbols_STANDALONEWEEKDAYS_set$,
        'SHORTWEEKDAYS': _DateSymbols_SHORTWEEKDAYS_set$,
        'STANDALONESHORTWEEKDAYS': _DateSymbols_STANDALONESHORTWEEKDAYS_set$,
        'NARROWWEEKDAYS': _DateSymbols_NARROWWEEKDAYS_set$,
        'STANDALONENARROWWEEKDAYS': _DateSymbols_STANDALONENARROWWEEKDAYS_set$,
        'SHORTQUARTERS': _DateSymbols_SHORTQUARTERS_set$,
        'QUARTERS': _DateSymbols_QUARTERS_set$,
        'AMPMS': _DateSymbols_AMPMS_set$,
        'DATEFORMATS': _DateSymbols_DATEFORMATS_set$,
        'TIMEFORMATS': _DateSymbols_TIMEFORMATS_set$,
        'DATETIMEFORMATS': _DateSymbols_DATETIMEFORMATS_set$,
        'AVAILABLEFORMATS': _DateSymbols_AVAILABLEFORMATS_set$,
        'FIRSTDAYOFWEEK': _DateSymbols_FIRSTDAYOFWEEK_set$,
        'WEEKENDRANGE': _DateSymbols_WEEKENDRANGE_set$,
        'FIRSTWEEKCUTOFFDAY': _DateSymbols_FIRSTWEEKCUTOFFDAY_set$,
        'ZERODIGIT': _DateSymbols_ZERODIGIT_set$,
      },
    )
  },
);
Function _en_USSymbols$(m.Scope scope$) => () => en_USSymbols;
Function _en_USPatterns$(m.Scope scope$) => () => en_USPatterns;
Function DateSymbols_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DateSymbols;
Function DateSymbols_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DateSymbols;
Function _DateSymbols_NAME$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.NAME;
    };
void _DateSymbols_NAME_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.NAME = other$;
    };
Function _DateSymbols_ERAS$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.ERAS;
    };
void _DateSymbols_ERAS_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.ERAS = other$;
    };
Function _DateSymbols_ERANAMES$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.ERANAMES;
    };
void _DateSymbols_ERANAMES_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.ERANAMES = other$;
    };
Function _DateSymbols_NARROWMONTHS$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.NARROWMONTHS;
    };
void _DateSymbols_NARROWMONTHS_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.NARROWMONTHS = other$;
    };
Function _DateSymbols_STANDALONENARROWMONTHS$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.STANDALONENARROWMONTHS;
    };
void _DateSymbols_STANDALONENARROWMONTHS_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.STANDALONENARROWMONTHS = other$;
    };
Function _DateSymbols_MONTHS$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.MONTHS;
    };
void _DateSymbols_MONTHS_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.MONTHS = other$;
    };
Function _DateSymbols_STANDALONEMONTHS$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.STANDALONEMONTHS;
    };
void _DateSymbols_STANDALONEMONTHS_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.STANDALONEMONTHS = other$;
    };
Function _DateSymbols_SHORTMONTHS$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.SHORTMONTHS;
    };
void _DateSymbols_SHORTMONTHS_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.SHORTMONTHS = other$;
    };
Function _DateSymbols_STANDALONESHORTMONTHS$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.STANDALONESHORTMONTHS;
    };
void _DateSymbols_STANDALONESHORTMONTHS_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.STANDALONESHORTMONTHS = other$;
    };
Function _DateSymbols_WEEKDAYS$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.WEEKDAYS;
    };
void _DateSymbols_WEEKDAYS_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.WEEKDAYS = other$;
    };
Function _DateSymbols_STANDALONEWEEKDAYS$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.STANDALONEWEEKDAYS;
    };
void _DateSymbols_STANDALONEWEEKDAYS_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.STANDALONEWEEKDAYS = other$;
    };
Function _DateSymbols_SHORTWEEKDAYS$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.SHORTWEEKDAYS;
    };
void _DateSymbols_SHORTWEEKDAYS_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.SHORTWEEKDAYS = other$;
    };
Function _DateSymbols_STANDALONESHORTWEEKDAYS$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.STANDALONESHORTWEEKDAYS;
    };
void _DateSymbols_STANDALONESHORTWEEKDAYS_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.STANDALONESHORTWEEKDAYS = other$;
    };
Function _DateSymbols_NARROWWEEKDAYS$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.NARROWWEEKDAYS;
    };
void _DateSymbols_NARROWWEEKDAYS_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.NARROWWEEKDAYS = other$;
    };
Function _DateSymbols_STANDALONENARROWWEEKDAYS$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.STANDALONENARROWWEEKDAYS;
    };
void _DateSymbols_STANDALONENARROWWEEKDAYS_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.STANDALONENARROWWEEKDAYS = other$;
    };
Function _DateSymbols_SHORTQUARTERS$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.SHORTQUARTERS;
    };
void _DateSymbols_SHORTQUARTERS_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.SHORTQUARTERS = other$;
    };
Function _DateSymbols_QUARTERS$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.QUARTERS;
    };
void _DateSymbols_QUARTERS_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.QUARTERS = other$;
    };
Function _DateSymbols_AMPMS$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.AMPMS;
    };
void _DateSymbols_AMPMS_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.AMPMS = other$;
    };
Function _DateSymbols_DATEFORMATS$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.DATEFORMATS;
    };
void _DateSymbols_DATEFORMATS_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.DATEFORMATS = other$;
    };
Function _DateSymbols_TIMEFORMATS$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.TIMEFORMATS;
    };
void _DateSymbols_TIMEFORMATS_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.TIMEFORMATS = other$;
    };
Function _DateSymbols_DATETIMEFORMATS$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.DATETIMEFORMATS;
    };
void _DateSymbols_DATETIMEFORMATS_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.DATETIMEFORMATS = other$;
    };
Function _DateSymbols_AVAILABLEFORMATS$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.AVAILABLEFORMATS;
    };
void _DateSymbols_AVAILABLEFORMATS_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.AVAILABLEFORMATS = other$;
    };
Function _DateSymbols_FIRSTDAYOFWEEK$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.FIRSTDAYOFWEEK;
    };
void _DateSymbols_FIRSTDAYOFWEEK_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.FIRSTDAYOFWEEK = other$;
    };
Function _DateSymbols_WEEKENDRANGE$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.WEEKENDRANGE;
    };
void _DateSymbols_WEEKENDRANGE_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.WEEKENDRANGE = other$;
    };
Function _DateSymbols_FIRSTWEEKCUTOFFDAY$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.FIRSTWEEKCUTOFFDAY;
    };
void _DateSymbols_FIRSTWEEKCUTOFFDAY_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.FIRSTWEEKCUTOFFDAY = other$;
    };
Function _DateSymbols_ZERODIGIT$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    () {
      return target$.ZERODIGIT;
    };
void _DateSymbols_ZERODIGIT_set$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    (dynamic other$) {
      target$.ZERODIGIT = other$;
    };
Function _DateSymbols__$(m.Scope scope$) => ({
      required String NAME,
      required List ERAS,
      required List ERANAMES,
      required List NARROWMONTHS,
      required List STANDALONENARROWMONTHS,
      required List MONTHS,
      required List STANDALONEMONTHS,
      required List SHORTMONTHS,
      required List STANDALONESHORTMONTHS,
      required List WEEKDAYS,
      required List STANDALONEWEEKDAYS,
      required List SHORTWEEKDAYS,
      required List STANDALONESHORTWEEKDAYS,
      required List NARROWWEEKDAYS,
      required List STANDALONENARROWWEEKDAYS,
      required List SHORTQUARTERS,
      required List QUARTERS,
      required List AMPMS,
      String? ZERODIGIT,
      required List DATEFORMATS,
      required List TIMEFORMATS,
      Map? AVAILABLEFORMATS,
      required int FIRSTDAYOFWEEK,
      required List WEEKENDRANGE,
      required int FIRSTWEEKCUTOFFDAY,
      required List DATETIMEFORMATS,
    }) {
      return DateSymbols(
        AMPMS: List.from(AMPMS),
        AVAILABLEFORMATS:
            AVAILABLEFORMATS == null ? null : Map.from(AVAILABLEFORMATS),
        DATEFORMATS: List.from(DATEFORMATS),
        DATETIMEFORMATS: List.from(DATETIMEFORMATS),
        ERANAMES: List.from(ERANAMES),
        ERAS: List.from(ERAS),
        FIRSTDAYOFWEEK: FIRSTDAYOFWEEK,
        FIRSTWEEKCUTOFFDAY: FIRSTWEEKCUTOFFDAY,
        MONTHS: List.from(MONTHS),
        NAME: NAME,
        NARROWMONTHS: List.from(NARROWMONTHS),
        NARROWWEEKDAYS: List.from(NARROWWEEKDAYS),
        QUARTERS: List.from(QUARTERS),
        SHORTMONTHS: List.from(SHORTMONTHS),
        SHORTQUARTERS: List.from(SHORTQUARTERS),
        SHORTWEEKDAYS: List.from(SHORTWEEKDAYS),
        STANDALONEMONTHS: List.from(STANDALONEMONTHS),
        STANDALONENARROWMONTHS: List.from(STANDALONENARROWMONTHS),
        STANDALONENARROWWEEKDAYS: List.from(STANDALONENARROWWEEKDAYS),
        STANDALONESHORTMONTHS: List.from(STANDALONESHORTMONTHS),
        STANDALONESHORTWEEKDAYS: List.from(STANDALONESHORTWEEKDAYS),
        STANDALONEWEEKDAYS: List.from(STANDALONEWEEKDAYS),
        TIMEFORMATS: List.from(TIMEFORMATS),
        WEEKDAYS: List.from(WEEKDAYS),
        WEEKENDRANGE: List.from(WEEKENDRANGE),
        ZERODIGIT: ZERODIGIT,
      );
    };
Function _DateSymbols_deserializeFromMap_$(m.Scope scope$) =>
    DateSymbols.deserializeFromMap;
Function _DateSymbols_serializeToMap$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    target$.serializeToMap;
Function _DateSymbols_toString$(
  m.Scope scope$,
  DateSymbols target$,
) =>
    target$.toString;
