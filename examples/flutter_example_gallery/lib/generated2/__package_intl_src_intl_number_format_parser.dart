// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:intl/src/intl/number_format_parser.dart';
import 'dart:math';
import 'package:intl/number_symbols.dart';
import 'package:intl/number_symbols_data.dart';
import 'package:intl/src/intl/string_stack.dart';

const libraryMirror = m.LibraryMirror(
  'package:intl/src/intl/number_format_parser.dart',
  {
    'NumberFormatParseResult.': _NumberFormatParseResult__$,
    'NumberFormatParser.PATTERN_SEPARATOR':
        _NumberFormatParser_PATTERN_SEPARATOR$,
    'NumberFormatParser.QUOTE': _NumberFormatParser_QUOTE$,
    'NumberFormatParser.PATTERN_DIGIT': _NumberFormatParser_PATTERN_DIGIT$,
    'NumberFormatParser.PATTERN_ZERO_DIGIT':
        _NumberFormatParser_PATTERN_ZERO_DIGIT$,
    'NumberFormatParser.PATTERN_GROUPING_SEPARATOR':
        _NumberFormatParser_PATTERN_GROUPING_SEPARATOR$,
    'NumberFormatParser.PATTERN_DECIMAL_SEPARATOR':
        _NumberFormatParser_PATTERN_DECIMAL_SEPARATOR$,
    'NumberFormatParser.PATTERN_CURRENCY_SIGN':
        _NumberFormatParser_PATTERN_CURRENCY_SIGN$,
    'NumberFormatParser.PATTERN_PER_MILLE':
        _NumberFormatParser_PATTERN_PER_MILLE$,
    'NumberFormatParser.PER_MILLE_SCALE': _NumberFormatParser_PER_MILLE_SCALE$,
    'NumberFormatParser.PATTERN_PERCENT': _NumberFormatParser_PATTERN_PERCENT$,
    'NumberFormatParser.PERCENT_SCALE': _NumberFormatParser_PERCENT_SCALE$,
    'NumberFormatParser.PATTERN_EXPONENT':
        _NumberFormatParser_PATTERN_EXPONENT$,
    'NumberFormatParser.PATTERN_PLUS': _NumberFormatParser_PATTERN_PLUS$,
    'NumberFormatParser.': _NumberFormatParser__$,
    'NumberFormatParser.parse': _NumberFormatParser_parse$,
  },
  {},
  {
    'NumberFormatParseResult': m.ClassMirror(
      'NumberFormatParseResult',
      {
        '#as': NumberFormatParseResult_as$,
        '#is': NumberFormatParseResult_is$,
        'negativePrefix': _NumberFormatParseResult_negativePrefix$,
        'positivePrefix': _NumberFormatParseResult_positivePrefix$,
        'negativeSuffix': _NumberFormatParseResult_negativeSuffix$,
        'positiveSuffix': _NumberFormatParseResult_positiveSuffix$,
        'multiplier': _NumberFormatParseResult_multiplier$,
        'minimumExponentDigits':
            _NumberFormatParseResult_minimumExponentDigits$,
        'maximumIntegerDigits': _NumberFormatParseResult_maximumIntegerDigits$,
        'minimumIntegerDigits': _NumberFormatParseResult_minimumIntegerDigits$,
        'maximumFractionDigits':
            _NumberFormatParseResult_maximumFractionDigits$,
        'minimumFractionDigits':
            _NumberFormatParseResult_minimumFractionDigits$,
        'groupingSize': _NumberFormatParseResult_groupingSize$,
        'finalGroupingSize': _NumberFormatParseResult_finalGroupingSize$,
        'decimalSeparatorAlwaysShown':
            _NumberFormatParseResult_decimalSeparatorAlwaysShown$,
        'useSignForPositiveExponent':
            _NumberFormatParseResult_useSignForPositiveExponent$,
        'useExponentialNotation':
            _NumberFormatParseResult_useExponentialNotation$,
        'decimalDigits': _NumberFormatParseResult_decimalDigits$,
        'multiplierDigits': _NumberFormatParseResult_multiplierDigits$,
      },
      {
        'negativePrefix': _NumberFormatParseResult_negativePrefix_set$,
        'positivePrefix': _NumberFormatParseResult_positivePrefix_set$,
        'negativeSuffix': _NumberFormatParseResult_negativeSuffix_set$,
        'positiveSuffix': _NumberFormatParseResult_positiveSuffix_set$,
        'multiplier': _NumberFormatParseResult_multiplier_set$,
        'minimumExponentDigits':
            _NumberFormatParseResult_minimumExponentDigits_set$,
        'maximumIntegerDigits':
            _NumberFormatParseResult_maximumIntegerDigits_set$,
        'minimumIntegerDigits':
            _NumberFormatParseResult_minimumIntegerDigits_set$,
        'maximumFractionDigits':
            _NumberFormatParseResult_maximumFractionDigits_set$,
        'minimumFractionDigits':
            _NumberFormatParseResult_minimumFractionDigits_set$,
        'groupingSize': _NumberFormatParseResult_groupingSize_set$,
        'finalGroupingSize': _NumberFormatParseResult_finalGroupingSize_set$,
        'decimalSeparatorAlwaysShown':
            _NumberFormatParseResult_decimalSeparatorAlwaysShown_set$,
        'useSignForPositiveExponent':
            _NumberFormatParseResult_useSignForPositiveExponent_set$,
        'useExponentialNotation':
            _NumberFormatParseResult_useExponentialNotation_set$,
        'decimalDigits': _NumberFormatParseResult_decimalDigits_set$,
      },
    ),
    'NumberFormatParser': m.ClassMirror(
      'NumberFormatParser',
      {
        '#as': NumberFormatParser_as$,
        '#is': NumberFormatParser_is$,
        'symbols': _NumberFormatParser_symbols$,
        'pattern': _NumberFormatParser_pattern$,
        'isForCurrency': _NumberFormatParser_isForCurrency$,
        'currencySymbol': _NumberFormatParser_currencySymbol$,
        'currencyName': _NumberFormatParser_currencyName$,
        'result': _NumberFormatParser_result$,
        'groupingSizeSetExplicitly':
            _NumberFormatParser_groupingSizeSetExplicitly$,
        'inQuote': _NumberFormatParser_inQuote$,
        'decimalPos': _NumberFormatParser_decimalPos$,
        'digitLeftCount': _NumberFormatParser_digitLeftCount$,
        'zeroDigitCount': _NumberFormatParser_zeroDigitCount$,
        'digitRightCount': _NumberFormatParser_digitRightCount$,
        'groupingCount': _NumberFormatParser_groupingCount$,
        'parseCharacterAffix': _NumberFormatParser_parseCharacterAffix$,
        'parseTrunkCharacter': _NumberFormatParser_parseTrunkCharacter$,
      },
      {
        'groupingSizeSetExplicitly':
            _NumberFormatParser_groupingSizeSetExplicitly_set$,
        'inQuote': _NumberFormatParser_inQuote_set$,
        'decimalPos': _NumberFormatParser_decimalPos_set$,
        'digitLeftCount': _NumberFormatParser_digitLeftCount_set$,
        'zeroDigitCount': _NumberFormatParser_zeroDigitCount_set$,
        'digitRightCount': _NumberFormatParser_digitRightCount_set$,
        'groupingCount': _NumberFormatParser_groupingCount_set$,
      },
    ),
  },
);
Function NumberFormatParseResult_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as NumberFormatParseResult;
Function NumberFormatParseResult_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is NumberFormatParseResult;
Function _NumberFormatParseResult_negativePrefix$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    () {
      return target$.negativePrefix;
    };
void _NumberFormatParseResult_negativePrefix_set$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    (dynamic other$) {
      target$.negativePrefix = other$;
    };
Function _NumberFormatParseResult_positivePrefix$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    () {
      return target$.positivePrefix;
    };
void _NumberFormatParseResult_positivePrefix_set$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    (dynamic other$) {
      target$.positivePrefix = other$;
    };
Function _NumberFormatParseResult_negativeSuffix$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    () {
      return target$.negativeSuffix;
    };
void _NumberFormatParseResult_negativeSuffix_set$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    (dynamic other$) {
      target$.negativeSuffix = other$;
    };
Function _NumberFormatParseResult_positiveSuffix$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    () {
      return target$.positiveSuffix;
    };
void _NumberFormatParseResult_positiveSuffix_set$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    (dynamic other$) {
      target$.positiveSuffix = other$;
    };
Function _NumberFormatParseResult_multiplier$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    () {
      return target$.multiplier;
    };
void _NumberFormatParseResult_multiplier_set$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    (dynamic other$) {
      target$.multiplier = other$;
    };
Function _NumberFormatParseResult_minimumExponentDigits$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    () {
      return target$.minimumExponentDigits;
    };
void _NumberFormatParseResult_minimumExponentDigits_set$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    (dynamic other$) {
      target$.minimumExponentDigits = other$;
    };
Function _NumberFormatParseResult_maximumIntegerDigits$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    () {
      return target$.maximumIntegerDigits;
    };
void _NumberFormatParseResult_maximumIntegerDigits_set$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    (dynamic other$) {
      target$.maximumIntegerDigits = other$;
    };
Function _NumberFormatParseResult_minimumIntegerDigits$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    () {
      return target$.minimumIntegerDigits;
    };
void _NumberFormatParseResult_minimumIntegerDigits_set$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    (dynamic other$) {
      target$.minimumIntegerDigits = other$;
    };
Function _NumberFormatParseResult_maximumFractionDigits$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    () {
      return target$.maximumFractionDigits;
    };
void _NumberFormatParseResult_maximumFractionDigits_set$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    (dynamic other$) {
      target$.maximumFractionDigits = other$;
    };
Function _NumberFormatParseResult_minimumFractionDigits$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    () {
      return target$.minimumFractionDigits;
    };
void _NumberFormatParseResult_minimumFractionDigits_set$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    (dynamic other$) {
      target$.minimumFractionDigits = other$;
    };
Function _NumberFormatParseResult_groupingSize$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    () {
      return target$.groupingSize;
    };
void _NumberFormatParseResult_groupingSize_set$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    (dynamic other$) {
      target$.groupingSize = other$;
    };
Function _NumberFormatParseResult_finalGroupingSize$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    () {
      return target$.finalGroupingSize;
    };
void _NumberFormatParseResult_finalGroupingSize_set$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    (dynamic other$) {
      target$.finalGroupingSize = other$;
    };
Function _NumberFormatParseResult_decimalSeparatorAlwaysShown$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    () {
      return target$.decimalSeparatorAlwaysShown;
    };
void _NumberFormatParseResult_decimalSeparatorAlwaysShown_set$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    (dynamic other$) {
      target$.decimalSeparatorAlwaysShown = other$;
    };
Function _NumberFormatParseResult_useSignForPositiveExponent$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    () {
      return target$.useSignForPositiveExponent;
    };
void _NumberFormatParseResult_useSignForPositiveExponent_set$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    (dynamic other$) {
      target$.useSignForPositiveExponent = other$;
    };
Function _NumberFormatParseResult_useExponentialNotation$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    () {
      return target$.useExponentialNotation;
    };
void _NumberFormatParseResult_useExponentialNotation_set$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    (dynamic other$) {
      target$.useExponentialNotation = other$;
    };
Function _NumberFormatParseResult_decimalDigits$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    () {
      return target$.decimalDigits;
    };
void _NumberFormatParseResult_decimalDigits_set$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    (dynamic other$) {
      target$.decimalDigits = other$;
    };
Function _NumberFormatParseResult_multiplierDigits$(
  m.Scope scope$,
  NumberFormatParseResult target$,
) =>
    () {
      return target$.multiplierDigits;
    };
Function _NumberFormatParseResult__$(m.Scope scope$) => (
      NumberSymbols symbols,
      int? decimalDigits,
    ) {
      return NumberFormatParseResult(
        symbols,
        decimalDigits,
      );
    };
Function NumberFormatParser_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as NumberFormatParser;
Function NumberFormatParser_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is NumberFormatParser;
Function _NumberFormatParser_PATTERN_SEPARATOR$(m.Scope scope$) =>
    () => NumberFormatParser.PATTERN_SEPARATOR;
Function _NumberFormatParser_QUOTE$(m.Scope scope$) =>
    () => NumberFormatParser.QUOTE;
Function _NumberFormatParser_PATTERN_DIGIT$(m.Scope scope$) =>
    () => NumberFormatParser.PATTERN_DIGIT;
Function _NumberFormatParser_PATTERN_ZERO_DIGIT$(m.Scope scope$) =>
    () => NumberFormatParser.PATTERN_ZERO_DIGIT;
Function _NumberFormatParser_PATTERN_GROUPING_SEPARATOR$(m.Scope scope$) =>
    () => NumberFormatParser.PATTERN_GROUPING_SEPARATOR;
Function _NumberFormatParser_PATTERN_DECIMAL_SEPARATOR$(m.Scope scope$) =>
    () => NumberFormatParser.PATTERN_DECIMAL_SEPARATOR;
Function _NumberFormatParser_PATTERN_CURRENCY_SIGN$(m.Scope scope$) =>
    () => NumberFormatParser.PATTERN_CURRENCY_SIGN;
Function _NumberFormatParser_PATTERN_PER_MILLE$(m.Scope scope$) =>
    () => NumberFormatParser.PATTERN_PER_MILLE;
Function _NumberFormatParser_PER_MILLE_SCALE$(m.Scope scope$) =>
    () => NumberFormatParser.PER_MILLE_SCALE;
Function _NumberFormatParser_PATTERN_PERCENT$(m.Scope scope$) =>
    () => NumberFormatParser.PATTERN_PERCENT;
Function _NumberFormatParser_PERCENT_SCALE$(m.Scope scope$) =>
    () => NumberFormatParser.PERCENT_SCALE;
Function _NumberFormatParser_PATTERN_EXPONENT$(m.Scope scope$) =>
    () => NumberFormatParser.PATTERN_EXPONENT;
Function _NumberFormatParser_PATTERN_PLUS$(m.Scope scope$) =>
    () => NumberFormatParser.PATTERN_PLUS;
Function _NumberFormatParser_symbols$(
  m.Scope scope$,
  NumberFormatParser target$,
) =>
    () {
      return target$.symbols;
    };
Function _NumberFormatParser_pattern$(
  m.Scope scope$,
  NumberFormatParser target$,
) =>
    () {
      return target$.pattern;
    };
Function _NumberFormatParser_isForCurrency$(
  m.Scope scope$,
  NumberFormatParser target$,
) =>
    () {
      return target$.isForCurrency;
    };
Function _NumberFormatParser_currencySymbol$(
  m.Scope scope$,
  NumberFormatParser target$,
) =>
    () {
      return target$.currencySymbol;
    };
Function _NumberFormatParser_currencyName$(
  m.Scope scope$,
  NumberFormatParser target$,
) =>
    () {
      return target$.currencyName;
    };
Function _NumberFormatParser_result$(
  m.Scope scope$,
  NumberFormatParser target$,
) =>
    () {
      return target$.result;
    };
Function _NumberFormatParser_groupingSizeSetExplicitly$(
  m.Scope scope$,
  NumberFormatParser target$,
) =>
    () {
      return target$.groupingSizeSetExplicitly;
    };
void _NumberFormatParser_groupingSizeSetExplicitly_set$(
  m.Scope scope$,
  NumberFormatParser target$,
) =>
    (dynamic other$) {
      target$.groupingSizeSetExplicitly = other$;
    };
Function _NumberFormatParser_inQuote$(
  m.Scope scope$,
  NumberFormatParser target$,
) =>
    () {
      return target$.inQuote;
    };
void _NumberFormatParser_inQuote_set$(
  m.Scope scope$,
  NumberFormatParser target$,
) =>
    (dynamic other$) {
      target$.inQuote = other$;
    };
Function _NumberFormatParser_decimalPos$(
  m.Scope scope$,
  NumberFormatParser target$,
) =>
    () {
      return target$.decimalPos;
    };
void _NumberFormatParser_decimalPos_set$(
  m.Scope scope$,
  NumberFormatParser target$,
) =>
    (dynamic other$) {
      target$.decimalPos = other$;
    };
Function _NumberFormatParser_digitLeftCount$(
  m.Scope scope$,
  NumberFormatParser target$,
) =>
    () {
      return target$.digitLeftCount;
    };
void _NumberFormatParser_digitLeftCount_set$(
  m.Scope scope$,
  NumberFormatParser target$,
) =>
    (dynamic other$) {
      target$.digitLeftCount = other$;
    };
Function _NumberFormatParser_zeroDigitCount$(
  m.Scope scope$,
  NumberFormatParser target$,
) =>
    () {
      return target$.zeroDigitCount;
    };
void _NumberFormatParser_zeroDigitCount_set$(
  m.Scope scope$,
  NumberFormatParser target$,
) =>
    (dynamic other$) {
      target$.zeroDigitCount = other$;
    };
Function _NumberFormatParser_digitRightCount$(
  m.Scope scope$,
  NumberFormatParser target$,
) =>
    () {
      return target$.digitRightCount;
    };
void _NumberFormatParser_digitRightCount_set$(
  m.Scope scope$,
  NumberFormatParser target$,
) =>
    (dynamic other$) {
      target$.digitRightCount = other$;
    };
Function _NumberFormatParser_groupingCount$(
  m.Scope scope$,
  NumberFormatParser target$,
) =>
    () {
      return target$.groupingCount;
    };
void _NumberFormatParser_groupingCount_set$(
  m.Scope scope$,
  NumberFormatParser target$,
) =>
    (dynamic other$) {
      target$.groupingCount = other$;
    };
Function _NumberFormatParser__$(m.Scope scope$) => (
      NumberSymbols symbols,
      String input,
      bool isForCurrency,
      String currencySymbol,
      String currencyName,
      int? decimalDigits,
    ) {
      return NumberFormatParser(
        symbols,
        input,
        isForCurrency,
        currencySymbol,
        currencyName,
        decimalDigits,
      );
    };
Function _NumberFormatParser_parse$(m.Scope scope$) => NumberFormatParser.parse;
Function _NumberFormatParser_parseCharacterAffix$(
  m.Scope scope$,
  NumberFormatParser target$,
) =>
    target$.parseCharacterAffix;
Function _NumberFormatParser_parseTrunkCharacter$(
  m.Scope scope$,
  NumberFormatParser target$,
) =>
    target$.parseTrunkCharacter;
