// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:characters/src/characters_impl.dart';
import 'package:characters/src/grapheme_clusters/table.dart';
import 'package:characters/src/characters.dart';
import 'package:characters/src/grapheme_clusters/constants.dart';
import 'package:characters/src/grapheme_clusters/breaks.dart';

const libraryMirror = m.LibraryMirror(
  'package:characters/src/characters_impl.dart',
  {
    'StringCharacters.': _StringCharacters__$,
    'StringCharacterRange.': _StringCharacterRange__$,
    'StringCharacterRange.at': _StringCharacterRange_at_$,
  },
  {},
  {
    'StringCharacters': m.ClassMirror(
      'StringCharacters',
      {
        '#as': StringCharacters_as$,
        '#is': StringCharacters_is$,
        'string': _StringCharacters_string$,
        'iterator': _StringCharacters_iterator$,
        'iteratorAtEnd': _StringCharacters_iteratorAtEnd$,
        'first': _StringCharacters_first$,
        'last': _StringCharacters_last$,
        'single': _StringCharacters_single$,
        'isEmpty': _StringCharacters_isEmpty$,
        'isNotEmpty': _StringCharacters_isNotEmpty$,
        'length': _StringCharacters_length$,
        'hashCode': _StringCharacters_hashCode$,
        'whereType': _StringCharacters_whereType$,
        'join': _StringCharacters_join$,
        'lastWhere': _StringCharacters_lastWhere$,
        'elementAt': _StringCharacters_elementAt$,
        'contains': _StringCharacters_contains$,
        'startsWith': _StringCharacters_startsWith$,
        'endsWith': _StringCharacters_endsWith$,
        'replaceAll': _StringCharacters_replaceAll$,
        'replaceFirst': _StringCharacters_replaceFirst$,
        'split': _StringCharacters_split$,
        'containsAll': _StringCharacters_containsAll$,
        'skip': _StringCharacters_skip$,
        'take': _StringCharacters_take$,
        'getRange': _StringCharacters_getRange$,
        'characterAt': _StringCharacters_characterAt$,
        'skipWhile': _StringCharacters_skipWhile$,
        'takeWhile': _StringCharacters_takeWhile$,
        'where': _StringCharacters_where$,
        '+': _StringCharacters_plus$$,
        'skipLast': _StringCharacters_skipLast$,
        'skipLastWhile': _StringCharacters_skipLastWhile$,
        'takeLast': _StringCharacters_takeLast$,
        'takeLastWhile': _StringCharacters_takeLastWhile$,
        'toLowerCase': _StringCharacters_toLowerCase$,
        'toUpperCase': _StringCharacters_toUpperCase$,
        '==': _StringCharacters_eq$$,
        'toString': _StringCharacters_toString$,
        'findFirst': _StringCharacters_findFirst$,
        'findLast': _StringCharacters_findLast$,
      },
      {},
    ),
    'StringCharacterRange': m.ClassMirror(
      'StringCharacterRange',
      {
        '#as': StringCharacterRange_as$,
        '#is': StringCharacterRange_is$,
        'current': _StringCharacterRange_current$,
        'utf16CodeUnits': _StringCharacterRange_utf16CodeUnits$,
        'runes': _StringCharacterRange_runes$,
        'isEmpty': _StringCharacterRange_isEmpty$,
        'isNotEmpty': _StringCharacterRange_isNotEmpty$,
        'source': _StringCharacterRange_source$,
        'charactersAfter': _StringCharacterRange_charactersAfter$,
        'charactersBefore': _StringCharacterRange_charactersBefore$,
        'currentCharacters': _StringCharacterRange_currentCharacters$,
        'stringAfter': _StringCharacterRange_stringAfter$,
        'stringAfterLength': _StringCharacterRange_stringAfterLength$,
        'stringBefore': _StringCharacterRange_stringBefore$,
        'stringBeforeLength': _StringCharacterRange_stringBeforeLength$,
        'moveNext': _StringCharacterRange_moveNext$,
        'moveBack': _StringCharacterRange_moveBack$,
        'copy': _StringCharacterRange_copy$,
        'collapseToEnd': _StringCharacterRange_collapseToEnd$,
        'collapseToStart': _StringCharacterRange_collapseToStart$,
        'dropFirst': _StringCharacterRange_dropFirst$,
        'dropTo': _StringCharacterRange_dropTo$,
        'dropUntil': _StringCharacterRange_dropUntil$,
        'dropWhile': _StringCharacterRange_dropWhile$,
        'dropLast': _StringCharacterRange_dropLast$,
        'dropBackTo': _StringCharacterRange_dropBackTo$,
        'dropBackUntil': _StringCharacterRange_dropBackUntil$,
        'dropBackWhile': _StringCharacterRange_dropBackWhile$,
        'expandNext': _StringCharacterRange_expandNext$,
        'expandTo': _StringCharacterRange_expandTo$,
        'expandWhile': _StringCharacterRange_expandWhile$,
        'expandAll': _StringCharacterRange_expandAll$,
        'expandBack': _StringCharacterRange_expandBack$,
        'expandBackTo': _StringCharacterRange_expandBackTo$,
        'expandBackWhile': _StringCharacterRange_expandBackWhile$,
        'expandBackUntil': _StringCharacterRange_expandBackUntil$,
        'expandBackAll': _StringCharacterRange_expandBackAll$,
        'expandUntil': _StringCharacterRange_expandUntil$,
        'moveBackUntil': _StringCharacterRange_moveBackUntil$,
        'collapseToFirst': _StringCharacterRange_collapseToFirst$,
        'collapseToLast': _StringCharacterRange_collapseToLast$,
        'moveUntil': _StringCharacterRange_moveUntil$,
        'replaceFirst': _StringCharacterRange_replaceFirst$,
        'replaceAll': _StringCharacterRange_replaceAll$,
        'replaceRange': _StringCharacterRange_replaceRange$,
        'startsWith': _StringCharacterRange_startsWith$,
        'endsWith': _StringCharacterRange_endsWith$,
        'isFollowedBy': _StringCharacterRange_isFollowedBy$,
        'isPrecededBy': _StringCharacterRange_isPrecededBy$,
        'moveBackTo': _StringCharacterRange_moveBackTo$,
        'moveTo': _StringCharacterRange_moveTo$,
        'moveBackAll': _StringCharacterRange_moveBackAll$,
        'moveNextAll': _StringCharacterRange_moveNextAll$,
        'split': _StringCharacterRange_split$,
      },
      {},
    ),
  },
);
Function StringCharacters_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as StringCharacters;
Function StringCharacters_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is StringCharacters;
Function _StringCharacters_string$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    () {
      return target$.string;
    };
Function _StringCharacters_iterator$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    () {
      return target$.iterator;
    };
Function _StringCharacters_iteratorAtEnd$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    () {
      return target$.iteratorAtEnd;
    };
Function _StringCharacters_first$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    () {
      return target$.first;
    };
Function _StringCharacters_last$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    () {
      return target$.last;
    };
Function _StringCharacters_single$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    () {
      return target$.single;
    };
Function _StringCharacters_isEmpty$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    () {
      return target$.isEmpty;
    };
Function _StringCharacters_isNotEmpty$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    () {
      return target$.isNotEmpty;
    };
Function _StringCharacters_length$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    () {
      return target$.length;
    };
Function _StringCharacters_hashCode$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    () {
      return target$.hashCode;
    };
Function _StringCharacters__$(m.Scope scope$) => (String string) {
      return StringCharacters(string);
    };
Function _StringCharacters_whereType$<T>(
  m.Scope scope$,
  StringCharacters target$,
) =>
    target$.whereType<T>;
Function _StringCharacters_join$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    target$.join;
Function _StringCharacters_lastWhere$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    (
      m.FunctionPointer test, {
      m.FunctionPointer? orElse,
    }) {
      bool testProxy(String test_element$) => scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_element$],
            {},
          );
      String orElseProxy() => scope$.engine.callFunctionPointer(
            scope$,
            orElse!,
            [],
            {},
          );
      return target$.lastWhere(
        testProxy,
        orElse: orElse == null ? null : orElseProxy,
      );
    };
Function _StringCharacters_elementAt$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    target$.elementAt;
Function _StringCharacters_contains$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    target$.contains;
Function _StringCharacters_startsWith$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    target$.startsWith;
Function _StringCharacters_endsWith$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    target$.endsWith;
Function _StringCharacters_replaceAll$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    target$.replaceAll;
Function _StringCharacters_replaceFirst$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    target$.replaceFirst;
Function _StringCharacters_split$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    target$.split;
Function _StringCharacters_containsAll$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    target$.containsAll;
Function _StringCharacters_skip$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    target$.skip;
Function _StringCharacters_take$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    target$.take;
Function _StringCharacters_getRange$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    target$.getRange;
Function _StringCharacters_characterAt$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    target$.characterAt;
Function _StringCharacters_skipWhile$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(String test_$p0$) => scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_$p0$],
            {},
          );
      return target$.skipWhile(testProxy);
    };
Function _StringCharacters_takeWhile$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(String test_$p0$) => scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_$p0$],
            {},
          );
      return target$.takeWhile(testProxy);
    };
Function _StringCharacters_where$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(String test_$p0$) => scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_$p0$],
            {},
          );
      return target$.where(testProxy);
    };
Function _StringCharacters_plus$$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    (Characters other$) => target$ + other$;
Function _StringCharacters_skipLast$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    target$.skipLast;
Function _StringCharacters_skipLastWhile$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(String test_$p0$) => scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_$p0$],
            {},
          );
      return target$.skipLastWhile(testProxy);
    };
Function _StringCharacters_takeLast$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    target$.takeLast;
Function _StringCharacters_takeLastWhile$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(String test_$p0$) => scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_$p0$],
            {},
          );
      return target$.takeLastWhile(testProxy);
    };
Function _StringCharacters_toLowerCase$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    target$.toLowerCase;
Function _StringCharacters_toUpperCase$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    target$.toUpperCase;
Function _StringCharacters_eq$$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    (Object other$) => target$ == other$;
Function _StringCharacters_toString$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    target$.toString;
Function _StringCharacters_findFirst$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    target$.findFirst;
Function _StringCharacters_findLast$(
  m.Scope scope$,
  StringCharacters target$,
) =>
    target$.findLast;
Function StringCharacterRange_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as StringCharacterRange;
Function StringCharacterRange_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is StringCharacterRange;
Function _StringCharacterRange_current$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    () {
      return target$.current;
    };
Function _StringCharacterRange_utf16CodeUnits$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    () {
      return target$.utf16CodeUnits;
    };
Function _StringCharacterRange_runes$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    () {
      return target$.runes;
    };
Function _StringCharacterRange_isEmpty$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    () {
      return target$.isEmpty;
    };
Function _StringCharacterRange_isNotEmpty$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    () {
      return target$.isNotEmpty;
    };
Function _StringCharacterRange_source$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    () {
      return target$.source;
    };
Function _StringCharacterRange_charactersAfter$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    () {
      return target$.charactersAfter;
    };
Function _StringCharacterRange_charactersBefore$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    () {
      return target$.charactersBefore;
    };
Function _StringCharacterRange_currentCharacters$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    () {
      return target$.currentCharacters;
    };
Function _StringCharacterRange_stringAfter$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    () {
      return target$.stringAfter;
    };
Function _StringCharacterRange_stringAfterLength$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    () {
      return target$.stringAfterLength;
    };
Function _StringCharacterRange_stringBefore$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    () {
      return target$.stringBefore;
    };
Function _StringCharacterRange_stringBeforeLength$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    () {
      return target$.stringBeforeLength;
    };
Function _StringCharacterRange__$(m.Scope scope$) => (String string) {
      return StringCharacterRange(string);
    };
Function _StringCharacterRange_at_$(m.Scope scope$) => StringCharacterRange.at;
Function _StringCharacterRange_moveNext$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.moveNext;
Function _StringCharacterRange_moveBack$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.moveBack;
Function _StringCharacterRange_copy$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.copy;
Function _StringCharacterRange_collapseToEnd$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.collapseToEnd;
Function _StringCharacterRange_collapseToStart$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.collapseToStart;
Function _StringCharacterRange_dropFirst$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.dropFirst;
Function _StringCharacterRange_dropTo$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.dropTo;
Function _StringCharacterRange_dropUntil$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.dropUntil;
Function _StringCharacterRange_dropWhile$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(String test_$p0$) => scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_$p0$],
            {},
          );
      target$.dropWhile(testProxy);
    };
Function _StringCharacterRange_dropLast$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.dropLast;
Function _StringCharacterRange_dropBackTo$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.dropBackTo;
Function _StringCharacterRange_dropBackUntil$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.dropBackUntil;
Function _StringCharacterRange_dropBackWhile$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(String test_$p0$) => scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_$p0$],
            {},
          );
      target$.dropBackWhile(testProxy);
    };
Function _StringCharacterRange_expandNext$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.expandNext;
Function _StringCharacterRange_expandTo$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.expandTo;
Function _StringCharacterRange_expandWhile$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(String test_character$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_character$],
            {},
          );
      target$.expandWhile(testProxy);
    };
Function _StringCharacterRange_expandAll$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.expandAll;
Function _StringCharacterRange_expandBack$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.expandBack;
Function _StringCharacterRange_expandBackTo$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.expandBackTo;
Function _StringCharacterRange_expandBackWhile$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(String test_character$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_character$],
            {},
          );
      target$.expandBackWhile(testProxy);
    };
Function _StringCharacterRange_expandBackUntil$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.expandBackUntil;
Function _StringCharacterRange_expandBackAll$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.expandBackAll;
Function _StringCharacterRange_expandUntil$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.expandUntil;
Function _StringCharacterRange_moveBackUntil$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.moveBackUntil;
Function _StringCharacterRange_collapseToFirst$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.collapseToFirst;
Function _StringCharacterRange_collapseToLast$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.collapseToLast;
Function _StringCharacterRange_moveUntil$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.moveUntil;
Function _StringCharacterRange_replaceFirst$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.replaceFirst;
Function _StringCharacterRange_replaceAll$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.replaceAll;
Function _StringCharacterRange_replaceRange$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.replaceRange;
Function _StringCharacterRange_startsWith$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.startsWith;
Function _StringCharacterRange_endsWith$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.endsWith;
Function _StringCharacterRange_isFollowedBy$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.isFollowedBy;
Function _StringCharacterRange_isPrecededBy$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.isPrecededBy;
Function _StringCharacterRange_moveBackTo$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.moveBackTo;
Function _StringCharacterRange_moveTo$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.moveTo;
Function _StringCharacterRange_moveBackAll$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.moveBackAll;
Function _StringCharacterRange_moveNextAll$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.moveNextAll;
Function _StringCharacterRange_split$(
  m.Scope scope$,
  StringCharacterRange target$,
) =>
    target$.split;
