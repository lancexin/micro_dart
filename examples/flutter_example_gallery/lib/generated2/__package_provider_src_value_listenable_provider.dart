// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:provider/src/value_listenable_provider.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:nested/nested.dart';
import 'package:provider/src/provider.dart';

const libraryMirror = m.LibraryMirror(
  'package:provider/src/value_listenable_provider.dart',
  {'ValueListenableProvider.value': _ValueListenableProvider_value_$},
  {},
  {
    'ValueListenableProvider': m.ClassMirror(
      'ValueListenableProvider',
      {
        '#as': ValueListenableProvider_as$,
        '#is': ValueListenableProvider_is$,
        'buildWithChild': _ValueListenableProvider_buildWithChild$,
        'debugFillProperties': _ValueListenableProvider_debugFillProperties$,
      },
      {},
    )
  },
);
Function ValueListenableProvider_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ValueListenableProvider<T>;
Function ValueListenableProvider_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ValueListenableProvider<T>;
Function _ValueListenableProvider_value_$(m.Scope scope$) => ({
      Key? key,
      required ValueListenable value,
      m.FunctionPointer? updateShouldNotify,
      Widget? child,
    }) {
      bool updateShouldNotifyProxy(
        dynamic updateShouldNotify_previous$,
        dynamic updateShouldNotify_current$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            updateShouldNotify!,
            [
              updateShouldNotify_previous$,
              updateShouldNotify_current$,
            ],
            {},
          );
      return ValueListenableProvider.value(
        child: child,
        key: key,
        updateShouldNotify:
            updateShouldNotify == null ? null : updateShouldNotifyProxy,
        value: value,
      );
    };
Function _ValueListenableProvider_buildWithChild$<T>(
  m.Scope scope$,
  ValueListenableProvider<T> target$,
) =>
    target$.buildWithChild;
Function _ValueListenableProvider_debugFillProperties$<T>(
  m.Scope scope$,
  ValueListenableProvider<T> target$,
) =>
    target$.debugFillProperties;
