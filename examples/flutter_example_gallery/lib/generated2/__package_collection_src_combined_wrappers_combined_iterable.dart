// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:collection/src/combined_wrappers/combined_iterable.dart';
import 'dart:collection';
import 'package:collection/src/combined_wrappers/combined_iterator.dart';

const libraryMirror = m.LibraryMirror(
  'package:collection/src/combined_wrappers/combined_iterable.dart',
  {'CombinedIterableView.': _CombinedIterableView__$},
  {},
  {
    'CombinedIterableView': m.ClassMirror(
      'CombinedIterableView',
      {
        '#as': CombinedIterableView_as$,
        '#is': CombinedIterableView_is$,
        'iterator': _CombinedIterableView_iterator$,
        'isEmpty': _CombinedIterableView_isEmpty$,
        'length': _CombinedIterableView_length$,
        'contains': _CombinedIterableView_contains$,
      },
      {},
    )
  },
);
Function CombinedIterableView_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CombinedIterableView<T>;
Function CombinedIterableView_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CombinedIterableView<T>;
Function _CombinedIterableView_iterator$<T>(
  m.Scope scope$,
  CombinedIterableView<T> target$,
) =>
    () {
      return target$.iterator;
    };
Function _CombinedIterableView_isEmpty$<T>(
  m.Scope scope$,
  CombinedIterableView<T> target$,
) =>
    () {
      return target$.isEmpty;
    };
Function _CombinedIterableView_length$<T>(
  m.Scope scope$,
  CombinedIterableView<T> target$,
) =>
    () {
      return target$.length;
    };
Function _CombinedIterableView__$(m.Scope scope$) => (Iterable _iterables) {
      return CombinedIterableView(Iterable.castFrom(_iterables));
    };
Function _CombinedIterableView_contains$<T>(
  m.Scope scope$,
  CombinedIterableView<T> target$,
) =>
    target$.contains;
