// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:path_provider_platform_interface/path_provider_platform_interface.dart';
import 'package:plugin_platform_interface/plugin_platform_interface.dart';
import 'package:path_provider_platform_interface/src/enums.dart';
import 'package:path_provider_platform_interface/src/method_channel_path_provider.dart';

const libraryMirror = m.LibraryMirror(
  'package:path_provider_platform_interface/path_provider_platform_interface.dart',
  {'PathProviderPlatform.instance': _PathProviderPlatform_instance$},
  {'PathProviderPlatform.instance': _PathProviderPlatform_instance_set$},
  {
    'PathProviderPlatform': m.ClassMirror(
      'PathProviderPlatform',
      {
        '#as': PathProviderPlatform_as$,
        '#is': PathProviderPlatform_is$,
        'getTemporaryPath': _PathProviderPlatform_getTemporaryPath$,
        'getApplicationSupportPath':
            _PathProviderPlatform_getApplicationSupportPath$,
        'getLibraryPath': _PathProviderPlatform_getLibraryPath$,
        'getApplicationDocumentsPath':
            _PathProviderPlatform_getApplicationDocumentsPath$,
        'getExternalStoragePath': _PathProviderPlatform_getExternalStoragePath$,
        'getExternalCachePaths': _PathProviderPlatform_getExternalCachePaths$,
        'getExternalStoragePaths':
            _PathProviderPlatform_getExternalStoragePaths$,
        'getDownloadsPath': _PathProviderPlatform_getDownloadsPath$,
      },
      {},
    )
  },
);
Function PathProviderPlatform_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PathProviderPlatform;
Function PathProviderPlatform_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PathProviderPlatform;
Function _PathProviderPlatform_instance$(m.Scope scope$) =>
    () => PathProviderPlatform.instance;
void _PathProviderPlatform_instance_set$(PathProviderPlatform other$) {
  PathProviderPlatform.instance = other$;
}

Function _PathProviderPlatform_getTemporaryPath$(
  m.Scope scope$,
  PathProviderPlatform target$,
) =>
    target$.getTemporaryPath;
Function _PathProviderPlatform_getApplicationSupportPath$(
  m.Scope scope$,
  PathProviderPlatform target$,
) =>
    target$.getApplicationSupportPath;
Function _PathProviderPlatform_getLibraryPath$(
  m.Scope scope$,
  PathProviderPlatform target$,
) =>
    target$.getLibraryPath;
Function _PathProviderPlatform_getApplicationDocumentsPath$(
  m.Scope scope$,
  PathProviderPlatform target$,
) =>
    target$.getApplicationDocumentsPath;
Function _PathProviderPlatform_getExternalStoragePath$(
  m.Scope scope$,
  PathProviderPlatform target$,
) =>
    target$.getExternalStoragePath;
Function _PathProviderPlatform_getExternalCachePaths$(
  m.Scope scope$,
  PathProviderPlatform target$,
) =>
    target$.getExternalCachePaths;
Function _PathProviderPlatform_getExternalStoragePaths$(
  m.Scope scope$,
  PathProviderPlatform target$,
) =>
    target$.getExternalStoragePaths;
Function _PathProviderPlatform_getDownloadsPath$(
  m.Scope scope$,
  PathProviderPlatform target$,
) =>
    target$.getDownloadsPath;
