// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter_staggered_grid_view/src/layouts/quilted.dart';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter_staggered_grid_view/src/foundation/extensions.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter_staggered_grid_view/src/layouts/quilted.dart',
  {
    'QuiltedGridTile.': _QuiltedGridTile__$,
    'SliverQuiltedGridDelegate.': _SliverQuiltedGridDelegate__$,
    'QuiltedGridRepeatPattern.same': _QuiltedGridRepeatPattern_same$,
    'QuiltedGridRepeatPattern.inverted': _QuiltedGridRepeatPattern_inverted$,
    'QuiltedGridRepeatPattern.mirrored': _QuiltedGridRepeatPattern_mirrored$,
  },
  {},
  {
    'QuiltedGridTile': m.ClassMirror(
      'QuiltedGridTile',
      {
        '#as': QuiltedGridTile_as$,
        '#is': QuiltedGridTile_is$,
        'mainAxisCount': _QuiltedGridTile_mainAxisCount$,
        'crossAxisCount': _QuiltedGridTile_crossAxisCount$,
        'toString': _QuiltedGridTile_toString$,
      },
      {},
    ),
    'SliverQuiltedGridDelegate': m.ClassMirror(
      'SliverQuiltedGridDelegate',
      {
        '#as': SliverQuiltedGridDelegate_as$,
        '#is': SliverQuiltedGridDelegate_is$,
        'crossAxisCount': _SliverQuiltedGridDelegate_crossAxisCount$,
        'repeatPattern': _SliverQuiltedGridDelegate_repeatPattern$,
        'mainAxisSpacing': _SliverQuiltedGridDelegate_mainAxisSpacing$,
        'crossAxisSpacing': _SliverQuiltedGridDelegate_crossAxisSpacing$,
        'getLayout': _SliverQuiltedGridDelegate_getLayout$,
        'shouldRelayout': _SliverQuiltedGridDelegate_shouldRelayout$,
      },
      {},
    ),
    'QuiltedGridRepeatPattern': m.ClassMirror(
      'QuiltedGridRepeatPattern',
      {
        '#as': QuiltedGridRepeatPattern_as$,
        '#is': QuiltedGridRepeatPattern_is$,
        'repeatedIndexes': _QuiltedGridRepeatPattern_repeatedIndexes$,
        'repeatedTileCount': _QuiltedGridRepeatPattern_repeatedTileCount$,
      },
      {},
    ),
  },
);
Function QuiltedGridTile_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as QuiltedGridTile;
Function QuiltedGridTile_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is QuiltedGridTile;
Function _QuiltedGridTile_mainAxisCount$(
  m.Scope scope$,
  QuiltedGridTile target$,
) =>
    () {
      return target$.mainAxisCount;
    };
Function _QuiltedGridTile_crossAxisCount$(
  m.Scope scope$,
  QuiltedGridTile target$,
) =>
    () {
      return target$.crossAxisCount;
    };
Function _QuiltedGridTile__$(m.Scope scope$) => (
      int mainAxisCount,
      int crossAxisCount,
    ) {
      return QuiltedGridTile(
        mainAxisCount,
        crossAxisCount,
      );
    };
Function _QuiltedGridTile_toString$(
  m.Scope scope$,
  QuiltedGridTile target$,
) =>
    target$.toString;
Function SliverQuiltedGridDelegate_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverQuiltedGridDelegate;
Function SliverQuiltedGridDelegate_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverQuiltedGridDelegate;
Function _SliverQuiltedGridDelegate_crossAxisCount$(
  m.Scope scope$,
  SliverQuiltedGridDelegate target$,
) =>
    () {
      return target$.crossAxisCount;
    };
Function _SliverQuiltedGridDelegate_repeatPattern$(
  m.Scope scope$,
  SliverQuiltedGridDelegate target$,
) =>
    () {
      return target$.repeatPattern;
    };
Function _SliverQuiltedGridDelegate_mainAxisSpacing$(
  m.Scope scope$,
  SliverQuiltedGridDelegate target$,
) =>
    () {
      return target$.mainAxisSpacing;
    };
Function _SliverQuiltedGridDelegate_crossAxisSpacing$(
  m.Scope scope$,
  SliverQuiltedGridDelegate target$,
) =>
    () {
      return target$.crossAxisSpacing;
    };
Function _SliverQuiltedGridDelegate__$(m.Scope scope$) => ({
      required int crossAxisCount,
      required List pattern,
      QuiltedGridRepeatPattern? repeatPattern,
      double? mainAxisSpacing,
      double? crossAxisSpacing,
    }) {
      return SliverQuiltedGridDelegate(
        crossAxisCount: crossAxisCount,
        crossAxisSpacing: crossAxisSpacing ?? 0,
        mainAxisSpacing: mainAxisSpacing ?? 0,
        pattern: List.from(pattern),
        repeatPattern: repeatPattern ?? QuiltedGridRepeatPattern.same,
      );
    };
Function _SliverQuiltedGridDelegate_getLayout$(
  m.Scope scope$,
  SliverQuiltedGridDelegate target$,
) =>
    target$.getLayout;
Function _SliverQuiltedGridDelegate_shouldRelayout$(
  m.Scope scope$,
  SliverQuiltedGridDelegate target$,
) =>
    target$.shouldRelayout;
Function QuiltedGridRepeatPattern_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as QuiltedGridRepeatPattern;
Function QuiltedGridRepeatPattern_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is QuiltedGridRepeatPattern;
Function _QuiltedGridRepeatPattern_same$(m.Scope scope$) =>
    () => QuiltedGridRepeatPattern.same;
Function _QuiltedGridRepeatPattern_inverted$(m.Scope scope$) =>
    () => QuiltedGridRepeatPattern.inverted;
Function _QuiltedGridRepeatPattern_mirrored$(m.Scope scope$) =>
    () => QuiltedGridRepeatPattern.mirrored;
Function _QuiltedGridRepeatPattern_repeatedIndexes$(
  m.Scope scope$,
  QuiltedGridRepeatPattern target$,
) =>
    target$.repeatedIndexes;
Function _QuiltedGridRepeatPattern_repeatedTileCount$(
  m.Scope scope$,
  QuiltedGridRepeatPattern target$,
) =>
    target$.repeatedTileCount;
