// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:material_color_utilities/utils/math_utils.dart';

const libraryMirror = m.LibraryMirror(
  'package:material_color_utilities/utils/math_utils.dart',
  {
    'MathUtils.': _MathUtils__$,
    'MathUtils.signum': _MathUtils_signum$,
    'MathUtils.lerp': _MathUtils_lerp$,
    'MathUtils.clampInt': _MathUtils_clampInt$,
    'MathUtils.clampDouble': _MathUtils_clampDouble$,
    'MathUtils.sanitizeDegreesInt': _MathUtils_sanitizeDegreesInt$,
    'MathUtils.sanitizeDegreesDouble': _MathUtils_sanitizeDegreesDouble$,
    'MathUtils.rotationDirection': _MathUtils_rotationDirection$,
    'MathUtils.differenceDegrees': _MathUtils_differenceDegrees$,
    'MathUtils.matrixMultiply': _MathUtils_matrixMultiply$,
  },
  {},
  {
    'MathUtils': m.ClassMirror(
      'MathUtils',
      {
        '#as': MathUtils_as$,
        '#is': MathUtils_is$,
      },
      {},
    )
  },
);
Function MathUtils_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MathUtils;
Function MathUtils_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MathUtils;
Function _MathUtils__$(m.Scope scope$) => () {
      return MathUtils();
    };
Function _MathUtils_signum$(m.Scope scope$) => MathUtils.signum;
Function _MathUtils_lerp$(m.Scope scope$) => MathUtils.lerp;
Function _MathUtils_clampInt$(m.Scope scope$) => MathUtils.clampInt;
Function _MathUtils_clampDouble$(m.Scope scope$) => MathUtils.clampDouble;
Function _MathUtils_sanitizeDegreesInt$(m.Scope scope$) =>
    MathUtils.sanitizeDegreesInt;
Function _MathUtils_sanitizeDegreesDouble$(m.Scope scope$) =>
    MathUtils.sanitizeDegreesDouble;
Function _MathUtils_rotationDirection$(m.Scope scope$) =>
    MathUtils.rotationDirection;
Function _MathUtils_differenceDegrees$(m.Scope scope$) =>
    MathUtils.differenceDegrees;
Function _MathUtils_matrixMultiply$(m.Scope scope$) => MathUtils.matrixMultiply;
