// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:animations/src/fade_scale_transition.dart';
import 'package:flutter/material.dart';
import 'package:animations/src/modal.dart';

const libraryMirror = m.LibraryMirror(
  'package:animations/src/fade_scale_transition.dart',
  {
    'FadeScaleTransitionConfiguration.': _FadeScaleTransitionConfiguration__$,
    'FadeScaleTransition.': _FadeScaleTransition__$,
  },
  {},
  {
    'FadeScaleTransitionConfiguration': m.ClassMirror(
      'FadeScaleTransitionConfiguration',
      {
        '#as': FadeScaleTransitionConfiguration_as$,
        '#is': FadeScaleTransitionConfiguration_is$,
        'transitionBuilder':
            _FadeScaleTransitionConfiguration_transitionBuilder$,
      },
      {},
    ),
    'FadeScaleTransition': m.ClassMirror(
      'FadeScaleTransition',
      {
        '#as': FadeScaleTransition_as$,
        '#is': FadeScaleTransition_is$,
        'animation': _FadeScaleTransition_animation$,
        'child': _FadeScaleTransition_child$,
        'build': _FadeScaleTransition_build$,
      },
      {},
    ),
  },
);
Function FadeScaleTransitionConfiguration_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FadeScaleTransitionConfiguration;
Function FadeScaleTransitionConfiguration_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FadeScaleTransitionConfiguration;
Function _FadeScaleTransitionConfiguration__$(m.Scope scope$) => ({
      Color? barrierColor,
      bool? barrierDismissible,
      Duration? transitionDuration,
      Duration? reverseTransitionDuration,
      String? barrierLabel,
    }) {
      return FadeScaleTransitionConfiguration(
        barrierColor: barrierColor ?? Colors.black54,
        barrierDismissible: barrierDismissible ?? true,
        barrierLabel: barrierLabel ?? 'Dismiss',
        reverseTransitionDuration:
            reverseTransitionDuration ?? const Duration(milliseconds: 75),
        transitionDuration:
            transitionDuration ?? const Duration(milliseconds: 150),
      );
    };
Function _FadeScaleTransitionConfiguration_transitionBuilder$(
  m.Scope scope$,
  FadeScaleTransitionConfiguration target$,
) =>
    target$.transitionBuilder;
Function FadeScaleTransition_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FadeScaleTransition;
Function FadeScaleTransition_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FadeScaleTransition;
Function _FadeScaleTransition_animation$(
  m.Scope scope$,
  FadeScaleTransition target$,
) =>
    () {
      return target$.animation;
    };
Function _FadeScaleTransition_child$(
  m.Scope scope$,
  FadeScaleTransition target$,
) =>
    () {
      return target$.child;
    };
Function _FadeScaleTransition__$(m.Scope scope$) => ({
      Key? key,
      required Animation<double> animation,
      Widget? child,
    }) {
      return FadeScaleTransition(
        animation: animation,
        child: child,
        key: key,
      );
    };
Function _FadeScaleTransition_build$(
  m.Scope scope$,
  FadeScaleTransition target$,
) =>
    target$.build;
