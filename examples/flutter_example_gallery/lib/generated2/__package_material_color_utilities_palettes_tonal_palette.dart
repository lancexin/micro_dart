// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:material_color_utilities/palettes/tonal_palette.dart';
import 'dart:math';
import 'package:material_color_utilities/hct/hct.dart';

const libraryMirror = m.LibraryMirror(
  'package:material_color_utilities/palettes/tonal_palette.dart',
  {
    'TonalPalette.commonTones': _TonalPalette_commonTones$,
    'TonalPalette.commonSize': _TonalPalette_commonSize$,
    'TonalPalette.of': _TonalPalette_of$,
    'TonalPalette.fromList': _TonalPalette_fromList$,
  },
  {},
  {
    'TonalPalette': m.ClassMirror(
      'TonalPalette',
      {
        '#as': TonalPalette_as$,
        '#is': TonalPalette_is$,
        'asList': _TonalPalette_asList$,
        'hashCode': _TonalPalette_hashCode$,
        'get': _TonalPalette_get$,
        '==': _TonalPalette_eq$$,
        'toString': _TonalPalette_toString$,
      },
      {},
    )
  },
);
Function TonalPalette_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TonalPalette;
Function TonalPalette_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TonalPalette;
Function _TonalPalette_commonTones$(m.Scope scope$) =>
    () => TonalPalette.commonTones;
Function _TonalPalette_commonSize$(m.Scope scope$) =>
    () => TonalPalette.commonSize;
Function _TonalPalette_asList$(
  m.Scope scope$,
  TonalPalette target$,
) =>
    () {
      return target$.asList;
    };
Function _TonalPalette_hashCode$(
  m.Scope scope$,
  TonalPalette target$,
) =>
    () {
      return target$.hashCode;
    };
Function _TonalPalette_of$(m.Scope scope$) => TonalPalette.of;
Function _TonalPalette_fromList$(m.Scope scope$) => TonalPalette.fromList;
Function _TonalPalette_get$(
  m.Scope scope$,
  TonalPalette target$,
) =>
    target$.get;
Function _TonalPalette_eq$$(
  m.Scope scope$,
  TonalPalette target$,
) =>
    (Object other$) => target$ == other$;
Function _TonalPalette_toString$(
  m.Scope scope$,
  TonalPalette target$,
) =>
    target$.toString;
