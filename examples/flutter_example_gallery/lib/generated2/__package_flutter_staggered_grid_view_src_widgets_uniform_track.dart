// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter_staggered_grid_view/src/widgets/uniform_track.dart';
import 'package:flutter/material.dart';
import 'package:flutter_staggered_grid_view/src/rendering/uniform_track.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter_staggered_grid_view/src/widgets/uniform_track.dart',
  {'UniformTrack.': _UniformTrack__$},
  {},
  {
    'UniformTrack': m.ClassMirror(
      'UniformTrack',
      {
        '#as': UniformTrack_as$,
        '#is': UniformTrack_is$,
        'spacing': _UniformTrack_spacing$,
        'division': _UniformTrack_division$,
        'direction': _UniformTrack_direction$,
        'createRenderObject': _UniformTrack_createRenderObject$,
        'updateRenderObject': _UniformTrack_updateRenderObject$,
      },
      {},
    )
  },
);
Function UniformTrack_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as UniformTrack;
Function UniformTrack_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is UniformTrack;
Function _UniformTrack_spacing$(
  m.Scope scope$,
  UniformTrack target$,
) =>
    () {
      return target$.spacing;
    };
Function _UniformTrack_division$(
  m.Scope scope$,
  UniformTrack target$,
) =>
    () {
      return target$.division;
    };
Function _UniformTrack_direction$(
  m.Scope scope$,
  UniformTrack target$,
) =>
    () {
      return target$.direction;
    };
Function _UniformTrack__$(m.Scope scope$) => ({
      Key? key,
      required int division,
      double? spacing,
      required AxisDirection direction,
      required List children,
    }) {
      return UniformTrack(
        children: List.from(children),
        direction: direction,
        division: division,
        key: key,
        spacing: spacing ?? 0,
      );
    };
Function _UniformTrack_createRenderObject$(
  m.Scope scope$,
  UniformTrack target$,
) =>
    target$.createRenderObject;
Function _UniformTrack_updateRenderObject$(
  m.Scope scope$,
  UniformTrack target$,
) =>
    target$.updateRenderObject;
