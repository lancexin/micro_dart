// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter_staggered_grid_view/src/rendering/uniform_track.dart';
import 'dart:math';
import 'package:flutter/rendering.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter_staggered_grid_view/src/rendering/uniform_track.dart',
  {
    'UniformTrackParentData.': _UniformTrackParentData__$,
    'RenderUniformTrack.': _RenderUniformTrack__$,
  },
  {},
  {
    'UniformTrackParentData': m.ClassMirror(
      'UniformTrackParentData',
      {
        '#as': UniformTrackParentData_as$,
        '#is': UniformTrackParentData_is$,
      },
      {},
    ),
    'RenderUniformTrack': m.ClassMirror(
      'RenderUniformTrack',
      {
        '#as': RenderUniformTrack_as$,
        '#is': RenderUniformTrack_is$,
        'spacing': _RenderUniformTrack_spacing$,
        'direction': _RenderUniformTrack_direction$,
        'division': _RenderUniformTrack_division$,
        'setupParentData': _RenderUniformTrack_setupParentData$,
        'hitTestChildren': _RenderUniformTrack_hitTestChildren$,
        'computeDryLayout': _RenderUniformTrack_computeDryLayout$,
        'performLayout': _RenderUniformTrack_performLayout$,
        'paint': _RenderUniformTrack_paint$,
      },
      {
        'spacing': _RenderUniformTrack_spacing_set$,
        'direction': _RenderUniformTrack_direction_set$,
        'division': _RenderUniformTrack_division_set$,
      },
    ),
  },
);
Function UniformTrackParentData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as UniformTrackParentData;
Function UniformTrackParentData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is UniformTrackParentData;
Function _UniformTrackParentData__$(m.Scope scope$) => () {
      return UniformTrackParentData();
    };
Function RenderUniformTrack_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RenderUniformTrack;
Function RenderUniformTrack_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RenderUniformTrack;
Function _RenderUniformTrack_spacing$(
  m.Scope scope$,
  RenderUniformTrack target$,
) =>
    () {
      return target$.spacing;
    };
void _RenderUniformTrack_spacing_set$(
  m.Scope scope$,
  RenderUniformTrack target$,
) =>
    (dynamic other$) {
      target$.spacing = other$;
    };
Function _RenderUniformTrack_direction$(
  m.Scope scope$,
  RenderUniformTrack target$,
) =>
    () {
      return target$.direction;
    };
void _RenderUniformTrack_direction_set$(
  m.Scope scope$,
  RenderUniformTrack target$,
) =>
    (dynamic other$) {
      target$.direction = other$;
    };
Function _RenderUniformTrack_division$(
  m.Scope scope$,
  RenderUniformTrack target$,
) =>
    () {
      return target$.division;
    };
void _RenderUniformTrack_division_set$(
  m.Scope scope$,
  RenderUniformTrack target$,
) =>
    (dynamic other$) {
      target$.division = other$;
    };
Function _RenderUniformTrack__$(m.Scope scope$) => ({
      List? children,
      double? spacing,
      required int division,
      required AxisDirection direction,
    }) {
      return RenderUniformTrack(
        children: children == null ? null : List.from(children),
        direction: direction,
        division: division,
        spacing: spacing ?? 0,
      );
    };
Function _RenderUniformTrack_setupParentData$(
  m.Scope scope$,
  RenderUniformTrack target$,
) =>
    target$.setupParentData;
Function _RenderUniformTrack_hitTestChildren$(
  m.Scope scope$,
  RenderUniformTrack target$,
) =>
    target$.hitTestChildren;
Function _RenderUniformTrack_computeDryLayout$(
  m.Scope scope$,
  RenderUniformTrack target$,
) =>
    target$.computeDryLayout;
Function _RenderUniformTrack_performLayout$(
  m.Scope scope$,
  RenderUniformTrack target$,
) =>
    target$.performLayout;
Function _RenderUniformTrack_paint$(
  m.Scope scope$,
  RenderUniformTrack target$,
) =>
    target$.paint;
