// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:animations/src/modal.dart';
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:animations/src/fade_scale_transition.dart';

const libraryMirror = m.LibraryMirror(
  'package:animations/src/modal.dart',
  {'showModal': _showModal$},
  {},
  {
    'ModalConfiguration': m.ClassMirror(
      'ModalConfiguration',
      {
        '#as': ModalConfiguration_as$,
        '#is': ModalConfiguration_is$,
        'barrierColor': _ModalConfiguration_barrierColor$,
        'barrierDismissible': _ModalConfiguration_barrierDismissible$,
        'barrierLabel': _ModalConfiguration_barrierLabel$,
        'transitionDuration': _ModalConfiguration_transitionDuration$,
        'reverseTransitionDuration':
            _ModalConfiguration_reverseTransitionDuration$,
        'transitionBuilder': _ModalConfiguration_transitionBuilder$,
      },
      {},
    )
  },
);
Function ModalConfiguration_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ModalConfiguration;
Function ModalConfiguration_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ModalConfiguration;
Function _ModalConfiguration_barrierColor$(
  m.Scope scope$,
  ModalConfiguration target$,
) =>
    () {
      return target$.barrierColor;
    };
Function _ModalConfiguration_barrierDismissible$(
  m.Scope scope$,
  ModalConfiguration target$,
) =>
    () {
      return target$.barrierDismissible;
    };
Function _ModalConfiguration_barrierLabel$(
  m.Scope scope$,
  ModalConfiguration target$,
) =>
    () {
      return target$.barrierLabel;
    };
Function _ModalConfiguration_transitionDuration$(
  m.Scope scope$,
  ModalConfiguration target$,
) =>
    () {
      return target$.transitionDuration;
    };
Function _ModalConfiguration_reverseTransitionDuration$(
  m.Scope scope$,
  ModalConfiguration target$,
) =>
    () {
      return target$.reverseTransitionDuration;
    };
Function _ModalConfiguration_transitionBuilder$(
  m.Scope scope$,
  ModalConfiguration target$,
) =>
    target$.transitionBuilder;
Function _showModal$(m.Scope scope$) => ({
      required BuildContext context,
      ModalConfiguration? configuration,
      bool? useRootNavigator,
      required m.FunctionPointer builder,
      RouteSettings? routeSettings,
      ImageFilter? filter,
    }) {
      Widget builderProxy(BuildContext builder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [builder_context$],
            {},
          );
      return showModal(
        builder: builderProxy,
        configuration:
            configuration ?? const FadeScaleTransitionConfiguration(),
        context: context,
        filter: filter,
        routeSettings: routeSettings,
        useRootNavigator: useRootNavigator ?? true,
      );
    };
