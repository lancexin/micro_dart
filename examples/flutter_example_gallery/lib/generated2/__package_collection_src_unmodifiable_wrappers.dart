// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:collection/src/unmodifiable_wrappers.dart';
import 'package:collection/src/empty_unmodifiable_set.dart';
import 'package:collection/src/wrappers.dart';

const libraryMirror = m.LibraryMirror(
  'package:collection/src/unmodifiable_wrappers.dart',
  {
    'NonGrowableListView.': _NonGrowableListView__$,
    'UnmodifiableSetView.': _UnmodifiableSetView__$,
    'UnmodifiableSetView.empty': _UnmodifiableSetView_empty_$,
  },
  {},
  {
    'NonGrowableListView': m.ClassMirror(
      'NonGrowableListView',
      {
        '#as': NonGrowableListView_as$,
        '#is': NonGrowableListView_is$,
      },
      {},
    ),
    'NonGrowableListMixin': m.ClassMirror(
      'NonGrowableListMixin',
      {
        '#as': NonGrowableListMixin_as$,
        '#is': NonGrowableListMixin_is$,
        'add': _NonGrowableListMixin_add$,
        'addAll': _NonGrowableListMixin_addAll$,
        'insert': _NonGrowableListMixin_insert$,
        'insertAll': _NonGrowableListMixin_insertAll$,
        'remove': _NonGrowableListMixin_remove$,
        'removeAt': _NonGrowableListMixin_removeAt$,
        'removeLast': _NonGrowableListMixin_removeLast$,
        'removeWhere': _NonGrowableListMixin_removeWhere$,
        'retainWhere': _NonGrowableListMixin_retainWhere$,
        'removeRange': _NonGrowableListMixin_removeRange$,
        'replaceRange': _NonGrowableListMixin_replaceRange$,
        'clear': _NonGrowableListMixin_clear$,
      },
      {'length': _NonGrowableListMixin_length_set$},
    ),
    'UnmodifiableSetView': m.ClassMirror(
      'UnmodifiableSetView',
      {
        '#as': UnmodifiableSetView_as$,
        '#is': UnmodifiableSetView_is$,
      },
      {},
    ),
    'UnmodifiableSetMixin': m.ClassMirror(
      'UnmodifiableSetMixin',
      {
        '#as': UnmodifiableSetMixin_as$,
        '#is': UnmodifiableSetMixin_is$,
        'add': _UnmodifiableSetMixin_add$,
        'addAll': _UnmodifiableSetMixin_addAll$,
        'remove': _UnmodifiableSetMixin_remove$,
        'removeAll': _UnmodifiableSetMixin_removeAll$,
        'retainAll': _UnmodifiableSetMixin_retainAll$,
        'removeWhere': _UnmodifiableSetMixin_removeWhere$,
        'retainWhere': _UnmodifiableSetMixin_retainWhere$,
        'clear': _UnmodifiableSetMixin_clear$,
      },
      {},
    ),
    'UnmodifiableMapMixin': m.ClassMirror(
      'UnmodifiableMapMixin',
      {
        '#as': UnmodifiableMapMixin_as$,
        '#is': UnmodifiableMapMixin_is$,
        '[]=': _UnmodifiableMapMixin_$index_set$$,
        'putIfAbsent': _UnmodifiableMapMixin_putIfAbsent$,
        'addAll': _UnmodifiableMapMixin_addAll$,
        'remove': _UnmodifiableMapMixin_remove$,
        'clear': _UnmodifiableMapMixin_clear$,
      },
      {
        'first': _UnmodifiableMapMixin_first_set$,
        'last': _UnmodifiableMapMixin_last_set$,
      },
    ),
  },
);
Function NonGrowableListView_as$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as NonGrowableListView<E>;
Function NonGrowableListView_is$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is NonGrowableListView<E>;
Function _NonGrowableListView__$(m.Scope scope$) => (List listBase) {
      return NonGrowableListView(List.from(listBase));
    };
Function NonGrowableListMixin_as$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as NonGrowableListMixin<E>;
Function NonGrowableListMixin_is$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is NonGrowableListMixin<E>;
void _NonGrowableListMixin_length_set$<E>(
  m.Scope scope$,
  NonGrowableListMixin target$,
) =>
    (dynamic other$) {
      target$.length = other$;
    };
Function _NonGrowableListMixin_add$<E>(
  m.Scope scope$,
  NonGrowableListMixin<E> target$,
) =>
    target$.add;
Function _NonGrowableListMixin_addAll$<E>(
  m.Scope scope$,
  NonGrowableListMixin<E> target$,
) =>
    target$.addAll;
Function _NonGrowableListMixin_insert$<E>(
  m.Scope scope$,
  NonGrowableListMixin<E> target$,
) =>
    target$.insert;
Function _NonGrowableListMixin_insertAll$<E>(
  m.Scope scope$,
  NonGrowableListMixin<E> target$,
) =>
    target$.insertAll;
Function _NonGrowableListMixin_remove$<E>(
  m.Scope scope$,
  NonGrowableListMixin<E> target$,
) =>
    target$.remove;
Function _NonGrowableListMixin_removeAt$<E>(
  m.Scope scope$,
  NonGrowableListMixin<E> target$,
) =>
    target$.removeAt;
Function _NonGrowableListMixin_removeLast$<E>(
  m.Scope scope$,
  NonGrowableListMixin<E> target$,
) =>
    target$.removeLast;
Function _NonGrowableListMixin_removeWhere$(
  m.Scope scope$,
  NonGrowableListMixin target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(dynamic test_$p0$) => scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_$p0$],
            {},
          );
      target$.removeWhere(testProxy);
    };
Function _NonGrowableListMixin_retainWhere$(
  m.Scope scope$,
  NonGrowableListMixin target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(dynamic test_$p0$) => scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_$p0$],
            {},
          );
      target$.retainWhere(testProxy);
    };
Function _NonGrowableListMixin_removeRange$<E>(
  m.Scope scope$,
  NonGrowableListMixin<E> target$,
) =>
    target$.removeRange;
Function _NonGrowableListMixin_replaceRange$<E>(
  m.Scope scope$,
  NonGrowableListMixin<E> target$,
) =>
    target$.replaceRange;
Function _NonGrowableListMixin_clear$<E>(
  m.Scope scope$,
  NonGrowableListMixin<E> target$,
) =>
    target$.clear;
Function UnmodifiableSetView_as$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as UnmodifiableSetView<E>;
Function UnmodifiableSetView_is$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is UnmodifiableSetView<E>;
Function _UnmodifiableSetView__$(m.Scope scope$) => (Set setBase) {
      return UnmodifiableSetView(Set.from(setBase));
    };
Function _UnmodifiableSetView_empty_$(m.Scope scope$) =>
    UnmodifiableSetView.empty;
Function UnmodifiableSetMixin_as$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as UnmodifiableSetMixin<E>;
Function UnmodifiableSetMixin_is$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is UnmodifiableSetMixin<E>;
Function _UnmodifiableSetMixin_add$<E>(
  m.Scope scope$,
  UnmodifiableSetMixin<E> target$,
) =>
    target$.add;
Function _UnmodifiableSetMixin_addAll$<E>(
  m.Scope scope$,
  UnmodifiableSetMixin<E> target$,
) =>
    target$.addAll;
Function _UnmodifiableSetMixin_remove$<E>(
  m.Scope scope$,
  UnmodifiableSetMixin<E> target$,
) =>
    target$.remove;
Function _UnmodifiableSetMixin_removeAll$<E>(
  m.Scope scope$,
  UnmodifiableSetMixin<E> target$,
) =>
    target$.removeAll;
Function _UnmodifiableSetMixin_retainAll$<E>(
  m.Scope scope$,
  UnmodifiableSetMixin<E> target$,
) =>
    target$.retainAll;
Function _UnmodifiableSetMixin_removeWhere$(
  m.Scope scope$,
  UnmodifiableSetMixin target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(dynamic test_$p0$) => scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_$p0$],
            {},
          );
      target$.removeWhere(testProxy);
    };
Function _UnmodifiableSetMixin_retainWhere$(
  m.Scope scope$,
  UnmodifiableSetMixin target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(dynamic test_$p0$) => scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_$p0$],
            {},
          );
      target$.retainWhere(testProxy);
    };
Function _UnmodifiableSetMixin_clear$<E>(
  m.Scope scope$,
  UnmodifiableSetMixin<E> target$,
) =>
    target$.clear;
Function UnmodifiableMapMixin_as$<K, V>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as UnmodifiableMapMixin<K, V>;
Function UnmodifiableMapMixin_is$<K, V>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is UnmodifiableMapMixin<K, V>;
void _UnmodifiableMapMixin_first_set$<K, V>(
  m.Scope scope$,
  UnmodifiableMapMixin target$,
) =>
    (dynamic other$) {
      target$.first = other$;
    };
void _UnmodifiableMapMixin_last_set$<K, V>(
  m.Scope scope$,
  UnmodifiableMapMixin target$,
) =>
    (dynamic other$) {
      target$.last = other$;
    };
Function _UnmodifiableMapMixin_$index_set$$<K, V>(
  m.Scope scope$,
  UnmodifiableMapMixin<K, V> target$,
) =>
    (
      K index,
      V other,
    ) =>
        target$[index] = other;
Function _UnmodifiableMapMixin_putIfAbsent$(
  m.Scope scope$,
  UnmodifiableMapMixin target$,
) =>
    (
      dynamic key,
      m.FunctionPointer ifAbsent,
    ) {
      dynamic ifAbsentProxy() => scope$.engine.callFunctionPointer(
            scope$,
            ifAbsent,
            [],
            {},
          );
      return target$.putIfAbsent(
        key,
        ifAbsentProxy,
      );
    };
Function _UnmodifiableMapMixin_addAll$<K, V>(
  m.Scope scope$,
  UnmodifiableMapMixin<K, V> target$,
) =>
    target$.addAll;
Function _UnmodifiableMapMixin_remove$<K, V>(
  m.Scope scope$,
  UnmodifiableMapMixin<K, V> target$,
) =>
    target$.remove;
Function _UnmodifiableMapMixin_clear$<K, V>(
  m.Scope scope$,
  UnmodifiableMapMixin<K, V> target$,
) =>
    target$.clear;
