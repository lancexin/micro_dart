// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:material_color_utilities/score/score.dart';
import 'package:material_color_utilities/hct/hct.dart';
import 'package:material_color_utilities/utils/math_utils.dart';

const libraryMirror = m.LibraryMirror(
  'package:material_color_utilities/score/score.dart',
  {
    'ArgbAndScore.': _ArgbAndScore__$,
    'Score.': _Score__$,
    'Score.score': _Score_score$,
    'Score.argbToProportion': _Score_argbToProportion$,
  },
  {},
  {
    'ArgbAndScore': m.ClassMirror(
      'ArgbAndScore',
      {
        '#as': ArgbAndScore_as$,
        '#is': ArgbAndScore_is$,
        'argb': _ArgbAndScore_argb$,
        'score': _ArgbAndScore_score$,
        'compareTo': _ArgbAndScore_compareTo$,
      },
      {
        'argb': _ArgbAndScore_argb_set$,
        'score': _ArgbAndScore_score_set$,
      },
    ),
    'Score': m.ClassMirror(
      'Score',
      {
        '#as': Score_as$,
        '#is': Score_is$,
      },
      {},
    ),
  },
);
Function ArgbAndScore_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ArgbAndScore;
Function ArgbAndScore_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ArgbAndScore;
Function _ArgbAndScore_argb$(
  m.Scope scope$,
  ArgbAndScore target$,
) =>
    () {
      return target$.argb;
    };
void _ArgbAndScore_argb_set$(
  m.Scope scope$,
  ArgbAndScore target$,
) =>
    (dynamic other$) {
      target$.argb = other$;
    };
Function _ArgbAndScore_score$(
  m.Scope scope$,
  ArgbAndScore target$,
) =>
    () {
      return target$.score;
    };
void _ArgbAndScore_score_set$(
  m.Scope scope$,
  ArgbAndScore target$,
) =>
    (dynamic other$) {
      target$.score = other$;
    };
Function _ArgbAndScore__$(m.Scope scope$) => (
      int argb,
      double score,
    ) {
      return ArgbAndScore(
        argb,
        score,
      );
    };
Function _ArgbAndScore_compareTo$(
  m.Scope scope$,
  ArgbAndScore target$,
) =>
    target$.compareTo;
Function Score_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Score;
Function Score_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Score;
Function _Score__$(m.Scope scope$) => () {
      return Score();
    };
Function _Score_score$(m.Scope scope$) => Score.score;
Function _Score_argbToProportion$(m.Scope scope$) => Score.argbToProportion;
