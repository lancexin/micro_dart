// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:material_color_utilities/scheme/scheme.dart';
import 'package:material_color_utilities/palettes/core_palette.dart';

const libraryMirror = m.LibraryMirror(
  'package:material_color_utilities/scheme/scheme.dart',
  {
    'Scheme.': _Scheme__$,
    'Scheme.light': _Scheme_light$,
    'Scheme.dark': _Scheme_dark$,
    'Scheme.lightContent': _Scheme_lightContent$,
    'Scheme.darkContent': _Scheme_darkContent$,
    'Scheme.lightFromCorePalette': _Scheme_lightFromCorePalette$,
    'Scheme.darkFromCorePalette': _Scheme_darkFromCorePalette$,
  },
  {},
  {
    'Scheme': m.ClassMirror(
      'Scheme',
      {
        '#as': Scheme_as$,
        '#is': Scheme_is$,
        'primary': _Scheme_primary$,
        'onPrimary': _Scheme_onPrimary$,
        'primaryContainer': _Scheme_primaryContainer$,
        'onPrimaryContainer': _Scheme_onPrimaryContainer$,
        'secondary': _Scheme_secondary$,
        'onSecondary': _Scheme_onSecondary$,
        'secondaryContainer': _Scheme_secondaryContainer$,
        'onSecondaryContainer': _Scheme_onSecondaryContainer$,
        'tertiary': _Scheme_tertiary$,
        'onTertiary': _Scheme_onTertiary$,
        'tertiaryContainer': _Scheme_tertiaryContainer$,
        'onTertiaryContainer': _Scheme_onTertiaryContainer$,
        'error': _Scheme_error$,
        'onError': _Scheme_onError$,
        'errorContainer': _Scheme_errorContainer$,
        'onErrorContainer': _Scheme_onErrorContainer$,
        'background': _Scheme_background$,
        'onBackground': _Scheme_onBackground$,
        'surface': _Scheme_surface$,
        'onSurface': _Scheme_onSurface$,
        'surfaceVariant': _Scheme_surfaceVariant$,
        'onSurfaceVariant': _Scheme_onSurfaceVariant$,
        'outline': _Scheme_outline$,
        'outlineVariant': _Scheme_outlineVariant$,
        'shadow': _Scheme_shadow$,
        'scrim': _Scheme_scrim$,
        'inverseSurface': _Scheme_inverseSurface$,
        'inverseOnSurface': _Scheme_inverseOnSurface$,
        'inversePrimary': _Scheme_inversePrimary$,
      },
      {},
    )
  },
);
Function Scheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Scheme;
Function Scheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Scheme;
Function _Scheme_primary$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.primary;
    };
Function _Scheme_onPrimary$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.onPrimary;
    };
Function _Scheme_primaryContainer$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.primaryContainer;
    };
Function _Scheme_onPrimaryContainer$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.onPrimaryContainer;
    };
Function _Scheme_secondary$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.secondary;
    };
Function _Scheme_onSecondary$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.onSecondary;
    };
Function _Scheme_secondaryContainer$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.secondaryContainer;
    };
Function _Scheme_onSecondaryContainer$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.onSecondaryContainer;
    };
Function _Scheme_tertiary$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.tertiary;
    };
Function _Scheme_onTertiary$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.onTertiary;
    };
Function _Scheme_tertiaryContainer$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.tertiaryContainer;
    };
Function _Scheme_onTertiaryContainer$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.onTertiaryContainer;
    };
Function _Scheme_error$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.error;
    };
Function _Scheme_onError$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.onError;
    };
Function _Scheme_errorContainer$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.errorContainer;
    };
Function _Scheme_onErrorContainer$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.onErrorContainer;
    };
Function _Scheme_background$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.background;
    };
Function _Scheme_onBackground$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.onBackground;
    };
Function _Scheme_surface$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.surface;
    };
Function _Scheme_onSurface$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.onSurface;
    };
Function _Scheme_surfaceVariant$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.surfaceVariant;
    };
Function _Scheme_onSurfaceVariant$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.onSurfaceVariant;
    };
Function _Scheme_outline$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.outline;
    };
Function _Scheme_outlineVariant$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.outlineVariant;
    };
Function _Scheme_shadow$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.shadow;
    };
Function _Scheme_scrim$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.scrim;
    };
Function _Scheme_inverseSurface$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.inverseSurface;
    };
Function _Scheme_inverseOnSurface$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.inverseOnSurface;
    };
Function _Scheme_inversePrimary$(
  m.Scope scope$,
  Scheme target$,
) =>
    () {
      return target$.inversePrimary;
    };
Function _Scheme__$(m.Scope scope$) => ({
      required int primary,
      required int onPrimary,
      required int primaryContainer,
      required int onPrimaryContainer,
      required int secondary,
      required int onSecondary,
      required int secondaryContainer,
      required int onSecondaryContainer,
      required int tertiary,
      required int onTertiary,
      required int tertiaryContainer,
      required int onTertiaryContainer,
      required int error,
      required int onError,
      required int errorContainer,
      required int onErrorContainer,
      required int background,
      required int onBackground,
      required int surface,
      required int onSurface,
      required int surfaceVariant,
      required int onSurfaceVariant,
      required int outline,
      required int outlineVariant,
      required int shadow,
      required int scrim,
      required int inverseSurface,
      required int inverseOnSurface,
      required int inversePrimary,
    }) {
      return Scheme(
        background: background,
        error: error,
        errorContainer: errorContainer,
        inverseOnSurface: inverseOnSurface,
        inversePrimary: inversePrimary,
        inverseSurface: inverseSurface,
        onBackground: onBackground,
        onError: onError,
        onErrorContainer: onErrorContainer,
        onPrimary: onPrimary,
        onPrimaryContainer: onPrimaryContainer,
        onSecondary: onSecondary,
        onSecondaryContainer: onSecondaryContainer,
        onSurface: onSurface,
        onSurfaceVariant: onSurfaceVariant,
        onTertiary: onTertiary,
        onTertiaryContainer: onTertiaryContainer,
        outline: outline,
        outlineVariant: outlineVariant,
        primary: primary,
        primaryContainer: primaryContainer,
        scrim: scrim,
        secondary: secondary,
        secondaryContainer: secondaryContainer,
        shadow: shadow,
        surface: surface,
        surfaceVariant: surfaceVariant,
        tertiary: tertiary,
        tertiaryContainer: tertiaryContainer,
      );
    };
Function _Scheme_light$(m.Scope scope$) => Scheme.light;
Function _Scheme_dark$(m.Scope scope$) => Scheme.dark;
Function _Scheme_lightContent$(m.Scope scope$) => Scheme.lightContent;
Function _Scheme_darkContent$(m.Scope scope$) => Scheme.darkContent;
Function _Scheme_lightFromCorePalette$(m.Scope scope$) =>
    Scheme.lightFromCorePalette;
Function _Scheme_darkFromCorePalette$(m.Scope scope$) =>
    Scheme.darkFromCorePalette;
