// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:collection/src/list_extensions.dart';
import 'dart:collection';
import 'dart:math';
import 'package:collection/src/algorithms.dart';
import 'package:collection/src/algorithms.dart';
import 'package:collection/src/equality.dart';
import 'package:collection/src/utils.dart';

const libraryMirror = m.LibraryMirror(
  'package:collection/src/list_extensions.dart',
  {'ListSlice.': _ListSlice__$},
  {},
  {
    'ListSlice': m.ClassMirror(
      'ListSlice',
      {
        '#as': ListSlice_as$,
        '#is': ListSlice_is$,
        'source': _ListSlice_source$,
        'start': _ListSlice_start$,
        'length': _ListSlice_length$,
        'end': _ListSlice_end$,
        '[]': _ListSlice_$index$$,
        '[]=': _ListSlice_$index_set$$,
        'setRange': _ListSlice_setRange$,
        'slice': _ListSlice_slice$,
        'shuffle': _ListSlice_shuffle$,
        'sort': _ListSlice_sort$,
        'sortRange': _ListSlice_sortRange$,
        'shuffleRange': _ListSlice_shuffleRange$,
        'reverseRange': _ListSlice_reverseRange$,
        'add': _ListSlice_add$,
        'insert': _ListSlice_insert$,
        'insertAll': _ListSlice_insertAll$,
        'addAll': _ListSlice_addAll$,
        'remove': _ListSlice_remove$,
        'removeWhere': _ListSlice_removeWhere$,
        'retainWhere': _ListSlice_retainWhere$,
        'clear': _ListSlice_clear$,
        'removeAt': _ListSlice_removeAt$,
        'removeLast': _ListSlice_removeLast$,
        'removeRange': _ListSlice_removeRange$,
        'replaceRange': _ListSlice_replaceRange$,
      },
      {'length': _ListSlice_length_set$},
    )
  },
);
Function ListSlice_as$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ListSlice<E>;
Function ListSlice_is$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ListSlice<E>;
Function _ListSlice_source$<E>(
  m.Scope scope$,
  ListSlice<E> target$,
) =>
    () {
      return target$.source;
    };
Function _ListSlice_start$<E>(
  m.Scope scope$,
  ListSlice<E> target$,
) =>
    () {
      return target$.start;
    };
Function _ListSlice_length$<E>(
  m.Scope scope$,
  ListSlice<E> target$,
) =>
    () {
      return target$.length;
    };
Function _ListSlice_end$<E>(
  m.Scope scope$,
  ListSlice<E> target$,
) =>
    () {
      return target$.end;
    };
void _ListSlice_length_set$<E>(
  m.Scope scope$,
  ListSlice target$,
) =>
    (dynamic other$) {
      target$.length = other$;
    };
Function _ListSlice__$(m.Scope scope$) => (
      List source,
      int start,
      int end,
    ) {
      return ListSlice(
        List.from(source),
        start,
        end,
      );
    };
Function _ListSlice_$index$$<E>(
  m.Scope scope$,
  ListSlice<E> target$,
) =>
    (int index) => target$[index];
Function _ListSlice_$index_set$$<E>(
  m.Scope scope$,
  ListSlice<E> target$,
) =>
    (
      int index,
      E other,
    ) =>
        target$[index] = other;
Function _ListSlice_setRange$<E>(
  m.Scope scope$,
  ListSlice<E> target$,
) =>
    target$.setRange;
Function _ListSlice_slice$<E>(
  m.Scope scope$,
  ListSlice<E> target$,
) =>
    target$.slice;
Function _ListSlice_shuffle$<E>(
  m.Scope scope$,
  ListSlice<E> target$,
) =>
    target$.shuffle;
Function _ListSlice_sort$(
  m.Scope scope$,
  ListSlice target$,
) =>
    ([m.FunctionPointer? compare]) {
      if (compare == null) {
        target$.sort();
      }
      int compareProxy(
        dynamic compare_a$,
        dynamic compare_b$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            compare!,
            [
              compare_a$,
              compare_b$,
            ],
            {},
          );
      target$.sort(compare == null ? null : compareProxy);
      return;
    };
Function _ListSlice_sortRange$(
  m.Scope scope$,
  ListSlice target$,
) =>
    (
      int start,
      int end,
      m.FunctionPointer compare,
    ) {
      int compareProxy(
        dynamic compare_a$,
        dynamic compare_b$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            compare,
            [
              compare_a$,
              compare_b$,
            ],
            {},
          );
      target$.sortRange(
        start,
        end,
        compareProxy,
      );
    };
Function _ListSlice_shuffleRange$<E>(
  m.Scope scope$,
  ListSlice<E> target$,
) =>
    target$.shuffleRange;
Function _ListSlice_reverseRange$<E>(
  m.Scope scope$,
  ListSlice<E> target$,
) =>
    target$.reverseRange;
Function _ListSlice_add$<E>(
  m.Scope scope$,
  ListSlice<E> target$,
) =>
    target$.add;
Function _ListSlice_insert$<E>(
  m.Scope scope$,
  ListSlice<E> target$,
) =>
    target$.insert;
Function _ListSlice_insertAll$<E>(
  m.Scope scope$,
  ListSlice<E> target$,
) =>
    target$.insertAll;
Function _ListSlice_addAll$<E>(
  m.Scope scope$,
  ListSlice<E> target$,
) =>
    target$.addAll;
Function _ListSlice_remove$<E>(
  m.Scope scope$,
  ListSlice<E> target$,
) =>
    target$.remove;
Function _ListSlice_removeWhere$(
  m.Scope scope$,
  ListSlice target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(dynamic test_element$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_element$],
            {},
          );
      target$.removeWhere(testProxy);
    };
Function _ListSlice_retainWhere$(
  m.Scope scope$,
  ListSlice target$,
) =>
    (m.FunctionPointer test) {
      bool testProxy(dynamic test_element$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_element$],
            {},
          );
      target$.retainWhere(testProxy);
    };
Function _ListSlice_clear$<E>(
  m.Scope scope$,
  ListSlice<E> target$,
) =>
    target$.clear;
Function _ListSlice_removeAt$<E>(
  m.Scope scope$,
  ListSlice<E> target$,
) =>
    target$.removeAt;
Function _ListSlice_removeLast$<E>(
  m.Scope scope$,
  ListSlice<E> target$,
) =>
    target$.removeLast;
Function _ListSlice_removeRange$<E>(
  m.Scope scope$,
  ListSlice<E> target$,
) =>
    target$.removeRange;
Function _ListSlice_replaceRange$<E>(
  m.Scope scope$,
  ListSlice<E> target$,
) =>
    target$.replaceRange;
