// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter_staggered_grid_view/src/rendering/staggered_grid.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter_staggered_grid_view/src/rendering/staggered_grid.dart',
  {
    'StaggeredGridParentData.': _StaggeredGridParentData__$,
    'StaggeredGridDelegateWithFixedCrossAxisCount.':
        _StaggeredGridDelegateWithFixedCrossAxisCount__$,
    'StaggeredGridDelegateWithMaxCrossAxisExtent.':
        _StaggeredGridDelegateWithMaxCrossAxisExtent__$,
    'RenderStaggeredGrid.': _RenderStaggeredGrid__$,
  },
  {},
  {
    'StaggeredGridParentData': m.ClassMirror(
      'StaggeredGridParentData',
      {
        '#as': StaggeredGridParentData_as$,
        '#is': StaggeredGridParentData_is$,
        'crossAxisCellCount': _StaggeredGridParentData_crossAxisCellCount$,
        'mainAxisCellCount': _StaggeredGridParentData_mainAxisCellCount$,
        'mainAxisExtent': _StaggeredGridParentData_mainAxisExtent$,
        'toString': _StaggeredGridParentData_toString$,
      },
      {
        'crossAxisCellCount': _StaggeredGridParentData_crossAxisCellCount_set$,
        'mainAxisCellCount': _StaggeredGridParentData_mainAxisCellCount_set$,
        'mainAxisExtent': _StaggeredGridParentData_mainAxisExtent_set$,
      },
    ),
    'StaggeredGridDelegate': m.ClassMirror(
      'StaggeredGridDelegate',
      {
        '#as': StaggeredGridDelegate_as$,
        '#is': StaggeredGridDelegate_is$,
        'getCrossAxisCount': _StaggeredGridDelegate_getCrossAxisCount$,
        'shouldRelayout': _StaggeredGridDelegate_shouldRelayout$,
      },
      {},
    ),
    'StaggeredGridDelegateWithFixedCrossAxisCount': m.ClassMirror(
      'StaggeredGridDelegateWithFixedCrossAxisCount',
      {
        '#as': StaggeredGridDelegateWithFixedCrossAxisCount_as$,
        '#is': StaggeredGridDelegateWithFixedCrossAxisCount_is$,
        'crossAxisCount':
            _StaggeredGridDelegateWithFixedCrossAxisCount_crossAxisCount$,
        'getCrossAxisCount':
            _StaggeredGridDelegateWithFixedCrossAxisCount_getCrossAxisCount$,
        'shouldRelayout':
            _StaggeredGridDelegateWithFixedCrossAxisCount_shouldRelayout$,
      },
      {},
    ),
    'StaggeredGridDelegateWithMaxCrossAxisExtent': m.ClassMirror(
      'StaggeredGridDelegateWithMaxCrossAxisExtent',
      {
        '#as': StaggeredGridDelegateWithMaxCrossAxisExtent_as$,
        '#is': StaggeredGridDelegateWithMaxCrossAxisExtent_is$,
        'maxCrossAxisExtent':
            _StaggeredGridDelegateWithMaxCrossAxisExtent_maxCrossAxisExtent$,
        'getCrossAxisCount':
            _StaggeredGridDelegateWithMaxCrossAxisExtent_getCrossAxisCount$,
        'shouldRelayout':
            _StaggeredGridDelegateWithMaxCrossAxisExtent_shouldRelayout$,
      },
      {},
    ),
    'RenderStaggeredGrid': m.ClassMirror(
      'RenderStaggeredGrid',
      {
        '#as': RenderStaggeredGrid_as$,
        '#is': RenderStaggeredGrid_is$,
        'delegate': _RenderStaggeredGrid_delegate$,
        'mainAxisSpacing': _RenderStaggeredGrid_mainAxisSpacing$,
        'crossAxisSpacing': _RenderStaggeredGrid_crossAxisSpacing$,
        'axisDirection': _RenderStaggeredGrid_axisDirection$,
        'mainAxis': _RenderStaggeredGrid_mainAxis$,
        'textDirection': _RenderStaggeredGrid_textDirection$,
        'setupParentData': _RenderStaggeredGrid_setupParentData$,
        'computeMinIntrinsicWidth':
            _RenderStaggeredGrid_computeMinIntrinsicWidth$,
        'computeMaxIntrinsicWidth':
            _RenderStaggeredGrid_computeMaxIntrinsicWidth$,
        'computeMinIntrinsicHeight':
            _RenderStaggeredGrid_computeMinIntrinsicHeight$,
        'computeMaxIntrinsicHeight':
            _RenderStaggeredGrid_computeMaxIntrinsicHeight$,
        'computeDistanceToActualBaseline':
            _RenderStaggeredGrid_computeDistanceToActualBaseline$,
        'computeDryLayout': _RenderStaggeredGrid_computeDryLayout$,
        'performLayout': _RenderStaggeredGrid_performLayout$,
        'hitTestChildren': _RenderStaggeredGrid_hitTestChildren$,
        'paint': _RenderStaggeredGrid_paint$,
      },
      {
        'delegate': _RenderStaggeredGrid_delegate_set$,
        'mainAxisSpacing': _RenderStaggeredGrid_mainAxisSpacing_set$,
        'crossAxisSpacing': _RenderStaggeredGrid_crossAxisSpacing_set$,
        'axisDirection': _RenderStaggeredGrid_axisDirection_set$,
        'textDirection': _RenderStaggeredGrid_textDirection_set$,
      },
    ),
  },
);
Function StaggeredGridParentData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as StaggeredGridParentData;
Function StaggeredGridParentData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is StaggeredGridParentData;
Function _StaggeredGridParentData_crossAxisCellCount$(
  m.Scope scope$,
  StaggeredGridParentData target$,
) =>
    () {
      return target$.crossAxisCellCount;
    };
void _StaggeredGridParentData_crossAxisCellCount_set$(
  m.Scope scope$,
  StaggeredGridParentData target$,
) =>
    (dynamic other$) {
      target$.crossAxisCellCount = other$;
    };
Function _StaggeredGridParentData_mainAxisCellCount$(
  m.Scope scope$,
  StaggeredGridParentData target$,
) =>
    () {
      return target$.mainAxisCellCount;
    };
void _StaggeredGridParentData_mainAxisCellCount_set$(
  m.Scope scope$,
  StaggeredGridParentData target$,
) =>
    (dynamic other$) {
      target$.mainAxisCellCount = other$;
    };
Function _StaggeredGridParentData_mainAxisExtent$(
  m.Scope scope$,
  StaggeredGridParentData target$,
) =>
    () {
      return target$.mainAxisExtent;
    };
void _StaggeredGridParentData_mainAxisExtent_set$(
  m.Scope scope$,
  StaggeredGridParentData target$,
) =>
    (dynamic other$) {
      target$.mainAxisExtent = other$;
    };
Function _StaggeredGridParentData__$(m.Scope scope$) => () {
      return StaggeredGridParentData();
    };
Function _StaggeredGridParentData_toString$(
  m.Scope scope$,
  StaggeredGridParentData target$,
) =>
    target$.toString;
Function StaggeredGridDelegate_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as StaggeredGridDelegate;
Function StaggeredGridDelegate_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is StaggeredGridDelegate;
Function _StaggeredGridDelegate_getCrossAxisCount$(
  m.Scope scope$,
  StaggeredGridDelegate target$,
) =>
    target$.getCrossAxisCount;
Function _StaggeredGridDelegate_shouldRelayout$(
  m.Scope scope$,
  StaggeredGridDelegate target$,
) =>
    target$.shouldRelayout;
Function StaggeredGridDelegateWithFixedCrossAxisCount_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as StaggeredGridDelegateWithFixedCrossAxisCount;
Function StaggeredGridDelegateWithFixedCrossAxisCount_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is StaggeredGridDelegateWithFixedCrossAxisCount;
Function _StaggeredGridDelegateWithFixedCrossAxisCount_crossAxisCount$(
  m.Scope scope$,
  StaggeredGridDelegateWithFixedCrossAxisCount target$,
) =>
    () {
      return target$.crossAxisCount;
    };
Function _StaggeredGridDelegateWithFixedCrossAxisCount__$(m.Scope scope$) =>
    ({required int crossAxisCount}) {
      return StaggeredGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: crossAxisCount);
    };
Function _StaggeredGridDelegateWithFixedCrossAxisCount_getCrossAxisCount$(
  m.Scope scope$,
  StaggeredGridDelegateWithFixedCrossAxisCount target$,
) =>
    target$.getCrossAxisCount;
Function _StaggeredGridDelegateWithFixedCrossAxisCount_shouldRelayout$(
  m.Scope scope$,
  StaggeredGridDelegateWithFixedCrossAxisCount target$,
) =>
    target$.shouldRelayout;
Function StaggeredGridDelegateWithMaxCrossAxisExtent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as StaggeredGridDelegateWithMaxCrossAxisExtent;
Function StaggeredGridDelegateWithMaxCrossAxisExtent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is StaggeredGridDelegateWithMaxCrossAxisExtent;
Function _StaggeredGridDelegateWithMaxCrossAxisExtent_maxCrossAxisExtent$(
  m.Scope scope$,
  StaggeredGridDelegateWithMaxCrossAxisExtent target$,
) =>
    () {
      return target$.maxCrossAxisExtent;
    };
Function _StaggeredGridDelegateWithMaxCrossAxisExtent__$(m.Scope scope$) =>
    ({required double maxCrossAxisExtent}) {
      return StaggeredGridDelegateWithMaxCrossAxisExtent(
          maxCrossAxisExtent: maxCrossAxisExtent);
    };
Function _StaggeredGridDelegateWithMaxCrossAxisExtent_getCrossAxisCount$(
  m.Scope scope$,
  StaggeredGridDelegateWithMaxCrossAxisExtent target$,
) =>
    target$.getCrossAxisCount;
Function _StaggeredGridDelegateWithMaxCrossAxisExtent_shouldRelayout$(
  m.Scope scope$,
  StaggeredGridDelegateWithMaxCrossAxisExtent target$,
) =>
    target$.shouldRelayout;
Function RenderStaggeredGrid_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RenderStaggeredGrid;
Function RenderStaggeredGrid_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RenderStaggeredGrid;
Function _RenderStaggeredGrid_delegate$(
  m.Scope scope$,
  RenderStaggeredGrid target$,
) =>
    () {
      return target$.delegate;
    };
void _RenderStaggeredGrid_delegate_set$(
  m.Scope scope$,
  RenderStaggeredGrid target$,
) =>
    (dynamic other$) {
      target$.delegate = other$;
    };
Function _RenderStaggeredGrid_mainAxisSpacing$(
  m.Scope scope$,
  RenderStaggeredGrid target$,
) =>
    () {
      return target$.mainAxisSpacing;
    };
void _RenderStaggeredGrid_mainAxisSpacing_set$(
  m.Scope scope$,
  RenderStaggeredGrid target$,
) =>
    (dynamic other$) {
      target$.mainAxisSpacing = other$;
    };
Function _RenderStaggeredGrid_crossAxisSpacing$(
  m.Scope scope$,
  RenderStaggeredGrid target$,
) =>
    () {
      return target$.crossAxisSpacing;
    };
void _RenderStaggeredGrid_crossAxisSpacing_set$(
  m.Scope scope$,
  RenderStaggeredGrid target$,
) =>
    (dynamic other$) {
      target$.crossAxisSpacing = other$;
    };
Function _RenderStaggeredGrid_axisDirection$(
  m.Scope scope$,
  RenderStaggeredGrid target$,
) =>
    () {
      return target$.axisDirection;
    };
void _RenderStaggeredGrid_axisDirection_set$(
  m.Scope scope$,
  RenderStaggeredGrid target$,
) =>
    (dynamic other$) {
      target$.axisDirection = other$;
    };
Function _RenderStaggeredGrid_mainAxis$(
  m.Scope scope$,
  RenderStaggeredGrid target$,
) =>
    () {
      return target$.mainAxis;
    };
Function _RenderStaggeredGrid_textDirection$(
  m.Scope scope$,
  RenderStaggeredGrid target$,
) =>
    () {
      return target$.textDirection;
    };
void _RenderStaggeredGrid_textDirection_set$(
  m.Scope scope$,
  RenderStaggeredGrid target$,
) =>
    (dynamic other$) {
      target$.textDirection = other$;
    };
Function _RenderStaggeredGrid__$(m.Scope scope$) => ({
      List? children,
      required StaggeredGridDelegate delegate,
      required double mainAxisSpacing,
      required double crossAxisSpacing,
      required AxisDirection axisDirection,
      required TextDirection textDirection,
    }) {
      return RenderStaggeredGrid(
        axisDirection: axisDirection,
        children: children == null ? null : List.from(children),
        crossAxisSpacing: crossAxisSpacing,
        delegate: delegate,
        mainAxisSpacing: mainAxisSpacing,
        textDirection: textDirection,
      );
    };
Function _RenderStaggeredGrid_setupParentData$(
  m.Scope scope$,
  RenderStaggeredGrid target$,
) =>
    target$.setupParentData;
Function _RenderStaggeredGrid_computeMinIntrinsicWidth$(
  m.Scope scope$,
  RenderStaggeredGrid target$,
) =>
    target$.computeMinIntrinsicWidth;
Function _RenderStaggeredGrid_computeMaxIntrinsicWidth$(
  m.Scope scope$,
  RenderStaggeredGrid target$,
) =>
    target$.computeMaxIntrinsicWidth;
Function _RenderStaggeredGrid_computeMinIntrinsicHeight$(
  m.Scope scope$,
  RenderStaggeredGrid target$,
) =>
    target$.computeMinIntrinsicHeight;
Function _RenderStaggeredGrid_computeMaxIntrinsicHeight$(
  m.Scope scope$,
  RenderStaggeredGrid target$,
) =>
    target$.computeMaxIntrinsicHeight;
Function _RenderStaggeredGrid_computeDistanceToActualBaseline$(
  m.Scope scope$,
  RenderStaggeredGrid target$,
) =>
    target$.computeDistanceToActualBaseline;
Function _RenderStaggeredGrid_computeDryLayout$(
  m.Scope scope$,
  RenderStaggeredGrid target$,
) =>
    target$.computeDryLayout;
Function _RenderStaggeredGrid_performLayout$(
  m.Scope scope$,
  RenderStaggeredGrid target$,
) =>
    target$.performLayout;
Function _RenderStaggeredGrid_hitTestChildren$(
  m.Scope scope$,
  RenderStaggeredGrid target$,
) =>
    target$.hitTestChildren;
Function _RenderStaggeredGrid_paint$(
  m.Scope scope$,
  RenderStaggeredGrid target$,
) =>
    target$.paint;
