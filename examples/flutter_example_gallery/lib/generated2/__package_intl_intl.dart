// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:intl/intl.dart';
import 'dart:async';
import 'package:intl/src/global_state.dart';
import 'package:intl/src/intl/date_format.dart' show DateFormat;
import 'package:intl/src/intl_helpers.dart';
import 'package:intl/src/plural_rules.dart';

const libraryMirror = m.LibraryMirror(
  'package:intl/intl.dart',
  {
    'Intl.defaultLocale': _Intl_defaultLocale$,
    'Intl.systemLocale': _Intl_systemLocale$,
    'Intl.': _Intl__$,
    'Intl.message': _Intl_message$,
    'Intl.shortLocale': _Intl_shortLocale$,
    'Intl.canonicalizedLocale': _Intl_canonicalizedLocale$,
    'Intl.plural': _Intl_plural$,
    'Intl.pluralLogic': _Intl_pluralLogic$,
    'Intl.gender': _Intl_gender$,
    'Intl.genderLogic': _Intl_genderLogic$,
    'Intl.select': _Intl_select$,
    'Intl.selectLogic': _Intl_selectLogic$,
    'Intl.getCurrentLocale': _Intl_getCurrentLocale$,
    'toBeginningOfSentenceCase': _toBeginningOfSentenceCase$,
  },
  {
    'Intl.defaultLocale': _Intl_defaultLocale_set$,
    'Intl.systemLocale': _Intl_systemLocale_set$,
  },
  {
    'Intl': m.ClassMirror(
      'Intl',
      {
        '#as': Intl_as$,
        '#is': Intl_is$,
        'locale': _Intl_locale$,
        'date': _Intl_date$,
        'verifiedLocale': _Intl_verifiedLocale$,
        'withLocale': _Intl_withLocale$,
        'toString': _Intl_toString$,
      },
      {},
    )
  },
);
Function Intl_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Intl;
Function Intl_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Intl;
Function _Intl_defaultLocale$(m.Scope scope$) => () => Intl.defaultLocale;
void _Intl_defaultLocale_set$(String? other$) {
  Intl.defaultLocale = other$;
}

Function _Intl_systemLocale$(m.Scope scope$) => () => Intl.systemLocale;
void _Intl_systemLocale_set$(String other$) {
  Intl.systemLocale = other$;
}

Function _Intl_locale$(
  m.Scope scope$,
  Intl target$,
) =>
    () {
      return target$.locale;
    };
Function _Intl__$(m.Scope scope$) => ([String? aLocale]) {
      if (aLocale == null) {
        return Intl();
      }
      return Intl(aLocale!);
    };
Function _Intl_date$(
  m.Scope scope$,
  Intl target$,
) =>
    target$.date;
Function _Intl_message$(m.Scope scope$) => Intl.message;
Function _Intl_verifiedLocale$(m.Scope scope$) => (
      String? newLocale,
      m.FunctionPointer localeExists, {
      m.FunctionPointer? onFailure,
    }) {
      bool localeExistsProxy(String localeExists_$p0$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            localeExists,
            [localeExists_$p0$],
            {},
          );
      String? onFailureProxy(String onFailure_$p0$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onFailure!,
            [onFailure_$p0$],
            {},
          );
      return Intl.verifiedLocale(
        newLocale,
        localeExistsProxy,
        onFailure: onFailure == null ? null : onFailureProxy,
      );
    };
Function _Intl_shortLocale$(m.Scope scope$) => Intl.shortLocale;
Function _Intl_canonicalizedLocale$(m.Scope scope$) => Intl.canonicalizedLocale;
Function _Intl_plural$(m.Scope scope$) => Intl.plural;
Function _Intl_pluralLogic$<T>(m.Scope scope$) => Intl.pluralLogic<T>;
Function _Intl_gender$(m.Scope scope$) => Intl.gender;
Function _Intl_genderLogic$<T>(m.Scope scope$) => Intl.genderLogic<T>;
Function _Intl_select$(m.Scope scope$) => Intl.select;
Function _Intl_selectLogic$<T>(m.Scope scope$) => Intl.selectLogic<T>;
Function _Intl_withLocale$(m.Scope scope$) => (
      String? locale,
      m.FunctionPointer function,
    ) {
      dynamic functionProxy() => scope$.engine.callFunctionPointer(
            scope$,
            function,
            [],
            {},
          );
      return Intl.withLocale(
        locale,
        functionProxy,
      );
    };
Function _Intl_getCurrentLocale$(m.Scope scope$) => Intl.getCurrentLocale;
Function _Intl_toString$(
  m.Scope scope$,
  Intl target$,
) =>
    target$.toString;
Function _toBeginningOfSentenceCase$(m.Scope scope$) =>
    toBeginningOfSentenceCase;
