// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:intl/src/intl/date_builder.dart';
import 'package:clock/clock.dart';
import 'package:intl/src/intl/date_computation.dart';

const libraryMirror = m.LibraryMirror(
  'package:intl/src/intl/date_builder.dart',
  {'DateBuilder.': _DateBuilder__$},
  {},
  {
    'DateBuilder': m.ClassMirror(
      'DateBuilder',
      {
        '#as': DateBuilder_as$,
        '#is': DateBuilder_is$,
        'year': _DateBuilder_year$,
        'month': _DateBuilder_month$,
        'day': _DateBuilder_day$,
        'dayOfYear': _DateBuilder_dayOfYear$,
        'hour': _DateBuilder_hour$,
        'minute': _DateBuilder_minute$,
        'second': _DateBuilder_second$,
        'fractionalSecond': _DateBuilder_fractionalSecond$,
        'pm': _DateBuilder_pm$,
        'utc': _DateBuilder_utc$,
        'dateOnly': _DateBuilder_dateOnly$,
        'dayOrDayOfYear': _DateBuilder_dayOrDayOfYear$,
        'hour24': _DateBuilder_hour24$,
        'setYear': _DateBuilder_setYear$,
        'setHasAmbiguousCentury': _DateBuilder_setHasAmbiguousCentury$,
        'setMonth': _DateBuilder_setMonth$,
        'setDay': _DateBuilder_setDay$,
        'setDayOfYear': _DateBuilder_setDayOfYear$,
        'setHour': _DateBuilder_setHour$,
        'setMinute': _DateBuilder_setMinute$,
        'setSecond': _DateBuilder_setSecond$,
        'setFractionalSecond': _DateBuilder_setFractionalSecond$,
        'verify': _DateBuilder_verify$,
        'asDate': _DateBuilder_asDate$,
      },
      {
        'year': _DateBuilder_year_set$,
        'month': _DateBuilder_month_set$,
        'day': _DateBuilder_day_set$,
        'dayOfYear': _DateBuilder_dayOfYear_set$,
        'hour': _DateBuilder_hour_set$,
        'minute': _DateBuilder_minute_set$,
        'second': _DateBuilder_second_set$,
        'fractionalSecond': _DateBuilder_fractionalSecond_set$,
        'pm': _DateBuilder_pm_set$,
        'utc': _DateBuilder_utc_set$,
        'dateOnly': _DateBuilder_dateOnly_set$,
      },
    )
  },
);
Function DateBuilder_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DateBuilder;
Function DateBuilder_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DateBuilder;
Function _DateBuilder_year$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    () {
      return target$.year;
    };
void _DateBuilder_year_set$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    (dynamic other$) {
      target$.year = other$;
    };
Function _DateBuilder_month$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    () {
      return target$.month;
    };
void _DateBuilder_month_set$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    (dynamic other$) {
      target$.month = other$;
    };
Function _DateBuilder_day$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    () {
      return target$.day;
    };
void _DateBuilder_day_set$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    (dynamic other$) {
      target$.day = other$;
    };
Function _DateBuilder_dayOfYear$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    () {
      return target$.dayOfYear;
    };
void _DateBuilder_dayOfYear_set$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    (dynamic other$) {
      target$.dayOfYear = other$;
    };
Function _DateBuilder_hour$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    () {
      return target$.hour;
    };
void _DateBuilder_hour_set$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    (dynamic other$) {
      target$.hour = other$;
    };
Function _DateBuilder_minute$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    () {
      return target$.minute;
    };
void _DateBuilder_minute_set$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    (dynamic other$) {
      target$.minute = other$;
    };
Function _DateBuilder_second$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    () {
      return target$.second;
    };
void _DateBuilder_second_set$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    (dynamic other$) {
      target$.second = other$;
    };
Function _DateBuilder_fractionalSecond$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    () {
      return target$.fractionalSecond;
    };
void _DateBuilder_fractionalSecond_set$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    (dynamic other$) {
      target$.fractionalSecond = other$;
    };
Function _DateBuilder_pm$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    () {
      return target$.pm;
    };
void _DateBuilder_pm_set$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    (dynamic other$) {
      target$.pm = other$;
    };
Function _DateBuilder_utc$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    () {
      return target$.utc;
    };
void _DateBuilder_utc_set$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    (dynamic other$) {
      target$.utc = other$;
    };
Function _DateBuilder_dateOnly$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    () {
      return target$.dateOnly;
    };
void _DateBuilder_dateOnly_set$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    (dynamic other$) {
      target$.dateOnly = other$;
    };
Function _DateBuilder_dayOrDayOfYear$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    () {
      return target$.dayOrDayOfYear;
    };
Function _DateBuilder_hour24$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    () {
      return target$.hour24;
    };
Function _DateBuilder__$(m.Scope scope$) => (
      String _locale,
      m.FunctionPointer _dateTimeConstructor,
    ) {
      DateTime _dateTimeConstructorProxy(
        int _dateTimeConstructor_year$,
        int _dateTimeConstructor_month$,
        int _dateTimeConstructor_day$,
        int _dateTimeConstructor_hour24$,
        int _dateTimeConstructor_minute$,
        int _dateTimeConstructor_second$,
        int _dateTimeConstructor_fractionalSecond$,
        bool _dateTimeConstructor_utc$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            _dateTimeConstructor,
            [
              _dateTimeConstructor_year$,
              _dateTimeConstructor_month$,
              _dateTimeConstructor_day$,
              _dateTimeConstructor_hour24$,
              _dateTimeConstructor_minute$,
              _dateTimeConstructor_second$,
              _dateTimeConstructor_fractionalSecond$,
              _dateTimeConstructor_utc$,
            ],
            {},
          );
      return DateBuilder(
        _locale,
        _dateTimeConstructorProxy,
      );
    };
Function _DateBuilder_setYear$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    target$.setYear;
Function _DateBuilder_setHasAmbiguousCentury$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    target$.setHasAmbiguousCentury;
Function _DateBuilder_setMonth$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    target$.setMonth;
Function _DateBuilder_setDay$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    target$.setDay;
Function _DateBuilder_setDayOfYear$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    target$.setDayOfYear;
Function _DateBuilder_setHour$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    target$.setHour;
Function _DateBuilder_setMinute$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    target$.setMinute;
Function _DateBuilder_setSecond$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    target$.setSecond;
Function _DateBuilder_setFractionalSecond$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    target$.setFractionalSecond;
Function _DateBuilder_verify$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    target$.verify;
Function _DateBuilder_asDate$(
  m.Scope scope$,
  DateBuilder target$,
) =>
    target$.asDate;
