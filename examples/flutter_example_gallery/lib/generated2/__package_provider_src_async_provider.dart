// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:provider/src/async_provider.dart';
import 'dart:async';
import 'package:flutter/widgets.dart';
import 'package:provider/src/provider.dart';

const libraryMirror = m.LibraryMirror(
  'package:provider/src/async_provider.dart',
  {
    'StreamProvider.': _StreamProvider__$,
    'StreamProvider.value': _StreamProvider_value_$,
    'FutureProvider.': _FutureProvider__$,
    'FutureProvider.value': _FutureProvider_value_$,
  },
  {},
  {
    'StreamProvider': m.ClassMirror(
      'StreamProvider',
      {
        '#as': StreamProvider_as$,
        '#is': StreamProvider_is$,
      },
      {},
    ),
    'FutureProvider': m.ClassMirror(
      'FutureProvider',
      {
        '#as': FutureProvider_as$,
        '#is': FutureProvider_is$,
      },
      {},
    ),
  },
);
Function StreamProvider_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as StreamProvider<T>;
Function StreamProvider_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is StreamProvider<T>;
Function _StreamProvider__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer create,
      required dynamic initialData,
      m.FunctionPointer? catchError,
      m.FunctionPointer? updateShouldNotify,
      bool? lazy,
      m.FunctionPointer? builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      dynamic catchErrorProxy(
        BuildContext catchError_context$,
        Object? catchError_error$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            catchError!,
            [
              catchError_context$,
              catchError_error$,
            ],
            {},
          );
      Stream? createProxy(BuildContext create_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            create,
            [create_context$],
            {},
          );
      bool updateShouldNotifyProxy(
        dynamic updateShouldNotify_previous$,
        dynamic updateShouldNotify_current$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            updateShouldNotify!,
            [
              updateShouldNotify_previous$,
              updateShouldNotify_current$,
            ],
            {},
          );
      return StreamProvider(
        builder: builder == null ? null : builderProxy,
        catchError: catchError == null ? null : catchErrorProxy,
        child: child,
        create: createProxy,
        initialData: initialData,
        key: key,
        lazy: lazy,
        updateShouldNotify:
            updateShouldNotify == null ? null : updateShouldNotifyProxy,
      );
    };
Function _StreamProvider_value_$(m.Scope scope$) => ({
      Key? key,
      required Stream? value,
      required dynamic initialData,
      m.FunctionPointer? catchError,
      m.FunctionPointer? updateShouldNotify,
      bool? lazy,
      m.FunctionPointer? builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      dynamic catchErrorProxy(
        BuildContext catchError_context$,
        Object? catchError_error$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            catchError!,
            [
              catchError_context$,
              catchError_error$,
            ],
            {},
          );
      bool updateShouldNotifyProxy(
        dynamic updateShouldNotify_previous$,
        dynamic updateShouldNotify_current$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            updateShouldNotify!,
            [
              updateShouldNotify_previous$,
              updateShouldNotify_current$,
            ],
            {},
          );
      return StreamProvider.value(
        builder: builder == null ? null : builderProxy,
        catchError: catchError == null ? null : catchErrorProxy,
        child: child,
        initialData: initialData,
        key: key,
        lazy: lazy,
        updateShouldNotify:
            updateShouldNotify == null ? null : updateShouldNotifyProxy,
        value: value,
      );
    };
Function FutureProvider_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FutureProvider<T>;
Function FutureProvider_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FutureProvider<T>;
Function _FutureProvider__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer create,
      required dynamic initialData,
      m.FunctionPointer? catchError,
      m.FunctionPointer? updateShouldNotify,
      bool? lazy,
      m.FunctionPointer? builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      dynamic catchErrorProxy(
        BuildContext catchError_context$,
        Object? catchError_error$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            catchError!,
            [
              catchError_context$,
              catchError_error$,
            ],
            {},
          );
      Future? createProxy(BuildContext create_context$) async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            create,
            [create_context$],
            {},
          );
      bool updateShouldNotifyProxy(
        dynamic updateShouldNotify_previous$,
        dynamic updateShouldNotify_current$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            updateShouldNotify!,
            [
              updateShouldNotify_previous$,
              updateShouldNotify_current$,
            ],
            {},
          );
      return FutureProvider(
        builder: builder == null ? null : builderProxy,
        catchError: catchError == null ? null : catchErrorProxy,
        child: child,
        create: createProxy,
        initialData: initialData,
        key: key,
        lazy: lazy,
        updateShouldNotify:
            updateShouldNotify == null ? null : updateShouldNotifyProxy,
      );
    };
Function _FutureProvider_value_$(m.Scope scope$) => ({
      Key? key,
      required Future? value,
      required dynamic initialData,
      m.FunctionPointer? catchError,
      m.FunctionPointer? updateShouldNotify,
      m.FunctionPointer? builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      dynamic catchErrorProxy(
        BuildContext catchError_context$,
        Object? catchError_error$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            catchError!,
            [
              catchError_context$,
              catchError_error$,
            ],
            {},
          );
      bool updateShouldNotifyProxy(
        dynamic updateShouldNotify_previous$,
        dynamic updateShouldNotify_current$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            updateShouldNotify!,
            [
              updateShouldNotify_previous$,
              updateShouldNotify_current$,
            ],
            {},
          );
      return FutureProvider.value(
        builder: builder == null ? null : builderProxy,
        catchError: catchError == null ? null : catchErrorProxy,
        child: child,
        initialData: initialData,
        key: key,
        updateShouldNotify:
            updateShouldNotify == null ? null : updateShouldNotifyProxy,
        value: value,
      );
    };
