// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:provider/src/provider.dart';
import 'dart:developer';
import 'package:collection/collection.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:nested/nested.dart';
import 'package:provider/src/reassemble_handler.dart';

const libraryMirror = m.LibraryMirror(
  'package:provider/src/provider.dart',
  {
    'MultiProvider.': _MultiProvider__$,
    'Provider.debugCheckInvalidValueType':
        _Provider_debugCheckInvalidValueType$,
    'Provider.': _Provider__$,
    'Provider.value': _Provider_value_$,
    'Provider.of': _Provider_of$,
    'ProviderNullException.': _ProviderNullException__$,
    'ProviderNotFoundException.': _ProviderNotFoundException__$,
    'DeferredInheritedProvider.': _DeferredInheritedProvider__$,
    'DeferredInheritedProvider.value': _DeferredInheritedProvider_value_$,
    'ProviderNode.': _ProviderNode__$,
    'ProviderBinding.debugInstance': _ProviderBinding_debugInstance$,
    'debugPostEvent': _debugPostEvent$,
    'spyPostEvent': _spyPostEvent$,
    'debugIsInInheritedProviderUpdate': _debugIsInInheritedProviderUpdate$,
    'debugIsInInheritedProviderCreate': _debugIsInInheritedProviderCreate$,
    'InheritedProvider.': _InheritedProvider__$,
    'InheritedProvider.value': _InheritedProvider_value_$,
  },
  {
    'Provider.debugCheckInvalidValueType':
        _Provider_debugCheckInvalidValueType_set$,
    'debugIsInInheritedProviderUpdate': _debugIsInInheritedProviderUpdate_set$,
    'debugIsInInheritedProviderCreate': _debugIsInInheritedProviderCreate_set$,
  },
  {
    'MultiProvider': m.ClassMirror(
      'MultiProvider',
      {
        '#as': MultiProvider_as$,
        '#is': MultiProvider_is$,
      },
      {},
    ),
    'Provider': m.ClassMirror(
      'Provider',
      {
        '#as': Provider_as$,
        '#is': Provider_is$,
      },
      {},
    ),
    'ProviderNullException': m.ClassMirror(
      'ProviderNullException',
      {
        '#as': ProviderNullException_as$,
        '#is': ProviderNullException_is$,
        'valueType': _ProviderNullException_valueType$,
        'widgetType': _ProviderNullException_widgetType$,
        'toString': _ProviderNullException_toString$,
      },
      {},
    ),
    'ProviderNotFoundException': m.ClassMirror(
      'ProviderNotFoundException',
      {
        '#as': ProviderNotFoundException_as$,
        '#is': ProviderNotFoundException_is$,
        'valueType': _ProviderNotFoundException_valueType$,
        'widgetType': _ProviderNotFoundException_widgetType$,
        'toString': _ProviderNotFoundException_toString$,
      },
      {},
    ),
    'DeferredInheritedProvider': m.ClassMirror(
      'DeferredInheritedProvider',
      {
        '#as': DeferredInheritedProvider_as$,
        '#is': DeferredInheritedProvider_is$,
      },
      {},
    ),
    'PostEventCall': m.ClassMirror(
      'PostEventCall',
      {
        '#as': PostEventCall_as$,
        '#is': PostEventCall_is$,
        'eventKind': _PostEventCall_eventKind$,
        'event': _PostEventCall_event$,
      },
      {},
    ),
    'PostEventSpy': m.ClassMirror(
      'PostEventSpy',
      {
        '#as': PostEventSpy_as$,
        '#is': PostEventSpy_is$,
        'logs': _PostEventSpy_logs$,
        'dispose': _PostEventSpy_dispose$,
      },
      {},
    ),
    'ProviderNode': m.ClassMirror(
      'ProviderNode',
      {
        '#as': ProviderNode_as$,
        '#is': ProviderNode_is$,
        'id': _ProviderNode_id$,
        'type': _ProviderNode_type$,
        'childrenNodeIds': _ProviderNode_childrenNodeIds$,
        'value': _ProviderNode_value$,
      },
      {},
    ),
    'ProviderBinding': m.ClassMirror(
      'ProviderBinding',
      {
        '#as': ProviderBinding_as$,
        '#is': ProviderBinding_is$,
        'providerDetails': _ProviderBinding_providerDetails$,
        'providerDidChange': _ProviderBinding_providerDidChange$,
      },
      {'providerDetails': _ProviderBinding_providerDetails_set$},
    ),
    'InheritedProvider': m.ClassMirror(
      'InheritedProvider',
      {
        '#as': InheritedProvider_as$,
        '#is': InheritedProvider_is$,
        'builder': _InheritedProvider_builder$,
        'debugFillProperties': _InheritedProvider_debugFillProperties$,
        'createElement': _InheritedProvider_createElement$,
        'buildWithChild': _InheritedProvider_buildWithChild$,
      },
      {},
    ),
    'InheritedContext': m.ClassMirror(
      'InheritedContext',
      {
        '#as': InheritedContext_as$,
        '#is': InheritedContext_is$,
        'value': _InheritedContext_value$,
        'hasValue': _InheritedContext_hasValue$,
        'markNeedsNotifyDependents':
            _InheritedContext_markNeedsNotifyDependents$,
      },
      {},
    ),
  },
);
Function MultiProvider_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MultiProvider;
Function MultiProvider_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MultiProvider;
Function _MultiProvider__$(m.Scope scope$) => ({
      Key? key,
      required List providers,
      Widget? child,
      m.FunctionPointer? builder,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      return MultiProvider(
        builder: builder == null ? null : builderProxy,
        child: child,
        key: key,
        providers: List.from(providers),
      );
    };
Function Provider_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Provider<T>;
Function Provider_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Provider<T>;
Function _Provider_debugCheckInvalidValueType$(m.Scope scope$) =>
    () => Provider.debugCheckInvalidValueType;
Function _Provider_debugCheckInvalidValueType_set$(m.Scope scope$) =>
    (m.FunctionPointer? _debugCheckInvalidValueType) {
      void _debugCheckInvalidValueTypeProxy<T>(
              dynamic _debugCheckInvalidValueType_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            _debugCheckInvalidValueType!,
            [_debugCheckInvalidValueType_value$],
            {},
          );
      Provider.debugCheckInvalidValueType = (_debugCheckInvalidValueType == null
          ? null
          : _debugCheckInvalidValueTypeProxy);
    };
Function _Provider__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer create,
      m.FunctionPointer? dispose,
      bool? lazy,
      m.FunctionPointer? builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      dynamic createProxy(BuildContext create_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            create,
            [create_context$],
            {},
          );
      void disposeProxy(
        BuildContext dispose_context$,
        dynamic dispose_value$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            dispose!,
            [
              dispose_context$,
              dispose_value$,
            ],
            {},
          );
      return Provider(
        builder: builder == null ? null : builderProxy,
        child: child,
        create: createProxy,
        dispose: dispose == null ? null : disposeProxy,
        key: key,
        lazy: lazy,
      );
    };
Function _Provider_value_$(m.Scope scope$) => ({
      Key? key,
      required dynamic value,
      m.FunctionPointer? updateShouldNotify,
      m.FunctionPointer? builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      bool updateShouldNotifyProxy(
        dynamic updateShouldNotify_previous$,
        dynamic updateShouldNotify_current$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            updateShouldNotify!,
            [
              updateShouldNotify_previous$,
              updateShouldNotify_current$,
            ],
            {},
          );
      return Provider.value(
        builder: builder == null ? null : builderProxy,
        child: child,
        key: key,
        updateShouldNotify:
            updateShouldNotify == null ? null : updateShouldNotifyProxy,
        value: value,
      );
    };
Function _Provider_of$<T>(m.Scope scope$) => Provider.of<T>;
Function ProviderNullException_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ProviderNullException;
Function ProviderNullException_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ProviderNullException;
Function _ProviderNullException_valueType$(
  m.Scope scope$,
  ProviderNullException target$,
) =>
    () {
      return target$.valueType;
    };
Function _ProviderNullException_widgetType$(
  m.Scope scope$,
  ProviderNullException target$,
) =>
    () {
      return target$.widgetType;
    };
Function _ProviderNullException__$(m.Scope scope$) => (
      Type valueType,
      Type widgetType,
    ) {
      return ProviderNullException(
        valueType,
        widgetType,
      );
    };
Function _ProviderNullException_toString$(
  m.Scope scope$,
  ProviderNullException target$,
) =>
    target$.toString;
Function ProviderNotFoundException_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ProviderNotFoundException;
Function ProviderNotFoundException_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ProviderNotFoundException;
Function _ProviderNotFoundException_valueType$(
  m.Scope scope$,
  ProviderNotFoundException target$,
) =>
    () {
      return target$.valueType;
    };
Function _ProviderNotFoundException_widgetType$(
  m.Scope scope$,
  ProviderNotFoundException target$,
) =>
    () {
      return target$.widgetType;
    };
Function _ProviderNotFoundException__$(m.Scope scope$) => (
      Type valueType,
      Type widgetType,
    ) {
      return ProviderNotFoundException(
        valueType,
        widgetType,
      );
    };
Function _ProviderNotFoundException_toString$(
  m.Scope scope$,
  ProviderNotFoundException target$,
) =>
    target$.toString;
Function DeferredInheritedProvider_as$<T, R>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DeferredInheritedProvider<T, R>;
Function DeferredInheritedProvider_is$<T, R>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DeferredInheritedProvider<T, R>;
Function _DeferredInheritedProvider__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer create,
      m.FunctionPointer? dispose,
      required m.FunctionPointer startListening,
      m.FunctionPointer? updateShouldNotify,
      bool? lazy,
      m.FunctionPointer? builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      dynamic createProxy(BuildContext create_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            create,
            [create_context$],
            {},
          );
      void disposeProxy(
        BuildContext dispose_context$,
        dynamic dispose_value$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            dispose!,
            [
              dispose_context$,
              dispose_value$,
            ],
            {},
          );
      void Function() startListeningProxy(
        InheritedContext startListening_context$,
        void Function(dynamic) startListening_setState$,
        dynamic startListening_controller$,
        dynamic startListening_value$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            startListening,
            [
              startListening_context$,
              startListening_setState$,
              startListening_controller$,
              startListening_value$,
            ],
            {},
          );
      bool updateShouldNotifyProxy(
        dynamic updateShouldNotify_previous$,
        dynamic updateShouldNotify_current$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            updateShouldNotify!,
            [
              updateShouldNotify_previous$,
              updateShouldNotify_current$,
            ],
            {},
          );
      return DeferredInheritedProvider(
        builder: builder == null ? null : builderProxy,
        child: child,
        create: createProxy,
        dispose: dispose == null ? null : disposeProxy,
        key: key,
        lazy: lazy,
        startListening: startListeningProxy,
        updateShouldNotify:
            updateShouldNotify == null ? null : updateShouldNotifyProxy,
      );
    };
Function _DeferredInheritedProvider_value_$(m.Scope scope$) => ({
      Key? key,
      required dynamic value,
      required m.FunctionPointer startListening,
      m.FunctionPointer? updateShouldNotify,
      bool? lazy,
      m.FunctionPointer? builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      void Function() startListeningProxy(
        InheritedContext startListening_context$,
        void Function(dynamic) startListening_setState$,
        dynamic startListening_controller$,
        dynamic startListening_value$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            startListening,
            [
              startListening_context$,
              startListening_setState$,
              startListening_controller$,
              startListening_value$,
            ],
            {},
          );
      bool updateShouldNotifyProxy(
        dynamic updateShouldNotify_previous$,
        dynamic updateShouldNotify_current$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            updateShouldNotify!,
            [
              updateShouldNotify_previous$,
              updateShouldNotify_current$,
            ],
            {},
          );
      return DeferredInheritedProvider.value(
        builder: builder == null ? null : builderProxy,
        child: child,
        key: key,
        lazy: lazy,
        startListening: startListeningProxy,
        updateShouldNotify:
            updateShouldNotify == null ? null : updateShouldNotifyProxy,
        value: value,
      );
    };
Function PostEventCall_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PostEventCall;
Function PostEventCall_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PostEventCall;
Function _PostEventCall_eventKind$(
  m.Scope scope$,
  PostEventCall target$,
) =>
    () {
      return target$.eventKind;
    };
Function _PostEventCall_event$(
  m.Scope scope$,
  PostEventCall target$,
) =>
    () {
      return target$.event;
    };
Function PostEventSpy_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PostEventSpy;
Function PostEventSpy_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PostEventSpy;
Function _PostEventSpy_logs$(
  m.Scope scope$,
  PostEventSpy target$,
) =>
    () {
      return target$.logs;
    };
Function _PostEventSpy_dispose$(
  m.Scope scope$,
  PostEventSpy target$,
) =>
    target$.dispose;
Function ProviderNode_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ProviderNode;
Function ProviderNode_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ProviderNode;
Function _ProviderNode_id$(
  m.Scope scope$,
  ProviderNode target$,
) =>
    () {
      return target$.id;
    };
Function _ProviderNode_type$(
  m.Scope scope$,
  ProviderNode target$,
) =>
    () {
      return target$.type;
    };
Function _ProviderNode_childrenNodeIds$(
  m.Scope scope$,
  ProviderNode target$,
) =>
    () {
      return target$.childrenNodeIds;
    };
Function _ProviderNode_value$(
  m.Scope scope$,
  ProviderNode target$,
) =>
    () {
      return target$.value;
    };
Function _ProviderNode__$(m.Scope scope$) => ({
      required String id,
      required List childrenNodeIds,
      required String type,
      required element,
    }) {
      return ProviderNode(
        childrenNodeIds: List.from(childrenNodeIds),
        element: element,
        id: id,
        type: type,
      );
    };
Function ProviderBinding_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ProviderBinding;
Function ProviderBinding_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ProviderBinding;
Function _ProviderBinding_debugInstance$(m.Scope scope$) =>
    () => ProviderBinding.debugInstance;
Function _ProviderBinding_providerDetails$(
  m.Scope scope$,
  ProviderBinding target$,
) =>
    () {
      return target$.providerDetails;
    };
void _ProviderBinding_providerDetails_set$(
  m.Scope scope$,
  ProviderBinding target$,
) =>
    (dynamic other$) {
      target$.providerDetails = other$;
    };
Function _ProviderBinding_providerDidChange$(
  m.Scope scope$,
  ProviderBinding target$,
) =>
    target$.providerDidChange;
Function _debugPostEvent$(m.Scope scope$) => debugPostEvent;
Function _spyPostEvent$(m.Scope scope$) => spyPostEvent;
Function _debugIsInInheritedProviderUpdate$(m.Scope scope$) =>
    () => debugIsInInheritedProviderUpdate;
void _debugIsInInheritedProviderUpdate_set$(bool other$) {
  debugIsInInheritedProviderUpdate = other$;
}

Function _debugIsInInheritedProviderCreate$(m.Scope scope$) =>
    () => debugIsInInheritedProviderCreate;
void _debugIsInInheritedProviderCreate_set$(bool other$) {
  debugIsInInheritedProviderCreate = other$;
}

Function InheritedProvider_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as InheritedProvider<T>;
Function InheritedProvider_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is InheritedProvider<T>;
Function _InheritedProvider_builder$<T>(
  m.Scope scope$,
  InheritedProvider<T> target$,
) =>
    () {
      return target$.builder;
    };
Function _InheritedProvider__$(m.Scope scope$) => ({
      Key? key,
      m.FunctionPointer? create,
      m.FunctionPointer? update,
      m.FunctionPointer? updateShouldNotify,
      m.FunctionPointer? debugCheckInvalidValueType,
      m.FunctionPointer? startListening,
      m.FunctionPointer? dispose,
      m.FunctionPointer? builder,
      bool? lazy,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      dynamic createProxy(BuildContext create_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            create!,
            [create_context$],
            {},
          );
      void debugCheckInvalidValueTypeProxy(
              dynamic debugCheckInvalidValueType_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            debugCheckInvalidValueType!,
            [debugCheckInvalidValueType_value$],
            {},
          );
      void disposeProxy(
        BuildContext dispose_context$,
        dynamic dispose_value$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            dispose!,
            [
              dispose_context$,
              dispose_value$,
            ],
            {},
          );
      void Function() startListeningProxy(
        InheritedContext startListening_element$,
        dynamic startListening_value$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            startListening!,
            [
              startListening_element$,
              startListening_value$,
            ],
            {},
          );
      dynamic updateProxy(
        BuildContext update_context$,
        dynamic update_value$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            update!,
            [
              update_context$,
              update_value$,
            ],
            {},
          );
      bool updateShouldNotifyProxy(
        dynamic updateShouldNotify_previous$,
        dynamic updateShouldNotify_current$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            updateShouldNotify!,
            [
              updateShouldNotify_previous$,
              updateShouldNotify_current$,
            ],
            {},
          );
      return InheritedProvider(
        builder: builder == null ? null : builderProxy,
        child: child,
        create: create == null ? null : createProxy,
        debugCheckInvalidValueType: debugCheckInvalidValueType == null
            ? null
            : debugCheckInvalidValueTypeProxy,
        dispose: dispose == null ? null : disposeProxy,
        key: key,
        lazy: lazy,
        startListening: startListening == null ? null : startListeningProxy,
        update: update == null ? null : updateProxy,
        updateShouldNotify:
            updateShouldNotify == null ? null : updateShouldNotifyProxy,
      );
    };
Function _InheritedProvider_value_$(m.Scope scope$) => ({
      Key? key,
      required dynamic value,
      m.FunctionPointer? updateShouldNotify,
      m.FunctionPointer? startListening,
      bool? lazy,
      m.FunctionPointer? builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      void Function() startListeningProxy(
        InheritedContext startListening_element$,
        dynamic startListening_value$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            startListening!,
            [
              startListening_element$,
              startListening_value$,
            ],
            {},
          );
      bool updateShouldNotifyProxy(
        dynamic updateShouldNotify_previous$,
        dynamic updateShouldNotify_current$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            updateShouldNotify!,
            [
              updateShouldNotify_previous$,
              updateShouldNotify_current$,
            ],
            {},
          );
      return InheritedProvider.value(
        builder: builder == null ? null : builderProxy,
        child: child,
        key: key,
        lazy: lazy,
        startListening: startListening == null ? null : startListeningProxy,
        updateShouldNotify:
            updateShouldNotify == null ? null : updateShouldNotifyProxy,
        value: value,
      );
    };
Function _InheritedProvider_debugFillProperties$<T>(
  m.Scope scope$,
  InheritedProvider<T> target$,
) =>
    target$.debugFillProperties;
Function _InheritedProvider_createElement$<T>(
  m.Scope scope$,
  InheritedProvider<T> target$,
) =>
    target$.createElement;
Function _InheritedProvider_buildWithChild$<T>(
  m.Scope scope$,
  InheritedProvider<T> target$,
) =>
    target$.buildWithChild;
Function InheritedContext_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as InheritedContext<T>;
Function InheritedContext_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is InheritedContext<T>;
Function _InheritedContext_value$<T>(
  m.Scope scope$,
  InheritedContext<T> target$,
) =>
    () {
      return target$.value;
    };
Function _InheritedContext_hasValue$<T>(
  m.Scope scope$,
  InheritedContext<T> target$,
) =>
    () {
      return target$.hasValue;
    };
Function _InheritedContext_markNeedsNotifyDependents$<T>(
  m.Scope scope$,
  InheritedContext<T> target$,
) =>
    target$.markNeedsNotifyDependents;
