// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:provider/src/selector.dart';
import 'package:collection/collection.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:nested/nested.dart';
import 'package:provider/src/consumer.dart';
import 'package:provider/src/provider.dart';

const libraryMirror = m.LibraryMirror(
  'package:provider/src/selector.dart',
  {
    'Selector0.': _Selector0__$,
    'Selector.': _Selector__$,
    'Selector2.': _Selector2__$,
    'Selector3.': _Selector3__$,
    'Selector4.': _Selector4__$,
    'Selector5.': _Selector5__$,
    'Selector6.': _Selector6__$,
  },
  {},
  {
    'Selector0': m.ClassMirror(
      'Selector0',
      {
        '#as': Selector0_as$,
        '#is': Selector0_is$,
        'builder': _Selector0_builder$,
        'selector': _Selector0_selector$,
        'createState': _Selector0_createState$,
      },
      {},
    ),
    'Selector': m.ClassMirror(
      'Selector',
      {
        '#as': Selector_as$,
        '#is': Selector_is$,
      },
      {},
    ),
    'Selector2': m.ClassMirror(
      'Selector2',
      {
        '#as': Selector2_as$,
        '#is': Selector2_is$,
      },
      {},
    ),
    'Selector3': m.ClassMirror(
      'Selector3',
      {
        '#as': Selector3_as$,
        '#is': Selector3_is$,
      },
      {},
    ),
    'Selector4': m.ClassMirror(
      'Selector4',
      {
        '#as': Selector4_as$,
        '#is': Selector4_is$,
      },
      {},
    ),
    'Selector5': m.ClassMirror(
      'Selector5',
      {
        '#as': Selector5_as$,
        '#is': Selector5_is$,
      },
      {},
    ),
    'Selector6': m.ClassMirror(
      'Selector6',
      {
        '#as': Selector6_as$,
        '#is': Selector6_is$,
      },
      {},
    ),
  },
);
Function Selector0_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Selector0<T>;
Function Selector0_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Selector0<T>;
Function _Selector0_builder$<T>(
  m.Scope scope$,
  Selector0<T> target$,
) =>
    () {
      return target$.builder;
    };
Function _Selector0_selector$<T>(
  m.Scope scope$,
  Selector0<T> target$,
) =>
    () {
      return target$.selector;
    };
Function _Selector0__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer builder,
      required m.FunctionPointer selector,
      m.FunctionPointer? shouldRebuild,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        dynamic builder_value$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [
              builder_context$,
              builder_value$,
              builder_child$,
            ],
            {},
          );
      dynamic selectorProxy(BuildContext selector_$p0$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            selector,
            [selector_$p0$],
            {},
          );
      bool shouldRebuildProxy(
        dynamic shouldRebuild_previous$,
        dynamic shouldRebuild_next$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            shouldRebuild!,
            [
              shouldRebuild_previous$,
              shouldRebuild_next$,
            ],
            {},
          );
      return Selector0(
        builder: builderProxy,
        child: child,
        key: key,
        selector: selectorProxy,
        shouldRebuild: shouldRebuild == null ? null : shouldRebuildProxy,
      );
    };
Function _Selector0_createState$<T>(
  m.Scope scope$,
  Selector0<T> target$,
) =>
    target$.createState;
Function Selector_as$<A, S>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Selector<A, S>;
Function Selector_is$<A, S>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Selector<A, S>;
Function _Selector__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer builder,
      required m.FunctionPointer selector,
      m.FunctionPointer? shouldRebuild,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        dynamic builder_value$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [
              builder_context$,
              builder_value$,
              builder_child$,
            ],
            {},
          );
      dynamic selectorProxy(
        BuildContext selector_$p0$,
        dynamic selector_$p1$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            selector,
            [
              selector_$p0$,
              selector_$p1$,
            ],
            {},
          );
      bool shouldRebuildProxy(
        dynamic shouldRebuild_previous$,
        dynamic shouldRebuild_next$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            shouldRebuild!,
            [
              shouldRebuild_previous$,
              shouldRebuild_next$,
            ],
            {},
          );
      return Selector(
        builder: builderProxy,
        child: child,
        key: key,
        selector: selectorProxy,
        shouldRebuild: shouldRebuild == null ? null : shouldRebuildProxy,
      );
    };
Function Selector2_as$<A, B, S>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Selector2<A, B, S>;
Function Selector2_is$<A, B, S>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Selector2<A, B, S>;
Function _Selector2__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer builder,
      required m.FunctionPointer selector,
      m.FunctionPointer? shouldRebuild,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        dynamic builder_value$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [
              builder_context$,
              builder_value$,
              builder_child$,
            ],
            {},
          );
      dynamic selectorProxy(
        BuildContext selector_$p0$,
        dynamic selector_$p1$,
        dynamic selector_$p2$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            selector,
            [
              selector_$p0$,
              selector_$p1$,
              selector_$p2$,
            ],
            {},
          );
      bool shouldRebuildProxy(
        dynamic shouldRebuild_previous$,
        dynamic shouldRebuild_next$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            shouldRebuild!,
            [
              shouldRebuild_previous$,
              shouldRebuild_next$,
            ],
            {},
          );
      return Selector2(
        builder: builderProxy,
        child: child,
        key: key,
        selector: selectorProxy,
        shouldRebuild: shouldRebuild == null ? null : shouldRebuildProxy,
      );
    };
Function Selector3_as$<A, B, C, S>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Selector3<A, B, C, S>;
Function Selector3_is$<A, B, C, S>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Selector3<A, B, C, S>;
Function _Selector3__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer builder,
      required m.FunctionPointer selector,
      m.FunctionPointer? shouldRebuild,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        dynamic builder_value$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [
              builder_context$,
              builder_value$,
              builder_child$,
            ],
            {},
          );
      dynamic selectorProxy(
        BuildContext selector_$p0$,
        dynamic selector_$p1$,
        dynamic selector_$p2$,
        dynamic selector_$p3$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            selector,
            [
              selector_$p0$,
              selector_$p1$,
              selector_$p2$,
              selector_$p3$,
            ],
            {},
          );
      bool shouldRebuildProxy(
        dynamic shouldRebuild_previous$,
        dynamic shouldRebuild_next$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            shouldRebuild!,
            [
              shouldRebuild_previous$,
              shouldRebuild_next$,
            ],
            {},
          );
      return Selector3(
        builder: builderProxy,
        child: child,
        key: key,
        selector: selectorProxy,
        shouldRebuild: shouldRebuild == null ? null : shouldRebuildProxy,
      );
    };
Function Selector4_as$<A, B, C, D, S>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Selector4<A, B, C, D, S>;
Function Selector4_is$<A, B, C, D, S>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Selector4<A, B, C, D, S>;
Function _Selector4__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer builder,
      required m.FunctionPointer selector,
      m.FunctionPointer? shouldRebuild,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        dynamic builder_value$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [
              builder_context$,
              builder_value$,
              builder_child$,
            ],
            {},
          );
      dynamic selectorProxy(
        BuildContext selector_$p0$,
        dynamic selector_$p1$,
        dynamic selector_$p2$,
        dynamic selector_$p3$,
        dynamic selector_$p4$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            selector,
            [
              selector_$p0$,
              selector_$p1$,
              selector_$p2$,
              selector_$p3$,
              selector_$p4$,
            ],
            {},
          );
      bool shouldRebuildProxy(
        dynamic shouldRebuild_previous$,
        dynamic shouldRebuild_next$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            shouldRebuild!,
            [
              shouldRebuild_previous$,
              shouldRebuild_next$,
            ],
            {},
          );
      return Selector4(
        builder: builderProxy,
        child: child,
        key: key,
        selector: selectorProxy,
        shouldRebuild: shouldRebuild == null ? null : shouldRebuildProxy,
      );
    };
Function Selector5_as$<A, B, C, D, E, S>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Selector5<A, B, C, D, E, S>;
Function Selector5_is$<A, B, C, D, E, S>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Selector5<A, B, C, D, E, S>;
Function _Selector5__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer builder,
      required m.FunctionPointer selector,
      m.FunctionPointer? shouldRebuild,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        dynamic builder_value$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [
              builder_context$,
              builder_value$,
              builder_child$,
            ],
            {},
          );
      dynamic selectorProxy(
        BuildContext selector_$p0$,
        dynamic selector_$p1$,
        dynamic selector_$p2$,
        dynamic selector_$p3$,
        dynamic selector_$p4$,
        dynamic selector_$p5$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            selector,
            [
              selector_$p0$,
              selector_$p1$,
              selector_$p2$,
              selector_$p3$,
              selector_$p4$,
              selector_$p5$,
            ],
            {},
          );
      bool shouldRebuildProxy(
        dynamic shouldRebuild_previous$,
        dynamic shouldRebuild_next$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            shouldRebuild!,
            [
              shouldRebuild_previous$,
              shouldRebuild_next$,
            ],
            {},
          );
      return Selector5(
        builder: builderProxy,
        child: child,
        key: key,
        selector: selectorProxy,
        shouldRebuild: shouldRebuild == null ? null : shouldRebuildProxy,
      );
    };
Function Selector6_as$<A, B, C, D, E, F, S>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Selector6<A, B, C, D, E, F, S>;
Function Selector6_is$<A, B, C, D, E, F, S>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Selector6<A, B, C, D, E, F, S>;
Function _Selector6__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer builder,
      required m.FunctionPointer selector,
      m.FunctionPointer? shouldRebuild,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        dynamic builder_value$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [
              builder_context$,
              builder_value$,
              builder_child$,
            ],
            {},
          );
      dynamic selectorProxy(
        BuildContext selector_$p0$,
        dynamic selector_$p1$,
        dynamic selector_$p2$,
        dynamic selector_$p3$,
        dynamic selector_$p4$,
        dynamic selector_$p5$,
        dynamic selector_$p6$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            selector,
            [
              selector_$p0$,
              selector_$p1$,
              selector_$p2$,
              selector_$p3$,
              selector_$p4$,
              selector_$p5$,
              selector_$p6$,
            ],
            {},
          );
      bool shouldRebuildProxy(
        dynamic shouldRebuild_previous$,
        dynamic shouldRebuild_next$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            shouldRebuild!,
            [
              shouldRebuild_previous$,
              shouldRebuild_next$,
            ],
            {},
          );
      return Selector6(
        builder: builderProxy,
        child: child,
        key: key,
        selector: selectorProxy,
        shouldRebuild: shouldRebuild == null ? null : shouldRebuildProxy,
      );
    };
