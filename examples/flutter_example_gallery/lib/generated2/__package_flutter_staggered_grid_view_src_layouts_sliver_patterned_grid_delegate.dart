// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter_staggered_grid_view/src/layouts/sliver_patterned_grid_delegate.dart';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter_staggered_grid_view/src/layouts/sliver_patterned_grid_delegate.dart',
  {'SliverPatternGridGeometries.': _SliverPatternGridGeometries__$},
  {},
  {
    'SliverPatternGridGeometries': m.ClassMirror(
      'SliverPatternGridGeometries',
      {
        '#as': SliverPatternGridGeometries_as$,
        '#is': SliverPatternGridGeometries_is$,
        'tiles': _SliverPatternGridGeometries_tiles$,
        'bounds': _SliverPatternGridGeometries_bounds$,
      },
      {},
    ),
    'SliverPatternGridDelegate': m.ClassMirror(
      'SliverPatternGridDelegate',
      {
        '#as': SliverPatternGridDelegate_as$,
        '#is': SliverPatternGridDelegate_is$,
        'mainAxisSpacing': _SliverPatternGridDelegate_mainAxisSpacing$,
        'crossAxisSpacing': _SliverPatternGridDelegate_crossAxisSpacing$,
        'pattern': _SliverPatternGridDelegate_pattern$,
        'tileCount': _SliverPatternGridDelegate_tileCount$,
        'crossAxisCount': _SliverPatternGridDelegate_crossAxisCount$,
        'maxCrossAxisExtent': _SliverPatternGridDelegate_maxCrossAxisExtent$,
        'getGeometries': _SliverPatternGridDelegate_getGeometries$,
        'getLayout': _SliverPatternGridDelegate_getLayout$,
        'shouldRelayout': _SliverPatternGridDelegate_shouldRelayout$,
      },
      {},
    ),
  },
);
Function SliverPatternGridGeometries_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverPatternGridGeometries;
Function SliverPatternGridGeometries_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverPatternGridGeometries;
Function _SliverPatternGridGeometries_tiles$(
  m.Scope scope$,
  SliverPatternGridGeometries target$,
) =>
    () {
      return target$.tiles;
    };
Function _SliverPatternGridGeometries_bounds$(
  m.Scope scope$,
  SliverPatternGridGeometries target$,
) =>
    () {
      return target$.bounds;
    };
Function _SliverPatternGridGeometries__$(m.Scope scope$) => ({
      required List tiles,
      required List bounds,
    }) {
      return SliverPatternGridGeometries(
        bounds: List.from(bounds),
        tiles: List.from(tiles),
      );
    };
Function SliverPatternGridDelegate_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverPatternGridDelegate<T>;
Function SliverPatternGridDelegate_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverPatternGridDelegate<T>;
Function _SliverPatternGridDelegate_mainAxisSpacing$<T>(
  m.Scope scope$,
  SliverPatternGridDelegate<T> target$,
) =>
    () {
      return target$.mainAxisSpacing;
    };
Function _SliverPatternGridDelegate_crossAxisSpacing$<T>(
  m.Scope scope$,
  SliverPatternGridDelegate<T> target$,
) =>
    () {
      return target$.crossAxisSpacing;
    };
Function _SliverPatternGridDelegate_pattern$<T>(
  m.Scope scope$,
  SliverPatternGridDelegate<T> target$,
) =>
    () {
      return target$.pattern;
    };
Function _SliverPatternGridDelegate_tileCount$<T>(
  m.Scope scope$,
  SliverPatternGridDelegate<T> target$,
) =>
    () {
      return target$.tileCount;
    };
Function _SliverPatternGridDelegate_crossAxisCount$<T>(
  m.Scope scope$,
  SliverPatternGridDelegate<T> target$,
) =>
    () {
      return target$.crossAxisCount;
    };
Function _SliverPatternGridDelegate_maxCrossAxisExtent$<T>(
  m.Scope scope$,
  SliverPatternGridDelegate<T> target$,
) =>
    () {
      return target$.maxCrossAxisExtent;
    };
Function _SliverPatternGridDelegate_getGeometries$<T>(
  m.Scope scope$,
  SliverPatternGridDelegate<T> target$,
) =>
    target$.getGeometries;
Function _SliverPatternGridDelegate_getLayout$<T>(
  m.Scope scope$,
  SliverPatternGridDelegate<T> target$,
) =>
    target$.getLayout;
Function _SliverPatternGridDelegate_shouldRelayout$<T>(
  m.Scope scope$,
  SliverPatternGridDelegate<T> target$,
) =>
    target$.shouldRelayout;
