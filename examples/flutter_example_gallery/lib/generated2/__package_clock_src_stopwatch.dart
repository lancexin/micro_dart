// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:clock/src/stopwatch.dart';
import 'package:clock/src/clock.dart';

const libraryMirror = m.LibraryMirror(
  'package:clock/src/stopwatch.dart',
  {'ClockStopwatch.': _ClockStopwatch__$},
  {},
  {
    'ClockStopwatch': m.ClassMirror(
      'ClockStopwatch',
      {
        '#as': ClockStopwatch_as$,
        '#is': ClockStopwatch_is$,
        'frequency': _ClockStopwatch_frequency$,
        'elapsedTicks': _ClockStopwatch_elapsedTicks$,
        'elapsed': _ClockStopwatch_elapsed$,
        'elapsedMilliseconds': _ClockStopwatch_elapsedMilliseconds$,
        'isRunning': _ClockStopwatch_isRunning$,
        'elapsedMicroseconds': _ClockStopwatch_elapsedMicroseconds$,
        'start': _ClockStopwatch_start$,
        'stop': _ClockStopwatch_stop$,
        'reset': _ClockStopwatch_reset$,
      },
      {},
    )
  },
);
Function ClockStopwatch_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ClockStopwatch;
Function ClockStopwatch_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ClockStopwatch;
Function _ClockStopwatch_frequency$(
  m.Scope scope$,
  ClockStopwatch target$,
) =>
    () {
      return target$.frequency;
    };
Function _ClockStopwatch_elapsedTicks$(
  m.Scope scope$,
  ClockStopwatch target$,
) =>
    () {
      return target$.elapsedTicks;
    };
Function _ClockStopwatch_elapsed$(
  m.Scope scope$,
  ClockStopwatch target$,
) =>
    () {
      return target$.elapsed;
    };
Function _ClockStopwatch_elapsedMilliseconds$(
  m.Scope scope$,
  ClockStopwatch target$,
) =>
    () {
      return target$.elapsedMilliseconds;
    };
Function _ClockStopwatch_isRunning$(
  m.Scope scope$,
  ClockStopwatch target$,
) =>
    () {
      return target$.isRunning;
    };
Function _ClockStopwatch_elapsedMicroseconds$(
  m.Scope scope$,
  ClockStopwatch target$,
) =>
    () {
      return target$.elapsedMicroseconds;
    };
Function _ClockStopwatch__$(m.Scope scope$) => (Clock _clock) {
      return ClockStopwatch(_clock);
    };
Function _ClockStopwatch_start$(
  m.Scope scope$,
  ClockStopwatch target$,
) =>
    target$.start;
Function _ClockStopwatch_stop$(
  m.Scope scope$,
  ClockStopwatch target$,
) =>
    target$.stop;
Function _ClockStopwatch_reset$(
  m.Scope scope$,
  ClockStopwatch target$,
) =>
    target$.reset;
