// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:collection/src/priority_queue.dart';
import 'dart:collection';
import 'package:collection/src/utils.dart';

const libraryMirror = m.LibraryMirror(
  'package:collection/src/priority_queue.dart',
  {
    'PriorityQueue.': _PriorityQueue__$,
    'HeapPriorityQueue.': _HeapPriorityQueue__$,
  },
  {},
  {
    'PriorityQueue': m.ClassMirror(
      'PriorityQueue',
      {
        '#as': PriorityQueue_as$,
        '#is': PriorityQueue_is$,
        'length': _PriorityQueue_length$,
        'isEmpty': _PriorityQueue_isEmpty$,
        'isNotEmpty': _PriorityQueue_isNotEmpty$,
        'unorderedElements': _PriorityQueue_unorderedElements$,
        'first': _PriorityQueue_first$,
        'contains': _PriorityQueue_contains$,
        'add': _PriorityQueue_add$,
        'addAll': _PriorityQueue_addAll$,
        'removeFirst': _PriorityQueue_removeFirst$,
        'remove': _PriorityQueue_remove$,
        'removeAll': _PriorityQueue_removeAll$,
        'clear': _PriorityQueue_clear$,
        'toList': _PriorityQueue_toList$,
        'toUnorderedList': _PriorityQueue_toUnorderedList$,
        'toSet': _PriorityQueue_toSet$,
      },
      {},
    ),
    'HeapPriorityQueue': m.ClassMirror(
      'HeapPriorityQueue',
      {
        '#as': HeapPriorityQueue_as$,
        '#is': HeapPriorityQueue_is$,
        'comparison': _HeapPriorityQueue_comparison$,
        'unorderedElements': _HeapPriorityQueue_unorderedElements$,
        'first': _HeapPriorityQueue_first$,
        'isEmpty': _HeapPriorityQueue_isEmpty$,
        'isNotEmpty': _HeapPriorityQueue_isNotEmpty$,
        'length': _HeapPriorityQueue_length$,
        'add': _HeapPriorityQueue_add$,
        'addAll': _HeapPriorityQueue_addAll$,
        'clear': _HeapPriorityQueue_clear$,
        'contains': _HeapPriorityQueue_contains$,
        'remove': _HeapPriorityQueue_remove$,
        'removeAll': _HeapPriorityQueue_removeAll$,
        'removeFirst': _HeapPriorityQueue_removeFirst$,
        'toList': _HeapPriorityQueue_toList$,
        'toSet': _HeapPriorityQueue_toSet$,
        'toUnorderedList': _HeapPriorityQueue_toUnorderedList$,
        'toString': _HeapPriorityQueue_toString$,
      },
      {},
    ),
  },
);
Function PriorityQueue_as$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PriorityQueue<E>;
Function PriorityQueue_is$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PriorityQueue<E>;
Function _PriorityQueue_length$<E>(
  m.Scope scope$,
  PriorityQueue<E> target$,
) =>
    () {
      return target$.length;
    };
Function _PriorityQueue_isEmpty$<E>(
  m.Scope scope$,
  PriorityQueue<E> target$,
) =>
    () {
      return target$.isEmpty;
    };
Function _PriorityQueue_isNotEmpty$<E>(
  m.Scope scope$,
  PriorityQueue<E> target$,
) =>
    () {
      return target$.isNotEmpty;
    };
Function _PriorityQueue_unorderedElements$<E>(
  m.Scope scope$,
  PriorityQueue<E> target$,
) =>
    () {
      return target$.unorderedElements;
    };
Function _PriorityQueue_first$<E>(
  m.Scope scope$,
  PriorityQueue<E> target$,
) =>
    () {
      return target$.first;
    };
Function _PriorityQueue__$(m.Scope scope$) =>
    ([m.FunctionPointer? comparison]) {
      if (comparison == null) {
        return PriorityQueue();
      }
      int comparisonProxy(
        dynamic comparison_$p0$,
        dynamic comparison_$p1$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            comparison!,
            [
              comparison_$p0$,
              comparison_$p1$,
            ],
            {},
          );
      return PriorityQueue(comparison == null ? null : comparisonProxy);
    };
Function _PriorityQueue_contains$<E>(
  m.Scope scope$,
  PriorityQueue<E> target$,
) =>
    target$.contains;
Function _PriorityQueue_add$<E>(
  m.Scope scope$,
  PriorityQueue<E> target$,
) =>
    target$.add;
Function _PriorityQueue_addAll$<E>(
  m.Scope scope$,
  PriorityQueue<E> target$,
) =>
    target$.addAll;
Function _PriorityQueue_removeFirst$<E>(
  m.Scope scope$,
  PriorityQueue<E> target$,
) =>
    target$.removeFirst;
Function _PriorityQueue_remove$<E>(
  m.Scope scope$,
  PriorityQueue<E> target$,
) =>
    target$.remove;
Function _PriorityQueue_removeAll$<E>(
  m.Scope scope$,
  PriorityQueue<E> target$,
) =>
    target$.removeAll;
Function _PriorityQueue_clear$<E>(
  m.Scope scope$,
  PriorityQueue<E> target$,
) =>
    target$.clear;
Function _PriorityQueue_toList$<E>(
  m.Scope scope$,
  PriorityQueue<E> target$,
) =>
    target$.toList;
Function _PriorityQueue_toUnorderedList$<E>(
  m.Scope scope$,
  PriorityQueue<E> target$,
) =>
    target$.toUnorderedList;
Function _PriorityQueue_toSet$<E>(
  m.Scope scope$,
  PriorityQueue<E> target$,
) =>
    target$.toSet;
Function HeapPriorityQueue_as$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as HeapPriorityQueue<E>;
Function HeapPriorityQueue_is$<E>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is HeapPriorityQueue<E>;
Function _HeapPriorityQueue_comparison$<E>(
  m.Scope scope$,
  HeapPriorityQueue<E> target$,
) =>
    () {
      return target$.comparison;
    };
Function _HeapPriorityQueue_unorderedElements$<E>(
  m.Scope scope$,
  HeapPriorityQueue<E> target$,
) =>
    () {
      return target$.unorderedElements;
    };
Function _HeapPriorityQueue_first$<E>(
  m.Scope scope$,
  HeapPriorityQueue<E> target$,
) =>
    () {
      return target$.first;
    };
Function _HeapPriorityQueue_isEmpty$<E>(
  m.Scope scope$,
  HeapPriorityQueue<E> target$,
) =>
    () {
      return target$.isEmpty;
    };
Function _HeapPriorityQueue_isNotEmpty$<E>(
  m.Scope scope$,
  HeapPriorityQueue<E> target$,
) =>
    () {
      return target$.isNotEmpty;
    };
Function _HeapPriorityQueue_length$<E>(
  m.Scope scope$,
  HeapPriorityQueue<E> target$,
) =>
    () {
      return target$.length;
    };
Function _HeapPriorityQueue__$(m.Scope scope$) =>
    ([m.FunctionPointer? comparison]) {
      if (comparison == null) {
        return HeapPriorityQueue();
      }
      int comparisonProxy(
        dynamic comparison_$p0$,
        dynamic comparison_$p1$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            comparison!,
            [
              comparison_$p0$,
              comparison_$p1$,
            ],
            {},
          );
      return HeapPriorityQueue(comparison == null ? null : comparisonProxy);
    };
Function _HeapPriorityQueue_add$<E>(
  m.Scope scope$,
  HeapPriorityQueue<E> target$,
) =>
    target$.add;
Function _HeapPriorityQueue_addAll$<E>(
  m.Scope scope$,
  HeapPriorityQueue<E> target$,
) =>
    target$.addAll;
Function _HeapPriorityQueue_clear$<E>(
  m.Scope scope$,
  HeapPriorityQueue<E> target$,
) =>
    target$.clear;
Function _HeapPriorityQueue_contains$<E>(
  m.Scope scope$,
  HeapPriorityQueue<E> target$,
) =>
    target$.contains;
Function _HeapPriorityQueue_remove$<E>(
  m.Scope scope$,
  HeapPriorityQueue<E> target$,
) =>
    target$.remove;
Function _HeapPriorityQueue_removeAll$<E>(
  m.Scope scope$,
  HeapPriorityQueue<E> target$,
) =>
    target$.removeAll;
Function _HeapPriorityQueue_removeFirst$<E>(
  m.Scope scope$,
  HeapPriorityQueue<E> target$,
) =>
    target$.removeFirst;
Function _HeapPriorityQueue_toList$<E>(
  m.Scope scope$,
  HeapPriorityQueue<E> target$,
) =>
    target$.toList;
Function _HeapPriorityQueue_toSet$<E>(
  m.Scope scope$,
  HeapPriorityQueue<E> target$,
) =>
    target$.toSet;
Function _HeapPriorityQueue_toUnorderedList$<E>(
  m.Scope scope$,
  HeapPriorityQueue<E> target$,
) =>
    target$.toUnorderedList;
Function _HeapPriorityQueue_toString$<E>(
  m.Scope scope$,
  HeapPriorityQueue<E> target$,
) =>
    target$.toString;
