// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:scoped_model/scoped_model.dart';
import 'dart:async';
import 'package:flutter/material.dart';

part '../proxy/proxy__package_scoped_model_scoped_model.dart';

const libraryMirror = m.LibraryMirror(
  'package:scoped_model/scoped_model.dart',
  {
    ...globalGetters,
    'ScopedModel.': _ScopedModel__$,
    'ScopedModel.of': _ScopedModel_of$,
    'ScopedModelDescendant.': _ScopedModelDescendant__$,
    'ScopedModelError.': _ScopedModelError__$,
  },
  {},
  {
    'Model': m.ClassMirror(
      'Model',
      {
        '#as': Model_as$,
        '#is': Model_is$,
        'listenerCount': _Model_listenerCount$,
        'addListener': _Model_addListener$,
        'removeListener': _Model_removeListener$,
        'notifyListeners': _Model_notifyListeners$,
      },
      {},
    ),
    'ScopedModel': m.ClassMirror(
      'ScopedModel',
      {
        '#as': ScopedModel_as$,
        '#is': ScopedModel_is$,
        'model': _ScopedModel_model$,
        'child': _ScopedModel_child$,
        'build': _ScopedModel_build$,
      },
      {},
    ),
    'ScopedModelDescendant': m.ClassMirror(
      'ScopedModelDescendant',
      {
        '#as': ScopedModelDescendant_as$,
        '#is': ScopedModelDescendant_is$,
        'builder': _ScopedModelDescendant_builder$,
        'child': _ScopedModelDescendant_child$,
        'rebuildOnChange': _ScopedModelDescendant_rebuildOnChange$,
        'build': _ScopedModelDescendant_build$,
      },
      {},
    ),
    'ScopedModelError': m.ClassMirror(
      'ScopedModelError',
      {
        '#as': ScopedModelError_as$,
        '#is': ScopedModelError_is$,
        'toString': _ScopedModelError_toString$,
      },
      {},
    ),
  },
);
Function Model_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Model;
Function Model_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Model;
Function _Model_listenerCount$(
  m.Scope scope$,
  Model target$,
) =>
    () {
      return target$.listenerCount;
    };
Function _Model_addListener$(
  m.Scope scope$,
  Model target$,
) =>
    (m.FunctionPointer listener) {
      void listenerProxy() => scope$.engine.callFunctionPointer(
            scope$,
            listener,
            [],
            {},
          );
      target$.addListener(listenerProxy);
    };
Function _Model_removeListener$(
  m.Scope scope$,
  Model target$,
) =>
    (m.FunctionPointer listener) {
      void listenerProxy() => scope$.engine.callFunctionPointer(
            scope$,
            listener,
            [],
            {},
          );
      target$.removeListener(listenerProxy);
    };
Function _Model_notifyListeners$(
  m.Scope scope$,
  Model target$,
) =>
    target$.notifyListeners;
Function ScopedModel_as$<T extends Model>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ScopedModel<T>;
Function ScopedModel_is$<T extends Model>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ScopedModel<T>;
Function _ScopedModel_model$<T extends Model>(
  m.Scope scope$,
  ScopedModel<T> target$,
) =>
    () {
      return target$.model;
    };
Function _ScopedModel_child$<T extends Model>(
  m.Scope scope$,
  ScopedModel<T> target$,
) =>
    () {
      return target$.child;
    };
Function _ScopedModel__$(m.Scope scope$) => <T extends Model>({
      required dynamic model,
      required Widget child,
    }) {
      return ScopedModel<T>(
        child: child,
        model: model,
      );
    };
Function _ScopedModel_build$<T extends Model>(
  m.Scope scope$,
  ScopedModel<T> target$,
) =>
    target$.build;
Function _ScopedModel_of$<T extends Model>(m.Scope scope$) => ScopedModel.of<T>;
Function ScopedModelDescendant_as$<T extends Model>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ScopedModelDescendant<T>;
Function ScopedModelDescendant_is$<T extends Model>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ScopedModelDescendant<T>;
Function _ScopedModelDescendant_builder$<T extends Model>(
  m.Scope scope$,
  ScopedModelDescendant<T> target$,
) =>
    () {
      return target$.builder;
    };
Function _ScopedModelDescendant_child$<T extends Model>(
  m.Scope scope$,
  ScopedModelDescendant<T> target$,
) =>
    () {
      return target$.child;
    };
Function _ScopedModelDescendant_rebuildOnChange$<T extends Model>(
  m.Scope scope$,
  ScopedModelDescendant<T> target$,
) =>
    () {
      return target$.rebuildOnChange;
    };
Function _ScopedModelDescendant__$(m.Scope scope$) => <T extends Model>({
      required m.FunctionPointer builder,
      Widget? child,
      bool? rebuildOnChange,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
        dynamic builder_model$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [
              builder_context$,
              builder_child$,
              builder_model$,
            ],
            {},
          );
      return ScopedModelDescendant<T>(
        builder: builderProxy,
        child: child,
        rebuildOnChange: rebuildOnChange ?? true,
      );
    };
Function _ScopedModelDescendant_build$<T extends Model>(
  m.Scope scope$,
  ScopedModelDescendant<T> target$,
) =>
    target$.build;
Function ScopedModelError_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ScopedModelError;
Function ScopedModelError_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ScopedModelError;
Function _ScopedModelError__$(m.Scope scope$) => () {
      return ScopedModelError();
    };
Function _ScopedModelError_toString$(
  m.Scope scope$,
  ScopedModelError target$,
) =>
    target$.toString;
