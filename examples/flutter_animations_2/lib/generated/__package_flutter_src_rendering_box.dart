// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/box.dart';
import 'dart:developer' show Timeline;
import 'dart:math';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:vector_math/vector_math_64.dart';
import 'package:flutter/src/rendering/debug.dart';
import 'package:flutter/src/rendering/object.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/box.dart',
  {'BoxConstraints.': _BoxConstraints__$},
  {},
  {
    'RenderBox': m.ClassMirror(
      'RenderBox',
      {
        '#as': RenderBox_as$,
        'size': _RenderBox_size$,
        'localToGlobal': _RenderBox_localToGlobal$,
      },
      {},
    )
  },
);
Function _BoxConstraints__$(m.Scope scope$) => ({
      double? minWidth,
      double? maxWidth,
      double? minHeight,
      double? maxHeight,
    }) {
      return BoxConstraints(
        maxHeight: maxHeight ?? double.infinity,
        maxWidth: maxWidth ?? double.infinity,
        minHeight: minHeight ?? 0.0,
        minWidth: minWidth ?? 0.0,
      );
    };
Function RenderBox_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RenderBox;
Function _RenderBox_size$(
  m.Scope scope$,
  RenderBox target$,
) =>
    () {
      return target$.size;
    };
Function _RenderBox_localToGlobal$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.localToGlobal;
