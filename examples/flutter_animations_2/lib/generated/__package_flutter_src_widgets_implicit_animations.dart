// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/implicit_animations.dart';
import 'dart:ui' show TextHeightBehavior;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:vector_math/vector_math_64.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/container.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/text.dart';
import 'package:flutter/src/widgets/ticker_provider.dart';
import 'package:flutter/src/widgets/transitions.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/implicit_animations.dart',
  {
    'BorderRadiusTween.': _BorderRadiusTween__$,
    'AnimatedContainer.': _AnimatedContainer__$,
    'AnimatedPositioned.': _AnimatedPositioned__$,
  },
  {},
  {},
);
Function _BorderRadiusTween__$(m.Scope scope$) => ({
      BorderRadius? begin,
      BorderRadius? end,
    }) {
      return BorderRadiusTween(
        begin: begin,
        end: end,
      );
    };
Function _AnimatedContainer__$(m.Scope scope$) => ({
      Key? key,
      AlignmentGeometry? alignment,
      EdgeInsetsGeometry? padding,
      Color? color,
      Decoration? decoration,
      Decoration? foregroundDecoration,
      double? width,
      double? height,
      BoxConstraints? constraints,
      EdgeInsetsGeometry? margin,
      Matrix4? transform,
      AlignmentGeometry? transformAlignment,
      Widget? child,
      Clip? clipBehavior,
      Curve? curve,
      required Duration duration,
      m.FunctionPointer? onEnd,
    }) {
      void onEndProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onEnd!,
            [],
            {},
          );
      return AnimatedContainer(
        alignment: alignment,
        child: child,
        clipBehavior: clipBehavior ?? Clip.none,
        color: color,
        constraints: constraints,
        curve: curve ?? Curves.linear,
        decoration: decoration,
        duration: duration,
        foregroundDecoration: foregroundDecoration,
        height: height,
        key: key,
        margin: margin,
        onEnd: onEnd == null ? null : onEndProxy,
        padding: padding,
        transform: transform,
        transformAlignment: transformAlignment,
        width: width,
      );
    };
Function _AnimatedPositioned__$(m.Scope scope$) => ({
      Key? key,
      required Widget child,
      double? left,
      double? top,
      double? right,
      double? bottom,
      double? width,
      double? height,
      Curve? curve,
      required Duration duration,
      m.FunctionPointer? onEnd,
    }) {
      void onEndProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onEnd!,
            [],
            {},
          );
      return AnimatedPositioned(
        bottom: bottom,
        child: child,
        curve: curve ?? Curves.linear,
        duration: duration,
        height: height,
        key: key,
        left: left,
        onEnd: onEnd == null ? null : onEndProxy,
        right: right,
        top: top,
        width: width,
      );
    };
