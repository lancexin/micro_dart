// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'dart:ui';

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'dart:collection';
import 'dart:convert'
    show
        ascii,
        base64,
        Base64Codec,
        Encoding,
        latin1,
        StringConversionSink,
        utf8;
import 'dart:math' show Random;
import 'dart:typed_data' show Uint8List;

part '../proxy/proxy__dart_core.dart';

const libraryMirror = m.LibraryMirror(
  'dart:core',
  {...globalSetters, 'Duration.': _Duration__$},
  {},
  {
    'double': m.ClassMirror(
      'double',
      {
        '+': _double_plus$$,
        '-': _double_minus$$,
        '*': _double_times$$,
        '/': _double_over$$,
        'unary-': _double_unary_minus$$,
        'abs': _double_abs$,
        'round': _double_round$,
      },
      {},
    ),
    'int': m.ClassMirror(
      'int',
      {'&': _int_bit_and$$},
      {},
    ),
    'Iterable': m.ClassMirror(
      'Iterable',
      {
        'iterator': _Iterable_iterator$,
        'map': _Iterable_map$,
        'map<Widget>': _Iterable_map$,
        'map<DropdownMenuItem>': _Iterable_map$,
        'toList': _Iterable_toList$,
      },
      {},
    ),
    'Iterator': m.ClassMirror(
      'Iterator',
      {
        'current': _Iterator_current$,
        'moveNext': _Iterator_moveNext$,
      },
      {},
    ),
    'List': m.ClassMirror(
      'List',
      {
        'length': _List_length$,
        '[]': _List_$index$$,
        'add': _List_add$,
        'addAll': _List_addAll$,
        'indexWhere': _List_indexWhere$,
        'remove': _List_remove$,
        'removeAt': _List_removeAt$,
      },
      {},
    ),
    'num': m.ClassMirror(
      'num',
      {
        '+': _num_plus$$,
        '-': _num_minus$$,
        '*': _num_times$$,
        '%': _num_surplus$$,
        '/': _num_over$$,
        '<': _num_low$$,
        '>=': _num_more_eq$$,
        'clamp': _num_clamp$,
        'toStringAsFixed': _num_toStringAsFixed$,
      },
      {},
    ),
    'String': m.ClassMirror(
      'String',
      {
        'length': _String_length$,
        'substring': _String_substring$,
      },
      {},
    ),
  },
);
Function _double_plus$$(
  m.Scope scope$,
  double target$,
) =>
    (num other$) => target$ + other$;
Function _double_minus$$(
  m.Scope scope$,
  double target$,
) =>
    (num other$) => target$ - other$;
Function _double_times$$(
  m.Scope scope$,
  double target$,
) =>
    (num other$) => target$ * other$;
Function _double_over$$(
  m.Scope scope$,
  double target$,
) =>
    (num other$) => target$ / other$;
Function _double_unary_minus$$(
  m.Scope scope$,
  double target$,
) =>
    () => -target$;
Function _double_abs$(
  m.Scope scope$,
  double target$,
) =>
    target$.abs;
Function _double_round$(
  m.Scope scope$,
  double target$,
) =>
    target$.round;
Function _Duration__$(m.Scope scope$) => ({
      int? days,
      int? hours,
      int? minutes,
      int? seconds,
      int? milliseconds,
      int? microseconds,
    }) {
      return Duration(
        days: days ?? 0,
        hours: hours ?? 0,
        microseconds: microseconds ?? 0,
        milliseconds: milliseconds ?? 0,
        minutes: minutes ?? 0,
        seconds: seconds ?? 0,
      );
    };
Function _int_bit_and$$(
  m.Scope scope$,
  int target$,
) =>
    (int other$) => target$ & other$;
Function _Iterable_iterator$<E>(
  m.Scope scope$,
  Iterable<E> target$,
) =>
    () {
      return target$.iterator;
    };
Function _Iterable_map$(
  m.Scope scope$,
  Iterable target$,
) =>
    (m.FunctionPointer toElement) {
      dynamic toElementProxy(dynamic toElement_e$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            toElement,
            [toElement_e$],
            {},
          );
      return target$.map(toElementProxy);
    };
Function _Iterable_toList$<E>(
  m.Scope scope$,
  Iterable<E> target$,
) =>
    target$.toList;
Function _Iterator_current$<E>(
  m.Scope scope$,
  Iterator<E> target$,
) =>
    () {
      return target$.current;
    };
Function _Iterator_moveNext$<E>(
  m.Scope scope$,
  Iterator<E> target$,
) =>
    target$.moveNext;
Function _List_length$<E>(
  m.Scope scope$,
  List<E> target$,
) =>
    () {
      return target$.length;
    };
Function _List_$index$$<E>(
  m.Scope scope$,
  List<E> target$,
) =>
    (int index) => target$[index];
Function _List_add$<E>(
  m.Scope scope$,
  List<E> target$,
) =>
    target$.add;
Function _List_addAll$<E>(
  m.Scope scope$,
  List<E> target$,
) =>
    target$.addAll;
Function _List_indexWhere$(
  m.Scope scope$,
  List target$,
) =>
    (
      m.FunctionPointer test, [
      int? start,
    ]) {
      bool testProxy(dynamic test_element$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            test,
            [test_element$],
            {},
          );
      if (start == null) {
        return target$.indexWhere(testProxy);
      }
      return target$.indexWhere(
        testProxy,
        start!,
      );
    };
Function _List_remove$<E>(
  m.Scope scope$,
  List<E> target$,
) =>
    target$.remove;
Function _List_removeAt$<E>(
  m.Scope scope$,
  List<E> target$,
) =>
    target$.removeAt;
Function _num_plus$$(
  m.Scope scope$,
  num target$,
) =>
    (num other$) => target$ + other$;
Function _num_minus$$(
  m.Scope scope$,
  num target$,
) =>
    (num other$) => target$ - other$;
Function _num_times$$(
  m.Scope scope$,
  num target$,
) =>
    (num other$) => target$ * other$;
Function _num_surplus$$(
  m.Scope scope$,
  num target$,
) =>
    (num other$) => target$ % other$;
Function _num_over$$(
  m.Scope scope$,
  num target$,
) =>
    (num other$) => target$ / other$;
Function _num_low$$(
  m.Scope scope$,
  num target$,
) =>
    (num other$) => target$ < other$;
Function _num_more_eq$$(
  m.Scope scope$,
  num target$,
) =>
    (num other$) => target$ >= other$;
Function _num_clamp$(
  m.Scope scope$,
  num target$,
) =>
    target$.clamp;
Function _num_toStringAsFixed$(
  m.Scope scope$,
  num target$,
) =>
    target$.toStringAsFixed;
Function _String_length$(
  m.Scope scope$,
  String target$,
) =>
    () {
      return target$.length;
    };
Function _String_substring$(
  m.Scope scope$,
  String target$,
) =>
    target$.substring;
