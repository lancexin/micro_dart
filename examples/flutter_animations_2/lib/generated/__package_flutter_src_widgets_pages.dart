// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:flutter/widgets.dart';
import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/pages.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/routes.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/pages.dart',
  {'PageRouteBuilder.': _PageRouteBuilder__$},
  {},
  {},
);
Function _PageRouteBuilder__$(m.Scope scope$) => ({
      RouteSettings? settings,
      required m.FunctionPointer pageBuilder,
      m.FunctionPointer? transitionsBuilder,
      Duration? transitionDuration,
      Duration? reverseTransitionDuration,
      bool? opaque,
      bool? barrierDismissible,
      Color? barrierColor,
      String? barrierLabel,
      bool? maintainState,
      bool? fullscreenDialog,
      bool? allowSnapshotting,
    }) {
      Widget pageBuilderProxy(
        BuildContext pageBuilder_context$,
        Animation<double> pageBuilder_animation$,
        Animation<double> pageBuilder_secondaryAnimation$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            pageBuilder,
            [
              pageBuilder_context$,
              pageBuilder_animation$,
              pageBuilder_secondaryAnimation$,
            ],
            {},
          );
      Widget transitionsBuilderProxy(
        BuildContext transitionsBuilder_context$,
        Animation<double> transitionsBuilder_animation$,
        Animation<double> transitionsBuilder_secondaryAnimation$,
        Widget transitionsBuilder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            transitionsBuilder!,
            [
              transitionsBuilder_context$,
              transitionsBuilder_animation$,
              transitionsBuilder_secondaryAnimation$,
              transitionsBuilder_child$,
            ],
            {},
          );
      return PageRouteBuilder(
        allowSnapshotting: allowSnapshotting ?? true,
        barrierColor: barrierColor,
        barrierDismissible: barrierDismissible ?? false,
        barrierLabel: barrierLabel,
        fullscreenDialog: fullscreenDialog ?? false,
        maintainState: maintainState ?? true,
        opaque: opaque ?? true,
        pageBuilder: pageBuilderProxy,
        reverseTransitionDuration:
            reverseTransitionDuration ?? const Duration(milliseconds: 300),
        settings: settings,
        transitionDuration:
            transitionDuration ?? const Duration(milliseconds: 300),
        transitionsBuilder: transitionsBuilder == null
            ? (BuildContext context, Animation<double> animation,
                Animation<double> secondaryAnimation, Widget child) {
                return child;
              }
            : transitionsBuilderProxy,
      );
    };
