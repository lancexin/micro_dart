// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:flutter/widgets.dart';
import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/framework.dart';
import 'dart:async';
import 'dart:collection';
import 'dart:developer';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/binding.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/inherited_model.dart';
import 'package:flutter/src/widgets/notification_listener.dart';
import 'package:flutter/src/widgets/widget_inspector.dart';

part '../proxy/proxy__package_flutter_src_widgets_framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/framework.dart',
  {
    'GlobalKey.': _GlobalKey__$,
    'StatelessWidget.': _StatelessWidget__$,
    'StatefulWidget.': _StatefulWidget__$,
    'State.': _State__$,
  },
  {},
  {
    'GlobalKey': m.ClassMirror(
      'GlobalKey',
      {'currentState': _GlobalKey_currentState$},
      {},
    ),
    'State': m.ClassMirror(
      'State',
      {
        'widget': _State_widget$,
        'context': _State_context$,
        'initState': _State_initState$,
        'setState': _State_setState$,
        'dispose': _State_dispose$,
      },
      {},
    ),
    'BuildContext': m.ClassMirror(
      'BuildContext',
      {
        'size': _BuildContext_size$,
        'findRenderObject': _BuildContext_findRenderObject$,
      },
      {},
    ),
  },
);
Function _GlobalKey_currentState$<T extends State<StatefulWidget>>(
  m.Scope scope$,
  GlobalKey<T> target$,
) =>
    () {
      return target$.currentState;
    };
Function _GlobalKey__$(m.Scope scope$) =>
    <T extends State<StatefulWidget>>({String? debugLabel}) {
      return GlobalKey<T>(debugLabel: debugLabel);
    };
Function _State_widget$<T extends StatefulWidget>(
  m.Scope scope$,
  State<T> target$,
) =>
    () {
      return target$.widget;
    };
Function _State_context$<T extends StatefulWidget>(
  m.Scope scope$,
  State<T> target$,
) =>
    () {
      return target$.context;
    };
Function _State_initState$<T extends StatefulWidget>(
  m.Scope scope$,
  State<T> target$,
) =>
    target$.initState;
Function _State_setState$(
  m.Scope scope$,
  State target$,
) =>
    <T extends StatefulWidget>(m.FunctionPointer fn) {
      void fnProxy() => scope$.engine.callFunctionPointer(
            scope$,
            fn,
            [],
            {},
          );
      target$.setState(fnProxy);
    };
Function _State_dispose$<T extends StatefulWidget>(
  m.Scope scope$,
  State<T> target$,
) =>
    target$.dispose;
Function _BuildContext_size$(
  m.Scope scope$,
  BuildContext target$,
) =>
    () {
      return target$.size;
    };
Function _BuildContext_findRenderObject$(
  m.Scope scope$,
  BuildContext target$,
) =>
    target$.findRenderObject;
