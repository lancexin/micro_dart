// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/dropdown.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_theme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/scrollbar.dart';
import 'package:flutter/src/material/shadows.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/dropdown.dart',
  {
    'DropdownMenuItem.': _DropdownMenuItem__$,
    'DropdownMenuItem.<CurveChoice>': _DropdownMenuItem__$,
    'DropdownButton.': _DropdownButton__$,
    'DropdownButton.<CurveChoice>': _DropdownButton__$,
  },
  {},
  {},
);
Function _DropdownMenuItem__$(m.Scope scope$) => ({
      Key? key,
      m.FunctionPointer? onTap,
      dynamic? value,
      bool? enabled,
      AlignmentGeometry? alignment,
      required Widget child,
    }) {
      void onTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTap!,
            [],
            {},
          );
      return DropdownMenuItem(
        alignment: alignment ?? AlignmentDirectional.centerStart,
        child: child,
        enabled: enabled ?? true,
        key: key,
        onTap: onTap == null ? null : onTapProxy,
        value: value,
      );
    };
Function _DropdownButton__$(m.Scope scope$) => ({
      Key? key,
      required List? items,
      m.FunctionPointer? selectedItemBuilder,
      dynamic? value,
      Widget? hint,
      Widget? disabledHint,
      required m.FunctionPointer? onChanged,
      m.FunctionPointer? onTap,
      int? elevation,
      TextStyle? style,
      Widget? underline,
      Widget? icon,
      Color? iconDisabledColor,
      Color? iconEnabledColor,
      double? iconSize,
      bool? isDense,
      bool? isExpanded,
      double? itemHeight,
      Color? focusColor,
      FocusNode? focusNode,
      bool? autofocus,
      Color? dropdownColor,
      double? menuMaxHeight,
      bool? enableFeedback,
      AlignmentGeometry? alignment,
      BorderRadius? borderRadius,
      EdgeInsetsGeometry? padding,
    }) {
      void onChangedProxy(dynamic onChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChanged!,
            [onChanged_value$],
            {},
          );
      void onTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTap!,
            [],
            {},
          );
      List<Widget> selectedItemBuilderProxy(
              BuildContext selectedItemBuilder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            selectedItemBuilder!,
            [selectedItemBuilder_context$],
            {},
          );
      return DropdownButton(
        alignment: alignment ?? AlignmentDirectional.centerStart,
        autofocus: autofocus ?? false,
        borderRadius: borderRadius,
        disabledHint: disabledHint,
        dropdownColor: dropdownColor,
        elevation: elevation ?? 8,
        enableFeedback: enableFeedback,
        focusColor: focusColor,
        focusNode: focusNode,
        hint: hint,
        icon: icon,
        iconDisabledColor: iconDisabledColor,
        iconEnabledColor: iconEnabledColor,
        iconSize: iconSize ?? 24.0,
        isDense: isDense ?? false,
        isExpanded: isExpanded ?? false,
        itemHeight: itemHeight ?? kMinInteractiveDimension,
        items: items == null ? null : List.from(items),
        key: key,
        menuMaxHeight: menuMaxHeight,
        onChanged: onChanged == null ? null : onChangedProxy,
        onTap: onTap == null ? null : onTapProxy,
        padding: padding,
        selectedItemBuilder:
            selectedItemBuilder == null ? null : selectedItemBuilderProxy,
        style: style,
        underline: underline,
        value: value,
      );
    };
