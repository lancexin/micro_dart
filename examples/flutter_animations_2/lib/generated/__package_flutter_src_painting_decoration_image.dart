// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/decoration_image.dart';
import 'dart:developer';
import 'dart:math';
import 'dart:ui' show FlutterView, Image;
import 'package:flutter/foundation.dart';
import 'package:flutter/scheduler.dart';
import 'package:vector_math/vector_math_64.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/painting/binding.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/painting/box_fit.dart';
import 'package:flutter/src/painting/debug.dart';
import 'package:flutter/src/painting/image_provider.dart';
import 'package:flutter/src/painting/image_stream.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/decoration_image.dart',
  {'DecorationImage.': _DecorationImage__$},
  {},
  {},
);
Function _DecorationImage__$(m.Scope scope$) => ({
      required ImageProvider<Object> image,
      m.FunctionPointer? onError,
      ColorFilter? colorFilter,
      BoxFit? fit,
      AlignmentGeometry? alignment,
      Rect? centerSlice,
      ImageRepeat? repeat,
      bool? matchTextDirection,
      double? scale,
      double? opacity,
      FilterQuality? filterQuality,
      bool? invertColors,
      bool? isAntiAlias,
    }) {
      void onErrorProxy(
        Object onError_exception$,
        StackTrace? onError_stackTrace$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onError!,
            [
              onError_exception$,
              onError_stackTrace$,
            ],
            {},
          );
      return DecorationImage(
        alignment: alignment ?? Alignment.center,
        centerSlice: centerSlice,
        colorFilter: colorFilter,
        filterQuality: filterQuality ?? FilterQuality.low,
        fit: fit,
        image: image,
        invertColors: invertColors ?? false,
        isAntiAlias: isAntiAlias ?? false,
        matchTextDirection: matchTextDirection ?? false,
        onError: onError == null ? null : onErrorProxy,
        opacity: opacity ?? 1.0,
        repeat: repeat ?? ImageRepeat.noRepeat,
        scale: scale ?? 1.0,
      );
    };
