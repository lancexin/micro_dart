// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/material_button.dart';
import 'dart:ui';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button.dart';
import 'package:flutter/src/material/button_theme.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/material_button.dart',
  {'MaterialButton.': _MaterialButton__$},
  {},
  {},
);
Function _MaterialButton__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer? onPressed,
      m.FunctionPointer? onLongPress,
      m.FunctionPointer? onHighlightChanged,
      MouseCursor? mouseCursor,
      ButtonTextTheme? textTheme,
      Color? textColor,
      Color? disabledTextColor,
      Color? color,
      Color? disabledColor,
      Color? focusColor,
      Color? hoverColor,
      Color? highlightColor,
      Color? splashColor,
      Brightness? colorBrightness,
      double? elevation,
      double? focusElevation,
      double? hoverElevation,
      double? highlightElevation,
      double? disabledElevation,
      EdgeInsetsGeometry? padding,
      VisualDensity? visualDensity,
      ShapeBorder? shape,
      Clip? clipBehavior,
      FocusNode? focusNode,
      bool? autofocus,
      MaterialTapTargetSize? materialTapTargetSize,
      Duration? animationDuration,
      double? minWidth,
      double? height,
      bool? enableFeedback,
      Widget? child,
    }) {
      void onHighlightChangedProxy(bool onHighlightChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onHighlightChanged!,
            [onHighlightChanged_value$],
            {},
          );
      void onLongPressProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onLongPress!,
            [],
            {},
          );
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return MaterialButton(
        animationDuration: animationDuration,
        autofocus: autofocus ?? false,
        child: child,
        clipBehavior: clipBehavior ?? Clip.none,
        color: color,
        colorBrightness: colorBrightness,
        disabledColor: disabledColor,
        disabledElevation: disabledElevation,
        disabledTextColor: disabledTextColor,
        elevation: elevation,
        enableFeedback: enableFeedback ?? true,
        focusColor: focusColor,
        focusElevation: focusElevation,
        focusNode: focusNode,
        height: height,
        highlightColor: highlightColor,
        highlightElevation: highlightElevation,
        hoverColor: hoverColor,
        hoverElevation: hoverElevation,
        key: key,
        materialTapTargetSize: materialTapTargetSize,
        minWidth: minWidth,
        mouseCursor: mouseCursor,
        onHighlightChanged:
            onHighlightChanged == null ? null : onHighlightChangedProxy,
        onLongPress: onLongPress == null ? null : onLongPressProxy,
        onPressed: onPressed == null ? null : onPressedProxy,
        padding: padding,
        shape: shape,
        splashColor: splashColor,
        textColor: textColor,
        textTheme: textTheme,
        visualDensity: visualDensity,
      );
    };
