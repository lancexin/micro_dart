// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/list_tile.dart';
import 'dart:math';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/divider.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icon_button_theme.dart';
import 'package:flutter/src/material/ink_decoration.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/list_tile_theme.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/list_tile.dart',
  {'ListTile.': _ListTile__$},
  {},
  {},
);
Function _ListTile__$(m.Scope scope$) => ({
      Key? key,
      Widget? leading,
      Widget? title,
      Widget? subtitle,
      Widget? trailing,
      bool? isThreeLine,
      bool? dense,
      VisualDensity? visualDensity,
      ShapeBorder? shape,
      ListTileStyle? style,
      Color? selectedColor,
      Color? iconColor,
      Color? textColor,
      TextStyle? titleTextStyle,
      TextStyle? subtitleTextStyle,
      TextStyle? leadingAndTrailingTextStyle,
      EdgeInsetsGeometry? contentPadding,
      bool? enabled,
      m.FunctionPointer? onTap,
      m.FunctionPointer? onLongPress,
      m.FunctionPointer? onFocusChange,
      MouseCursor? mouseCursor,
      bool? selected,
      Color? focusColor,
      Color? hoverColor,
      Color? splashColor,
      FocusNode? focusNode,
      bool? autofocus,
      Color? tileColor,
      Color? selectedTileColor,
      bool? enableFeedback,
      double? horizontalTitleGap,
      double? minVerticalPadding,
      double? minLeadingWidth,
      ListTileTitleAlignment? titleAlignment,
    }) {
      void onFocusChangeProxy(bool onFocusChange_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onFocusChange!,
            [onFocusChange_value$],
            {},
          );
      void onLongPressProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onLongPress!,
            [],
            {},
          );
      void onTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTap!,
            [],
            {},
          );
      return ListTile(
        autofocus: autofocus ?? false,
        contentPadding: contentPadding,
        dense: dense,
        enableFeedback: enableFeedback,
        enabled: enabled ?? true,
        focusColor: focusColor,
        focusNode: focusNode,
        horizontalTitleGap: horizontalTitleGap,
        hoverColor: hoverColor,
        iconColor: iconColor,
        isThreeLine: isThreeLine ?? false,
        key: key,
        leading: leading,
        leadingAndTrailingTextStyle: leadingAndTrailingTextStyle,
        minLeadingWidth: minLeadingWidth,
        minVerticalPadding: minVerticalPadding,
        mouseCursor: mouseCursor,
        onFocusChange: onFocusChange == null ? null : onFocusChangeProxy,
        onLongPress: onLongPress == null ? null : onLongPressProxy,
        onTap: onTap == null ? null : onTapProxy,
        selected: selected ?? false,
        selectedColor: selectedColor,
        selectedTileColor: selectedTileColor,
        shape: shape,
        splashColor: splashColor,
        style: style,
        subtitle: subtitle,
        subtitleTextStyle: subtitleTextStyle,
        textColor: textColor,
        tileColor: tileColor,
        title: title,
        titleAlignment: titleAlignment,
        titleTextStyle: titleTextStyle,
        trailing: trailing,
        visualDensity: visualDensity,
      );
    };
