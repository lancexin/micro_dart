// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/animation/animation.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/animation/tween.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/animation/animation.dart',
  {
    'AnimationStatus.completed': _AnimationStatus_completed$,
  },
  {},
  {
    'Animation': m.ClassMirror(
      'Animation',
      {
        'value': _Animation_value$,
        'addListener': _Animation_addListener$,
        'addStatusListener': _Animation_addStatusListener$,
        'drive': _Animation_drive$,
        'drive<Alignment>': _Animation_drive$,
      },
      {},
    )
  },
);
Function _Animation_value$<T>(
  m.Scope scope$,
  Animation<T> target$,
) =>
    () {
      return target$.value;
    };
Function _Animation_addListener$(
  m.Scope scope$,
  Animation target$,
) =>
    (m.FunctionPointer listener) {
      void listenerProxy() => scope$.engine.callFunctionPointer(
            scope$,
            listener,
            [],
            {},
          );
      target$.addListener(listenerProxy);
    };
Function _Animation_addStatusListener$(
  m.Scope scope$,
  Animation target$,
) =>
    (m.FunctionPointer listener) {
      void listenerProxy(AnimationStatus listener_status$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            listener,
            [listener_status$],
            {},
          );
      target$.addStatusListener(listenerProxy);
    };
Function _Animation_drive$<T, U>(
  m.Scope scope$,
  Animation<T> target$,
) =>
    target$.drive<U>;
Function _AnimationStatus_completed$(m.Scope scope$) =>
    () => AnimationStatus.completed;
