// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/animated_cross_fade.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/animated_size.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/focus_scope.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/ticker_provider.dart';
import 'package:flutter/src/widgets/transitions.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/animated_cross_fade.dart',
  {
    'AnimatedCrossFade.': _AnimatedCrossFade__$,
    'CrossFadeState.showFirst': _CrossFadeState_showFirst$,
    'CrossFadeState.showSecond': _CrossFadeState_showSecond$,
  },
  {},
  {},
);
Function _AnimatedCrossFade__$(m.Scope scope$) => ({
      Key? key,
      required Widget firstChild,
      required Widget secondChild,
      Curve? firstCurve,
      Curve? secondCurve,
      Curve? sizeCurve,
      AlignmentGeometry? alignment,
      required CrossFadeState crossFadeState,
      required Duration duration,
      Duration? reverseDuration,
      m.FunctionPointer? layoutBuilder,
      bool? excludeBottomFocus,
    }) {
      Widget layoutBuilderProxy(
        Widget layoutBuilder_topChild$,
        Key layoutBuilder_topChildKey$,
        Widget layoutBuilder_bottomChild$,
        Key layoutBuilder_bottomChildKey$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            layoutBuilder!,
            [
              layoutBuilder_topChild$,
              layoutBuilder_topChildKey$,
              layoutBuilder_bottomChild$,
              layoutBuilder_bottomChildKey$,
            ],
            {},
          );
      return AnimatedCrossFade(
        alignment: alignment ?? Alignment.topCenter,
        crossFadeState: crossFadeState,
        duration: duration,
        excludeBottomFocus: excludeBottomFocus ?? true,
        firstChild: firstChild,
        firstCurve: firstCurve ?? Curves.linear,
        key: key,
        layoutBuilder: layoutBuilder == null
            ? AnimatedCrossFade.defaultLayoutBuilder
            : layoutBuilderProxy,
        reverseDuration: reverseDuration,
        secondChild: secondChild,
        secondCurve: secondCurve ?? Curves.linear,
        sizeCurve: sizeCurve ?? Curves.linear,
      );
    };
Function _CrossFadeState_showFirst$(m.Scope scope$) =>
    () => CrossFadeState.showFirst;
Function _CrossFadeState_showSecond$(m.Scope scope$) =>
    () => CrossFadeState.showSecond;
