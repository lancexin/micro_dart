// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'dart:ui';
import 'dart:async';
import 'dart:collection';
import 'dart:developer';
import 'dart:io';
import 'dart:isolate' show SendPort;
import 'dart:math';
import 'dart:nativewrappers';
import 'dart:typed_data';

const libraryMirror = m.LibraryMirror(
  'dart:ui',
  {
    'Offset.zero': _Offset_zero$,
    'Offset.': _Offset__$,
    'Color.': _Color__$,
  },
  {},
  {
    'Offset': m.ClassMirror(
      'Offset',
      {
        'dx': _Offset_dx$,
        'dy': _Offset_dy$,
        'distance': _Offset_distance$,
        '&': _Offset_bit_and$$,
      },
      {},
    ),
    'Size': m.ClassMirror(
      'Size',
      {
        'width': _Size_width$,
        'height': _Size_height$,
      },
      {},
    ),
  },
);
Function _Offset_zero$(m.Scope scope$) => () => Offset.zero;
Function _Offset_dx$(
  m.Scope scope$,
  Offset target$,
) =>
    () {
      return target$.dx;
    };
Function _Offset_dy$(
  m.Scope scope$,
  Offset target$,
) =>
    () {
      return target$.dy;
    };
Function _Offset_distance$(
  m.Scope scope$,
  Offset target$,
) =>
    () {
      return target$.distance;
    };
Function _Offset__$(m.Scope scope$) => (
      double dx,
      double dy,
    ) {
      return Offset(
        dx,
        dy,
      );
    };
Function _Offset_bit_and$$(
  m.Scope scope$,
  Offset target$,
) =>
    (Size other$) => target$ & other$;
Function _Size_width$(
  m.Scope scope$,
  Size target$,
) =>
    () {
      return target$.width;
    };
Function _Size_height$(
  m.Scope scope$,
  Size target$,
) =>
    () {
      return target$.height;
    };
Function _Color__$(m.Scope scope$) => (int value) {
      return Color(value);
    };
