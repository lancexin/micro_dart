// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/scaffold.dart';
import 'dart:async';
import 'dart:collection';
import 'dart:math';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart' show DragStartBehavior;
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/app_bar.dart';
import 'package:flutter/src/material/banner.dart';
import 'package:flutter/src/material/banner_theme.dart';
import 'package:flutter/src/material/bottom_sheet.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/curves.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/divider.dart';
import 'package:flutter/src/material/drawer.dart';
import 'package:flutter/src/material/flexible_space_bar.dart';
import 'package:flutter/src/material/floating_action_button.dart';
import 'package:flutter/src/material/floating_action_button_location.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/snack_bar.dart';
import 'package:flutter/src/material/snack_bar_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/scaffold.dart',
  {'Scaffold.': _Scaffold__$},
  {},
  {},
);
Function _Scaffold__$(m.Scope scope$) => ({
      Key? key,
      PreferredSizeWidget? appBar,
      Widget? body,
      Widget? floatingActionButton,
      FloatingActionButtonLocation? floatingActionButtonLocation,
      FloatingActionButtonAnimator? floatingActionButtonAnimator,
      List? persistentFooterButtons,
      AlignmentDirectional? persistentFooterAlignment,
      Widget? drawer,
      m.FunctionPointer? onDrawerChanged,
      Widget? endDrawer,
      m.FunctionPointer? onEndDrawerChanged,
      Widget? bottomNavigationBar,
      Widget? bottomSheet,
      Color? backgroundColor,
      bool? resizeToAvoidBottomInset,
      bool? primary,
      DragStartBehavior? drawerDragStartBehavior,
      bool? extendBody,
      bool? extendBodyBehindAppBar,
      Color? drawerScrimColor,
      double? drawerEdgeDragWidth,
      bool? drawerEnableOpenDragGesture,
      bool? endDrawerEnableOpenDragGesture,
      String? restorationId,
    }) {
      void onDrawerChangedProxy(bool onDrawerChanged_isOpened$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onDrawerChanged!,
            [onDrawerChanged_isOpened$],
            {},
          );
      void onEndDrawerChangedProxy(bool onEndDrawerChanged_isOpened$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onEndDrawerChanged!,
            [onEndDrawerChanged_isOpened$],
            {},
          );
      return Scaffold(
        appBar: appBar,
        backgroundColor: backgroundColor,
        body: body,
        bottomNavigationBar: bottomNavigationBar,
        bottomSheet: bottomSheet,
        drawer: drawer,
        drawerDragStartBehavior:
            drawerDragStartBehavior ?? DragStartBehavior.start,
        drawerEdgeDragWidth: drawerEdgeDragWidth,
        drawerEnableOpenDragGesture: drawerEnableOpenDragGesture ?? true,
        drawerScrimColor: drawerScrimColor,
        endDrawer: endDrawer,
        endDrawerEnableOpenDragGesture: endDrawerEnableOpenDragGesture ?? true,
        extendBody: extendBody ?? false,
        extendBodyBehindAppBar: extendBodyBehindAppBar ?? false,
        floatingActionButton: floatingActionButton,
        floatingActionButtonAnimator: floatingActionButtonAnimator,
        floatingActionButtonLocation: floatingActionButtonLocation,
        key: key,
        onDrawerChanged: onDrawerChanged == null ? null : onDrawerChangedProxy,
        onEndDrawerChanged:
            onEndDrawerChanged == null ? null : onEndDrawerChangedProxy,
        persistentFooterAlignment:
            persistentFooterAlignment ?? AlignmentDirectional.centerEnd,
        persistentFooterButtons: persistentFooterButtons == null
            ? null
            : List.from(persistentFooterButtons),
        primary: primary ?? true,
        resizeToAvoidBottomInset: resizeToAvoidBottomInset,
        restorationId: restorationId,
      );
    };
