// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/animation/curves.dart';
import 'dart:math';
import 'dart:ui';
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/animation/curves.dart',
  {
    'Interval.': _Interval__$,
    'Curves.ease': _Curves_ease$,
    'Curves.easeIn': _Curves_easeIn$,
    'Curves.easeInCubic': _Curves_easeInCubic$,
    'Curves.easeInQuart': _Curves_easeInQuart$,
    'Curves.easeInExpo': _Curves_easeInExpo$,
    'Curves.easeInCirc': _Curves_easeInCirc$,
    'Curves.easeOut': _Curves_easeOut$,
    'Curves.easeOutCubic': _Curves_easeOutCubic$,
    'Curves.easeOutQuart': _Curves_easeOutQuart$,
    'Curves.easeOutExpo': _Curves_easeOutExpo$,
    'Curves.easeOutCirc': _Curves_easeOutCirc$,
    'Curves.easeInOutCubic': _Curves_easeInOutCubic$,
    'Curves.bounceIn': _Curves_bounceIn$,
    'Curves.bounceOut': _Curves_bounceOut$,
    'Curves.elasticIn': _Curves_elasticIn$,
    'Curves.elasticOut': _Curves_elasticOut$,
  },
  {},
  {
    'Curve': m.ClassMirror(
      'Curve',
      {'transform': _Curve_transform$},
      {},
    )
  },
);
Function _Curve_transform$(
  m.Scope scope$,
  Curve target$,
) =>
    target$.transform;
Function _Interval__$(m.Scope scope$) => (
      double begin,
      double end, {
      Curve? curve,
    }) {
      return Interval(
        begin,
        end,
        curve: curve ?? Curves.linear,
      );
    };
Function _Curves_ease$(m.Scope scope$) => () => Curves.ease;
Function _Curves_easeIn$(m.Scope scope$) => () => Curves.easeIn;
Function _Curves_easeInCubic$(m.Scope scope$) => () => Curves.easeInCubic;
Function _Curves_easeInQuart$(m.Scope scope$) => () => Curves.easeInQuart;
Function _Curves_easeInExpo$(m.Scope scope$) => () => Curves.easeInExpo;
Function _Curves_easeInCirc$(m.Scope scope$) => () => Curves.easeInCirc;
Function _Curves_easeOut$(m.Scope scope$) => () => Curves.easeOut;
Function _Curves_easeOutCubic$(m.Scope scope$) => () => Curves.easeOutCubic;
Function _Curves_easeOutQuart$(m.Scope scope$) => () => Curves.easeOutQuart;
Function _Curves_easeOutExpo$(m.Scope scope$) => () => Curves.easeOutExpo;
Function _Curves_easeOutCirc$(m.Scope scope$) => () => Curves.easeOutCirc;
Function _Curves_easeInOutCubic$(m.Scope scope$) => () => Curves.easeInOutCubic;
Function _Curves_bounceIn$(m.Scope scope$) => () => Curves.bounceIn;
Function _Curves_bounceOut$(m.Scope scope$) => () => Curves.bounceOut;
Function _Curves_elasticIn$(m.Scope scope$) => () => Curves.elasticIn;
Function _Curves_elasticOut$(m.Scope scope$) => () => Curves.elasticOut;
