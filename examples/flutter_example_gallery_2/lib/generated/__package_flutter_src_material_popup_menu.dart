// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/popup_menu.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/divider.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/popup_menu_theme.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/tooltip.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/popup_menu.dart',
  {
    'PopupMenuDivider.': _PopupMenuDivider__$,
    'PopupMenuItem.': _PopupMenuItem__$,
    'CheckedPopupMenuItem.': _CheckedPopupMenuItem__$,
    'PopupMenuButton.': _PopupMenuButton__$,
  },
  {},
  {},
);
Function _PopupMenuDivider__$(m.Scope scope$) => ({
      Key? key,
      double? height,
    }) {
      return PopupMenuDivider(
        height: height ?? 16.0,
        key: key,
      );
    };
Function _PopupMenuItem__$(m.Scope scope$) => ({
      Key? key,
      dynamic? value,
      m.FunctionPointer? onTap,
      bool? enabled,
      double? height,
      EdgeInsets? padding,
      TextStyle? textStyle,
      MaterialStateProperty<TextStyle>? labelTextStyle,
      MouseCursor? mouseCursor,
      required Widget? child,
    }) {
      void onTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTap!,
            [],
            {},
          );
      return PopupMenuItem(
        child: child,
        enabled: enabled ?? true,
        height: height ?? kMinInteractiveDimension,
        key: key,
        labelTextStyle: labelTextStyle,
        mouseCursor: mouseCursor,
        onTap: onTap == null ? null : onTapProxy,
        padding: padding,
        textStyle: textStyle,
        value: value,
      );
    };
Function _CheckedPopupMenuItem__$(m.Scope scope$) => ({
      Key? key,
      dynamic? value,
      bool? checked,
      bool? enabled,
      EdgeInsets? padding,
      double? height,
      MouseCursor? mouseCursor,
      Widget? child,
    }) {
      return CheckedPopupMenuItem(
        checked: checked ?? false,
        child: child,
        enabled: enabled ?? true,
        height: height ?? kMinInteractiveDimension,
        key: key,
        mouseCursor: mouseCursor,
        padding: padding,
        value: value,
      );
    };
Function _PopupMenuButton__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer itemBuilder,
      dynamic? initialValue,
      m.FunctionPointer? onOpened,
      m.FunctionPointer? onSelected,
      m.FunctionPointer? onCanceled,
      String? tooltip,
      double? elevation,
      Color? shadowColor,
      Color? surfaceTintColor,
      EdgeInsetsGeometry? padding,
      Widget? child,
      double? splashRadius,
      Widget? icon,
      double? iconSize,
      Offset? offset,
      bool? enabled,
      ShapeBorder? shape,
      Color? color,
      bool? enableFeedback,
      BoxConstraints? constraints,
      PopupMenuPosition? position,
      Clip? clipBehavior,
    }) {
      List<PopupMenuEntry> itemBuilderProxy(
              BuildContext itemBuilder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            itemBuilder,
            [itemBuilder_context$],
            {},
          );
      void onCanceledProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onCanceled!,
            [],
            {},
          );
      void onOpenedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onOpened!,
            [],
            {},
          );
      void onSelectedProxy(dynamic onSelected_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSelected!,
            [onSelected_value$],
            {},
          );
      return PopupMenuButton(
        child: child,
        clipBehavior: clipBehavior ?? Clip.none,
        color: color,
        constraints: constraints,
        elevation: elevation,
        enableFeedback: enableFeedback,
        enabled: enabled ?? true,
        icon: icon,
        iconSize: iconSize,
        initialValue: initialValue,
        itemBuilder: itemBuilderProxy,
        key: key,
        offset: offset ?? Offset.zero,
        onCanceled: onCanceled == null ? null : onCanceledProxy,
        onOpened: onOpened == null ? null : onOpenedProxy,
        onSelected: onSelected == null ? null : onSelectedProxy,
        padding: padding ?? const EdgeInsets.all(8.0),
        position: position,
        shadowColor: shadowColor,
        shape: shape,
        splashRadius: splashRadius,
        surfaceTintColor: surfaceTintColor,
        tooltip: tooltip,
      );
    };
