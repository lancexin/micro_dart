// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/dismissible.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/src/widgets/automatic_keep_alive.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/gesture_detector.dart';
import 'package:flutter/src/widgets/ticker_provider.dart';
import 'package:flutter/src/widgets/transitions.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/dismissible.dart',
  {'Dismissible.': _Dismissible__$},
  {},
  {},
);
Function _Dismissible__$(m.Scope scope$) => ({
      required Key key,
      required Widget child,
      Widget? background,
      Widget? secondaryBackground,
      m.FunctionPointer? confirmDismiss,
      m.FunctionPointer? onResize,
      m.FunctionPointer? onUpdate,
      m.FunctionPointer? onDismissed,
      DismissDirection? direction,
      Duration? resizeDuration,
      Map? dismissThresholds,
      Duration? movementDuration,
      double? crossAxisEndOffset,
      DragStartBehavior? dragStartBehavior,
      HitTestBehavior? behavior,
    }) {
      Future<bool> confirmDismissProxy(
              DismissDirection confirmDismiss_direction$) async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            confirmDismiss!,
            [confirmDismiss_direction$],
            {},
          );
      void onDismissedProxy(DismissDirection onDismissed_direction$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onDismissed!,
            [onDismissed_direction$],
            {},
          );
      void onResizeProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onResize!,
            [],
            {},
          );
      void onUpdateProxy(DismissUpdateDetails onUpdate_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onUpdate!,
            [onUpdate_details$],
            {},
          );
      return Dismissible(
        background: background,
        behavior: behavior ?? HitTestBehavior.opaque,
        child: child,
        confirmDismiss: confirmDismiss == null ? null : confirmDismissProxy,
        crossAxisEndOffset: crossAxisEndOffset ?? 0.0,
        direction: direction ?? DismissDirection.horizontal,
        dismissThresholds: dismissThresholds == null
            ? const <DismissDirection, double>{}
            : Map.from(dismissThresholds),
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        key: key,
        movementDuration: movementDuration ?? const Duration(milliseconds: 200),
        onDismissed: onDismissed == null ? null : onDismissedProxy,
        onResize: onResize == null ? null : onResizeProxy,
        onUpdate: onUpdate == null ? null : onUpdateProxy,
        resizeDuration: resizeDuration ?? const Duration(milliseconds: 300),
        secondaryBackground: secondaryBackground,
      );
    };
