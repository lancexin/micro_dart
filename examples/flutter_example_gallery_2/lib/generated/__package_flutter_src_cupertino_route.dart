// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/route.dart';
import 'dart:math';
import 'dart:ui' show ImageFilter, lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/interface_level.dart';
import 'package:flutter/src/cupertino/localizations.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/route.dart',
  {
    'CupertinoPageRoute.': _CupertinoPageRoute__$,
    'CupertinoModalPopupRoute.': _CupertinoModalPopupRoute__$,
    'CupertinoDialogRoute.': _CupertinoDialogRoute__$,
    'showCupertinoModalPopup': _showCupertinoModalPopup$,
  },
  {},
  {},
);
Function _CupertinoPageRoute__$(m.Scope scope$) => ({
      required m.FunctionPointer builder,
      String? title,
      RouteSettings? settings,
      bool? maintainState,
      bool? fullscreenDialog,
      bool? allowSnapshotting,
    }) {
      Widget builderProxy(BuildContext builder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [builder_context$],
            {},
          );
      return CupertinoPageRoute(
        allowSnapshotting: allowSnapshotting ?? true,
        builder: builderProxy,
        fullscreenDialog: fullscreenDialog ?? false,
        maintainState: maintainState ?? true,
        settings: settings,
        title: title,
      );
    };
Function _CupertinoModalPopupRoute__$(m.Scope scope$) => ({
      required m.FunctionPointer builder,
      String? barrierLabel,
      Color? barrierColor,
      bool? barrierDismissible,
      bool? semanticsDismissible,
      ImageFilter? filter,
      RouteSettings? settings,
      Offset? anchorPoint,
    }) {
      Widget builderProxy(BuildContext builder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [builder_context$],
            {},
          );
      return CupertinoModalPopupRoute(
        anchorPoint: anchorPoint,
        barrierColor: barrierColor ?? kCupertinoModalBarrierColor,
        barrierDismissible: barrierDismissible ?? true,
        barrierLabel: barrierLabel ?? 'Dismiss',
        builder: builderProxy,
        filter: filter,
        semanticsDismissible: semanticsDismissible ?? false,
        settings: settings,
      );
    };
Function _CupertinoDialogRoute__$(m.Scope scope$) => ({
      required m.FunctionPointer builder,
      required BuildContext context,
      bool? barrierDismissible,
      Color? barrierColor,
      String? barrierLabel,
      Duration? transitionDuration,
      m.FunctionPointer? transitionBuilder,
      RouteSettings? settings,
      Offset? anchorPoint,
    }) {
      Widget builderProxy(BuildContext builder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [builder_context$],
            {},
          );
      Widget transitionBuilderProxy(
        BuildContext transitionBuilder_context$,
        Animation<double> transitionBuilder_animation$,
        Animation<double> transitionBuilder_secondaryAnimation$,
        Widget transitionBuilder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            transitionBuilder!,
            [
              transitionBuilder_context$,
              transitionBuilder_animation$,
              transitionBuilder_secondaryAnimation$,
              transitionBuilder_child$,
            ],
            {},
          );
      return CupertinoDialogRoute(
        anchorPoint: anchorPoint,
        barrierColor: barrierColor,
        barrierDismissible: barrierDismissible ?? true,
        barrierLabel: barrierLabel,
        builder: builderProxy,
        context: context,
        settings: settings,
        transitionBuilder: transitionBuilder == null
            ? (BuildContext context, Animation<double> animation,
                Animation<double> secondaryAnimation, Widget child) {
                final CurvedAnimation fadeAnimation = CurvedAnimation(
                  parent: animation,
                  curve: Curves.easeInOut,
                );
                if (animation.status == AnimationStatus.reverse) {
                  return FadeTransition(
                    opacity: fadeAnimation,
                    child: child,
                  );
                }
                return FadeTransition(
                  opacity: fadeAnimation,
                  child: ScaleTransition(
                    scale: animation.drive(Tween<double>(begin: 1.3, end: 1.0)),
                    child: child,
                  ),
                );
              }
            : transitionBuilderProxy,
        transitionDuration:
            transitionDuration ?? const Duration(milliseconds: 250),
      );
    };
Function _showCupertinoModalPopup$(m.Scope scope$) => ({
      required BuildContext context,
      required m.FunctionPointer builder,
      ImageFilter? filter,
      Color? barrierColor,
      bool? barrierDismissible,
      bool? useRootNavigator,
      bool? semanticsDismissible,
      RouteSettings? routeSettings,
      Offset? anchorPoint,
    }) {
      Widget builderProxy(BuildContext builder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [builder_context$],
            {},
          );
      return showCupertinoModalPopup(
        anchorPoint: anchorPoint,
        barrierColor: barrierColor ?? kCupertinoModalBarrierColor,
        barrierDismissible: barrierDismissible ?? true,
        builder: builderProxy,
        context: context,
        filter: filter,
        routeSettings: routeSettings,
        semanticsDismissible: semanticsDismissible ?? false,
        useRootNavigator: useRootNavigator ?? true,
      );
    };
