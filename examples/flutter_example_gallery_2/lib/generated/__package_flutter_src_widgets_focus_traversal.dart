// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/focus_traversal.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/widgets/actions.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/focus_scope.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/scroll_position.dart';
import 'package:flutter/src/widgets/scrollable.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/focus_traversal.dart',
  {
    'WidgetOrderTraversalPolicy.': _WidgetOrderTraversalPolicy__$,
    'ReadingOrderTraversalPolicy.': _ReadingOrderTraversalPolicy__$,
    'NumericFocusOrder.': _NumericFocusOrder__$,
    'OrderedTraversalPolicy.': _OrderedTraversalPolicy__$,
    'FocusTraversalOrder.': _FocusTraversalOrder__$,
    'FocusTraversalGroup.': _FocusTraversalGroup__$,
  },
  {},
  {},
);
Function _WidgetOrderTraversalPolicy__$(m.Scope scope$) => () {
      return WidgetOrderTraversalPolicy();
    };
Function _ReadingOrderTraversalPolicy__$(m.Scope scope$) => () {
      return ReadingOrderTraversalPolicy();
    };
Function _NumericFocusOrder__$(m.Scope scope$) => (double order) {
      return NumericFocusOrder(order);
    };
Function _OrderedTraversalPolicy__$(m.Scope scope$) =>
    ({FocusTraversalPolicy? secondary}) {
      return OrderedTraversalPolicy(secondary: secondary);
    };
Function _FocusTraversalOrder__$(m.Scope scope$) => ({
      Key? key,
      required FocusOrder order,
      required Widget child,
    }) {
      return FocusTraversalOrder(
        child: child,
        key: key,
        order: order,
      );
    };
Function _FocusTraversalGroup__$(m.Scope scope$) => ({
      Key? key,
      FocusTraversalPolicy? policy,
      bool? descendantsAreFocusable,
      bool? descendantsAreTraversable,
      required Widget child,
    }) {
      return FocusTraversalGroup(
        child: child,
        descendantsAreFocusable: descendantsAreFocusable ?? true,
        descendantsAreTraversable: descendantsAreTraversable ?? true,
        key: key,
        policy: policy,
      );
    };
