// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/text_input.dart';
import 'dart:async';
import 'dart:io' show Platform;
import 'dart:ui' show FontWeight, Offset, Rect, Size, TextAlign, TextDirection;
import 'package:flutter/foundation.dart';
import 'package:vector_math/vector_math_64.dart' show Matrix4;
import 'package:flutter/src/services/autofill.dart';
import 'package:flutter/src/services/clipboard.dart' show Clipboard;
import 'package:flutter/src/services/keyboard_inserted_content.dart';
import 'package:flutter/src/services/message_codec.dart';
import 'package:flutter/src/services/platform_channel.dart';
import 'package:flutter/src/services/system_channels.dart';
import 'package:flutter/src/services/text_editing.dart';
import 'package:flutter/src/services/text_editing_delta.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/text_input.dart',
  {
    'TextInputType.number': _TextInputType_number$,
    'TextInputType.phone': _TextInputType_phone$,
    'TextInputType.emailAddress': _TextInputType_emailAddress$,
    'TextEditingValue.': _TextEditingValue__$,
  },
  {},
  {
    'TextEditingValue': m.ClassMirror(
      'TextEditingValue',
      {
        'text': _TextEditingValue_text$,
        'selection': _TextEditingValue_selection$,
      },
      {},
    )
  },
);
Function _TextInputType_number$(m.Scope scope$) => () => TextInputType.number;
Function _TextInputType_phone$(m.Scope scope$) => () => TextInputType.phone;
Function _TextInputType_emailAddress$(m.Scope scope$) =>
    () => TextInputType.emailAddress;
Function _TextEditingValue_text$(
  m.Scope scope$,
  TextEditingValue target$,
) =>
    () {
      return target$.text;
    };
Function _TextEditingValue_selection$(
  m.Scope scope$,
  TextEditingValue target$,
) =>
    () {
      return target$.selection;
    };
Function _TextEditingValue__$(m.Scope scope$) => ({
      String? text,
      TextSelection? selection,
      TextRange? composing,
    }) {
      return TextEditingValue(
        composing: composing ?? TextRange.empty,
        selection: selection ?? const TextSelection.collapsed(offset: -1),
        text: text ?? '',
      );
    };
