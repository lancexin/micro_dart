// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/text_painter.dart';
import 'dart:math' show max, min;
import 'dart:ui'
    show
        BoxHeightStyle,
        BoxWidthStyle,
        LineMetrics,
        Paragraph,
        ParagraphBuilder,
        ParagraphConstraints,
        ParagraphStyle,
        PlaceholderAlignment,
        TextHeightBehavior,
        TextStyle;
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/painting/inline_span.dart';
import 'package:flutter/src/painting/placeholder_span.dart';
import 'package:flutter/src/painting/strut_style.dart';
import 'package:flutter/src/painting/text_span.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/text_painter.dart',
  {
    'TextPainter.': _TextPainter__$,
    'TextOverflow.visible': _TextOverflow_visible$,
    'TextOverflow.ellipsis': _TextOverflow_ellipsis$,
  },
  {},
  {
    'TextPainter': m.ClassMirror(
      'TextPainter',
      {
        'width': _TextPainter_width$,
        'height': _TextPainter_height$,
        'layout': _TextPainter_layout$,
        'paint': _TextPainter_paint$,
      },
      {},
    )
  },
);
Function _TextPainter_width$(
  m.Scope scope$,
  TextPainter target$,
) =>
    () {
      return target$.width;
    };
Function _TextPainter_height$(
  m.Scope scope$,
  TextPainter target$,
) =>
    () {
      return target$.height;
    };
Function _TextPainter__$(m.Scope scope$) => ({
      InlineSpan? text,
      TextAlign? textAlign,
      TextDirection? textDirection,
      double? textScaleFactor,
      int? maxLines,
      String? ellipsis,
      Locale? locale,
      StrutStyle? strutStyle,
      TextWidthBasis? textWidthBasis,
      TextHeightBehavior? textHeightBehavior,
    }) {
      return TextPainter(
        ellipsis: ellipsis,
        locale: locale,
        maxLines: maxLines,
        strutStyle: strutStyle,
        text: text,
        textAlign: textAlign ?? TextAlign.start,
        textDirection: textDirection,
        textHeightBehavior: textHeightBehavior,
        textScaleFactor: textScaleFactor ?? 1.0,
        textWidthBasis: textWidthBasis ?? TextWidthBasis.parent,
      );
    };
Function _TextPainter_layout$(
  m.Scope scope$,
  TextPainter target$,
) =>
    target$.layout;
Function _TextPainter_paint$(
  m.Scope scope$,
  TextPainter target$,
) =>
    target$.paint;
Function _TextOverflow_visible$(m.Scope scope$) => () => TextOverflow.visible;
Function _TextOverflow_ellipsis$(m.Scope scope$) => () => TextOverflow.ellipsis;
