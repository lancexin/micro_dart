// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/tab_controller.dart';
import 'dart:math';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/constants.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/tab_controller.dart',
  {
    'TabController.': _TabController__$,
    'DefaultTabController.': _DefaultTabController__$,
  },
  {},
  {
    'TabController': m.ClassMirror(
      'TabController',
      {
        'animation': _TabController_animation$,
        'index': _TabController_index$,
        'animateTo': _TabController_animateTo$,
        'dispose': _TabController_dispose$,
      },
      {'index': _TabController_index_set$},
    )
  },
);
Function _TabController_animation$(
  m.Scope scope$,
  TabController target$,
) =>
    () {
      return target$.animation;
    };
Function _TabController_index$(
  m.Scope scope$,
  TabController target$,
) =>
    () {
      return target$.index;
    };
void _TabController_index_set$(
  m.Scope scope$,
  TabController target$,
) =>
    (dynamic other$) {
      target$.index = other$;
    };
Function _TabController__$(m.Scope scope$) => ({
      int? initialIndex,
      Duration? animationDuration,
      required int length,
      required TickerProvider vsync,
    }) {
      return TabController(
        animationDuration: animationDuration,
        initialIndex: initialIndex ?? 0,
        length: length,
        vsync: vsync,
      );
    };
Function _TabController_animateTo$(
  m.Scope scope$,
  TabController target$,
) =>
    target$.animateTo;
Function _TabController_dispose$(
  m.Scope scope$,
  TabController target$,
) =>
    target$.dispose;
Function _DefaultTabController__$(m.Scope scope$) => ({
      Key? key,
      required int length,
      int? initialIndex,
      required Widget child,
      Duration? animationDuration,
    }) {
      return DefaultTabController(
        animationDuration: animationDuration,
        child: child,
        initialIndex: initialIndex ?? 0,
        key: key,
        length: length,
      );
    };
