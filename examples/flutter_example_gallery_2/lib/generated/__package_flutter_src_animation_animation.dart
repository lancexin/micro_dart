// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/animation/animation.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/animation/tween.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/animation/animation.dart',
  {},
  {},
  {
    'Animation': m.ClassMirror(
      'Animation',
      {
        '#as': Animation_as$,
        'value': _Animation_value$,
        'isDismissed': _Animation_isDismissed$,
        'isCompleted': _Animation_isCompleted$,
        'addListener': _Animation_addListener$,
        'removeListener': _Animation_removeListener$,
        'drive': _Animation_drive$,
        'drive<double>': _Animation_drive$,
      },
      {},
    )
  },
);
Function Animation_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Animation<T>;
Function _Animation_value$<T>(
  m.Scope scope$,
  Animation<T> target$,
) =>
    () {
      return target$.value;
    };
Function _Animation_isDismissed$<T>(
  m.Scope scope$,
  Animation<T> target$,
) =>
    () {
      return target$.isDismissed;
    };
Function _Animation_isCompleted$<T>(
  m.Scope scope$,
  Animation<T> target$,
) =>
    () {
      return target$.isCompleted;
    };
Function _Animation_addListener$(
  m.Scope scope$,
  Animation target$,
) =>
    (m.FunctionPointer listener) {
      void listenerProxy() => scope$.engine.callFunctionPointer(
            scope$,
            listener,
            [],
            {},
          );
      target$.addListener(listenerProxy);
    };
Function _Animation_removeListener$(
  m.Scope scope$,
  Animation target$,
) =>
    (m.FunctionPointer listener) {
      void listenerProxy() => scope$.engine.callFunctionPointer(
            scope$,
            listener,
            [],
            {},
          );
      target$.removeListener(listenerProxy);
    };
Function _Animation_drive$<T, U>(
  m.Scope scope$,
  Animation<T> target$,
) =>
    target$.drive<U>;
