// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/navigation_rail_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/navigation_rail.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/navigation_rail_theme.dart',
  {'NavigationRailThemeData.': _NavigationRailThemeData__$},
  {},
  {
    'NavigationRailThemeData': m.ClassMirror(
      'NavigationRailThemeData',
      {
        'backgroundColor': _NavigationRailThemeData_backgroundColor$,
        'unselectedLabelTextStyle':
            _NavigationRailThemeData_unselectedLabelTextStyle$,
      },
      {},
    )
  },
);
Function _NavigationRailThemeData_backgroundColor$(
  m.Scope scope$,
  NavigationRailThemeData target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _NavigationRailThemeData_unselectedLabelTextStyle$(
  m.Scope scope$,
  NavigationRailThemeData target$,
) =>
    () {
      return target$.unselectedLabelTextStyle;
    };
Function _NavigationRailThemeData__$(m.Scope scope$) => ({
      Color? backgroundColor,
      double? elevation,
      TextStyle? unselectedLabelTextStyle,
      TextStyle? selectedLabelTextStyle,
      IconThemeData? unselectedIconTheme,
      IconThemeData? selectedIconTheme,
      double? groupAlignment,
      NavigationRailLabelType? labelType,
      bool? useIndicator,
      Color? indicatorColor,
      ShapeBorder? indicatorShape,
      double? minWidth,
      double? minExtendedWidth,
    }) {
      return NavigationRailThemeData(
        backgroundColor: backgroundColor,
        elevation: elevation,
        groupAlignment: groupAlignment,
        indicatorColor: indicatorColor,
        indicatorShape: indicatorShape,
        labelType: labelType,
        minExtendedWidth: minExtendedWidth,
        minWidth: minWidth,
        selectedIconTheme: selectedIconTheme,
        selectedLabelTextStyle: selectedLabelTextStyle,
        unselectedIconTheme: unselectedIconTheme,
        unselectedLabelTextStyle: unselectedLabelTextStyle,
        useIndicator: useIndicator,
      );
    };
