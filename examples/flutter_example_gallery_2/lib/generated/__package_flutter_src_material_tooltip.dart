// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/tooltip.dart';
import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/feedback.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/tooltip_theme.dart';
import 'package:flutter/src/material/tooltip_visibility.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/tooltip.dart',
  {'Tooltip.': _Tooltip__$},
  {},
  {},
);
Function _Tooltip__$(m.Scope scope$) => ({
      Key? key,
      String? message,
      InlineSpan? richMessage,
      double? height,
      EdgeInsetsGeometry? padding,
      EdgeInsetsGeometry? margin,
      double? verticalOffset,
      bool? preferBelow,
      bool? excludeFromSemantics,
      Decoration? decoration,
      TextStyle? textStyle,
      TextAlign? textAlign,
      Duration? waitDuration,
      Duration? showDuration,
      TooltipTriggerMode? triggerMode,
      bool? enableFeedback,
      m.FunctionPointer? onTriggered,
      Widget? child,
    }) {
      void onTriggeredProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTriggered!,
            [],
            {},
          );
      return Tooltip(
        child: child,
        decoration: decoration,
        enableFeedback: enableFeedback,
        excludeFromSemantics: excludeFromSemantics,
        height: height,
        key: key,
        margin: margin,
        message: message,
        onTriggered: onTriggered == null ? null : onTriggeredProxy,
        padding: padding,
        preferBelow: preferBelow,
        richMessage: richMessage,
        showDuration: showDuration,
        textAlign: textAlign,
        textStyle: textStyle,
        triggerMode: triggerMode,
        verticalOffset: verticalOffset,
        waitDuration: waitDuration,
      );
    };
