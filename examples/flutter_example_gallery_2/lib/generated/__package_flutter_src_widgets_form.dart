// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/form.dart';
import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/navigator.dart';
import 'package:flutter/src/widgets/restoration.dart';
import 'package:flutter/src/widgets/restoration_properties.dart';
import 'package:flutter/src/widgets/will_pop_scope.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/form.dart',
  {'Form.': _Form__$},
  {},
  {
    'FormState': m.ClassMirror(
      'FormState',
      {
        'save': _FormState_save$,
        'validate': _FormState_validate$,
      },
      {},
    ),
    'FormFieldState': m.ClassMirror(
      'FormFieldState',
      {'value': _FormFieldState_value$},
      {},
    ),
  },
);
Function _Form__$(m.Scope scope$) => ({
      Key? key,
      required Widget child,
      m.FunctionPointer? onWillPop,
      m.FunctionPointer? onChanged,
      AutovalidateMode? autovalidateMode,
    }) {
      void onChangedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onChanged!,
            [],
            {},
          );
      Future<bool> onWillPopProxy() async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            onWillPop!,
            [],
            {},
          );
      return Form(
        autovalidateMode: autovalidateMode,
        child: child,
        key: key,
        onChanged: onChanged == null ? null : onChangedProxy,
        onWillPop: onWillPop == null ? null : onWillPopProxy,
      );
    };
Function _FormState_save$(
  m.Scope scope$,
  FormState target$,
) =>
    target$.save;
Function _FormState_validate$(
  m.Scope scope$,
  FormState target$,
) =>
    target$.validate;
Function _FormFieldState_value$<T>(
  m.Scope scope$,
  FormFieldState<T> target$,
) =>
    () {
      return target$.value;
    };
