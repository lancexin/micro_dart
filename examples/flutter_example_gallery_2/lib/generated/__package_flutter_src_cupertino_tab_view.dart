// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/tab_view.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/app.dart' show CupertinoApp;
import 'package:flutter/src/cupertino/route.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/tab_view.dart',
  {'CupertinoTabView.': _CupertinoTabView__$},
  {},
  {},
);
Function _CupertinoTabView__$(m.Scope scope$) => ({
      Key? key,
      m.FunctionPointer? builder,
      GlobalKey<NavigatorState>? navigatorKey,
      String? defaultTitle,
      Map? routes,
      m.FunctionPointer? onGenerateRoute,
      m.FunctionPointer? onUnknownRoute,
      List? navigatorObservers,
      String? restorationScopeId,
    }) {
      Widget builderProxy(BuildContext builder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [builder_context$],
            {},
          );
      Route<dynamic>? onGenerateRouteProxy(
              RouteSettings onGenerateRoute_settings$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onGenerateRoute!,
            [onGenerateRoute_settings$],
            {},
          );
      Route<dynamic>? onUnknownRouteProxy(
              RouteSettings onUnknownRoute_settings$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onUnknownRoute!,
            [onUnknownRoute_settings$],
            {},
          );
      return CupertinoTabView(
        builder: builder == null ? null : builderProxy,
        defaultTitle: defaultTitle,
        key: key,
        navigatorKey: navigatorKey,
        navigatorObservers: navigatorObservers == null
            ? const <NavigatorObserver>[]
            : List.from(navigatorObservers),
        onGenerateRoute: onGenerateRoute == null ? null : onGenerateRouteProxy,
        onUnknownRoute: onUnknownRoute == null ? null : onUnknownRouteProxy,
        restorationScopeId: restorationScopeId,
        routes: routes == null ? null : Map.from(routes),
      );
    };
