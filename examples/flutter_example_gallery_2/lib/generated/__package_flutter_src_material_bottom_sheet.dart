// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/bottom_sheet.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/bottom_sheet_theme.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/curves.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/scaffold.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/bottom_sheet.dart',
  {'showModalBottomSheet': _showModalBottomSheet$},
  {},
  {},
);
Function _showModalBottomSheet$(m.Scope scope$) => ({
      required BuildContext context,
      required m.FunctionPointer builder,
      Color? backgroundColor,
      double? elevation,
      ShapeBorder? shape,
      Clip? clipBehavior,
      BoxConstraints? constraints,
      Color? barrierColor,
      bool? isScrollControlled,
      bool? useRootNavigator,
      bool? isDismissible,
      bool? enableDrag,
      bool? showDragHandle,
      bool? useSafeArea,
      RouteSettings? routeSettings,
      AnimationController? transitionAnimationController,
      Offset? anchorPoint,
    }) {
      Widget builderProxy(BuildContext builder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [builder_context$],
            {},
          );
      return showModalBottomSheet(
        anchorPoint: anchorPoint,
        backgroundColor: backgroundColor,
        barrierColor: barrierColor,
        builder: builderProxy,
        clipBehavior: clipBehavior,
        constraints: constraints,
        context: context,
        elevation: elevation,
        enableDrag: enableDrag ?? true,
        isDismissible: isDismissible ?? true,
        isScrollControlled: isScrollControlled ?? false,
        routeSettings: routeSettings,
        shape: shape,
        showDragHandle: showDragHandle,
        transitionAnimationController: transitionAnimationController,
        useRootNavigator: useRootNavigator ?? false,
        useSafeArea: useSafeArea ?? false,
      );
    };
