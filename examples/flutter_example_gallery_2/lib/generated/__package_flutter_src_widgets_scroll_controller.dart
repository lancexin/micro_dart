// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/animation.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/widgets/scroll_context.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/scroll_position.dart';
import 'package:flutter/src/widgets/scroll_position_with_single_context.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/scroll_controller.dart',
  {'ScrollController.': _ScrollController__$},
  {},
  {
    'ScrollController': m.ClassMirror(
      'ScrollController',
      {
        'hasClients': _ScrollController_hasClients$,
        'position': _ScrollController_position$,
        'offset': _ScrollController_offset$,
        'animateTo': _ScrollController_animateTo$,
        'dispose': _ScrollController_dispose$,
      },
      {},
    )
  },
);
Function _ScrollController_hasClients$(
  m.Scope scope$,
  ScrollController target$,
) =>
    () {
      return target$.hasClients;
    };
Function _ScrollController_position$(
  m.Scope scope$,
  ScrollController target$,
) =>
    () {
      return target$.position;
    };
Function _ScrollController_offset$(
  m.Scope scope$,
  ScrollController target$,
) =>
    () {
      return target$.offset;
    };
Function _ScrollController__$(m.Scope scope$) => ({
      double? initialScrollOffset,
      bool? keepScrollOffset,
      String? debugLabel,
    }) {
      return ScrollController(
        debugLabel: debugLabel,
        initialScrollOffset: initialScrollOffset ?? 0.0,
        keepScrollOffset: keepScrollOffset ?? true,
      );
    };
Function _ScrollController_animateTo$(
  m.Scope scope$,
  ScrollController target$,
) =>
    target$.animateTo;
Function _ScrollController_dispose$(
  m.Scope scope$,
  ScrollController target$,
) =>
    target$.dispose;
