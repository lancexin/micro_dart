// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/semantics/semantics.dart';
import 'dart:math';
import 'dart:ui';
import 'dart:ui'
    show
        Offset,
        Rect,
        SemanticsAction,
        SemanticsFlag,
        StringAttribute,
        TextDirection;
import 'package:collection/collection.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/painting.dart' show MatrixUtils, TransformProperty;
import 'package:flutter/services.dart';
import 'package:vector_math/vector_math_64.dart';
import 'package:flutter/src/semantics/binding.dart' show SemanticsBinding;
import 'package:flutter/src/semantics/semantics_event.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/semantics/semantics.dart',
  {
    'SemanticsProperties.': _SemanticsProperties__$,
    'OrdinalSortKey.': _OrdinalSortKey__$,
  },
  {},
  {},
);
Function _SemanticsProperties__$(m.Scope scope$) => ({
      bool? enabled,
      bool? checked,
      bool? mixed,
      bool? selected,
      bool? toggled,
      bool? button,
      bool? link,
      bool? header,
      bool? textField,
      bool? slider,
      bool? keyboardKey,
      bool? readOnly,
      bool? focusable,
      bool? focused,
      bool? inMutuallyExclusiveGroup,
      bool? hidden,
      bool? obscured,
      bool? multiline,
      bool? scopesRoute,
      bool? namesRoute,
      bool? image,
      bool? liveRegion,
      int? maxValueLength,
      int? currentValueLength,
      String? label,
      AttributedString? attributedLabel,
      String? value,
      AttributedString? attributedValue,
      String? increasedValue,
      AttributedString? attributedIncreasedValue,
      String? decreasedValue,
      AttributedString? attributedDecreasedValue,
      String? hint,
      String? tooltip,
      AttributedString? attributedHint,
      SemanticsHintOverrides? hintOverrides,
      TextDirection? textDirection,
      SemanticsSortKey? sortKey,
      SemanticsTag? tagForChildren,
      m.FunctionPointer? onTap,
      m.FunctionPointer? onLongPress,
      m.FunctionPointer? onScrollLeft,
      m.FunctionPointer? onScrollRight,
      m.FunctionPointer? onScrollUp,
      m.FunctionPointer? onScrollDown,
      m.FunctionPointer? onIncrease,
      m.FunctionPointer? onDecrease,
      m.FunctionPointer? onCopy,
      m.FunctionPointer? onCut,
      m.FunctionPointer? onPaste,
      m.FunctionPointer? onMoveCursorForwardByCharacter,
      m.FunctionPointer? onMoveCursorBackwardByCharacter,
      m.FunctionPointer? onMoveCursorForwardByWord,
      m.FunctionPointer? onMoveCursorBackwardByWord,
      m.FunctionPointer? onSetSelection,
      m.FunctionPointer? onSetText,
      m.FunctionPointer? onDidGainAccessibilityFocus,
      m.FunctionPointer? onDidLoseAccessibilityFocus,
      m.FunctionPointer? onDismiss,
      Map? customSemanticsActions,
    }) {
      void onCopyProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onCopy!,
            [],
            {},
          );
      void onCutProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onCut!,
            [],
            {},
          );
      void onDecreaseProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onDecrease!,
            [],
            {},
          );
      void onDidGainAccessibilityFocusProxy() =>
          scope$.engine.callFunctionPointer(
            scope$,
            onDidGainAccessibilityFocus!,
            [],
            {},
          );
      void onDidLoseAccessibilityFocusProxy() =>
          scope$.engine.callFunctionPointer(
            scope$,
            onDidLoseAccessibilityFocus!,
            [],
            {},
          );
      void onDismissProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onDismiss!,
            [],
            {},
          );
      void onIncreaseProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onIncrease!,
            [],
            {},
          );
      void onLongPressProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onLongPress!,
            [],
            {},
          );
      void onMoveCursorBackwardByCharacterProxy(
              bool onMoveCursorBackwardByCharacter_extendSelection$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onMoveCursorBackwardByCharacter!,
            [onMoveCursorBackwardByCharacter_extendSelection$],
            {},
          );
      void onMoveCursorBackwardByWordProxy(
              bool onMoveCursorBackwardByWord_extendSelection$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onMoveCursorBackwardByWord!,
            [onMoveCursorBackwardByWord_extendSelection$],
            {},
          );
      void onMoveCursorForwardByCharacterProxy(
              bool onMoveCursorForwardByCharacter_extendSelection$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onMoveCursorForwardByCharacter!,
            [onMoveCursorForwardByCharacter_extendSelection$],
            {},
          );
      void onMoveCursorForwardByWordProxy(
              bool onMoveCursorForwardByWord_extendSelection$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onMoveCursorForwardByWord!,
            [onMoveCursorForwardByWord_extendSelection$],
            {},
          );
      void onPasteProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPaste!,
            [],
            {},
          );
      void onScrollDownProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onScrollDown!,
            [],
            {},
          );
      void onScrollLeftProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onScrollLeft!,
            [],
            {},
          );
      void onScrollRightProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onScrollRight!,
            [],
            {},
          );
      void onScrollUpProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onScrollUp!,
            [],
            {},
          );
      void onSetSelectionProxy(TextSelection onSetSelection_selection$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSetSelection!,
            [onSetSelection_selection$],
            {},
          );
      void onSetTextProxy(String onSetText_text$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSetText!,
            [onSetText_text$],
            {},
          );
      void onTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTap!,
            [],
            {},
          );
      return SemanticsProperties(
        attributedDecreasedValue: attributedDecreasedValue,
        attributedHint: attributedHint,
        attributedIncreasedValue: attributedIncreasedValue,
        attributedLabel: attributedLabel,
        attributedValue: attributedValue,
        button: button,
        checked: checked,
        currentValueLength: currentValueLength,
        customSemanticsActions: customSemanticsActions == null
            ? null
            : Map.from(customSemanticsActions),
        decreasedValue: decreasedValue,
        enabled: enabled,
        focusable: focusable,
        focused: focused,
        header: header,
        hidden: hidden,
        hint: hint,
        hintOverrides: hintOverrides,
        image: image,
        inMutuallyExclusiveGroup: inMutuallyExclusiveGroup,
        increasedValue: increasedValue,
        keyboardKey: keyboardKey,
        label: label,
        link: link,
        liveRegion: liveRegion,
        maxValueLength: maxValueLength,
        mixed: mixed,
        multiline: multiline,
        namesRoute: namesRoute,
        obscured: obscured,
        onCopy: onCopy == null ? null : onCopyProxy,
        onCut: onCut == null ? null : onCutProxy,
        onDecrease: onDecrease == null ? null : onDecreaseProxy,
        onDidGainAccessibilityFocus: onDidGainAccessibilityFocus == null
            ? null
            : onDidGainAccessibilityFocusProxy,
        onDidLoseAccessibilityFocus: onDidLoseAccessibilityFocus == null
            ? null
            : onDidLoseAccessibilityFocusProxy,
        onDismiss: onDismiss == null ? null : onDismissProxy,
        onIncrease: onIncrease == null ? null : onIncreaseProxy,
        onLongPress: onLongPress == null ? null : onLongPressProxy,
        onMoveCursorBackwardByCharacter: onMoveCursorBackwardByCharacter == null
            ? null
            : onMoveCursorBackwardByCharacterProxy,
        onMoveCursorBackwardByWord: onMoveCursorBackwardByWord == null
            ? null
            : onMoveCursorBackwardByWordProxy,
        onMoveCursorForwardByCharacter: onMoveCursorForwardByCharacter == null
            ? null
            : onMoveCursorForwardByCharacterProxy,
        onMoveCursorForwardByWord: onMoveCursorForwardByWord == null
            ? null
            : onMoveCursorForwardByWordProxy,
        onPaste: onPaste == null ? null : onPasteProxy,
        onScrollDown: onScrollDown == null ? null : onScrollDownProxy,
        onScrollLeft: onScrollLeft == null ? null : onScrollLeftProxy,
        onScrollRight: onScrollRight == null ? null : onScrollRightProxy,
        onScrollUp: onScrollUp == null ? null : onScrollUpProxy,
        onSetSelection: onSetSelection == null ? null : onSetSelectionProxy,
        onSetText: onSetText == null ? null : onSetTextProxy,
        onTap: onTap == null ? null : onTapProxy,
        readOnly: readOnly,
        scopesRoute: scopesRoute,
        selected: selected,
        slider: slider,
        sortKey: sortKey,
        tagForChildren: tagForChildren,
        textDirection: textDirection,
        textField: textField,
        toggled: toggled,
        tooltip: tooltip,
        value: value,
      );
    };
Function _OrdinalSortKey__$(m.Scope scope$) => (
      double order, {
      String? name,
    }) {
      return OrdinalSortKey(
        order,
        name: name,
      );
    };
