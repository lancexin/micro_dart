// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/dialog.dart';
import 'dart:ui';
import 'package:flutter/foundation.dart' show clampDouble;
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/dialog_theme.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/dialog.dart',
  {
    'AlertDialog.': _AlertDialog__$,
    'SimpleDialogOption.': _SimpleDialogOption__$,
    'SimpleDialog.': _SimpleDialog__$,
    'DialogRoute.': _DialogRoute__$,
    'showDialog': _showDialog$,
  },
  {},
  {},
);
Function _AlertDialog__$(m.Scope scope$) => ({
      Key? key,
      Widget? icon,
      EdgeInsetsGeometry? iconPadding,
      Color? iconColor,
      Widget? title,
      EdgeInsetsGeometry? titlePadding,
      TextStyle? titleTextStyle,
      Widget? content,
      EdgeInsetsGeometry? contentPadding,
      TextStyle? contentTextStyle,
      List? actions,
      EdgeInsetsGeometry? actionsPadding,
      MainAxisAlignment? actionsAlignment,
      OverflowBarAlignment? actionsOverflowAlignment,
      VerticalDirection? actionsOverflowDirection,
      double? actionsOverflowButtonSpacing,
      EdgeInsetsGeometry? buttonPadding,
      Color? backgroundColor,
      double? elevation,
      Color? shadowColor,
      Color? surfaceTintColor,
      String? semanticLabel,
      EdgeInsets? insetPadding,
      Clip? clipBehavior,
      ShapeBorder? shape,
      AlignmentGeometry? alignment,
      bool? scrollable,
    }) {
      return AlertDialog(
        actions: actions == null ? null : List.from(actions),
        actionsAlignment: actionsAlignment,
        actionsOverflowAlignment: actionsOverflowAlignment,
        actionsOverflowButtonSpacing: actionsOverflowButtonSpacing,
        actionsOverflowDirection: actionsOverflowDirection,
        actionsPadding: actionsPadding,
        alignment: alignment,
        backgroundColor: backgroundColor,
        buttonPadding: buttonPadding,
        clipBehavior: clipBehavior ?? Clip.none,
        content: content,
        contentPadding: contentPadding,
        contentTextStyle: contentTextStyle,
        elevation: elevation,
        icon: icon,
        iconColor: iconColor,
        iconPadding: iconPadding,
        insetPadding: insetPadding ??
            const EdgeInsets.symmetric(horizontal: 40.0, vertical: 24.0),
        key: key,
        scrollable: scrollable ?? false,
        semanticLabel: semanticLabel,
        shadowColor: shadowColor,
        shape: shape,
        surfaceTintColor: surfaceTintColor,
        title: title,
        titlePadding: titlePadding,
        titleTextStyle: titleTextStyle,
      );
    };
Function _SimpleDialogOption__$(m.Scope scope$) => ({
      Key? key,
      m.FunctionPointer? onPressed,
      EdgeInsets? padding,
      Widget? child,
    }) {
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return SimpleDialogOption(
        child: child,
        key: key,
        onPressed: onPressed == null ? null : onPressedProxy,
        padding: padding,
      );
    };
Function _SimpleDialog__$(m.Scope scope$) => ({
      Key? key,
      Widget? title,
      EdgeInsetsGeometry? titlePadding,
      TextStyle? titleTextStyle,
      List? children,
      EdgeInsetsGeometry? contentPadding,
      Color? backgroundColor,
      double? elevation,
      Color? shadowColor,
      Color? surfaceTintColor,
      String? semanticLabel,
      EdgeInsets? insetPadding,
      Clip? clipBehavior,
      ShapeBorder? shape,
      AlignmentGeometry? alignment,
    }) {
      return SimpleDialog(
        alignment: alignment,
        backgroundColor: backgroundColor,
        children: children == null ? null : List.from(children),
        clipBehavior: clipBehavior ?? Clip.none,
        contentPadding:
            contentPadding ?? const EdgeInsets.fromLTRB(0.0, 12.0, 0.0, 16.0),
        elevation: elevation,
        insetPadding: insetPadding ??
            const EdgeInsets.symmetric(horizontal: 40.0, vertical: 24.0),
        key: key,
        semanticLabel: semanticLabel,
        shadowColor: shadowColor,
        shape: shape,
        surfaceTintColor: surfaceTintColor,
        title: title,
        titlePadding:
            titlePadding ?? const EdgeInsets.fromLTRB(24.0, 24.0, 24.0, 0.0),
        titleTextStyle: titleTextStyle,
      );
    };
Function _DialogRoute__$(m.Scope scope$) => ({
      required BuildContext context,
      required m.FunctionPointer builder,
      CapturedThemes? themes,
      Color? barrierColor,
      bool? barrierDismissible,
      String? barrierLabel,
      bool? useSafeArea,
      RouteSettings? settings,
      Offset? anchorPoint,
      TraversalEdgeBehavior? traversalEdgeBehavior,
    }) {
      Widget builderProxy(BuildContext builder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [builder_context$],
            {},
          );
      return DialogRoute(
        anchorPoint: anchorPoint,
        barrierColor: barrierColor ?? Colors.black54,
        barrierDismissible: barrierDismissible ?? true,
        barrierLabel: barrierLabel,
        builder: builderProxy,
        context: context,
        settings: settings,
        themes: themes,
        traversalEdgeBehavior: traversalEdgeBehavior,
        useSafeArea: useSafeArea ?? true,
      );
    };
Function _showDialog$(m.Scope scope$) => ({
      required BuildContext context,
      required m.FunctionPointer builder,
      bool? barrierDismissible,
      Color? barrierColor,
      String? barrierLabel,
      bool? useSafeArea,
      bool? useRootNavigator,
      RouteSettings? routeSettings,
      Offset? anchorPoint,
      TraversalEdgeBehavior? traversalEdgeBehavior,
    }) {
      Widget builderProxy(BuildContext builder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [builder_context$],
            {},
          );
      return showDialog(
        anchorPoint: anchorPoint,
        barrierColor: barrierColor ?? Colors.black54,
        barrierDismissible: barrierDismissible ?? true,
        barrierLabel: barrierLabel,
        builder: builderProxy,
        context: context,
        routeSettings: routeSettings,
        traversalEdgeBehavior: traversalEdgeBehavior,
        useRootNavigator: useRootNavigator ?? true,
        useSafeArea: useSafeArea ?? true,
      );
    };
