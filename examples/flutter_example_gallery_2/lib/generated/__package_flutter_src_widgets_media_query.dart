// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/media_query.dart';
import 'dart:math';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/binding.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/inherited_model.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/media_query.dart',
  {
    'MediaQueryData.': _MediaQueryData__$,
    'MediaQuery.': _MediaQuery__$,
    'MediaQuery.removePadding': _MediaQuery_removePadding_$,
    'MediaQuery.of': _MediaQuery_of$,
  },
  {},
  {
    'MediaQueryData': m.ClassMirror(
      'MediaQueryData',
      {
        'size': _MediaQueryData_size$,
        'platformBrightness': _MediaQueryData_platformBrightness$,
        'viewInsets': _MediaQueryData_viewInsets$,
        'padding': _MediaQueryData_padding$,
        'viewPadding': _MediaQueryData_viewPadding$,
        'removePadding': _MediaQueryData_removePadding$,
      },
      {},
    )
  },
);
Function _MediaQueryData_size$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    () {
      return target$.size;
    };
Function _MediaQueryData_platformBrightness$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    () {
      return target$.platformBrightness;
    };
Function _MediaQueryData_viewInsets$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    () {
      return target$.viewInsets;
    };
Function _MediaQueryData_padding$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    () {
      return target$.padding;
    };
Function _MediaQueryData_viewPadding$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    () {
      return target$.viewPadding;
    };
Function _MediaQueryData__$(m.Scope scope$) => ({
      Size? size,
      double? devicePixelRatio,
      double? textScaleFactor,
      Brightness? platformBrightness,
      EdgeInsets? padding,
      EdgeInsets? viewInsets,
      EdgeInsets? systemGestureInsets,
      EdgeInsets? viewPadding,
      bool? alwaysUse24HourFormat,
      bool? accessibleNavigation,
      bool? invertColors,
      bool? highContrast,
      bool? disableAnimations,
      bool? boldText,
      NavigationMode? navigationMode,
      DeviceGestureSettings? gestureSettings,
      List? displayFeatures,
    }) {
      return MediaQueryData(
        accessibleNavigation: accessibleNavigation ?? false,
        alwaysUse24HourFormat: alwaysUse24HourFormat ?? false,
        boldText: boldText ?? false,
        devicePixelRatio: devicePixelRatio ?? 1.0,
        disableAnimations: disableAnimations ?? false,
        displayFeatures: displayFeatures == null
            ? const <DisplayFeature>[]
            : List.from(displayFeatures),
        gestureSettings: gestureSettings ??
            const DeviceGestureSettings(touchSlop: kTouchSlop),
        highContrast: highContrast ?? false,
        invertColors: invertColors ?? false,
        navigationMode: navigationMode ?? NavigationMode.traditional,
        padding: padding ?? EdgeInsets.zero,
        platformBrightness: platformBrightness ?? Brightness.light,
        size: size ?? Size.zero,
        systemGestureInsets: systemGestureInsets ?? EdgeInsets.zero,
        textScaleFactor: textScaleFactor ?? 1.0,
        viewInsets: viewInsets ?? EdgeInsets.zero,
        viewPadding: viewPadding ?? EdgeInsets.zero,
      );
    };
Function _MediaQueryData_removePadding$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    target$.removePadding;
Function _MediaQuery__$(m.Scope scope$) => ({
      Key? key,
      required MediaQueryData data,
      required Widget child,
    }) {
      return MediaQuery(
        child: child,
        data: data,
        key: key,
      );
    };
Function _MediaQuery_removePadding_$(m.Scope scope$) =>
    MediaQuery.removePadding;
Function _MediaQuery_of$(m.Scope scope$) => MediaQuery.of;
