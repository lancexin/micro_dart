// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/checkbox.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/src/material/checkbox_theme.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/material/toggleable.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/checkbox.dart',
  {'Checkbox.': _Checkbox__$},
  {},
  {},
);
Function _Checkbox__$(m.Scope scope$) => ({
      Key? key,
      required bool? value,
      bool? tristate,
      required m.FunctionPointer? onChanged,
      MouseCursor? mouseCursor,
      Color? activeColor,
      MaterialStateProperty<Color>? fillColor,
      Color? checkColor,
      Color? focusColor,
      Color? hoverColor,
      MaterialStateProperty<Color>? overlayColor,
      double? splashRadius,
      MaterialTapTargetSize? materialTapTargetSize,
      VisualDensity? visualDensity,
      FocusNode? focusNode,
      bool? autofocus,
      OutlinedBorder? shape,
      BorderSide? side,
      bool? isError,
    }) {
      void onChangedProxy(bool? onChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChanged!,
            [onChanged_value$],
            {},
          );
      return Checkbox(
        activeColor: activeColor,
        autofocus: autofocus ?? false,
        checkColor: checkColor,
        fillColor: fillColor,
        focusColor: focusColor,
        focusNode: focusNode,
        hoverColor: hoverColor,
        isError: isError ?? false,
        key: key,
        materialTapTargetSize: materialTapTargetSize,
        mouseCursor: mouseCursor,
        onChanged: onChanged == null ? null : onChangedProxy,
        overlayColor: overlayColor,
        shape: shape,
        side: side,
        splashRadius: splashRadius,
        tristate: tristate ?? false,
        value: value,
        visualDensity: visualDensity,
      );
    };
