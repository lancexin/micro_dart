// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/color_scheme.dart';
import 'dart:async';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:material_color_utilities/material_color_utilities.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/color_scheme.dart',
  {
    'ColorScheme.': _ColorScheme__$,
    'ColorScheme.light': _ColorScheme_light_$,
    'ColorScheme.dark': _ColorScheme_dark_$,
  },
  {},
  {
    'ColorScheme': m.ClassMirror(
      'ColorScheme',
      {
        'brightness': _ColorScheme_brightness$,
        'primary': _ColorScheme_primary$,
        'onPrimary': _ColorScheme_onPrimary$,
        'secondary': _ColorScheme_secondary$,
        'onSecondary': _ColorScheme_onSecondary$,
        'background': _ColorScheme_background$,
        'onBackground': _ColorScheme_onBackground$,
        'surface': _ColorScheme_surface$,
        'onSurface': _ColorScheme_onSurface$,
        'primaryContainer': _ColorScheme_primaryContainer$,
        'secondaryContainer': _ColorScheme_secondaryContainer$,
        'outline': _ColorScheme_outline$,
        'copyWith': _ColorScheme_copyWith$,
      },
      {},
    )
  },
);
Function _ColorScheme_brightness$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.brightness;
    };
Function _ColorScheme_primary$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.primary;
    };
Function _ColorScheme_onPrimary$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.onPrimary;
    };
Function _ColorScheme_secondary$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.secondary;
    };
Function _ColorScheme_onSecondary$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.onSecondary;
    };
Function _ColorScheme_background$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.background;
    };
Function _ColorScheme_onBackground$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.onBackground;
    };
Function _ColorScheme_surface$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.surface;
    };
Function _ColorScheme_onSurface$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.onSurface;
    };
Function _ColorScheme_primaryContainer$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.primaryContainer;
    };
Function _ColorScheme_secondaryContainer$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.secondaryContainer;
    };
Function _ColorScheme_outline$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.outline;
    };
Function _ColorScheme__$(m.Scope scope$) => ({
      required Brightness brightness,
      required Color primary,
      required Color onPrimary,
      Color? primaryContainer,
      Color? onPrimaryContainer,
      required Color secondary,
      required Color onSecondary,
      Color? secondaryContainer,
      Color? onSecondaryContainer,
      Color? tertiary,
      Color? onTertiary,
      Color? tertiaryContainer,
      Color? onTertiaryContainer,
      required Color error,
      required Color onError,
      Color? errorContainer,
      Color? onErrorContainer,
      required Color background,
      required Color onBackground,
      required Color surface,
      required Color onSurface,
      Color? surfaceVariant,
      Color? onSurfaceVariant,
      Color? outline,
      Color? outlineVariant,
      Color? shadow,
      Color? scrim,
      Color? inverseSurface,
      Color? onInverseSurface,
      Color? inversePrimary,
      Color? surfaceTint,
      Color? primaryVariant,
      Color? secondaryVariant,
    }) {
      return ColorScheme(
        background: background,
        brightness: brightness,
        error: error,
        errorContainer: errorContainer,
        inversePrimary: inversePrimary,
        inverseSurface: inverseSurface,
        onBackground: onBackground,
        onError: onError,
        onErrorContainer: onErrorContainer,
        onInverseSurface: onInverseSurface,
        onPrimary: onPrimary,
        onPrimaryContainer: onPrimaryContainer,
        onSecondary: onSecondary,
        onSecondaryContainer: onSecondaryContainer,
        onSurface: onSurface,
        onSurfaceVariant: onSurfaceVariant,
        onTertiary: onTertiary,
        onTertiaryContainer: onTertiaryContainer,
        outline: outline,
        outlineVariant: outlineVariant,
        primary: primary,
        primaryContainer: primaryContainer,
        primaryVariant: primaryVariant,
        scrim: scrim,
        secondary: secondary,
        secondaryContainer: secondaryContainer,
        secondaryVariant: secondaryVariant,
        shadow: shadow,
        surface: surface,
        surfaceTint: surfaceTint,
        surfaceVariant: surfaceVariant,
        tertiary: tertiary,
        tertiaryContainer: tertiaryContainer,
      );
    };
Function _ColorScheme_light_$(m.Scope scope$) => ColorScheme.light;
Function _ColorScheme_dark_$(m.Scope scope$) => ColorScheme.dark;
Function _ColorScheme_copyWith$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    target$.copyWith;
