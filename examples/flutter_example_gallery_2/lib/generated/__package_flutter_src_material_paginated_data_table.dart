// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/paginated_data_table.dart';
import 'dart:math';
import 'package:flutter/gestures.dart' show DragStartBehavior;
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/card.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/data_table.dart';
import 'package:flutter/src/material/data_table_source.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/dropdown.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/ink_decoration.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/progress_indicator.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/paginated_data_table.dart',
  {
    'PaginatedDataTable.defaultRowsPerPage':
        _PaginatedDataTable_defaultRowsPerPage$,
    'PaginatedDataTable.': _PaginatedDataTable__$,
  },
  {},
  {},
);
Function _PaginatedDataTable_defaultRowsPerPage$(m.Scope scope$) =>
    () => PaginatedDataTable.defaultRowsPerPage;
Function _PaginatedDataTable__$(m.Scope scope$) => ({
      Key? key,
      Widget? header,
      List? actions,
      required List columns,
      int? sortColumnIndex,
      bool? sortAscending,
      m.FunctionPointer? onSelectAll,
      double? dataRowHeight,
      double? dataRowMinHeight,
      double? dataRowMaxHeight,
      double? headingRowHeight,
      double? horizontalMargin,
      double? columnSpacing,
      bool? showCheckboxColumn,
      bool? showFirstLastButtons,
      int? initialFirstRowIndex,
      m.FunctionPointer? onPageChanged,
      int? rowsPerPage,
      List? availableRowsPerPage,
      m.FunctionPointer? onRowsPerPageChanged,
      DragStartBehavior? dragStartBehavior,
      Color? arrowHeadColor,
      required DataTableSource source,
      double? checkboxHorizontalMargin,
      ScrollController? controller,
      bool? primary,
    }) {
      void onPageChangedProxy(int onPageChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onPageChanged!,
            [onPageChanged_value$],
            {},
          );
      void onRowsPerPageChangedProxy(int? onRowsPerPageChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onRowsPerPageChanged!,
            [onRowsPerPageChanged_value$],
            {},
          );
      void onSelectAllProxy(bool? onSelectAll_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSelectAll!,
            [onSelectAll_value$],
            {},
          );
      return PaginatedDataTable(
        actions: actions == null ? null : List.from(actions),
        arrowHeadColor: arrowHeadColor,
        availableRowsPerPage: availableRowsPerPage == null
            ? const <int>[
                PaginatedDataTable.defaultRowsPerPage,
                PaginatedDataTable.defaultRowsPerPage * 2,
                PaginatedDataTable.defaultRowsPerPage * 5,
                PaginatedDataTable.defaultRowsPerPage * 10
              ]
            : List.from(availableRowsPerPage),
        checkboxHorizontalMargin: checkboxHorizontalMargin,
        columnSpacing: columnSpacing ?? 56.0,
        columns: List.from(columns),
        controller: controller,
        dataRowHeight: dataRowHeight,
        dataRowMaxHeight: dataRowMaxHeight,
        dataRowMinHeight: dataRowMinHeight,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        header: header,
        headingRowHeight: headingRowHeight ?? 56.0,
        horizontalMargin: horizontalMargin ?? 24.0,
        initialFirstRowIndex: initialFirstRowIndex ?? 0,
        key: key,
        onPageChanged: onPageChanged == null ? null : onPageChangedProxy,
        onRowsPerPageChanged:
            onRowsPerPageChanged == null ? null : onRowsPerPageChangedProxy,
        onSelectAll: onSelectAll == null ? null : onSelectAllProxy,
        primary: primary,
        rowsPerPage: rowsPerPage ?? PaginatedDataTable.defaultRowsPerPage,
        showCheckboxColumn: showCheckboxColumn ?? true,
        showFirstLastButtons: showFirstLastButtons ?? false,
        sortAscending: sortAscending ?? true,
        sortColumnIndex: sortColumnIndex,
        source: source,
      );
    };
