// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/modal_barrier.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/gesture_detector.dart';
import 'package:flutter/src/widgets/navigator.dart';
import 'package:flutter/src/widgets/transitions.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/modal_barrier.dart',
  {'ModalBarrier.': _ModalBarrier__$},
  {},
  {},
);
Function _ModalBarrier__$(m.Scope scope$) => ({
      Key? key,
      Color? color,
      bool? dismissible,
      m.FunctionPointer? onDismiss,
      String? semanticsLabel,
      bool? barrierSemanticsDismissible,
      ValueNotifier<EdgeInsets>? clipDetailsNotifier,
      String? semanticsOnTapHint,
    }) {
      void onDismissProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onDismiss!,
            [],
            {},
          );
      return ModalBarrier(
        barrierSemanticsDismissible: barrierSemanticsDismissible ?? true,
        clipDetailsNotifier: clipDetailsNotifier,
        color: color,
        dismissible: dismissible ?? true,
        key: key,
        onDismiss: onDismiss == null ? null : onDismissProxy,
        semanticsLabel: semanticsLabel,
        semanticsOnTapHint: semanticsOnTapHint,
      );
    };
