// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/navigator.dart';
import 'dart:async';
import 'dart:collection';
import 'dart:convert';
import 'dart:developer';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/binding.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/focus_scope.dart';
import 'package:flutter/src/widgets/focus_traversal.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/heroes.dart';
import 'package:flutter/src/widgets/overlay.dart';
import 'package:flutter/src/widgets/restoration.dart';
import 'package:flutter/src/widgets/restoration_properties.dart';
import 'package:flutter/src/widgets/routes.dart';
import 'package:flutter/src/widgets/ticker_provider.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/navigator.dart',
  {
    'Navigator.': _Navigator__$,
    'Navigator.maybePop': _Navigator_maybePop$,
    'Navigator.pop': _Navigator_pop$,
    'Navigator.of': _Navigator_of$,
    'RestorableRouteFuture.': _RestorableRouteFuture__$,
  },
  {},
  {
    'Route': m.ClassMirror(
      'Route',
      {'settings': _Route_settings$},
      {},
    ),
    'RouteSettings': m.ClassMirror(
      'RouteSettings',
      {
        'name': _RouteSettings_name$,
        'arguments': _RouteSettings_arguments$,
      },
      {},
    ),
    'NavigatorState': m.ClassMirror(
      'NavigatorState',
      {
        'restorablePushNamed': _NavigatorState_restorablePushNamed$,
        'push': _NavigatorState_push$,
        'restorablePush': _NavigatorState_restorablePush$,
        'canPop': _NavigatorState_canPop$,
        'pop': _NavigatorState_pop$,
        'popUntil': _NavigatorState_popUntil$,
      },
      {},
    ),
    'RestorableRouteFuture': m.ClassMirror(
      'RestorableRouteFuture',
      {'present': _RestorableRouteFuture_present$},
      {},
    ),
  },
);
Function _Route_settings$<T>(
  m.Scope scope$,
  Route<T> target$,
) =>
    () {
      return target$.settings;
    };
Function _RouteSettings_name$(
  m.Scope scope$,
  RouteSettings target$,
) =>
    () {
      return target$.name;
    };
Function _RouteSettings_arguments$(
  m.Scope scope$,
  RouteSettings target$,
) =>
    () {
      return target$.arguments;
    };
Function _Navigator__$(m.Scope scope$) => ({
      Key? key,
      List? pages,
      m.FunctionPointer? onPopPage,
      String? initialRoute,
      m.FunctionPointer? onGenerateInitialRoutes,
      m.FunctionPointer? onGenerateRoute,
      m.FunctionPointer? onUnknownRoute,
      TransitionDelegate<dynamic>? transitionDelegate,
      bool? reportsRouteUpdateToEngine,
      Clip? clipBehavior,
      List? observers,
      bool? requestFocus,
      String? restorationScopeId,
      TraversalEdgeBehavior? routeTraversalEdgeBehavior,
    }) {
      List<Route<dynamic>> onGenerateInitialRoutesProxy(
        NavigatorState onGenerateInitialRoutes_navigator$,
        String onGenerateInitialRoutes_initialRoute$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onGenerateInitialRoutes!,
            [
              onGenerateInitialRoutes_navigator$,
              onGenerateInitialRoutes_initialRoute$,
            ],
            {},
          );
      Route<dynamic>? onGenerateRouteProxy(
              RouteSettings onGenerateRoute_settings$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onGenerateRoute!,
            [onGenerateRoute_settings$],
            {},
          );
      bool onPopPageProxy(
        Route<dynamic> onPopPage_route$,
        dynamic onPopPage_result$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onPopPage!,
            [
              onPopPage_route$,
              onPopPage_result$,
            ],
            {},
          );
      Route<dynamic>? onUnknownRouteProxy(
              RouteSettings onUnknownRoute_settings$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onUnknownRoute!,
            [onUnknownRoute_settings$],
            {},
          );
      return Navigator(
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        initialRoute: initialRoute,
        key: key,
        observers: observers == null
            ? const <NavigatorObserver>[]
            : List.from(observers),
        onGenerateInitialRoutes: onGenerateInitialRoutes == null
            ? Navigator.defaultGenerateInitialRoutes
            : onGenerateInitialRoutesProxy,
        onGenerateRoute: onGenerateRoute == null ? null : onGenerateRouteProxy,
        onPopPage: onPopPage == null ? null : onPopPageProxy,
        onUnknownRoute: onUnknownRoute == null ? null : onUnknownRouteProxy,
        pages: pages == null ? const <Page<dynamic>>[] : List.from(pages),
        reportsRouteUpdateToEngine: reportsRouteUpdateToEngine ?? false,
        requestFocus: requestFocus ?? true,
        restorationScopeId: restorationScopeId,
        routeTraversalEdgeBehavior:
            routeTraversalEdgeBehavior ?? kDefaultRouteTraversalEdgeBehavior,
        transitionDelegate:
            transitionDelegate ?? const DefaultTransitionDelegate<dynamic>(),
      );
    };
Function _Navigator_restorablePush$(m.Scope scope$) => <T extends Object?>(
      BuildContext context,
      m.FunctionPointer routeBuilder, {
      Object? arguments,
    }) {
      Route routeBuilderProxy(
        BuildContext routeBuilder_context$,
        Object? routeBuilder_arguments$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            routeBuilder,
            [
              routeBuilder_context$,
              routeBuilder_arguments$,
            ],
            {},
          );
      return Navigator.restorablePush(
        context,
        routeBuilderProxy,
        arguments: arguments,
      );
    };
Function _Navigator_maybePop$<T extends Object?>(m.Scope scope$) =>
    Navigator.maybePop<T>;
Function _Navigator_pop$<T extends Object?>(m.Scope scope$) => Navigator.pop<T>;
Function _Navigator_of$(m.Scope scope$) => Navigator.of;
Function _NavigatorState_restorablePushNamed$<T extends Object?>(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.restorablePushNamed<T>;
Function _NavigatorState_push$<T extends Object?>(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.push<T>;
Function _NavigatorState_restorablePush$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    <T extends Object?>(
      m.FunctionPointer routeBuilder, {
      Object? arguments,
    }) {
      Route routeBuilderProxy(
        BuildContext routeBuilder_context$,
        Object? routeBuilder_arguments$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            routeBuilder,
            [
              routeBuilder_context$,
              routeBuilder_arguments$,
            ],
            {},
          );
      return target$.restorablePush(
        routeBuilderProxy,
        arguments: arguments,
      );
    };
Function _NavigatorState_canPop$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.canPop;
Function _NavigatorState_pop$<T extends Object?>(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.pop<T>;
Function _NavigatorState_popUntil$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    (m.FunctionPointer predicate) {
      bool predicateProxy(Route<dynamic> predicate_route$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            predicate,
            [predicate_route$],
            {},
          );
      target$.popUntil(predicateProxy);
    };
Function _RestorableRouteFuture__$(m.Scope scope$) => ({
      m.FunctionPointer? navigatorFinder,
      required m.FunctionPointer onPresent,
      m.FunctionPointer? onComplete,
    }) {
      NavigatorState navigatorFinderProxy(
              BuildContext navigatorFinder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            navigatorFinder!,
            [navigatorFinder_context$],
            {},
          );
      void onCompleteProxy(dynamic onComplete_result$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onComplete!,
            [onComplete_result$],
            {},
          );
      String onPresentProxy(
        NavigatorState onPresent_navigator$,
        Object? onPresent_arguments$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onPresent,
            [
              onPresent_navigator$,
              onPresent_arguments$,
            ],
            {},
          );
      return RestorableRouteFuture(
        navigatorFinder: navigatorFinder == null
            ? (BuildContext context) => Navigator.of(context)
            : navigatorFinderProxy,
        onComplete: onComplete == null ? null : onCompleteProxy,
        onPresent: onPresentProxy,
      );
    };
Function _RestorableRouteFuture_present$<T>(
  m.Scope scope$,
  RestorableRouteFuture<T> target$,
) =>
    target$.present;
