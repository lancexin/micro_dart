// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/slider.dart';
import 'dart:math';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/theme.dart';
import 'package:flutter/src/cupertino/thumb_painter.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/slider.dart',
  {'CupertinoSlider.': _CupertinoSlider__$},
  {},
  {},
);
Function _CupertinoSlider__$(m.Scope scope$) => ({
      Key? key,
      required double value,
      required m.FunctionPointer? onChanged,
      m.FunctionPointer? onChangeStart,
      m.FunctionPointer? onChangeEnd,
      double? min,
      double? max,
      int? divisions,
      Color? activeColor,
      Color? thumbColor,
    }) {
      void onChangeEndProxy(double onChangeEnd_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChangeEnd!,
            [onChangeEnd_value$],
            {},
          );
      void onChangeStartProxy(double onChangeStart_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChangeStart!,
            [onChangeStart_value$],
            {},
          );
      void onChangedProxy(double onChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChanged!,
            [onChanged_value$],
            {},
          );
      return CupertinoSlider(
        activeColor: activeColor,
        divisions: divisions,
        key: key,
        max: max ?? 1.0,
        min: min ?? 0.0,
        onChangeEnd: onChangeEnd == null ? null : onChangeEndProxy,
        onChangeStart: onChangeStart == null ? null : onChangeStartProxy,
        onChanged: onChanged == null ? null : onChangedProxy,
        thumbColor: thumbColor ?? CupertinoColors.white,
        value: value,
      );
    };
