// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/sliding_segmented_control.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/physics.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/sliding_segmented_control.dart',
  {'CupertinoSlidingSegmentedControl.': _CupertinoSlidingSegmentedControl__$},
  {},
  {},
);
Function _CupertinoSlidingSegmentedControl__$(m.Scope scope$) => ({
      Key? key,
      required Map children,
      required m.FunctionPointer onValueChanged,
      dynamic? groupValue,
      Color? thumbColor,
      EdgeInsetsGeometry? padding,
      Color? backgroundColor,
    }) {
      void onValueChangedProxy(dynamic onValueChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onValueChanged,
            [onValueChanged_value$],
            {},
          );
      return CupertinoSlidingSegmentedControl(
        backgroundColor: backgroundColor ?? CupertinoColors.tertiarySystemFill,
        children: Map.from(children),
        groupValue: groupValue,
        key: key,
        onValueChanged: onValueChangedProxy,
        padding: padding ?? EdgeInsets.symmetric(vertical: 2, horizontal: 3),
        thumbColor: thumbColor ??
            CupertinoDynamicColor.withBrightness(
              color: Color(0xFFFFFFFF),
              darkColor: Color(0xFF636366),
            ),
      );
    };
