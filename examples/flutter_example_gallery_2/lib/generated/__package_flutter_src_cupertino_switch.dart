// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/switch.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/theme.dart';
import 'package:flutter/src/cupertino/thumb_painter.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/switch.dart',
  {'CupertinoSwitch.': _CupertinoSwitch__$},
  {},
  {},
);
Function _CupertinoSwitch__$(m.Scope scope$) => ({
      Key? key,
      required bool value,
      required m.FunctionPointer? onChanged,
      Color? activeColor,
      Color? trackColor,
      Color? thumbColor,
      bool? applyTheme,
      Color? focusColor,
      DragStartBehavior? dragStartBehavior,
    }) {
      void onChangedProxy(bool onChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChanged!,
            [onChanged_value$],
            {},
          );
      return CupertinoSwitch(
        activeColor: activeColor,
        applyTheme: applyTheme,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        focusColor: focusColor,
        key: key,
        onChanged: onChanged == null ? null : onChangedProxy,
        thumbColor: thumbColor,
        trackColor: trackColor,
        value: value,
      );
    };
