// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/tabs.dart';
import 'dart:math';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart' show DragStartBehavior;
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/app_bar.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/tab_bar_theme.dart';
import 'package:flutter/src/material/tab_controller.dart';
import 'package:flutter/src/material/tab_indicator.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/tabs.dart',
  {
    'Tab.': _Tab__$,
    'TabBar.': _TabBar__$,
    'TabBarView.': _TabBarView__$,
  },
  {},
  {},
);
Function _Tab__$(m.Scope scope$) => ({
      Key? key,
      String? text,
      Widget? icon,
      EdgeInsetsGeometry? iconMargin,
      double? height,
      Widget? child,
    }) {
      return Tab(
        child: child,
        height: height,
        icon: icon,
        iconMargin: iconMargin ?? const EdgeInsets.only(bottom: 10.0),
        key: key,
        text: text,
      );
    };
Function _TabBar__$(m.Scope scope$) => ({
      Key? key,
      required List tabs,
      TabController? controller,
      bool? isScrollable,
      EdgeInsetsGeometry? padding,
      Color? indicatorColor,
      bool? automaticIndicatorColorAdjustment,
      double? indicatorWeight,
      EdgeInsetsGeometry? indicatorPadding,
      Decoration? indicator,
      TabBarIndicatorSize? indicatorSize,
      Color? dividerColor,
      Color? labelColor,
      TextStyle? labelStyle,
      EdgeInsetsGeometry? labelPadding,
      Color? unselectedLabelColor,
      TextStyle? unselectedLabelStyle,
      DragStartBehavior? dragStartBehavior,
      MaterialStateProperty<Color>? overlayColor,
      MouseCursor? mouseCursor,
      bool? enableFeedback,
      m.FunctionPointer? onTap,
      ScrollPhysics? physics,
      InteractiveInkFeatureFactory? splashFactory,
      BorderRadius? splashBorderRadius,
    }) {
      void onTapProxy(int onTap_value$) => scope$.engine.callFunctionPointer(
            scope$,
            onTap!,
            [onTap_value$],
            {},
          );
      return TabBar(
        automaticIndicatorColorAdjustment:
            automaticIndicatorColorAdjustment ?? true,
        controller: controller,
        dividerColor: dividerColor,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        enableFeedback: enableFeedback,
        indicator: indicator,
        indicatorColor: indicatorColor,
        indicatorPadding: indicatorPadding ?? EdgeInsets.zero,
        indicatorSize: indicatorSize,
        indicatorWeight: indicatorWeight ?? 2.0,
        isScrollable: isScrollable ?? false,
        key: key,
        labelColor: labelColor,
        labelPadding: labelPadding,
        labelStyle: labelStyle,
        mouseCursor: mouseCursor,
        onTap: onTap == null ? null : onTapProxy,
        overlayColor: overlayColor,
        padding: padding,
        physics: physics,
        splashBorderRadius: splashBorderRadius,
        splashFactory: splashFactory,
        tabs: List.from(tabs),
        unselectedLabelColor: unselectedLabelColor,
        unselectedLabelStyle: unselectedLabelStyle,
      );
    };
Function _TabBarView__$(m.Scope scope$) => ({
      Key? key,
      required List children,
      TabController? controller,
      ScrollPhysics? physics,
      DragStartBehavior? dragStartBehavior,
      double? viewportFraction,
      Clip? clipBehavior,
    }) {
      return TabBarView(
        children: List.from(children),
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        controller: controller,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        key: key,
        physics: physics,
        viewportFraction: viewportFraction ?? 1.0,
      );
    };
