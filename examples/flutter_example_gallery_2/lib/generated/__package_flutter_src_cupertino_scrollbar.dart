// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/scrollbar.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/scrollbar.dart',
  {'CupertinoScrollbar.': _CupertinoScrollbar__$},
  {},
  {},
);
Function _CupertinoScrollbar__$(m.Scope scope$) => ({
      Key? key,
      required Widget child,
      ScrollController? controller,
      bool? thumbVisibility,
      double? thickness,
      double? thicknessWhileDragging,
      Radius? radius,
      Radius? radiusWhileDragging,
      m.FunctionPointer? notificationPredicate,
      ScrollbarOrientation? scrollbarOrientation,
      bool? isAlwaysShown,
    }) {
      bool notificationPredicateProxy(
              ScrollNotification notificationPredicate_notification$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            notificationPredicate!,
            [notificationPredicate_notification$],
            {},
          );
      return CupertinoScrollbar(
        child: child,
        controller: controller,
        isAlwaysShown: isAlwaysShown,
        key: key,
        notificationPredicate:
            notificationPredicate == null ? null : notificationPredicateProxy,
        radius: radius ?? CupertinoScrollbar.defaultRadius,
        radiusWhileDragging: radiusWhileDragging ??
            CupertinoScrollbar.defaultRadiusWhileDragging,
        scrollbarOrientation: scrollbarOrientation,
        thickness: thickness ?? CupertinoScrollbar.defaultThickness,
        thicknessWhileDragging: thicknessWhileDragging ??
            CupertinoScrollbar.defaultThicknessWhileDragging,
        thumbVisibility: thumbVisibility,
      );
    };
