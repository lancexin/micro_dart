// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/switch.dart';
import 'dart:ui';
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/shadows.dart';
import 'package:flutter/src/material/switch_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/material/toggleable.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/switch.dart',
  {'Switch.': _Switch__$},
  {},
  {},
);
Function _Switch__$(m.Scope scope$) => ({
      Key? key,
      required bool value,
      required m.FunctionPointer? onChanged,
      Color? activeColor,
      Color? activeTrackColor,
      Color? inactiveThumbColor,
      Color? inactiveTrackColor,
      ImageProvider<Object>? activeThumbImage,
      m.FunctionPointer? onActiveThumbImageError,
      ImageProvider<Object>? inactiveThumbImage,
      m.FunctionPointer? onInactiveThumbImageError,
      MaterialStateProperty<Color>? thumbColor,
      MaterialStateProperty<Color>? trackColor,
      MaterialStateProperty<Color>? trackOutlineColor,
      MaterialStateProperty<Icon>? thumbIcon,
      MaterialTapTargetSize? materialTapTargetSize,
      DragStartBehavior? dragStartBehavior,
      MouseCursor? mouseCursor,
      Color? focusColor,
      Color? hoverColor,
      MaterialStateProperty<Color>? overlayColor,
      double? splashRadius,
      FocusNode? focusNode,
      m.FunctionPointer? onFocusChange,
      bool? autofocus,
    }) {
      void onActiveThumbImageErrorProxy(
        Object onActiveThumbImageError_exception$,
        StackTrace? onActiveThumbImageError_stackTrace$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onActiveThumbImageError!,
            [
              onActiveThumbImageError_exception$,
              onActiveThumbImageError_stackTrace$,
            ],
            {},
          );
      void onChangedProxy(bool onChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChanged!,
            [onChanged_value$],
            {},
          );
      void onFocusChangeProxy(bool onFocusChange_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onFocusChange!,
            [onFocusChange_value$],
            {},
          );
      void onInactiveThumbImageErrorProxy(
        Object onInactiveThumbImageError_exception$,
        StackTrace? onInactiveThumbImageError_stackTrace$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onInactiveThumbImageError!,
            [
              onInactiveThumbImageError_exception$,
              onInactiveThumbImageError_stackTrace$,
            ],
            {},
          );
      return Switch(
        activeColor: activeColor,
        activeThumbImage: activeThumbImage,
        activeTrackColor: activeTrackColor,
        autofocus: autofocus ?? false,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        focusColor: focusColor,
        focusNode: focusNode,
        hoverColor: hoverColor,
        inactiveThumbColor: inactiveThumbColor,
        inactiveThumbImage: inactiveThumbImage,
        inactiveTrackColor: inactiveTrackColor,
        key: key,
        materialTapTargetSize: materialTapTargetSize,
        mouseCursor: mouseCursor,
        onActiveThumbImageError: onActiveThumbImageError == null
            ? null
            : onActiveThumbImageErrorProxy,
        onChanged: onChanged == null ? null : onChangedProxy,
        onFocusChange: onFocusChange == null ? null : onFocusChangeProxy,
        onInactiveThumbImageError: onInactiveThumbImageError == null
            ? null
            : onInactiveThumbImageErrorProxy,
        overlayColor: overlayColor,
        splashRadius: splashRadius,
        thumbColor: thumbColor,
        thumbIcon: thumbIcon,
        trackColor: trackColor,
        trackOutlineColor: trackOutlineColor,
        value: value,
      );
    };
