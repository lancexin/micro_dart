// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/nav_bar.dart';
import 'dart:math';
import 'dart:ui' show ImageFilter;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/button.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/constants.dart';
import 'package:flutter/src/cupertino/icons.dart';
import 'package:flutter/src/cupertino/page_scaffold.dart';
import 'package:flutter/src/cupertino/route.dart';
import 'package:flutter/src/cupertino/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/nav_bar.dart',
  {
    'CupertinoNavigationBar.': _CupertinoNavigationBar__$,
    'CupertinoSliverNavigationBar.': _CupertinoSliverNavigationBar__$,
  },
  {},
  {},
);

class _HeroTag {
  const _HeroTag(this.navigator);

  final NavigatorState? navigator;

  // Let the Hero tag be described in tree dumps.
  @override
  String toString() =>
      'Default Hero tag for Cupertino navigation bars with navigator $navigator';

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other.runtimeType != runtimeType) {
      return false;
    }
    return other is _HeroTag && other.navigator == navigator;
  }

  @override
  int get hashCode => identityHashCode(navigator);
}

const _HeroTag _defaultHeroTag = _HeroTag(null);
const Color _kDefaultNavBarBorderColor = Color(0x4D000000);

const Border _kDefaultNavBarBorder = Border(
  bottom: BorderSide(
    color: _kDefaultNavBarBorderColor,
    width: 0.0, // 0.0 means one physical pixel
  ),
);

Function _CupertinoNavigationBar__$(m.Scope scope$) => ({
      Key? key,
      Widget? leading,
      bool? automaticallyImplyLeading,
      bool? automaticallyImplyMiddle,
      String? previousPageTitle,
      Widget? middle,
      Widget? trailing,
      Border? border,
      Color? backgroundColor,
      Brightness? brightness,
      EdgeInsetsDirectional? padding,
      bool? transitionBetweenRoutes,
      Object? heroTag,
    }) {
      return CupertinoNavigationBar(
        automaticallyImplyLeading: automaticallyImplyLeading ?? true,
        automaticallyImplyMiddle: automaticallyImplyMiddle ?? true,
        backgroundColor: backgroundColor,
        border: border ??
            const Border(
              bottom: BorderSide(
                color: Color(0x4D000000),
                width: 0.0, // 0.0 means one physical pixel
              ),
            ),
        brightness: brightness,
        heroTag: heroTag ?? _defaultHeroTag,
        key: key,
        leading: leading,
        middle: middle,
        padding: padding,
        previousPageTitle: previousPageTitle,
        trailing: trailing,
        transitionBetweenRoutes: transitionBetweenRoutes ?? true,
      );
    };
Function _CupertinoSliverNavigationBar__$(m.Scope scope$) => ({
      Key? key,
      Widget? largeTitle,
      Widget? leading,
      bool? automaticallyImplyLeading,
      bool? automaticallyImplyTitle,
      bool? alwaysShowMiddle,
      String? previousPageTitle,
      Widget? middle,
      Widget? trailing,
      Border? border,
      Color? backgroundColor,
      Brightness? brightness,
      EdgeInsetsDirectional? padding,
      bool? transitionBetweenRoutes,
      Object? heroTag,
      bool? stretch,
    }) {
      return CupertinoSliverNavigationBar(
        alwaysShowMiddle: alwaysShowMiddle ?? true,
        automaticallyImplyLeading: automaticallyImplyLeading ?? true,
        automaticallyImplyTitle: automaticallyImplyTitle ?? true,
        backgroundColor: backgroundColor,
        border: border ?? _kDefaultNavBarBorder,
        brightness: brightness,
        heroTag: heroTag ?? _defaultHeroTag,
        key: key,
        largeTitle: largeTitle,
        leading: leading,
        middle: middle,
        padding: padding,
        previousPageTitle: previousPageTitle,
        stretch: stretch ?? false,
        trailing: trailing,
        transitionBetweenRoutes: transitionBetweenRoutes ?? true,
      );
    };
