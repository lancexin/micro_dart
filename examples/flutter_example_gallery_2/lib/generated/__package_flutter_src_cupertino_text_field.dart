// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/text_field.dart';
import 'dart:ui' show BoxHeightStyle, BoxWidthStyle;
import 'package:flutter/foundation.dart' show defaultTargetPlatform;
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/adaptive_text_selection_toolbar.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/desktop_text_selection.dart';
import 'package:flutter/src/cupertino/icons.dart';
import 'package:flutter/src/cupertino/magnifier.dart';
import 'package:flutter/src/cupertino/spell_check_suggestions_toolbar.dart';
import 'package:flutter/src/cupertino/text_selection.dart';
import 'package:flutter/src/cupertino/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/text_field.dart',
  {'CupertinoTextField.': _CupertinoTextField__$},
  {},
  {},
);
Function _CupertinoTextField__$(m.Scope scope$) => ({
      Key? key,
      TextEditingController? controller,
      FocusNode? focusNode,
      UndoHistoryController? undoController,
      BoxDecoration? decoration,
      EdgeInsetsGeometry? padding,
      String? placeholder,
      TextStyle? placeholderStyle,
      Widget? prefix,
      OverlayVisibilityMode? prefixMode,
      Widget? suffix,
      OverlayVisibilityMode? suffixMode,
      OverlayVisibilityMode? clearButtonMode,
      TextInputType? keyboardType,
      TextInputAction? textInputAction,
      TextCapitalization? textCapitalization,
      TextStyle? style,
      StrutStyle? strutStyle,
      TextAlign? textAlign,
      TextAlignVertical? textAlignVertical,
      TextDirection? textDirection,
      bool? readOnly,
      ToolbarOptions? toolbarOptions,
      bool? showCursor,
      bool? autofocus,
      String? obscuringCharacter,
      bool? obscureText,
      bool? autocorrect,
      SmartDashesType? smartDashesType,
      SmartQuotesType? smartQuotesType,
      bool? enableSuggestions,
      int? maxLines,
      int? minLines,
      bool? expands,
      int? maxLength,
      MaxLengthEnforcement? maxLengthEnforcement,
      m.FunctionPointer? onChanged,
      m.FunctionPointer? onEditingComplete,
      m.FunctionPointer? onSubmitted,
      m.FunctionPointer? onTapOutside,
      List? inputFormatters,
      bool? enabled,
      double? cursorWidth,
      double? cursorHeight,
      Radius? cursorRadius,
      bool? cursorOpacityAnimates,
      Color? cursorColor,
      BoxHeightStyle? selectionHeightStyle,
      BoxWidthStyle? selectionWidthStyle,
      Brightness? keyboardAppearance,
      EdgeInsets? scrollPadding,
      DragStartBehavior? dragStartBehavior,
      bool? enableInteractiveSelection,
      TextSelectionControls? selectionControls,
      m.FunctionPointer? onTap,
      ScrollController? scrollController,
      ScrollPhysics? scrollPhysics,
      Iterable? autofillHints,
      ContentInsertionConfiguration? contentInsertionConfiguration,
      Clip? clipBehavior,
      String? restorationId,
      bool? scribbleEnabled,
      bool? enableIMEPersonalizedLearning,
      m.FunctionPointer? contextMenuBuilder,
      SpellCheckConfiguration? spellCheckConfiguration,
      TextMagnifierConfiguration? magnifierConfiguration,
    }) {
      Widget contextMenuBuilderProxy(
        BuildContext contextMenuBuilder_context$,
        EditableTextState contextMenuBuilder_editableTextState$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            contextMenuBuilder!,
            [
              contextMenuBuilder_context$,
              contextMenuBuilder_editableTextState$,
            ],
            {},
          );
      void onChangedProxy(String onChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChanged!,
            [onChanged_value$],
            {},
          );
      void onEditingCompleteProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onEditingComplete!,
            [],
            {},
          );
      void onSubmittedProxy(String onSubmitted_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSubmitted!,
            [onSubmitted_value$],
            {},
          );
      void onTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTap!,
            [],
            {},
          );
      void onTapOutsideProxy(PointerDownEvent onTapOutside_event$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onTapOutside!,
            [onTapOutside_event$],
            {},
          );
      return CupertinoTextField(
        autocorrect: autocorrect ?? true,
        autofillHints: autofillHints == null
            ? const <String>[]
            : Iterable.castFrom(autofillHints),
        autofocus: autofocus ?? false,
        clearButtonMode: clearButtonMode ?? OverlayVisibilityMode.never,
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        contentInsertionConfiguration: contentInsertionConfiguration,
        contextMenuBuilder: contextMenuBuilder == null
            ? (BuildContext context, EditableTextState editableTextState) {
                return CupertinoAdaptiveTextSelectionToolbar.editableText(
                  editableTextState: editableTextState,
                );
              }
            : contextMenuBuilderProxy,
        controller: controller,
        cursorColor: cursorColor,
        cursorHeight: cursorHeight,
        cursorOpacityAnimates: cursorOpacityAnimates ?? true,
        cursorRadius: cursorRadius ?? const Radius.circular(2.0),
        cursorWidth: cursorWidth ?? 2.0,
        decoration: decoration ??
            const BoxDecoration(
              color: CupertinoDynamicColor.withBrightness(
                color: CupertinoColors.white,
                darkColor: CupertinoColors.black,
              ),
              border: Border(
                top: BorderSide(
                  color: CupertinoDynamicColor.withBrightness(
                    color: Color(0x33000000),
                    darkColor: Color(0x33FFFFFF),
                  ),
                  width: 0.0,
                ),
                bottom: BorderSide(
                  color: CupertinoDynamicColor.withBrightness(
                    color: Color(0x33000000),
                    darkColor: Color(0x33FFFFFF),
                  ),
                  width: 0.0,
                ),
                left: BorderSide(
                  color: CupertinoDynamicColor.withBrightness(
                    color: Color(0x33000000),
                    darkColor: Color(0x33FFFFFF),
                  ),
                  width: 0.0,
                ),
                right: BorderSide(
                  color: CupertinoDynamicColor.withBrightness(
                    color: Color(0x33000000),
                    darkColor: Color(0x33FFFFFF),
                  ),
                  width: 0.0,
                ),
              ),
              borderRadius: BorderRadius.all(Radius.circular(5.0)),
            ),
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        enableIMEPersonalizedLearning: enableIMEPersonalizedLearning ?? true,
        enableInteractiveSelection: enableInteractiveSelection,
        enableSuggestions: enableSuggestions ?? true,
        enabled: enabled,
        expands: expands ?? false,
        focusNode: focusNode,
        inputFormatters:
            inputFormatters == null ? null : List.from(inputFormatters),
        key: key,
        keyboardAppearance: keyboardAppearance,
        keyboardType: keyboardType,
        magnifierConfiguration: magnifierConfiguration,
        maxLength: maxLength,
        maxLengthEnforcement: maxLengthEnforcement,
        maxLines: maxLines ?? 1,
        minLines: minLines,
        obscureText: obscureText ?? false,
        obscuringCharacter: obscuringCharacter ?? 'â€¢',
        onChanged: onChanged == null ? null : onChangedProxy,
        onEditingComplete:
            onEditingComplete == null ? null : onEditingCompleteProxy,
        onSubmitted: onSubmitted == null ? null : onSubmittedProxy,
        onTap: onTap == null ? null : onTapProxy,
        onTapOutside: onTapOutside == null ? null : onTapOutsideProxy,
        padding: padding ?? const EdgeInsets.all(7.0),
        placeholder: placeholder,
        placeholderStyle: placeholderStyle ??
            const TextStyle(
                fontWeight: FontWeight.w400,
                color: CupertinoColors.placeholderText),
        prefix: prefix,
        prefixMode: prefixMode ?? OverlayVisibilityMode.always,
        readOnly: readOnly ?? false,
        restorationId: restorationId,
        scribbleEnabled: scribbleEnabled ?? true,
        scrollController: scrollController,
        scrollPadding: scrollPadding ?? const EdgeInsets.all(20.0),
        scrollPhysics: scrollPhysics,
        selectionControls: selectionControls,
        selectionHeightStyle: selectionHeightStyle ?? BoxHeightStyle.tight,
        selectionWidthStyle: selectionWidthStyle ?? BoxWidthStyle.tight,
        showCursor: showCursor,
        smartDashesType: smartDashesType,
        smartQuotesType: smartQuotesType,
        spellCheckConfiguration: spellCheckConfiguration,
        strutStyle: strutStyle,
        style: style,
        suffix: suffix,
        suffixMode: suffixMode ?? OverlayVisibilityMode.always,
        textAlign: textAlign ?? TextAlign.start,
        textAlignVertical: textAlignVertical,
        textCapitalization: textCapitalization ?? TextCapitalization.none,
        textDirection: textDirection,
        textInputAction: textInputAction,
        toolbarOptions: toolbarOptions,
        undoController: undoController,
      );
    };
