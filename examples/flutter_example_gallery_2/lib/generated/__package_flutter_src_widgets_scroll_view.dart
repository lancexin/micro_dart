// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/scroll_view.dart';
import 'dart:math';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/focus_scope.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/media_query.dart';
import 'package:flutter/src/widgets/notification_listener.dart';
import 'package:flutter/src/widgets/primary_scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_delegate.dart';
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/scrollable.dart';
import 'package:flutter/src/widgets/sliver.dart';
import 'package:flutter/src/widgets/sliver_prototype_extent_list.dart';
import 'package:flutter/src/widgets/viewport.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/scroll_view.dart',
  {
    'CustomScrollView.': _CustomScrollView__$,
    'ListView.': _ListView__$,
    'ListView.builder': _ListView_builder_$,
    'ListView.separated': _ListView_separated_$,
    'GridView.builder': _GridView_builder_$,
    'GridView.count': _GridView_count_$,
  },
  {},
  {},
);
Function _CustomScrollView__$(m.Scope scope$) => ({
      Key? key,
      Axis? scrollDirection,
      bool? reverse,
      ScrollController? controller,
      bool? primary,
      ScrollPhysics? physics,
      ScrollBehavior? scrollBehavior,
      bool? shrinkWrap,
      Key? center,
      double? anchor,
      double? cacheExtent,
      List? slivers,
      int? semanticChildCount,
      DragStartBehavior? dragStartBehavior,
      ScrollViewKeyboardDismissBehavior? keyboardDismissBehavior,
      String? restorationId,
      Clip? clipBehavior,
    }) {
      return CustomScrollView(
        anchor: anchor ?? 0.0,
        cacheExtent: cacheExtent,
        center: center,
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        controller: controller,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        key: key,
        keyboardDismissBehavior:
            keyboardDismissBehavior ?? ScrollViewKeyboardDismissBehavior.manual,
        physics: physics,
        primary: primary,
        restorationId: restorationId,
        reverse: reverse ?? false,
        scrollBehavior: scrollBehavior,
        scrollDirection: scrollDirection ?? Axis.vertical,
        semanticChildCount: semanticChildCount,
        shrinkWrap: shrinkWrap ?? false,
        slivers: slivers == null ? const <Widget>[] : List.from(slivers),
      );
    };
Function _ListView__$(m.Scope scope$) => ({
      Key? key,
      Axis? scrollDirection,
      bool? reverse,
      ScrollController? controller,
      bool? primary,
      ScrollPhysics? physics,
      bool? shrinkWrap,
      EdgeInsetsGeometry? padding,
      double? itemExtent,
      Widget? prototypeItem,
      bool? addAutomaticKeepAlives,
      bool? addRepaintBoundaries,
      bool? addSemanticIndexes,
      double? cacheExtent,
      List? children,
      int? semanticChildCount,
      DragStartBehavior? dragStartBehavior,
      ScrollViewKeyboardDismissBehavior? keyboardDismissBehavior,
      String? restorationId,
      Clip? clipBehavior,
    }) {
      return ListView(
        addAutomaticKeepAlives: addAutomaticKeepAlives ?? true,
        addRepaintBoundaries: addRepaintBoundaries ?? true,
        addSemanticIndexes: addSemanticIndexes ?? true,
        cacheExtent: cacheExtent,
        children: children == null ? const <Widget>[] : List.from(children),
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        controller: controller,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        itemExtent: itemExtent,
        key: key,
        keyboardDismissBehavior:
            keyboardDismissBehavior ?? ScrollViewKeyboardDismissBehavior.manual,
        padding: padding,
        physics: physics,
        primary: primary,
        prototypeItem: prototypeItem,
        restorationId: restorationId,
        reverse: reverse ?? false,
        scrollDirection: scrollDirection ?? Axis.vertical,
        semanticChildCount: semanticChildCount,
        shrinkWrap: shrinkWrap ?? false,
      );
    };
Function _ListView_builder_$(m.Scope scope$) => ({
      Key? key,
      Axis? scrollDirection,
      bool? reverse,
      ScrollController? controller,
      bool? primary,
      ScrollPhysics? physics,
      bool? shrinkWrap,
      EdgeInsetsGeometry? padding,
      double? itemExtent,
      Widget? prototypeItem,
      required m.FunctionPointer itemBuilder,
      m.FunctionPointer? findChildIndexCallback,
      int? itemCount,
      bool? addAutomaticKeepAlives,
      bool? addRepaintBoundaries,
      bool? addSemanticIndexes,
      double? cacheExtent,
      int? semanticChildCount,
      DragStartBehavior? dragStartBehavior,
      ScrollViewKeyboardDismissBehavior? keyboardDismissBehavior,
      String? restorationId,
      Clip? clipBehavior,
    }) {
      int? findChildIndexCallbackProxy(Key findChildIndexCallback_key$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            findChildIndexCallback!,
            [findChildIndexCallback_key$],
            {},
          );
      Widget? itemBuilderProxy(
        BuildContext itemBuilder_context$,
        int itemBuilder_index$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            itemBuilder,
            [
              itemBuilder_context$,
              itemBuilder_index$,
            ],
            {},
          );
      return ListView.builder(
        addAutomaticKeepAlives: addAutomaticKeepAlives ?? true,
        addRepaintBoundaries: addRepaintBoundaries ?? true,
        addSemanticIndexes: addSemanticIndexes ?? true,
        cacheExtent: cacheExtent,
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        controller: controller,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        findChildIndexCallback:
            findChildIndexCallback == null ? null : findChildIndexCallbackProxy,
        itemBuilder: itemBuilderProxy,
        itemCount: itemCount,
        itemExtent: itemExtent,
        key: key,
        keyboardDismissBehavior:
            keyboardDismissBehavior ?? ScrollViewKeyboardDismissBehavior.manual,
        padding: padding,
        physics: physics,
        primary: primary,
        prototypeItem: prototypeItem,
        restorationId: restorationId,
        reverse: reverse ?? false,
        scrollDirection: scrollDirection ?? Axis.vertical,
        semanticChildCount: semanticChildCount,
        shrinkWrap: shrinkWrap ?? false,
      );
    };
Function _ListView_separated_$(m.Scope scope$) => ({
      Key? key,
      Axis? scrollDirection,
      bool? reverse,
      ScrollController? controller,
      bool? primary,
      ScrollPhysics? physics,
      bool? shrinkWrap,
      EdgeInsetsGeometry? padding,
      required m.FunctionPointer itemBuilder,
      m.FunctionPointer? findChildIndexCallback,
      required m.FunctionPointer separatorBuilder,
      required int itemCount,
      bool? addAutomaticKeepAlives,
      bool? addRepaintBoundaries,
      bool? addSemanticIndexes,
      double? cacheExtent,
      DragStartBehavior? dragStartBehavior,
      ScrollViewKeyboardDismissBehavior? keyboardDismissBehavior,
      String? restorationId,
      Clip? clipBehavior,
    }) {
      int? findChildIndexCallbackProxy(Key findChildIndexCallback_key$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            findChildIndexCallback!,
            [findChildIndexCallback_key$],
            {},
          );
      Widget? itemBuilderProxy(
        BuildContext itemBuilder_context$,
        int itemBuilder_index$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            itemBuilder,
            [
              itemBuilder_context$,
              itemBuilder_index$,
            ],
            {},
          );
      Widget separatorBuilderProxy(
        BuildContext separatorBuilder_context$,
        int separatorBuilder_index$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            separatorBuilder,
            [
              separatorBuilder_context$,
              separatorBuilder_index$,
            ],
            {},
          );
      return ListView.separated(
        addAutomaticKeepAlives: addAutomaticKeepAlives ?? true,
        addRepaintBoundaries: addRepaintBoundaries ?? true,
        addSemanticIndexes: addSemanticIndexes ?? true,
        cacheExtent: cacheExtent,
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        controller: controller,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        findChildIndexCallback:
            findChildIndexCallback == null ? null : findChildIndexCallbackProxy,
        itemBuilder: itemBuilderProxy,
        itemCount: itemCount,
        key: key,
        keyboardDismissBehavior:
            keyboardDismissBehavior ?? ScrollViewKeyboardDismissBehavior.manual,
        padding: padding,
        physics: physics,
        primary: primary,
        restorationId: restorationId,
        reverse: reverse ?? false,
        scrollDirection: scrollDirection ?? Axis.vertical,
        separatorBuilder: separatorBuilderProxy,
        shrinkWrap: shrinkWrap ?? false,
      );
    };
Function _GridView_builder_$(m.Scope scope$) => ({
      Key? key,
      Axis? scrollDirection,
      bool? reverse,
      ScrollController? controller,
      bool? primary,
      ScrollPhysics? physics,
      bool? shrinkWrap,
      EdgeInsetsGeometry? padding,
      required SliverGridDelegate gridDelegate,
      required m.FunctionPointer itemBuilder,
      m.FunctionPointer? findChildIndexCallback,
      int? itemCount,
      bool? addAutomaticKeepAlives,
      bool? addRepaintBoundaries,
      bool? addSemanticIndexes,
      double? cacheExtent,
      int? semanticChildCount,
      DragStartBehavior? dragStartBehavior,
      ScrollViewKeyboardDismissBehavior? keyboardDismissBehavior,
      String? restorationId,
      Clip? clipBehavior,
    }) {
      int? findChildIndexCallbackProxy(Key findChildIndexCallback_key$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            findChildIndexCallback!,
            [findChildIndexCallback_key$],
            {},
          );
      Widget? itemBuilderProxy(
        BuildContext itemBuilder_context$,
        int itemBuilder_index$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            itemBuilder,
            [
              itemBuilder_context$,
              itemBuilder_index$,
            ],
            {},
          );
      return GridView.builder(
        addAutomaticKeepAlives: addAutomaticKeepAlives ?? true,
        addRepaintBoundaries: addRepaintBoundaries ?? true,
        addSemanticIndexes: addSemanticIndexes ?? true,
        cacheExtent: cacheExtent,
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        controller: controller,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        findChildIndexCallback:
            findChildIndexCallback == null ? null : findChildIndexCallbackProxy,
        gridDelegate: gridDelegate,
        itemBuilder: itemBuilderProxy,
        itemCount: itemCount,
        key: key,
        keyboardDismissBehavior:
            keyboardDismissBehavior ?? ScrollViewKeyboardDismissBehavior.manual,
        padding: padding,
        physics: physics,
        primary: primary,
        restorationId: restorationId,
        reverse: reverse ?? false,
        scrollDirection: scrollDirection ?? Axis.vertical,
        semanticChildCount: semanticChildCount,
        shrinkWrap: shrinkWrap ?? false,
      );
    };
Function _GridView_count_$(m.Scope scope$) => GridView.count;
