// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/context_menu.dart';
import 'dart:math';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart' show kMinFlingVelocity;
import 'package:flutter/scheduler.dart';
import 'package:flutter/services.dart' show HapticFeedback;
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/context_menu.dart',
  {'CupertinoContextMenu.': _CupertinoContextMenu__$},
  {},
  {},
);
Function _CupertinoContextMenu__$(m.Scope scope$) => ({
      Key? key,
      required List actions,
      required Widget child,
      bool? enableHapticFeedback,
      m.FunctionPointer? previewBuilder,
    }) {
      Widget previewBuilderProxy(
        BuildContext previewBuilder_context$,
        Animation<double> previewBuilder_animation$,
        Widget previewBuilder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            previewBuilder!,
            [
              previewBuilder_context$,
              previewBuilder_animation$,
              previewBuilder_child$,
            ],
            {},
          );
      return CupertinoContextMenu(
        actions: List.from(actions),
        child: child,
        enableHapticFeedback: enableHapticFeedback ?? false,
        key: key,
        previewBuilder: previewBuilder == null
            ? (BuildContext context, Animation<double> animation,
                Widget child) {
                return FittedBox(
                  fit: BoxFit.cover,
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(12.0 * animation.value),
                    child: child,
                  ),
                );
              }
            : previewBuilderProxy,
      );
    };
