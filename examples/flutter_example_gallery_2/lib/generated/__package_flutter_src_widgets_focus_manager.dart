// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/focus_manager.dart';
import 'dart:async';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/binding.dart';
import 'package:flutter/src/widgets/focus_scope.dart';
import 'package:flutter/src/widgets/focus_traversal.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/focus_manager.dart',
  {'FocusNode.': _FocusNode__$},
  {},
  {
    'FocusNode': m.ClassMirror(
      'FocusNode',
      {
        'dispose': _FocusNode_dispose$,
        'requestFocus': _FocusNode_requestFocus$,
      },
      {},
    )
  },
);
Function _FocusNode__$(m.Scope scope$) => ({
      String? debugLabel,
      m.FunctionPointer? onKey,
      m.FunctionPointer? onKeyEvent,
      bool? skipTraversal,
      bool? canRequestFocus,
      bool? descendantsAreFocusable,
      bool? descendantsAreTraversable,
    }) {
      KeyEventResult onKeyProxy(
        FocusNode onKey_node$,
        RawKeyEvent onKey_event$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onKey!,
            [
              onKey_node$,
              onKey_event$,
            ],
            {},
          );
      KeyEventResult onKeyEventProxy(
        FocusNode onKeyEvent_node$,
        KeyEvent onKeyEvent_event$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onKeyEvent!,
            [
              onKeyEvent_node$,
              onKeyEvent_event$,
            ],
            {},
          );
      return FocusNode(
        canRequestFocus: canRequestFocus ?? true,
        debugLabel: debugLabel,
        descendantsAreFocusable: descendantsAreFocusable ?? true,
        descendantsAreTraversable: descendantsAreTraversable ?? true,
        onKey: onKey == null ? null : onKeyProxy,
        onKeyEvent: onKeyEvent == null ? null : onKeyEventProxy,
        skipTraversal: skipTraversal ?? false,
      );
    };
Function _FocusNode_dispose$(
  m.Scope scope$,
  FocusNode target$,
) =>
    target$.dispose;
Function _FocusNode_requestFocus$(
  m.Scope scope$,
  FocusNode target$,
) =>
    target$.requestFocus;
