// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'dart:math';

const libraryMirror = m.LibraryMirror(
  'dart:math',
  {
    'pi': _pi$,
    'min': _min$,
    'max': _max$,
    'max<double>': _max$,
    'pow': _pow$,
    'tan': _tan$,
    'sqrt': _sqrt$,
    'Point.': _Point__$,
    'Random.': _Random__$,
  },
  {},
  {
    'Point': m.ClassMirror(
      'Point',
      {
        'x': _Point_x$,
        'y': _Point_y$,
      },
      {},
    ),
    'Random': m.ClassMirror(
      'Random',
      {'nextInt': _Random_nextInt$},
      {},
    ),
  },
);
Function _pi$(m.Scope scope$) => () => pi;
Function _min$<T extends num>(m.Scope scope$) => min<T>;
Function _max$<T extends num>(m.Scope scope$) => max<T>;
Function _pow$(m.Scope scope$) => pow;
Function _tan$(m.Scope scope$) => tan;
Function _sqrt$(m.Scope scope$) => sqrt;
Function _Point_x$<T extends num>(
  m.Scope scope$,
  Point<T> target$,
) =>
    () {
      return target$.x;
    };
Function _Point_y$<T extends num>(
  m.Scope scope$,
  Point<T> target$,
) =>
    () {
      return target$.y;
    };
Function _Point__$(m.Scope scope$) => <T extends num>(
      dynamic x,
      dynamic y,
    ) {
      return Point<T>(
        x,
        y,
      );
    };
Function _Random__$(m.Scope scope$) => ([int? seed]) {
      if (seed == null) {
        return Random();
      }
      return Random(seed!);
    };
Function _Random_nextInt$(
  m.Scope scope$,
  Random target$,
) =>
    target$.nextInt;
