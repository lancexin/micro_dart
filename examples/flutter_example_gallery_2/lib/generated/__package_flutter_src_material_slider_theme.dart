// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/slider_theme.dart';
import 'dart:math';
import 'dart:ui' show Path, lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/slider_theme.dart',
  {
    'SliderTheme.': _SliderTheme__$,
    'SliderThemeData.': _SliderThemeData__$,
    'RangeValues.': _RangeValues__$,
    'RangeLabels.': _RangeLabels__$,
  },
  {},
  {
    'SliderThemeData': m.ClassMirror(
      'SliderThemeData',
      {
        'thumbColor': _SliderThemeData_thumbColor$,
        'disabledThumbColor': _SliderThemeData_disabledThumbColor$,
        'valueIndicatorColor': _SliderThemeData_valueIndicatorColor$,
        'copyWith': _SliderThemeData_copyWith$,
      },
      {},
    ),
    'RangeValues': m.ClassMirror(
      'RangeValues',
      {
        'start': _RangeValues_start$,
        'end': _RangeValues_end$,
      },
      {},
    ),
  },
);
Function _SliderTheme__$(m.Scope scope$) => ({
      Key? key,
      required SliderThemeData data,
      required Widget child,
    }) {
      return SliderTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _SliderThemeData_thumbColor$(
  m.Scope scope$,
  SliderThemeData target$,
) =>
    () {
      return target$.thumbColor;
    };
Function _SliderThemeData_disabledThumbColor$(
  m.Scope scope$,
  SliderThemeData target$,
) =>
    () {
      return target$.disabledThumbColor;
    };
Function _SliderThemeData_valueIndicatorColor$(
  m.Scope scope$,
  SliderThemeData target$,
) =>
    () {
      return target$.valueIndicatorColor;
    };
Function _SliderThemeData__$(m.Scope scope$) => ({
      double? trackHeight,
      Color? activeTrackColor,
      Color? inactiveTrackColor,
      Color? secondaryActiveTrackColor,
      Color? disabledActiveTrackColor,
      Color? disabledInactiveTrackColor,
      Color? disabledSecondaryActiveTrackColor,
      Color? activeTickMarkColor,
      Color? inactiveTickMarkColor,
      Color? disabledActiveTickMarkColor,
      Color? disabledInactiveTickMarkColor,
      Color? thumbColor,
      Color? overlappingShapeStrokeColor,
      Color? disabledThumbColor,
      Color? overlayColor,
      Color? valueIndicatorColor,
      SliderComponentShape? overlayShape,
      SliderTickMarkShape? tickMarkShape,
      SliderComponentShape? thumbShape,
      SliderTrackShape? trackShape,
      SliderComponentShape? valueIndicatorShape,
      RangeSliderTickMarkShape? rangeTickMarkShape,
      RangeSliderThumbShape? rangeThumbShape,
      RangeSliderTrackShape? rangeTrackShape,
      RangeSliderValueIndicatorShape? rangeValueIndicatorShape,
      ShowValueIndicator? showValueIndicator,
      TextStyle? valueIndicatorTextStyle,
      double? minThumbSeparation,
      m.FunctionPointer? thumbSelector,
      MaterialStateProperty<MouseCursor>? mouseCursor,
    }) {
      Thumb? thumbSelectorProxy(
        TextDirection thumbSelector_textDirection$,
        RangeValues thumbSelector_values$,
        double thumbSelector_tapValue$,
        Size thumbSelector_thumbSize$,
        Size thumbSelector_trackSize$,
        double thumbSelector_dx$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            thumbSelector!,
            [
              thumbSelector_textDirection$,
              thumbSelector_values$,
              thumbSelector_tapValue$,
              thumbSelector_thumbSize$,
              thumbSelector_trackSize$,
              thumbSelector_dx$,
            ],
            {},
          );
      return SliderThemeData(
        activeTickMarkColor: activeTickMarkColor,
        activeTrackColor: activeTrackColor,
        disabledActiveTickMarkColor: disabledActiveTickMarkColor,
        disabledActiveTrackColor: disabledActiveTrackColor,
        disabledInactiveTickMarkColor: disabledInactiveTickMarkColor,
        disabledInactiveTrackColor: disabledInactiveTrackColor,
        disabledSecondaryActiveTrackColor: disabledSecondaryActiveTrackColor,
        disabledThumbColor: disabledThumbColor,
        inactiveTickMarkColor: inactiveTickMarkColor,
        inactiveTrackColor: inactiveTrackColor,
        minThumbSeparation: minThumbSeparation,
        mouseCursor: mouseCursor,
        overlappingShapeStrokeColor: overlappingShapeStrokeColor,
        overlayColor: overlayColor,
        overlayShape: overlayShape,
        rangeThumbShape: rangeThumbShape,
        rangeTickMarkShape: rangeTickMarkShape,
        rangeTrackShape: rangeTrackShape,
        rangeValueIndicatorShape: rangeValueIndicatorShape,
        secondaryActiveTrackColor: secondaryActiveTrackColor,
        showValueIndicator: showValueIndicator,
        thumbColor: thumbColor,
        thumbSelector: thumbSelector == null ? null : thumbSelectorProxy,
        thumbShape: thumbShape,
        tickMarkShape: tickMarkShape,
        trackHeight: trackHeight,
        trackShape: trackShape,
        valueIndicatorColor: valueIndicatorColor,
        valueIndicatorShape: valueIndicatorShape,
        valueIndicatorTextStyle: valueIndicatorTextStyle,
      );
    };
Function _SliderThemeData_copyWith$(
  m.Scope scope$,
  SliderThemeData target$,
) =>
    ({
      double? trackHeight,
      Color? activeTrackColor,
      Color? inactiveTrackColor,
      Color? secondaryActiveTrackColor,
      Color? disabledActiveTrackColor,
      Color? disabledInactiveTrackColor,
      Color? disabledSecondaryActiveTrackColor,
      Color? activeTickMarkColor,
      Color? inactiveTickMarkColor,
      Color? disabledActiveTickMarkColor,
      Color? disabledInactiveTickMarkColor,
      Color? thumbColor,
      Color? overlappingShapeStrokeColor,
      Color? disabledThumbColor,
      Color? overlayColor,
      Color? valueIndicatorColor,
      SliderComponentShape? overlayShape,
      SliderTickMarkShape? tickMarkShape,
      SliderComponentShape? thumbShape,
      SliderTrackShape? trackShape,
      SliderComponentShape? valueIndicatorShape,
      RangeSliderTickMarkShape? rangeTickMarkShape,
      RangeSliderThumbShape? rangeThumbShape,
      RangeSliderTrackShape? rangeTrackShape,
      RangeSliderValueIndicatorShape? rangeValueIndicatorShape,
      ShowValueIndicator? showValueIndicator,
      TextStyle? valueIndicatorTextStyle,
      double? minThumbSeparation,
      m.FunctionPointer? thumbSelector,
      MaterialStateProperty<MouseCursor>? mouseCursor,
    }) {
      Thumb? thumbSelectorProxy(
        TextDirection thumbSelector_textDirection$,
        RangeValues thumbSelector_values$,
        double thumbSelector_tapValue$,
        Size thumbSelector_thumbSize$,
        Size thumbSelector_trackSize$,
        double thumbSelector_dx$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            thumbSelector!,
            [
              thumbSelector_textDirection$,
              thumbSelector_values$,
              thumbSelector_tapValue$,
              thumbSelector_thumbSize$,
              thumbSelector_trackSize$,
              thumbSelector_dx$,
            ],
            {},
          );
      return target$.copyWith(
        activeTickMarkColor: activeTickMarkColor,
        activeTrackColor: activeTrackColor,
        disabledActiveTickMarkColor: disabledActiveTickMarkColor,
        disabledActiveTrackColor: disabledActiveTrackColor,
        disabledInactiveTickMarkColor: disabledInactiveTickMarkColor,
        disabledInactiveTrackColor: disabledInactiveTrackColor,
        disabledSecondaryActiveTrackColor: disabledSecondaryActiveTrackColor,
        disabledThumbColor: disabledThumbColor,
        inactiveTickMarkColor: inactiveTickMarkColor,
        inactiveTrackColor: inactiveTrackColor,
        minThumbSeparation: minThumbSeparation,
        mouseCursor: mouseCursor,
        overlappingShapeStrokeColor: overlappingShapeStrokeColor,
        overlayColor: overlayColor,
        overlayShape: overlayShape,
        rangeThumbShape: rangeThumbShape,
        rangeTickMarkShape: rangeTickMarkShape,
        rangeTrackShape: rangeTrackShape,
        rangeValueIndicatorShape: rangeValueIndicatorShape,
        secondaryActiveTrackColor: secondaryActiveTrackColor,
        showValueIndicator: showValueIndicator,
        thumbColor: thumbColor,
        thumbSelector: thumbSelector == null ? null : thumbSelectorProxy,
        thumbShape: thumbShape,
        tickMarkShape: tickMarkShape,
        trackHeight: trackHeight,
        trackShape: trackShape,
        valueIndicatorColor: valueIndicatorColor,
        valueIndicatorShape: valueIndicatorShape,
        valueIndicatorTextStyle: valueIndicatorTextStyle,
      );
    };
Function _RangeValues_start$(
  m.Scope scope$,
  RangeValues target$,
) =>
    () {
      return target$.start;
    };
Function _RangeValues_end$(
  m.Scope scope$,
  RangeValues target$,
) =>
    () {
      return target$.end;
    };
Function _RangeValues__$(m.Scope scope$) => (
      double start,
      double end,
    ) {
      return RangeValues(
        start,
        end,
      );
    };
Function _RangeLabels__$(m.Scope scope$) => (
      String start,
      String end,
    ) {
      return RangeLabels(
        start,
        end,
      );
    };
