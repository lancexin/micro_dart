// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/time_picker.dart';
import 'dart:async';
import 'dart:math';
import 'dart:ui';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/curves.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/dialog.dart';
import 'package:flutter/src/material/feedback.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/input_border.dart';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/text_button.dart';
import 'package:flutter/src/material/text_form_field.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/material/time.dart';
import 'package:flutter/src/material/time_picker_theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/time_picker.dart',
  {'TimePickerDialog.': _TimePickerDialog__$},
  {},
  {},
);
Function _TimePickerDialog__$(m.Scope scope$) => ({
      Key? key,
      required TimeOfDay initialTime,
      String? cancelText,
      String? confirmText,
      String? helpText,
      String? errorInvalidText,
      String? hourLabelText,
      String? minuteLabelText,
      String? restorationId,
      TimePickerEntryMode? initialEntryMode,
      Orientation? orientation,
      m.FunctionPointer? onEntryModeChanged,
    }) {
      void onEntryModeChangedProxy(
              TimePickerEntryMode onEntryModeChanged_$p0$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onEntryModeChanged!,
            [onEntryModeChanged_$p0$],
            {},
          );
      return TimePickerDialog(
        cancelText: cancelText,
        confirmText: confirmText,
        errorInvalidText: errorInvalidText,
        helpText: helpText,
        hourLabelText: hourLabelText,
        initialEntryMode: initialEntryMode ?? TimePickerEntryMode.dial,
        initialTime: initialTime,
        key: key,
        minuteLabelText: minuteLabelText,
        onEntryModeChanged:
            onEntryModeChanged == null ? null : onEntryModeChangedProxy,
        orientation: orientation,
        restorationId: restorationId,
      );
    };
