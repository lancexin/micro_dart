// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/animation/curves.dart';
import 'dart:math';
import 'dart:ui';
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/animation/curves.dart',
  {
    'Interval.': _Interval__$,
    'Cubic.': _Cubic__$,
    'Curves.linear': _Curves_linear$,
    'Curves.decelerate': _Curves_decelerate$,
    'Curves.ease': _Curves_ease$,
    'Curves.easeIn': _Curves_easeIn$,
    'Curves.easeOut': _Curves_easeOut$,
    'Curves.easeInOut': _Curves_easeInOut$,
    'Curves.easeInOutCubic': _Curves_easeInOutCubic$,
    'Curves.fastOutSlowIn': _Curves_fastOutSlowIn$,
  },
  {},
  {
    'Curve': m.ClassMirror(
      'Curve',
      {
        'flipped': _Curve_flipped$,
        'transform': _Curve_transform$,
      },
      {},
    )
  },
);
Function _Curve_flipped$(
  m.Scope scope$,
  Curve target$,
) =>
    () {
      return target$.flipped;
    };
Function _Curve_transform$(
  m.Scope scope$,
  Curve target$,
) =>
    target$.transform;
Function _Interval__$(m.Scope scope$) => (
      double begin,
      double end, {
      Curve? curve,
    }) {
      return Interval(
        begin,
        end,
        curve: curve ?? Curves.linear,
      );
    };
Function _Cubic__$(m.Scope scope$) => (
      double a,
      double b,
      double c,
      double d,
    ) {
      return Cubic(
        a,
        b,
        c,
        d,
      );
    };
Function _Curves_linear$(m.Scope scope$) => () => Curves.linear;
Function _Curves_decelerate$(m.Scope scope$) => () => Curves.decelerate;
Function _Curves_ease$(m.Scope scope$) => () => Curves.ease;
Function _Curves_easeIn$(m.Scope scope$) => () => Curves.easeIn;
Function _Curves_easeOut$(m.Scope scope$) => () => Curves.easeOut;
Function _Curves_easeInOut$(m.Scope scope$) => () => Curves.easeInOut;
Function _Curves_easeInOutCubic$(m.Scope scope$) => () => Curves.easeInOutCubic;
Function _Curves_fastOutSlowIn$(m.Scope scope$) => () => Curves.fastOutSlowIn;
