// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/gestures/tap.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/gestures/arena.dart';
import 'package:flutter/src/gestures/constants.dart';
import 'package:flutter/src/gestures/events.dart';
import 'package:flutter/src/gestures/recognizer.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/gestures/tap.dart',
  {'TapGestureRecognizer.': _TapGestureRecognizer__$},
  {},
  {
    'TapUpDetails': m.ClassMirror(
      'TapUpDetails',
      {'globalPosition': _TapUpDetails_globalPosition$},
      {},
    )
  },
);
Function _TapUpDetails_globalPosition$(
  m.Scope scope$,
  TapUpDetails target$,
) =>
    () {
      return target$.globalPosition;
    };
Function _TapGestureRecognizer__$(m.Scope scope$) => ({
      Object? debugOwner,
      Set? supportedDevices,
      m.FunctionPointer? allowedButtonsFilter,
    }) {
      bool allowedButtonsFilterProxy(int allowedButtonsFilter_buttons$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            allowedButtonsFilter!,
            [allowedButtonsFilter_buttons$],
            {},
          );
      return TapGestureRecognizer(
        allowedButtonsFilter:
            allowedButtonsFilter == null ? null : allowedButtonsFilterProxy,
        debugOwner: debugOwner,
        supportedDevices:
            supportedDevices == null ? null : Set.from(supportedDevices),
      );
    };
