// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/input_chip.dart';
import 'package:flutter/foundation.dart' show clampDouble;
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/chip.dart';
import 'package:flutter/src/material/chip_theme.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/input_chip.dart',
  {'InputChip.': _InputChip__$},
  {},
  {},
);
Function _InputChip__$(m.Scope scope$) => ({
      Key? key,
      Widget? avatar,
      required Widget label,
      TextStyle? labelStyle,
      EdgeInsetsGeometry? labelPadding,
      bool? selected,
      bool? isEnabled,
      m.FunctionPointer? onSelected,
      Widget? deleteIcon,
      m.FunctionPointer? onDeleted,
      Color? deleteIconColor,
      String? deleteButtonTooltipMessage,
      m.FunctionPointer? onPressed,
      double? pressElevation,
      Color? disabledColor,
      Color? selectedColor,
      String? tooltip,
      BorderSide? side,
      OutlinedBorder? shape,
      Clip? clipBehavior,
      FocusNode? focusNode,
      bool? autofocus,
      Color? backgroundColor,
      EdgeInsetsGeometry? padding,
      VisualDensity? visualDensity,
      MaterialTapTargetSize? materialTapTargetSize,
      double? elevation,
      Color? shadowColor,
      Color? surfaceTintColor,
      IconThemeData? iconTheme,
      Color? selectedShadowColor,
      bool? showCheckmark,
      Color? checkmarkColor,
      ShapeBorder? avatarBorder,
      bool? useDeleteButtonTooltip,
    }) {
      void onDeletedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onDeleted!,
            [],
            {},
          );
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      void onSelectedProxy(bool onSelected_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSelected!,
            [onSelected_value$],
            {},
          );
      return InputChip(
        autofocus: autofocus ?? false,
        avatar: avatar,
        avatarBorder: avatarBorder ?? const CircleBorder(),
        backgroundColor: backgroundColor,
        checkmarkColor: checkmarkColor,
        clipBehavior: clipBehavior ?? Clip.none,
        deleteButtonTooltipMessage: deleteButtonTooltipMessage,
        deleteIcon: deleteIcon,
        deleteIconColor: deleteIconColor,
        disabledColor: disabledColor,
        elevation: elevation,
        focusNode: focusNode,
        iconTheme: iconTheme,
        isEnabled: isEnabled ?? true,
        key: key,
        label: label,
        labelPadding: labelPadding,
        labelStyle: labelStyle,
        materialTapTargetSize: materialTapTargetSize,
        onDeleted: onDeleted == null ? null : onDeletedProxy,
        onPressed: onPressed == null ? null : onPressedProxy,
        onSelected: onSelected == null ? null : onSelectedProxy,
        padding: padding,
        pressElevation: pressElevation,
        selected: selected ?? false,
        selectedColor: selectedColor,
        selectedShadowColor: selectedShadowColor,
        shadowColor: shadowColor,
        shape: shape,
        showCheckmark: showCheckmark,
        side: side,
        surfaceTintColor: surfaceTintColor,
        tooltip: tooltip,
        useDeleteButtonTooltip: useDeleteButtonTooltip ?? true,
        visualDensity: visualDensity,
      );
    };
