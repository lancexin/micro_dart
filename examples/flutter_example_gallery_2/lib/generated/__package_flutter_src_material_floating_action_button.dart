// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/floating_action_button.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/floating_action_button_theme.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/scaffold.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/material/tooltip.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/floating_action_button.dart',
  {
    'FloatingActionButton.': _FloatingActionButton__$,
    'FloatingActionButton.extended': _FloatingActionButton_extended_$,
  },
  {},
  {},
);
Function _FloatingActionButton__$(m.Scope scope$) => ({
      Key? key,
      Widget? child,
      String? tooltip,
      Color? foregroundColor,
      Color? backgroundColor,
      Color? focusColor,
      Color? hoverColor,
      Color? splashColor,
      Object? heroTag,
      double? elevation,
      double? focusElevation,
      double? hoverElevation,
      double? highlightElevation,
      double? disabledElevation,
      required m.FunctionPointer? onPressed,
      MouseCursor? mouseCursor,
      bool? mini,
      ShapeBorder? shape,
      Clip? clipBehavior,
      FocusNode? focusNode,
      bool? autofocus,
      MaterialTapTargetSize? materialTapTargetSize,
      bool? isExtended,
      bool? enableFeedback,
    }) {
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return FloatingActionButton(
        autofocus: autofocus ?? false,
        backgroundColor: backgroundColor,
        child: child,
        clipBehavior: clipBehavior ?? Clip.none,
        disabledElevation: disabledElevation,
        elevation: elevation,
        enableFeedback: enableFeedback,
        focusColor: focusColor,
        focusElevation: focusElevation,
        focusNode: focusNode,
        foregroundColor: foregroundColor,
        heroTag: heroTag,
        highlightElevation: highlightElevation,
        hoverColor: hoverColor,
        hoverElevation: hoverElevation,
        isExtended: isExtended ?? false,
        key: key,
        materialTapTargetSize: materialTapTargetSize,
        mini: mini ?? false,
        mouseCursor: mouseCursor,
        onPressed: onPressed == null ? null : onPressedProxy,
        shape: shape,
        splashColor: splashColor,
        tooltip: tooltip,
      );
    };
Function _FloatingActionButton_extended_$(m.Scope scope$) => ({
      Key? key,
      String? tooltip,
      Color? foregroundColor,
      Color? backgroundColor,
      Color? focusColor,
      Color? hoverColor,
      Object? heroTag,
      double? elevation,
      double? focusElevation,
      double? hoverElevation,
      Color? splashColor,
      double? highlightElevation,
      double? disabledElevation,
      required m.FunctionPointer? onPressed,
      MouseCursor? mouseCursor,
      ShapeBorder? shape,
      bool? isExtended,
      MaterialTapTargetSize? materialTapTargetSize,
      Clip? clipBehavior,
      FocusNode? focusNode,
      bool? autofocus,
      double? extendedIconLabelSpacing,
      EdgeInsetsGeometry? extendedPadding,
      TextStyle? extendedTextStyle,
      Widget? icon,
      required Widget label,
      bool? enableFeedback,
    }) {
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return FloatingActionButton.extended(
        autofocus: autofocus ?? false,
        backgroundColor: backgroundColor,
        clipBehavior: clipBehavior ?? Clip.none,
        disabledElevation: disabledElevation,
        elevation: elevation,
        enableFeedback: enableFeedback,
        extendedIconLabelSpacing: extendedIconLabelSpacing,
        extendedPadding: extendedPadding,
        extendedTextStyle: extendedTextStyle,
        focusColor: focusColor,
        focusElevation: focusElevation,
        focusNode: focusNode,
        foregroundColor: foregroundColor,
        heroTag: heroTag,
        highlightElevation: highlightElevation,
        hoverColor: hoverColor,
        hoverElevation: hoverElevation,
        icon: icon,
        isExtended: isExtended ?? true,
        key: key,
        label: label,
        materialTapTargetSize: materialTapTargetSize,
        mouseCursor: mouseCursor ?? SystemMouseCursors.click,
        onPressed: onPressed == null ? null : onPressedProxy,
        shape: shape,
        splashColor: splashColor,
        tooltip: tooltip,
      );
    };
