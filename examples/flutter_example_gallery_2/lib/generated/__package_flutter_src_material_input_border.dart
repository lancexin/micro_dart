// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/input_border.dart';
import 'dart:math';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart' show clampDouble;
import 'package:flutter/widgets.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/input_border.dart',
  {
    'InputBorder.none': _InputBorder_none$,
    'OutlineInputBorder.': _OutlineInputBorder__$,
  },
  {},
  {
    'InputBorder': m.ClassMirror(
      'InputBorder',
      {'borderSide': _InputBorder_borderSide$},
      {},
    ),
    'OutlineInputBorder': m.ClassMirror(
      'OutlineInputBorder',
      {
        'gapPadding': _OutlineInputBorder_gapPadding$,
        'borderRadius': _OutlineInputBorder_borderRadius$,
        'lerpFrom': _OutlineInputBorder_lerpFrom$,
        'lerpTo': _OutlineInputBorder_lerpTo$,
      },
      {},
    ),
  },
);
Function _InputBorder_none$(m.Scope scope$) => () => InputBorder.none;
Function _InputBorder_borderSide$(
  m.Scope scope$,
  InputBorder target$,
) =>
    () {
      return target$.borderSide;
    };
Function _OutlineInputBorder_gapPadding$(
  m.Scope scope$,
  OutlineInputBorder target$,
) =>
    () {
      return target$.gapPadding;
    };
Function _OutlineInputBorder_borderRadius$(
  m.Scope scope$,
  OutlineInputBorder target$,
) =>
    () {
      return target$.borderRadius;
    };
Function _OutlineInputBorder__$(m.Scope scope$) => ({
      BorderSide? borderSide,
      BorderRadius? borderRadius,
      double? gapPadding,
    }) {
      return OutlineInputBorder(
        borderRadius:
            borderRadius ?? const BorderRadius.all(Radius.circular(4.0)),
        borderSide: borderSide ?? const BorderSide(),
        gapPadding: gapPadding ?? 4.0,
      );
    };
Function _OutlineInputBorder_lerpFrom$(
  m.Scope scope$,
  OutlineInputBorder target$,
) =>
    target$.lerpFrom;
Function _OutlineInputBorder_lerpTo$(
  m.Scope scope$,
  OutlineInputBorder target$,
) =>
    target$.lerpTo;
