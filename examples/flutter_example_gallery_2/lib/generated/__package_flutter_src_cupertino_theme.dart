// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/theme.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/icon_theme_data.dart';
import 'package:flutter/src/cupertino/text_theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/theme.dart',
  {
    'CupertinoTheme.': _CupertinoTheme__$,
    'CupertinoTheme.of': _CupertinoTheme_of$,
    'CupertinoThemeData.': _CupertinoThemeData__$,
  },
  {},
  {
    'CupertinoThemeData': m.ClassMirror(
      'CupertinoThemeData',
      {
        'textTheme': _CupertinoThemeData_textTheme$,
        'copyWith': _CupertinoThemeData_copyWith$,
      },
      {},
    )
  },
);
Function _CupertinoTheme__$(m.Scope scope$) => ({
      Key? key,
      required CupertinoThemeData data,
      required Widget child,
    }) {
      return CupertinoTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _CupertinoTheme_of$(m.Scope scope$) => CupertinoTheme.of;
Function _CupertinoThemeData_textTheme$(
  m.Scope scope$,
  CupertinoThemeData target$,
) =>
    () {
      return target$.textTheme;
    };
Function _CupertinoThemeData__$(m.Scope scope$) => ({
      Brightness? brightness,
      Color? primaryColor,
      Color? primaryContrastingColor,
      CupertinoTextThemeData? textTheme,
      Color? barBackgroundColor,
      Color? scaffoldBackgroundColor,
      bool? applyThemeToAll,
    }) {
      return CupertinoThemeData(
        applyThemeToAll: applyThemeToAll,
        barBackgroundColor: barBackgroundColor,
        brightness: brightness,
        primaryColor: primaryColor,
        primaryContrastingColor: primaryContrastingColor,
        scaffoldBackgroundColor: scaffoldBackgroundColor,
        textTheme: textTheme,
      );
    };
Function _CupertinoThemeData_copyWith$(
  m.Scope scope$,
  CupertinoThemeData target$,
) =>
    target$.copyWith;
