// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/toggle_buttons.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/ink_ripple.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/text_button.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/material/toggle_buttons_theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/toggle_buttons.dart',
  {'ToggleButtons.': _ToggleButtons__$},
  {},
  {},
);
Function _ToggleButtons__$(m.Scope scope$) => ({
      Key? key,
      required List children,
      required List isSelected,
      m.FunctionPointer? onPressed,
      MouseCursor? mouseCursor,
      MaterialTapTargetSize? tapTargetSize,
      TextStyle? textStyle,
      BoxConstraints? constraints,
      Color? color,
      Color? selectedColor,
      Color? disabledColor,
      Color? fillColor,
      Color? focusColor,
      Color? highlightColor,
      Color? hoverColor,
      Color? splashColor,
      List? focusNodes,
      bool? renderBorder,
      Color? borderColor,
      Color? selectedBorderColor,
      Color? disabledBorderColor,
      BorderRadius? borderRadius,
      double? borderWidth,
      Axis? direction,
      VerticalDirection? verticalDirection,
    }) {
      void onPressedProxy(int onPressed_index$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [onPressed_index$],
            {},
          );
      return ToggleButtons(
        borderColor: borderColor,
        borderRadius: borderRadius,
        borderWidth: borderWidth,
        children: List.from(children),
        color: color,
        constraints: constraints,
        direction: direction ?? Axis.horizontal,
        disabledBorderColor: disabledBorderColor,
        disabledColor: disabledColor,
        fillColor: fillColor,
        focusColor: focusColor,
        focusNodes: focusNodes == null ? null : List.from(focusNodes),
        highlightColor: highlightColor,
        hoverColor: hoverColor,
        isSelected: List.from(isSelected),
        key: key,
        mouseCursor: mouseCursor,
        onPressed: onPressed == null ? null : onPressedProxy,
        renderBorder: renderBorder ?? true,
        selectedBorderColor: selectedBorderColor,
        selectedColor: selectedColor,
        splashColor: splashColor,
        tapTargetSize: tapTargetSize,
        textStyle: textStyle,
        verticalDirection: verticalDirection ?? VerticalDirection.down,
      );
    };
