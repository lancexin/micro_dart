// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/fade_in_image.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/image.dart';
import 'package:flutter/src/widgets/implicit_animations.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/fade_in_image.dart',
  {'FadeInImage.': _FadeInImage__$},
  {},
  {},
);
Function _FadeInImage__$(m.Scope scope$) => ({
      Key? key,
      required ImageProvider<Object> placeholder,
      m.FunctionPointer? placeholderErrorBuilder,
      required ImageProvider<Object> image,
      m.FunctionPointer? imageErrorBuilder,
      bool? excludeFromSemantics,
      String? imageSemanticLabel,
      Duration? fadeOutDuration,
      Curve? fadeOutCurve,
      Duration? fadeInDuration,
      Curve? fadeInCurve,
      double? width,
      double? height,
      BoxFit? fit,
      BoxFit? placeholderFit,
      FilterQuality? filterQuality,
      FilterQuality? placeholderFilterQuality,
      AlignmentGeometry? alignment,
      ImageRepeat? repeat,
      bool? matchTextDirection,
    }) {
      Widget imageErrorBuilderProxy(
        BuildContext imageErrorBuilder_context$,
        Object imageErrorBuilder_error$,
        StackTrace? imageErrorBuilder_stackTrace$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            imageErrorBuilder!,
            [
              imageErrorBuilder_context$,
              imageErrorBuilder_error$,
              imageErrorBuilder_stackTrace$,
            ],
            {},
          );
      Widget placeholderErrorBuilderProxy(
        BuildContext placeholderErrorBuilder_context$,
        Object placeholderErrorBuilder_error$,
        StackTrace? placeholderErrorBuilder_stackTrace$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            placeholderErrorBuilder!,
            [
              placeholderErrorBuilder_context$,
              placeholderErrorBuilder_error$,
              placeholderErrorBuilder_stackTrace$,
            ],
            {},
          );
      return FadeInImage(
        alignment: alignment ?? Alignment.center,
        excludeFromSemantics: excludeFromSemantics ?? false,
        fadeInCurve: fadeInCurve ?? Curves.easeIn,
        fadeInDuration: fadeInDuration ?? const Duration(milliseconds: 700),
        fadeOutCurve: fadeOutCurve ?? Curves.easeOut,
        fadeOutDuration: fadeOutDuration ?? const Duration(milliseconds: 300),
        filterQuality: filterQuality ?? FilterQuality.low,
        fit: fit,
        height: height,
        image: image,
        imageErrorBuilder:
            imageErrorBuilder == null ? null : imageErrorBuilderProxy,
        imageSemanticLabel: imageSemanticLabel,
        key: key,
        matchTextDirection: matchTextDirection ?? false,
        placeholder: placeholder,
        placeholderErrorBuilder: placeholderErrorBuilder == null
            ? null
            : placeholderErrorBuilderProxy,
        placeholderFilterQuality: placeholderFilterQuality,
        placeholderFit: placeholderFit,
        repeat: repeat ?? ImageRepeat.noRepeat,
        width: width,
      );
    };
