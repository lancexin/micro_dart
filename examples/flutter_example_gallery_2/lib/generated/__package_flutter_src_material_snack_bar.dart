// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/snack_bar.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/scaffold.dart';
import 'package:flutter/src/material/snack_bar_theme.dart';
import 'package:flutter/src/material/text_button.dart';
import 'package:flutter/src/material/text_button_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/snack_bar.dart',
  {
    'SnackBarAction.': _SnackBarAction__$,
    'SnackBar.': _SnackBar__$,
  },
  {},
  {},
);
Function _SnackBarAction__$(m.Scope scope$) => ({
      Key? key,
      Color? textColor,
      Color? disabledTextColor,
      Color? backgroundColor,
      Color? disabledBackgroundColor,
      required String label,
      required m.FunctionPointer onPressed,
    }) {
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed,
            [],
            {},
          );
      return SnackBarAction(
        backgroundColor: backgroundColor,
        disabledBackgroundColor: disabledBackgroundColor,
        disabledTextColor: disabledTextColor,
        key: key,
        label: label,
        onPressed: onPressedProxy,
        textColor: textColor,
      );
    };
Function _SnackBar__$(m.Scope scope$) => ({
      Key? key,
      required Widget content,
      Color? backgroundColor,
      double? elevation,
      EdgeInsetsGeometry? margin,
      EdgeInsetsGeometry? padding,
      double? width,
      ShapeBorder? shape,
      SnackBarBehavior? behavior,
      SnackBarAction? action,
      double? actionOverflowThreshold,
      bool? showCloseIcon,
      Color? closeIconColor,
      Duration? duration,
      Animation<double>? animation,
      m.FunctionPointer? onVisible,
      DismissDirection? dismissDirection,
      Clip? clipBehavior,
    }) {
      void onVisibleProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onVisible!,
            [],
            {},
          );
      return SnackBar(
        action: action,
        actionOverflowThreshold: actionOverflowThreshold,
        animation: animation,
        backgroundColor: backgroundColor,
        behavior: behavior,
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        closeIconColor: closeIconColor,
        content: content,
        dismissDirection: dismissDirection ?? DismissDirection.down,
        duration: duration ?? const Duration(milliseconds: 4000),
        elevation: elevation,
        key: key,
        margin: margin,
        onVisible: onVisible == null ? null : onVisibleProxy,
        padding: padding,
        shape: shape,
        showCloseIcon: showCloseIcon,
        width: width,
      );
    };
