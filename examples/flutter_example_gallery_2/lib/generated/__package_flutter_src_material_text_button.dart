// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/text_button.dart';
import 'dart:math';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/button_style_button.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/ink_ripple.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/text_button_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/text_button.dart',
  {
    'TextButton.': _TextButton__$,
    'TextButton.styleFrom': _TextButton_styleFrom$,
  },
  {},
  {},
);
Function _TextButton__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer? onPressed,
      m.FunctionPointer? onLongPress,
      m.FunctionPointer? onHover,
      m.FunctionPointer? onFocusChange,
      ButtonStyle? style,
      FocusNode? focusNode,
      bool? autofocus,
      Clip? clipBehavior,
      MaterialStatesController? statesController,
      required Widget child,
    }) {
      void onFocusChangeProxy(bool onFocusChange_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onFocusChange!,
            [onFocusChange_value$],
            {},
          );
      void onHoverProxy(bool onHover_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onHover!,
            [onHover_value$],
            {},
          );
      void onLongPressProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onLongPress!,
            [],
            {},
          );
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return TextButton(
        autofocus: autofocus ?? false,
        child: child,
        clipBehavior: clipBehavior ?? Clip.none,
        focusNode: focusNode,
        key: key,
        onFocusChange: onFocusChange == null ? null : onFocusChangeProxy,
        onHover: onHover == null ? null : onHoverProxy,
        onLongPress: onLongPress == null ? null : onLongPressProxy,
        onPressed: onPressed == null ? null : onPressedProxy,
        statesController: statesController,
        style: style,
      );
    };
Function _TextButton_styleFrom$(m.Scope scope$) => TextButton.styleFrom;
