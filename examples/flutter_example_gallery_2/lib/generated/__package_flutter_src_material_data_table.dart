// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/data_table.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/checkbox.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/data_table_theme.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/divider.dart';
import 'package:flutter/src/material/dropdown.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/tooltip.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/data_table.dart',
  {
    'DataColumn.': _DataColumn__$,
    'DataRow.byIndex': _DataRow_byIndex_$,
    'DataCell.': _DataCell__$,
  },
  {},
  {},
);
Function _DataColumn__$(m.Scope scope$) => ({
      required Widget label,
      String? tooltip,
      bool? numeric,
      m.FunctionPointer? onSort,
      MaterialStateProperty<MouseCursor>? mouseCursor,
    }) {
      void onSortProxy(
        int onSort_columnIndex$,
        bool onSort_ascending$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSort!,
            [
              onSort_columnIndex$,
              onSort_ascending$,
            ],
            {},
          );
      return DataColumn(
        label: label,
        mouseCursor: mouseCursor,
        numeric: numeric ?? false,
        onSort: onSort == null ? null : onSortProxy,
        tooltip: tooltip,
      );
    };
Function _DataRow_byIndex_$(m.Scope scope$) => ({
      int? index,
      bool? selected,
      m.FunctionPointer? onSelectChanged,
      m.FunctionPointer? onLongPress,
      MaterialStateProperty<Color>? color,
      MaterialStateProperty<MouseCursor>? mouseCursor,
      required List cells,
    }) {
      void onLongPressProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onLongPress!,
            [],
            {},
          );
      void onSelectChangedProxy(bool? onSelectChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSelectChanged!,
            [onSelectChanged_value$],
            {},
          );
      return DataRow.byIndex(
        cells: List.from(cells),
        color: color,
        index: index,
        mouseCursor: mouseCursor,
        onLongPress: onLongPress == null ? null : onLongPressProxy,
        onSelectChanged: onSelectChanged == null ? null : onSelectChangedProxy,
        selected: selected ?? false,
      );
    };
Function _DataCell__$(m.Scope scope$) => (
      Widget child, {
      bool? placeholder,
      bool? showEditIcon,
      m.FunctionPointer? onTap,
      m.FunctionPointer? onLongPress,
      m.FunctionPointer? onTapDown,
      m.FunctionPointer? onDoubleTap,
      m.FunctionPointer? onTapCancel,
    }) {
      void onDoubleTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onDoubleTap!,
            [],
            {},
          );
      void onLongPressProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onLongPress!,
            [],
            {},
          );
      void onTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTap!,
            [],
            {},
          );
      void onTapCancelProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTapCancel!,
            [],
            {},
          );
      void onTapDownProxy(TapDownDetails onTapDown_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onTapDown!,
            [onTapDown_details$],
            {},
          );
      return DataCell(
        child,
        onDoubleTap: onDoubleTap == null ? null : onDoubleTapProxy,
        onLongPress: onLongPress == null ? null : onLongPressProxy,
        onTap: onTap == null ? null : onTapProxy,
        onTapCancel: onTapCancel == null ? null : onTapCancelProxy,
        onTapDown: onTapDown == null ? null : onTapDownProxy,
        placeholder: placeholder ?? false,
        showEditIcon: showEditIcon ?? false,
      );
    };
