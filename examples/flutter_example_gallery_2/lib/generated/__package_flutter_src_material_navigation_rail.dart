// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/navigation_rail.dart';
import 'dart:ui';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/navigation_bar.dart';
import 'package:flutter/src/material/navigation_rail_theme.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/navigation_rail.dart',
  {
    'NavigationRail.': _NavigationRail__$,
    'NavigationRail.extendedAnimation': _NavigationRail_extendedAnimation$,
    'NavigationRailDestination.': _NavigationRailDestination__$,
    'NavigationRailLabelType.selected': _NavigationRailLabelType_selected$,
  },
  {},
  {},
);
Function _NavigationRail__$(m.Scope scope$) => ({
      Key? key,
      Color? backgroundColor,
      bool? extended,
      Widget? leading,
      Widget? trailing,
      required List destinations,
      required int? selectedIndex,
      m.FunctionPointer? onDestinationSelected,
      double? elevation,
      double? groupAlignment,
      NavigationRailLabelType? labelType,
      TextStyle? unselectedLabelTextStyle,
      TextStyle? selectedLabelTextStyle,
      IconThemeData? unselectedIconTheme,
      IconThemeData? selectedIconTheme,
      double? minWidth,
      double? minExtendedWidth,
      bool? useIndicator,
      Color? indicatorColor,
      ShapeBorder? indicatorShape,
    }) {
      void onDestinationSelectedProxy(int onDestinationSelected_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onDestinationSelected!,
            [onDestinationSelected_value$],
            {},
          );
      return NavigationRail(
        backgroundColor: backgroundColor,
        destinations: List.from(destinations),
        elevation: elevation,
        extended: extended ?? false,
        groupAlignment: groupAlignment,
        indicatorColor: indicatorColor,
        indicatorShape: indicatorShape,
        key: key,
        labelType: labelType,
        leading: leading,
        minExtendedWidth: minExtendedWidth,
        minWidth: minWidth,
        onDestinationSelected:
            onDestinationSelected == null ? null : onDestinationSelectedProxy,
        selectedIconTheme: selectedIconTheme,
        selectedIndex: selectedIndex,
        selectedLabelTextStyle: selectedLabelTextStyle,
        trailing: trailing,
        unselectedIconTheme: unselectedIconTheme,
        unselectedLabelTextStyle: unselectedLabelTextStyle,
        useIndicator: useIndicator,
      );
    };
Function _NavigationRail_extendedAnimation$(m.Scope scope$) =>
    NavigationRail.extendedAnimation;
Function _NavigationRailDestination__$(m.Scope scope$) => ({
      required Widget icon,
      Widget? selectedIcon,
      Color? indicatorColor,
      ShapeBorder? indicatorShape,
      required Widget label,
      EdgeInsetsGeometry? padding,
    }) {
      return NavigationRailDestination(
        icon: icon,
        indicatorColor: indicatorColor,
        indicatorShape: indicatorShape,
        label: label,
        padding: padding,
        selectedIcon: selectedIcon,
      );
    };
Function _NavigationRailLabelType_selected$(m.Scope scope$) =>
    () => NavigationRailLabelType.selected;
