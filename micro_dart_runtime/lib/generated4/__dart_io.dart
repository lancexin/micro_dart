// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'dart:io';
import 'dart:async';
import 'dart:collection'
    show HashMap, HashSet, Queue, ListQueue, MapBase, UnmodifiableMapView;
import 'dart:convert';
import 'dart:developer' hide log;
import 'dart:isolate';
import 'dart:math';
import 'dart:typed_data';

const libraryMirror = m.LibraryMirror(
  'dart:io',
  {
    'OSError.noErrorCode': _OSError_noErrorCode$,
    'zlib': _zlib$,
    'gzip': _gzip$,
    'ZLibOption.minWindowBits': _ZLibOption_minWindowBits$,
    'ZLibOption.maxWindowBits': _ZLibOption_maxWindowBits$,
    'ZLibOption.defaultWindowBits': _ZLibOption_defaultWindowBits$,
    'ZLibOption.minLevel': _ZLibOption_minLevel$,
    'ZLibOption.maxLevel': _ZLibOption_maxLevel$,
    'ZLibOption.defaultLevel': _ZLibOption_defaultLevel$,
    'ZLibOption.minMemLevel': _ZLibOption_minMemLevel$,
    'ZLibOption.maxMemLevel': _ZLibOption_maxMemLevel$,
    'ZLibOption.defaultMemLevel': _ZLibOption_defaultMemLevel$,
    'ZLibOption.strategyFiltered': _ZLibOption_strategyFiltered$,
    'ZLibOption.strategyHuffmanOnly': _ZLibOption_strategyHuffmanOnly$,
    'ZLibOption.strategyRle': _ZLibOption_strategyRle$,
    'ZLibOption.strategyFixed': _ZLibOption_strategyFixed$,
    'ZLibOption.strategyDefault': _ZLibOption_strategyDefault$,
    'Directory.current': _Directory_current$,
    'Directory.systemTemp': _Directory_systemTemp$,
    'FileMode.read': _FileMode_read$,
    'FileMode.write': _FileMode_write$,
    'FileMode.append': _FileMode_append$,
    'FileMode.writeOnly': _FileMode_writeOnly$,
    'FileMode.writeOnlyAppend': _FileMode_writeOnlyAppend$,
    'FileLock.shared': _FileLock_shared$,
    'FileLock.exclusive': _FileLock_exclusive$,
    'FileLock.blockingShared': _FileLock_blockingShared$,
    'FileLock.blockingExclusive': _FileLock_blockingExclusive$,
    'FileSystemEntityType.file': _FileSystemEntityType_file$,
    'FileSystemEntityType.directory': _FileSystemEntityType_directory$,
    'FileSystemEntityType.link': _FileSystemEntityType_link$,
    'FileSystemEntityType.unixDomainSock':
        _FileSystemEntityType_unixDomainSock$,
    'FileSystemEntityType.pipe': _FileSystemEntityType_pipe$,
    'FileSystemEntityType.notFound': _FileSystemEntityType_notFound$,
    'FileSystemEntityType.NOT_FOUND': _FileSystemEntityType_NOT_FOUND$,
    'FileSystemEntity.isWatchSupported': _FileSystemEntity_isWatchSupported$,
    'FileSystemEvent.create': _FileSystemEvent_create$,
    'FileSystemEvent.modify': _FileSystemEvent_modify$,
    'FileSystemEvent.delete': _FileSystemEvent_delete$,
    'FileSystemEvent.move': _FileSystemEvent_move$,
    'FileSystemEvent.all': _FileSystemEvent_all$,
    'IOOverrides.current': _IOOverrides_current$,
    'Platform.isLinux': _Platform_isLinux$,
    'Platform.isMacOS': _Platform_isMacOS$,
    'Platform.isWindows': _Platform_isWindows$,
    'Platform.isAndroid': _Platform_isAndroid$,
    'Platform.isIOS': _Platform_isIOS$,
    'Platform.isFuchsia': _Platform_isFuchsia$,
    'Platform.numberOfProcessors': _Platform_numberOfProcessors$,
    'Platform.pathSeparator': _Platform_pathSeparator$,
    'Platform.localeName': _Platform_localeName$,
    'Platform.operatingSystem': _Platform_operatingSystem$,
    'Platform.operatingSystemVersion': _Platform_operatingSystemVersion$,
    'Platform.localHostname': _Platform_localHostname$,
    'Platform.environment': _Platform_environment$,
    'Platform.executable': _Platform_executable$,
    'Platform.resolvedExecutable': _Platform_resolvedExecutable$,
    'Platform.script': _Platform_script$,
    'Platform.executableArguments': _Platform_executableArguments$,
    'Platform.packageConfig': _Platform_packageConfig$,
    'Platform.version': _Platform_version$,
    'exitCode': _exitCode$,
    'pid': _pid$,
    'ProcessInfo.currentRss': _ProcessInfo_currentRss$,
    'ProcessInfo.maxRss': _ProcessInfo_maxRss$,
    'ProcessStartMode.normal': _ProcessStartMode_normal$,
    'ProcessStartMode.inheritStdio': _ProcessStartMode_inheritStdio$,
    'ProcessStartMode.detached': _ProcessStartMode_detached$,
    'ProcessStartMode.detachedWithStdio': _ProcessStartMode_detachedWithStdio$,
    'ProcessStartMode.values': _ProcessStartMode_values$,
    'ProcessSignal.sighup': _ProcessSignal_sighup$,
    'ProcessSignal.sigint': _ProcessSignal_sigint$,
    'ProcessSignal.sigquit': _ProcessSignal_sigquit$,
    'ProcessSignal.sigill': _ProcessSignal_sigill$,
    'ProcessSignal.sigtrap': _ProcessSignal_sigtrap$,
    'ProcessSignal.sigabrt': _ProcessSignal_sigabrt$,
    'ProcessSignal.sigbus': _ProcessSignal_sigbus$,
    'ProcessSignal.sigfpe': _ProcessSignal_sigfpe$,
    'ProcessSignal.sigkill': _ProcessSignal_sigkill$,
    'ProcessSignal.sigusr1': _ProcessSignal_sigusr1$,
    'ProcessSignal.sigsegv': _ProcessSignal_sigsegv$,
    'ProcessSignal.sigusr2': _ProcessSignal_sigusr2$,
    'ProcessSignal.sigpipe': _ProcessSignal_sigpipe$,
    'ProcessSignal.sigalrm': _ProcessSignal_sigalrm$,
    'ProcessSignal.sigterm': _ProcessSignal_sigterm$,
    'ProcessSignal.sigchld': _ProcessSignal_sigchld$,
    'ProcessSignal.sigcont': _ProcessSignal_sigcont$,
    'ProcessSignal.sigstop': _ProcessSignal_sigstop$,
    'ProcessSignal.sigtstp': _ProcessSignal_sigtstp$,
    'ProcessSignal.sigttin': _ProcessSignal_sigttin$,
    'ProcessSignal.sigttou': _ProcessSignal_sigttou$,
    'ProcessSignal.sigurg': _ProcessSignal_sigurg$,
    'ProcessSignal.sigxcpu': _ProcessSignal_sigxcpu$,
    'ProcessSignal.sigxfsz': _ProcessSignal_sigxfsz$,
    'ProcessSignal.sigvtalrm': _ProcessSignal_sigvtalrm$,
    'ProcessSignal.sigprof': _ProcessSignal_sigprof$,
    'ProcessSignal.sigwinch': _ProcessSignal_sigwinch$,
    'ProcessSignal.sigpoll': _ProcessSignal_sigpoll$,
    'ProcessSignal.sigsys': _ProcessSignal_sigsys$,
    'exit': _exit$,
    'sleep': _sleep$,
    'SecurityContext.defaultContext': _SecurityContext_defaultContext$,
    'InternetAddressType.IPv4': _InternetAddressType_IPv4$,
    'InternetAddressType.IPv6': _InternetAddressType_IPv6$,
    'InternetAddressType.unix': _InternetAddressType_unix$,
    'InternetAddressType.any': _InternetAddressType_any$,
    'InternetAddress.loopbackIPv4': _InternetAddress_loopbackIPv4$,
    'InternetAddress.loopbackIPv6': _InternetAddress_loopbackIPv6$,
    'InternetAddress.anyIPv4': _InternetAddress_anyIPv4$,
    'InternetAddress.anyIPv6': _InternetAddress_anyIPv6$,
    'SocketDirection.receive': _SocketDirection_receive$,
    'SocketDirection.send': _SocketDirection_send$,
    'SocketDirection.both': _SocketDirection_both$,
    'SocketOption.tcpNoDelay': _SocketOption_tcpNoDelay$,
    'RawSocketOption.levelSocket': _RawSocketOption_levelSocket$,
    'RawSocketOption.levelIPv4': _RawSocketOption_levelIPv4$,
    'RawSocketOption.IPv4MulticastInterface':
        _RawSocketOption_IPv4MulticastInterface$,
    'RawSocketOption.levelIPv6': _RawSocketOption_levelIPv6$,
    'RawSocketOption.IPv6MulticastInterface':
        _RawSocketOption_IPv6MulticastInterface$,
    'RawSocketOption.levelTcp': _RawSocketOption_levelTcp$,
    'RawSocketOption.levelUdp': _RawSocketOption_levelUdp$,
    'RawSocketEvent.read': _RawSocketEvent_read$,
    'RawSocketEvent.write': _RawSocketEvent_write$,
    'RawSocketEvent.readClosed': _RawSocketEvent_readClosed$,
    'RawSocketEvent.closed': _RawSocketEvent_closed$,
    'stdin': _stdin$,
    'stdout': _stdout$,
    'stderr': _stderr$,
    'StdioType.terminal': _StdioType_terminal$,
    'StdioType.pipe': _StdioType_pipe$,
    'StdioType.file': _StdioType_file$,
    'StdioType.other': _StdioType_other$,
    'stdioType': _stdioType$,
    'systemEncoding': _systemEncoding$,
  },
  {
    'Directory.current': _Directory_current_set$,
    'IOOverrides.global': _IOOverrides_global_set$,
    'exitCode': _exitCode_set$,
  },
  {},
);
int _OSError_noErrorCode$() {
  return OSError.noErrorCode;
}

ZLibCodec _zlib$() {
  return zlib;
}

GZipCodec _gzip$() {
  return gzip;
}

int _ZLibOption_minWindowBits$() {
  return ZLibOption.minWindowBits;
}

int _ZLibOption_maxWindowBits$() {
  return ZLibOption.maxWindowBits;
}

int _ZLibOption_defaultWindowBits$() {
  return ZLibOption.defaultWindowBits;
}

int _ZLibOption_minLevel$() {
  return ZLibOption.minLevel;
}

int _ZLibOption_maxLevel$() {
  return ZLibOption.maxLevel;
}

int _ZLibOption_defaultLevel$() {
  return ZLibOption.defaultLevel;
}

int _ZLibOption_minMemLevel$() {
  return ZLibOption.minMemLevel;
}

int _ZLibOption_maxMemLevel$() {
  return ZLibOption.maxMemLevel;
}

int _ZLibOption_defaultMemLevel$() {
  return ZLibOption.defaultMemLevel;
}

int _ZLibOption_strategyFiltered$() {
  return ZLibOption.strategyFiltered;
}

int _ZLibOption_strategyHuffmanOnly$() {
  return ZLibOption.strategyHuffmanOnly;
}

int _ZLibOption_strategyRle$() {
  return ZLibOption.strategyRle;
}

int _ZLibOption_strategyFixed$() {
  return ZLibOption.strategyFixed;
}

int _ZLibOption_strategyDefault$() {
  return ZLibOption.strategyDefault;
}

Directory _Directory_current$() {
  return Directory.current;
}

void _Directory_current_set$(dynamic other) {
  Directory.current = other;
}

Directory _Directory_systemTemp$() {
  return Directory.systemTemp;
}

FileMode _FileMode_read$() {
  return FileMode.read;
}

FileMode _FileMode_write$() {
  return FileMode.write;
}

FileMode _FileMode_append$() {
  return FileMode.append;
}

FileMode _FileMode_writeOnly$() {
  return FileMode.writeOnly;
}

FileMode _FileMode_writeOnlyAppend$() {
  return FileMode.writeOnlyAppend;
}

FileLock _FileLock_shared$() {
  return FileLock.shared;
}

FileLock _FileLock_exclusive$() {
  return FileLock.exclusive;
}

FileLock _FileLock_blockingShared$() {
  return FileLock.blockingShared;
}

FileLock _FileLock_blockingExclusive$() {
  return FileLock.blockingExclusive;
}

FileSystemEntityType _FileSystemEntityType_file$() {
  return FileSystemEntityType.file;
}

FileSystemEntityType _FileSystemEntityType_directory$() {
  return FileSystemEntityType.directory;
}

FileSystemEntityType _FileSystemEntityType_link$() {
  return FileSystemEntityType.link;
}

FileSystemEntityType _FileSystemEntityType_unixDomainSock$() {
  return FileSystemEntityType.unixDomainSock;
}

FileSystemEntityType _FileSystemEntityType_pipe$() {
  return FileSystemEntityType.pipe;
}

FileSystemEntityType _FileSystemEntityType_notFound$() {
  return FileSystemEntityType.notFound;
}

FileSystemEntityType _FileSystemEntityType_NOT_FOUND$() {
  return FileSystemEntityType.NOT_FOUND;
}

bool _FileSystemEntity_isWatchSupported$() {
  return FileSystemEntity.isWatchSupported;
}

int _FileSystemEvent_create$() {
  return FileSystemEvent.create;
}

int _FileSystemEvent_modify$() {
  return FileSystemEvent.modify;
}

int _FileSystemEvent_delete$() {
  return FileSystemEvent.delete;
}

int _FileSystemEvent_move$() {
  return FileSystemEvent.move;
}

int _FileSystemEvent_all$() {
  return FileSystemEvent.all;
}

IOOverrides? _IOOverrides_current$() {
  return IOOverrides.current;
}

void _IOOverrides_global_set$(IOOverrides? other) {
  IOOverrides.global = other;
}

bool _Platform_isLinux$() {
  return Platform.isLinux;
}

bool _Platform_isMacOS$() {
  return Platform.isMacOS;
}

bool _Platform_isWindows$() {
  return Platform.isWindows;
}

bool _Platform_isAndroid$() {
  return Platform.isAndroid;
}

bool _Platform_isIOS$() {
  return Platform.isIOS;
}

bool _Platform_isFuchsia$() {
  return Platform.isFuchsia;
}

int _Platform_numberOfProcessors$() {
  return Platform.numberOfProcessors;
}

String _Platform_pathSeparator$() {
  return Platform.pathSeparator;
}

String _Platform_localeName$() {
  return Platform.localeName;
}

String _Platform_operatingSystem$() {
  return Platform.operatingSystem;
}

String _Platform_operatingSystemVersion$() {
  return Platform.operatingSystemVersion;
}

String _Platform_localHostname$() {
  return Platform.localHostname;
}

Map<String, String> _Platform_environment$() {
  return Platform.environment;
}

String _Platform_executable$() {
  return Platform.executable;
}

String _Platform_resolvedExecutable$() {
  return Platform.resolvedExecutable;
}

Uri _Platform_script$() {
  return Platform.script;
}

List<String> _Platform_executableArguments$() {
  return Platform.executableArguments;
}

String? _Platform_packageConfig$() {
  return Platform.packageConfig;
}

String _Platform_version$() {
  return Platform.version;
}

void _exitCode_set$(int other) {
  exitCode = other;
}

int _exitCode$() {
  return exitCode;
}

int _pid$() {
  return pid;
}

int _ProcessInfo_currentRss$() {
  return ProcessInfo.currentRss;
}

int _ProcessInfo_maxRss$() {
  return ProcessInfo.maxRss;
}

ProcessStartMode _ProcessStartMode_normal$() {
  return ProcessStartMode.normal;
}

ProcessStartMode _ProcessStartMode_inheritStdio$() {
  return ProcessStartMode.inheritStdio;
}

ProcessStartMode _ProcessStartMode_detached$() {
  return ProcessStartMode.detached;
}

ProcessStartMode _ProcessStartMode_detachedWithStdio$() {
  return ProcessStartMode.detachedWithStdio;
}

List<ProcessStartMode> _ProcessStartMode_values$() {
  return ProcessStartMode.values;
}

ProcessSignal _ProcessSignal_sighup$() {
  return ProcessSignal.sighup;
}

ProcessSignal _ProcessSignal_sigint$() {
  return ProcessSignal.sigint;
}

ProcessSignal _ProcessSignal_sigquit$() {
  return ProcessSignal.sigquit;
}

ProcessSignal _ProcessSignal_sigill$() {
  return ProcessSignal.sigill;
}

ProcessSignal _ProcessSignal_sigtrap$() {
  return ProcessSignal.sigtrap;
}

ProcessSignal _ProcessSignal_sigabrt$() {
  return ProcessSignal.sigabrt;
}

ProcessSignal _ProcessSignal_sigbus$() {
  return ProcessSignal.sigbus;
}

ProcessSignal _ProcessSignal_sigfpe$() {
  return ProcessSignal.sigfpe;
}

ProcessSignal _ProcessSignal_sigkill$() {
  return ProcessSignal.sigkill;
}

ProcessSignal _ProcessSignal_sigusr1$() {
  return ProcessSignal.sigusr1;
}

ProcessSignal _ProcessSignal_sigsegv$() {
  return ProcessSignal.sigsegv;
}

ProcessSignal _ProcessSignal_sigusr2$() {
  return ProcessSignal.sigusr2;
}

ProcessSignal _ProcessSignal_sigpipe$() {
  return ProcessSignal.sigpipe;
}

ProcessSignal _ProcessSignal_sigalrm$() {
  return ProcessSignal.sigalrm;
}

ProcessSignal _ProcessSignal_sigterm$() {
  return ProcessSignal.sigterm;
}

ProcessSignal _ProcessSignal_sigchld$() {
  return ProcessSignal.sigchld;
}

ProcessSignal _ProcessSignal_sigcont$() {
  return ProcessSignal.sigcont;
}

ProcessSignal _ProcessSignal_sigstop$() {
  return ProcessSignal.sigstop;
}

ProcessSignal _ProcessSignal_sigtstp$() {
  return ProcessSignal.sigtstp;
}

ProcessSignal _ProcessSignal_sigttin$() {
  return ProcessSignal.sigttin;
}

ProcessSignal _ProcessSignal_sigttou$() {
  return ProcessSignal.sigttou;
}

ProcessSignal _ProcessSignal_sigurg$() {
  return ProcessSignal.sigurg;
}

ProcessSignal _ProcessSignal_sigxcpu$() {
  return ProcessSignal.sigxcpu;
}

ProcessSignal _ProcessSignal_sigxfsz$() {
  return ProcessSignal.sigxfsz;
}

ProcessSignal _ProcessSignal_sigvtalrm$() {
  return ProcessSignal.sigvtalrm;
}

ProcessSignal _ProcessSignal_sigprof$() {
  return ProcessSignal.sigprof;
}

ProcessSignal _ProcessSignal_sigwinch$() {
  return ProcessSignal.sigwinch;
}

ProcessSignal _ProcessSignal_sigpoll$() {
  return ProcessSignal.sigpoll;
}

ProcessSignal _ProcessSignal_sigsys$() {
  return ProcessSignal.sigsys;
}

Function _exit$(m.Scope scope) => exit;
Function _sleep$(m.Scope scope) => sleep;
SecurityContext _SecurityContext_defaultContext$() {
  return SecurityContext.defaultContext;
}

InternetAddressType _InternetAddressType_IPv4$() {
  return InternetAddressType.IPv4;
}

InternetAddressType _InternetAddressType_IPv6$() {
  return InternetAddressType.IPv6;
}

InternetAddressType _InternetAddressType_unix$() {
  return InternetAddressType.unix;
}

InternetAddressType _InternetAddressType_any$() {
  return InternetAddressType.any;
}

InternetAddress _InternetAddress_loopbackIPv4$() {
  return InternetAddress.loopbackIPv4;
}

InternetAddress _InternetAddress_loopbackIPv6$() {
  return InternetAddress.loopbackIPv6;
}

InternetAddress _InternetAddress_anyIPv4$() {
  return InternetAddress.anyIPv4;
}

InternetAddress _InternetAddress_anyIPv6$() {
  return InternetAddress.anyIPv6;
}

SocketDirection _SocketDirection_receive$() {
  return SocketDirection.receive;
}

SocketDirection _SocketDirection_send$() {
  return SocketDirection.send;
}

SocketDirection _SocketDirection_both$() {
  return SocketDirection.both;
}

SocketOption _SocketOption_tcpNoDelay$() {
  return SocketOption.tcpNoDelay;
}

int _RawSocketOption_levelSocket$() {
  return RawSocketOption.levelSocket;
}

int _RawSocketOption_levelIPv4$() {
  return RawSocketOption.levelIPv4;
}

int _RawSocketOption_IPv4MulticastInterface$() {
  return RawSocketOption.IPv4MulticastInterface;
}

int _RawSocketOption_levelIPv6$() {
  return RawSocketOption.levelIPv6;
}

int _RawSocketOption_IPv6MulticastInterface$() {
  return RawSocketOption.IPv6MulticastInterface;
}

int _RawSocketOption_levelTcp$() {
  return RawSocketOption.levelTcp;
}

int _RawSocketOption_levelUdp$() {
  return RawSocketOption.levelUdp;
}

RawSocketEvent _RawSocketEvent_read$() {
  return RawSocketEvent.read;
}

RawSocketEvent _RawSocketEvent_write$() {
  return RawSocketEvent.write;
}

RawSocketEvent _RawSocketEvent_readClosed$() {
  return RawSocketEvent.readClosed;
}

RawSocketEvent _RawSocketEvent_closed$() {
  return RawSocketEvent.closed;
}

Stdin _stdin$() {
  return stdin;
}

Stdout _stdout$() {
  return stdout;
}

Stdout _stderr$() {
  return stderr;
}

StdioType _StdioType_terminal$() {
  return StdioType.terminal;
}

StdioType _StdioType_pipe$() {
  return StdioType.pipe;
}

StdioType _StdioType_file$() {
  return StdioType.file;
}

StdioType _StdioType_other$() {
  return StdioType.other;
}

Function _stdioType$(m.Scope scope) => stdioType;
SystemEncoding _systemEncoding$() {
  return systemEncoding;
}
