// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'dart:math';

const libraryMirror = m.LibraryMirror(
  'dart:math',
  {
    'e': _e$,
    'ln10': _ln10$,
    'ln2': _ln2$,
    'log2e': _log2e$,
    'log10e': _log10e$,
    'pi': _pi$,
    'sqrt1_2': _sqrt1_2$,
    'sqrt2': _sqrt2$,
    'min': _min$,
    'max': _max$,
    'atan2': _atan2$,
    'pow': _pow$,
    'sin': _sin$,
    'cos': _cos$,
    'tan': _tan$,
    'acos': _acos$,
    'asin': _asin$,
    'atan': _atan$,
    'sqrt': _sqrt$,
    'exp': _exp$,
    'log': _log$,
  },
  {},
  {},
);
double _e$() {
  return e;
}

double _ln10$() {
  return ln10;
}

double _ln2$() {
  return ln2;
}

double _log2e$() {
  return log2e;
}

double _log10e$() {
  return log10e;
}

double _pi$() {
  return pi;
}

double _sqrt1_2$() {
  return sqrt1_2;
}

double _sqrt2$() {
  return sqrt2;
}

Function _min$<T extends num>(m.Scope scope) => min<T>;
Function _max$<T extends num>(m.Scope scope) => max<T>;
Function _atan2$(m.Scope scope) => atan2;
Function _pow$(m.Scope scope) => pow;
Function _sin$(m.Scope scope) => sin;
Function _cos$(m.Scope scope) => cos;
Function _tan$(m.Scope scope) => tan;
Function _acos$(m.Scope scope) => acos;
Function _asin$(m.Scope scope) => asin;
Function _atan$(m.Scope scope) => atan;
Function _sqrt$(m.Scope scope) => sqrt;
Function _exp$(m.Scope scope) => exp;
Function _log$(m.Scope scope) => log;
