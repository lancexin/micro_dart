// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'dart:collection';
import 'dart:convert'
    show
        ascii,
        base64,
        Base64Codec,
        Encoding,
        latin1,
        StringConversionSink,
        utf8;
import 'dart:math' show Random;
import 'dart:typed_data' show Uint8List;

const libraryMirror = m.LibraryMirror(
  'dart:core',
  {
    'deprecated': _deprecated$,
    'override': _override$,
    'BigInt.zero': _BigInt_zero$,
    'BigInt.one': _BigInt_one$,
    'BigInt.two': _BigInt_two$,
    'DateTime.monday': _DateTime_monday$,
    'DateTime.tuesday': _DateTime_tuesday$,
    'DateTime.wednesday': _DateTime_wednesday$,
    'DateTime.thursday': _DateTime_thursday$,
    'DateTime.friday': _DateTime_friday$,
    'DateTime.saturday': _DateTime_saturday$,
    'DateTime.sunday': _DateTime_sunday$,
    'DateTime.daysPerWeek': _DateTime_daysPerWeek$,
    'DateTime.january': _DateTime_january$,
    'DateTime.february': _DateTime_february$,
    'DateTime.march': _DateTime_march$,
    'DateTime.april': _DateTime_april$,
    'DateTime.may': _DateTime_may$,
    'DateTime.june': _DateTime_june$,
    'DateTime.july': _DateTime_july$,
    'DateTime.august': _DateTime_august$,
    'DateTime.september': _DateTime_september$,
    'DateTime.october': _DateTime_october$,
    'DateTime.november': _DateTime_november$,
    'DateTime.december': _DateTime_december$,
    'DateTime.monthsPerYear': _DateTime_monthsPerYear$,
    'double.nan': _double_nan$,
    'double.infinity': _double_infinity$,
    'double.negativeInfinity': _double_negativeInfinity$,
    'double.minPositive': _double_minPositive$,
    'double.maxFinite': _double_maxFinite$,
    'Duration.microsecondsPerMillisecond':
        _Duration_microsecondsPerMillisecond$,
    'Duration.millisecondsPerSecond': _Duration_millisecondsPerSecond$,
    'Duration.secondsPerMinute': _Duration_secondsPerMinute$,
    'Duration.minutesPerHour': _Duration_minutesPerHour$,
    'Duration.hoursPerDay': _Duration_hoursPerDay$,
    'Duration.microsecondsPerSecond': _Duration_microsecondsPerSecond$,
    'Duration.microsecondsPerMinute': _Duration_microsecondsPerMinute$,
    'Duration.microsecondsPerHour': _Duration_microsecondsPerHour$,
    'Duration.microsecondsPerDay': _Duration_microsecondsPerDay$,
    'Duration.millisecondsPerMinute': _Duration_millisecondsPerMinute$,
    'Duration.millisecondsPerHour': _Duration_millisecondsPerHour$,
    'Duration.millisecondsPerDay': _Duration_millisecondsPerDay$,
    'Duration.secondsPerHour': _Duration_secondsPerHour$,
    'Duration.secondsPerDay': _Duration_secondsPerDay$,
    'Duration.minutesPerDay': _Duration_minutesPerDay$,
    'Duration.zero': _Duration_zero$,
    'identical': _identical$,
    'identityHashCode': _identityHashCode$,
    'print': _print$,
    'StackTrace.empty': _StackTrace_empty$,
    'StackTrace.current': _StackTrace_current$,
    'Symbol.unaryMinus': _Symbol_unaryMinus$,
    'Symbol.empty': _Symbol_empty$,
    'Uri.base': _Uri_base$,
  },
  {},
  {},
);
Deprecated _deprecated$() {
  return deprecated;
}

Object _override$() {
  return override;
}

BigInt _BigInt_zero$() {
  return BigInt.zero;
}

BigInt _BigInt_one$() {
  return BigInt.one;
}

BigInt _BigInt_two$() {
  return BigInt.two;
}

int _DateTime_monday$() {
  return DateTime.monday;
}

int _DateTime_tuesday$() {
  return DateTime.tuesday;
}

int _DateTime_wednesday$() {
  return DateTime.wednesday;
}

int _DateTime_thursday$() {
  return DateTime.thursday;
}

int _DateTime_friday$() {
  return DateTime.friday;
}

int _DateTime_saturday$() {
  return DateTime.saturday;
}

int _DateTime_sunday$() {
  return DateTime.sunday;
}

int _DateTime_daysPerWeek$() {
  return DateTime.daysPerWeek;
}

int _DateTime_january$() {
  return DateTime.january;
}

int _DateTime_february$() {
  return DateTime.february;
}

int _DateTime_march$() {
  return DateTime.march;
}

int _DateTime_april$() {
  return DateTime.april;
}

int _DateTime_may$() {
  return DateTime.may;
}

int _DateTime_june$() {
  return DateTime.june;
}

int _DateTime_july$() {
  return DateTime.july;
}

int _DateTime_august$() {
  return DateTime.august;
}

int _DateTime_september$() {
  return DateTime.september;
}

int _DateTime_october$() {
  return DateTime.october;
}

int _DateTime_november$() {
  return DateTime.november;
}

int _DateTime_december$() {
  return DateTime.december;
}

int _DateTime_monthsPerYear$() {
  return DateTime.monthsPerYear;
}

double _double_nan$() {
  return double.nan;
}

double _double_infinity$() {
  return double.infinity;
}

double _double_negativeInfinity$() {
  return double.negativeInfinity;
}

double _double_minPositive$() {
  return double.minPositive;
}

double _double_maxFinite$() {
  return double.maxFinite;
}

int _Duration_microsecondsPerMillisecond$() {
  return Duration.microsecondsPerMillisecond;
}

int _Duration_millisecondsPerSecond$() {
  return Duration.millisecondsPerSecond;
}

int _Duration_secondsPerMinute$() {
  return Duration.secondsPerMinute;
}

int _Duration_minutesPerHour$() {
  return Duration.minutesPerHour;
}

int _Duration_hoursPerDay$() {
  return Duration.hoursPerDay;
}

int _Duration_microsecondsPerSecond$() {
  return Duration.microsecondsPerSecond;
}

int _Duration_microsecondsPerMinute$() {
  return Duration.microsecondsPerMinute;
}

int _Duration_microsecondsPerHour$() {
  return Duration.microsecondsPerHour;
}

int _Duration_microsecondsPerDay$() {
  return Duration.microsecondsPerDay;
}

int _Duration_millisecondsPerMinute$() {
  return Duration.millisecondsPerMinute;
}

int _Duration_millisecondsPerHour$() {
  return Duration.millisecondsPerHour;
}

int _Duration_millisecondsPerDay$() {
  return Duration.millisecondsPerDay;
}

int _Duration_secondsPerHour$() {
  return Duration.secondsPerHour;
}

int _Duration_secondsPerDay$() {
  return Duration.secondsPerDay;
}

int _Duration_minutesPerDay$() {
  return Duration.minutesPerDay;
}

Duration _Duration_zero$() {
  return Duration.zero;
}

Function _identical$(m.Scope scope) => identical;
Function _identityHashCode$(m.Scope scope) => identityHashCode;
Function _print$(m.Scope scope) => print;
dynamic _StackTrace_empty$() {
  return StackTrace.empty;
}

StackTrace _StackTrace_current$() {
  return StackTrace.current;
}

Symbol _Symbol_unaryMinus$() {
  return Symbol.unaryMinus;
}

Symbol _Symbol_empty$() {
  return Symbol.empty;
}

Uri _Uri_base$() {
  return Uri.base;
}
