// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'dart:async';
import 'dart:collection' show HashMap;

const libraryMirror = m.LibraryMirror(
  'dart:async',
  {
    'unawaited': _unawaited$,
    'scheduleMicrotask': _scheduleMicrotask$,
    'Zone.root': _Zone_root$,
    'Zone.current': _Zone_current$,
    'runZoned': _runZoned$,
    'runZonedGuarded': _runZonedGuarded$,
  },
  {},
  {},
);
Function _unawaited$(m.Scope scope) => unawaited;
Function _scheduleMicrotask$(m.Scope scope) => (m.FunctionPointer callback) {
      void callbackProxy() => scope.engine.callFunctionPointer(
            scope,
            callback,
            [],
            {},
          );
      scheduleMicrotask(callbackProxy);
    };
Zone _Zone_root$() {
  return Zone.root;
}

Zone _Zone_current$() {
  return Zone.current;
}

Function _runZoned$(m.Scope scope) => <R>(
      m.FunctionPointer body, {
      Map<Object?, Object?>? zoneValues,
      ZoneSpecification? zoneSpecification,
      Function? onError,
    }) {
      R bodyProxy() => scope.engine.callFunctionPointer(
            scope,
            body,
            [],
            {},
          );
      return runZoned<R>(
        bodyProxy,
        onError: onError,
        zoneSpecification: zoneSpecification,
        zoneValues: zoneValues,
      );
    };
Function _runZonedGuarded$(m.Scope scope) => <R>(
      m.FunctionPointer body,
      m.FunctionPointer onError, {
      Map<Object?, Object?>? zoneValues,
      ZoneSpecification? zoneSpecification,
    }) {
      R bodyProxy() => scope.engine.callFunctionPointer(
            scope,
            body,
            [],
            {},
          );
      void onErrorProxy(
        Object error,
        StackTrace stack,
      ) =>
          scope.engine.callFunctionPointer(
            scope,
            onError,
            [
              error,
              stack,
            ],
            {},
          );
      return runZonedGuarded<R>(
        bodyProxy,
        onErrorProxy,
        zoneSpecification: zoneSpecification,
        zoneValues: zoneValues,
      );
    };
