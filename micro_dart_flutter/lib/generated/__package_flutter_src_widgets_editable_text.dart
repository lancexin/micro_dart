// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/editable_text.dart';
import 'dart:async';
import 'dart:math';
import 'dart:ui' hide TextStyle;
import 'package:characters/characters.dart'
    show CharacterRange, StringCharacters;
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart' show DragStartBehavior;
import 'package:flutter/rendering.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/actions.dart';
import 'package:flutter/src/widgets/autofill.dart';
import 'package:flutter/src/widgets/automatic_keep_alive.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/binding.dart';
import 'package:flutter/src/widgets/constants.dart';
import 'package:flutter/src/widgets/context_menu_button_item.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/default_selection_style.dart';
import 'package:flutter/src/widgets/default_text_editing_shortcuts.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/focus_scope.dart';
import 'package:flutter/src/widgets/focus_traversal.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/localizations.dart';
import 'package:flutter/src/widgets/magnifier.dart';
import 'package:flutter/src/widgets/media_query.dart';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/scroll_position.dart';
import 'package:flutter/src/widgets/scrollable.dart';
import 'package:flutter/src/widgets/scrollable_helpers.dart';
import 'package:flutter/src/widgets/shortcuts.dart';
import 'package:flutter/src/widgets/spell_check.dart';
import 'package:flutter/src/widgets/tap_region.dart';
import 'package:flutter/src/widgets/text.dart';
import 'package:flutter/src/widgets/text_editing_intents.dart';
import 'package:flutter/src/widgets/text_selection.dart';
import 'package:flutter/src/widgets/text_selection_toolbar_anchors.dart';
import 'package:flutter/src/widgets/ticker_provider.dart';
import 'package:flutter/src/widgets/undo_history.dart';
import 'package:flutter/src/widgets/view.dart';
import 'package:flutter/src/widgets/widget_span.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/editable_text.dart',
  {
    'kDefaultContentInsertionMimeTypes': _kDefaultContentInsertionMimeTypes$,
    'TextEditingController.': _TextEditingController__$,
    'TextEditingController.fromValue': _TextEditingController_fromValue_$,
    'ContentInsertionConfiguration.': _ContentInsertionConfiguration__$,
    'EditableText.debugDeterministicCursor':
        _EditableText_debugDeterministicCursor$,
    'EditableText.': _EditableText__$,
    'EditableText.getEditableButtonItems':
        _EditableText_getEditableButtonItems$,
    'EditableTextState.': _EditableTextState__$,
  },
  {
    'EditableText.debugDeterministicCursor':
        _EditableText_debugDeterministicCursor_set$
  },
  {
    'TextEditingController': m.ClassMirror(
      'TextEditingController',
      {
        '#as': TextEditingController_as$,
        '#is': TextEditingController_is$,
        'text': _TextEditingController_text$,
        'selection': _TextEditingController_selection$,
        'buildTextSpan': _TextEditingController_buildTextSpan$,
        'clear': _TextEditingController_clear$,
        'clearComposing': _TextEditingController_clearComposing$,
        'isSelectionWithinTextBounds':
            _TextEditingController_isSelectionWithinTextBounds$,
      },
      {
        'text': _TextEditingController_text_set$,
        'value': _TextEditingController_value_set$,
        'selection': _TextEditingController_selection_set$,
      },
    ),
    'ContentInsertionConfiguration': m.ClassMirror(
      'ContentInsertionConfiguration',
      {
        '#as': ContentInsertionConfiguration_as$,
        '#is': ContentInsertionConfiguration_is$,
        'onContentInserted': _ContentInsertionConfiguration_onContentInserted$,
        'allowedMimeTypes': _ContentInsertionConfiguration_allowedMimeTypes$,
      },
      {},
    ),
    'EditableText': m.ClassMirror(
      'EditableText',
      {
        '#as': EditableText_as$,
        '#is': EditableText_is$,
        'controller': _EditableText_controller$,
        'focusNode': _EditableText_focusNode$,
        'obscuringCharacter': _EditableText_obscuringCharacter$,
        'obscureText': _EditableText_obscureText$,
        'textHeightBehavior': _EditableText_textHeightBehavior$,
        'textWidthBasis': _EditableText_textWidthBasis$,
        'readOnly': _EditableText_readOnly$,
        'forceLine': _EditableText_forceLine$,
        'toolbarOptions': _EditableText_toolbarOptions$,
        'showSelectionHandles': _EditableText_showSelectionHandles$,
        'showCursor': _EditableText_showCursor$,
        'autocorrect': _EditableText_autocorrect$,
        'smartDashesType': _EditableText_smartDashesType$,
        'smartQuotesType': _EditableText_smartQuotesType$,
        'enableSuggestions': _EditableText_enableSuggestions$,
        'style': _EditableText_style$,
        'undoController': _EditableText_undoController$,
        'textAlign': _EditableText_textAlign$,
        'textDirection': _EditableText_textDirection$,
        'textCapitalization': _EditableText_textCapitalization$,
        'locale': _EditableText_locale$,
        'textScaleFactor': _EditableText_textScaleFactor$,
        'cursorColor': _EditableText_cursorColor$,
        'autocorrectionTextRectColor':
            _EditableText_autocorrectionTextRectColor$,
        'backgroundCursorColor': _EditableText_backgroundCursorColor$,
        'maxLines': _EditableText_maxLines$,
        'minLines': _EditableText_minLines$,
        'expands': _EditableText_expands$,
        'autofocus': _EditableText_autofocus$,
        'selectionColor': _EditableText_selectionColor$,
        'selectionControls': _EditableText_selectionControls$,
        'keyboardType': _EditableText_keyboardType$,
        'textInputAction': _EditableText_textInputAction$,
        'onChanged': _EditableText_onChanged$,
        'onEditingComplete': _EditableText_onEditingComplete$,
        'onSubmitted': _EditableText_onSubmitted$,
        'onAppPrivateCommand': _EditableText_onAppPrivateCommand$,
        'onSelectionChanged': _EditableText_onSelectionChanged$,
        'onSelectionHandleTapped': _EditableText_onSelectionHandleTapped$,
        'onTapOutside': _EditableText_onTapOutside$,
        'inputFormatters': _EditableText_inputFormatters$,
        'mouseCursor': _EditableText_mouseCursor$,
        'rendererIgnoresPointer': _EditableText_rendererIgnoresPointer$,
        'cursorWidth': _EditableText_cursorWidth$,
        'cursorHeight': _EditableText_cursorHeight$,
        'cursorRadius': _EditableText_cursorRadius$,
        'cursorOpacityAnimates': _EditableText_cursorOpacityAnimates$,
        'cursorOffset': _EditableText_cursorOffset$,
        'paintCursorAboveText': _EditableText_paintCursorAboveText$,
        'selectionHeightStyle': _EditableText_selectionHeightStyle$,
        'selectionWidthStyle': _EditableText_selectionWidthStyle$,
        'keyboardAppearance': _EditableText_keyboardAppearance$,
        'scrollPadding': _EditableText_scrollPadding$,
        'enableInteractiveSelection': _EditableText_enableInteractiveSelection$,
        'dragStartBehavior': _EditableText_dragStartBehavior$,
        'scrollController': _EditableText_scrollController$,
        'scrollPhysics': _EditableText_scrollPhysics$,
        'scribbleEnabled': _EditableText_scribbleEnabled$,
        'autofillHints': _EditableText_autofillHints$,
        'autofillClient': _EditableText_autofillClient$,
        'clipBehavior': _EditableText_clipBehavior$,
        'restorationId': _EditableText_restorationId$,
        'scrollBehavior': _EditableText_scrollBehavior$,
        'enableIMEPersonalizedLearning':
            _EditableText_enableIMEPersonalizedLearning$,
        'contentInsertionConfiguration':
            _EditableText_contentInsertionConfiguration$,
        'contextMenuBuilder': _EditableText_contextMenuBuilder$,
        'spellCheckConfiguration': _EditableText_spellCheckConfiguration$,
        'magnifierConfiguration': _EditableText_magnifierConfiguration$,
        'strutStyle': _EditableText_strutStyle$,
        'selectionEnabled': _EditableText_selectionEnabled$,
        'createState': _EditableText_createState$,
        'debugFillProperties': _EditableText_debugFillProperties$,
      },
      {},
    ),
    'EditableTextState': m.ClassMirror(
      'EditableTextState',
      {
        '#as': EditableTextState_as$,
        '#is': EditableTextState_is$,
        'clipboardStatus': _EditableTextState_clipboardStatus$,
        'spellCheckResults': _EditableTextState_spellCheckResults$,
        'renderEditable': _EditableTextState_renderEditable$,
        'currentAutofillScope': _EditableTextState_currentAutofillScope$,
        'spellCheckConfiguration': _EditableTextState_spellCheckConfiguration$,
        'spellCheckEnabled': _EditableTextState_spellCheckEnabled$,
        'wantKeepAlive': _EditableTextState_wantKeepAlive$,
        'cutEnabled': _EditableTextState_cutEnabled$,
        'copyEnabled': _EditableTextState_copyEnabled$,
        'pasteEnabled': _EditableTextState_pasteEnabled$,
        'selectAllEnabled': _EditableTextState_selectAllEnabled$,
        'contextMenuAnchors': _EditableTextState_contextMenuAnchors$,
        'contextMenuButtonItems': _EditableTextState_contextMenuButtonItems$,
        'currentTextEditingValue': _EditableTextState_currentTextEditingValue$,
        'cursorCurrentlyVisible': _EditableTextState_cursorCurrentlyVisible$,
        'cursorBlinkInterval': _EditableTextState_cursorBlinkInterval$,
        'selectionOverlay': _EditableTextState_selectionOverlay$,
        'textEditingValue': _EditableTextState_textEditingValue$,
        'autofillId': _EditableTextState_autofillId$,
        'textInputConfiguration': _EditableTextState_textInputConfiguration$,
        'copySelection': _EditableTextState_copySelection$,
        'cutSelection': _EditableTextState_cutSelection$,
        'pasteText': _EditableTextState_pasteText$,
        'selectAll': _EditableTextState_selectAll$,
        'findSuggestionSpanAtCursorIndex':
            _EditableTextState_findSuggestionSpanAtCursorIndex$,
        'initState': _EditableTextState_initState$,
        'didChangeDependencies': _EditableTextState_didChangeDependencies$,
        'didUpdateWidget': _EditableTextState_didUpdateWidget$,
        'dispose': _EditableTextState_dispose$,
        'updateEditingValue': _EditableTextState_updateEditingValue$,
        'performAction': _EditableTextState_performAction$,
        'performPrivateCommand': _EditableTextState_performPrivateCommand$,
        'insertContent': _EditableTextState_insertContent$,
        'updateFloatingCursor': _EditableTextState_updateFloatingCursor$,
        'beginBatchEdit': _EditableTextState_beginBatchEdit$,
        'endBatchEdit': _EditableTextState_endBatchEdit$,
        'didChangeInputControl': _EditableTextState_didChangeInputControl$,
        'connectionClosed': _EditableTextState_connectionClosed$,
        'requestKeyboard': _EditableTextState_requestKeyboard$,
        'didChangeMetrics': _EditableTextState_didChangeMetrics$,
        'userUpdateTextEditingValue':
            _EditableTextState_userUpdateTextEditingValue$,
        'bringIntoView': _EditableTextState_bringIntoView$,
        'showToolbar': _EditableTextState_showToolbar$,
        'hideToolbar': _EditableTextState_hideToolbar$,
        'toggleToolbar': _EditableTextState_toggleToolbar$,
        'showSpellCheckSuggestionsToolbar':
            _EditableTextState_showSpellCheckSuggestionsToolbar$,
        'showMagnifier': _EditableTextState_showMagnifier$,
        'hideMagnifier': _EditableTextState_hideMagnifier$,
        'insertTextPlaceholder': _EditableTextState_insertTextPlaceholder$,
        'removeTextPlaceholder': _EditableTextState_removeTextPlaceholder$,
        'performSelector': _EditableTextState_performSelector$,
        'autofill': _EditableTextState_autofill$,
        'showAutocorrectionPromptRect':
            _EditableTextState_showAutocorrectionPromptRect$,
        'build': _EditableTextState_build$,
        'buildTextSpan': _EditableTextState_buildTextSpan$,
      },
      {'spellCheckResults': _EditableTextState_spellCheckResults_set$},
    ),
  },
);
List<String> _kDefaultContentInsertionMimeTypes$() {
  return kDefaultContentInsertionMimeTypes;
}

Function TextEditingController_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextEditingController;
Function TextEditingController_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextEditingController;
Function _TextEditingController_text$(
  m.Scope scope$,
  TextEditingController target$,
) =>
    () {
      return target$.text;
    };
void _TextEditingController_text_set$(
  m.Scope scope$,
  TextEditingController target$,
) =>
    (dynamic other$) {
      target$.text = other$;
    };
void _TextEditingController_value_set$(
  m.Scope scope$,
  TextEditingController target$,
) =>
    (dynamic other$) {
      target$.value = other$;
    };
Function _TextEditingController_selection$(
  m.Scope scope$,
  TextEditingController target$,
) =>
    () {
      return target$.selection;
    };
void _TextEditingController_selection_set$(
  m.Scope scope$,
  TextEditingController target$,
) =>
    (dynamic other$) {
      target$.selection = other$;
    };
Function _TextEditingController__$(m.Scope scope$) => ({String? text}) {
      return TextEditingController(text: text);
    };
Function _TextEditingController_fromValue_$(m.Scope scope$) =>
    TextEditingController.fromValue;
Function _TextEditingController_buildTextSpan$(
  m.Scope scope$,
  TextEditingController target$,
) =>
    target$.buildTextSpan;
Function _TextEditingController_clear$(
  m.Scope scope$,
  TextEditingController target$,
) =>
    target$.clear;
Function _TextEditingController_clearComposing$(
  m.Scope scope$,
  TextEditingController target$,
) =>
    target$.clearComposing;
Function _TextEditingController_isSelectionWithinTextBounds$(
  m.Scope scope$,
  TextEditingController target$,
) =>
    target$.isSelectionWithinTextBounds;
Function ContentInsertionConfiguration_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ContentInsertionConfiguration;
Function ContentInsertionConfiguration_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ContentInsertionConfiguration;
Function _ContentInsertionConfiguration_onContentInserted$(
  m.Scope scope$,
  ContentInsertionConfiguration target$,
) =>
    () {
      return target$.onContentInserted;
    };
Function _ContentInsertionConfiguration_allowedMimeTypes$(
  m.Scope scope$,
  ContentInsertionConfiguration target$,
) =>
    () {
      return target$.allowedMimeTypes;
    };
Function _ContentInsertionConfiguration__$(m.Scope scope$) => ({
      required m.FunctionPointer onContentInserted,
      List? allowedMimeTypes,
    }) {
      void onContentInsertedProxy(
              KeyboardInsertedContent onContentInserted_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onContentInserted,
            [onContentInserted_value$],
            {},
          );
      return ContentInsertionConfiguration(
        allowedMimeTypes: allowedMimeTypes == null
            ? kDefaultContentInsertionMimeTypes
            : List.from(allowedMimeTypes),
        onContentInserted: onContentInsertedProxy,
      );
    };
Function EditableText_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as EditableText;
Function EditableText_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is EditableText;
Function _EditableText_controller$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.controller;
    };
Function _EditableText_focusNode$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.focusNode;
    };
Function _EditableText_obscuringCharacter$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.obscuringCharacter;
    };
Function _EditableText_obscureText$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.obscureText;
    };
Function _EditableText_textHeightBehavior$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.textHeightBehavior;
    };
Function _EditableText_textWidthBasis$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.textWidthBasis;
    };
Function _EditableText_readOnly$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.readOnly;
    };
Function _EditableText_forceLine$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.forceLine;
    };
Function _EditableText_toolbarOptions$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.toolbarOptions;
    };
Function _EditableText_showSelectionHandles$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.showSelectionHandles;
    };
Function _EditableText_showCursor$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.showCursor;
    };
Function _EditableText_autocorrect$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.autocorrect;
    };
Function _EditableText_smartDashesType$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.smartDashesType;
    };
Function _EditableText_smartQuotesType$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.smartQuotesType;
    };
Function _EditableText_enableSuggestions$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.enableSuggestions;
    };
Function _EditableText_style$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.style;
    };
Function _EditableText_undoController$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.undoController;
    };
Function _EditableText_textAlign$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.textAlign;
    };
Function _EditableText_textDirection$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.textDirection;
    };
Function _EditableText_textCapitalization$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.textCapitalization;
    };
Function _EditableText_locale$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.locale;
    };
Function _EditableText_textScaleFactor$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.textScaleFactor;
    };
Function _EditableText_cursorColor$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.cursorColor;
    };
Function _EditableText_autocorrectionTextRectColor$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.autocorrectionTextRectColor;
    };
Function _EditableText_backgroundCursorColor$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.backgroundCursorColor;
    };
Function _EditableText_maxLines$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.maxLines;
    };
Function _EditableText_minLines$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.minLines;
    };
Function _EditableText_expands$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.expands;
    };
Function _EditableText_autofocus$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.autofocus;
    };
Function _EditableText_selectionColor$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.selectionColor;
    };
Function _EditableText_selectionControls$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.selectionControls;
    };
Function _EditableText_keyboardType$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.keyboardType;
    };
Function _EditableText_textInputAction$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.textInputAction;
    };
Function _EditableText_onChanged$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.onChanged;
    };
Function _EditableText_onEditingComplete$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.onEditingComplete;
    };
Function _EditableText_onSubmitted$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.onSubmitted;
    };
Function _EditableText_onAppPrivateCommand$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.onAppPrivateCommand;
    };
Function _EditableText_onSelectionChanged$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.onSelectionChanged;
    };
Function _EditableText_onSelectionHandleTapped$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.onSelectionHandleTapped;
    };
Function _EditableText_onTapOutside$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.onTapOutside;
    };
Function _EditableText_inputFormatters$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.inputFormatters;
    };
Function _EditableText_mouseCursor$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.mouseCursor;
    };
Function _EditableText_rendererIgnoresPointer$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.rendererIgnoresPointer;
    };
Function _EditableText_cursorWidth$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.cursorWidth;
    };
Function _EditableText_cursorHeight$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.cursorHeight;
    };
Function _EditableText_cursorRadius$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.cursorRadius;
    };
Function _EditableText_cursorOpacityAnimates$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.cursorOpacityAnimates;
    };
Function _EditableText_cursorOffset$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.cursorOffset;
    };
Function _EditableText_paintCursorAboveText$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.paintCursorAboveText;
    };
Function _EditableText_selectionHeightStyle$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.selectionHeightStyle;
    };
Function _EditableText_selectionWidthStyle$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.selectionWidthStyle;
    };
Function _EditableText_keyboardAppearance$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.keyboardAppearance;
    };
Function _EditableText_scrollPadding$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.scrollPadding;
    };
Function _EditableText_enableInteractiveSelection$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.enableInteractiveSelection;
    };
bool _EditableText_debugDeterministicCursor$() {
  return EditableText.debugDeterministicCursor;
}

void _EditableText_debugDeterministicCursor_set$(bool other$) {
  EditableText.debugDeterministicCursor = other$;
}

Function _EditableText_dragStartBehavior$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.dragStartBehavior;
    };
Function _EditableText_scrollController$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.scrollController;
    };
Function _EditableText_scrollPhysics$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.scrollPhysics;
    };
Function _EditableText_scribbleEnabled$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.scribbleEnabled;
    };
Function _EditableText_autofillHints$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.autofillHints;
    };
Function _EditableText_autofillClient$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.autofillClient;
    };
Function _EditableText_clipBehavior$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _EditableText_restorationId$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.restorationId;
    };
Function _EditableText_scrollBehavior$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.scrollBehavior;
    };
Function _EditableText_enableIMEPersonalizedLearning$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.enableIMEPersonalizedLearning;
    };
Function _EditableText_contentInsertionConfiguration$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.contentInsertionConfiguration;
    };
Function _EditableText_contextMenuBuilder$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.contextMenuBuilder;
    };
Function _EditableText_spellCheckConfiguration$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.spellCheckConfiguration;
    };
Function _EditableText_magnifierConfiguration$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.magnifierConfiguration;
    };
Function _EditableText_strutStyle$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.strutStyle;
    };
Function _EditableText_selectionEnabled$(
  m.Scope scope$,
  EditableText target$,
) =>
    () {
      return target$.selectionEnabled;
    };
Function _EditableText__$(m.Scope scope$) => ({
      Key? key,
      required TextEditingController controller,
      required FocusNode focusNode,
      bool? readOnly,
      String? obscuringCharacter,
      bool? obscureText,
      bool? autocorrect,
      SmartDashesType? smartDashesType,
      SmartQuotesType? smartQuotesType,
      bool? enableSuggestions,
      required TextStyle style,
      StrutStyle? strutStyle,
      required Color cursorColor,
      required Color backgroundCursorColor,
      TextAlign? textAlign,
      TextDirection? textDirection,
      Locale? locale,
      double? textScaleFactor,
      int? maxLines,
      int? minLines,
      bool? expands,
      bool? forceLine,
      TextHeightBehavior? textHeightBehavior,
      TextWidthBasis? textWidthBasis,
      bool? autofocus,
      bool? showCursor,
      bool? showSelectionHandles,
      Color? selectionColor,
      TextSelectionControls? selectionControls,
      TextInputType? keyboardType,
      TextInputAction? textInputAction,
      TextCapitalization? textCapitalization,
      m.FunctionPointer? onChanged,
      m.FunctionPointer? onEditingComplete,
      m.FunctionPointer? onSubmitted,
      m.FunctionPointer? onAppPrivateCommand,
      m.FunctionPointer? onSelectionChanged,
      m.FunctionPointer? onSelectionHandleTapped,
      m.FunctionPointer? onTapOutside,
      List? inputFormatters,
      MouseCursor? mouseCursor,
      bool? rendererIgnoresPointer,
      double? cursorWidth,
      double? cursorHeight,
      Radius? cursorRadius,
      bool? cursorOpacityAnimates,
      Offset? cursorOffset,
      bool? paintCursorAboveText,
      BoxHeightStyle? selectionHeightStyle,
      BoxWidthStyle? selectionWidthStyle,
      EdgeInsets? scrollPadding,
      Brightness? keyboardAppearance,
      DragStartBehavior? dragStartBehavior,
      bool? enableInteractiveSelection,
      ScrollController? scrollController,
      ScrollPhysics? scrollPhysics,
      Color? autocorrectionTextRectColor,
      ToolbarOptions? toolbarOptions,
      Iterable? autofillHints,
      AutofillClient? autofillClient,
      Clip? clipBehavior,
      String? restorationId,
      ScrollBehavior? scrollBehavior,
      bool? scribbleEnabled,
      bool? enableIMEPersonalizedLearning,
      ContentInsertionConfiguration? contentInsertionConfiguration,
      m.FunctionPointer? contextMenuBuilder,
      SpellCheckConfiguration? spellCheckConfiguration,
      TextMagnifierConfiguration? magnifierConfiguration,
      UndoHistoryController? undoController,
    }) {
      Widget contextMenuBuilderProxy(
        BuildContext contextMenuBuilder_context$,
        EditableTextState contextMenuBuilder_editableTextState$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            contextMenuBuilder!,
            [
              contextMenuBuilder_context$,
              contextMenuBuilder_editableTextState$,
            ],
            {},
          );
      void onAppPrivateCommandProxy(
        String onAppPrivateCommand_$p0$,
        Map onAppPrivateCommand_$p1$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onAppPrivateCommand!,
            [
              onAppPrivateCommand_$p0$,
              onAppPrivateCommand_$p1$,
            ],
            {},
          );
      void onChangedProxy(String onChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChanged!,
            [onChanged_value$],
            {},
          );
      void onEditingCompleteProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onEditingComplete!,
            [],
            {},
          );
      void onSelectionChangedProxy(
        TextSelection onSelectionChanged_selection$,
        SelectionChangedCause? onSelectionChanged_cause$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSelectionChanged!,
            [
              onSelectionChanged_selection$,
              onSelectionChanged_cause$,
            ],
            {},
          );
      void onSelectionHandleTappedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onSelectionHandleTapped!,
            [],
            {},
          );
      void onSubmittedProxy(String onSubmitted_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSubmitted!,
            [onSubmitted_value$],
            {},
          );
      void onTapOutsideProxy(PointerDownEvent onTapOutside_event$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onTapOutside!,
            [onTapOutside_event$],
            {},
          );
      return EditableText(
        autocorrect: autocorrect ?? true,
        autocorrectionTextRectColor: autocorrectionTextRectColor,
        autofillClient: autofillClient,
        autofillHints: autofillHints == null
            ? const <String>[]
            : Iterable.castFrom(autofillHints),
        autofocus: autofocus ?? false,
        backgroundCursorColor: backgroundCursorColor,
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        contentInsertionConfiguration: contentInsertionConfiguration,
        contextMenuBuilder:
            contextMenuBuilder == null ? null : contextMenuBuilderProxy,
        controller: controller,
        cursorColor: cursorColor,
        cursorHeight: cursorHeight,
        cursorOffset: cursorOffset,
        cursorOpacityAnimates: cursorOpacityAnimates ?? false,
        cursorRadius: cursorRadius,
        cursorWidth: cursorWidth ?? 2.0,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        enableIMEPersonalizedLearning: enableIMEPersonalizedLearning ?? true,
        enableInteractiveSelection: enableInteractiveSelection,
        enableSuggestions: enableSuggestions ?? true,
        expands: expands ?? false,
        focusNode: focusNode,
        forceLine: forceLine ?? true,
        inputFormatters:
            inputFormatters == null ? null : List.from(inputFormatters),
        key: key,
        keyboardAppearance: keyboardAppearance ?? Brightness.light,
        keyboardType: keyboardType,
        locale: locale,
        magnifierConfiguration:
            magnifierConfiguration ?? TextMagnifierConfiguration.disabled,
        maxLines: maxLines ?? 1,
        minLines: minLines,
        mouseCursor: mouseCursor,
        obscureText: obscureText ?? false,
        obscuringCharacter: obscuringCharacter ?? '•',
        onAppPrivateCommand:
            onAppPrivateCommand == null ? null : onAppPrivateCommandProxy,
        onChanged: onChanged == null ? null : onChangedProxy,
        onEditingComplete:
            onEditingComplete == null ? null : onEditingCompleteProxy,
        onSelectionChanged:
            onSelectionChanged == null ? null : onSelectionChangedProxy,
        onSelectionHandleTapped: onSelectionHandleTapped == null
            ? null
            : onSelectionHandleTappedProxy,
        onSubmitted: onSubmitted == null ? null : onSubmittedProxy,
        onTapOutside: onTapOutside == null ? null : onTapOutsideProxy,
        paintCursorAboveText: paintCursorAboveText ?? false,
        readOnly: readOnly ?? false,
        rendererIgnoresPointer: rendererIgnoresPointer ?? false,
        restorationId: restorationId,
        scribbleEnabled: scribbleEnabled ?? true,
        scrollBehavior: scrollBehavior,
        scrollController: scrollController,
        scrollPadding: scrollPadding ?? const EdgeInsets.all(20.0),
        scrollPhysics: scrollPhysics,
        selectionColor: selectionColor,
        selectionControls: selectionControls,
        selectionHeightStyle: selectionHeightStyle ?? BoxHeightStyle.tight,
        selectionWidthStyle: selectionWidthStyle ?? BoxWidthStyle.tight,
        showCursor: showCursor,
        showSelectionHandles: showSelectionHandles ?? false,
        smartDashesType: smartDashesType,
        smartQuotesType: smartQuotesType,
        spellCheckConfiguration: spellCheckConfiguration,
        strutStyle: strutStyle,
        style: style,
        textAlign: textAlign ?? TextAlign.start,
        textCapitalization: textCapitalization ?? TextCapitalization.none,
        textDirection: textDirection,
        textHeightBehavior: textHeightBehavior,
        textInputAction: textInputAction,
        textScaleFactor: textScaleFactor,
        textWidthBasis: textWidthBasis ?? TextWidthBasis.parent,
        toolbarOptions: toolbarOptions,
        undoController: undoController,
      );
    };
Function _EditableText_getEditableButtonItems$(m.Scope scope$) => ({
      required ClipboardStatus? clipboardStatus,
      required m.FunctionPointer? onCopy,
      required m.FunctionPointer? onCut,
      required m.FunctionPointer? onPaste,
      required m.FunctionPointer? onSelectAll,
    }) {
      void onCopyProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onCopy!,
            [],
            {},
          );
      void onCutProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onCut!,
            [],
            {},
          );
      void onPasteProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPaste!,
            [],
            {},
          );
      void onSelectAllProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onSelectAll!,
            [],
            {},
          );
      return EditableText.getEditableButtonItems(
        clipboardStatus: clipboardStatus,
        onCopy: onCopy == null ? null : onCopyProxy,
        onCut: onCut == null ? null : onCutProxy,
        onPaste: onPaste == null ? null : onPasteProxy,
        onSelectAll: onSelectAll == null ? null : onSelectAllProxy,
      );
    };
Function _EditableText_createState$(
  m.Scope scope$,
  EditableText target$,
) =>
    target$.createState;
Function _EditableText_debugFillProperties$(
  m.Scope scope$,
  EditableText target$,
) =>
    target$.debugFillProperties;
Function EditableTextState_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as EditableTextState;
Function EditableTextState_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is EditableTextState;
Function _EditableTextState_clipboardStatus$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    () {
      return target$.clipboardStatus;
    };
Function _EditableTextState_spellCheckResults$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    () {
      return target$.spellCheckResults;
    };
void _EditableTextState_spellCheckResults_set$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    (dynamic other$) {
      target$.spellCheckResults = other$;
    };
Function _EditableTextState_renderEditable$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    () {
      return target$.renderEditable;
    };
Function _EditableTextState_currentAutofillScope$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    () {
      return target$.currentAutofillScope;
    };
Function _EditableTextState_spellCheckConfiguration$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    () {
      return target$.spellCheckConfiguration;
    };
Function _EditableTextState_spellCheckEnabled$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    () {
      return target$.spellCheckEnabled;
    };
Function _EditableTextState_wantKeepAlive$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    () {
      return target$.wantKeepAlive;
    };
Function _EditableTextState_cutEnabled$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    () {
      return target$.cutEnabled;
    };
Function _EditableTextState_copyEnabled$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    () {
      return target$.copyEnabled;
    };
Function _EditableTextState_pasteEnabled$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    () {
      return target$.pasteEnabled;
    };
Function _EditableTextState_selectAllEnabled$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    () {
      return target$.selectAllEnabled;
    };
Function _EditableTextState_contextMenuAnchors$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    () {
      return target$.contextMenuAnchors;
    };
Function _EditableTextState_contextMenuButtonItems$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    () {
      return target$.contextMenuButtonItems;
    };
Function _EditableTextState_currentTextEditingValue$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    () {
      return target$.currentTextEditingValue;
    };
Function _EditableTextState_cursorCurrentlyVisible$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    () {
      return target$.cursorCurrentlyVisible;
    };
Function _EditableTextState_cursorBlinkInterval$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    () {
      return target$.cursorBlinkInterval;
    };
Function _EditableTextState_selectionOverlay$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    () {
      return target$.selectionOverlay;
    };
Function _EditableTextState_textEditingValue$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    () {
      return target$.textEditingValue;
    };
Function _EditableTextState_autofillId$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    () {
      return target$.autofillId;
    };
Function _EditableTextState_textInputConfiguration$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    () {
      return target$.textInputConfiguration;
    };
Function _EditableTextState__$(m.Scope scope$) => () {
      return EditableTextState();
    };
Function _EditableTextState_copySelection$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.copySelection;
Function _EditableTextState_cutSelection$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.cutSelection;
Function _EditableTextState_pasteText$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.pasteText;
Function _EditableTextState_selectAll$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.selectAll;
Function _EditableTextState_findSuggestionSpanAtCursorIndex$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.findSuggestionSpanAtCursorIndex;
Function _EditableTextState_initState$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.initState;
Function _EditableTextState_didChangeDependencies$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.didChangeDependencies;
Function _EditableTextState_didUpdateWidget$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.didUpdateWidget;
Function _EditableTextState_dispose$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.dispose;
Function _EditableTextState_updateEditingValue$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.updateEditingValue;
Function _EditableTextState_performAction$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.performAction;
Function _EditableTextState_performPrivateCommand$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.performPrivateCommand;
Function _EditableTextState_insertContent$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.insertContent;
Function _EditableTextState_updateFloatingCursor$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.updateFloatingCursor;
Function _EditableTextState_beginBatchEdit$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.beginBatchEdit;
Function _EditableTextState_endBatchEdit$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.endBatchEdit;
Function _EditableTextState_didChangeInputControl$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.didChangeInputControl;
Function _EditableTextState_connectionClosed$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.connectionClosed;
Function _EditableTextState_requestKeyboard$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.requestKeyboard;
Function _EditableTextState_didChangeMetrics$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.didChangeMetrics;
Function _EditableTextState_userUpdateTextEditingValue$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.userUpdateTextEditingValue;
Function _EditableTextState_bringIntoView$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.bringIntoView;
Function _EditableTextState_showToolbar$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.showToolbar;
Function _EditableTextState_hideToolbar$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.hideToolbar;
Function _EditableTextState_toggleToolbar$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.toggleToolbar;
Function _EditableTextState_showSpellCheckSuggestionsToolbar$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.showSpellCheckSuggestionsToolbar;
Function _EditableTextState_showMagnifier$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.showMagnifier;
Function _EditableTextState_hideMagnifier$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.hideMagnifier;
Function _EditableTextState_insertTextPlaceholder$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.insertTextPlaceholder;
Function _EditableTextState_removeTextPlaceholder$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.removeTextPlaceholder;
Function _EditableTextState_performSelector$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.performSelector;
Function _EditableTextState_autofill$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.autofill;
Function _EditableTextState_showAutocorrectionPromptRect$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.showAutocorrectionPromptRect;
Function _EditableTextState_build$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.build;
Function _EditableTextState_buildTextSpan$(
  m.Scope scope$,
  EditableTextState target$,
) =>
    target$.buildTextSpan;
