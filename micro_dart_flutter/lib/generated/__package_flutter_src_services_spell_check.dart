// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/spell_check.dart';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/services/system_channels.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/spell_check.dart',
  {
    'SuggestionSpan.': _SuggestionSpan__$,
    'SpellCheckResults.': _SpellCheckResults__$,
    'DefaultSpellCheckService.': _DefaultSpellCheckService__$,
    'DefaultSpellCheckService.mergeResults':
        _DefaultSpellCheckService_mergeResults$,
  },
  {},
  {
    'SuggestionSpan': m.ClassMirror(
      'SuggestionSpan',
      {
        '#as': SuggestionSpan_as$,
        '#is': SuggestionSpan_is$,
        'range': _SuggestionSpan_range$,
        'suggestions': _SuggestionSpan_suggestions$,
        'hashCode': _SuggestionSpan_hashCode$,
        '==': _SuggestionSpan_eq$$,
      },
      {},
    ),
    'SpellCheckResults': m.ClassMirror(
      'SpellCheckResults',
      {
        '#as': SpellCheckResults_as$,
        '#is': SpellCheckResults_is$,
        'spellCheckedText': _SpellCheckResults_spellCheckedText$,
        'suggestionSpans': _SpellCheckResults_suggestionSpans$,
        'hashCode': _SpellCheckResults_hashCode$,
        '==': _SpellCheckResults_eq$$,
      },
      {},
    ),
    'SpellCheckService': m.ClassMirror(
      'SpellCheckService',
      {
        '#as': SpellCheckService_as$,
        '#is': SpellCheckService_is$,
        'fetchSpellCheckSuggestions':
            _SpellCheckService_fetchSpellCheckSuggestions$,
      },
      {},
    ),
    'DefaultSpellCheckService': m.ClassMirror(
      'DefaultSpellCheckService',
      {
        '#as': DefaultSpellCheckService_as$,
        '#is': DefaultSpellCheckService_is$,
        'lastSavedResults': _DefaultSpellCheckService_lastSavedResults$,
        'spellCheckChannel': _DefaultSpellCheckService_spellCheckChannel$,
        'fetchSpellCheckSuggestions':
            _DefaultSpellCheckService_fetchSpellCheckSuggestions$,
      },
      {
        'lastSavedResults': _DefaultSpellCheckService_lastSavedResults_set$,
        'spellCheckChannel': _DefaultSpellCheckService_spellCheckChannel_set$,
      },
    ),
  },
);
Function SuggestionSpan_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SuggestionSpan;
Function SuggestionSpan_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SuggestionSpan;
Function _SuggestionSpan_range$(
  m.Scope scope$,
  SuggestionSpan target$,
) =>
    () {
      return target$.range;
    };
Function _SuggestionSpan_suggestions$(
  m.Scope scope$,
  SuggestionSpan target$,
) =>
    () {
      return target$.suggestions;
    };
Function _SuggestionSpan_hashCode$(
  m.Scope scope$,
  SuggestionSpan target$,
) =>
    () {
      return target$.hashCode;
    };
Function _SuggestionSpan__$(m.Scope scope$) => (
      TextRange range,
      List suggestions,
    ) {
      return SuggestionSpan(
        range,
        List.from(suggestions),
      );
    };
Function _SuggestionSpan_eq$$(
  m.Scope scope$,
  SuggestionSpan target$,
) =>
    (Object other$) => target$ == other$;
Function SpellCheckResults_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SpellCheckResults;
Function SpellCheckResults_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SpellCheckResults;
Function _SpellCheckResults_spellCheckedText$(
  m.Scope scope$,
  SpellCheckResults target$,
) =>
    () {
      return target$.spellCheckedText;
    };
Function _SpellCheckResults_suggestionSpans$(
  m.Scope scope$,
  SpellCheckResults target$,
) =>
    () {
      return target$.suggestionSpans;
    };
Function _SpellCheckResults_hashCode$(
  m.Scope scope$,
  SpellCheckResults target$,
) =>
    () {
      return target$.hashCode;
    };
Function _SpellCheckResults__$(m.Scope scope$) => (
      String spellCheckedText,
      List suggestionSpans,
    ) {
      return SpellCheckResults(
        spellCheckedText,
        List.from(suggestionSpans),
      );
    };
Function _SpellCheckResults_eq$$(
  m.Scope scope$,
  SpellCheckResults target$,
) =>
    (Object other$) => target$ == other$;
Function SpellCheckService_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SpellCheckService;
Function SpellCheckService_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SpellCheckService;
Function _SpellCheckService_fetchSpellCheckSuggestions$(
  m.Scope scope$,
  SpellCheckService target$,
) =>
    target$.fetchSpellCheckSuggestions;
Function DefaultSpellCheckService_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DefaultSpellCheckService;
Function DefaultSpellCheckService_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DefaultSpellCheckService;
Function _DefaultSpellCheckService_lastSavedResults$(
  m.Scope scope$,
  DefaultSpellCheckService target$,
) =>
    () {
      return target$.lastSavedResults;
    };
void _DefaultSpellCheckService_lastSavedResults_set$(
  m.Scope scope$,
  DefaultSpellCheckService target$,
) =>
    (dynamic other$) {
      target$.lastSavedResults = other$;
    };
Function _DefaultSpellCheckService_spellCheckChannel$(
  m.Scope scope$,
  DefaultSpellCheckService target$,
) =>
    () {
      return target$.spellCheckChannel;
    };
void _DefaultSpellCheckService_spellCheckChannel_set$(
  m.Scope scope$,
  DefaultSpellCheckService target$,
) =>
    (dynamic other$) {
      target$.spellCheckChannel = other$;
    };
Function _DefaultSpellCheckService__$(m.Scope scope$) => () {
      return DefaultSpellCheckService();
    };
Function _DefaultSpellCheckService_mergeResults$(m.Scope scope$) =>
    DefaultSpellCheckService.mergeResults;
Function _DefaultSpellCheckService_fetchSpellCheckSuggestions$(
  m.Scope scope$,
  DefaultSpellCheckService target$,
) =>
    target$.fetchSpellCheckSuggestions;
