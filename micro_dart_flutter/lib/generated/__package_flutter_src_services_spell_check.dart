// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/spell_check.dart';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/services/system_channels.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/spell_check.dart',
  {
    'DefaultSpellCheckService.mergeResults':
        _DefaultSpellCheckService_mergeResults$
  },
  {},
  {
    'SuggestionSpan': m.ClassMirror(
      'SuggestionSpan',
      {
        '#as': SuggestionSpan_as$,
        '#is': SuggestionSpan_is$,
        'range': _SuggestionSpan_range$,
        'suggestions': _SuggestionSpan_suggestions$,
        'hashCode': _SuggestionSpan_hashCode$,
        '==': _SuggestionSpan_eq$$,
      },
      {},
    ),
    'SpellCheckResults': m.ClassMirror(
      'SpellCheckResults',
      {
        '#as': SpellCheckResults_as$,
        '#is': SpellCheckResults_is$,
        'spellCheckedText': _SpellCheckResults_spellCheckedText$,
        'suggestionSpans': _SpellCheckResults_suggestionSpans$,
        'hashCode': _SpellCheckResults_hashCode$,
        '==': _SpellCheckResults_eq$$,
      },
      {},
    ),
    'SpellCheckService': m.ClassMirror(
      'SpellCheckService',
      {
        '#as': SpellCheckService_as$,
        '#is': SpellCheckService_is$,
        'fetchSpellCheckSuggestions':
            _SpellCheckService_fetchSpellCheckSuggestions$,
      },
      {},
    ),
    'DefaultSpellCheckService': m.ClassMirror(
      'DefaultSpellCheckService',
      {
        '#as': DefaultSpellCheckService_as$,
        '#is': DefaultSpellCheckService_is$,
        'lastSavedResults': _DefaultSpellCheckService_lastSavedResults$,
        'spellCheckChannel': _DefaultSpellCheckService_spellCheckChannel$,
        'fetchSpellCheckSuggestions':
            _DefaultSpellCheckService_fetchSpellCheckSuggestions$,
      },
      {
        'lastSavedResults': _DefaultSpellCheckService_lastSavedResults_set$,
        'spellCheckChannel': _DefaultSpellCheckService_spellCheckChannel_set$,
      },
    ),
  },
);
Function SuggestionSpan_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SuggestionSpan;
Function SuggestionSpan_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SuggestionSpan;
TextRange _SuggestionSpan_range$(SuggestionSpan target) {
  return target.range;
}

List<String> _SuggestionSpan_suggestions$(SuggestionSpan target) {
  return target.suggestions;
}

int _SuggestionSpan_hashCode$(SuggestionSpan target) {
  return target.hashCode;
}

Function _SuggestionSpan_eq$$(
  m.Scope scope,
  SuggestionSpan target,
) =>
    (Object other) => target == other;
Function SpellCheckResults_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SpellCheckResults;
Function SpellCheckResults_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SpellCheckResults;
String _SpellCheckResults_spellCheckedText$(SpellCheckResults target) {
  return target.spellCheckedText;
}

List<SuggestionSpan> _SpellCheckResults_suggestionSpans$(
    SpellCheckResults target) {
  return target.suggestionSpans;
}

int _SpellCheckResults_hashCode$(SpellCheckResults target) {
  return target.hashCode;
}

Function _SpellCheckResults_eq$$(
  m.Scope scope,
  SpellCheckResults target,
) =>
    (Object other) => target == other;
Function SpellCheckService_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SpellCheckService;
Function SpellCheckService_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SpellCheckService;
Function _SpellCheckService_fetchSpellCheckSuggestions$(
  m.Scope scope,
  SpellCheckService target,
) =>
    target.fetchSpellCheckSuggestions;
Function DefaultSpellCheckService_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DefaultSpellCheckService;
Function DefaultSpellCheckService_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DefaultSpellCheckService;
SpellCheckResults? _DefaultSpellCheckService_lastSavedResults$(
    DefaultSpellCheckService target) {
  return target.lastSavedResults;
}

void _DefaultSpellCheckService_lastSavedResults_set$(
  DefaultSpellCheckService target,
  SpellCheckResults? other,
) {
  target.lastSavedResults = other;
}

MethodChannel _DefaultSpellCheckService_spellCheckChannel$(
    DefaultSpellCheckService target) {
  return target.spellCheckChannel;
}

void _DefaultSpellCheckService_spellCheckChannel_set$(
  DefaultSpellCheckService target,
  MethodChannel other,
) {
  target.spellCheckChannel = other;
}

Function _DefaultSpellCheckService_mergeResults$(m.Scope scope) =>
    DefaultSpellCheckService.mergeResults;
Function _DefaultSpellCheckService_fetchSpellCheckSuggestions$(
  m.Scope scope,
  DefaultSpellCheckService target,
) =>
    target.fetchSpellCheckSuggestions;
