// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/tab_controller.dart';
import 'dart:math';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/constants.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/tab_controller.dart',
  {
    'DefaultTabController.maybeOf': _DefaultTabController_maybeOf$,
    'DefaultTabController.of': _DefaultTabController_of$,
  },
  {},
  {
    'TabController': m.ClassMirror(
      'TabController',
      {
        '#as': TabController_as$,
        '#is': TabController_is$,
        'length': _TabController_length$,
        'animation': _TabController_animation$,
        'animationDuration': _TabController_animationDuration$,
        'index': _TabController_index$,
        'previousIndex': _TabController_previousIndex$,
        'indexIsChanging': _TabController_indexIsChanging$,
        'offset': _TabController_offset$,
        'animateTo': _TabController_animateTo$,
        'dispose': _TabController_dispose$,
      },
      {
        'index': _TabController_index_set$,
        'offset': _TabController_offset_set$,
      },
    ),
    'DefaultTabController': m.ClassMirror(
      'DefaultTabController',
      {
        '#as': DefaultTabController_as$,
        '#is': DefaultTabController_is$,
        'length': _DefaultTabController_length$,
        'initialIndex': _DefaultTabController_initialIndex$,
        'animationDuration': _DefaultTabController_animationDuration$,
        'child': _DefaultTabController_child$,
        'createState': _DefaultTabController_createState$,
      },
      {},
    ),
  },
);
Function TabController_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as TabController;
Function TabController_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is TabController;
int _TabController_length$(TabController target) {
  return target.length;
}

Animation<double>? _TabController_animation$(TabController target) {
  return target.animation;
}

Duration _TabController_animationDuration$(TabController target) {
  return target.animationDuration;
}

int _TabController_index$(TabController target) {
  return target.index;
}

void _TabController_index_set$(
  TabController target,
  int other,
) {
  target.index = other;
}

int _TabController_previousIndex$(TabController target) {
  return target.previousIndex;
}

bool _TabController_indexIsChanging$(TabController target) {
  return target.indexIsChanging;
}

double _TabController_offset$(TabController target) {
  return target.offset;
}

void _TabController_offset_set$(
  TabController target,
  double other,
) {
  target.offset = other;
}

Function _TabController_animateTo$(
  m.Scope scope,
  TabController target,
) =>
    target.animateTo;
Function _TabController_dispose$(
  m.Scope scope,
  TabController target,
) =>
    target.dispose;
Function DefaultTabController_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DefaultTabController;
Function DefaultTabController_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DefaultTabController;
int _DefaultTabController_length$(DefaultTabController target) {
  return target.length;
}

int _DefaultTabController_initialIndex$(DefaultTabController target) {
  return target.initialIndex;
}

Duration? _DefaultTabController_animationDuration$(
    DefaultTabController target) {
  return target.animationDuration;
}

Widget _DefaultTabController_child$(DefaultTabController target) {
  return target.child;
}

Function _DefaultTabController_maybeOf$(m.Scope scope) =>
    DefaultTabController.maybeOf;
Function _DefaultTabController_of$(m.Scope scope) => DefaultTabController.of;
Function _DefaultTabController_createState$(
  m.Scope scope,
  DefaultTabController target,
) =>
    target.createState;
