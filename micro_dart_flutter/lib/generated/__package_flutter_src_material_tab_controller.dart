// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/tab_controller.dart';
import 'dart:math';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/constants.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/tab_controller.dart',
  {
    'TabController.': _TabController__$,
    'DefaultTabController.': _DefaultTabController__$,
    'DefaultTabController.maybeOf': _DefaultTabController_maybeOf$,
    'DefaultTabController.of': _DefaultTabController_of$,
  },
  {},
  {
    'TabController': m.ClassMirror(
      'TabController',
      {
        '#as': TabController_as$,
        '#is': TabController_is$,
        'length': _TabController_length$,
        'animation': _TabController_animation$,
        'animationDuration': _TabController_animationDuration$,
        'index': _TabController_index$,
        'previousIndex': _TabController_previousIndex$,
        'indexIsChanging': _TabController_indexIsChanging$,
        'offset': _TabController_offset$,
        'animateTo': _TabController_animateTo$,
        'dispose': _TabController_dispose$,
      },
      {
        'index': _TabController_index_set$,
        'offset': _TabController_offset_set$,
      },
    ),
    'DefaultTabController': m.ClassMirror(
      'DefaultTabController',
      {
        '#as': DefaultTabController_as$,
        '#is': DefaultTabController_is$,
        'length': _DefaultTabController_length$,
        'initialIndex': _DefaultTabController_initialIndex$,
        'animationDuration': _DefaultTabController_animationDuration$,
        'child': _DefaultTabController_child$,
        'createState': _DefaultTabController_createState$,
      },
      {},
    ),
  },
);
Function TabController_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TabController;
Function TabController_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TabController;
Function _TabController_length$(
  m.Scope scope$,
  TabController target$,
) =>
    () {
      return target$.length;
    };
Function _TabController_animation$(
  m.Scope scope$,
  TabController target$,
) =>
    () {
      return target$.animation;
    };
Function _TabController_animationDuration$(
  m.Scope scope$,
  TabController target$,
) =>
    () {
      return target$.animationDuration;
    };
Function _TabController_index$(
  m.Scope scope$,
  TabController target$,
) =>
    () {
      return target$.index;
    };
void _TabController_index_set$(
  m.Scope scope$,
  TabController target$,
) =>
    (dynamic other$) {
      target$.index = other$;
    };
Function _TabController_previousIndex$(
  m.Scope scope$,
  TabController target$,
) =>
    () {
      return target$.previousIndex;
    };
Function _TabController_indexIsChanging$(
  m.Scope scope$,
  TabController target$,
) =>
    () {
      return target$.indexIsChanging;
    };
Function _TabController_offset$(
  m.Scope scope$,
  TabController target$,
) =>
    () {
      return target$.offset;
    };
void _TabController_offset_set$(
  m.Scope scope$,
  TabController target$,
) =>
    (dynamic other$) {
      target$.offset = other$;
    };
Function _TabController__$(m.Scope scope$) => ({
      int? initialIndex,
      Duration? animationDuration,
      required int length,
      required TickerProvider vsync,
    }) {
      return TabController(
        animationDuration: animationDuration,
        initialIndex: initialIndex ?? 0,
        length: length,
        vsync: vsync,
      );
    };
Function _TabController_animateTo$(
  m.Scope scope$,
  TabController target$,
) =>
    target$.animateTo;
Function _TabController_dispose$(
  m.Scope scope$,
  TabController target$,
) =>
    target$.dispose;
Function DefaultTabController_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DefaultTabController;
Function DefaultTabController_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DefaultTabController;
Function _DefaultTabController_length$(
  m.Scope scope$,
  DefaultTabController target$,
) =>
    () {
      return target$.length;
    };
Function _DefaultTabController_initialIndex$(
  m.Scope scope$,
  DefaultTabController target$,
) =>
    () {
      return target$.initialIndex;
    };
Function _DefaultTabController_animationDuration$(
  m.Scope scope$,
  DefaultTabController target$,
) =>
    () {
      return target$.animationDuration;
    };
Function _DefaultTabController_child$(
  m.Scope scope$,
  DefaultTabController target$,
) =>
    () {
      return target$.child;
    };
Function _DefaultTabController__$(m.Scope scope$) => ({
      Key? key,
      required int length,
      int? initialIndex,
      required Widget child,
      Duration? animationDuration,
    }) {
      return DefaultTabController(
        animationDuration: animationDuration,
        child: child,
        initialIndex: initialIndex ?? 0,
        key: key,
        length: length,
      );
    };
Function _DefaultTabController_maybeOf$(m.Scope scope$) =>
    DefaultTabController.maybeOf;
Function _DefaultTabController_of$(m.Scope scope$) => DefaultTabController.of;
Function _DefaultTabController_createState$(
  m.Scope scope$,
  DefaultTabController target$,
) =>
    target$.createState;
