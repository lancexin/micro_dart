// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/popup_menu_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/popup_menu_theme.dart',
  {
    'PopupMenuThemeData.': _PopupMenuThemeData__$,
    'PopupMenuThemeData.lerp': _PopupMenuThemeData_lerp$,
    'PopupMenuTheme.': _PopupMenuTheme__$,
    'PopupMenuTheme.of': _PopupMenuTheme_of$,
    'PopupMenuPosition.over': _PopupMenuPosition_over$,
    'PopupMenuPosition.under': _PopupMenuPosition_under$,
    'PopupMenuPosition.values': _PopupMenuPosition_values$,
  },
  {},
  {
    'PopupMenuThemeData': m.ClassMirror(
      'PopupMenuThemeData',
      {
        '#as': PopupMenuThemeData_as$,
        '#is': PopupMenuThemeData_is$,
        'color': _PopupMenuThemeData_color$,
        'shape': _PopupMenuThemeData_shape$,
        'elevation': _PopupMenuThemeData_elevation$,
        'shadowColor': _PopupMenuThemeData_shadowColor$,
        'surfaceTintColor': _PopupMenuThemeData_surfaceTintColor$,
        'textStyle': _PopupMenuThemeData_textStyle$,
        'labelTextStyle': _PopupMenuThemeData_labelTextStyle$,
        'enableFeedback': _PopupMenuThemeData_enableFeedback$,
        'mouseCursor': _PopupMenuThemeData_mouseCursor$,
        'position': _PopupMenuThemeData_position$,
        'hashCode': _PopupMenuThemeData_hashCode$,
        'copyWith': _PopupMenuThemeData_copyWith$,
        '==': _PopupMenuThemeData_eq$$,
        'debugFillProperties': _PopupMenuThemeData_debugFillProperties$,
      },
      {},
    ),
    'PopupMenuTheme': m.ClassMirror(
      'PopupMenuTheme',
      {
        '#as': PopupMenuTheme_as$,
        '#is': PopupMenuTheme_is$,
        'data': _PopupMenuTheme_data$,
        'wrap': _PopupMenuTheme_wrap$,
        'updateShouldNotify': _PopupMenuTheme_updateShouldNotify$,
      },
      {},
    ),
    'PopupMenuPosition': m.ClassMirror(
      'PopupMenuPosition',
      {},
      {},
    ),
  },
);
Function PopupMenuThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PopupMenuThemeData;
Function PopupMenuThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PopupMenuThemeData;
Function _PopupMenuThemeData_color$(
  m.Scope scope$,
  PopupMenuThemeData target$,
) =>
    () {
      return target$.color;
    };
Function _PopupMenuThemeData_shape$(
  m.Scope scope$,
  PopupMenuThemeData target$,
) =>
    () {
      return target$.shape;
    };
Function _PopupMenuThemeData_elevation$(
  m.Scope scope$,
  PopupMenuThemeData target$,
) =>
    () {
      return target$.elevation;
    };
Function _PopupMenuThemeData_shadowColor$(
  m.Scope scope$,
  PopupMenuThemeData target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _PopupMenuThemeData_surfaceTintColor$(
  m.Scope scope$,
  PopupMenuThemeData target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _PopupMenuThemeData_textStyle$(
  m.Scope scope$,
  PopupMenuThemeData target$,
) =>
    () {
      return target$.textStyle;
    };
Function _PopupMenuThemeData_labelTextStyle$(
  m.Scope scope$,
  PopupMenuThemeData target$,
) =>
    () {
      return target$.labelTextStyle;
    };
Function _PopupMenuThemeData_enableFeedback$(
  m.Scope scope$,
  PopupMenuThemeData target$,
) =>
    () {
      return target$.enableFeedback;
    };
Function _PopupMenuThemeData_mouseCursor$(
  m.Scope scope$,
  PopupMenuThemeData target$,
) =>
    () {
      return target$.mouseCursor;
    };
Function _PopupMenuThemeData_position$(
  m.Scope scope$,
  PopupMenuThemeData target$,
) =>
    () {
      return target$.position;
    };
Function _PopupMenuThemeData_hashCode$(
  m.Scope scope$,
  PopupMenuThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _PopupMenuThemeData__$(m.Scope scope$) => ({
      Color? color,
      ShapeBorder? shape,
      double? elevation,
      Color? shadowColor,
      Color? surfaceTintColor,
      TextStyle? textStyle,
      MaterialStateProperty<TextStyle>? labelTextStyle,
      bool? enableFeedback,
      MaterialStateProperty<MouseCursor>? mouseCursor,
      PopupMenuPosition? position,
    }) {
      return PopupMenuThemeData(
        color: color,
        elevation: elevation,
        enableFeedback: enableFeedback,
        labelTextStyle: labelTextStyle,
        mouseCursor: mouseCursor,
        position: position,
        shadowColor: shadowColor,
        shape: shape,
        surfaceTintColor: surfaceTintColor,
        textStyle: textStyle,
      );
    };
Function _PopupMenuThemeData_copyWith$(
  m.Scope scope$,
  PopupMenuThemeData target$,
) =>
    target$.copyWith;
Function _PopupMenuThemeData_lerp$(m.Scope scope$) => PopupMenuThemeData.lerp;
Function _PopupMenuThemeData_eq$$(
  m.Scope scope$,
  PopupMenuThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _PopupMenuThemeData_debugFillProperties$(
  m.Scope scope$,
  PopupMenuThemeData target$,
) =>
    target$.debugFillProperties;
Function PopupMenuTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PopupMenuTheme;
Function PopupMenuTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PopupMenuTheme;
Function _PopupMenuTheme_data$(
  m.Scope scope$,
  PopupMenuTheme target$,
) =>
    () {
      return target$.data;
    };
Function _PopupMenuTheme__$(m.Scope scope$) => ({
      Key? key,
      required PopupMenuThemeData data,
      required Widget child,
    }) {
      return PopupMenuTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _PopupMenuTheme_of$(m.Scope scope$) => PopupMenuTheme.of;
Function _PopupMenuTheme_wrap$(
  m.Scope scope$,
  PopupMenuTheme target$,
) =>
    target$.wrap;
Function _PopupMenuTheme_updateShouldNotify$(
  m.Scope scope$,
  PopupMenuTheme target$,
) =>
    target$.updateShouldNotify;
PopupMenuPosition _PopupMenuPosition_over$() {
  return PopupMenuPosition.over;
}

PopupMenuPosition _PopupMenuPosition_under$() {
  return PopupMenuPosition.under;
}

List<PopupMenuPosition> _PopupMenuPosition_values$() {
  return PopupMenuPosition.values;
}
