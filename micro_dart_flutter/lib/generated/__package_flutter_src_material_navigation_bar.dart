// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/navigation_bar.dart';
import 'package:flutter/foundation.dart' show clampDouble;
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/elevation_overlay.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/navigation_bar_theme.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/tooltip.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/navigation_bar.dart',
  {
    'NavigationDestinationLabelBehavior.alwaysShow':
        _NavigationDestinationLabelBehavior_alwaysShow$,
    'NavigationDestinationLabelBehavior.alwaysHide':
        _NavigationDestinationLabelBehavior_alwaysHide$,
    'NavigationDestinationLabelBehavior.onlyShowSelected':
        _NavigationDestinationLabelBehavior_onlyShowSelected$,
    'NavigationDestinationLabelBehavior.values':
        _NavigationDestinationLabelBehavior_values$,
  },
  {},
  {
    'NavigationBar': m.ClassMirror(
      'NavigationBar',
      {
        '#as': NavigationBar_as$,
        '#is': NavigationBar_is$,
        'animationDuration': _NavigationBar_animationDuration$,
        'selectedIndex': _NavigationBar_selectedIndex$,
        'destinations': _NavigationBar_destinations$,
        'onDestinationSelected': _NavigationBar_onDestinationSelected$,
        'backgroundColor': _NavigationBar_backgroundColor$,
        'elevation': _NavigationBar_elevation$,
        'shadowColor': _NavigationBar_shadowColor$,
        'surfaceTintColor': _NavigationBar_surfaceTintColor$,
        'indicatorColor': _NavigationBar_indicatorColor$,
        'indicatorShape': _NavigationBar_indicatorShape$,
        'height': _NavigationBar_height$,
        'labelBehavior': _NavigationBar_labelBehavior$,
        'build': _NavigationBar_build$,
      },
      {},
    ),
    'NavigationDestination': m.ClassMirror(
      'NavigationDestination',
      {
        '#as': NavigationDestination_as$,
        '#is': NavigationDestination_is$,
        'icon': _NavigationDestination_icon$,
        'selectedIcon': _NavigationDestination_selectedIcon$,
        'label': _NavigationDestination_label$,
        'tooltip': _NavigationDestination_tooltip$,
        'build': _NavigationDestination_build$,
      },
      {},
    ),
    'NavigationIndicator': m.ClassMirror(
      'NavigationIndicator',
      {
        '#as': NavigationIndicator_as$,
        '#is': NavigationIndicator_is$,
        'animation': _NavigationIndicator_animation$,
        'color': _NavigationIndicator_color$,
        'width': _NavigationIndicator_width$,
        'height': _NavigationIndicator_height$,
        'borderRadius': _NavigationIndicator_borderRadius$,
        'shape': _NavigationIndicator_shape$,
        'build': _NavigationIndicator_build$,
      },
      {},
    ),
    'NavigationDestinationLabelBehavior': m.ClassMirror(
      'NavigationDestinationLabelBehavior',
      {},
      {},
    ),
  },
);
Function NavigationBar_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as NavigationBar;
Function NavigationBar_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is NavigationBar;
Duration? _NavigationBar_animationDuration$(NavigationBar target) {
  return target.animationDuration;
}

int _NavigationBar_selectedIndex$(NavigationBar target) {
  return target.selectedIndex;
}

List<Widget> _NavigationBar_destinations$(NavigationBar target) {
  return target.destinations;
}

void Function(int)? _NavigationBar_onDestinationSelected$(
    NavigationBar target) {
  return target.onDestinationSelected;
}

Color? _NavigationBar_backgroundColor$(NavigationBar target) {
  return target.backgroundColor;
}

double? _NavigationBar_elevation$(NavigationBar target) {
  return target.elevation;
}

Color? _NavigationBar_shadowColor$(NavigationBar target) {
  return target.shadowColor;
}

Color? _NavigationBar_surfaceTintColor$(NavigationBar target) {
  return target.surfaceTintColor;
}

Color? _NavigationBar_indicatorColor$(NavigationBar target) {
  return target.indicatorColor;
}

ShapeBorder? _NavigationBar_indicatorShape$(NavigationBar target) {
  return target.indicatorShape;
}

double? _NavigationBar_height$(NavigationBar target) {
  return target.height;
}

NavigationDestinationLabelBehavior? _NavigationBar_labelBehavior$(
    NavigationBar target) {
  return target.labelBehavior;
}

Function _NavigationBar_build$(
  m.Scope scope,
  NavigationBar target,
) =>
    target.build;
Function NavigationDestination_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as NavigationDestination;
Function NavigationDestination_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is NavigationDestination;
Widget _NavigationDestination_icon$(NavigationDestination target) {
  return target.icon;
}

Widget? _NavigationDestination_selectedIcon$(NavigationDestination target) {
  return target.selectedIcon;
}

String _NavigationDestination_label$(NavigationDestination target) {
  return target.label;
}

String? _NavigationDestination_tooltip$(NavigationDestination target) {
  return target.tooltip;
}

Function _NavigationDestination_build$(
  m.Scope scope,
  NavigationDestination target,
) =>
    target.build;
Function NavigationIndicator_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as NavigationIndicator;
Function NavigationIndicator_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is NavigationIndicator;
Animation<double> _NavigationIndicator_animation$(NavigationIndicator target) {
  return target.animation;
}

Color? _NavigationIndicator_color$(NavigationIndicator target) {
  return target.color;
}

double _NavigationIndicator_width$(NavigationIndicator target) {
  return target.width;
}

double _NavigationIndicator_height$(NavigationIndicator target) {
  return target.height;
}

BorderRadius _NavigationIndicator_borderRadius$(NavigationIndicator target) {
  return target.borderRadius;
}

ShapeBorder? _NavigationIndicator_shape$(NavigationIndicator target) {
  return target.shape;
}

Function _NavigationIndicator_build$(
  m.Scope scope,
  NavigationIndicator target,
) =>
    target.build;
NavigationDestinationLabelBehavior
    _NavigationDestinationLabelBehavior_alwaysShow$() {
  return NavigationDestinationLabelBehavior.alwaysShow;
}

NavigationDestinationLabelBehavior
    _NavigationDestinationLabelBehavior_alwaysHide$() {
  return NavigationDestinationLabelBehavior.alwaysHide;
}

NavigationDestinationLabelBehavior
    _NavigationDestinationLabelBehavior_onlyShowSelected$() {
  return NavigationDestinationLabelBehavior.onlyShowSelected;
}

List<NavigationDestinationLabelBehavior>
    _NavigationDestinationLabelBehavior_values$() {
  return NavigationDestinationLabelBehavior.values;
}
