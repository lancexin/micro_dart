// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/navigation_bar.dart';
import 'package:flutter/foundation.dart' show clampDouble;
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/elevation_overlay.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/navigation_bar_theme.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/tooltip.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/navigation_bar.dart',
  {
    'NavigationBar.': _NavigationBar__$,
    'NavigationDestination.': _NavigationDestination__$,
    'NavigationIndicator.': _NavigationIndicator__$,
    'NavigationDestinationLabelBehavior.alwaysShow':
        _NavigationDestinationLabelBehavior_alwaysShow$,
    'NavigationDestinationLabelBehavior.alwaysHide':
        _NavigationDestinationLabelBehavior_alwaysHide$,
    'NavigationDestinationLabelBehavior.onlyShowSelected':
        _NavigationDestinationLabelBehavior_onlyShowSelected$,
    'NavigationDestinationLabelBehavior.values':
        _NavigationDestinationLabelBehavior_values$,
  },
  {},
  {
    'NavigationBar': m.ClassMirror(
      'NavigationBar',
      {
        '#as': NavigationBar_as$,
        '#is': NavigationBar_is$,
        'animationDuration': _NavigationBar_animationDuration$,
        'selectedIndex': _NavigationBar_selectedIndex$,
        'destinations': _NavigationBar_destinations$,
        'onDestinationSelected': _NavigationBar_onDestinationSelected$,
        'backgroundColor': _NavigationBar_backgroundColor$,
        'elevation': _NavigationBar_elevation$,
        'shadowColor': _NavigationBar_shadowColor$,
        'surfaceTintColor': _NavigationBar_surfaceTintColor$,
        'indicatorColor': _NavigationBar_indicatorColor$,
        'indicatorShape': _NavigationBar_indicatorShape$,
        'height': _NavigationBar_height$,
        'labelBehavior': _NavigationBar_labelBehavior$,
        'build': _NavigationBar_build$,
      },
      {},
    ),
    'NavigationDestination': m.ClassMirror(
      'NavigationDestination',
      {
        '#as': NavigationDestination_as$,
        '#is': NavigationDestination_is$,
        'icon': _NavigationDestination_icon$,
        'selectedIcon': _NavigationDestination_selectedIcon$,
        'label': _NavigationDestination_label$,
        'tooltip': _NavigationDestination_tooltip$,
        'build': _NavigationDestination_build$,
      },
      {},
    ),
    'NavigationIndicator': m.ClassMirror(
      'NavigationIndicator',
      {
        '#as': NavigationIndicator_as$,
        '#is': NavigationIndicator_is$,
        'animation': _NavigationIndicator_animation$,
        'color': _NavigationIndicator_color$,
        'width': _NavigationIndicator_width$,
        'height': _NavigationIndicator_height$,
        'borderRadius': _NavigationIndicator_borderRadius$,
        'shape': _NavigationIndicator_shape$,
        'build': _NavigationIndicator_build$,
      },
      {},
    ),
    'NavigationDestinationLabelBehavior': m.ClassMirror(
      'NavigationDestinationLabelBehavior',
      {},
      {},
    ),
  },
);
Function NavigationBar_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as NavigationBar;
Function NavigationBar_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is NavigationBar;
Function _NavigationBar_animationDuration$(
  m.Scope scope$,
  NavigationBar target$,
) =>
    () {
      return target$.animationDuration;
    };
Function _NavigationBar_selectedIndex$(
  m.Scope scope$,
  NavigationBar target$,
) =>
    () {
      return target$.selectedIndex;
    };
Function _NavigationBar_destinations$(
  m.Scope scope$,
  NavigationBar target$,
) =>
    () {
      return target$.destinations;
    };
Function _NavigationBar_onDestinationSelected$(
  m.Scope scope$,
  NavigationBar target$,
) =>
    () {
      return target$.onDestinationSelected;
    };
Function _NavigationBar_backgroundColor$(
  m.Scope scope$,
  NavigationBar target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _NavigationBar_elevation$(
  m.Scope scope$,
  NavigationBar target$,
) =>
    () {
      return target$.elevation;
    };
Function _NavigationBar_shadowColor$(
  m.Scope scope$,
  NavigationBar target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _NavigationBar_surfaceTintColor$(
  m.Scope scope$,
  NavigationBar target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _NavigationBar_indicatorColor$(
  m.Scope scope$,
  NavigationBar target$,
) =>
    () {
      return target$.indicatorColor;
    };
Function _NavigationBar_indicatorShape$(
  m.Scope scope$,
  NavigationBar target$,
) =>
    () {
      return target$.indicatorShape;
    };
Function _NavigationBar_height$(
  m.Scope scope$,
  NavigationBar target$,
) =>
    () {
      return target$.height;
    };
Function _NavigationBar_labelBehavior$(
  m.Scope scope$,
  NavigationBar target$,
) =>
    () {
      return target$.labelBehavior;
    };
Function _NavigationBar__$(m.Scope scope$) => ({
      Key? key,
      Duration? animationDuration,
      int? selectedIndex,
      required List destinations,
      m.FunctionPointer? onDestinationSelected,
      Color? backgroundColor,
      double? elevation,
      Color? shadowColor,
      Color? surfaceTintColor,
      Color? indicatorColor,
      ShapeBorder? indicatorShape,
      double? height,
      NavigationDestinationLabelBehavior? labelBehavior,
    }) {
      void onDestinationSelectedProxy(int onDestinationSelected_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onDestinationSelected!,
            [onDestinationSelected_value$],
            {},
          );
      return NavigationBar(
        animationDuration: animationDuration,
        backgroundColor: backgroundColor,
        destinations: List.from(destinations),
        elevation: elevation,
        height: height,
        indicatorColor: indicatorColor,
        indicatorShape: indicatorShape,
        key: key,
        labelBehavior: labelBehavior,
        onDestinationSelected:
            onDestinationSelected == null ? null : onDestinationSelectedProxy,
        selectedIndex: selectedIndex ?? 0,
        shadowColor: shadowColor,
        surfaceTintColor: surfaceTintColor,
      );
    };
Function _NavigationBar_build$(
  m.Scope scope$,
  NavigationBar target$,
) =>
    target$.build;
Function NavigationDestination_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as NavigationDestination;
Function NavigationDestination_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is NavigationDestination;
Function _NavigationDestination_icon$(
  m.Scope scope$,
  NavigationDestination target$,
) =>
    () {
      return target$.icon;
    };
Function _NavigationDestination_selectedIcon$(
  m.Scope scope$,
  NavigationDestination target$,
) =>
    () {
      return target$.selectedIcon;
    };
Function _NavigationDestination_label$(
  m.Scope scope$,
  NavigationDestination target$,
) =>
    () {
      return target$.label;
    };
Function _NavigationDestination_tooltip$(
  m.Scope scope$,
  NavigationDestination target$,
) =>
    () {
      return target$.tooltip;
    };
Function _NavigationDestination__$(m.Scope scope$) => ({
      Key? key,
      required Widget icon,
      Widget? selectedIcon,
      required String label,
      String? tooltip,
    }) {
      return NavigationDestination(
        icon: icon,
        key: key,
        label: label,
        selectedIcon: selectedIcon,
        tooltip: tooltip,
      );
    };
Function _NavigationDestination_build$(
  m.Scope scope$,
  NavigationDestination target$,
) =>
    target$.build;
Function NavigationIndicator_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as NavigationIndicator;
Function NavigationIndicator_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is NavigationIndicator;
Function _NavigationIndicator_animation$(
  m.Scope scope$,
  NavigationIndicator target$,
) =>
    () {
      return target$.animation;
    };
Function _NavigationIndicator_color$(
  m.Scope scope$,
  NavigationIndicator target$,
) =>
    () {
      return target$.color;
    };
Function _NavigationIndicator_width$(
  m.Scope scope$,
  NavigationIndicator target$,
) =>
    () {
      return target$.width;
    };
Function _NavigationIndicator_height$(
  m.Scope scope$,
  NavigationIndicator target$,
) =>
    () {
      return target$.height;
    };
Function _NavigationIndicator_borderRadius$(
  m.Scope scope$,
  NavigationIndicator target$,
) =>
    () {
      return target$.borderRadius;
    };
Function _NavigationIndicator_shape$(
  m.Scope scope$,
  NavigationIndicator target$,
) =>
    () {
      return target$.shape;
    };
Function _NavigationIndicator__$(m.Scope scope$) => ({
      Key? key,
      required Animation<double> animation,
      Color? color,
      double? width,
      double? height,
      BorderRadius? borderRadius,
      ShapeBorder? shape,
    }) {
      return NavigationIndicator(
        animation: animation,
        borderRadius:
            borderRadius ?? const BorderRadius.all(Radius.circular(16)),
        color: color,
        height: height ?? 32,
        key: key,
        shape: shape,
        width: width ?? 64,
      );
    };
Function _NavigationIndicator_build$(
  m.Scope scope$,
  NavigationIndicator target$,
) =>
    target$.build;
NavigationDestinationLabelBehavior
    _NavigationDestinationLabelBehavior_alwaysShow$() {
  return NavigationDestinationLabelBehavior.alwaysShow;
}

NavigationDestinationLabelBehavior
    _NavigationDestinationLabelBehavior_alwaysHide$() {
  return NavigationDestinationLabelBehavior.alwaysHide;
}

NavigationDestinationLabelBehavior
    _NavigationDestinationLabelBehavior_onlyShowSelected$() {
  return NavigationDestinationLabelBehavior.onlyShowSelected;
}

List<NavigationDestinationLabelBehavior>
    _NavigationDestinationLabelBehavior_values$() {
  return NavigationDestinationLabelBehavior.values;
}
