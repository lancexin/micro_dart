// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/user_accounts_drawer_header.dart';
import 'dart:math';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/drawer_header.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/user_accounts_drawer_header.dart',
  {},
  {},
  {
    'UserAccountsDrawerHeader': m.ClassMirror(
      'UserAccountsDrawerHeader',
      {
        '#as': UserAccountsDrawerHeader_as$,
        '#is': UserAccountsDrawerHeader_is$,
        'decoration': _UserAccountsDrawerHeader_decoration$,
        'margin': _UserAccountsDrawerHeader_margin$,
        'currentAccountPicture':
            _UserAccountsDrawerHeader_currentAccountPicture$,
        'otherAccountsPictures':
            _UserAccountsDrawerHeader_otherAccountsPictures$,
        'currentAccountPictureSize':
            _UserAccountsDrawerHeader_currentAccountPictureSize$,
        'otherAccountsPicturesSize':
            _UserAccountsDrawerHeader_otherAccountsPicturesSize$,
        'accountName': _UserAccountsDrawerHeader_accountName$,
        'accountEmail': _UserAccountsDrawerHeader_accountEmail$,
        'onDetailsPressed': _UserAccountsDrawerHeader_onDetailsPressed$,
        'arrowColor': _UserAccountsDrawerHeader_arrowColor$,
        'createState': _UserAccountsDrawerHeader_createState$,
      },
      {},
    )
  },
);
Function UserAccountsDrawerHeader_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as UserAccountsDrawerHeader;
Function UserAccountsDrawerHeader_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is UserAccountsDrawerHeader;
Decoration? _UserAccountsDrawerHeader_decoration$(
    UserAccountsDrawerHeader target) {
  return target.decoration;
}

EdgeInsetsGeometry? _UserAccountsDrawerHeader_margin$(
    UserAccountsDrawerHeader target) {
  return target.margin;
}

Widget? _UserAccountsDrawerHeader_currentAccountPicture$(
    UserAccountsDrawerHeader target) {
  return target.currentAccountPicture;
}

List<Widget>? _UserAccountsDrawerHeader_otherAccountsPictures$(
    UserAccountsDrawerHeader target) {
  return target.otherAccountsPictures;
}

Size _UserAccountsDrawerHeader_currentAccountPictureSize$(
    UserAccountsDrawerHeader target) {
  return target.currentAccountPictureSize;
}

Size _UserAccountsDrawerHeader_otherAccountsPicturesSize$(
    UserAccountsDrawerHeader target) {
  return target.otherAccountsPicturesSize;
}

Widget? _UserAccountsDrawerHeader_accountName$(
    UserAccountsDrawerHeader target) {
  return target.accountName;
}

Widget? _UserAccountsDrawerHeader_accountEmail$(
    UserAccountsDrawerHeader target) {
  return target.accountEmail;
}

void Function()? _UserAccountsDrawerHeader_onDetailsPressed$(
    UserAccountsDrawerHeader target) {
  return target.onDetailsPressed;
}

Color _UserAccountsDrawerHeader_arrowColor$(UserAccountsDrawerHeader target) {
  return target.arrowColor;
}

Function _UserAccountsDrawerHeader_createState$(
  m.Scope scope,
  UserAccountsDrawerHeader target,
) =>
    target.createState;
