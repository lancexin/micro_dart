// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/sliver_persistent_header.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/scheduler.dart' show TickerProvider;
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/scroll_position.dart';
import 'package:flutter/src/widgets/scrollable.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/sliver_persistent_header.dart',
  {},
  {},
  {
    'SliverPersistentHeaderDelegate': m.ClassMirror(
      'SliverPersistentHeaderDelegate',
      {
        '#as': SliverPersistentHeaderDelegate_as$,
        '#is': SliverPersistentHeaderDelegate_is$,
        'minExtent': _SliverPersistentHeaderDelegate_minExtent$,
        'maxExtent': _SliverPersistentHeaderDelegate_maxExtent$,
        'vsync': _SliverPersistentHeaderDelegate_vsync$,
        'snapConfiguration': _SliverPersistentHeaderDelegate_snapConfiguration$,
        'stretchConfiguration':
            _SliverPersistentHeaderDelegate_stretchConfiguration$,
        'showOnScreenConfiguration':
            _SliverPersistentHeaderDelegate_showOnScreenConfiguration$,
        'build': _SliverPersistentHeaderDelegate_build$,
        'shouldRebuild': _SliverPersistentHeaderDelegate_shouldRebuild$,
      },
      {},
    ),
    'SliverPersistentHeader': m.ClassMirror(
      'SliverPersistentHeader',
      {
        '#as': SliverPersistentHeader_as$,
        '#is': SliverPersistentHeader_is$,
        'delegate': _SliverPersistentHeader_delegate$,
        'pinned': _SliverPersistentHeader_pinned$,
        'floating': _SliverPersistentHeader_floating$,
        'build': _SliverPersistentHeader_build$,
        'debugFillProperties': _SliverPersistentHeader_debugFillProperties$,
      },
      {},
    ),
  },
);
Function SliverPersistentHeaderDelegate_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SliverPersistentHeaderDelegate;
Function SliverPersistentHeaderDelegate_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SliverPersistentHeaderDelegate;
double _SliverPersistentHeaderDelegate_minExtent$(
    SliverPersistentHeaderDelegate target) {
  return target.minExtent;
}

double _SliverPersistentHeaderDelegate_maxExtent$(
    SliverPersistentHeaderDelegate target) {
  return target.maxExtent;
}

TickerProvider? _SliverPersistentHeaderDelegate_vsync$(
    SliverPersistentHeaderDelegate target) {
  return target.vsync;
}

FloatingHeaderSnapConfiguration?
    _SliverPersistentHeaderDelegate_snapConfiguration$(
        SliverPersistentHeaderDelegate target) {
  return target.snapConfiguration;
}

OverScrollHeaderStretchConfiguration?
    _SliverPersistentHeaderDelegate_stretchConfiguration$(
        SliverPersistentHeaderDelegate target) {
  return target.stretchConfiguration;
}

PersistentHeaderShowOnScreenConfiguration?
    _SliverPersistentHeaderDelegate_showOnScreenConfiguration$(
        SliverPersistentHeaderDelegate target) {
  return target.showOnScreenConfiguration;
}

Function _SliverPersistentHeaderDelegate_build$(
  m.Scope scope,
  SliverPersistentHeaderDelegate target,
) =>
    target.build;
Function _SliverPersistentHeaderDelegate_shouldRebuild$(
  m.Scope scope,
  SliverPersistentHeaderDelegate target,
) =>
    target.shouldRebuild;
Function SliverPersistentHeader_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SliverPersistentHeader;
Function SliverPersistentHeader_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SliverPersistentHeader;
SliverPersistentHeaderDelegate _SliverPersistentHeader_delegate$(
    SliverPersistentHeader target) {
  return target.delegate;
}

bool _SliverPersistentHeader_pinned$(SliverPersistentHeader target) {
  return target.pinned;
}

bool _SliverPersistentHeader_floating$(SliverPersistentHeader target) {
  return target.floating;
}

Function _SliverPersistentHeader_build$(
  m.Scope scope,
  SliverPersistentHeader target,
) =>
    target.build;
Function _SliverPersistentHeader_debugFillProperties$(
  m.Scope scope,
  SliverPersistentHeader target,
) =>
    target.debugFillProperties;
