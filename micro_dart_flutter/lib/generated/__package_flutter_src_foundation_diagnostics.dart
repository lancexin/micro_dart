// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/foundation/diagnostics.dart';
import 'dart:math';
import 'package:meta/meta.dart';
import 'package:flutter/src/foundation/assertions.dart';
import 'package:flutter/src/foundation/constants.dart';
import 'package:flutter/src/foundation/debug.dart';
import 'package:flutter/src/foundation/math.dart' show clampDouble;
import 'package:flutter/src/foundation/object.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/foundation/diagnostics.dart',
  {
    'sparseTextConfiguration': _sparseTextConfiguration$,
    'dashedTextConfiguration': _dashedTextConfiguration$,
    'denseTextConfiguration': _denseTextConfiguration$,
    'transitionTextConfiguration': _transitionTextConfiguration$,
    'errorTextConfiguration': _errorTextConfiguration$,
    'whitespaceTextConfiguration': _whitespaceTextConfiguration$,
    'flatTextConfiguration': _flatTextConfiguration$,
    'singleLineTextConfiguration': _singleLineTextConfiguration$,
    'errorPropertyTextConfiguration': _errorPropertyTextConfiguration$,
    'shallowTextConfiguration': _shallowTextConfiguration$,
    'kNoDefaultValue': _kNoDefaultValue$,
    'TextTreeConfiguration.': _TextTreeConfiguration__$,
    'TextTreeRenderer.': _TextTreeRenderer__$,
    'DiagnosticsNode.message': _DiagnosticsNode_message_$,
    'DiagnosticsNode.toJsonList': _DiagnosticsNode_toJsonList$,
    'MessageProperty.': _MessageProperty__$,
    'StringProperty.': _StringProperty__$,
    'DoubleProperty.': _DoubleProperty__$,
    'DoubleProperty.lazy': _DoubleProperty_lazy_$,
    'IntProperty.': _IntProperty__$,
    'PercentProperty.': _PercentProperty__$,
    'FlagProperty.': _FlagProperty__$,
    'IterableProperty.': _IterableProperty__$,
    'EnumProperty.': _EnumProperty__$,
    'ObjectFlagProperty.': _ObjectFlagProperty__$,
    'ObjectFlagProperty.has': _ObjectFlagProperty_has_$,
    'FlagsSummary.': _FlagsSummary__$,
    'DiagnosticsProperty.': _DiagnosticsProperty__$,
    'DiagnosticsProperty.lazy': _DiagnosticsProperty_lazy_$,
    'DiagnosticableNode.': _DiagnosticableNode__$,
    'DiagnosticableTreeNode.': _DiagnosticableTreeNode__$,
    'DiagnosticPropertiesBuilder.': _DiagnosticPropertiesBuilder__$,
    'DiagnosticPropertiesBuilder.fromProperties':
        _DiagnosticPropertiesBuilder_fromProperties_$,
    'DiagnosticsBlock.': _DiagnosticsBlock__$,
    'DiagnosticsSerializationDelegate.': _DiagnosticsSerializationDelegate__$,
    'DiagnosticLevel.hidden': _DiagnosticLevel_hidden$,
    'DiagnosticLevel.fine': _DiagnosticLevel_fine$,
    'DiagnosticLevel.debug': _DiagnosticLevel_debug$,
    'DiagnosticLevel.info': _DiagnosticLevel_info$,
    'DiagnosticLevel.warning': _DiagnosticLevel_warning$,
    'DiagnosticLevel.hint': _DiagnosticLevel_hint$,
    'DiagnosticLevel.summary': _DiagnosticLevel_summary$,
    'DiagnosticLevel.error': _DiagnosticLevel_error$,
    'DiagnosticLevel.off': _DiagnosticLevel_off$,
    'DiagnosticLevel.values': _DiagnosticLevel_values$,
    'DiagnosticsTreeStyle.none': _DiagnosticsTreeStyle_none$,
    'DiagnosticsTreeStyle.sparse': _DiagnosticsTreeStyle_sparse$,
    'DiagnosticsTreeStyle.offstage': _DiagnosticsTreeStyle_offstage$,
    'DiagnosticsTreeStyle.dense': _DiagnosticsTreeStyle_dense$,
    'DiagnosticsTreeStyle.transition': _DiagnosticsTreeStyle_transition$,
    'DiagnosticsTreeStyle.error': _DiagnosticsTreeStyle_error$,
    'DiagnosticsTreeStyle.whitespace': _DiagnosticsTreeStyle_whitespace$,
    'DiagnosticsTreeStyle.flat': _DiagnosticsTreeStyle_flat$,
    'DiagnosticsTreeStyle.singleLine': _DiagnosticsTreeStyle_singleLine$,
    'DiagnosticsTreeStyle.errorProperty': _DiagnosticsTreeStyle_errorProperty$,
    'DiagnosticsTreeStyle.shallow': _DiagnosticsTreeStyle_shallow$,
    'DiagnosticsTreeStyle.truncateChildren':
        _DiagnosticsTreeStyle_truncateChildren$,
    'DiagnosticsTreeStyle.values': _DiagnosticsTreeStyle_values$,
    'shortHash': _shortHash$,
    'describeIdentity': _describeIdentity$,
    'describeEnum': _describeEnum$,
  },
  {},
  {
    'TextTreeConfiguration': m.ClassMirror(
      'TextTreeConfiguration',
      {
        '#as': TextTreeConfiguration_as$,
        '#is': TextTreeConfiguration_is$,
        'prefixLineOne': _TextTreeConfiguration_prefixLineOne$,
        'suffixLineOne': _TextTreeConfiguration_suffixLineOne$,
        'prefixOtherLines': _TextTreeConfiguration_prefixOtherLines$,
        'prefixLastChildLineOne':
            _TextTreeConfiguration_prefixLastChildLineOne$,
        'prefixOtherLinesRootNode':
            _TextTreeConfiguration_prefixOtherLinesRootNode$,
        'propertyPrefixIfChildren':
            _TextTreeConfiguration_propertyPrefixIfChildren$,
        'propertyPrefixNoChildren':
            _TextTreeConfiguration_propertyPrefixNoChildren$,
        'linkCharacter': _TextTreeConfiguration_linkCharacter$,
        'childLinkSpace': _TextTreeConfiguration_childLinkSpace$,
        'lineBreak': _TextTreeConfiguration_lineBreak$,
        'lineBreakProperties': _TextTreeConfiguration_lineBreakProperties$,
        'beforeName': _TextTreeConfiguration_beforeName$,
        'afterName': _TextTreeConfiguration_afterName$,
        'afterDescriptionIfBody':
            _TextTreeConfiguration_afterDescriptionIfBody$,
        'afterDescription': _TextTreeConfiguration_afterDescription$,
        'beforeProperties': _TextTreeConfiguration_beforeProperties$,
        'afterProperties': _TextTreeConfiguration_afterProperties$,
        'mandatoryAfterProperties':
            _TextTreeConfiguration_mandatoryAfterProperties$,
        'propertySeparator': _TextTreeConfiguration_propertySeparator$,
        'bodyIndent': _TextTreeConfiguration_bodyIndent$,
        'showChildren': _TextTreeConfiguration_showChildren$,
        'addBlankLineIfNoChildren':
            _TextTreeConfiguration_addBlankLineIfNoChildren$,
        'isNameOnOwnLine': _TextTreeConfiguration_isNameOnOwnLine$,
        'footer': _TextTreeConfiguration_footer$,
        'mandatoryFooter': _TextTreeConfiguration_mandatoryFooter$,
        'isBlankLineBetweenPropertiesAndChildren':
            _TextTreeConfiguration_isBlankLineBetweenPropertiesAndChildren$,
      },
      {},
    ),
    'TextTreeRenderer': m.ClassMirror(
      'TextTreeRenderer',
      {
        '#as': TextTreeRenderer_as$,
        '#is': TextTreeRenderer_is$,
        'render': _TextTreeRenderer_render$,
      },
      {},
    ),
    'DiagnosticsNode': m.ClassMirror(
      'DiagnosticsNode',
      {
        '#as': DiagnosticsNode_as$,
        '#is': DiagnosticsNode_is$,
        'name': _DiagnosticsNode_name$,
        'showSeparator': _DiagnosticsNode_showSeparator$,
        'showName': _DiagnosticsNode_showName$,
        'linePrefix': _DiagnosticsNode_linePrefix$,
        'style': _DiagnosticsNode_style$,
        'level': _DiagnosticsNode_level$,
        'emptyBodyDescription': _DiagnosticsNode_emptyBodyDescription$,
        'value': _DiagnosticsNode_value$,
        'allowWrap': _DiagnosticsNode_allowWrap$,
        'allowNameWrap': _DiagnosticsNode_allowNameWrap$,
        'allowTruncate': _DiagnosticsNode_allowTruncate$,
        'textTreeConfiguration': _DiagnosticsNode_textTreeConfiguration$,
        'toDescription': _DiagnosticsNode_toDescription$,
        'isFiltered': _DiagnosticsNode_isFiltered$,
        'getProperties': _DiagnosticsNode_getProperties$,
        'getChildren': _DiagnosticsNode_getChildren$,
        'toTimelineArguments': _DiagnosticsNode_toTimelineArguments$,
        'toJsonMap': _DiagnosticsNode_toJsonMap$,
        'toString': _DiagnosticsNode_toString$,
        'toStringDeep': _DiagnosticsNode_toStringDeep$,
      },
      {},
    ),
    'MessageProperty': m.ClassMirror(
      'MessageProperty',
      {
        '#as': MessageProperty_as$,
        '#is': MessageProperty_is$,
      },
      {},
    ),
    'StringProperty': m.ClassMirror(
      'StringProperty',
      {
        '#as': StringProperty_as$,
        '#is': StringProperty_is$,
        'quoted': _StringProperty_quoted$,
        'toJsonMap': _StringProperty_toJsonMap$,
        'valueToString': _StringProperty_valueToString$,
      },
      {},
    ),
    'DoubleProperty': m.ClassMirror(
      'DoubleProperty',
      {
        '#as': DoubleProperty_as$,
        '#is': DoubleProperty_is$,
        'numberToString': _DoubleProperty_numberToString$,
      },
      {},
    ),
    'IntProperty': m.ClassMirror(
      'IntProperty',
      {
        '#as': IntProperty_as$,
        '#is': IntProperty_is$,
        'numberToString': _IntProperty_numberToString$,
      },
      {},
    ),
    'PercentProperty': m.ClassMirror(
      'PercentProperty',
      {
        '#as': PercentProperty_as$,
        '#is': PercentProperty_is$,
        'valueToString': _PercentProperty_valueToString$,
        'numberToString': _PercentProperty_numberToString$,
      },
      {},
    ),
    'FlagProperty': m.ClassMirror(
      'FlagProperty',
      {
        '#as': FlagProperty_as$,
        '#is': FlagProperty_is$,
        'ifTrue': _FlagProperty_ifTrue$,
        'ifFalse': _FlagProperty_ifFalse$,
        'showName': _FlagProperty_showName$,
        'level': _FlagProperty_level$,
        'toJsonMap': _FlagProperty_toJsonMap$,
        'valueToString': _FlagProperty_valueToString$,
      },
      {},
    ),
    'IterableProperty': m.ClassMirror(
      'IterableProperty',
      {
        '#as': IterableProperty_as$,
        '#is': IterableProperty_is$,
        'level': _IterableProperty_level$,
        'valueToString': _IterableProperty_valueToString$,
        'toJsonMap': _IterableProperty_toJsonMap$,
      },
      {},
    ),
    'EnumProperty': m.ClassMirror(
      'EnumProperty',
      {
        '#as': EnumProperty_as$,
        '#is': EnumProperty_is$,
        'valueToString': _EnumProperty_valueToString$,
      },
      {},
    ),
    'ObjectFlagProperty': m.ClassMirror(
      'ObjectFlagProperty',
      {
        '#as': ObjectFlagProperty_as$,
        '#is': ObjectFlagProperty_is$,
        'ifPresent': _ObjectFlagProperty_ifPresent$,
        'showName': _ObjectFlagProperty_showName$,
        'level': _ObjectFlagProperty_level$,
        'valueToString': _ObjectFlagProperty_valueToString$,
        'toJsonMap': _ObjectFlagProperty_toJsonMap$,
      },
      {},
    ),
    'FlagsSummary': m.ClassMirror(
      'FlagsSummary',
      {
        '#as': FlagsSummary_as$,
        '#is': FlagsSummary_is$,
        'value': _FlagsSummary_value$,
        'level': _FlagsSummary_level$,
        'valueToString': _FlagsSummary_valueToString$,
        'toJsonMap': _FlagsSummary_toJsonMap$,
      },
      {},
    ),
    'DiagnosticsProperty': m.ClassMirror(
      'DiagnosticsProperty',
      {
        '#as': DiagnosticsProperty_as$,
        '#is': DiagnosticsProperty_is$,
        'expandableValue': _DiagnosticsProperty_expandableValue$,
        'allowWrap': _DiagnosticsProperty_allowWrap$,
        'allowNameWrap': _DiagnosticsProperty_allowNameWrap$,
        'ifNull': _DiagnosticsProperty_ifNull$,
        'ifEmpty': _DiagnosticsProperty_ifEmpty$,
        'tooltip': _DiagnosticsProperty_tooltip$,
        'missingIfNull': _DiagnosticsProperty_missingIfNull$,
        'defaultValue': _DiagnosticsProperty_defaultValue$,
        'propertyType': _DiagnosticsProperty_propertyType$,
        'value': _DiagnosticsProperty_value$,
        'exception': _DiagnosticsProperty_exception$,
        'isInteresting': _DiagnosticsProperty_isInteresting$,
        'level': _DiagnosticsProperty_level$,
        'toJsonMap': _DiagnosticsProperty_toJsonMap$,
        'valueToString': _DiagnosticsProperty_valueToString$,
        'toDescription': _DiagnosticsProperty_toDescription$,
        'getProperties': _DiagnosticsProperty_getProperties$,
        'getChildren': _DiagnosticsProperty_getChildren$,
      },
      {},
    ),
    'DiagnosticableNode': m.ClassMirror(
      'DiagnosticableNode',
      {
        '#as': DiagnosticableNode_as$,
        '#is': DiagnosticableNode_is$,
        'value': _DiagnosticableNode_value$,
        'builder': _DiagnosticableNode_builder$,
        'style': _DiagnosticableNode_style$,
        'emptyBodyDescription': _DiagnosticableNode_emptyBodyDescription$,
        'getProperties': _DiagnosticableNode_getProperties$,
        'getChildren': _DiagnosticableNode_getChildren$,
        'toDescription': _DiagnosticableNode_toDescription$,
      },
      {},
    ),
    'DiagnosticableTreeNode': m.ClassMirror(
      'DiagnosticableTreeNode',
      {
        '#as': DiagnosticableTreeNode_as$,
        '#is': DiagnosticableTreeNode_is$,
        'getChildren': _DiagnosticableTreeNode_getChildren$,
      },
      {},
    ),
    'DiagnosticPropertiesBuilder': m.ClassMirror(
      'DiagnosticPropertiesBuilder',
      {
        '#as': DiagnosticPropertiesBuilder_as$,
        '#is': DiagnosticPropertiesBuilder_is$,
        'properties': _DiagnosticPropertiesBuilder_properties$,
        'defaultDiagnosticsTreeStyle':
            _DiagnosticPropertiesBuilder_defaultDiagnosticsTreeStyle$,
        'emptyBodyDescription':
            _DiagnosticPropertiesBuilder_emptyBodyDescription$,
        'add': _DiagnosticPropertiesBuilder_add$,
      },
      {
        'defaultDiagnosticsTreeStyle':
            _DiagnosticPropertiesBuilder_defaultDiagnosticsTreeStyle_set$,
        'emptyBodyDescription':
            _DiagnosticPropertiesBuilder_emptyBodyDescription_set$,
      },
    ),
    'DiagnosticableTree': m.ClassMirror(
      'DiagnosticableTree',
      {
        '#as': DiagnosticableTree_as$,
        '#is': DiagnosticableTree_is$,
        'toStringShallow': _DiagnosticableTree_toStringShallow$,
        'toStringDeep': _DiagnosticableTree_toStringDeep$,
        'toStringShort': _DiagnosticableTree_toStringShort$,
        'toDiagnosticsNode': _DiagnosticableTree_toDiagnosticsNode$,
        'debugDescribeChildren': _DiagnosticableTree_debugDescribeChildren$,
      },
      {},
    ),
    'DiagnosticsBlock': m.ClassMirror(
      'DiagnosticsBlock',
      {
        '#as': DiagnosticsBlock_as$,
        '#is': DiagnosticsBlock_is$,
        'level': _DiagnosticsBlock_level$,
        'value': _DiagnosticsBlock_value$,
        'allowTruncate': _DiagnosticsBlock_allowTruncate$,
        'getChildren': _DiagnosticsBlock_getChildren$,
        'getProperties': _DiagnosticsBlock_getProperties$,
        'toDescription': _DiagnosticsBlock_toDescription$,
      },
      {},
    ),
    'DiagnosticsSerializationDelegate': m.ClassMirror(
      'DiagnosticsSerializationDelegate',
      {
        '#as': DiagnosticsSerializationDelegate_as$,
        '#is': DiagnosticsSerializationDelegate_is$,
        'subtreeDepth': _DiagnosticsSerializationDelegate_subtreeDepth$,
        'includeProperties':
            _DiagnosticsSerializationDelegate_includeProperties$,
        'expandPropertyValues':
            _DiagnosticsSerializationDelegate_expandPropertyValues$,
        'additionalNodeProperties':
            _DiagnosticsSerializationDelegate_additionalNodeProperties$,
        'filterChildren': _DiagnosticsSerializationDelegate_filterChildren$,
        'filterProperties': _DiagnosticsSerializationDelegate_filterProperties$,
        'truncateNodesList':
            _DiagnosticsSerializationDelegate_truncateNodesList$,
        'delegateForNode': _DiagnosticsSerializationDelegate_delegateForNode$,
        'copyWith': _DiagnosticsSerializationDelegate_copyWith$,
      },
      {},
    ),
    'DiagnosticLevel': m.ClassMirror(
      'DiagnosticLevel',
      {},
      {},
    ),
    'DiagnosticsTreeStyle': m.ClassMirror(
      'DiagnosticsTreeStyle',
      {},
      {},
    ),
  },
);
Function _sparseTextConfiguration$(m.Scope scope$) =>
    () => sparseTextConfiguration;
Function _dashedTextConfiguration$(m.Scope scope$) =>
    () => dashedTextConfiguration;
Function _denseTextConfiguration$(m.Scope scope$) =>
    () => denseTextConfiguration;
Function _transitionTextConfiguration$(m.Scope scope$) =>
    () => transitionTextConfiguration;
Function _errorTextConfiguration$(m.Scope scope$) =>
    () => errorTextConfiguration;
Function _whitespaceTextConfiguration$(m.Scope scope$) =>
    () => whitespaceTextConfiguration;
Function _flatTextConfiguration$(m.Scope scope$) => () => flatTextConfiguration;
Function _singleLineTextConfiguration$(m.Scope scope$) =>
    () => singleLineTextConfiguration;
Function _errorPropertyTextConfiguration$(m.Scope scope$) =>
    () => errorPropertyTextConfiguration;
Function _shallowTextConfiguration$(m.Scope scope$) =>
    () => shallowTextConfiguration;
Function _kNoDefaultValue$(m.Scope scope$) => () => kNoDefaultValue;
Function TextTreeConfiguration_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextTreeConfiguration;
Function TextTreeConfiguration_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextTreeConfiguration;
Function _TextTreeConfiguration_prefixLineOne$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.prefixLineOne;
    };
Function _TextTreeConfiguration_suffixLineOne$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.suffixLineOne;
    };
Function _TextTreeConfiguration_prefixOtherLines$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.prefixOtherLines;
    };
Function _TextTreeConfiguration_prefixLastChildLineOne$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.prefixLastChildLineOne;
    };
Function _TextTreeConfiguration_prefixOtherLinesRootNode$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.prefixOtherLinesRootNode;
    };
Function _TextTreeConfiguration_propertyPrefixIfChildren$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.propertyPrefixIfChildren;
    };
Function _TextTreeConfiguration_propertyPrefixNoChildren$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.propertyPrefixNoChildren;
    };
Function _TextTreeConfiguration_linkCharacter$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.linkCharacter;
    };
Function _TextTreeConfiguration_childLinkSpace$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.childLinkSpace;
    };
Function _TextTreeConfiguration_lineBreak$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.lineBreak;
    };
Function _TextTreeConfiguration_lineBreakProperties$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.lineBreakProperties;
    };
Function _TextTreeConfiguration_beforeName$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.beforeName;
    };
Function _TextTreeConfiguration_afterName$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.afterName;
    };
Function _TextTreeConfiguration_afterDescriptionIfBody$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.afterDescriptionIfBody;
    };
Function _TextTreeConfiguration_afterDescription$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.afterDescription;
    };
Function _TextTreeConfiguration_beforeProperties$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.beforeProperties;
    };
Function _TextTreeConfiguration_afterProperties$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.afterProperties;
    };
Function _TextTreeConfiguration_mandatoryAfterProperties$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.mandatoryAfterProperties;
    };
Function _TextTreeConfiguration_propertySeparator$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.propertySeparator;
    };
Function _TextTreeConfiguration_bodyIndent$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.bodyIndent;
    };
Function _TextTreeConfiguration_showChildren$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.showChildren;
    };
Function _TextTreeConfiguration_addBlankLineIfNoChildren$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.addBlankLineIfNoChildren;
    };
Function _TextTreeConfiguration_isNameOnOwnLine$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.isNameOnOwnLine;
    };
Function _TextTreeConfiguration_footer$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.footer;
    };
Function _TextTreeConfiguration_mandatoryFooter$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.mandatoryFooter;
    };
Function _TextTreeConfiguration_isBlankLineBetweenPropertiesAndChildren$(
  m.Scope scope$,
  TextTreeConfiguration target$,
) =>
    () {
      return target$.isBlankLineBetweenPropertiesAndChildren;
    };
Function _TextTreeConfiguration__$(m.Scope scope$) => ({
      required String prefixLineOne,
      required String prefixOtherLines,
      required String prefixLastChildLineOne,
      required String prefixOtherLinesRootNode,
      required String linkCharacter,
      required String propertyPrefixIfChildren,
      required String propertyPrefixNoChildren,
      String? lineBreak,
      bool? lineBreakProperties,
      String? afterName,
      String? afterDescriptionIfBody,
      String? afterDescription,
      String? beforeProperties,
      String? afterProperties,
      String? mandatoryAfterProperties,
      String? propertySeparator,
      String? bodyIndent,
      String? footer,
      bool? showChildren,
      bool? addBlankLineIfNoChildren,
      bool? isNameOnOwnLine,
      bool? isBlankLineBetweenPropertiesAndChildren,
      String? beforeName,
      String? suffixLineOne,
      String? mandatoryFooter,
    }) {
      return TextTreeConfiguration(
        addBlankLineIfNoChildren: addBlankLineIfNoChildren ?? true,
        afterDescription: afterDescription ?? '',
        afterDescriptionIfBody: afterDescriptionIfBody ?? '',
        afterName: afterName ?? ':',
        afterProperties: afterProperties ?? '',
        beforeName: beforeName ?? '',
        beforeProperties: beforeProperties ?? '',
        bodyIndent: bodyIndent ?? '',
        footer: footer ?? '',
        isBlankLineBetweenPropertiesAndChildren:
            isBlankLineBetweenPropertiesAndChildren ?? true,
        isNameOnOwnLine: isNameOnOwnLine ?? false,
        lineBreak: lineBreak ?? '\n',
        lineBreakProperties: lineBreakProperties ?? true,
        linkCharacter: linkCharacter,
        mandatoryAfterProperties: mandatoryAfterProperties ?? '',
        mandatoryFooter: mandatoryFooter ?? '',
        prefixLastChildLineOne: prefixLastChildLineOne,
        prefixLineOne: prefixLineOne,
        prefixOtherLines: prefixOtherLines,
        prefixOtherLinesRootNode: prefixOtherLinesRootNode,
        propertyPrefixIfChildren: propertyPrefixIfChildren,
        propertyPrefixNoChildren: propertyPrefixNoChildren,
        propertySeparator: propertySeparator ?? '',
        showChildren: showChildren ?? true,
        suffixLineOne: suffixLineOne ?? '',
      );
    };
Function TextTreeRenderer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextTreeRenderer;
Function TextTreeRenderer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextTreeRenderer;
Function _TextTreeRenderer__$(m.Scope scope$) => ({
      DiagnosticLevel? minLevel,
      int? wrapWidth,
      int? wrapWidthProperties,
      int? maxDescendentsTruncatableNode,
    }) {
      return TextTreeRenderer(
        maxDescendentsTruncatableNode: maxDescendentsTruncatableNode ?? -1,
        minLevel: minLevel ?? DiagnosticLevel.debug,
        wrapWidth: wrapWidth ?? 100,
        wrapWidthProperties: wrapWidthProperties ?? 65,
      );
    };
Function _TextTreeRenderer_render$(
  m.Scope scope$,
  TextTreeRenderer target$,
) =>
    target$.render;
Function DiagnosticsNode_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DiagnosticsNode;
Function DiagnosticsNode_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DiagnosticsNode;
Function _DiagnosticsNode_name$(
  m.Scope scope$,
  DiagnosticsNode target$,
) =>
    () {
      return target$.name;
    };
Function _DiagnosticsNode_showSeparator$(
  m.Scope scope$,
  DiagnosticsNode target$,
) =>
    () {
      return target$.showSeparator;
    };
Function _DiagnosticsNode_showName$(
  m.Scope scope$,
  DiagnosticsNode target$,
) =>
    () {
      return target$.showName;
    };
Function _DiagnosticsNode_linePrefix$(
  m.Scope scope$,
  DiagnosticsNode target$,
) =>
    () {
      return target$.linePrefix;
    };
Function _DiagnosticsNode_style$(
  m.Scope scope$,
  DiagnosticsNode target$,
) =>
    () {
      return target$.style;
    };
Function _DiagnosticsNode_level$(
  m.Scope scope$,
  DiagnosticsNode target$,
) =>
    () {
      return target$.level;
    };
Function _DiagnosticsNode_emptyBodyDescription$(
  m.Scope scope$,
  DiagnosticsNode target$,
) =>
    () {
      return target$.emptyBodyDescription;
    };
Function _DiagnosticsNode_value$(
  m.Scope scope$,
  DiagnosticsNode target$,
) =>
    () {
      return target$.value;
    };
Function _DiagnosticsNode_allowWrap$(
  m.Scope scope$,
  DiagnosticsNode target$,
) =>
    () {
      return target$.allowWrap;
    };
Function _DiagnosticsNode_allowNameWrap$(
  m.Scope scope$,
  DiagnosticsNode target$,
) =>
    () {
      return target$.allowNameWrap;
    };
Function _DiagnosticsNode_allowTruncate$(
  m.Scope scope$,
  DiagnosticsNode target$,
) =>
    () {
      return target$.allowTruncate;
    };
Function _DiagnosticsNode_textTreeConfiguration$(
  m.Scope scope$,
  DiagnosticsNode target$,
) =>
    () {
      return target$.textTreeConfiguration;
    };
Function _DiagnosticsNode_message_$(m.Scope scope$) => DiagnosticsNode.message;
Function _DiagnosticsNode_toDescription$(
  m.Scope scope$,
  DiagnosticsNode target$,
) =>
    target$.toDescription;
Function _DiagnosticsNode_isFiltered$(
  m.Scope scope$,
  DiagnosticsNode target$,
) =>
    target$.isFiltered;
Function _DiagnosticsNode_getProperties$(
  m.Scope scope$,
  DiagnosticsNode target$,
) =>
    target$.getProperties;
Function _DiagnosticsNode_getChildren$(
  m.Scope scope$,
  DiagnosticsNode target$,
) =>
    target$.getChildren;
Function _DiagnosticsNode_toTimelineArguments$(
  m.Scope scope$,
  DiagnosticsNode target$,
) =>
    target$.toTimelineArguments;
Function _DiagnosticsNode_toJsonMap$(
  m.Scope scope$,
  DiagnosticsNode target$,
) =>
    target$.toJsonMap;
Function _DiagnosticsNode_toJsonList$(m.Scope scope$) =>
    DiagnosticsNode.toJsonList;
Function _DiagnosticsNode_toString$(
  m.Scope scope$,
  DiagnosticsNode target$,
) =>
    target$.toString;
Function _DiagnosticsNode_toStringDeep$(
  m.Scope scope$,
  DiagnosticsNode target$,
) =>
    target$.toStringDeep;
Function MessageProperty_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MessageProperty;
Function MessageProperty_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MessageProperty;
Function _MessageProperty__$(m.Scope scope$) => (
      String name,
      String message, {
      DiagnosticsTreeStyle? style,
      DiagnosticLevel? level,
    }) {
      return MessageProperty(
        name,
        message,
        level: level ?? DiagnosticLevel.info,
        style: style ?? DiagnosticsTreeStyle.singleLine,
      );
    };
Function StringProperty_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as StringProperty;
Function StringProperty_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is StringProperty;
Function _StringProperty_quoted$(
  m.Scope scope$,
  StringProperty target$,
) =>
    () {
      return target$.quoted;
    };
Function _StringProperty__$(m.Scope scope$) => (
      String name,
      String? value, {
      String? description,
      String? tooltip,
      bool? showName,
      Object? defaultValue,
      bool? quoted,
      String? ifEmpty,
      DiagnosticsTreeStyle? style,
      DiagnosticLevel? level,
    }) {
      return StringProperty(
        name,
        value,
        defaultValue: defaultValue ?? kNoDefaultValue,
        description: description,
        ifEmpty: ifEmpty,
        level: level ?? DiagnosticLevel.info,
        quoted: quoted ?? true,
        showName: showName ?? true,
        style: style ?? DiagnosticsTreeStyle.singleLine,
        tooltip: tooltip,
      );
    };
Function _StringProperty_toJsonMap$(
  m.Scope scope$,
  StringProperty target$,
) =>
    target$.toJsonMap;
Function _StringProperty_valueToString$(
  m.Scope scope$,
  StringProperty target$,
) =>
    target$.valueToString;
Function DoubleProperty_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DoubleProperty;
Function DoubleProperty_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DoubleProperty;
Function _DoubleProperty__$(m.Scope scope$) => (
      String name,
      double? value, {
      String? ifNull,
      String? unit,
      String? tooltip,
      Object? defaultValue,
      bool? showName,
      DiagnosticsTreeStyle? style,
      DiagnosticLevel? level,
    }) {
      return DoubleProperty(
        name,
        value,
        defaultValue: defaultValue ?? kNoDefaultValue,
        ifNull: ifNull,
        level: level ?? DiagnosticLevel.info,
        showName: showName ?? true,
        style: style ?? DiagnosticsTreeStyle.singleLine,
        tooltip: tooltip,
        unit: unit,
      );
    };
Function _DoubleProperty_lazy_$(m.Scope scope$) => (
      String name,
      m.FunctionPointer computeValue, {
      String? ifNull,
      bool? showName,
      String? unit,
      String? tooltip,
      Object? defaultValue,
      DiagnosticLevel? level,
    }) {
      double? computeValueProxy() => scope$.engine.callFunctionPointer(
            scope$,
            computeValue,
            [],
            {},
          );
      return DoubleProperty.lazy(
        name,
        computeValueProxy,
        defaultValue: defaultValue ?? kNoDefaultValue,
        ifNull: ifNull,
        level: level ?? DiagnosticLevel.info,
        showName: showName ?? true,
        tooltip: tooltip,
        unit: unit,
      );
    };
Function _DoubleProperty_numberToString$(
  m.Scope scope$,
  DoubleProperty target$,
) =>
    target$.numberToString;
Function IntProperty_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as IntProperty;
Function IntProperty_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is IntProperty;
Function _IntProperty__$(m.Scope scope$) => (
      String name,
      int? value, {
      String? ifNull,
      bool? showName,
      String? unit,
      Object? defaultValue,
      DiagnosticsTreeStyle? style,
      DiagnosticLevel? level,
    }) {
      return IntProperty(
        name,
        value,
        defaultValue: defaultValue ?? kNoDefaultValue,
        ifNull: ifNull,
        level: level ?? DiagnosticLevel.info,
        showName: showName ?? true,
        style: style ?? DiagnosticsTreeStyle.singleLine,
        unit: unit,
      );
    };
Function _IntProperty_numberToString$(
  m.Scope scope$,
  IntProperty target$,
) =>
    target$.numberToString;
Function PercentProperty_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PercentProperty;
Function PercentProperty_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PercentProperty;
Function _PercentProperty__$(m.Scope scope$) => (
      String name,
      double? fraction, {
      String? ifNull,
      bool? showName,
      String? tooltip,
      String? unit,
      DiagnosticLevel? level,
    }) {
      return PercentProperty(
        name,
        fraction,
        ifNull: ifNull,
        level: level ?? DiagnosticLevel.info,
        showName: showName ?? true,
        tooltip: tooltip,
        unit: unit,
      );
    };
Function _PercentProperty_valueToString$(
  m.Scope scope$,
  PercentProperty target$,
) =>
    target$.valueToString;
Function _PercentProperty_numberToString$(
  m.Scope scope$,
  PercentProperty target$,
) =>
    target$.numberToString;
Function FlagProperty_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FlagProperty;
Function FlagProperty_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FlagProperty;
Function _FlagProperty_ifTrue$(
  m.Scope scope$,
  FlagProperty target$,
) =>
    () {
      return target$.ifTrue;
    };
Function _FlagProperty_ifFalse$(
  m.Scope scope$,
  FlagProperty target$,
) =>
    () {
      return target$.ifFalse;
    };
Function _FlagProperty_showName$(
  m.Scope scope$,
  FlagProperty target$,
) =>
    () {
      return target$.showName;
    };
Function _FlagProperty_level$(
  m.Scope scope$,
  FlagProperty target$,
) =>
    () {
      return target$.level;
    };
Function _FlagProperty__$(m.Scope scope$) => (
      String name, {
      required bool? value,
      String? ifTrue,
      String? ifFalse,
      bool? showName,
      Object? defaultValue,
      DiagnosticLevel? level,
    }) {
      return FlagProperty(
        name,
        defaultValue: defaultValue,
        ifFalse: ifFalse,
        ifTrue: ifTrue,
        level: level ?? DiagnosticLevel.info,
        showName: showName ?? false,
        value: value,
      );
    };
Function _FlagProperty_toJsonMap$(
  m.Scope scope$,
  FlagProperty target$,
) =>
    target$.toJsonMap;
Function _FlagProperty_valueToString$(
  m.Scope scope$,
  FlagProperty target$,
) =>
    target$.valueToString;
Function IterableProperty_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as IterableProperty<T>;
Function IterableProperty_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is IterableProperty<T>;
Function _IterableProperty_level$<T>(
  m.Scope scope$,
  IterableProperty<T> target$,
) =>
    () {
      return target$.level;
    };
Function _IterableProperty__$(m.Scope scope$) => (
      String name,
      Iterable? value, {
      Object? defaultValue,
      String? ifNull,
      String? ifEmpty,
      DiagnosticsTreeStyle? style,
      bool? showName,
      bool? showSeparator,
      DiagnosticLevel? level,
    }) {
      return IterableProperty(
        name,
        value == null ? null : Iterable.castFrom(value),
        defaultValue: defaultValue ?? kNoDefaultValue,
        ifEmpty: ifEmpty ?? '[]',
        ifNull: ifNull,
        level: level ?? DiagnosticLevel.info,
        showName: showName ?? true,
        showSeparator: showSeparator ?? true,
        style: style ?? DiagnosticsTreeStyle.singleLine,
      );
    };
Function _IterableProperty_valueToString$<T>(
  m.Scope scope$,
  IterableProperty<T> target$,
) =>
    target$.valueToString;
Function _IterableProperty_toJsonMap$<T>(
  m.Scope scope$,
  IterableProperty<T> target$,
) =>
    target$.toJsonMap;
Function EnumProperty_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as EnumProperty<T>;
Function EnumProperty_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is EnumProperty<T>;
Function _EnumProperty__$(m.Scope scope$) => (
      String name,
      dynamic value, {
      Object? defaultValue,
      DiagnosticLevel? level,
    }) {
      return EnumProperty(
        name,
        value,
        defaultValue: defaultValue ?? kNoDefaultValue,
        level: level ?? DiagnosticLevel.info,
      );
    };
Function _EnumProperty_valueToString$<T>(
  m.Scope scope$,
  EnumProperty<T> target$,
) =>
    target$.valueToString;
Function ObjectFlagProperty_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ObjectFlagProperty<T>;
Function ObjectFlagProperty_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ObjectFlagProperty<T>;
Function _ObjectFlagProperty_ifPresent$<T>(
  m.Scope scope$,
  ObjectFlagProperty<T> target$,
) =>
    () {
      return target$.ifPresent;
    };
Function _ObjectFlagProperty_showName$<T>(
  m.Scope scope$,
  ObjectFlagProperty<T> target$,
) =>
    () {
      return target$.showName;
    };
Function _ObjectFlagProperty_level$<T>(
  m.Scope scope$,
  ObjectFlagProperty<T> target$,
) =>
    () {
      return target$.level;
    };
Function _ObjectFlagProperty__$(m.Scope scope$) => (
      String name,
      dynamic value, {
      String? ifPresent,
      String? ifNull,
      bool? showName,
      DiagnosticLevel? level,
    }) {
      return ObjectFlagProperty(
        name,
        value,
        ifNull: ifNull,
        ifPresent: ifPresent,
        level: level ?? DiagnosticLevel.info,
        showName: showName ?? false,
      );
    };
Function _ObjectFlagProperty_has_$(m.Scope scope$) => ObjectFlagProperty.has;
Function _ObjectFlagProperty_valueToString$<T>(
  m.Scope scope$,
  ObjectFlagProperty<T> target$,
) =>
    target$.valueToString;
Function _ObjectFlagProperty_toJsonMap$<T>(
  m.Scope scope$,
  ObjectFlagProperty<T> target$,
) =>
    target$.toJsonMap;
Function FlagsSummary_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FlagsSummary<T>;
Function FlagsSummary_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FlagsSummary<T>;
Function _FlagsSummary_value$<T>(
  m.Scope scope$,
  FlagsSummary<T> target$,
) =>
    () {
      return target$.value;
    };
Function _FlagsSummary_level$<T>(
  m.Scope scope$,
  FlagsSummary<T> target$,
) =>
    () {
      return target$.level;
    };
Function _FlagsSummary__$(m.Scope scope$) => (
      String name,
      Map value, {
      String? ifEmpty,
      bool? showName,
      bool? showSeparator,
      DiagnosticLevel? level,
    }) {
      return FlagsSummary(
        name,
        Map.from(value),
        ifEmpty: ifEmpty,
        level: level ?? DiagnosticLevel.info,
        showName: showName ?? true,
        showSeparator: showSeparator ?? true,
      );
    };
Function _FlagsSummary_valueToString$<T>(
  m.Scope scope$,
  FlagsSummary<T> target$,
) =>
    target$.valueToString;
Function _FlagsSummary_toJsonMap$<T>(
  m.Scope scope$,
  FlagsSummary<T> target$,
) =>
    target$.toJsonMap;
Function DiagnosticsProperty_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DiagnosticsProperty<T>;
Function DiagnosticsProperty_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DiagnosticsProperty<T>;
Function _DiagnosticsProperty_expandableValue$<T>(
  m.Scope scope$,
  DiagnosticsProperty<T> target$,
) =>
    () {
      return target$.expandableValue;
    };
Function _DiagnosticsProperty_allowWrap$<T>(
  m.Scope scope$,
  DiagnosticsProperty<T> target$,
) =>
    () {
      return target$.allowWrap;
    };
Function _DiagnosticsProperty_allowNameWrap$<T>(
  m.Scope scope$,
  DiagnosticsProperty<T> target$,
) =>
    () {
      return target$.allowNameWrap;
    };
Function _DiagnosticsProperty_ifNull$<T>(
  m.Scope scope$,
  DiagnosticsProperty<T> target$,
) =>
    () {
      return target$.ifNull;
    };
Function _DiagnosticsProperty_ifEmpty$<T>(
  m.Scope scope$,
  DiagnosticsProperty<T> target$,
) =>
    () {
      return target$.ifEmpty;
    };
Function _DiagnosticsProperty_tooltip$<T>(
  m.Scope scope$,
  DiagnosticsProperty<T> target$,
) =>
    () {
      return target$.tooltip;
    };
Function _DiagnosticsProperty_missingIfNull$<T>(
  m.Scope scope$,
  DiagnosticsProperty<T> target$,
) =>
    () {
      return target$.missingIfNull;
    };
Function _DiagnosticsProperty_defaultValue$<T>(
  m.Scope scope$,
  DiagnosticsProperty<T> target$,
) =>
    () {
      return target$.defaultValue;
    };
Function _DiagnosticsProperty_propertyType$<T>(
  m.Scope scope$,
  DiagnosticsProperty<T> target$,
) =>
    () {
      return target$.propertyType;
    };
Function _DiagnosticsProperty_value$<T>(
  m.Scope scope$,
  DiagnosticsProperty<T> target$,
) =>
    () {
      return target$.value;
    };
Function _DiagnosticsProperty_exception$<T>(
  m.Scope scope$,
  DiagnosticsProperty<T> target$,
) =>
    () {
      return target$.exception;
    };
Function _DiagnosticsProperty_isInteresting$<T>(
  m.Scope scope$,
  DiagnosticsProperty<T> target$,
) =>
    () {
      return target$.isInteresting;
    };
Function _DiagnosticsProperty_level$<T>(
  m.Scope scope$,
  DiagnosticsProperty<T> target$,
) =>
    () {
      return target$.level;
    };
Function _DiagnosticsProperty__$(m.Scope scope$) => (
      String? name,
      dynamic value, {
      String? description,
      String? ifNull,
      String? ifEmpty,
      bool? showName,
      bool? showSeparator,
      Object? defaultValue,
      String? tooltip,
      bool? missingIfNull,
      String? linePrefix,
      bool? expandableValue,
      bool? allowWrap,
      bool? allowNameWrap,
      DiagnosticsTreeStyle? style,
      DiagnosticLevel? level,
    }) {
      return DiagnosticsProperty(
        name,
        value,
        allowNameWrap: allowNameWrap ?? true,
        allowWrap: allowWrap ?? true,
        defaultValue: defaultValue ?? kNoDefaultValue,
        description: description,
        expandableValue: expandableValue ?? false,
        ifEmpty: ifEmpty,
        ifNull: ifNull,
        level: level ?? DiagnosticLevel.info,
        linePrefix: linePrefix,
        missingIfNull: missingIfNull ?? false,
        showName: showName ?? true,
        showSeparator: showSeparator ?? true,
        style: style ?? DiagnosticsTreeStyle.singleLine,
        tooltip: tooltip,
      );
    };
Function _DiagnosticsProperty_lazy_$(m.Scope scope$) => (
      String? name,
      m.FunctionPointer computeValue, {
      String? description,
      String? ifNull,
      String? ifEmpty,
      bool? showName,
      bool? showSeparator,
      Object? defaultValue,
      String? tooltip,
      bool? missingIfNull,
      bool? expandableValue,
      bool? allowWrap,
      bool? allowNameWrap,
      DiagnosticsTreeStyle? style,
      DiagnosticLevel? level,
    }) {
      dynamic computeValueProxy() => scope$.engine.callFunctionPointer(
            scope$,
            computeValue,
            [],
            {},
          );
      return DiagnosticsProperty.lazy(
        name,
        computeValueProxy,
        allowNameWrap: allowNameWrap ?? true,
        allowWrap: allowWrap ?? true,
        defaultValue: defaultValue ?? kNoDefaultValue,
        description: description,
        expandableValue: expandableValue ?? false,
        ifEmpty: ifEmpty,
        ifNull: ifNull,
        level: level ?? DiagnosticLevel.info,
        missingIfNull: missingIfNull ?? false,
        showName: showName ?? true,
        showSeparator: showSeparator ?? true,
        style: style ?? DiagnosticsTreeStyle.singleLine,
        tooltip: tooltip,
      );
    };
Function _DiagnosticsProperty_toJsonMap$<T>(
  m.Scope scope$,
  DiagnosticsProperty<T> target$,
) =>
    target$.toJsonMap;
Function _DiagnosticsProperty_valueToString$<T>(
  m.Scope scope$,
  DiagnosticsProperty<T> target$,
) =>
    target$.valueToString;
Function _DiagnosticsProperty_toDescription$<T>(
  m.Scope scope$,
  DiagnosticsProperty<T> target$,
) =>
    target$.toDescription;
Function _DiagnosticsProperty_getProperties$<T>(
  m.Scope scope$,
  DiagnosticsProperty<T> target$,
) =>
    target$.getProperties;
Function _DiagnosticsProperty_getChildren$<T>(
  m.Scope scope$,
  DiagnosticsProperty<T> target$,
) =>
    target$.getChildren;
Function DiagnosticableNode_as$<T extends Diagnosticable>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DiagnosticableNode<T>;
Function DiagnosticableNode_is$<T extends Diagnosticable>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DiagnosticableNode<T>;
Function _DiagnosticableNode_value$<T extends Diagnosticable>(
  m.Scope scope$,
  DiagnosticableNode<T> target$,
) =>
    () {
      return target$.value;
    };
Function _DiagnosticableNode_builder$<T extends Diagnosticable>(
  m.Scope scope$,
  DiagnosticableNode<T> target$,
) =>
    () {
      return target$.builder;
    };
Function _DiagnosticableNode_style$<T extends Diagnosticable>(
  m.Scope scope$,
  DiagnosticableNode<T> target$,
) =>
    () {
      return target$.style;
    };
Function _DiagnosticableNode_emptyBodyDescription$<T extends Diagnosticable>(
  m.Scope scope$,
  DiagnosticableNode<T> target$,
) =>
    () {
      return target$.emptyBodyDescription;
    };
Function _DiagnosticableNode__$(m.Scope scope$) => <T extends Diagnosticable>({
      String? name,
      required dynamic value,
      required DiagnosticsTreeStyle? style,
    }) {
      return DiagnosticableNode<T>(
        name: name,
        style: style,
        value: value,
      );
    };
Function _DiagnosticableNode_getProperties$<T extends Diagnosticable>(
  m.Scope scope$,
  DiagnosticableNode<T> target$,
) =>
    target$.getProperties;
Function _DiagnosticableNode_getChildren$<T extends Diagnosticable>(
  m.Scope scope$,
  DiagnosticableNode<T> target$,
) =>
    target$.getChildren;
Function _DiagnosticableNode_toDescription$<T extends Diagnosticable>(
  m.Scope scope$,
  DiagnosticableNode<T> target$,
) =>
    target$.toDescription;
Function DiagnosticableTreeNode_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DiagnosticableTreeNode;
Function DiagnosticableTreeNode_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DiagnosticableTreeNode;
Function _DiagnosticableTreeNode__$(m.Scope scope$) => ({
      String? name,
      required DiagnosticableTree value,
      required DiagnosticsTreeStyle? style,
    }) {
      return DiagnosticableTreeNode(
        name: name,
        style: style,
        value: value,
      );
    };
Function _DiagnosticableTreeNode_getChildren$(
  m.Scope scope$,
  DiagnosticableTreeNode target$,
) =>
    target$.getChildren;
Function DiagnosticPropertiesBuilder_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DiagnosticPropertiesBuilder;
Function DiagnosticPropertiesBuilder_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DiagnosticPropertiesBuilder;
Function _DiagnosticPropertiesBuilder_properties$(
  m.Scope scope$,
  DiagnosticPropertiesBuilder target$,
) =>
    () {
      return target$.properties;
    };
Function _DiagnosticPropertiesBuilder_defaultDiagnosticsTreeStyle$(
  m.Scope scope$,
  DiagnosticPropertiesBuilder target$,
) =>
    () {
      return target$.defaultDiagnosticsTreeStyle;
    };
void _DiagnosticPropertiesBuilder_defaultDiagnosticsTreeStyle_set$(
  m.Scope scope$,
  DiagnosticPropertiesBuilder target$,
) =>
    (dynamic other$) {
      target$.defaultDiagnosticsTreeStyle = other$;
    };
Function _DiagnosticPropertiesBuilder_emptyBodyDescription$(
  m.Scope scope$,
  DiagnosticPropertiesBuilder target$,
) =>
    () {
      return target$.emptyBodyDescription;
    };
void _DiagnosticPropertiesBuilder_emptyBodyDescription_set$(
  m.Scope scope$,
  DiagnosticPropertiesBuilder target$,
) =>
    (dynamic other$) {
      target$.emptyBodyDescription = other$;
    };
Function _DiagnosticPropertiesBuilder__$(m.Scope scope$) => () {
      return DiagnosticPropertiesBuilder();
    };
Function _DiagnosticPropertiesBuilder_fromProperties_$(m.Scope scope$) =>
    DiagnosticPropertiesBuilder.fromProperties;
Function _DiagnosticPropertiesBuilder_add$(
  m.Scope scope$,
  DiagnosticPropertiesBuilder target$,
) =>
    target$.add;
Function DiagnosticableTree_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DiagnosticableTree;
Function DiagnosticableTree_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DiagnosticableTree;
Function _DiagnosticableTree_toStringShallow$(
  m.Scope scope$,
  DiagnosticableTree target$,
) =>
    target$.toStringShallow;
Function _DiagnosticableTree_toStringDeep$(
  m.Scope scope$,
  DiagnosticableTree target$,
) =>
    target$.toStringDeep;
Function _DiagnosticableTree_toStringShort$(
  m.Scope scope$,
  DiagnosticableTree target$,
) =>
    target$.toStringShort;
Function _DiagnosticableTree_toDiagnosticsNode$(
  m.Scope scope$,
  DiagnosticableTree target$,
) =>
    target$.toDiagnosticsNode;
Function _DiagnosticableTree_debugDescribeChildren$(
  m.Scope scope$,
  DiagnosticableTree target$,
) =>
    target$.debugDescribeChildren;
Function DiagnosticsBlock_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DiagnosticsBlock;
Function DiagnosticsBlock_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DiagnosticsBlock;
Function _DiagnosticsBlock_level$(
  m.Scope scope$,
  DiagnosticsBlock target$,
) =>
    () {
      return target$.level;
    };
Function _DiagnosticsBlock_value$(
  m.Scope scope$,
  DiagnosticsBlock target$,
) =>
    () {
      return target$.value;
    };
Function _DiagnosticsBlock_allowTruncate$(
  m.Scope scope$,
  DiagnosticsBlock target$,
) =>
    () {
      return target$.allowTruncate;
    };
Function _DiagnosticsBlock__$(m.Scope scope$) => ({
      String? name,
      DiagnosticsTreeStyle? style,
      bool? showName,
      bool? showSeparator,
      String? linePrefix,
      Object? value,
      String? description,
      DiagnosticLevel? level,
      bool? allowTruncate,
      List? children,
      List? properties,
    }) {
      return DiagnosticsBlock(
        allowTruncate: allowTruncate ?? false,
        children:
            children == null ? const <DiagnosticsNode>[] : List.from(children),
        description: description,
        level: level ?? DiagnosticLevel.info,
        linePrefix: linePrefix,
        name: name,
        properties: properties == null
            ? const <DiagnosticsNode>[]
            : List.from(properties),
        showName: showName ?? true,
        showSeparator: showSeparator ?? true,
        style: style ?? DiagnosticsTreeStyle.whitespace,
        value: value,
      );
    };
Function _DiagnosticsBlock_getChildren$(
  m.Scope scope$,
  DiagnosticsBlock target$,
) =>
    target$.getChildren;
Function _DiagnosticsBlock_getProperties$(
  m.Scope scope$,
  DiagnosticsBlock target$,
) =>
    target$.getProperties;
Function _DiagnosticsBlock_toDescription$(
  m.Scope scope$,
  DiagnosticsBlock target$,
) =>
    target$.toDescription;
Function DiagnosticsSerializationDelegate_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DiagnosticsSerializationDelegate;
Function DiagnosticsSerializationDelegate_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DiagnosticsSerializationDelegate;
Function _DiagnosticsSerializationDelegate_subtreeDepth$(
  m.Scope scope$,
  DiagnosticsSerializationDelegate target$,
) =>
    () {
      return target$.subtreeDepth;
    };
Function _DiagnosticsSerializationDelegate_includeProperties$(
  m.Scope scope$,
  DiagnosticsSerializationDelegate target$,
) =>
    () {
      return target$.includeProperties;
    };
Function _DiagnosticsSerializationDelegate_expandPropertyValues$(
  m.Scope scope$,
  DiagnosticsSerializationDelegate target$,
) =>
    () {
      return target$.expandPropertyValues;
    };
Function _DiagnosticsSerializationDelegate__$(m.Scope scope$) => ({
      required int subtreeDepth,
      required bool includeProperties,
    }) {
      return DiagnosticsSerializationDelegate(
        includeProperties: includeProperties,
        subtreeDepth: subtreeDepth,
      );
    };
Function _DiagnosticsSerializationDelegate_additionalNodeProperties$(
  m.Scope scope$,
  DiagnosticsSerializationDelegate target$,
) =>
    target$.additionalNodeProperties;
Function _DiagnosticsSerializationDelegate_filterChildren$(
  m.Scope scope$,
  DiagnosticsSerializationDelegate target$,
) =>
    target$.filterChildren;
Function _DiagnosticsSerializationDelegate_filterProperties$(
  m.Scope scope$,
  DiagnosticsSerializationDelegate target$,
) =>
    target$.filterProperties;
Function _DiagnosticsSerializationDelegate_truncateNodesList$(
  m.Scope scope$,
  DiagnosticsSerializationDelegate target$,
) =>
    target$.truncateNodesList;
Function _DiagnosticsSerializationDelegate_delegateForNode$(
  m.Scope scope$,
  DiagnosticsSerializationDelegate target$,
) =>
    target$.delegateForNode;
Function _DiagnosticsSerializationDelegate_copyWith$(
  m.Scope scope$,
  DiagnosticsSerializationDelegate target$,
) =>
    target$.copyWith;
Function _DiagnosticLevel_hidden$(m.Scope scope$) =>
    () => DiagnosticLevel.hidden;
Function _DiagnosticLevel_fine$(m.Scope scope$) => () => DiagnosticLevel.fine;
Function _DiagnosticLevel_debug$(m.Scope scope$) => () => DiagnosticLevel.debug;
Function _DiagnosticLevel_info$(m.Scope scope$) => () => DiagnosticLevel.info;
Function _DiagnosticLevel_warning$(m.Scope scope$) =>
    () => DiagnosticLevel.warning;
Function _DiagnosticLevel_hint$(m.Scope scope$) => () => DiagnosticLevel.hint;
Function _DiagnosticLevel_summary$(m.Scope scope$) =>
    () => DiagnosticLevel.summary;
Function _DiagnosticLevel_error$(m.Scope scope$) => () => DiagnosticLevel.error;
Function _DiagnosticLevel_off$(m.Scope scope$) => () => DiagnosticLevel.off;
Function _DiagnosticLevel_values$(m.Scope scope$) =>
    () => DiagnosticLevel.values;
Function _DiagnosticsTreeStyle_none$(m.Scope scope$) =>
    () => DiagnosticsTreeStyle.none;
Function _DiagnosticsTreeStyle_sparse$(m.Scope scope$) =>
    () => DiagnosticsTreeStyle.sparse;
Function _DiagnosticsTreeStyle_offstage$(m.Scope scope$) =>
    () => DiagnosticsTreeStyle.offstage;
Function _DiagnosticsTreeStyle_dense$(m.Scope scope$) =>
    () => DiagnosticsTreeStyle.dense;
Function _DiagnosticsTreeStyle_transition$(m.Scope scope$) =>
    () => DiagnosticsTreeStyle.transition;
Function _DiagnosticsTreeStyle_error$(m.Scope scope$) =>
    () => DiagnosticsTreeStyle.error;
Function _DiagnosticsTreeStyle_whitespace$(m.Scope scope$) =>
    () => DiagnosticsTreeStyle.whitespace;
Function _DiagnosticsTreeStyle_flat$(m.Scope scope$) =>
    () => DiagnosticsTreeStyle.flat;
Function _DiagnosticsTreeStyle_singleLine$(m.Scope scope$) =>
    () => DiagnosticsTreeStyle.singleLine;
Function _DiagnosticsTreeStyle_errorProperty$(m.Scope scope$) =>
    () => DiagnosticsTreeStyle.errorProperty;
Function _DiagnosticsTreeStyle_shallow$(m.Scope scope$) =>
    () => DiagnosticsTreeStyle.shallow;
Function _DiagnosticsTreeStyle_truncateChildren$(m.Scope scope$) =>
    () => DiagnosticsTreeStyle.truncateChildren;
Function _DiagnosticsTreeStyle_values$(m.Scope scope$) =>
    () => DiagnosticsTreeStyle.values;
Function _shortHash$(m.Scope scope$) => shortHash;
Function _describeIdentity$(m.Scope scope$) => describeIdentity;
Function _describeEnum$(m.Scope scope$) => describeEnum;
