// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/button.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_theme.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/material_state_mixin.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/button.dart',
  {'RawMaterialButton.': _RawMaterialButton__$},
  {},
  {
    'RawMaterialButton': m.ClassMirror(
      'RawMaterialButton',
      {
        '#as': RawMaterialButton_as$,
        '#is': RawMaterialButton_is$,
        'onPressed': _RawMaterialButton_onPressed$,
        'onLongPress': _RawMaterialButton_onLongPress$,
        'onHighlightChanged': _RawMaterialButton_onHighlightChanged$,
        'mouseCursor': _RawMaterialButton_mouseCursor$,
        'textStyle': _RawMaterialButton_textStyle$,
        'fillColor': _RawMaterialButton_fillColor$,
        'focusColor': _RawMaterialButton_focusColor$,
        'hoverColor': _RawMaterialButton_hoverColor$,
        'highlightColor': _RawMaterialButton_highlightColor$,
        'splashColor': _RawMaterialButton_splashColor$,
        'elevation': _RawMaterialButton_elevation$,
        'hoverElevation': _RawMaterialButton_hoverElevation$,
        'focusElevation': _RawMaterialButton_focusElevation$,
        'highlightElevation': _RawMaterialButton_highlightElevation$,
        'disabledElevation': _RawMaterialButton_disabledElevation$,
        'padding': _RawMaterialButton_padding$,
        'visualDensity': _RawMaterialButton_visualDensity$,
        'constraints': _RawMaterialButton_constraints$,
        'shape': _RawMaterialButton_shape$,
        'animationDuration': _RawMaterialButton_animationDuration$,
        'child': _RawMaterialButton_child$,
        'materialTapTargetSize': _RawMaterialButton_materialTapTargetSize$,
        'focusNode': _RawMaterialButton_focusNode$,
        'autofocus': _RawMaterialButton_autofocus$,
        'clipBehavior': _RawMaterialButton_clipBehavior$,
        'enableFeedback': _RawMaterialButton_enableFeedback$,
        'enabled': _RawMaterialButton_enabled$,
        'createState': _RawMaterialButton_createState$,
      },
      {},
    )
  },
);
Function RawMaterialButton_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RawMaterialButton;
Function RawMaterialButton_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RawMaterialButton;
Function _RawMaterialButton_onPressed$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.onPressed;
    };
Function _RawMaterialButton_onLongPress$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.onLongPress;
    };
Function _RawMaterialButton_onHighlightChanged$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.onHighlightChanged;
    };
Function _RawMaterialButton_mouseCursor$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.mouseCursor;
    };
Function _RawMaterialButton_textStyle$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.textStyle;
    };
Function _RawMaterialButton_fillColor$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.fillColor;
    };
Function _RawMaterialButton_focusColor$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.focusColor;
    };
Function _RawMaterialButton_hoverColor$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.hoverColor;
    };
Function _RawMaterialButton_highlightColor$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.highlightColor;
    };
Function _RawMaterialButton_splashColor$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.splashColor;
    };
Function _RawMaterialButton_elevation$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.elevation;
    };
Function _RawMaterialButton_hoverElevation$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.hoverElevation;
    };
Function _RawMaterialButton_focusElevation$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.focusElevation;
    };
Function _RawMaterialButton_highlightElevation$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.highlightElevation;
    };
Function _RawMaterialButton_disabledElevation$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.disabledElevation;
    };
Function _RawMaterialButton_padding$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.padding;
    };
Function _RawMaterialButton_visualDensity$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.visualDensity;
    };
Function _RawMaterialButton_constraints$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.constraints;
    };
Function _RawMaterialButton_shape$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.shape;
    };
Function _RawMaterialButton_animationDuration$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.animationDuration;
    };
Function _RawMaterialButton_child$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.child;
    };
Function _RawMaterialButton_materialTapTargetSize$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.materialTapTargetSize;
    };
Function _RawMaterialButton_focusNode$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.focusNode;
    };
Function _RawMaterialButton_autofocus$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.autofocus;
    };
Function _RawMaterialButton_clipBehavior$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _RawMaterialButton_enableFeedback$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.enableFeedback;
    };
Function _RawMaterialButton_enabled$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    () {
      return target$.enabled;
    };
Function _RawMaterialButton__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer? onPressed,
      m.FunctionPointer? onLongPress,
      m.FunctionPointer? onHighlightChanged,
      MouseCursor? mouseCursor,
      TextStyle? textStyle,
      Color? fillColor,
      Color? focusColor,
      Color? hoverColor,
      Color? highlightColor,
      Color? splashColor,
      double? elevation,
      double? focusElevation,
      double? hoverElevation,
      double? highlightElevation,
      double? disabledElevation,
      EdgeInsetsGeometry? padding,
      VisualDensity? visualDensity,
      BoxConstraints? constraints,
      ShapeBorder? shape,
      Duration? animationDuration,
      Clip? clipBehavior,
      FocusNode? focusNode,
      bool? autofocus,
      MaterialTapTargetSize? materialTapTargetSize,
      Widget? child,
      bool? enableFeedback,
    }) {
      void onHighlightChangedProxy(bool onHighlightChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onHighlightChanged!,
            [onHighlightChanged_value$],
            {},
          );
      void onLongPressProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onLongPress!,
            [],
            {},
          );
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return RawMaterialButton(
        animationDuration: animationDuration ?? kThemeChangeDuration,
        autofocus: autofocus ?? false,
        child: child,
        clipBehavior: clipBehavior ?? Clip.none,
        constraints: constraints ??
            const BoxConstraints(minWidth: 88.0, minHeight: 36.0),
        disabledElevation: disabledElevation ?? 0.0,
        elevation: elevation ?? 2.0,
        enableFeedback: enableFeedback ?? true,
        fillColor: fillColor,
        focusColor: focusColor,
        focusElevation: focusElevation ?? 4.0,
        focusNode: focusNode,
        highlightColor: highlightColor,
        highlightElevation: highlightElevation ?? 8.0,
        hoverColor: hoverColor,
        hoverElevation: hoverElevation ?? 4.0,
        key: key,
        materialTapTargetSize: materialTapTargetSize,
        mouseCursor: mouseCursor,
        onHighlightChanged:
            onHighlightChanged == null ? null : onHighlightChangedProxy,
        onLongPress: onLongPress == null ? null : onLongPressProxy,
        onPressed: onPressed == null ? null : onPressedProxy,
        padding: padding ?? EdgeInsets.zero,
        shape: shape ?? const RoundedRectangleBorder(),
        splashColor: splashColor,
        textStyle: textStyle,
        visualDensity: visualDensity ?? VisualDensity.standard,
      );
    };
Function _RawMaterialButton_createState$(
  m.Scope scope$,
  RawMaterialButton target$,
) =>
    target$.createState;
