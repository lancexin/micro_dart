// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/button.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_theme.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/material_state_mixin.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/button.dart',
  {},
  {},
  {
    'RawMaterialButton': m.ClassMirror(
      'RawMaterialButton',
      {
        'onPressed': _RawMaterialButton_onPressed$,
        'onLongPress': _RawMaterialButton_onLongPress$,
        'onHighlightChanged': _RawMaterialButton_onHighlightChanged$,
        'mouseCursor': _RawMaterialButton_mouseCursor$,
        'textStyle': _RawMaterialButton_textStyle$,
        'fillColor': _RawMaterialButton_fillColor$,
        'focusColor': _RawMaterialButton_focusColor$,
        'hoverColor': _RawMaterialButton_hoverColor$,
        'highlightColor': _RawMaterialButton_highlightColor$,
        'splashColor': _RawMaterialButton_splashColor$,
        'elevation': _RawMaterialButton_elevation$,
        'hoverElevation': _RawMaterialButton_hoverElevation$,
        'focusElevation': _RawMaterialButton_focusElevation$,
        'highlightElevation': _RawMaterialButton_highlightElevation$,
        'disabledElevation': _RawMaterialButton_disabledElevation$,
        'padding': _RawMaterialButton_padding$,
        'visualDensity': _RawMaterialButton_visualDensity$,
        'constraints': _RawMaterialButton_constraints$,
        'shape': _RawMaterialButton_shape$,
        'animationDuration': _RawMaterialButton_animationDuration$,
        'child': _RawMaterialButton_child$,
        'materialTapTargetSize': _RawMaterialButton_materialTapTargetSize$,
        'focusNode': _RawMaterialButton_focusNode$,
        'autofocus': _RawMaterialButton_autofocus$,
        'clipBehavior': _RawMaterialButton_clipBehavior$,
        'enableFeedback': _RawMaterialButton_enableFeedback$,
        'enabled': _RawMaterialButton_enabled$,
        'createState': _RawMaterialButton_createState$,
      },
      {},
    )
  },
);
void Function()? _RawMaterialButton_onPressed$(RawMaterialButton target) {
  return target.onPressed;
}

void Function()? _RawMaterialButton_onLongPress$(RawMaterialButton target) {
  return target.onLongPress;
}

void Function(bool)? _RawMaterialButton_onHighlightChanged$(
    RawMaterialButton target) {
  return target.onHighlightChanged;
}

MouseCursor? _RawMaterialButton_mouseCursor$(RawMaterialButton target) {
  return target.mouseCursor;
}

TextStyle? _RawMaterialButton_textStyle$(RawMaterialButton target) {
  return target.textStyle;
}

Color? _RawMaterialButton_fillColor$(RawMaterialButton target) {
  return target.fillColor;
}

Color? _RawMaterialButton_focusColor$(RawMaterialButton target) {
  return target.focusColor;
}

Color? _RawMaterialButton_hoverColor$(RawMaterialButton target) {
  return target.hoverColor;
}

Color? _RawMaterialButton_highlightColor$(RawMaterialButton target) {
  return target.highlightColor;
}

Color? _RawMaterialButton_splashColor$(RawMaterialButton target) {
  return target.splashColor;
}

double _RawMaterialButton_elevation$(RawMaterialButton target) {
  return target.elevation;
}

double _RawMaterialButton_hoverElevation$(RawMaterialButton target) {
  return target.hoverElevation;
}

double _RawMaterialButton_focusElevation$(RawMaterialButton target) {
  return target.focusElevation;
}

double _RawMaterialButton_highlightElevation$(RawMaterialButton target) {
  return target.highlightElevation;
}

double _RawMaterialButton_disabledElevation$(RawMaterialButton target) {
  return target.disabledElevation;
}

EdgeInsetsGeometry _RawMaterialButton_padding$(RawMaterialButton target) {
  return target.padding;
}

VisualDensity _RawMaterialButton_visualDensity$(RawMaterialButton target) {
  return target.visualDensity;
}

BoxConstraints _RawMaterialButton_constraints$(RawMaterialButton target) {
  return target.constraints;
}

ShapeBorder _RawMaterialButton_shape$(RawMaterialButton target) {
  return target.shape;
}

Duration _RawMaterialButton_animationDuration$(RawMaterialButton target) {
  return target.animationDuration;
}

Widget? _RawMaterialButton_child$(RawMaterialButton target) {
  return target.child;
}

MaterialTapTargetSize _RawMaterialButton_materialTapTargetSize$(
    RawMaterialButton target) {
  return target.materialTapTargetSize;
}

FocusNode? _RawMaterialButton_focusNode$(RawMaterialButton target) {
  return target.focusNode;
}

bool _RawMaterialButton_autofocus$(RawMaterialButton target) {
  return target.autofocus;
}

Clip _RawMaterialButton_clipBehavior$(RawMaterialButton target) {
  return target.clipBehavior;
}

bool _RawMaterialButton_enableFeedback$(RawMaterialButton target) {
  return target.enableFeedback;
}

bool _RawMaterialButton_enabled$(RawMaterialButton target) {
  return target.enabled;
}

Function _RawMaterialButton_createState$(
  m.Scope scope,
  RawMaterialButton target,
) =>
    target.createState;
