// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/divider.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/divider_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/divider.dart',
  {
    'Divider.': _Divider__$,
    'Divider.createBorderSide': _Divider_createBorderSide$,
    'VerticalDivider.': _VerticalDivider__$,
  },
  {},
  {
    'Divider': m.ClassMirror(
      'Divider',
      {
        '#as': Divider_as$,
        '#is': Divider_is$,
        'height': _Divider_height$,
        'thickness': _Divider_thickness$,
        'indent': _Divider_indent$,
        'endIndent': _Divider_endIndent$,
        'color': _Divider_color$,
        'build': _Divider_build$,
      },
      {},
    ),
    'VerticalDivider': m.ClassMirror(
      'VerticalDivider',
      {
        '#as': VerticalDivider_as$,
        '#is': VerticalDivider_is$,
        'width': _VerticalDivider_width$,
        'thickness': _VerticalDivider_thickness$,
        'indent': _VerticalDivider_indent$,
        'endIndent': _VerticalDivider_endIndent$,
        'color': _VerticalDivider_color$,
        'build': _VerticalDivider_build$,
      },
      {},
    ),
  },
);
Function Divider_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Divider;
Function Divider_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Divider;
Function _Divider_height$(
  m.Scope scope$,
  Divider target$,
) =>
    () {
      return target$.height;
    };
Function _Divider_thickness$(
  m.Scope scope$,
  Divider target$,
) =>
    () {
      return target$.thickness;
    };
Function _Divider_indent$(
  m.Scope scope$,
  Divider target$,
) =>
    () {
      return target$.indent;
    };
Function _Divider_endIndent$(
  m.Scope scope$,
  Divider target$,
) =>
    () {
      return target$.endIndent;
    };
Function _Divider_color$(
  m.Scope scope$,
  Divider target$,
) =>
    () {
      return target$.color;
    };
Function _Divider__$(m.Scope scope$) => ({
      Key? key,
      double? height,
      double? thickness,
      double? indent,
      double? endIndent,
      Color? color,
    }) {
      return Divider(
        color: color,
        endIndent: endIndent,
        height: height,
        indent: indent,
        key: key,
        thickness: thickness,
      );
    };
Function _Divider_createBorderSide$(m.Scope scope$) => Divider.createBorderSide;
Function _Divider_build$(
  m.Scope scope$,
  Divider target$,
) =>
    target$.build;
Function VerticalDivider_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as VerticalDivider;
Function VerticalDivider_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is VerticalDivider;
Function _VerticalDivider_width$(
  m.Scope scope$,
  VerticalDivider target$,
) =>
    () {
      return target$.width;
    };
Function _VerticalDivider_thickness$(
  m.Scope scope$,
  VerticalDivider target$,
) =>
    () {
      return target$.thickness;
    };
Function _VerticalDivider_indent$(
  m.Scope scope$,
  VerticalDivider target$,
) =>
    () {
      return target$.indent;
    };
Function _VerticalDivider_endIndent$(
  m.Scope scope$,
  VerticalDivider target$,
) =>
    () {
      return target$.endIndent;
    };
Function _VerticalDivider_color$(
  m.Scope scope$,
  VerticalDivider target$,
) =>
    () {
      return target$.color;
    };
Function _VerticalDivider__$(m.Scope scope$) => ({
      Key? key,
      double? width,
      double? thickness,
      double? indent,
      double? endIndent,
      Color? color,
    }) {
      return VerticalDivider(
        color: color,
        endIndent: endIndent,
        indent: indent,
        key: key,
        thickness: thickness,
        width: width,
      );
    };
Function _VerticalDivider_build$(
  m.Scope scope$,
  VerticalDivider target$,
) =>
    target$.build;
