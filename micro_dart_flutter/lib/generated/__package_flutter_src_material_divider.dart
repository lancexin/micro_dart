// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/divider.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/divider_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/divider.dart',
  {'Divider.createBorderSide': _Divider_createBorderSide$},
  {},
  {
    'Divider': m.ClassMirror(
      'Divider',
      {
        '#as': Divider_as$,
        '#is': Divider_is$,
        'height': _Divider_height$,
        'thickness': _Divider_thickness$,
        'indent': _Divider_indent$,
        'endIndent': _Divider_endIndent$,
        'color': _Divider_color$,
        'build': _Divider_build$,
      },
      {},
    ),
    'VerticalDivider': m.ClassMirror(
      'VerticalDivider',
      {
        '#as': VerticalDivider_as$,
        '#is': VerticalDivider_is$,
        'width': _VerticalDivider_width$,
        'thickness': _VerticalDivider_thickness$,
        'indent': _VerticalDivider_indent$,
        'endIndent': _VerticalDivider_endIndent$,
        'color': _VerticalDivider_color$,
        'build': _VerticalDivider_build$,
      },
      {},
    ),
  },
);
Function Divider_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Divider;
Function Divider_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Divider;
double? _Divider_height$(Divider target) {
  return target.height;
}

double? _Divider_thickness$(Divider target) {
  return target.thickness;
}

double? _Divider_indent$(Divider target) {
  return target.indent;
}

double? _Divider_endIndent$(Divider target) {
  return target.endIndent;
}

Color? _Divider_color$(Divider target) {
  return target.color;
}

Function _Divider_createBorderSide$(m.Scope scope) => Divider.createBorderSide;
Function _Divider_build$(
  m.Scope scope,
  Divider target,
) =>
    target.build;
Function VerticalDivider_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as VerticalDivider;
Function VerticalDivider_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is VerticalDivider;
double? _VerticalDivider_width$(VerticalDivider target) {
  return target.width;
}

double? _VerticalDivider_thickness$(VerticalDivider target) {
  return target.thickness;
}

double? _VerticalDivider_indent$(VerticalDivider target) {
  return target.indent;
}

double? _VerticalDivider_endIndent$(VerticalDivider target) {
  return target.endIndent;
}

Color? _VerticalDivider_color$(VerticalDivider target) {
  return target.color;
}

Function _VerticalDivider_build$(
  m.Scope scope,
  VerticalDivider target,
) =>
    target.build;
