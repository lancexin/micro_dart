// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/animation/tween_sequence.dart';
import 'package:flutter/src/animation/tween.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/animation/tween_sequence.dart',
  {
    'TweenSequence.': _TweenSequence__$,
    'FlippedTweenSequence.': _FlippedTweenSequence__$,
    'TweenSequenceItem.': _TweenSequenceItem__$,
  },
  {},
  {
    'TweenSequence': m.ClassMirror(
      'TweenSequence',
      {
        '#as': TweenSequence_as$,
        '#is': TweenSequence_is$,
        'transform': _TweenSequence_transform$,
        'toString': _TweenSequence_toString$,
      },
      {},
    ),
    'FlippedTweenSequence': m.ClassMirror(
      'FlippedTweenSequence',
      {
        '#as': FlippedTweenSequence_as$,
        '#is': FlippedTweenSequence_is$,
        'transform': _FlippedTweenSequence_transform$,
      },
      {},
    ),
    'TweenSequenceItem': m.ClassMirror(
      'TweenSequenceItem',
      {
        '#as': TweenSequenceItem_as$,
        '#is': TweenSequenceItem_is$,
        'tween': _TweenSequenceItem_tween$,
        'weight': _TweenSequenceItem_weight$,
      },
      {},
    ),
  },
);
Function TweenSequence_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TweenSequence<T>;
Function TweenSequence_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TweenSequence<T>;
Function _TweenSequence__$(m.Scope scope$) => (List items) {
      return TweenSequence(List.from(items));
    };
Function _TweenSequence_transform$<T>(
  m.Scope scope$,
  TweenSequence<T> target$,
) =>
    target$.transform;
Function _TweenSequence_toString$<T>(
  m.Scope scope$,
  TweenSequence<T> target$,
) =>
    target$.toString;
Function FlippedTweenSequence_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FlippedTweenSequence;
Function FlippedTweenSequence_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FlippedTweenSequence;
Function _FlippedTweenSequence__$(m.Scope scope$) => (List items) {
      return FlippedTweenSequence(List.from(items));
    };
Function _FlippedTweenSequence_transform$(
  m.Scope scope$,
  FlippedTweenSequence target$,
) =>
    target$.transform;
Function TweenSequenceItem_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TweenSequenceItem<T>;
Function TweenSequenceItem_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TweenSequenceItem<T>;
Function _TweenSequenceItem_tween$<T>(
  m.Scope scope$,
  TweenSequenceItem<T> target$,
) =>
    () {
      return target$.tween;
    };
Function _TweenSequenceItem_weight$<T>(
  m.Scope scope$,
  TweenSequenceItem<T> target$,
) =>
    () {
      return target$.weight;
    };
Function _TweenSequenceItem__$(m.Scope scope$) => ({
      required Animatable tween,
      required double weight,
    }) {
      return TweenSequenceItem(
        tween: tween,
        weight: weight,
      );
    };
