// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/gestures/debug.dart';
import 'package:flutter/foundation.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/gestures/debug.dart',
  {
    'debugPrintHitTestResults': _debugPrintHitTestResults$,
    'debugPrintMouseHoverEvents': _debugPrintMouseHoverEvents$,
    'debugPrintGestureArenaDiagnostics': _debugPrintGestureArenaDiagnostics$,
    'debugPrintRecognizerCallbacksTrace': _debugPrintRecognizerCallbacksTrace$,
    'debugPrintResamplingMargin': _debugPrintResamplingMargin$,
    'debugAssertAllGesturesVarsUnset': _debugAssertAllGesturesVarsUnset$,
  },
  {
    'debugPrintHitTestResults': _debugPrintHitTestResults_set$,
    'debugPrintMouseHoverEvents': _debugPrintMouseHoverEvents_set$,
    'debugPrintGestureArenaDiagnostics':
        _debugPrintGestureArenaDiagnostics_set$,
    'debugPrintRecognizerCallbacksTrace':
        _debugPrintRecognizerCallbacksTrace_set$,
    'debugPrintResamplingMargin': _debugPrintResamplingMargin_set$,
  },
  {},
);
bool _debugPrintHitTestResults$() {
  return debugPrintHitTestResults;
}

void _debugPrintHitTestResults_set$(bool other$) {
  debugPrintHitTestResults = other$;
}

bool _debugPrintMouseHoverEvents$() {
  return debugPrintMouseHoverEvents;
}

void _debugPrintMouseHoverEvents_set$(bool other$) {
  debugPrintMouseHoverEvents = other$;
}

bool _debugPrintGestureArenaDiagnostics$() {
  return debugPrintGestureArenaDiagnostics;
}

void _debugPrintGestureArenaDiagnostics_set$(bool other$) {
  debugPrintGestureArenaDiagnostics = other$;
}

bool _debugPrintRecognizerCallbacksTrace$() {
  return debugPrintRecognizerCallbacksTrace;
}

void _debugPrintRecognizerCallbacksTrace_set$(bool other$) {
  debugPrintRecognizerCallbacksTrace = other$;
}

bool _debugPrintResamplingMargin$() {
  return debugPrintResamplingMargin;
}

void _debugPrintResamplingMargin_set$(bool other$) {
  debugPrintResamplingMargin = other$;
}

Function _debugAssertAllGesturesVarsUnset$(m.Scope scope$) =>
    debugAssertAllGesturesVarsUnset;
