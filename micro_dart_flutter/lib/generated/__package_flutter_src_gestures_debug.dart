// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/gestures/debug.dart';
import 'package:flutter/foundation.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/gestures/debug.dart',
  {
    'debugPrintHitTestResults': _debugPrintHitTestResults$,
    'debugPrintMouseHoverEvents': _debugPrintMouseHoverEvents$,
    'debugPrintGestureArenaDiagnostics': _debugPrintGestureArenaDiagnostics$,
    'debugPrintRecognizerCallbacksTrace': _debugPrintRecognizerCallbacksTrace$,
    'debugPrintResamplingMargin': _debugPrintResamplingMargin$,
    'debugAssertAllGesturesVarsUnset': _debugAssertAllGesturesVarsUnset$,
  },
  {
    'debugPrintHitTestResults': _debugPrintHitTestResults_set$,
    'debugPrintMouseHoverEvents': _debugPrintMouseHoverEvents_set$,
    'debugPrintGestureArenaDiagnostics':
        _debugPrintGestureArenaDiagnostics_set$,
    'debugPrintRecognizerCallbacksTrace':
        _debugPrintRecognizerCallbacksTrace_set$,
    'debugPrintResamplingMargin': _debugPrintResamplingMargin_set$,
  },
  {},
);
Function _debugPrintHitTestResults$(m.Scope scope$) =>
    () => debugPrintHitTestResults;
void _debugPrintHitTestResults_set$(bool other$) {
  debugPrintHitTestResults = other$;
}

Function _debugPrintMouseHoverEvents$(m.Scope scope$) =>
    () => debugPrintMouseHoverEvents;
void _debugPrintMouseHoverEvents_set$(bool other$) {
  debugPrintMouseHoverEvents = other$;
}

Function _debugPrintGestureArenaDiagnostics$(m.Scope scope$) =>
    () => debugPrintGestureArenaDiagnostics;
void _debugPrintGestureArenaDiagnostics_set$(bool other$) {
  debugPrintGestureArenaDiagnostics = other$;
}

Function _debugPrintRecognizerCallbacksTrace$(m.Scope scope$) =>
    () => debugPrintRecognizerCallbacksTrace;
void _debugPrintRecognizerCallbacksTrace_set$(bool other$) {
  debugPrintRecognizerCallbacksTrace = other$;
}

Function _debugPrintResamplingMargin$(m.Scope scope$) =>
    () => debugPrintResamplingMargin;
void _debugPrintResamplingMargin_set$(bool other$) {
  debugPrintResamplingMargin = other$;
}

Function _debugAssertAllGesturesVarsUnset$(m.Scope scope$) =>
    debugAssertAllGesturesVarsUnset;
