// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/floating_action_button_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/material/material_state.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/floating_action_button_theme.dart',
  {'FloatingActionButtonThemeData.lerp': _FloatingActionButtonThemeData_lerp$},
  {},
  {
    'FloatingActionButtonThemeData': m.ClassMirror(
      'FloatingActionButtonThemeData',
      {
        'foregroundColor': _FloatingActionButtonThemeData_foregroundColor$,
        'backgroundColor': _FloatingActionButtonThemeData_backgroundColor$,
        'focusColor': _FloatingActionButtonThemeData_focusColor$,
        'hoverColor': _FloatingActionButtonThemeData_hoverColor$,
        'splashColor': _FloatingActionButtonThemeData_splashColor$,
        'elevation': _FloatingActionButtonThemeData_elevation$,
        'focusElevation': _FloatingActionButtonThemeData_focusElevation$,
        'hoverElevation': _FloatingActionButtonThemeData_hoverElevation$,
        'disabledElevation': _FloatingActionButtonThemeData_disabledElevation$,
        'highlightElevation':
            _FloatingActionButtonThemeData_highlightElevation$,
        'shape': _FloatingActionButtonThemeData_shape$,
        'enableFeedback': _FloatingActionButtonThemeData_enableFeedback$,
        'iconSize': _FloatingActionButtonThemeData_iconSize$,
        'sizeConstraints': _FloatingActionButtonThemeData_sizeConstraints$,
        'smallSizeConstraints':
            _FloatingActionButtonThemeData_smallSizeConstraints$,
        'largeSizeConstraints':
            _FloatingActionButtonThemeData_largeSizeConstraints$,
        'extendedSizeConstraints':
            _FloatingActionButtonThemeData_extendedSizeConstraints$,
        'extendedIconLabelSpacing':
            _FloatingActionButtonThemeData_extendedIconLabelSpacing$,
        'extendedPadding': _FloatingActionButtonThemeData_extendedPadding$,
        'extendedTextStyle': _FloatingActionButtonThemeData_extendedTextStyle$,
        'mouseCursor': _FloatingActionButtonThemeData_mouseCursor$,
        'hashCode': _FloatingActionButtonThemeData_hashCode$,
        'copyWith': _FloatingActionButtonThemeData_copyWith$,
        'debugFillProperties':
            _FloatingActionButtonThemeData_debugFillProperties$,
      },
      {},
    )
  },
);
Color? _FloatingActionButtonThemeData_foregroundColor$(
    FloatingActionButtonThemeData target) {
  return target.foregroundColor;
}

Color? _FloatingActionButtonThemeData_backgroundColor$(
    FloatingActionButtonThemeData target) {
  return target.backgroundColor;
}

Color? _FloatingActionButtonThemeData_focusColor$(
    FloatingActionButtonThemeData target) {
  return target.focusColor;
}

Color? _FloatingActionButtonThemeData_hoverColor$(
    FloatingActionButtonThemeData target) {
  return target.hoverColor;
}

Color? _FloatingActionButtonThemeData_splashColor$(
    FloatingActionButtonThemeData target) {
  return target.splashColor;
}

double? _FloatingActionButtonThemeData_elevation$(
    FloatingActionButtonThemeData target) {
  return target.elevation;
}

double? _FloatingActionButtonThemeData_focusElevation$(
    FloatingActionButtonThemeData target) {
  return target.focusElevation;
}

double? _FloatingActionButtonThemeData_hoverElevation$(
    FloatingActionButtonThemeData target) {
  return target.hoverElevation;
}

double? _FloatingActionButtonThemeData_disabledElevation$(
    FloatingActionButtonThemeData target) {
  return target.disabledElevation;
}

double? _FloatingActionButtonThemeData_highlightElevation$(
    FloatingActionButtonThemeData target) {
  return target.highlightElevation;
}

ShapeBorder? _FloatingActionButtonThemeData_shape$(
    FloatingActionButtonThemeData target) {
  return target.shape;
}

bool? _FloatingActionButtonThemeData_enableFeedback$(
    FloatingActionButtonThemeData target) {
  return target.enableFeedback;
}

double? _FloatingActionButtonThemeData_iconSize$(
    FloatingActionButtonThemeData target) {
  return target.iconSize;
}

BoxConstraints? _FloatingActionButtonThemeData_sizeConstraints$(
    FloatingActionButtonThemeData target) {
  return target.sizeConstraints;
}

BoxConstraints? _FloatingActionButtonThemeData_smallSizeConstraints$(
    FloatingActionButtonThemeData target) {
  return target.smallSizeConstraints;
}

BoxConstraints? _FloatingActionButtonThemeData_largeSizeConstraints$(
    FloatingActionButtonThemeData target) {
  return target.largeSizeConstraints;
}

BoxConstraints? _FloatingActionButtonThemeData_extendedSizeConstraints$(
    FloatingActionButtonThemeData target) {
  return target.extendedSizeConstraints;
}

double? _FloatingActionButtonThemeData_extendedIconLabelSpacing$(
    FloatingActionButtonThemeData target) {
  return target.extendedIconLabelSpacing;
}

EdgeInsetsGeometry? _FloatingActionButtonThemeData_extendedPadding$(
    FloatingActionButtonThemeData target) {
  return target.extendedPadding;
}

TextStyle? _FloatingActionButtonThemeData_extendedTextStyle$(
    FloatingActionButtonThemeData target) {
  return target.extendedTextStyle;
}

MaterialStateProperty<MouseCursor?>?
    _FloatingActionButtonThemeData_mouseCursor$(
        FloatingActionButtonThemeData target) {
  return target.mouseCursor;
}

int _FloatingActionButtonThemeData_hashCode$(
    FloatingActionButtonThemeData target) {
  return target.hashCode;
}

Function _FloatingActionButtonThemeData_copyWith$(
  m.Scope scope,
  FloatingActionButtonThemeData target,
) =>
    target.copyWith;
Function _FloatingActionButtonThemeData_lerp$(m.Scope scope) =>
    FloatingActionButtonThemeData.lerp;
Function _FloatingActionButtonThemeData_debugFillProperties$(
  m.Scope scope,
  FloatingActionButtonThemeData target,
) =>
    target.debugFillProperties;
