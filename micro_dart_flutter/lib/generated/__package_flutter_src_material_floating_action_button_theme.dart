// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/floating_action_button_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/material/material_state.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/floating_action_button_theme.dart',
  {
    'FloatingActionButtonThemeData.': _FloatingActionButtonThemeData__$,
    'FloatingActionButtonThemeData.lerp': _FloatingActionButtonThemeData_lerp$,
  },
  {},
  {
    'FloatingActionButtonThemeData': m.ClassMirror(
      'FloatingActionButtonThemeData',
      {
        '#as': FloatingActionButtonThemeData_as$,
        '#is': FloatingActionButtonThemeData_is$,
        'foregroundColor': _FloatingActionButtonThemeData_foregroundColor$,
        'backgroundColor': _FloatingActionButtonThemeData_backgroundColor$,
        'focusColor': _FloatingActionButtonThemeData_focusColor$,
        'hoverColor': _FloatingActionButtonThemeData_hoverColor$,
        'splashColor': _FloatingActionButtonThemeData_splashColor$,
        'elevation': _FloatingActionButtonThemeData_elevation$,
        'focusElevation': _FloatingActionButtonThemeData_focusElevation$,
        'hoverElevation': _FloatingActionButtonThemeData_hoverElevation$,
        'disabledElevation': _FloatingActionButtonThemeData_disabledElevation$,
        'highlightElevation':
            _FloatingActionButtonThemeData_highlightElevation$,
        'shape': _FloatingActionButtonThemeData_shape$,
        'enableFeedback': _FloatingActionButtonThemeData_enableFeedback$,
        'iconSize': _FloatingActionButtonThemeData_iconSize$,
        'sizeConstraints': _FloatingActionButtonThemeData_sizeConstraints$,
        'smallSizeConstraints':
            _FloatingActionButtonThemeData_smallSizeConstraints$,
        'largeSizeConstraints':
            _FloatingActionButtonThemeData_largeSizeConstraints$,
        'extendedSizeConstraints':
            _FloatingActionButtonThemeData_extendedSizeConstraints$,
        'extendedIconLabelSpacing':
            _FloatingActionButtonThemeData_extendedIconLabelSpacing$,
        'extendedPadding': _FloatingActionButtonThemeData_extendedPadding$,
        'extendedTextStyle': _FloatingActionButtonThemeData_extendedTextStyle$,
        'mouseCursor': _FloatingActionButtonThemeData_mouseCursor$,
        'hashCode': _FloatingActionButtonThemeData_hashCode$,
        'copyWith': _FloatingActionButtonThemeData_copyWith$,
        '==': _FloatingActionButtonThemeData_eq$$,
        'debugFillProperties':
            _FloatingActionButtonThemeData_debugFillProperties$,
      },
      {},
    )
  },
);
Function FloatingActionButtonThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FloatingActionButtonThemeData;
Function FloatingActionButtonThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FloatingActionButtonThemeData;
Function _FloatingActionButtonThemeData_foregroundColor$(
  m.Scope scope$,
  FloatingActionButtonThemeData target$,
) =>
    () {
      return target$.foregroundColor;
    };
Function _FloatingActionButtonThemeData_backgroundColor$(
  m.Scope scope$,
  FloatingActionButtonThemeData target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _FloatingActionButtonThemeData_focusColor$(
  m.Scope scope$,
  FloatingActionButtonThemeData target$,
) =>
    () {
      return target$.focusColor;
    };
Function _FloatingActionButtonThemeData_hoverColor$(
  m.Scope scope$,
  FloatingActionButtonThemeData target$,
) =>
    () {
      return target$.hoverColor;
    };
Function _FloatingActionButtonThemeData_splashColor$(
  m.Scope scope$,
  FloatingActionButtonThemeData target$,
) =>
    () {
      return target$.splashColor;
    };
Function _FloatingActionButtonThemeData_elevation$(
  m.Scope scope$,
  FloatingActionButtonThemeData target$,
) =>
    () {
      return target$.elevation;
    };
Function _FloatingActionButtonThemeData_focusElevation$(
  m.Scope scope$,
  FloatingActionButtonThemeData target$,
) =>
    () {
      return target$.focusElevation;
    };
Function _FloatingActionButtonThemeData_hoverElevation$(
  m.Scope scope$,
  FloatingActionButtonThemeData target$,
) =>
    () {
      return target$.hoverElevation;
    };
Function _FloatingActionButtonThemeData_disabledElevation$(
  m.Scope scope$,
  FloatingActionButtonThemeData target$,
) =>
    () {
      return target$.disabledElevation;
    };
Function _FloatingActionButtonThemeData_highlightElevation$(
  m.Scope scope$,
  FloatingActionButtonThemeData target$,
) =>
    () {
      return target$.highlightElevation;
    };
Function _FloatingActionButtonThemeData_shape$(
  m.Scope scope$,
  FloatingActionButtonThemeData target$,
) =>
    () {
      return target$.shape;
    };
Function _FloatingActionButtonThemeData_enableFeedback$(
  m.Scope scope$,
  FloatingActionButtonThemeData target$,
) =>
    () {
      return target$.enableFeedback;
    };
Function _FloatingActionButtonThemeData_iconSize$(
  m.Scope scope$,
  FloatingActionButtonThemeData target$,
) =>
    () {
      return target$.iconSize;
    };
Function _FloatingActionButtonThemeData_sizeConstraints$(
  m.Scope scope$,
  FloatingActionButtonThemeData target$,
) =>
    () {
      return target$.sizeConstraints;
    };
Function _FloatingActionButtonThemeData_smallSizeConstraints$(
  m.Scope scope$,
  FloatingActionButtonThemeData target$,
) =>
    () {
      return target$.smallSizeConstraints;
    };
Function _FloatingActionButtonThemeData_largeSizeConstraints$(
  m.Scope scope$,
  FloatingActionButtonThemeData target$,
) =>
    () {
      return target$.largeSizeConstraints;
    };
Function _FloatingActionButtonThemeData_extendedSizeConstraints$(
  m.Scope scope$,
  FloatingActionButtonThemeData target$,
) =>
    () {
      return target$.extendedSizeConstraints;
    };
Function _FloatingActionButtonThemeData_extendedIconLabelSpacing$(
  m.Scope scope$,
  FloatingActionButtonThemeData target$,
) =>
    () {
      return target$.extendedIconLabelSpacing;
    };
Function _FloatingActionButtonThemeData_extendedPadding$(
  m.Scope scope$,
  FloatingActionButtonThemeData target$,
) =>
    () {
      return target$.extendedPadding;
    };
Function _FloatingActionButtonThemeData_extendedTextStyle$(
  m.Scope scope$,
  FloatingActionButtonThemeData target$,
) =>
    () {
      return target$.extendedTextStyle;
    };
Function _FloatingActionButtonThemeData_mouseCursor$(
  m.Scope scope$,
  FloatingActionButtonThemeData target$,
) =>
    () {
      return target$.mouseCursor;
    };
Function _FloatingActionButtonThemeData_hashCode$(
  m.Scope scope$,
  FloatingActionButtonThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _FloatingActionButtonThemeData__$(m.Scope scope$) => ({
      Color? foregroundColor,
      Color? backgroundColor,
      Color? focusColor,
      Color? hoverColor,
      Color? splashColor,
      double? elevation,
      double? focusElevation,
      double? hoverElevation,
      double? disabledElevation,
      double? highlightElevation,
      ShapeBorder? shape,
      bool? enableFeedback,
      double? iconSize,
      BoxConstraints? sizeConstraints,
      BoxConstraints? smallSizeConstraints,
      BoxConstraints? largeSizeConstraints,
      BoxConstraints? extendedSizeConstraints,
      double? extendedIconLabelSpacing,
      EdgeInsetsGeometry? extendedPadding,
      TextStyle? extendedTextStyle,
      MaterialStateProperty<MouseCursor>? mouseCursor,
    }) {
      return FloatingActionButtonThemeData(
        backgroundColor: backgroundColor,
        disabledElevation: disabledElevation,
        elevation: elevation,
        enableFeedback: enableFeedback,
        extendedIconLabelSpacing: extendedIconLabelSpacing,
        extendedPadding: extendedPadding,
        extendedSizeConstraints: extendedSizeConstraints,
        extendedTextStyle: extendedTextStyle,
        focusColor: focusColor,
        focusElevation: focusElevation,
        foregroundColor: foregroundColor,
        highlightElevation: highlightElevation,
        hoverColor: hoverColor,
        hoverElevation: hoverElevation,
        iconSize: iconSize,
        largeSizeConstraints: largeSizeConstraints,
        mouseCursor: mouseCursor,
        shape: shape,
        sizeConstraints: sizeConstraints,
        smallSizeConstraints: smallSizeConstraints,
        splashColor: splashColor,
      );
    };
Function _FloatingActionButtonThemeData_copyWith$(
  m.Scope scope$,
  FloatingActionButtonThemeData target$,
) =>
    target$.copyWith;
Function _FloatingActionButtonThemeData_lerp$(m.Scope scope$) =>
    FloatingActionButtonThemeData.lerp;
Function _FloatingActionButtonThemeData_eq$$(
  m.Scope scope$,
  FloatingActionButtonThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _FloatingActionButtonThemeData_debugFillProperties$(
  m.Scope scope$,
  FloatingActionButtonThemeData target$,
) =>
    target$.debugFillProperties;
