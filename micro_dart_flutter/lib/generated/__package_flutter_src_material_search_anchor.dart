// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/search_anchor.dart';
import 'dart:math';
import 'dart:ui';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/divider.dart';
import 'package:flutter/src/material/divider_theme.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/input_border.dart';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/search_bar_theme.dart';
import 'package:flutter/src/material/search_view_theme.dart';
import 'package:flutter/src/material/text_field.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/search_anchor.dart',
  {
    'SearchAnchor.': _SearchAnchor__$,
    'SearchAnchor.bar': _SearchAnchor_bar_$,
    'SearchController.': _SearchController__$,
    'SearchBar.': _SearchBar__$,
  },
  {},
  {
    'SearchAnchor': m.ClassMirror(
      'SearchAnchor',
      {
        '#as': SearchAnchor_as$,
        '#is': SearchAnchor_is$,
        'isFullScreen': _SearchAnchor_isFullScreen$,
        'searchController': _SearchAnchor_searchController$,
        'viewBuilder': _SearchAnchor_viewBuilder$,
        'viewLeading': _SearchAnchor_viewLeading$,
        'viewTrailing': _SearchAnchor_viewTrailing$,
        'viewHintText': _SearchAnchor_viewHintText$,
        'viewBackgroundColor': _SearchAnchor_viewBackgroundColor$,
        'viewElevation': _SearchAnchor_viewElevation$,
        'viewSurfaceTintColor': _SearchAnchor_viewSurfaceTintColor$,
        'viewSide': _SearchAnchor_viewSide$,
        'viewShape': _SearchAnchor_viewShape$,
        'headerTextStyle': _SearchAnchor_headerTextStyle$,
        'headerHintStyle': _SearchAnchor_headerHintStyle$,
        'dividerColor': _SearchAnchor_dividerColor$,
        'viewConstraints': _SearchAnchor_viewConstraints$,
        'builder': _SearchAnchor_builder$,
        'suggestionsBuilder': _SearchAnchor_suggestionsBuilder$,
        'createState': _SearchAnchor_createState$,
      },
      {},
    ),
    'SearchController': m.ClassMirror(
      'SearchController',
      {
        '#as': SearchController_as$,
        '#is': SearchController_is$,
        'isOpen': _SearchController_isOpen$,
        'openView': _SearchController_openView$,
        'closeView': _SearchController_closeView$,
      },
      {},
    ),
    'SearchBar': m.ClassMirror(
      'SearchBar',
      {
        '#as': SearchBar_as$,
        '#is': SearchBar_is$,
        'controller': _SearchBar_controller$,
        'focusNode': _SearchBar_focusNode$,
        'hintText': _SearchBar_hintText$,
        'leading': _SearchBar_leading$,
        'trailing': _SearchBar_trailing$,
        'onTap': _SearchBar_onTap$,
        'onChanged': _SearchBar_onChanged$,
        'constraints': _SearchBar_constraints$,
        'elevation': _SearchBar_elevation$,
        'backgroundColor': _SearchBar_backgroundColor$,
        'shadowColor': _SearchBar_shadowColor$,
        'surfaceTintColor': _SearchBar_surfaceTintColor$,
        'overlayColor': _SearchBar_overlayColor$,
        'side': _SearchBar_side$,
        'shape': _SearchBar_shape$,
        'padding': _SearchBar_padding$,
        'textStyle': _SearchBar_textStyle$,
        'hintStyle': _SearchBar_hintStyle$,
        'createState': _SearchBar_createState$,
      },
      {},
    ),
  },
);
Function SearchAnchor_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SearchAnchor;
Function SearchAnchor_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SearchAnchor;
Function _SearchAnchor_isFullScreen$(
  m.Scope scope$,
  SearchAnchor target$,
) =>
    () {
      return target$.isFullScreen;
    };
Function _SearchAnchor_searchController$(
  m.Scope scope$,
  SearchAnchor target$,
) =>
    () {
      return target$.searchController;
    };
Function _SearchAnchor_viewBuilder$(
  m.Scope scope$,
  SearchAnchor target$,
) =>
    () {
      return target$.viewBuilder;
    };
Function _SearchAnchor_viewLeading$(
  m.Scope scope$,
  SearchAnchor target$,
) =>
    () {
      return target$.viewLeading;
    };
Function _SearchAnchor_viewTrailing$(
  m.Scope scope$,
  SearchAnchor target$,
) =>
    () {
      return target$.viewTrailing;
    };
Function _SearchAnchor_viewHintText$(
  m.Scope scope$,
  SearchAnchor target$,
) =>
    () {
      return target$.viewHintText;
    };
Function _SearchAnchor_viewBackgroundColor$(
  m.Scope scope$,
  SearchAnchor target$,
) =>
    () {
      return target$.viewBackgroundColor;
    };
Function _SearchAnchor_viewElevation$(
  m.Scope scope$,
  SearchAnchor target$,
) =>
    () {
      return target$.viewElevation;
    };
Function _SearchAnchor_viewSurfaceTintColor$(
  m.Scope scope$,
  SearchAnchor target$,
) =>
    () {
      return target$.viewSurfaceTintColor;
    };
Function _SearchAnchor_viewSide$(
  m.Scope scope$,
  SearchAnchor target$,
) =>
    () {
      return target$.viewSide;
    };
Function _SearchAnchor_viewShape$(
  m.Scope scope$,
  SearchAnchor target$,
) =>
    () {
      return target$.viewShape;
    };
Function _SearchAnchor_headerTextStyle$(
  m.Scope scope$,
  SearchAnchor target$,
) =>
    () {
      return target$.headerTextStyle;
    };
Function _SearchAnchor_headerHintStyle$(
  m.Scope scope$,
  SearchAnchor target$,
) =>
    () {
      return target$.headerHintStyle;
    };
Function _SearchAnchor_dividerColor$(
  m.Scope scope$,
  SearchAnchor target$,
) =>
    () {
      return target$.dividerColor;
    };
Function _SearchAnchor_viewConstraints$(
  m.Scope scope$,
  SearchAnchor target$,
) =>
    () {
      return target$.viewConstraints;
    };
Function _SearchAnchor_builder$(
  m.Scope scope$,
  SearchAnchor target$,
) =>
    () {
      return target$.builder;
    };
Function _SearchAnchor_suggestionsBuilder$(
  m.Scope scope$,
  SearchAnchor target$,
) =>
    () {
      return target$.suggestionsBuilder;
    };
Function _SearchAnchor__$(m.Scope scope$) => ({
      Key? key,
      bool? isFullScreen,
      SearchController? searchController,
      m.FunctionPointer? viewBuilder,
      Widget? viewLeading,
      Iterable? viewTrailing,
      String? viewHintText,
      Color? viewBackgroundColor,
      double? viewElevation,
      Color? viewSurfaceTintColor,
      BorderSide? viewSide,
      OutlinedBorder? viewShape,
      TextStyle? headerTextStyle,
      TextStyle? headerHintStyle,
      Color? dividerColor,
      BoxConstraints? viewConstraints,
      required m.FunctionPointer builder,
      required m.FunctionPointer suggestionsBuilder,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        SearchController builder_controller$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [
              builder_context$,
              builder_controller$,
            ],
            {},
          );
      Iterable<Widget> suggestionsBuilderProxy(
        BuildContext suggestionsBuilder_context$,
        SearchController suggestionsBuilder_controller$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            suggestionsBuilder,
            [
              suggestionsBuilder_context$,
              suggestionsBuilder_controller$,
            ],
            {},
          );
      Widget viewBuilderProxy(Iterable viewBuilder_suggestions$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            viewBuilder!,
            [viewBuilder_suggestions$],
            {},
          );
      return SearchAnchor(
        builder: builderProxy,
        dividerColor: dividerColor,
        headerHintStyle: headerHintStyle,
        headerTextStyle: headerTextStyle,
        isFullScreen: isFullScreen,
        key: key,
        searchController: searchController,
        suggestionsBuilder: suggestionsBuilderProxy,
        viewBackgroundColor: viewBackgroundColor,
        viewBuilder: viewBuilder == null ? null : viewBuilderProxy,
        viewConstraints: viewConstraints,
        viewElevation: viewElevation,
        viewHintText: viewHintText,
        viewLeading: viewLeading,
        viewShape: viewShape,
        viewSide: viewSide,
        viewSurfaceTintColor: viewSurfaceTintColor,
        viewTrailing:
            viewTrailing == null ? null : Iterable.castFrom(viewTrailing),
      );
    };
Function _SearchAnchor_bar_$(m.Scope scope$) => ({
      Widget? barLeading,
      Iterable? barTrailing,
      String? barHintText,
      m.FunctionPointer? onTap,
      MaterialStateProperty<double>? barElevation,
      MaterialStateProperty<Color>? barBackgroundColor,
      MaterialStateProperty<Color>? barOverlayColor,
      MaterialStateProperty<BorderSide>? barSide,
      MaterialStateProperty<OutlinedBorder>? barShape,
      MaterialStateProperty<EdgeInsetsGeometry>? barPadding,
      MaterialStateProperty<TextStyle>? barTextStyle,
      MaterialStateProperty<TextStyle>? barHintStyle,
      Widget? viewLeading,
      Iterable? viewTrailing,
      String? viewHintText,
      Color? viewBackgroundColor,
      double? viewElevation,
      BorderSide? viewSide,
      OutlinedBorder? viewShape,
      TextStyle? viewHeaderTextStyle,
      TextStyle? viewHeaderHintStyle,
      Color? dividerColor,
      BoxConstraints? constraints,
      BoxConstraints? viewConstraints,
      bool? isFullScreen,
      required SearchController searchController,
      required m.FunctionPointer suggestionsBuilder,
    }) {
      void onTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTap!,
            [],
            {},
          );
      Iterable<Widget> suggestionsBuilderProxy(
        BuildContext suggestionsBuilder_context$,
        SearchController suggestionsBuilder_controller$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            suggestionsBuilder,
            [
              suggestionsBuilder_context$,
              suggestionsBuilder_controller$,
            ],
            {},
          );
      return SearchAnchor.bar(
        barBackgroundColor: barBackgroundColor,
        barElevation: barElevation,
        barHintStyle: barHintStyle,
        barHintText: barHintText,
        barLeading: barLeading,
        barOverlayColor: barOverlayColor,
        barPadding: barPadding,
        barShape: barShape,
        barSide: barSide,
        barTextStyle: barTextStyle,
        barTrailing:
            barTrailing == null ? null : Iterable.castFrom(barTrailing),
        constraints: constraints,
        dividerColor: dividerColor,
        isFullScreen: isFullScreen,
        onTap: onTap == null ? null : onTapProxy,
        searchController: searchController,
        suggestionsBuilder: suggestionsBuilderProxy,
        viewBackgroundColor: viewBackgroundColor,
        viewConstraints: viewConstraints,
        viewElevation: viewElevation,
        viewHeaderHintStyle: viewHeaderHintStyle,
        viewHeaderTextStyle: viewHeaderTextStyle,
        viewHintText: viewHintText,
        viewLeading: viewLeading,
        viewShape: viewShape,
        viewSide: viewSide,
        viewTrailing:
            viewTrailing == null ? null : Iterable.castFrom(viewTrailing),
      );
    };
Function _SearchAnchor_createState$(
  m.Scope scope$,
  SearchAnchor target$,
) =>
    target$.createState;
Function SearchController_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SearchController;
Function SearchController_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SearchController;
Function _SearchController_isOpen$(
  m.Scope scope$,
  SearchController target$,
) =>
    () {
      return target$.isOpen;
    };
Function _SearchController__$(m.Scope scope$) => () {
      return SearchController();
    };
Function _SearchController_openView$(
  m.Scope scope$,
  SearchController target$,
) =>
    target$.openView;
Function _SearchController_closeView$(
  m.Scope scope$,
  SearchController target$,
) =>
    target$.closeView;
Function SearchBar_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SearchBar;
Function SearchBar_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SearchBar;
Function _SearchBar_controller$(
  m.Scope scope$,
  SearchBar target$,
) =>
    () {
      return target$.controller;
    };
Function _SearchBar_focusNode$(
  m.Scope scope$,
  SearchBar target$,
) =>
    () {
      return target$.focusNode;
    };
Function _SearchBar_hintText$(
  m.Scope scope$,
  SearchBar target$,
) =>
    () {
      return target$.hintText;
    };
Function _SearchBar_leading$(
  m.Scope scope$,
  SearchBar target$,
) =>
    () {
      return target$.leading;
    };
Function _SearchBar_trailing$(
  m.Scope scope$,
  SearchBar target$,
) =>
    () {
      return target$.trailing;
    };
Function _SearchBar_onTap$(
  m.Scope scope$,
  SearchBar target$,
) =>
    () {
      return target$.onTap;
    };
Function _SearchBar_onChanged$(
  m.Scope scope$,
  SearchBar target$,
) =>
    () {
      return target$.onChanged;
    };
Function _SearchBar_constraints$(
  m.Scope scope$,
  SearchBar target$,
) =>
    () {
      return target$.constraints;
    };
Function _SearchBar_elevation$(
  m.Scope scope$,
  SearchBar target$,
) =>
    () {
      return target$.elevation;
    };
Function _SearchBar_backgroundColor$(
  m.Scope scope$,
  SearchBar target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _SearchBar_shadowColor$(
  m.Scope scope$,
  SearchBar target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _SearchBar_surfaceTintColor$(
  m.Scope scope$,
  SearchBar target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _SearchBar_overlayColor$(
  m.Scope scope$,
  SearchBar target$,
) =>
    () {
      return target$.overlayColor;
    };
Function _SearchBar_side$(
  m.Scope scope$,
  SearchBar target$,
) =>
    () {
      return target$.side;
    };
Function _SearchBar_shape$(
  m.Scope scope$,
  SearchBar target$,
) =>
    () {
      return target$.shape;
    };
Function _SearchBar_padding$(
  m.Scope scope$,
  SearchBar target$,
) =>
    () {
      return target$.padding;
    };
Function _SearchBar_textStyle$(
  m.Scope scope$,
  SearchBar target$,
) =>
    () {
      return target$.textStyle;
    };
Function _SearchBar_hintStyle$(
  m.Scope scope$,
  SearchBar target$,
) =>
    () {
      return target$.hintStyle;
    };
Function _SearchBar__$(m.Scope scope$) => ({
      Key? key,
      TextEditingController? controller,
      FocusNode? focusNode,
      String? hintText,
      Widget? leading,
      Iterable? trailing,
      m.FunctionPointer? onTap,
      m.FunctionPointer? onChanged,
      BoxConstraints? constraints,
      MaterialStateProperty<double>? elevation,
      MaterialStateProperty<Color>? backgroundColor,
      MaterialStateProperty<Color>? shadowColor,
      MaterialStateProperty<Color>? surfaceTintColor,
      MaterialStateProperty<Color>? overlayColor,
      MaterialStateProperty<BorderSide>? side,
      MaterialStateProperty<OutlinedBorder>? shape,
      MaterialStateProperty<EdgeInsetsGeometry>? padding,
      MaterialStateProperty<TextStyle>? textStyle,
      MaterialStateProperty<TextStyle>? hintStyle,
    }) {
      void onChangedProxy(String onChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChanged!,
            [onChanged_value$],
            {},
          );
      void onTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTap!,
            [],
            {},
          );
      return SearchBar(
        backgroundColor: backgroundColor,
        constraints: constraints,
        controller: controller,
        elevation: elevation,
        focusNode: focusNode,
        hintStyle: hintStyle,
        hintText: hintText,
        key: key,
        leading: leading,
        onChanged: onChanged == null ? null : onChangedProxy,
        onTap: onTap == null ? null : onTapProxy,
        overlayColor: overlayColor,
        padding: padding,
        shadowColor: shadowColor,
        shape: shape,
        side: side,
        surfaceTintColor: surfaceTintColor,
        textStyle: textStyle,
        trailing: trailing == null ? null : Iterable.castFrom(trailing),
      );
    };
Function _SearchBar_createState$(
  m.Scope scope$,
  SearchBar target$,
) =>
    target$.createState;
