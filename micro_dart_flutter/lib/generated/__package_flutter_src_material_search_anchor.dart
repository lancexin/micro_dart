// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/search_anchor.dart';
import 'dart:math';
import 'dart:ui';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/divider.dart';
import 'package:flutter/src/material/divider_theme.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/input_border.dart';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/search_bar_theme.dart';
import 'package:flutter/src/material/search_view_theme.dart';
import 'package:flutter/src/material/text_field.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/search_anchor.dart',
  {},
  {},
  {
    'SearchAnchor': m.ClassMirror(
      'SearchAnchor',
      {
        'isFullScreen': _SearchAnchor_isFullScreen$,
        'searchController': _SearchAnchor_searchController$,
        'viewBuilder': _SearchAnchor_viewBuilder$,
        'viewLeading': _SearchAnchor_viewLeading$,
        'viewTrailing': _SearchAnchor_viewTrailing$,
        'viewHintText': _SearchAnchor_viewHintText$,
        'viewBackgroundColor': _SearchAnchor_viewBackgroundColor$,
        'viewElevation': _SearchAnchor_viewElevation$,
        'viewSurfaceTintColor': _SearchAnchor_viewSurfaceTintColor$,
        'viewSide': _SearchAnchor_viewSide$,
        'viewShape': _SearchAnchor_viewShape$,
        'headerTextStyle': _SearchAnchor_headerTextStyle$,
        'headerHintStyle': _SearchAnchor_headerHintStyle$,
        'dividerColor': _SearchAnchor_dividerColor$,
        'viewConstraints': _SearchAnchor_viewConstraints$,
        'builder': _SearchAnchor_builder$,
        'suggestionsBuilder': _SearchAnchor_suggestionsBuilder$,
        'createState': _SearchAnchor_createState$,
      },
      {},
    ),
    'SearchController': m.ClassMirror(
      'SearchController',
      {
        'isOpen': _SearchController_isOpen$,
        'openView': _SearchController_openView$,
        'closeView': _SearchController_closeView$,
      },
      {},
    ),
    'SearchBar': m.ClassMirror(
      'SearchBar',
      {
        'controller': _SearchBar_controller$,
        'focusNode': _SearchBar_focusNode$,
        'hintText': _SearchBar_hintText$,
        'leading': _SearchBar_leading$,
        'trailing': _SearchBar_trailing$,
        'onTap': _SearchBar_onTap$,
        'onChanged': _SearchBar_onChanged$,
        'constraints': _SearchBar_constraints$,
        'elevation': _SearchBar_elevation$,
        'backgroundColor': _SearchBar_backgroundColor$,
        'shadowColor': _SearchBar_shadowColor$,
        'surfaceTintColor': _SearchBar_surfaceTintColor$,
        'overlayColor': _SearchBar_overlayColor$,
        'side': _SearchBar_side$,
        'shape': _SearchBar_shape$,
        'padding': _SearchBar_padding$,
        'textStyle': _SearchBar_textStyle$,
        'hintStyle': _SearchBar_hintStyle$,
        'createState': _SearchBar_createState$,
      },
      {},
    ),
  },
);
bool? _SearchAnchor_isFullScreen$(SearchAnchor target) {
  return target.isFullScreen;
}

SearchController? _SearchAnchor_searchController$(SearchAnchor target) {
  return target.searchController;
}

Widget Function(Iterable<Widget>)? _SearchAnchor_viewBuilder$(
    SearchAnchor target) {
  return target.viewBuilder;
}

Widget? _SearchAnchor_viewLeading$(SearchAnchor target) {
  return target.viewLeading;
}

Iterable<Widget>? _SearchAnchor_viewTrailing$(SearchAnchor target) {
  return target.viewTrailing;
}

String? _SearchAnchor_viewHintText$(SearchAnchor target) {
  return target.viewHintText;
}

Color? _SearchAnchor_viewBackgroundColor$(SearchAnchor target) {
  return target.viewBackgroundColor;
}

double? _SearchAnchor_viewElevation$(SearchAnchor target) {
  return target.viewElevation;
}

Color? _SearchAnchor_viewSurfaceTintColor$(SearchAnchor target) {
  return target.viewSurfaceTintColor;
}

BorderSide? _SearchAnchor_viewSide$(SearchAnchor target) {
  return target.viewSide;
}

OutlinedBorder? _SearchAnchor_viewShape$(SearchAnchor target) {
  return target.viewShape;
}

TextStyle? _SearchAnchor_headerTextStyle$(SearchAnchor target) {
  return target.headerTextStyle;
}

TextStyle? _SearchAnchor_headerHintStyle$(SearchAnchor target) {
  return target.headerHintStyle;
}

Color? _SearchAnchor_dividerColor$(SearchAnchor target) {
  return target.dividerColor;
}

BoxConstraints? _SearchAnchor_viewConstraints$(SearchAnchor target) {
  return target.viewConstraints;
}

Widget Function(BuildContext, SearchController) _SearchAnchor_builder$(
    SearchAnchor target) {
  return target.builder;
}

Iterable<Widget> Function(BuildContext, SearchController)
    _SearchAnchor_suggestionsBuilder$(SearchAnchor target) {
  return target.suggestionsBuilder;
}

Function _SearchAnchor_createState$(
  m.Scope scope,
  SearchAnchor target,
) =>
    target.createState;
bool _SearchController_isOpen$(SearchController target) {
  return target.isOpen;
}

Function _SearchController_openView$(
  m.Scope scope,
  SearchController target,
) =>
    target.openView;
Function _SearchController_closeView$(
  m.Scope scope,
  SearchController target,
) =>
    target.closeView;
TextEditingController? _SearchBar_controller$(SearchBar target) {
  return target.controller;
}

FocusNode? _SearchBar_focusNode$(SearchBar target) {
  return target.focusNode;
}

String? _SearchBar_hintText$(SearchBar target) {
  return target.hintText;
}

Widget? _SearchBar_leading$(SearchBar target) {
  return target.leading;
}

Iterable<Widget>? _SearchBar_trailing$(SearchBar target) {
  return target.trailing;
}

void Function()? _SearchBar_onTap$(SearchBar target) {
  return target.onTap;
}

void Function(String)? _SearchBar_onChanged$(SearchBar target) {
  return target.onChanged;
}

BoxConstraints? _SearchBar_constraints$(SearchBar target) {
  return target.constraints;
}

MaterialStateProperty<double?>? _SearchBar_elevation$(SearchBar target) {
  return target.elevation;
}

MaterialStateProperty<Color?>? _SearchBar_backgroundColor$(SearchBar target) {
  return target.backgroundColor;
}

MaterialStateProperty<Color?>? _SearchBar_shadowColor$(SearchBar target) {
  return target.shadowColor;
}

MaterialStateProperty<Color?>? _SearchBar_surfaceTintColor$(SearchBar target) {
  return target.surfaceTintColor;
}

MaterialStateProperty<Color?>? _SearchBar_overlayColor$(SearchBar target) {
  return target.overlayColor;
}

MaterialStateProperty<BorderSide?>? _SearchBar_side$(SearchBar target) {
  return target.side;
}

MaterialStateProperty<OutlinedBorder?>? _SearchBar_shape$(SearchBar target) {
  return target.shape;
}

MaterialStateProperty<EdgeInsetsGeometry?>? _SearchBar_padding$(
    SearchBar target) {
  return target.padding;
}

MaterialStateProperty<TextStyle?>? _SearchBar_textStyle$(SearchBar target) {
  return target.textStyle;
}

MaterialStateProperty<TextStyle?>? _SearchBar_hintStyle$(SearchBar target) {
  return target.hintStyle;
}

Function _SearchBar_createState$(
  m.Scope scope,
  SearchBar target,
) =>
    target.createState;
