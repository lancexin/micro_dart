// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/table.dart';
import 'dart:collection';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/image.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/table.dart',
  {},
  {},
  {
    'TableRow': m.ClassMirror(
      'TableRow',
      {
        '#as': TableRow_as$,
        '#is': TableRow_is$,
        'key': _TableRow_key$,
        'decoration': _TableRow_decoration$,
        'children': _TableRow_children$,
        'toString': _TableRow_toString$,
      },
      {},
    ),
    'Table': m.ClassMirror(
      'Table',
      {
        '#as': Table_as$,
        '#is': Table_is$,
        'children': _Table_children$,
        'columnWidths': _Table_columnWidths$,
        'defaultColumnWidth': _Table_defaultColumnWidth$,
        'textDirection': _Table_textDirection$,
        'border': _Table_border$,
        'defaultVerticalAlignment': _Table_defaultVerticalAlignment$,
        'textBaseline': _Table_textBaseline$,
        'createElement': _Table_createElement$,
        'createRenderObject': _Table_createRenderObject$,
        'updateRenderObject': _Table_updateRenderObject$,
      },
      {},
    ),
    'TableCell': m.ClassMirror(
      'TableCell',
      {
        '#as': TableCell_as$,
        '#is': TableCell_is$,
        'verticalAlignment': _TableCell_verticalAlignment$,
        'debugTypicalAncestorWidgetClass':
            _TableCell_debugTypicalAncestorWidgetClass$,
        'applyParentData': _TableCell_applyParentData$,
        'debugFillProperties': _TableCell_debugFillProperties$,
      },
      {},
    ),
  },
);
Function TableRow_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as TableRow;
Function TableRow_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is TableRow;
LocalKey? _TableRow_key$(TableRow target) {
  return target.key;
}

Decoration? _TableRow_decoration$(TableRow target) {
  return target.decoration;
}

List<Widget> _TableRow_children$(TableRow target) {
  return target.children;
}

Function _TableRow_toString$(
  m.Scope scope,
  TableRow target,
) =>
    target.toString;
Function Table_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Table;
Function Table_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Table;
List<TableRow> _Table_children$(Table target) {
  return target.children;
}

Map<int, TableColumnWidth>? _Table_columnWidths$(Table target) {
  return target.columnWidths;
}

TableColumnWidth _Table_defaultColumnWidth$(Table target) {
  return target.defaultColumnWidth;
}

TextDirection? _Table_textDirection$(Table target) {
  return target.textDirection;
}

TableBorder? _Table_border$(Table target) {
  return target.border;
}

TableCellVerticalAlignment _Table_defaultVerticalAlignment$(Table target) {
  return target.defaultVerticalAlignment;
}

TextBaseline? _Table_textBaseline$(Table target) {
  return target.textBaseline;
}

Function _Table_createElement$(
  m.Scope scope,
  Table target,
) =>
    target.createElement;
Function _Table_createRenderObject$(
  m.Scope scope,
  Table target,
) =>
    target.createRenderObject;
Function _Table_updateRenderObject$(
  m.Scope scope,
  Table target,
) =>
    target.updateRenderObject;
Function TableCell_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as TableCell;
Function TableCell_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is TableCell;
TableCellVerticalAlignment? _TableCell_verticalAlignment$(TableCell target) {
  return target.verticalAlignment;
}

Type _TableCell_debugTypicalAncestorWidgetClass$(TableCell target) {
  return target.debugTypicalAncestorWidgetClass;
}

Function _TableCell_applyParentData$(
  m.Scope scope,
  TableCell target,
) =>
    target.applyParentData;
Function _TableCell_debugFillProperties$(
  m.Scope scope,
  TableCell target,
) =>
    target.debugFillProperties;
