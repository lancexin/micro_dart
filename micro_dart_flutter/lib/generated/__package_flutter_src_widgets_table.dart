// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/table.dart';
import 'dart:collection';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/image.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/table.dart',
  {
    'TableRow.': _TableRow__$,
    'Table.': _Table__$,
    'TableCell.': _TableCell__$,
  },
  {},
  {
    'TableRow': m.ClassMirror(
      'TableRow',
      {
        '#as': TableRow_as$,
        '#is': TableRow_is$,
        'key': _TableRow_key$,
        'decoration': _TableRow_decoration$,
        'children': _TableRow_children$,
        'toString': _TableRow_toString$,
      },
      {},
    ),
    'Table': m.ClassMirror(
      'Table',
      {
        '#as': Table_as$,
        '#is': Table_is$,
        'children': _Table_children$,
        'columnWidths': _Table_columnWidths$,
        'defaultColumnWidth': _Table_defaultColumnWidth$,
        'textDirection': _Table_textDirection$,
        'border': _Table_border$,
        'defaultVerticalAlignment': _Table_defaultVerticalAlignment$,
        'textBaseline': _Table_textBaseline$,
        'createElement': _Table_createElement$,
        'createRenderObject': _Table_createRenderObject$,
        'updateRenderObject': _Table_updateRenderObject$,
      },
      {},
    ),
    'TableCell': m.ClassMirror(
      'TableCell',
      {
        '#as': TableCell_as$,
        '#is': TableCell_is$,
        'verticalAlignment': _TableCell_verticalAlignment$,
        'debugTypicalAncestorWidgetClass':
            _TableCell_debugTypicalAncestorWidgetClass$,
        'applyParentData': _TableCell_applyParentData$,
        'debugFillProperties': _TableCell_debugFillProperties$,
      },
      {},
    ),
  },
);
Function TableRow_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TableRow;
Function TableRow_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TableRow;
Function _TableRow_key$(
  m.Scope scope$,
  TableRow target$,
) =>
    () {
      return target$.key;
    };
Function _TableRow_decoration$(
  m.Scope scope$,
  TableRow target$,
) =>
    () {
      return target$.decoration;
    };
Function _TableRow_children$(
  m.Scope scope$,
  TableRow target$,
) =>
    () {
      return target$.children;
    };
Function _TableRow__$(m.Scope scope$) => ({
      LocalKey? key,
      Decoration? decoration,
      List? children,
    }) {
      return TableRow(
        children: children == null ? const <Widget>[] : List.from(children),
        decoration: decoration,
        key: key,
      );
    };
Function _TableRow_toString$(
  m.Scope scope$,
  TableRow target$,
) =>
    target$.toString;
Function Table_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Table;
Function Table_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Table;
Function _Table_children$(
  m.Scope scope$,
  Table target$,
) =>
    () {
      return target$.children;
    };
Function _Table_columnWidths$(
  m.Scope scope$,
  Table target$,
) =>
    () {
      return target$.columnWidths;
    };
Function _Table_defaultColumnWidth$(
  m.Scope scope$,
  Table target$,
) =>
    () {
      return target$.defaultColumnWidth;
    };
Function _Table_textDirection$(
  m.Scope scope$,
  Table target$,
) =>
    () {
      return target$.textDirection;
    };
Function _Table_border$(
  m.Scope scope$,
  Table target$,
) =>
    () {
      return target$.border;
    };
Function _Table_defaultVerticalAlignment$(
  m.Scope scope$,
  Table target$,
) =>
    () {
      return target$.defaultVerticalAlignment;
    };
Function _Table_textBaseline$(
  m.Scope scope$,
  Table target$,
) =>
    () {
      return target$.textBaseline;
    };
Function _Table__$(m.Scope scope$) => ({
      Key? key,
      List? children,
      Map? columnWidths,
      TableColumnWidth? defaultColumnWidth,
      TextDirection? textDirection,
      TableBorder? border,
      TableCellVerticalAlignment? defaultVerticalAlignment,
      TextBaseline? textBaseline,
    }) {
      return Table(
        border: border,
        children: children == null ? const <TableRow>[] : List.from(children),
        columnWidths: columnWidths == null ? null : Map.from(columnWidths),
        defaultColumnWidth: defaultColumnWidth ?? const FlexColumnWidth(),
        defaultVerticalAlignment:
            defaultVerticalAlignment ?? TableCellVerticalAlignment.top,
        key: key,
        textBaseline: textBaseline,
        textDirection: textDirection,
      );
    };
Function _Table_createElement$(
  m.Scope scope$,
  Table target$,
) =>
    target$.createElement;
Function _Table_createRenderObject$(
  m.Scope scope$,
  Table target$,
) =>
    target$.createRenderObject;
Function _Table_updateRenderObject$(
  m.Scope scope$,
  Table target$,
) =>
    target$.updateRenderObject;
Function TableCell_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TableCell;
Function TableCell_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TableCell;
Function _TableCell_verticalAlignment$(
  m.Scope scope$,
  TableCell target$,
) =>
    () {
      return target$.verticalAlignment;
    };
Function _TableCell_debugTypicalAncestorWidgetClass$(
  m.Scope scope$,
  TableCell target$,
) =>
    () {
      return target$.debugTypicalAncestorWidgetClass;
    };
Function _TableCell__$(m.Scope scope$) => ({
      Key? key,
      TableCellVerticalAlignment? verticalAlignment,
      required Widget child,
    }) {
      return TableCell(
        child: child,
        key: key,
        verticalAlignment: verticalAlignment,
      );
    };
Function _TableCell_applyParentData$(
  m.Scope scope$,
  TableCell target$,
) =>
    target$.applyParentData;
Function _TableCell_debugFillProperties$(
  m.Scope scope$,
  TableCell target$,
) =>
    target$.debugFillProperties;
