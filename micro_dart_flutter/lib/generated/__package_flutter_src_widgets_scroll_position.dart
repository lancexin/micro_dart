// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/scroll_position.dart';
import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/physics.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/media_query.dart';
import 'package:flutter/src/widgets/notification_listener.dart';
import 'package:flutter/src/widgets/page_storage.dart';
import 'package:flutter/src/widgets/scroll_activity.dart';
import 'package:flutter/src/widgets/scroll_context.dart';
import 'package:flutter/src/widgets/scroll_metrics.dart';
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/view.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/scroll_position.dart',
  {
    'ScrollPosition.hold': _ScrollPosition_hold$,
    'ScrollPosition.drag': _ScrollPosition_drag$,
    'ScrollPositionAlignmentPolicy.explicit':
        _ScrollPositionAlignmentPolicy_explicit$,
    'ScrollPositionAlignmentPolicy.keepVisibleAtEnd':
        _ScrollPositionAlignmentPolicy_keepVisibleAtEnd$,
    'ScrollPositionAlignmentPolicy.keepVisibleAtStart':
        _ScrollPositionAlignmentPolicy_keepVisibleAtStart$,
    'ScrollPositionAlignmentPolicy.values':
        _ScrollPositionAlignmentPolicy_values$,
  },
  {},
  {
    'ScrollPosition': m.ClassMirror(
      'ScrollPosition',
      {
        '#as': ScrollPosition_as$,
        '#is': ScrollPosition_is$,
        'physics': _ScrollPosition_physics$,
        'context': _ScrollPosition_context$,
        'keepScrollOffset': _ScrollPosition_keepScrollOffset$,
        'debugLabel': _ScrollPosition_debugLabel$,
        'isScrollingNotifier': _ScrollPosition_isScrollingNotifier$,
        'minScrollExtent': _ScrollPosition_minScrollExtent$,
        'maxScrollExtent': _ScrollPosition_maxScrollExtent$,
        'hasContentDimensions': _ScrollPosition_hasContentDimensions$,
        'pixels': _ScrollPosition_pixels$,
        'hasPixels': _ScrollPosition_hasPixels$,
        'viewportDimension': _ScrollPosition_viewportDimension$,
        'hasViewportDimension': _ScrollPosition_hasViewportDimension$,
        'haveDimensions': _ScrollPosition_haveDimensions$,
        'devicePixelRatio': _ScrollPosition_devicePixelRatio$,
        'allowImplicitScrolling': _ScrollPosition_allowImplicitScrolling$,
        'activity': _ScrollPosition_activity$,
        'absorb': _ScrollPosition_absorb$,
        'setPixels': _ScrollPosition_setPixels$,
        'correctPixels': _ScrollPosition_correctPixels$,
        'correctBy': _ScrollPosition_correctBy$,
        'forcePixels': _ScrollPosition_forcePixels$,
        'saveScrollOffset': _ScrollPosition_saveScrollOffset$,
        'restoreScrollOffset': _ScrollPosition_restoreScrollOffset$,
        'restoreOffset': _ScrollPosition_restoreOffset$,
        'saveOffset': _ScrollPosition_saveOffset$,
        'applyBoundaryConditions': _ScrollPosition_applyBoundaryConditions$,
        'applyViewportDimension': _ScrollPosition_applyViewportDimension$,
        'applyContentDimensions': _ScrollPosition_applyContentDimensions$,
        'correctForNewDimensions': _ScrollPosition_correctForNewDimensions$,
        'applyNewDimensions': _ScrollPosition_applyNewDimensions$,
        'ensureVisible': _ScrollPosition_ensureVisible$,
        'animateTo': _ScrollPosition_animateTo$,
        'jumpTo': _ScrollPosition_jumpTo$,
        'pointerScroll': _ScrollPosition_pointerScroll$,
        'moveTo': _ScrollPosition_moveTo$,
        'beginActivity': _ScrollPosition_beginActivity$,
        'didStartScroll': _ScrollPosition_didStartScroll$,
        'didUpdateScrollPositionBy': _ScrollPosition_didUpdateScrollPositionBy$,
        'didEndScroll': _ScrollPosition_didEndScroll$,
        'didOverscrollBy': _ScrollPosition_didOverscrollBy$,
        'didUpdateScrollDirection': _ScrollPosition_didUpdateScrollDirection$,
        'didUpdateScrollMetrics': _ScrollPosition_didUpdateScrollMetrics$,
        'recommendDeferredLoading': _ScrollPosition_recommendDeferredLoading$,
        'dispose': _ScrollPosition_dispose$,
        'notifyListeners': _ScrollPosition_notifyListeners$,
        'debugFillDescription': _ScrollPosition_debugFillDescription$,
      },
      {},
    ),
    'ScrollMetricsNotification': m.ClassMirror(
      'ScrollMetricsNotification',
      {
        '#as': ScrollMetricsNotification_as$,
        '#is': ScrollMetricsNotification_is$,
        'metrics': _ScrollMetricsNotification_metrics$,
        'context': _ScrollMetricsNotification_context$,
        'debugFillDescription':
            _ScrollMetricsNotification_debugFillDescription$,
      },
      {},
    ),
    'ScrollPositionAlignmentPolicy': m.ClassMirror(
      'ScrollPositionAlignmentPolicy',
      {},
      {},
    ),
  },
);
Function ScrollPosition_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ScrollPosition;
Function ScrollPosition_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ScrollPosition;
ScrollPhysics _ScrollPosition_physics$(ScrollPosition target) {
  return target.physics;
}

ScrollContext _ScrollPosition_context$(ScrollPosition target) {
  return target.context;
}

bool _ScrollPosition_keepScrollOffset$(ScrollPosition target) {
  return target.keepScrollOffset;
}

String? _ScrollPosition_debugLabel$(ScrollPosition target) {
  return target.debugLabel;
}

ValueNotifier<bool> _ScrollPosition_isScrollingNotifier$(
    ScrollPosition target) {
  return target.isScrollingNotifier;
}

double _ScrollPosition_minScrollExtent$(ScrollPosition target) {
  return target.minScrollExtent;
}

double _ScrollPosition_maxScrollExtent$(ScrollPosition target) {
  return target.maxScrollExtent;
}

bool _ScrollPosition_hasContentDimensions$(ScrollPosition target) {
  return target.hasContentDimensions;
}

double _ScrollPosition_pixels$(ScrollPosition target) {
  return target.pixels;
}

bool _ScrollPosition_hasPixels$(ScrollPosition target) {
  return target.hasPixels;
}

double _ScrollPosition_viewportDimension$(ScrollPosition target) {
  return target.viewportDimension;
}

bool _ScrollPosition_hasViewportDimension$(ScrollPosition target) {
  return target.hasViewportDimension;
}

bool _ScrollPosition_haveDimensions$(ScrollPosition target) {
  return target.haveDimensions;
}

double _ScrollPosition_devicePixelRatio$(ScrollPosition target) {
  return target.devicePixelRatio;
}

bool _ScrollPosition_allowImplicitScrolling$(ScrollPosition target) {
  return target.allowImplicitScrolling;
}

ScrollActivity? _ScrollPosition_activity$(ScrollPosition target) {
  return target.activity;
}

Function _ScrollPosition_absorb$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.absorb;
Function _ScrollPosition_setPixels$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.setPixels;
Function _ScrollPosition_correctPixels$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.correctPixels;
Function _ScrollPosition_correctBy$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.correctBy;
Function _ScrollPosition_forcePixels$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.forcePixels;
Function _ScrollPosition_saveScrollOffset$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.saveScrollOffset;
Function _ScrollPosition_restoreScrollOffset$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.restoreScrollOffset;
Function _ScrollPosition_restoreOffset$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.restoreOffset;
Function _ScrollPosition_saveOffset$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.saveOffset;
Function _ScrollPosition_applyBoundaryConditions$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.applyBoundaryConditions;
Function _ScrollPosition_applyViewportDimension$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.applyViewportDimension;
Function _ScrollPosition_applyContentDimensions$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.applyContentDimensions;
Function _ScrollPosition_correctForNewDimensions$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.correctForNewDimensions;
Function _ScrollPosition_applyNewDimensions$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.applyNewDimensions;
Function _ScrollPosition_ensureVisible$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.ensureVisible;
Function _ScrollPosition_animateTo$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.animateTo;
Function _ScrollPosition_jumpTo$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.jumpTo;
Function _ScrollPosition_pointerScroll$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.pointerScroll;
Function _ScrollPosition_moveTo$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.moveTo;
Function _ScrollPosition_hold$(
  m.Scope scope,
  ScrollPosition target,
) =>
    (m.FunctionPointer holdCancelCallback) {
      void holdCancelCallbackProxy() => scope.engine.callFunctionPointer(
            scope,
            holdCancelCallback,
            [],
            {},
          );
      return target.hold(holdCancelCallbackProxy);
    };
Function _ScrollPosition_drag$(
  m.Scope scope,
  ScrollPosition target,
) =>
    (
      DragStartDetails details,
      m.FunctionPointer dragCancelCallback,
    ) {
      void dragCancelCallbackProxy() => scope.engine.callFunctionPointer(
            scope,
            dragCancelCallback,
            [],
            {},
          );
      return target.drag(
        details,
        dragCancelCallbackProxy,
      );
    };
Function _ScrollPosition_beginActivity$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.beginActivity;
Function _ScrollPosition_didStartScroll$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.didStartScroll;
Function _ScrollPosition_didUpdateScrollPositionBy$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.didUpdateScrollPositionBy;
Function _ScrollPosition_didEndScroll$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.didEndScroll;
Function _ScrollPosition_didOverscrollBy$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.didOverscrollBy;
Function _ScrollPosition_didUpdateScrollDirection$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.didUpdateScrollDirection;
Function _ScrollPosition_didUpdateScrollMetrics$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.didUpdateScrollMetrics;
Function _ScrollPosition_recommendDeferredLoading$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.recommendDeferredLoading;
Function _ScrollPosition_dispose$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.dispose;
Function _ScrollPosition_notifyListeners$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.notifyListeners;
Function _ScrollPosition_debugFillDescription$(
  m.Scope scope,
  ScrollPosition target,
) =>
    target.debugFillDescription;
Function ScrollMetricsNotification_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ScrollMetricsNotification;
Function ScrollMetricsNotification_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ScrollMetricsNotification;
ScrollMetrics _ScrollMetricsNotification_metrics$(
    ScrollMetricsNotification target) {
  return target.metrics;
}

BuildContext _ScrollMetricsNotification_context$(
    ScrollMetricsNotification target) {
  return target.context;
}

Function _ScrollMetricsNotification_debugFillDescription$(
  m.Scope scope,
  ScrollMetricsNotification target,
) =>
    target.debugFillDescription;
ScrollPositionAlignmentPolicy _ScrollPositionAlignmentPolicy_explicit$() {
  return ScrollPositionAlignmentPolicy.explicit;
}

ScrollPositionAlignmentPolicy
    _ScrollPositionAlignmentPolicy_keepVisibleAtEnd$() {
  return ScrollPositionAlignmentPolicy.keepVisibleAtEnd;
}

ScrollPositionAlignmentPolicy
    _ScrollPositionAlignmentPolicy_keepVisibleAtStart$() {
  return ScrollPositionAlignmentPolicy.keepVisibleAtStart;
}

List<ScrollPositionAlignmentPolicy> _ScrollPositionAlignmentPolicy_values$() {
  return ScrollPositionAlignmentPolicy.values;
}
