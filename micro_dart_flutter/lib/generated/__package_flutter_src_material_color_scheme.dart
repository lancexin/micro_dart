// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/color_scheme.dart';
import 'dart:async';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:material_color_utilities/material_color_utilities.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/color_scheme.dart',
  {
    'ColorScheme.': _ColorScheme__$,
    'ColorScheme.fromSeed': _ColorScheme_fromSeed_$,
    'ColorScheme.light': _ColorScheme_light_$,
    'ColorScheme.dark': _ColorScheme_dark_$,
    'ColorScheme.highContrastLight': _ColorScheme_highContrastLight_$,
    'ColorScheme.highContrastDark': _ColorScheme_highContrastDark_$,
    'ColorScheme.fromSwatch': _ColorScheme_fromSwatch_$,
    'ColorScheme.lerp': _ColorScheme_lerp$,
    'ColorScheme.fromImageProvider': _ColorScheme_fromImageProvider$,
  },
  {},
  {
    'ColorScheme': m.ClassMirror(
      'ColorScheme',
      {
        '#as': ColorScheme_as$,
        '#is': ColorScheme_is$,
        'brightness': _ColorScheme_brightness$,
        'primary': _ColorScheme_primary$,
        'onPrimary': _ColorScheme_onPrimary$,
        'secondary': _ColorScheme_secondary$,
        'onSecondary': _ColorScheme_onSecondary$,
        'error': _ColorScheme_error$,
        'onError': _ColorScheme_onError$,
        'background': _ColorScheme_background$,
        'onBackground': _ColorScheme_onBackground$,
        'surface': _ColorScheme_surface$,
        'onSurface': _ColorScheme_onSurface$,
        'primaryContainer': _ColorScheme_primaryContainer$,
        'onPrimaryContainer': _ColorScheme_onPrimaryContainer$,
        'secondaryContainer': _ColorScheme_secondaryContainer$,
        'onSecondaryContainer': _ColorScheme_onSecondaryContainer$,
        'tertiary': _ColorScheme_tertiary$,
        'onTertiary': _ColorScheme_onTertiary$,
        'tertiaryContainer': _ColorScheme_tertiaryContainer$,
        'onTertiaryContainer': _ColorScheme_onTertiaryContainer$,
        'errorContainer': _ColorScheme_errorContainer$,
        'onErrorContainer': _ColorScheme_onErrorContainer$,
        'surfaceVariant': _ColorScheme_surfaceVariant$,
        'onSurfaceVariant': _ColorScheme_onSurfaceVariant$,
        'outline': _ColorScheme_outline$,
        'outlineVariant': _ColorScheme_outlineVariant$,
        'shadow': _ColorScheme_shadow$,
        'scrim': _ColorScheme_scrim$,
        'inverseSurface': _ColorScheme_inverseSurface$,
        'onInverseSurface': _ColorScheme_onInverseSurface$,
        'inversePrimary': _ColorScheme_inversePrimary$,
        'surfaceTint': _ColorScheme_surfaceTint$,
        'hashCode': _ColorScheme_hashCode$,
        'copyWith': _ColorScheme_copyWith$,
        '==': _ColorScheme_eq$$,
        'debugFillProperties': _ColorScheme_debugFillProperties$,
      },
      {},
    )
  },
);
Function ColorScheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ColorScheme;
Function ColorScheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ColorScheme;
Function _ColorScheme_brightness$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.brightness;
    };
Function _ColorScheme_primary$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.primary;
    };
Function _ColorScheme_onPrimary$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.onPrimary;
    };
Function _ColorScheme_secondary$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.secondary;
    };
Function _ColorScheme_onSecondary$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.onSecondary;
    };
Function _ColorScheme_error$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.error;
    };
Function _ColorScheme_onError$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.onError;
    };
Function _ColorScheme_background$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.background;
    };
Function _ColorScheme_onBackground$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.onBackground;
    };
Function _ColorScheme_surface$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.surface;
    };
Function _ColorScheme_onSurface$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.onSurface;
    };
Function _ColorScheme_primaryContainer$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.primaryContainer;
    };
Function _ColorScheme_onPrimaryContainer$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.onPrimaryContainer;
    };
Function _ColorScheme_secondaryContainer$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.secondaryContainer;
    };
Function _ColorScheme_onSecondaryContainer$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.onSecondaryContainer;
    };
Function _ColorScheme_tertiary$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.tertiary;
    };
Function _ColorScheme_onTertiary$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.onTertiary;
    };
Function _ColorScheme_tertiaryContainer$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.tertiaryContainer;
    };
Function _ColorScheme_onTertiaryContainer$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.onTertiaryContainer;
    };
Function _ColorScheme_errorContainer$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.errorContainer;
    };
Function _ColorScheme_onErrorContainer$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.onErrorContainer;
    };
Function _ColorScheme_surfaceVariant$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.surfaceVariant;
    };
Function _ColorScheme_onSurfaceVariant$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.onSurfaceVariant;
    };
Function _ColorScheme_outline$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.outline;
    };
Function _ColorScheme_outlineVariant$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.outlineVariant;
    };
Function _ColorScheme_shadow$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.shadow;
    };
Function _ColorScheme_scrim$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.scrim;
    };
Function _ColorScheme_inverseSurface$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.inverseSurface;
    };
Function _ColorScheme_onInverseSurface$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.onInverseSurface;
    };
Function _ColorScheme_inversePrimary$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.inversePrimary;
    };
Function _ColorScheme_surfaceTint$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.surfaceTint;
    };
Function _ColorScheme_hashCode$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    () {
      return target$.hashCode;
    };
Function _ColorScheme__$(m.Scope scope$) => ({
      required Brightness brightness,
      required Color primary,
      required Color onPrimary,
      Color? primaryContainer,
      Color? onPrimaryContainer,
      required Color secondary,
      required Color onSecondary,
      Color? secondaryContainer,
      Color? onSecondaryContainer,
      Color? tertiary,
      Color? onTertiary,
      Color? tertiaryContainer,
      Color? onTertiaryContainer,
      required Color error,
      required Color onError,
      Color? errorContainer,
      Color? onErrorContainer,
      required Color background,
      required Color onBackground,
      required Color surface,
      required Color onSurface,
      Color? surfaceVariant,
      Color? onSurfaceVariant,
      Color? outline,
      Color? outlineVariant,
      Color? shadow,
      Color? scrim,
      Color? inverseSurface,
      Color? onInverseSurface,
      Color? inversePrimary,
      Color? surfaceTint,
      Color? primaryVariant,
      Color? secondaryVariant,
    }) {
      return ColorScheme(
        background: background,
        brightness: brightness,
        error: error,
        errorContainer: errorContainer,
        inversePrimary: inversePrimary,
        inverseSurface: inverseSurface,
        onBackground: onBackground,
        onError: onError,
        onErrorContainer: onErrorContainer,
        onInverseSurface: onInverseSurface,
        onPrimary: onPrimary,
        onPrimaryContainer: onPrimaryContainer,
        onSecondary: onSecondary,
        onSecondaryContainer: onSecondaryContainer,
        onSurface: onSurface,
        onSurfaceVariant: onSurfaceVariant,
        onTertiary: onTertiary,
        onTertiaryContainer: onTertiaryContainer,
        outline: outline,
        outlineVariant: outlineVariant,
        primary: primary,
        primaryContainer: primaryContainer,
        primaryVariant: primaryVariant,
        scrim: scrim,
        secondary: secondary,
        secondaryContainer: secondaryContainer,
        secondaryVariant: secondaryVariant,
        shadow: shadow,
        surface: surface,
        surfaceTint: surfaceTint,
        surfaceVariant: surfaceVariant,
        tertiary: tertiary,
        tertiaryContainer: tertiaryContainer,
      );
    };
Function _ColorScheme_fromSeed_$(m.Scope scope$) => ColorScheme.fromSeed;
Function _ColorScheme_light_$(m.Scope scope$) => ColorScheme.light;
Function _ColorScheme_dark_$(m.Scope scope$) => ColorScheme.dark;
Function _ColorScheme_highContrastLight_$(m.Scope scope$) =>
    ColorScheme.highContrastLight;
Function _ColorScheme_highContrastDark_$(m.Scope scope$) =>
    ColorScheme.highContrastDark;
Function _ColorScheme_fromSwatch_$(m.Scope scope$) => ColorScheme.fromSwatch;
Function _ColorScheme_copyWith$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    target$.copyWith;
Function _ColorScheme_lerp$(m.Scope scope$) => ColorScheme.lerp;
Function _ColorScheme_eq$$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    (Object other$) => target$ == other$;
Function _ColorScheme_debugFillProperties$(
  m.Scope scope$,
  ColorScheme target$,
) =>
    target$.debugFillProperties;
Function _ColorScheme_fromImageProvider$(m.Scope scope$) =>
    ColorScheme.fromImageProvider;
