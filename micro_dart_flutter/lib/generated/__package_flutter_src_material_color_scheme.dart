// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/color_scheme.dart';
import 'dart:async';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:material_color_utilities/material_color_utilities.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/color_scheme.dart',
  {
    'ColorScheme.lerp': _ColorScheme_lerp$,
    'ColorScheme.fromImageProvider': _ColorScheme_fromImageProvider$,
  },
  {},
  {
    'ColorScheme': m.ClassMirror(
      'ColorScheme',
      {
        'brightness': _ColorScheme_brightness$,
        'primary': _ColorScheme_primary$,
        'onPrimary': _ColorScheme_onPrimary$,
        'secondary': _ColorScheme_secondary$,
        'onSecondary': _ColorScheme_onSecondary$,
        'error': _ColorScheme_error$,
        'onError': _ColorScheme_onError$,
        'background': _ColorScheme_background$,
        'onBackground': _ColorScheme_onBackground$,
        'surface': _ColorScheme_surface$,
        'onSurface': _ColorScheme_onSurface$,
        'primaryContainer': _ColorScheme_primaryContainer$,
        'onPrimaryContainer': _ColorScheme_onPrimaryContainer$,
        'secondaryContainer': _ColorScheme_secondaryContainer$,
        'onSecondaryContainer': _ColorScheme_onSecondaryContainer$,
        'tertiary': _ColorScheme_tertiary$,
        'onTertiary': _ColorScheme_onTertiary$,
        'tertiaryContainer': _ColorScheme_tertiaryContainer$,
        'onTertiaryContainer': _ColorScheme_onTertiaryContainer$,
        'errorContainer': _ColorScheme_errorContainer$,
        'onErrorContainer': _ColorScheme_onErrorContainer$,
        'surfaceVariant': _ColorScheme_surfaceVariant$,
        'onSurfaceVariant': _ColorScheme_onSurfaceVariant$,
        'outline': _ColorScheme_outline$,
        'outlineVariant': _ColorScheme_outlineVariant$,
        'shadow': _ColorScheme_shadow$,
        'scrim': _ColorScheme_scrim$,
        'inverseSurface': _ColorScheme_inverseSurface$,
        'onInverseSurface': _ColorScheme_onInverseSurface$,
        'inversePrimary': _ColorScheme_inversePrimary$,
        'surfaceTint': _ColorScheme_surfaceTint$,
        'hashCode': _ColorScheme_hashCode$,
        'copyWith': _ColorScheme_copyWith$,
        'debugFillProperties': _ColorScheme_debugFillProperties$,
      },
      {},
    )
  },
);
Brightness _ColorScheme_brightness$(ColorScheme target) {
  return target.brightness;
}

Color _ColorScheme_primary$(ColorScheme target) {
  return target.primary;
}

Color _ColorScheme_onPrimary$(ColorScheme target) {
  return target.onPrimary;
}

Color _ColorScheme_secondary$(ColorScheme target) {
  return target.secondary;
}

Color _ColorScheme_onSecondary$(ColorScheme target) {
  return target.onSecondary;
}

Color _ColorScheme_error$(ColorScheme target) {
  return target.error;
}

Color _ColorScheme_onError$(ColorScheme target) {
  return target.onError;
}

Color _ColorScheme_background$(ColorScheme target) {
  return target.background;
}

Color _ColorScheme_onBackground$(ColorScheme target) {
  return target.onBackground;
}

Color _ColorScheme_surface$(ColorScheme target) {
  return target.surface;
}

Color _ColorScheme_onSurface$(ColorScheme target) {
  return target.onSurface;
}

Color _ColorScheme_primaryContainer$(ColorScheme target) {
  return target.primaryContainer;
}

Color _ColorScheme_onPrimaryContainer$(ColorScheme target) {
  return target.onPrimaryContainer;
}

Color _ColorScheme_secondaryContainer$(ColorScheme target) {
  return target.secondaryContainer;
}

Color _ColorScheme_onSecondaryContainer$(ColorScheme target) {
  return target.onSecondaryContainer;
}

Color _ColorScheme_tertiary$(ColorScheme target) {
  return target.tertiary;
}

Color _ColorScheme_onTertiary$(ColorScheme target) {
  return target.onTertiary;
}

Color _ColorScheme_tertiaryContainer$(ColorScheme target) {
  return target.tertiaryContainer;
}

Color _ColorScheme_onTertiaryContainer$(ColorScheme target) {
  return target.onTertiaryContainer;
}

Color _ColorScheme_errorContainer$(ColorScheme target) {
  return target.errorContainer;
}

Color _ColorScheme_onErrorContainer$(ColorScheme target) {
  return target.onErrorContainer;
}

Color _ColorScheme_surfaceVariant$(ColorScheme target) {
  return target.surfaceVariant;
}

Color _ColorScheme_onSurfaceVariant$(ColorScheme target) {
  return target.onSurfaceVariant;
}

Color _ColorScheme_outline$(ColorScheme target) {
  return target.outline;
}

Color _ColorScheme_outlineVariant$(ColorScheme target) {
  return target.outlineVariant;
}

Color _ColorScheme_shadow$(ColorScheme target) {
  return target.shadow;
}

Color _ColorScheme_scrim$(ColorScheme target) {
  return target.scrim;
}

Color _ColorScheme_inverseSurface$(ColorScheme target) {
  return target.inverseSurface;
}

Color _ColorScheme_onInverseSurface$(ColorScheme target) {
  return target.onInverseSurface;
}

Color _ColorScheme_inversePrimary$(ColorScheme target) {
  return target.inversePrimary;
}

Color _ColorScheme_surfaceTint$(ColorScheme target) {
  return target.surfaceTint;
}

int _ColorScheme_hashCode$(ColorScheme target) {
  return target.hashCode;
}

Function _ColorScheme_copyWith$(
  m.Scope scope,
  ColorScheme target,
) =>
    target.copyWith;
Function _ColorScheme_lerp$(m.Scope scope) => ColorScheme.lerp;
Function _ColorScheme_debugFillProperties$(
  m.Scope scope,
  ColorScheme target,
) =>
    target.debugFillProperties;
Function _ColorScheme_fromImageProvider$(m.Scope scope) =>
    ColorScheme.fromImageProvider;
