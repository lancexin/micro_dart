// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/ink_well.dart';
import 'dart:collection';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/feedback.dart';
import 'package:flutter/src/material/ink_highlight.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/ink_well.dart',
  {},
  {},
  {
    'InteractiveInkFeature': m.ClassMirror(
      'InteractiveInkFeature',
      {
        'color': _InteractiveInkFeature_color$,
        'customBorder': _InteractiveInkFeature_customBorder$,
        'confirm': _InteractiveInkFeature_confirm$,
        'cancel': _InteractiveInkFeature_cancel$,
      },
      {
        'color': _InteractiveInkFeature_color_set$,
        'customBorder': _InteractiveInkFeature_customBorder_set$,
      },
    ),
    'InteractiveInkFeatureFactory': m.ClassMirror(
      'InteractiveInkFeatureFactory',
      {},
      {},
    ),
    'InkResponse': m.ClassMirror(
      'InkResponse',
      {
        'child': _InkResponse_child$,
        'onTap': _InkResponse_onTap$,
        'onTapDown': _InkResponse_onTapDown$,
        'onTapUp': _InkResponse_onTapUp$,
        'onTapCancel': _InkResponse_onTapCancel$,
        'onDoubleTap': _InkResponse_onDoubleTap$,
        'onLongPress': _InkResponse_onLongPress$,
        'onSecondaryTap': _InkResponse_onSecondaryTap$,
        'onSecondaryTapDown': _InkResponse_onSecondaryTapDown$,
        'onSecondaryTapUp': _InkResponse_onSecondaryTapUp$,
        'onSecondaryTapCancel': _InkResponse_onSecondaryTapCancel$,
        'onHighlightChanged': _InkResponse_onHighlightChanged$,
        'onHover': _InkResponse_onHover$,
        'mouseCursor': _InkResponse_mouseCursor$,
        'containedInkWell': _InkResponse_containedInkWell$,
        'highlightShape': _InkResponse_highlightShape$,
        'radius': _InkResponse_radius$,
        'borderRadius': _InkResponse_borderRadius$,
        'customBorder': _InkResponse_customBorder$,
        'focusColor': _InkResponse_focusColor$,
        'hoverColor': _InkResponse_hoverColor$,
        'highlightColor': _InkResponse_highlightColor$,
        'overlayColor': _InkResponse_overlayColor$,
        'splashColor': _InkResponse_splashColor$,
        'splashFactory': _InkResponse_splashFactory$,
        'enableFeedback': _InkResponse_enableFeedback$,
        'excludeFromSemantics': _InkResponse_excludeFromSemantics$,
        'onFocusChange': _InkResponse_onFocusChange$,
        'autofocus': _InkResponse_autofocus$,
        'focusNode': _InkResponse_focusNode$,
        'canRequestFocus': _InkResponse_canRequestFocus$,
        'statesController': _InkResponse_statesController$,
        'getRectCallback': _InkResponse_getRectCallback$,
        'build': _InkResponse_build$,
        'debugCheckContext': _InkResponse_debugCheckContext$,
      },
      {},
    ),
    'InkWell': m.ClassMirror(
      'InkWell',
      {},
      {},
    ),
  },
);
Color _InteractiveInkFeature_color$(InteractiveInkFeature target) {
  return target.color;
}

void _InteractiveInkFeature_color_set$(
  InteractiveInkFeature target,
  Color other,
) {
  target.color = other;
}

ShapeBorder? _InteractiveInkFeature_customBorder$(
    InteractiveInkFeature target) {
  return target.customBorder;
}

void _InteractiveInkFeature_customBorder_set$(
  InteractiveInkFeature target,
  ShapeBorder? other,
) {
  target.customBorder = other;
}

Function _InteractiveInkFeature_confirm$(
  m.Scope scope,
  InteractiveInkFeature target,
) =>
    target.confirm;
Function _InteractiveInkFeature_cancel$(
  m.Scope scope,
  InteractiveInkFeature target,
) =>
    target.cancel;
Widget? _InkResponse_child$(InkResponse target) {
  return target.child;
}

void Function()? _InkResponse_onTap$(InkResponse target) {
  return target.onTap;
}

void Function(TapDownDetails)? _InkResponse_onTapDown$(InkResponse target) {
  return target.onTapDown;
}

void Function(TapUpDetails)? _InkResponse_onTapUp$(InkResponse target) {
  return target.onTapUp;
}

void Function()? _InkResponse_onTapCancel$(InkResponse target) {
  return target.onTapCancel;
}

void Function()? _InkResponse_onDoubleTap$(InkResponse target) {
  return target.onDoubleTap;
}

void Function()? _InkResponse_onLongPress$(InkResponse target) {
  return target.onLongPress;
}

void Function()? _InkResponse_onSecondaryTap$(InkResponse target) {
  return target.onSecondaryTap;
}

void Function(TapDownDetails)? _InkResponse_onSecondaryTapDown$(
    InkResponse target) {
  return target.onSecondaryTapDown;
}

void Function(TapUpDetails)? _InkResponse_onSecondaryTapUp$(
    InkResponse target) {
  return target.onSecondaryTapUp;
}

void Function()? _InkResponse_onSecondaryTapCancel$(InkResponse target) {
  return target.onSecondaryTapCancel;
}

void Function(bool)? _InkResponse_onHighlightChanged$(InkResponse target) {
  return target.onHighlightChanged;
}

void Function(bool)? _InkResponse_onHover$(InkResponse target) {
  return target.onHover;
}

MouseCursor? _InkResponse_mouseCursor$(InkResponse target) {
  return target.mouseCursor;
}

bool _InkResponse_containedInkWell$(InkResponse target) {
  return target.containedInkWell;
}

BoxShape _InkResponse_highlightShape$(InkResponse target) {
  return target.highlightShape;
}

double? _InkResponse_radius$(InkResponse target) {
  return target.radius;
}

BorderRadius? _InkResponse_borderRadius$(InkResponse target) {
  return target.borderRadius;
}

ShapeBorder? _InkResponse_customBorder$(InkResponse target) {
  return target.customBorder;
}

Color? _InkResponse_focusColor$(InkResponse target) {
  return target.focusColor;
}

Color? _InkResponse_hoverColor$(InkResponse target) {
  return target.hoverColor;
}

Color? _InkResponse_highlightColor$(InkResponse target) {
  return target.highlightColor;
}

MaterialStateProperty<Color?>? _InkResponse_overlayColor$(InkResponse target) {
  return target.overlayColor;
}

Color? _InkResponse_splashColor$(InkResponse target) {
  return target.splashColor;
}

InteractiveInkFeatureFactory? _InkResponse_splashFactory$(InkResponse target) {
  return target.splashFactory;
}

bool _InkResponse_enableFeedback$(InkResponse target) {
  return target.enableFeedback;
}

bool _InkResponse_excludeFromSemantics$(InkResponse target) {
  return target.excludeFromSemantics;
}

void Function(bool)? _InkResponse_onFocusChange$(InkResponse target) {
  return target.onFocusChange;
}

bool _InkResponse_autofocus$(InkResponse target) {
  return target.autofocus;
}

FocusNode? _InkResponse_focusNode$(InkResponse target) {
  return target.focusNode;
}

bool _InkResponse_canRequestFocus$(InkResponse target) {
  return target.canRequestFocus;
}

MaterialStatesController? _InkResponse_statesController$(InkResponse target) {
  return target.statesController;
}

Function _InkResponse_getRectCallback$(
  m.Scope scope,
  InkResponse target,
) =>
    target.getRectCallback;
Function _InkResponse_build$(
  m.Scope scope,
  InkResponse target,
) =>
    target.build;
Function _InkResponse_debugCheckContext$(
  m.Scope scope,
  InkResponse target,
) =>
    target.debugCheckContext;
