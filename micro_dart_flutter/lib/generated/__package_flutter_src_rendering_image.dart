// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/image.dart';
import 'dart:ui' show Image;
import 'package:flutter/animation.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/rendering/object.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/image.dart',
  {'RenderImage.': _RenderImage__$},
  {},
  {
    'RenderImage': m.ClassMirror(
      'RenderImage',
      {
        '#as': RenderImage_as$,
        '#is': RenderImage_is$,
        'debugImageLabel': _RenderImage_debugImageLabel$,
        'image': _RenderImage_image$,
        'width': _RenderImage_width$,
        'height': _RenderImage_height$,
        'scale': _RenderImage_scale$,
        'color': _RenderImage_color$,
        'opacity': _RenderImage_opacity$,
        'filterQuality': _RenderImage_filterQuality$,
        'colorBlendMode': _RenderImage_colorBlendMode$,
        'fit': _RenderImage_fit$,
        'alignment': _RenderImage_alignment$,
        'repeat': _RenderImage_repeat$,
        'centerSlice': _RenderImage_centerSlice$,
        'invertColors': _RenderImage_invertColors$,
        'matchTextDirection': _RenderImage_matchTextDirection$,
        'textDirection': _RenderImage_textDirection$,
        'isAntiAlias': _RenderImage_isAntiAlias$,
        'computeMinIntrinsicWidth': _RenderImage_computeMinIntrinsicWidth$,
        'computeMaxIntrinsicWidth': _RenderImage_computeMaxIntrinsicWidth$,
        'computeMinIntrinsicHeight': _RenderImage_computeMinIntrinsicHeight$,
        'computeMaxIntrinsicHeight': _RenderImage_computeMaxIntrinsicHeight$,
        'hitTestSelf': _RenderImage_hitTestSelf$,
        'computeDryLayout': _RenderImage_computeDryLayout$,
        'performLayout': _RenderImage_performLayout$,
        'attach': _RenderImage_attach$,
        'detach': _RenderImage_detach$,
        'paint': _RenderImage_paint$,
        'dispose': _RenderImage_dispose$,
        'debugFillProperties': _RenderImage_debugFillProperties$,
      },
      {
        'debugImageLabel': _RenderImage_debugImageLabel_set$,
        'image': _RenderImage_image_set$,
        'width': _RenderImage_width_set$,
        'height': _RenderImage_height_set$,
        'scale': _RenderImage_scale_set$,
        'color': _RenderImage_color_set$,
        'opacity': _RenderImage_opacity_set$,
        'filterQuality': _RenderImage_filterQuality_set$,
        'colorBlendMode': _RenderImage_colorBlendMode_set$,
        'fit': _RenderImage_fit_set$,
        'alignment': _RenderImage_alignment_set$,
        'repeat': _RenderImage_repeat_set$,
        'centerSlice': _RenderImage_centerSlice_set$,
        'invertColors': _RenderImage_invertColors_set$,
        'matchTextDirection': _RenderImage_matchTextDirection_set$,
        'textDirection': _RenderImage_textDirection_set$,
        'isAntiAlias': _RenderImage_isAntiAlias_set$,
      },
    )
  },
);
Function RenderImage_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RenderImage;
Function RenderImage_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RenderImage;
Function _RenderImage_debugImageLabel$(
  m.Scope scope$,
  RenderImage target$,
) =>
    () {
      return target$.debugImageLabel;
    };
void _RenderImage_debugImageLabel_set$(
  m.Scope scope$,
  RenderImage target$,
) =>
    (dynamic other$) {
      target$.debugImageLabel = other$;
    };
Function _RenderImage_image$(
  m.Scope scope$,
  RenderImage target$,
) =>
    () {
      return target$.image;
    };
void _RenderImage_image_set$(
  m.Scope scope$,
  RenderImage target$,
) =>
    (dynamic other$) {
      target$.image = other$;
    };
Function _RenderImage_width$(
  m.Scope scope$,
  RenderImage target$,
) =>
    () {
      return target$.width;
    };
void _RenderImage_width_set$(
  m.Scope scope$,
  RenderImage target$,
) =>
    (dynamic other$) {
      target$.width = other$;
    };
Function _RenderImage_height$(
  m.Scope scope$,
  RenderImage target$,
) =>
    () {
      return target$.height;
    };
void _RenderImage_height_set$(
  m.Scope scope$,
  RenderImage target$,
) =>
    (dynamic other$) {
      target$.height = other$;
    };
Function _RenderImage_scale$(
  m.Scope scope$,
  RenderImage target$,
) =>
    () {
      return target$.scale;
    };
void _RenderImage_scale_set$(
  m.Scope scope$,
  RenderImage target$,
) =>
    (dynamic other$) {
      target$.scale = other$;
    };
Function _RenderImage_color$(
  m.Scope scope$,
  RenderImage target$,
) =>
    () {
      return target$.color;
    };
void _RenderImage_color_set$(
  m.Scope scope$,
  RenderImage target$,
) =>
    (dynamic other$) {
      target$.color = other$;
    };
Function _RenderImage_opacity$(
  m.Scope scope$,
  RenderImage target$,
) =>
    () {
      return target$.opacity;
    };
void _RenderImage_opacity_set$(
  m.Scope scope$,
  RenderImage target$,
) =>
    (dynamic other$) {
      target$.opacity = other$;
    };
Function _RenderImage_filterQuality$(
  m.Scope scope$,
  RenderImage target$,
) =>
    () {
      return target$.filterQuality;
    };
void _RenderImage_filterQuality_set$(
  m.Scope scope$,
  RenderImage target$,
) =>
    (dynamic other$) {
      target$.filterQuality = other$;
    };
Function _RenderImage_colorBlendMode$(
  m.Scope scope$,
  RenderImage target$,
) =>
    () {
      return target$.colorBlendMode;
    };
void _RenderImage_colorBlendMode_set$(
  m.Scope scope$,
  RenderImage target$,
) =>
    (dynamic other$) {
      target$.colorBlendMode = other$;
    };
Function _RenderImage_fit$(
  m.Scope scope$,
  RenderImage target$,
) =>
    () {
      return target$.fit;
    };
void _RenderImage_fit_set$(
  m.Scope scope$,
  RenderImage target$,
) =>
    (dynamic other$) {
      target$.fit = other$;
    };
Function _RenderImage_alignment$(
  m.Scope scope$,
  RenderImage target$,
) =>
    () {
      return target$.alignment;
    };
void _RenderImage_alignment_set$(
  m.Scope scope$,
  RenderImage target$,
) =>
    (dynamic other$) {
      target$.alignment = other$;
    };
Function _RenderImage_repeat$(
  m.Scope scope$,
  RenderImage target$,
) =>
    () {
      return target$.repeat;
    };
void _RenderImage_repeat_set$(
  m.Scope scope$,
  RenderImage target$,
) =>
    (dynamic other$) {
      target$.repeat = other$;
    };
Function _RenderImage_centerSlice$(
  m.Scope scope$,
  RenderImage target$,
) =>
    () {
      return target$.centerSlice;
    };
void _RenderImage_centerSlice_set$(
  m.Scope scope$,
  RenderImage target$,
) =>
    (dynamic other$) {
      target$.centerSlice = other$;
    };
Function _RenderImage_invertColors$(
  m.Scope scope$,
  RenderImage target$,
) =>
    () {
      return target$.invertColors;
    };
void _RenderImage_invertColors_set$(
  m.Scope scope$,
  RenderImage target$,
) =>
    (dynamic other$) {
      target$.invertColors = other$;
    };
Function _RenderImage_matchTextDirection$(
  m.Scope scope$,
  RenderImage target$,
) =>
    () {
      return target$.matchTextDirection;
    };
void _RenderImage_matchTextDirection_set$(
  m.Scope scope$,
  RenderImage target$,
) =>
    (dynamic other$) {
      target$.matchTextDirection = other$;
    };
Function _RenderImage_textDirection$(
  m.Scope scope$,
  RenderImage target$,
) =>
    () {
      return target$.textDirection;
    };
void _RenderImage_textDirection_set$(
  m.Scope scope$,
  RenderImage target$,
) =>
    (dynamic other$) {
      target$.textDirection = other$;
    };
Function _RenderImage_isAntiAlias$(
  m.Scope scope$,
  RenderImage target$,
) =>
    () {
      return target$.isAntiAlias;
    };
void _RenderImage_isAntiAlias_set$(
  m.Scope scope$,
  RenderImage target$,
) =>
    (dynamic other$) {
      target$.isAntiAlias = other$;
    };
Function _RenderImage__$(m.Scope scope$) => ({
      Image? image,
      String? debugImageLabel,
      double? width,
      double? height,
      double? scale,
      Color? color,
      Animation<double>? opacity,
      BlendMode? colorBlendMode,
      BoxFit? fit,
      AlignmentGeometry? alignment,
      ImageRepeat? repeat,
      Rect? centerSlice,
      bool? matchTextDirection,
      TextDirection? textDirection,
      bool? invertColors,
      bool? isAntiAlias,
      FilterQuality? filterQuality,
    }) {
      return RenderImage(
        alignment: alignment ?? Alignment.center,
        centerSlice: centerSlice,
        color: color,
        colorBlendMode: colorBlendMode,
        debugImageLabel: debugImageLabel,
        filterQuality: filterQuality ?? FilterQuality.low,
        fit: fit,
        height: height,
        image: image,
        invertColors: invertColors ?? false,
        isAntiAlias: isAntiAlias ?? false,
        matchTextDirection: matchTextDirection ?? false,
        opacity: opacity,
        repeat: repeat ?? ImageRepeat.noRepeat,
        scale: scale ?? 1.0,
        textDirection: textDirection,
        width: width,
      );
    };
Function _RenderImage_computeMinIntrinsicWidth$(
  m.Scope scope$,
  RenderImage target$,
) =>
    target$.computeMinIntrinsicWidth;
Function _RenderImage_computeMaxIntrinsicWidth$(
  m.Scope scope$,
  RenderImage target$,
) =>
    target$.computeMaxIntrinsicWidth;
Function _RenderImage_computeMinIntrinsicHeight$(
  m.Scope scope$,
  RenderImage target$,
) =>
    target$.computeMinIntrinsicHeight;
Function _RenderImage_computeMaxIntrinsicHeight$(
  m.Scope scope$,
  RenderImage target$,
) =>
    target$.computeMaxIntrinsicHeight;
Function _RenderImage_hitTestSelf$(
  m.Scope scope$,
  RenderImage target$,
) =>
    target$.hitTestSelf;
Function _RenderImage_computeDryLayout$(
  m.Scope scope$,
  RenderImage target$,
) =>
    target$.computeDryLayout;
Function _RenderImage_performLayout$(
  m.Scope scope$,
  RenderImage target$,
) =>
    target$.performLayout;
Function _RenderImage_attach$(
  m.Scope scope$,
  RenderImage target$,
) =>
    target$.attach;
Function _RenderImage_detach$(
  m.Scope scope$,
  RenderImage target$,
) =>
    target$.detach;
Function _RenderImage_paint$(
  m.Scope scope$,
  RenderImage target$,
) =>
    target$.paint;
Function _RenderImage_dispose$(
  m.Scope scope$,
  RenderImage target$,
) =>
    target$.dispose;
Function _RenderImage_debugFillProperties$(
  m.Scope scope$,
  RenderImage target$,
) =>
    target$.debugFillProperties;
