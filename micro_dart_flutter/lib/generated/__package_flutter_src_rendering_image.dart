// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/image.dart';
import 'dart:ui' show Image;
import 'package:flutter/animation.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/rendering/object.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/image.dart',
  {},
  {},
  {
    'RenderImage': m.ClassMirror(
      'RenderImage',
      {
        'debugImageLabel': _RenderImage_debugImageLabel$,
        'image': _RenderImage_image$,
        'width': _RenderImage_width$,
        'height': _RenderImage_height$,
        'scale': _RenderImage_scale$,
        'color': _RenderImage_color$,
        'opacity': _RenderImage_opacity$,
        'filterQuality': _RenderImage_filterQuality$,
        'colorBlendMode': _RenderImage_colorBlendMode$,
        'fit': _RenderImage_fit$,
        'alignment': _RenderImage_alignment$,
        'repeat': _RenderImage_repeat$,
        'centerSlice': _RenderImage_centerSlice$,
        'invertColors': _RenderImage_invertColors$,
        'matchTextDirection': _RenderImage_matchTextDirection$,
        'textDirection': _RenderImage_textDirection$,
        'isAntiAlias': _RenderImage_isAntiAlias$,
        'computeMinIntrinsicWidth': _RenderImage_computeMinIntrinsicWidth$,
        'computeMaxIntrinsicWidth': _RenderImage_computeMaxIntrinsicWidth$,
        'computeMinIntrinsicHeight': _RenderImage_computeMinIntrinsicHeight$,
        'computeMaxIntrinsicHeight': _RenderImage_computeMaxIntrinsicHeight$,
        'hitTestSelf': _RenderImage_hitTestSelf$,
        'computeDryLayout': _RenderImage_computeDryLayout$,
        'performLayout': _RenderImage_performLayout$,
        'attach': _RenderImage_attach$,
        'detach': _RenderImage_detach$,
        'paint': _RenderImage_paint$,
        'dispose': _RenderImage_dispose$,
        'debugFillProperties': _RenderImage_debugFillProperties$,
      },
      {
        'debugImageLabel': _RenderImage_debugImageLabel_set$,
        'image': _RenderImage_image_set$,
        'width': _RenderImage_width_set$,
        'height': _RenderImage_height_set$,
        'scale': _RenderImage_scale_set$,
        'color': _RenderImage_color_set$,
        'opacity': _RenderImage_opacity_set$,
        'filterQuality': _RenderImage_filterQuality_set$,
        'colorBlendMode': _RenderImage_colorBlendMode_set$,
        'fit': _RenderImage_fit_set$,
        'alignment': _RenderImage_alignment_set$,
        'repeat': _RenderImage_repeat_set$,
        'centerSlice': _RenderImage_centerSlice_set$,
        'invertColors': _RenderImage_invertColors_set$,
        'matchTextDirection': _RenderImage_matchTextDirection_set$,
        'textDirection': _RenderImage_textDirection_set$,
        'isAntiAlias': _RenderImage_isAntiAlias_set$,
      },
    )
  },
);
String? _RenderImage_debugImageLabel$(RenderImage target) {
  return target.debugImageLabel;
}

void _RenderImage_debugImageLabel_set$(
  RenderImage target,
  String? other,
) {
  target.debugImageLabel = other;
}

Image? _RenderImage_image$(RenderImage target) {
  return target.image;
}

void _RenderImage_image_set$(
  RenderImage target,
  Image? other,
) {
  target.image = other;
}

double? _RenderImage_width$(RenderImage target) {
  return target.width;
}

void _RenderImage_width_set$(
  RenderImage target,
  double? other,
) {
  target.width = other;
}

double? _RenderImage_height$(RenderImage target) {
  return target.height;
}

void _RenderImage_height_set$(
  RenderImage target,
  double? other,
) {
  target.height = other;
}

double _RenderImage_scale$(RenderImage target) {
  return target.scale;
}

void _RenderImage_scale_set$(
  RenderImage target,
  double other,
) {
  target.scale = other;
}

Color? _RenderImage_color$(RenderImage target) {
  return target.color;
}

void _RenderImage_color_set$(
  RenderImage target,
  Color? other,
) {
  target.color = other;
}

Animation<double>? _RenderImage_opacity$(RenderImage target) {
  return target.opacity;
}

void _RenderImage_opacity_set$(
  RenderImage target,
  Animation<double>? other,
) {
  target.opacity = other;
}

FilterQuality _RenderImage_filterQuality$(RenderImage target) {
  return target.filterQuality;
}

void _RenderImage_filterQuality_set$(
  RenderImage target,
  FilterQuality other,
) {
  target.filterQuality = other;
}

BlendMode? _RenderImage_colorBlendMode$(RenderImage target) {
  return target.colorBlendMode;
}

void _RenderImage_colorBlendMode_set$(
  RenderImage target,
  BlendMode? other,
) {
  target.colorBlendMode = other;
}

BoxFit? _RenderImage_fit$(RenderImage target) {
  return target.fit;
}

void _RenderImage_fit_set$(
  RenderImage target,
  BoxFit? other,
) {
  target.fit = other;
}

AlignmentGeometry _RenderImage_alignment$(RenderImage target) {
  return target.alignment;
}

void _RenderImage_alignment_set$(
  RenderImage target,
  AlignmentGeometry other,
) {
  target.alignment = other;
}

ImageRepeat _RenderImage_repeat$(RenderImage target) {
  return target.repeat;
}

void _RenderImage_repeat_set$(
  RenderImage target,
  ImageRepeat other,
) {
  target.repeat = other;
}

Rect? _RenderImage_centerSlice$(RenderImage target) {
  return target.centerSlice;
}

void _RenderImage_centerSlice_set$(
  RenderImage target,
  Rect? other,
) {
  target.centerSlice = other;
}

bool _RenderImage_invertColors$(RenderImage target) {
  return target.invertColors;
}

void _RenderImage_invertColors_set$(
  RenderImage target,
  bool other,
) {
  target.invertColors = other;
}

bool _RenderImage_matchTextDirection$(RenderImage target) {
  return target.matchTextDirection;
}

void _RenderImage_matchTextDirection_set$(
  RenderImage target,
  bool other,
) {
  target.matchTextDirection = other;
}

TextDirection? _RenderImage_textDirection$(RenderImage target) {
  return target.textDirection;
}

void _RenderImage_textDirection_set$(
  RenderImage target,
  TextDirection? other,
) {
  target.textDirection = other;
}

bool _RenderImage_isAntiAlias$(RenderImage target) {
  return target.isAntiAlias;
}

void _RenderImage_isAntiAlias_set$(
  RenderImage target,
  bool other,
) {
  target.isAntiAlias = other;
}

Function _RenderImage_computeMinIntrinsicWidth$(
  m.Scope scope,
  RenderImage target,
) =>
    target.computeMinIntrinsicWidth;
Function _RenderImage_computeMaxIntrinsicWidth$(
  m.Scope scope,
  RenderImage target,
) =>
    target.computeMaxIntrinsicWidth;
Function _RenderImage_computeMinIntrinsicHeight$(
  m.Scope scope,
  RenderImage target,
) =>
    target.computeMinIntrinsicHeight;
Function _RenderImage_computeMaxIntrinsicHeight$(
  m.Scope scope,
  RenderImage target,
) =>
    target.computeMaxIntrinsicHeight;
Function _RenderImage_hitTestSelf$(
  m.Scope scope,
  RenderImage target,
) =>
    target.hitTestSelf;
Function _RenderImage_computeDryLayout$(
  m.Scope scope,
  RenderImage target,
) =>
    target.computeDryLayout;
Function _RenderImage_performLayout$(
  m.Scope scope,
  RenderImage target,
) =>
    target.performLayout;
Function _RenderImage_attach$(
  m.Scope scope,
  RenderImage target,
) =>
    target.attach;
Function _RenderImage_detach$(
  m.Scope scope,
  RenderImage target,
) =>
    target.detach;
Function _RenderImage_paint$(
  m.Scope scope,
  RenderImage target,
) =>
    target.paint;
Function _RenderImage_dispose$(
  m.Scope scope,
  RenderImage target,
) =>
    target.dispose;
Function _RenderImage_debugFillProperties$(
  m.Scope scope,
  RenderImage target,
) =>
    target.debugFillProperties;
