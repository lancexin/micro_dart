// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/theme_data.dart';
import 'dart:ui' show Color, lerpDouble;
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/material/action_buttons.dart';
import 'package:flutter/src/material/action_icons_theme.dart';
import 'package:flutter/src/material/app_bar_theme.dart';
import 'package:flutter/src/material/badge_theme.dart';
import 'package:flutter/src/material/banner_theme.dart';
import 'package:flutter/src/material/bottom_app_bar_theme.dart';
import 'package:flutter/src/material/bottom_navigation_bar_theme.dart';
import 'package:flutter/src/material/bottom_sheet_theme.dart';
import 'package:flutter/src/material/button_bar_theme.dart';
import 'package:flutter/src/material/button_theme.dart';
import 'package:flutter/src/material/card_theme.dart';
import 'package:flutter/src/material/checkbox_theme.dart';
import 'package:flutter/src/material/chip_theme.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/data_table_theme.dart';
import 'package:flutter/src/material/date_picker_theme.dart';
import 'package:flutter/src/material/dialog_theme.dart';
import 'package:flutter/src/material/divider_theme.dart';
import 'package:flutter/src/material/drawer_theme.dart';
import 'package:flutter/src/material/dropdown_menu_theme.dart';
import 'package:flutter/src/material/elevated_button_theme.dart';
import 'package:flutter/src/material/expansion_tile_theme.dart';
import 'package:flutter/src/material/filled_button_theme.dart';
import 'package:flutter/src/material/floating_action_button_theme.dart';
import 'package:flutter/src/material/icon_button_theme.dart';
import 'package:flutter/src/material/ink_ripple.dart';
import 'package:flutter/src/material/ink_sparkle.dart';
import 'package:flutter/src/material/ink_splash.dart';
import 'package:flutter/src/material/ink_well.dart'
    show InteractiveInkFeatureFactory;
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'package:flutter/src/material/list_tile_theme.dart';
import 'package:flutter/src/material/menu_bar_theme.dart';
import 'package:flutter/src/material/menu_button_theme.dart';
import 'package:flutter/src/material/menu_theme.dart';
import 'package:flutter/src/material/navigation_bar_theme.dart';
import 'package:flutter/src/material/navigation_drawer_theme.dart';
import 'package:flutter/src/material/navigation_rail_theme.dart';
import 'package:flutter/src/material/outlined_button_theme.dart';
import 'package:flutter/src/material/page_transitions_theme.dart';
import 'package:flutter/src/material/popup_menu_theme.dart';
import 'package:flutter/src/material/progress_indicator_theme.dart';
import 'package:flutter/src/material/radio_theme.dart';
import 'package:flutter/src/material/scrollbar_theme.dart';
import 'package:flutter/src/material/search_bar_theme.dart';
import 'package:flutter/src/material/search_view_theme.dart';
import 'package:flutter/src/material/segmented_button_theme.dart';
import 'package:flutter/src/material/slider_theme.dart';
import 'package:flutter/src/material/snack_bar_theme.dart';
import 'package:flutter/src/material/switch_theme.dart';
import 'package:flutter/src/material/tab_bar_theme.dart';
import 'package:flutter/src/material/text_button_theme.dart';
import 'package:flutter/src/material/text_selection_theme.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/time_picker_theme.dart';
import 'package:flutter/src/material/toggle_buttons_theme.dart';
import 'package:flutter/src/material/tooltip_theme.dart';
import 'package:flutter/src/material/typography.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/theme_data.dart',
  {
    'ThemeData.localize': _ThemeData_localize$,
    'ThemeData.estimateBrightnessForColor':
        _ThemeData_estimateBrightnessForColor$,
    'ThemeData.lerp': _ThemeData_lerp$,
    'VisualDensity.minimumDensity': _VisualDensity_minimumDensity$,
    'VisualDensity.maximumDensity': _VisualDensity_maximumDensity$,
    'VisualDensity.standard': _VisualDensity_standard$,
    'VisualDensity.comfortable': _VisualDensity_comfortable$,
    'VisualDensity.compact': _VisualDensity_compact$,
    'VisualDensity.adaptivePlatformDensity':
        _VisualDensity_adaptivePlatformDensity$,
    'VisualDensity.defaultDensityForPlatform':
        _VisualDensity_defaultDensityForPlatform$,
    'VisualDensity.lerp': _VisualDensity_lerp$,
    'MaterialTapTargetSize.padded': _MaterialTapTargetSize_padded$,
    'MaterialTapTargetSize.shrinkWrap': _MaterialTapTargetSize_shrinkWrap$,
    'MaterialTapTargetSize.values': _MaterialTapTargetSize_values$,
  },
  {},
  {
    'ThemeExtension': m.ClassMirror(
      'ThemeExtension',
      {
        'type': _ThemeExtension_type$,
        'copyWith': _ThemeExtension_copyWith$,
        'lerp': _ThemeExtension_lerp$,
      },
      {},
    ),
    'ThemeData': m.ClassMirror(
      'ThemeData',
      {
        'applyElevationOverlayColor': _ThemeData_applyElevationOverlayColor$,
        'cupertinoOverrideTheme': _ThemeData_cupertinoOverrideTheme$,
        'extensions': _ThemeData_extensions$,
        'inputDecorationTheme': _ThemeData_inputDecorationTheme$,
        'materialTapTargetSize': _ThemeData_materialTapTargetSize$,
        'pageTransitionsTheme': _ThemeData_pageTransitionsTheme$,
        'platform': _ThemeData_platform$,
        'scrollbarTheme': _ThemeData_scrollbarTheme$,
        'splashFactory': _ThemeData_splashFactory$,
        'useMaterial3': _ThemeData_useMaterial3$,
        'visualDensity': _ThemeData_visualDensity$,
        'canvasColor': _ThemeData_canvasColor$,
        'cardColor': _ThemeData_cardColor$,
        'colorScheme': _ThemeData_colorScheme$,
        'dialogBackgroundColor': _ThemeData_dialogBackgroundColor$,
        'disabledColor': _ThemeData_disabledColor$,
        'dividerColor': _ThemeData_dividerColor$,
        'focusColor': _ThemeData_focusColor$,
        'highlightColor': _ThemeData_highlightColor$,
        'hintColor': _ThemeData_hintColor$,
        'hoverColor': _ThemeData_hoverColor$,
        'indicatorColor': _ThemeData_indicatorColor$,
        'primaryColor': _ThemeData_primaryColor$,
        'primaryColorDark': _ThemeData_primaryColorDark$,
        'primaryColorLight': _ThemeData_primaryColorLight$,
        'scaffoldBackgroundColor': _ThemeData_scaffoldBackgroundColor$,
        'secondaryHeaderColor': _ThemeData_secondaryHeaderColor$,
        'shadowColor': _ThemeData_shadowColor$,
        'splashColor': _ThemeData_splashColor$,
        'unselectedWidgetColor': _ThemeData_unselectedWidgetColor$,
        'iconTheme': _ThemeData_iconTheme$,
        'primaryIconTheme': _ThemeData_primaryIconTheme$,
        'primaryTextTheme': _ThemeData_primaryTextTheme$,
        'textTheme': _ThemeData_textTheme$,
        'typography': _ThemeData_typography$,
        'actionIconTheme': _ThemeData_actionIconTheme$,
        'appBarTheme': _ThemeData_appBarTheme$,
        'badgeTheme': _ThemeData_badgeTheme$,
        'bannerTheme': _ThemeData_bannerTheme$,
        'bottomAppBarTheme': _ThemeData_bottomAppBarTheme$,
        'bottomNavigationBarTheme': _ThemeData_bottomNavigationBarTheme$,
        'bottomSheetTheme': _ThemeData_bottomSheetTheme$,
        'buttonBarTheme': _ThemeData_buttonBarTheme$,
        'buttonTheme': _ThemeData_buttonTheme$,
        'cardTheme': _ThemeData_cardTheme$,
        'checkboxTheme': _ThemeData_checkboxTheme$,
        'chipTheme': _ThemeData_chipTheme$,
        'dataTableTheme': _ThemeData_dataTableTheme$,
        'datePickerTheme': _ThemeData_datePickerTheme$,
        'dialogTheme': _ThemeData_dialogTheme$,
        'dividerTheme': _ThemeData_dividerTheme$,
        'drawerTheme': _ThemeData_drawerTheme$,
        'dropdownMenuTheme': _ThemeData_dropdownMenuTheme$,
        'elevatedButtonTheme': _ThemeData_elevatedButtonTheme$,
        'expansionTileTheme': _ThemeData_expansionTileTheme$,
        'filledButtonTheme': _ThemeData_filledButtonTheme$,
        'floatingActionButtonTheme': _ThemeData_floatingActionButtonTheme$,
        'iconButtonTheme': _ThemeData_iconButtonTheme$,
        'listTileTheme': _ThemeData_listTileTheme$,
        'menuBarTheme': _ThemeData_menuBarTheme$,
        'menuButtonTheme': _ThemeData_menuButtonTheme$,
        'menuTheme': _ThemeData_menuTheme$,
        'navigationBarTheme': _ThemeData_navigationBarTheme$,
        'navigationDrawerTheme': _ThemeData_navigationDrawerTheme$,
        'navigationRailTheme': _ThemeData_navigationRailTheme$,
        'outlinedButtonTheme': _ThemeData_outlinedButtonTheme$,
        'popupMenuTheme': _ThemeData_popupMenuTheme$,
        'progressIndicatorTheme': _ThemeData_progressIndicatorTheme$,
        'radioTheme': _ThemeData_radioTheme$,
        'searchBarTheme': _ThemeData_searchBarTheme$,
        'searchViewTheme': _ThemeData_searchViewTheme$,
        'segmentedButtonTheme': _ThemeData_segmentedButtonTheme$,
        'sliderTheme': _ThemeData_sliderTheme$,
        'snackBarTheme': _ThemeData_snackBarTheme$,
        'switchTheme': _ThemeData_switchTheme$,
        'tabBarTheme': _ThemeData_tabBarTheme$,
        'textButtonTheme': _ThemeData_textButtonTheme$,
        'textSelectionTheme': _ThemeData_textSelectionTheme$,
        'timePickerTheme': _ThemeData_timePickerTheme$,
        'toggleButtonsTheme': _ThemeData_toggleButtonsTheme$,
        'tooltipTheme': _ThemeData_tooltipTheme$,
        'androidOverscrollIndicator': _ThemeData_androidOverscrollIndicator$,
        'brightness': _ThemeData_brightness$,
        'hashCode': _ThemeData_hashCode$,
        'extension': _ThemeData_extension$,
        'copyWith': _ThemeData_copyWith$,
        'debugFillProperties': _ThemeData_debugFillProperties$,
      },
      {},
    ),
    'MaterialBasedCupertinoThemeData': m.ClassMirror(
      'MaterialBasedCupertinoThemeData',
      {
        'brightness': _MaterialBasedCupertinoThemeData_brightness$,
        'primaryColor': _MaterialBasedCupertinoThemeData_primaryColor$,
        'primaryContrastingColor':
            _MaterialBasedCupertinoThemeData_primaryContrastingColor$,
        'scaffoldBackgroundColor':
            _MaterialBasedCupertinoThemeData_scaffoldBackgroundColor$,
        'copyWith': _MaterialBasedCupertinoThemeData_copyWith$,
        'resolveFrom': _MaterialBasedCupertinoThemeData_resolveFrom$,
      },
      {},
    ),
    'VisualDensity': m.ClassMirror(
      'VisualDensity',
      {
        'horizontal': _VisualDensity_horizontal$,
        'vertical': _VisualDensity_vertical$,
        'baseSizeAdjustment': _VisualDensity_baseSizeAdjustment$,
        'hashCode': _VisualDensity_hashCode$,
        'copyWith': _VisualDensity_copyWith$,
        'effectiveConstraints': _VisualDensity_effectiveConstraints$,
        'debugFillProperties': _VisualDensity_debugFillProperties$,
        'toStringShort': _VisualDensity_toStringShort$,
      },
      {},
    ),
    'MaterialTapTargetSize': m.ClassMirror(
      'MaterialTapTargetSize',
      {},
      {},
    ),
  },
);
Object _ThemeExtension_type$<T extends ThemeExtension<T>>(
    ThemeExtension<T> target) {
  return target.type;
}

Function _ThemeExtension_copyWith$<T extends ThemeExtension<T>>(
  m.Scope scope,
  ThemeExtension<T> target,
) =>
    target.copyWith;
Function _ThemeExtension_lerp$<T extends ThemeExtension<T>>(
  m.Scope scope,
  ThemeExtension<T> target,
) =>
    target.lerp;
bool _ThemeData_applyElevationOverlayColor$(ThemeData target) {
  return target.applyElevationOverlayColor;
}

NoDefaultCupertinoThemeData? _ThemeData_cupertinoOverrideTheme$(
    ThemeData target) {
  return target.cupertinoOverrideTheme;
}

Map<Object, ThemeExtension<dynamic>> _ThemeData_extensions$(ThemeData target) {
  return target.extensions;
}

InputDecorationTheme _ThemeData_inputDecorationTheme$(ThemeData target) {
  return target.inputDecorationTheme;
}

MaterialTapTargetSize _ThemeData_materialTapTargetSize$(ThemeData target) {
  return target.materialTapTargetSize;
}

PageTransitionsTheme _ThemeData_pageTransitionsTheme$(ThemeData target) {
  return target.pageTransitionsTheme;
}

TargetPlatform _ThemeData_platform$(ThemeData target) {
  return target.platform;
}

ScrollbarThemeData _ThemeData_scrollbarTheme$(ThemeData target) {
  return target.scrollbarTheme;
}

InteractiveInkFeatureFactory _ThemeData_splashFactory$(ThemeData target) {
  return target.splashFactory;
}

bool _ThemeData_useMaterial3$(ThemeData target) {
  return target.useMaterial3;
}

VisualDensity _ThemeData_visualDensity$(ThemeData target) {
  return target.visualDensity;
}

Color _ThemeData_canvasColor$(ThemeData target) {
  return target.canvasColor;
}

Color _ThemeData_cardColor$(ThemeData target) {
  return target.cardColor;
}

ColorScheme _ThemeData_colorScheme$(ThemeData target) {
  return target.colorScheme;
}

Color _ThemeData_dialogBackgroundColor$(ThemeData target) {
  return target.dialogBackgroundColor;
}

Color _ThemeData_disabledColor$(ThemeData target) {
  return target.disabledColor;
}

Color _ThemeData_dividerColor$(ThemeData target) {
  return target.dividerColor;
}

Color _ThemeData_focusColor$(ThemeData target) {
  return target.focusColor;
}

Color _ThemeData_highlightColor$(ThemeData target) {
  return target.highlightColor;
}

Color _ThemeData_hintColor$(ThemeData target) {
  return target.hintColor;
}

Color _ThemeData_hoverColor$(ThemeData target) {
  return target.hoverColor;
}

Color _ThemeData_indicatorColor$(ThemeData target) {
  return target.indicatorColor;
}

Color _ThemeData_primaryColor$(ThemeData target) {
  return target.primaryColor;
}

Color _ThemeData_primaryColorDark$(ThemeData target) {
  return target.primaryColorDark;
}

Color _ThemeData_primaryColorLight$(ThemeData target) {
  return target.primaryColorLight;
}

Color _ThemeData_scaffoldBackgroundColor$(ThemeData target) {
  return target.scaffoldBackgroundColor;
}

Color _ThemeData_secondaryHeaderColor$(ThemeData target) {
  return target.secondaryHeaderColor;
}

Color _ThemeData_shadowColor$(ThemeData target) {
  return target.shadowColor;
}

Color _ThemeData_splashColor$(ThemeData target) {
  return target.splashColor;
}

Color _ThemeData_unselectedWidgetColor$(ThemeData target) {
  return target.unselectedWidgetColor;
}

IconThemeData _ThemeData_iconTheme$(ThemeData target) {
  return target.iconTheme;
}

IconThemeData _ThemeData_primaryIconTheme$(ThemeData target) {
  return target.primaryIconTheme;
}

TextTheme _ThemeData_primaryTextTheme$(ThemeData target) {
  return target.primaryTextTheme;
}

TextTheme _ThemeData_textTheme$(ThemeData target) {
  return target.textTheme;
}

Typography _ThemeData_typography$(ThemeData target) {
  return target.typography;
}

ActionIconThemeData? _ThemeData_actionIconTheme$(ThemeData target) {
  return target.actionIconTheme;
}

AppBarTheme _ThemeData_appBarTheme$(ThemeData target) {
  return target.appBarTheme;
}

BadgeThemeData _ThemeData_badgeTheme$(ThemeData target) {
  return target.badgeTheme;
}

MaterialBannerThemeData _ThemeData_bannerTheme$(ThemeData target) {
  return target.bannerTheme;
}

BottomAppBarTheme _ThemeData_bottomAppBarTheme$(ThemeData target) {
  return target.bottomAppBarTheme;
}

BottomNavigationBarThemeData _ThemeData_bottomNavigationBarTheme$(
    ThemeData target) {
  return target.bottomNavigationBarTheme;
}

BottomSheetThemeData _ThemeData_bottomSheetTheme$(ThemeData target) {
  return target.bottomSheetTheme;
}

ButtonBarThemeData _ThemeData_buttonBarTheme$(ThemeData target) {
  return target.buttonBarTheme;
}

ButtonThemeData _ThemeData_buttonTheme$(ThemeData target) {
  return target.buttonTheme;
}

CardTheme _ThemeData_cardTheme$(ThemeData target) {
  return target.cardTheme;
}

CheckboxThemeData _ThemeData_checkboxTheme$(ThemeData target) {
  return target.checkboxTheme;
}

ChipThemeData _ThemeData_chipTheme$(ThemeData target) {
  return target.chipTheme;
}

DataTableThemeData _ThemeData_dataTableTheme$(ThemeData target) {
  return target.dataTableTheme;
}

DatePickerThemeData _ThemeData_datePickerTheme$(ThemeData target) {
  return target.datePickerTheme;
}

DialogTheme _ThemeData_dialogTheme$(ThemeData target) {
  return target.dialogTheme;
}

DividerThemeData _ThemeData_dividerTheme$(ThemeData target) {
  return target.dividerTheme;
}

DrawerThemeData _ThemeData_drawerTheme$(ThemeData target) {
  return target.drawerTheme;
}

DropdownMenuThemeData _ThemeData_dropdownMenuTheme$(ThemeData target) {
  return target.dropdownMenuTheme;
}

ElevatedButtonThemeData _ThemeData_elevatedButtonTheme$(ThemeData target) {
  return target.elevatedButtonTheme;
}

ExpansionTileThemeData _ThemeData_expansionTileTheme$(ThemeData target) {
  return target.expansionTileTheme;
}

FilledButtonThemeData _ThemeData_filledButtonTheme$(ThemeData target) {
  return target.filledButtonTheme;
}

FloatingActionButtonThemeData _ThemeData_floatingActionButtonTheme$(
    ThemeData target) {
  return target.floatingActionButtonTheme;
}

IconButtonThemeData _ThemeData_iconButtonTheme$(ThemeData target) {
  return target.iconButtonTheme;
}

ListTileThemeData _ThemeData_listTileTheme$(ThemeData target) {
  return target.listTileTheme;
}

MenuBarThemeData _ThemeData_menuBarTheme$(ThemeData target) {
  return target.menuBarTheme;
}

MenuButtonThemeData _ThemeData_menuButtonTheme$(ThemeData target) {
  return target.menuButtonTheme;
}

MenuThemeData _ThemeData_menuTheme$(ThemeData target) {
  return target.menuTheme;
}

NavigationBarThemeData _ThemeData_navigationBarTheme$(ThemeData target) {
  return target.navigationBarTheme;
}

NavigationDrawerThemeData _ThemeData_navigationDrawerTheme$(ThemeData target) {
  return target.navigationDrawerTheme;
}

NavigationRailThemeData _ThemeData_navigationRailTheme$(ThemeData target) {
  return target.navigationRailTheme;
}

OutlinedButtonThemeData _ThemeData_outlinedButtonTheme$(ThemeData target) {
  return target.outlinedButtonTheme;
}

PopupMenuThemeData _ThemeData_popupMenuTheme$(ThemeData target) {
  return target.popupMenuTheme;
}

ProgressIndicatorThemeData _ThemeData_progressIndicatorTheme$(
    ThemeData target) {
  return target.progressIndicatorTheme;
}

RadioThemeData _ThemeData_radioTheme$(ThemeData target) {
  return target.radioTheme;
}

SearchBarThemeData _ThemeData_searchBarTheme$(ThemeData target) {
  return target.searchBarTheme;
}

SearchViewThemeData _ThemeData_searchViewTheme$(ThemeData target) {
  return target.searchViewTheme;
}

SegmentedButtonThemeData _ThemeData_segmentedButtonTheme$(ThemeData target) {
  return target.segmentedButtonTheme;
}

SliderThemeData _ThemeData_sliderTheme$(ThemeData target) {
  return target.sliderTheme;
}

SnackBarThemeData _ThemeData_snackBarTheme$(ThemeData target) {
  return target.snackBarTheme;
}

SwitchThemeData _ThemeData_switchTheme$(ThemeData target) {
  return target.switchTheme;
}

TabBarTheme _ThemeData_tabBarTheme$(ThemeData target) {
  return target.tabBarTheme;
}

TextButtonThemeData _ThemeData_textButtonTheme$(ThemeData target) {
  return target.textButtonTheme;
}

TextSelectionThemeData _ThemeData_textSelectionTheme$(ThemeData target) {
  return target.textSelectionTheme;
}

TimePickerThemeData _ThemeData_timePickerTheme$(ThemeData target) {
  return target.timePickerTheme;
}

ToggleButtonsThemeData _ThemeData_toggleButtonsTheme$(ThemeData target) {
  return target.toggleButtonsTheme;
}

TooltipThemeData _ThemeData_tooltipTheme$(ThemeData target) {
  return target.tooltipTheme;
}

AndroidOverscrollIndicator? _ThemeData_androidOverscrollIndicator$(
    ThemeData target) {
  return target.androidOverscrollIndicator;
}

Brightness _ThemeData_brightness$(ThemeData target) {
  return target.brightness;
}

int _ThemeData_hashCode$(ThemeData target) {
  return target.hashCode;
}

Function _ThemeData_extension$<T>(
  m.Scope scope,
  ThemeData target,
) =>
    target.extension<T>;
Function _ThemeData_copyWith$(
  m.Scope scope,
  ThemeData target,
) =>
    target.copyWith;
Function _ThemeData_localize$(m.Scope scope) => ThemeData.localize;
Function _ThemeData_estimateBrightnessForColor$(m.Scope scope) =>
    ThemeData.estimateBrightnessForColor;
Function _ThemeData_lerp$(m.Scope scope) => ThemeData.lerp;
Function _ThemeData_debugFillProperties$(
  m.Scope scope,
  ThemeData target,
) =>
    target.debugFillProperties;
Brightness _MaterialBasedCupertinoThemeData_brightness$(
    MaterialBasedCupertinoThemeData target) {
  return target.brightness;
}

Color _MaterialBasedCupertinoThemeData_primaryColor$(
    MaterialBasedCupertinoThemeData target) {
  return target.primaryColor;
}

Color _MaterialBasedCupertinoThemeData_primaryContrastingColor$(
    MaterialBasedCupertinoThemeData target) {
  return target.primaryContrastingColor;
}

Color _MaterialBasedCupertinoThemeData_scaffoldBackgroundColor$(
    MaterialBasedCupertinoThemeData target) {
  return target.scaffoldBackgroundColor;
}

Function _MaterialBasedCupertinoThemeData_copyWith$(
  m.Scope scope,
  MaterialBasedCupertinoThemeData target,
) =>
    target.copyWith;
Function _MaterialBasedCupertinoThemeData_resolveFrom$(
  m.Scope scope,
  MaterialBasedCupertinoThemeData target,
) =>
    target.resolveFrom;
double _VisualDensity_minimumDensity$() {
  return VisualDensity.minimumDensity;
}

double _VisualDensity_maximumDensity$() {
  return VisualDensity.maximumDensity;
}

VisualDensity _VisualDensity_standard$() {
  return VisualDensity.standard;
}

VisualDensity _VisualDensity_comfortable$() {
  return VisualDensity.comfortable;
}

VisualDensity _VisualDensity_compact$() {
  return VisualDensity.compact;
}

double _VisualDensity_horizontal$(VisualDensity target) {
  return target.horizontal;
}

double _VisualDensity_vertical$(VisualDensity target) {
  return target.vertical;
}

VisualDensity _VisualDensity_adaptivePlatformDensity$() {
  return VisualDensity.adaptivePlatformDensity;
}

Offset _VisualDensity_baseSizeAdjustment$(VisualDensity target) {
  return target.baseSizeAdjustment;
}

int _VisualDensity_hashCode$(VisualDensity target) {
  return target.hashCode;
}

Function _VisualDensity_defaultDensityForPlatform$(m.Scope scope) =>
    VisualDensity.defaultDensityForPlatform;
Function _VisualDensity_copyWith$(
  m.Scope scope,
  VisualDensity target,
) =>
    target.copyWith;
Function _VisualDensity_lerp$(m.Scope scope) => VisualDensity.lerp;
Function _VisualDensity_effectiveConstraints$(
  m.Scope scope,
  VisualDensity target,
) =>
    target.effectiveConstraints;
Function _VisualDensity_debugFillProperties$(
  m.Scope scope,
  VisualDensity target,
) =>
    target.debugFillProperties;
Function _VisualDensity_toStringShort$(
  m.Scope scope,
  VisualDensity target,
) =>
    target.toStringShort;
MaterialTapTargetSize _MaterialTapTargetSize_padded$() {
  return MaterialTapTargetSize.padded;
}

MaterialTapTargetSize _MaterialTapTargetSize_shrinkWrap$() {
  return MaterialTapTargetSize.shrinkWrap;
}

List<MaterialTapTargetSize> _MaterialTapTargetSize_values$() {
  return MaterialTapTargetSize.values;
}
