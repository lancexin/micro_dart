// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/tap_region.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/editable_text.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/tap_region.dart',
  {
    'TapRegionRegistry.of': _TapRegionRegistry_of$,
    'TapRegionRegistry.maybeOf': _TapRegionRegistry_maybeOf$,
  },
  {},
  {
    'TapRegionRegistry': m.ClassMirror(
      'TapRegionRegistry',
      {
        '#as': TapRegionRegistry_as$,
        '#is': TapRegionRegistry_is$,
        'registerTapRegion': _TapRegionRegistry_registerTapRegion$,
        'unregisterTapRegion': _TapRegionRegistry_unregisterTapRegion$,
      },
      {},
    ),
    'TapRegionSurface': m.ClassMirror(
      'TapRegionSurface',
      {
        '#as': TapRegionSurface_as$,
        '#is': TapRegionSurface_is$,
        'createRenderObject': _TapRegionSurface_createRenderObject$,
        'updateRenderObject': _TapRegionSurface_updateRenderObject$,
      },
      {},
    ),
    'RenderTapRegionSurface': m.ClassMirror(
      'RenderTapRegionSurface',
      {
        '#as': RenderTapRegionSurface_as$,
        '#is': RenderTapRegionSurface_is$,
        'registerTapRegion': _RenderTapRegionSurface_registerTapRegion$,
        'unregisterTapRegion': _RenderTapRegionSurface_unregisterTapRegion$,
        'hitTest': _RenderTapRegionSurface_hitTest$,
        'handleEvent': _RenderTapRegionSurface_handleEvent$,
      },
      {},
    ),
    'TapRegion': m.ClassMirror(
      'TapRegion',
      {
        '#as': TapRegion_as$,
        '#is': TapRegion_is$,
        'enabled': _TapRegion_enabled$,
        'behavior': _TapRegion_behavior$,
        'onTapOutside': _TapRegion_onTapOutside$,
        'onTapInside': _TapRegion_onTapInside$,
        'groupId': _TapRegion_groupId$,
        'debugLabel': _TapRegion_debugLabel$,
        'createRenderObject': _TapRegion_createRenderObject$,
        'updateRenderObject': _TapRegion_updateRenderObject$,
        'debugFillProperties': _TapRegion_debugFillProperties$,
      },
      {},
    ),
    'RenderTapRegion': m.ClassMirror(
      'RenderTapRegion',
      {
        '#as': RenderTapRegion_as$,
        '#is': RenderTapRegion_is$,
        'onTapOutside': _RenderTapRegion_onTapOutside$,
        'onTapInside': _RenderTapRegion_onTapInside$,
        'debugLabel': _RenderTapRegion_debugLabel$,
        'enabled': _RenderTapRegion_enabled$,
        'groupId': _RenderTapRegion_groupId$,
        'registry': _RenderTapRegion_registry$,
        'layout': _RenderTapRegion_layout$,
        'dispose': _RenderTapRegion_dispose$,
        'debugFillProperties': _RenderTapRegion_debugFillProperties$,
      },
      {
        'onTapOutside': _RenderTapRegion_onTapOutside_set$,
        'onTapInside': _RenderTapRegion_onTapInside_set$,
        'debugLabel': _RenderTapRegion_debugLabel_set$,
        'enabled': _RenderTapRegion_enabled_set$,
        'groupId': _RenderTapRegion_groupId_set$,
        'registry': _RenderTapRegion_registry_set$,
      },
    ),
    'TextFieldTapRegion': m.ClassMirror(
      'TextFieldTapRegion',
      {
        '#as': TextFieldTapRegion_as$,
        '#is': TextFieldTapRegion_is$,
      },
      {},
    ),
  },
);
Function TapRegionRegistry_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as TapRegionRegistry;
Function TapRegionRegistry_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is TapRegionRegistry;
Function _TapRegionRegistry_registerTapRegion$(
  m.Scope scope,
  TapRegionRegistry target,
) =>
    target.registerTapRegion;
Function _TapRegionRegistry_unregisterTapRegion$(
  m.Scope scope,
  TapRegionRegistry target,
) =>
    target.unregisterTapRegion;
Function _TapRegionRegistry_of$(m.Scope scope) => TapRegionRegistry.of;
Function _TapRegionRegistry_maybeOf$(m.Scope scope) =>
    TapRegionRegistry.maybeOf;
Function TapRegionSurface_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as TapRegionSurface;
Function TapRegionSurface_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is TapRegionSurface;
Function _TapRegionSurface_createRenderObject$(
  m.Scope scope,
  TapRegionSurface target,
) =>
    target.createRenderObject;
Function _TapRegionSurface_updateRenderObject$(
  m.Scope scope,
  TapRegionSurface target,
) =>
    target.updateRenderObject;
Function RenderTapRegionSurface_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderTapRegionSurface;
Function RenderTapRegionSurface_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderTapRegionSurface;
Function _RenderTapRegionSurface_registerTapRegion$(
  m.Scope scope,
  RenderTapRegionSurface target,
) =>
    target.registerTapRegion;
Function _RenderTapRegionSurface_unregisterTapRegion$(
  m.Scope scope,
  RenderTapRegionSurface target,
) =>
    target.unregisterTapRegion;
Function _RenderTapRegionSurface_hitTest$(
  m.Scope scope,
  RenderTapRegionSurface target,
) =>
    target.hitTest;
Function _RenderTapRegionSurface_handleEvent$(
  m.Scope scope,
  RenderTapRegionSurface target,
) =>
    target.handleEvent;
Function TapRegion_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as TapRegion;
Function TapRegion_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is TapRegion;
bool _TapRegion_enabled$(TapRegion target) {
  return target.enabled;
}

HitTestBehavior _TapRegion_behavior$(TapRegion target) {
  return target.behavior;
}

void Function(PointerDownEvent)? _TapRegion_onTapOutside$(TapRegion target) {
  return target.onTapOutside;
}

void Function(PointerDownEvent)? _TapRegion_onTapInside$(TapRegion target) {
  return target.onTapInside;
}

Object? _TapRegion_groupId$(TapRegion target) {
  return target.groupId;
}

String? _TapRegion_debugLabel$(TapRegion target) {
  return target.debugLabel;
}

Function _TapRegion_createRenderObject$(
  m.Scope scope,
  TapRegion target,
) =>
    target.createRenderObject;
Function _TapRegion_updateRenderObject$(
  m.Scope scope,
  TapRegion target,
) =>
    target.updateRenderObject;
Function _TapRegion_debugFillProperties$(
  m.Scope scope,
  TapRegion target,
) =>
    target.debugFillProperties;
Function RenderTapRegion_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderTapRegion;
Function RenderTapRegion_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderTapRegion;
void Function(PointerDownEvent)? _RenderTapRegion_onTapOutside$(
    RenderTapRegion target) {
  return target.onTapOutside;
}

Function _RenderTapRegion_onTapOutside_set$(
  m.Scope scope,
  RenderTapRegion target,
) =>
    (m.FunctionPointer? _onTapOutside) {
      void _onTapOutsideProxy(PointerDownEvent _onTapOutside_event) =>
          scope.engine.callFunctionPointer(
            scope,
            _onTapOutside!,
            [_onTapOutside_event],
            {},
          );
      target.onTapOutside = (_onTapOutside == null ? null : _onTapOutsideProxy);
    };
void Function(PointerDownEvent)? _RenderTapRegion_onTapInside$(
    RenderTapRegion target) {
  return target.onTapInside;
}

Function _RenderTapRegion_onTapInside_set$(
  m.Scope scope,
  RenderTapRegion target,
) =>
    (m.FunctionPointer? _onTapInside) {
      void _onTapInsideProxy(PointerDownEvent _onTapInside_event) =>
          scope.engine.callFunctionPointer(
            scope,
            _onTapInside!,
            [_onTapInside_event],
            {},
          );
      target.onTapInside = (_onTapInside == null ? null : _onTapInsideProxy);
    };
String? _RenderTapRegion_debugLabel$(RenderTapRegion target) {
  return target.debugLabel;
}

void _RenderTapRegion_debugLabel_set$(
  RenderTapRegion target,
  String? other,
) {
  target.debugLabel = other;
}

bool _RenderTapRegion_enabled$(RenderTapRegion target) {
  return target.enabled;
}

void _RenderTapRegion_enabled_set$(
  RenderTapRegion target,
  bool other,
) {
  target.enabled = other;
}

Object? _RenderTapRegion_groupId$(RenderTapRegion target) {
  return target.groupId;
}

void _RenderTapRegion_groupId_set$(
  RenderTapRegion target,
  Object? other,
) {
  target.groupId = other;
}

TapRegionRegistry? _RenderTapRegion_registry$(RenderTapRegion target) {
  return target.registry;
}

void _RenderTapRegion_registry_set$(
  RenderTapRegion target,
  TapRegionRegistry? other,
) {
  target.registry = other;
}

Function _RenderTapRegion_layout$(
  m.Scope scope,
  RenderTapRegion target,
) =>
    target.layout;
Function _RenderTapRegion_dispose$(
  m.Scope scope,
  RenderTapRegion target,
) =>
    target.dispose;
Function _RenderTapRegion_debugFillProperties$(
  m.Scope scope,
  RenderTapRegion target,
) =>
    target.debugFillProperties;
Function TextFieldTapRegion_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as TextFieldTapRegion;
Function TextFieldTapRegion_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is TextFieldTapRegion;
