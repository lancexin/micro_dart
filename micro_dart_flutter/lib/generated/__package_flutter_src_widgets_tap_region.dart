// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/tap_region.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/editable_text.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/tap_region.dart',
  {
    'TapRegionRegistry.of': _TapRegionRegistry_of$,
    'TapRegionRegistry.maybeOf': _TapRegionRegistry_maybeOf$,
    'TapRegionSurface.': _TapRegionSurface__$,
    'RenderTapRegionSurface.': _RenderTapRegionSurface__$,
    'TapRegion.': _TapRegion__$,
    'RenderTapRegion.': _RenderTapRegion__$,
    'TextFieldTapRegion.': _TextFieldTapRegion__$,
  },
  {},
  {
    'TapRegionRegistry': m.ClassMirror(
      'TapRegionRegistry',
      {
        '#as': TapRegionRegistry_as$,
        '#is': TapRegionRegistry_is$,
        'registerTapRegion': _TapRegionRegistry_registerTapRegion$,
        'unregisterTapRegion': _TapRegionRegistry_unregisterTapRegion$,
      },
      {},
    ),
    'TapRegionSurface': m.ClassMirror(
      'TapRegionSurface',
      {
        '#as': TapRegionSurface_as$,
        '#is': TapRegionSurface_is$,
        'createRenderObject': _TapRegionSurface_createRenderObject$,
        'updateRenderObject': _TapRegionSurface_updateRenderObject$,
      },
      {},
    ),
    'RenderTapRegionSurface': m.ClassMirror(
      'RenderTapRegionSurface',
      {
        '#as': RenderTapRegionSurface_as$,
        '#is': RenderTapRegionSurface_is$,
        'registerTapRegion': _RenderTapRegionSurface_registerTapRegion$,
        'unregisterTapRegion': _RenderTapRegionSurface_unregisterTapRegion$,
        'hitTest': _RenderTapRegionSurface_hitTest$,
        'handleEvent': _RenderTapRegionSurface_handleEvent$,
      },
      {},
    ),
    'TapRegion': m.ClassMirror(
      'TapRegion',
      {
        '#as': TapRegion_as$,
        '#is': TapRegion_is$,
        'enabled': _TapRegion_enabled$,
        'behavior': _TapRegion_behavior$,
        'onTapOutside': _TapRegion_onTapOutside$,
        'onTapInside': _TapRegion_onTapInside$,
        'groupId': _TapRegion_groupId$,
        'debugLabel': _TapRegion_debugLabel$,
        'createRenderObject': _TapRegion_createRenderObject$,
        'updateRenderObject': _TapRegion_updateRenderObject$,
        'debugFillProperties': _TapRegion_debugFillProperties$,
      },
      {},
    ),
    'RenderTapRegion': m.ClassMirror(
      'RenderTapRegion',
      {
        '#as': RenderTapRegion_as$,
        '#is': RenderTapRegion_is$,
        'onTapOutside': _RenderTapRegion_onTapOutside$,
        'onTapInside': _RenderTapRegion_onTapInside$,
        'debugLabel': _RenderTapRegion_debugLabel$,
        'enabled': _RenderTapRegion_enabled$,
        'groupId': _RenderTapRegion_groupId$,
        'registry': _RenderTapRegion_registry$,
        'layout': _RenderTapRegion_layout$,
        'dispose': _RenderTapRegion_dispose$,
        'debugFillProperties': _RenderTapRegion_debugFillProperties$,
      },
      {
        'onTapOutside': _RenderTapRegion_onTapOutside_set$,
        'onTapInside': _RenderTapRegion_onTapInside_set$,
        'debugLabel': _RenderTapRegion_debugLabel_set$,
        'enabled': _RenderTapRegion_enabled_set$,
        'groupId': _RenderTapRegion_groupId_set$,
        'registry': _RenderTapRegion_registry_set$,
      },
    ),
    'TextFieldTapRegion': m.ClassMirror(
      'TextFieldTapRegion',
      {
        '#as': TextFieldTapRegion_as$,
        '#is': TextFieldTapRegion_is$,
      },
      {},
    ),
  },
);
Function TapRegionRegistry_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TapRegionRegistry;
Function TapRegionRegistry_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TapRegionRegistry;
Function _TapRegionRegistry_registerTapRegion$(
  m.Scope scope$,
  TapRegionRegistry target$,
) =>
    target$.registerTapRegion;
Function _TapRegionRegistry_unregisterTapRegion$(
  m.Scope scope$,
  TapRegionRegistry target$,
) =>
    target$.unregisterTapRegion;
Function _TapRegionRegistry_of$(m.Scope scope$) => TapRegionRegistry.of;
Function _TapRegionRegistry_maybeOf$(m.Scope scope$) =>
    TapRegionRegistry.maybeOf;
Function TapRegionSurface_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TapRegionSurface;
Function TapRegionSurface_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TapRegionSurface;
Function _TapRegionSurface__$(m.Scope scope$) => ({
      Key? key,
      required Widget child,
    }) {
      return TapRegionSurface(
        child: child,
        key: key,
      );
    };
Function _TapRegionSurface_createRenderObject$(
  m.Scope scope$,
  TapRegionSurface target$,
) =>
    target$.createRenderObject;
Function _TapRegionSurface_updateRenderObject$(
  m.Scope scope$,
  TapRegionSurface target$,
) =>
    target$.updateRenderObject;
Function RenderTapRegionSurface_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RenderTapRegionSurface;
Function RenderTapRegionSurface_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RenderTapRegionSurface;
Function _RenderTapRegionSurface__$(m.Scope scope$) => () {
      return RenderTapRegionSurface();
    };
Function _RenderTapRegionSurface_registerTapRegion$(
  m.Scope scope$,
  RenderTapRegionSurface target$,
) =>
    target$.registerTapRegion;
Function _RenderTapRegionSurface_unregisterTapRegion$(
  m.Scope scope$,
  RenderTapRegionSurface target$,
) =>
    target$.unregisterTapRegion;
Function _RenderTapRegionSurface_hitTest$(
  m.Scope scope$,
  RenderTapRegionSurface target$,
) =>
    target$.hitTest;
Function _RenderTapRegionSurface_handleEvent$(
  m.Scope scope$,
  RenderTapRegionSurface target$,
) =>
    target$.handleEvent;
Function TapRegion_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TapRegion;
Function TapRegion_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TapRegion;
Function _TapRegion_enabled$(
  m.Scope scope$,
  TapRegion target$,
) =>
    () {
      return target$.enabled;
    };
Function _TapRegion_behavior$(
  m.Scope scope$,
  TapRegion target$,
) =>
    () {
      return target$.behavior;
    };
Function _TapRegion_onTapOutside$(
  m.Scope scope$,
  TapRegion target$,
) =>
    () {
      return target$.onTapOutside;
    };
Function _TapRegion_onTapInside$(
  m.Scope scope$,
  TapRegion target$,
) =>
    () {
      return target$.onTapInside;
    };
Function _TapRegion_groupId$(
  m.Scope scope$,
  TapRegion target$,
) =>
    () {
      return target$.groupId;
    };
Function _TapRegion_debugLabel$(
  m.Scope scope$,
  TapRegion target$,
) =>
    () {
      return target$.debugLabel;
    };
Function _TapRegion__$(m.Scope scope$) => ({
      Key? key,
      required Widget? child,
      bool? enabled,
      HitTestBehavior? behavior,
      m.FunctionPointer? onTapOutside,
      m.FunctionPointer? onTapInside,
      Object? groupId,
      String? debugLabel,
    }) {
      void onTapInsideProxy(PointerDownEvent onTapInside_event$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onTapInside!,
            [onTapInside_event$],
            {},
          );
      void onTapOutsideProxy(PointerDownEvent onTapOutside_event$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onTapOutside!,
            [onTapOutside_event$],
            {},
          );
      return TapRegion(
        behavior: behavior ?? HitTestBehavior.deferToChild,
        child: child,
        debugLabel: debugLabel,
        enabled: enabled ?? true,
        groupId: groupId,
        key: key,
        onTapInside: onTapInside == null ? null : onTapInsideProxy,
        onTapOutside: onTapOutside == null ? null : onTapOutsideProxy,
      );
    };
Function _TapRegion_createRenderObject$(
  m.Scope scope$,
  TapRegion target$,
) =>
    target$.createRenderObject;
Function _TapRegion_updateRenderObject$(
  m.Scope scope$,
  TapRegion target$,
) =>
    target$.updateRenderObject;
Function _TapRegion_debugFillProperties$(
  m.Scope scope$,
  TapRegion target$,
) =>
    target$.debugFillProperties;
Function RenderTapRegion_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RenderTapRegion;
Function RenderTapRegion_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RenderTapRegion;
Function _RenderTapRegion_onTapOutside$(
  m.Scope scope$,
  RenderTapRegion target$,
) =>
    () {
      return target$.onTapOutside;
    };
Function _RenderTapRegion_onTapOutside_set$(
  m.Scope scope$,
  RenderTapRegion target$,
) =>
    (m.FunctionPointer? _onTapOutside) {
      void _onTapOutsideProxy(PointerDownEvent _onTapOutside_event$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            _onTapOutside!,
            [_onTapOutside_event$],
            {},
          );
      target$.onTapOutside =
          (_onTapOutside == null ? null : _onTapOutsideProxy);
    };
Function _RenderTapRegion_onTapInside$(
  m.Scope scope$,
  RenderTapRegion target$,
) =>
    () {
      return target$.onTapInside;
    };
Function _RenderTapRegion_onTapInside_set$(
  m.Scope scope$,
  RenderTapRegion target$,
) =>
    (m.FunctionPointer? _onTapInside) {
      void _onTapInsideProxy(PointerDownEvent _onTapInside_event$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            _onTapInside!,
            [_onTapInside_event$],
            {},
          );
      target$.onTapInside = (_onTapInside == null ? null : _onTapInsideProxy);
    };
Function _RenderTapRegion_debugLabel$(
  m.Scope scope$,
  RenderTapRegion target$,
) =>
    () {
      return target$.debugLabel;
    };
void _RenderTapRegion_debugLabel_set$(
  m.Scope scope$,
  RenderTapRegion target$,
) =>
    (dynamic other$) {
      target$.debugLabel = other$;
    };
Function _RenderTapRegion_enabled$(
  m.Scope scope$,
  RenderTapRegion target$,
) =>
    () {
      return target$.enabled;
    };
void _RenderTapRegion_enabled_set$(
  m.Scope scope$,
  RenderTapRegion target$,
) =>
    (dynamic other$) {
      target$.enabled = other$;
    };
Function _RenderTapRegion_groupId$(
  m.Scope scope$,
  RenderTapRegion target$,
) =>
    () {
      return target$.groupId;
    };
void _RenderTapRegion_groupId_set$(
  m.Scope scope$,
  RenderTapRegion target$,
) =>
    (dynamic other$) {
      target$.groupId = other$;
    };
Function _RenderTapRegion_registry$(
  m.Scope scope$,
  RenderTapRegion target$,
) =>
    () {
      return target$.registry;
    };
void _RenderTapRegion_registry_set$(
  m.Scope scope$,
  RenderTapRegion target$,
) =>
    (dynamic other$) {
      target$.registry = other$;
    };
Function _RenderTapRegion__$(m.Scope scope$) => ({
      TapRegionRegistry? registry,
      bool? enabled,
      m.FunctionPointer? onTapOutside,
      m.FunctionPointer? onTapInside,
      HitTestBehavior? behavior,
      Object? groupId,
      String? debugLabel,
    }) {
      void onTapInsideProxy(PointerDownEvent onTapInside_event$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onTapInside!,
            [onTapInside_event$],
            {},
          );
      void onTapOutsideProxy(PointerDownEvent onTapOutside_event$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onTapOutside!,
            [onTapOutside_event$],
            {},
          );
      return RenderTapRegion(
        behavior: behavior ?? HitTestBehavior.deferToChild,
        debugLabel: debugLabel,
        enabled: enabled ?? true,
        groupId: groupId,
        onTapInside: onTapInside == null ? null : onTapInsideProxy,
        onTapOutside: onTapOutside == null ? null : onTapOutsideProxy,
        registry: registry,
      );
    };
Function _RenderTapRegion_layout$(
  m.Scope scope$,
  RenderTapRegion target$,
) =>
    target$.layout;
Function _RenderTapRegion_dispose$(
  m.Scope scope$,
  RenderTapRegion target$,
) =>
    target$.dispose;
Function _RenderTapRegion_debugFillProperties$(
  m.Scope scope$,
  RenderTapRegion target$,
) =>
    target$.debugFillProperties;
Function TextFieldTapRegion_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextFieldTapRegion;
Function TextFieldTapRegion_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextFieldTapRegion;
Function _TextFieldTapRegion__$(m.Scope scope$) => ({
      Key? key,
      required Widget? child,
      bool? enabled,
      m.FunctionPointer? onTapOutside,
      m.FunctionPointer? onTapInside,
      String? debugLabel,
    }) {
      void onTapInsideProxy(PointerDownEvent onTapInside_event$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onTapInside!,
            [onTapInside_event$],
            {},
          );
      void onTapOutsideProxy(PointerDownEvent onTapOutside_event$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onTapOutside!,
            [onTapOutside_event$],
            {},
          );
      return TextFieldTapRegion(
        child: child,
        debugLabel: debugLabel,
        enabled: enabled ?? true,
        key: key,
        onTapInside: onTapInside == null ? null : onTapInsideProxy,
        onTapOutside: onTapOutside == null ? null : onTapOutsideProxy,
      );
    };
