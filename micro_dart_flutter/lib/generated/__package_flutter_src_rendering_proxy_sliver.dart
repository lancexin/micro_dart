// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/proxy_sliver.dart';
import 'dart:ui' show Color;
import 'package:flutter/animation.dart';
import 'package:flutter/foundation.dart';
import 'package:vector_math/vector_math_64.dart';
import 'package:flutter/src/rendering/layer.dart';
import 'package:flutter/src/rendering/object.dart';
import 'package:flutter/src/rendering/proxy_box.dart';
import 'package:flutter/src/rendering/sliver.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/proxy_sliver.dart',
  {},
  {},
  {
    'RenderProxySliver': m.ClassMirror(
      'RenderProxySliver',
      {
        'setupParentData': _RenderProxySliver_setupParentData$,
        'performLayout': _RenderProxySliver_performLayout$,
        'paint': _RenderProxySliver_paint$,
        'hitTestChildren': _RenderProxySliver_hitTestChildren$,
        'childMainAxisPosition': _RenderProxySliver_childMainAxisPosition$,
        'applyPaintTransform': _RenderProxySliver_applyPaintTransform$,
      },
      {},
    ),
    'RenderSliverOpacity': m.ClassMirror(
      'RenderSliverOpacity',
      {
        'alwaysNeedsCompositing': _RenderSliverOpacity_alwaysNeedsCompositing$,
        'opacity': _RenderSliverOpacity_opacity$,
        'alwaysIncludeSemantics': _RenderSliverOpacity_alwaysIncludeSemantics$,
        'paint': _RenderSliverOpacity_paint$,
        'debugFillProperties': _RenderSliverOpacity_debugFillProperties$,
      },
      {
        'opacity': _RenderSliverOpacity_opacity_set$,
        'alwaysIncludeSemantics':
            _RenderSliverOpacity_alwaysIncludeSemantics_set$,
      },
    ),
    'RenderSliverIgnorePointer': m.ClassMirror(
      'RenderSliverIgnorePointer',
      {
        'ignoring': _RenderSliverIgnorePointer_ignoring$,
        'ignoringSemantics': _RenderSliverIgnorePointer_ignoringSemantics$,
        'hitTest': _RenderSliverIgnorePointer_hitTest$,
        'debugFillProperties': _RenderSliverIgnorePointer_debugFillProperties$,
      },
      {
        'ignoring': _RenderSliverIgnorePointer_ignoring_set$,
        'ignoringSemantics': _RenderSliverIgnorePointer_ignoringSemantics_set$,
      },
    ),
    'RenderSliverOffstage': m.ClassMirror(
      'RenderSliverOffstage',
      {
        'offstage': _RenderSliverOffstage_offstage$,
        'performLayout': _RenderSliverOffstage_performLayout$,
        'hitTest': _RenderSliverOffstage_hitTest$,
        'hitTestChildren': _RenderSliverOffstage_hitTestChildren$,
        'paint': _RenderSliverOffstage_paint$,
        'debugFillProperties': _RenderSliverOffstage_debugFillProperties$,
        'debugDescribeChildren': _RenderSliverOffstage_debugDescribeChildren$,
      },
      {'offstage': _RenderSliverOffstage_offstage_set$},
    ),
    'RenderSliverAnimatedOpacity': m.ClassMirror(
      'RenderSliverAnimatedOpacity',
      {},
      {},
    ),
  },
);
Function _RenderProxySliver_setupParentData$(
  m.Scope scope,
  RenderProxySliver target,
) =>
    target.setupParentData;
Function _RenderProxySliver_performLayout$(
  m.Scope scope,
  RenderProxySliver target,
) =>
    target.performLayout;
Function _RenderProxySliver_paint$(
  m.Scope scope,
  RenderProxySliver target,
) =>
    target.paint;
Function _RenderProxySliver_hitTestChildren$(
  m.Scope scope,
  RenderProxySliver target,
) =>
    target.hitTestChildren;
Function _RenderProxySliver_childMainAxisPosition$(
  m.Scope scope,
  RenderProxySliver target,
) =>
    target.childMainAxisPosition;
Function _RenderProxySliver_applyPaintTransform$(
  m.Scope scope,
  RenderProxySliver target,
) =>
    target.applyPaintTransform;
bool _RenderSliverOpacity_alwaysNeedsCompositing$(RenderSliverOpacity target) {
  return target.alwaysNeedsCompositing;
}

double _RenderSliverOpacity_opacity$(RenderSliverOpacity target) {
  return target.opacity;
}

void _RenderSliverOpacity_opacity_set$(
  RenderSliverOpacity target,
  double other,
) {
  target.opacity = other;
}

bool _RenderSliverOpacity_alwaysIncludeSemantics$(RenderSliverOpacity target) {
  return target.alwaysIncludeSemantics;
}

void _RenderSliverOpacity_alwaysIncludeSemantics_set$(
  RenderSliverOpacity target,
  bool other,
) {
  target.alwaysIncludeSemantics = other;
}

Function _RenderSliverOpacity_paint$(
  m.Scope scope,
  RenderSliverOpacity target,
) =>
    target.paint;
Function _RenderSliverOpacity_debugFillProperties$(
  m.Scope scope,
  RenderSliverOpacity target,
) =>
    target.debugFillProperties;
bool _RenderSliverIgnorePointer_ignoring$(RenderSliverIgnorePointer target) {
  return target.ignoring;
}

void _RenderSliverIgnorePointer_ignoring_set$(
  RenderSliverIgnorePointer target,
  bool other,
) {
  target.ignoring = other;
}

bool? _RenderSliverIgnorePointer_ignoringSemantics$(
    RenderSliverIgnorePointer target) {
  return target.ignoringSemantics;
}

void _RenderSliverIgnorePointer_ignoringSemantics_set$(
  RenderSliverIgnorePointer target,
  bool? other,
) {
  target.ignoringSemantics = other;
}

Function _RenderSliverIgnorePointer_hitTest$(
  m.Scope scope,
  RenderSliverIgnorePointer target,
) =>
    target.hitTest;
Function _RenderSliverIgnorePointer_debugFillProperties$(
  m.Scope scope,
  RenderSliverIgnorePointer target,
) =>
    target.debugFillProperties;
bool _RenderSliverOffstage_offstage$(RenderSliverOffstage target) {
  return target.offstage;
}

void _RenderSliverOffstage_offstage_set$(
  RenderSliverOffstage target,
  bool other,
) {
  target.offstage = other;
}

Function _RenderSliverOffstage_performLayout$(
  m.Scope scope,
  RenderSliverOffstage target,
) =>
    target.performLayout;
Function _RenderSliverOffstage_hitTest$(
  m.Scope scope,
  RenderSliverOffstage target,
) =>
    target.hitTest;
Function _RenderSliverOffstage_hitTestChildren$(
  m.Scope scope,
  RenderSliverOffstage target,
) =>
    target.hitTestChildren;
Function _RenderSliverOffstage_paint$(
  m.Scope scope,
  RenderSliverOffstage target,
) =>
    target.paint;
Function _RenderSliverOffstage_debugFillProperties$(
  m.Scope scope,
  RenderSliverOffstage target,
) =>
    target.debugFillProperties;
Function _RenderSliverOffstage_debugDescribeChildren$(
  m.Scope scope,
  RenderSliverOffstage target,
) =>
    target.debugDescribeChildren;
