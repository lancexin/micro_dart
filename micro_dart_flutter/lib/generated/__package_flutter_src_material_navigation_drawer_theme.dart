// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/navigation_drawer_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/navigation_drawer.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/navigation_drawer_theme.dart',
  {
    'NavigationDrawerThemeData.': _NavigationDrawerThemeData__$,
    'NavigationDrawerThemeData.lerp': _NavigationDrawerThemeData_lerp$,
    'NavigationDrawerTheme.': _NavigationDrawerTheme__$,
    'NavigationDrawerTheme.of': _NavigationDrawerTheme_of$,
  },
  {},
  {
    'NavigationDrawerThemeData': m.ClassMirror(
      'NavigationDrawerThemeData',
      {
        '#as': NavigationDrawerThemeData_as$,
        '#is': NavigationDrawerThemeData_is$,
        'tileHeight': _NavigationDrawerThemeData_tileHeight$,
        'backgroundColor': _NavigationDrawerThemeData_backgroundColor$,
        'elevation': _NavigationDrawerThemeData_elevation$,
        'shadowColor': _NavigationDrawerThemeData_shadowColor$,
        'surfaceTintColor': _NavigationDrawerThemeData_surfaceTintColor$,
        'indicatorColor': _NavigationDrawerThemeData_indicatorColor$,
        'indicatorShape': _NavigationDrawerThemeData_indicatorShape$,
        'indicatorSize': _NavigationDrawerThemeData_indicatorSize$,
        'labelTextStyle': _NavigationDrawerThemeData_labelTextStyle$,
        'iconTheme': _NavigationDrawerThemeData_iconTheme$,
        'hashCode': _NavigationDrawerThemeData_hashCode$,
        'copyWith': _NavigationDrawerThemeData_copyWith$,
        '==': _NavigationDrawerThemeData_eq$$,
        'debugFillProperties': _NavigationDrawerThemeData_debugFillProperties$,
      },
      {},
    ),
    'NavigationDrawerTheme': m.ClassMirror(
      'NavigationDrawerTheme',
      {
        '#as': NavigationDrawerTheme_as$,
        '#is': NavigationDrawerTheme_is$,
        'data': _NavigationDrawerTheme_data$,
        'wrap': _NavigationDrawerTheme_wrap$,
        'updateShouldNotify': _NavigationDrawerTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function NavigationDrawerThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as NavigationDrawerThemeData;
Function NavigationDrawerThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is NavigationDrawerThemeData;
Function _NavigationDrawerThemeData_tileHeight$(
  m.Scope scope$,
  NavigationDrawerThemeData target$,
) =>
    () {
      return target$.tileHeight;
    };
Function _NavigationDrawerThemeData_backgroundColor$(
  m.Scope scope$,
  NavigationDrawerThemeData target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _NavigationDrawerThemeData_elevation$(
  m.Scope scope$,
  NavigationDrawerThemeData target$,
) =>
    () {
      return target$.elevation;
    };
Function _NavigationDrawerThemeData_shadowColor$(
  m.Scope scope$,
  NavigationDrawerThemeData target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _NavigationDrawerThemeData_surfaceTintColor$(
  m.Scope scope$,
  NavigationDrawerThemeData target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _NavigationDrawerThemeData_indicatorColor$(
  m.Scope scope$,
  NavigationDrawerThemeData target$,
) =>
    () {
      return target$.indicatorColor;
    };
Function _NavigationDrawerThemeData_indicatorShape$(
  m.Scope scope$,
  NavigationDrawerThemeData target$,
) =>
    () {
      return target$.indicatorShape;
    };
Function _NavigationDrawerThemeData_indicatorSize$(
  m.Scope scope$,
  NavigationDrawerThemeData target$,
) =>
    () {
      return target$.indicatorSize;
    };
Function _NavigationDrawerThemeData_labelTextStyle$(
  m.Scope scope$,
  NavigationDrawerThemeData target$,
) =>
    () {
      return target$.labelTextStyle;
    };
Function _NavigationDrawerThemeData_iconTheme$(
  m.Scope scope$,
  NavigationDrawerThemeData target$,
) =>
    () {
      return target$.iconTheme;
    };
Function _NavigationDrawerThemeData_hashCode$(
  m.Scope scope$,
  NavigationDrawerThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _NavigationDrawerThemeData__$(m.Scope scope$) => ({
      double? tileHeight,
      Color? backgroundColor,
      double? elevation,
      Color? shadowColor,
      Color? surfaceTintColor,
      Color? indicatorColor,
      ShapeBorder? indicatorShape,
      Size? indicatorSize,
      MaterialStateProperty<TextStyle>? labelTextStyle,
      MaterialStateProperty<IconThemeData>? iconTheme,
    }) {
      return NavigationDrawerThemeData(
        backgroundColor: backgroundColor,
        elevation: elevation,
        iconTheme: iconTheme,
        indicatorColor: indicatorColor,
        indicatorShape: indicatorShape,
        indicatorSize: indicatorSize,
        labelTextStyle: labelTextStyle,
        shadowColor: shadowColor,
        surfaceTintColor: surfaceTintColor,
        tileHeight: tileHeight,
      );
    };
Function _NavigationDrawerThemeData_copyWith$(
  m.Scope scope$,
  NavigationDrawerThemeData target$,
) =>
    target$.copyWith;
Function _NavigationDrawerThemeData_lerp$(m.Scope scope$) =>
    NavigationDrawerThemeData.lerp;
Function _NavigationDrawerThemeData_eq$$(
  m.Scope scope$,
  NavigationDrawerThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _NavigationDrawerThemeData_debugFillProperties$(
  m.Scope scope$,
  NavigationDrawerThemeData target$,
) =>
    target$.debugFillProperties;
Function NavigationDrawerTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as NavigationDrawerTheme;
Function NavigationDrawerTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is NavigationDrawerTheme;
Function _NavigationDrawerTheme_data$(
  m.Scope scope$,
  NavigationDrawerTheme target$,
) =>
    () {
      return target$.data;
    };
Function _NavigationDrawerTheme__$(m.Scope scope$) => ({
      Key? key,
      required NavigationDrawerThemeData data,
      required Widget child,
    }) {
      return NavigationDrawerTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _NavigationDrawerTheme_of$(m.Scope scope$) => NavigationDrawerTheme.of;
Function _NavigationDrawerTheme_wrap$(
  m.Scope scope$,
  NavigationDrawerTheme target$,
) =>
    target$.wrap;
Function _NavigationDrawerTheme_updateShouldNotify$(
  m.Scope scope$,
  NavigationDrawerTheme target$,
) =>
    target$.updateShouldNotify;
