// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/navigation_drawer_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/navigation_drawer.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/navigation_drawer_theme.dart',
  {
    'NavigationDrawerThemeData.lerp': _NavigationDrawerThemeData_lerp$,
    'NavigationDrawerTheme.of': _NavigationDrawerTheme_of$,
  },
  {},
  {
    'NavigationDrawerThemeData': m.ClassMirror(
      'NavigationDrawerThemeData',
      {
        'tileHeight': _NavigationDrawerThemeData_tileHeight$,
        'backgroundColor': _NavigationDrawerThemeData_backgroundColor$,
        'elevation': _NavigationDrawerThemeData_elevation$,
        'shadowColor': _NavigationDrawerThemeData_shadowColor$,
        'surfaceTintColor': _NavigationDrawerThemeData_surfaceTintColor$,
        'indicatorColor': _NavigationDrawerThemeData_indicatorColor$,
        'indicatorShape': _NavigationDrawerThemeData_indicatorShape$,
        'indicatorSize': _NavigationDrawerThemeData_indicatorSize$,
        'labelTextStyle': _NavigationDrawerThemeData_labelTextStyle$,
        'iconTheme': _NavigationDrawerThemeData_iconTheme$,
        'hashCode': _NavigationDrawerThemeData_hashCode$,
        'copyWith': _NavigationDrawerThemeData_copyWith$,
        'debugFillProperties': _NavigationDrawerThemeData_debugFillProperties$,
      },
      {},
    ),
    'NavigationDrawerTheme': m.ClassMirror(
      'NavigationDrawerTheme',
      {
        'data': _NavigationDrawerTheme_data$,
        'wrap': _NavigationDrawerTheme_wrap$,
        'updateShouldNotify': _NavigationDrawerTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
double? _NavigationDrawerThemeData_tileHeight$(
    NavigationDrawerThemeData target) {
  return target.tileHeight;
}

Color? _NavigationDrawerThemeData_backgroundColor$(
    NavigationDrawerThemeData target) {
  return target.backgroundColor;
}

double? _NavigationDrawerThemeData_elevation$(
    NavigationDrawerThemeData target) {
  return target.elevation;
}

Color? _NavigationDrawerThemeData_shadowColor$(
    NavigationDrawerThemeData target) {
  return target.shadowColor;
}

Color? _NavigationDrawerThemeData_surfaceTintColor$(
    NavigationDrawerThemeData target) {
  return target.surfaceTintColor;
}

Color? _NavigationDrawerThemeData_indicatorColor$(
    NavigationDrawerThemeData target) {
  return target.indicatorColor;
}

ShapeBorder? _NavigationDrawerThemeData_indicatorShape$(
    NavigationDrawerThemeData target) {
  return target.indicatorShape;
}

Size? _NavigationDrawerThemeData_indicatorSize$(
    NavigationDrawerThemeData target) {
  return target.indicatorSize;
}

MaterialStateProperty<TextStyle?>? _NavigationDrawerThemeData_labelTextStyle$(
    NavigationDrawerThemeData target) {
  return target.labelTextStyle;
}

MaterialStateProperty<IconThemeData?>? _NavigationDrawerThemeData_iconTheme$(
    NavigationDrawerThemeData target) {
  return target.iconTheme;
}

int _NavigationDrawerThemeData_hashCode$(NavigationDrawerThemeData target) {
  return target.hashCode;
}

Function _NavigationDrawerThemeData_copyWith$(
  m.Scope scope,
  NavigationDrawerThemeData target,
) =>
    target.copyWith;
Function _NavigationDrawerThemeData_lerp$(m.Scope scope) =>
    NavigationDrawerThemeData.lerp;
Function _NavigationDrawerThemeData_debugFillProperties$(
  m.Scope scope,
  NavigationDrawerThemeData target,
) =>
    target.debugFillProperties;
NavigationDrawerThemeData _NavigationDrawerTheme_data$(
    NavigationDrawerTheme target) {
  return target.data;
}

Function _NavigationDrawerTheme_of$(m.Scope scope) => NavigationDrawerTheme.of;
Function _NavigationDrawerTheme_wrap$(
  m.Scope scope,
  NavigationDrawerTheme target,
) =>
    target.wrap;
Function _NavigationDrawerTheme_updateShouldNotify$(
  m.Scope scope,
  NavigationDrawerTheme target,
) =>
    target.updateShouldNotify;
