// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/overflow_bar.dart';
import 'dart:math';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/overflow_bar.dart',
  {
    'OverflowBar.': _OverflowBar__$,
    'OverflowBarAlignment.start': _OverflowBarAlignment_start$,
    'OverflowBarAlignment.end': _OverflowBarAlignment_end$,
    'OverflowBarAlignment.center': _OverflowBarAlignment_center$,
    'OverflowBarAlignment.values': _OverflowBarAlignment_values$,
  },
  {},
  {
    'OverflowBar': m.ClassMirror(
      'OverflowBar',
      {
        '#as': OverflowBar_as$,
        '#is': OverflowBar_is$,
        'spacing': _OverflowBar_spacing$,
        'alignment': _OverflowBar_alignment$,
        'overflowSpacing': _OverflowBar_overflowSpacing$,
        'overflowAlignment': _OverflowBar_overflowAlignment$,
        'overflowDirection': _OverflowBar_overflowDirection$,
        'textDirection': _OverflowBar_textDirection$,
        'clipBehavior': _OverflowBar_clipBehavior$,
        'createRenderObject': _OverflowBar_createRenderObject$,
        'updateRenderObject': _OverflowBar_updateRenderObject$,
        'debugFillProperties': _OverflowBar_debugFillProperties$,
      },
      {},
    ),
    'OverflowBarAlignment': m.ClassMirror(
      'OverflowBarAlignment',
      {},
      {},
    ),
  },
);
Function OverflowBar_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as OverflowBar;
Function OverflowBar_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is OverflowBar;
Function _OverflowBar_spacing$(
  m.Scope scope$,
  OverflowBar target$,
) =>
    () {
      return target$.spacing;
    };
Function _OverflowBar_alignment$(
  m.Scope scope$,
  OverflowBar target$,
) =>
    () {
      return target$.alignment;
    };
Function _OverflowBar_overflowSpacing$(
  m.Scope scope$,
  OverflowBar target$,
) =>
    () {
      return target$.overflowSpacing;
    };
Function _OverflowBar_overflowAlignment$(
  m.Scope scope$,
  OverflowBar target$,
) =>
    () {
      return target$.overflowAlignment;
    };
Function _OverflowBar_overflowDirection$(
  m.Scope scope$,
  OverflowBar target$,
) =>
    () {
      return target$.overflowDirection;
    };
Function _OverflowBar_textDirection$(
  m.Scope scope$,
  OverflowBar target$,
) =>
    () {
      return target$.textDirection;
    };
Function _OverflowBar_clipBehavior$(
  m.Scope scope$,
  OverflowBar target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _OverflowBar__$(m.Scope scope$) => ({
      Key? key,
      double? spacing,
      MainAxisAlignment? alignment,
      double? overflowSpacing,
      OverflowBarAlignment? overflowAlignment,
      VerticalDirection? overflowDirection,
      TextDirection? textDirection,
      Clip? clipBehavior,
      List? children,
    }) {
      return OverflowBar(
        alignment: alignment,
        children: children == null ? const <Widget>[] : List.from(children),
        clipBehavior: clipBehavior ?? Clip.none,
        key: key,
        overflowAlignment: overflowAlignment ?? OverflowBarAlignment.start,
        overflowDirection: overflowDirection ?? VerticalDirection.down,
        overflowSpacing: overflowSpacing ?? 0.0,
        spacing: spacing ?? 0.0,
        textDirection: textDirection,
      );
    };
Function _OverflowBar_createRenderObject$(
  m.Scope scope$,
  OverflowBar target$,
) =>
    target$.createRenderObject;
Function _OverflowBar_updateRenderObject$(
  m.Scope scope$,
  OverflowBar target$,
) =>
    target$.updateRenderObject;
Function _OverflowBar_debugFillProperties$(
  m.Scope scope$,
  OverflowBar target$,
) =>
    target$.debugFillProperties;
Function _OverflowBarAlignment_start$(m.Scope scope$) =>
    () => OverflowBarAlignment.start;
Function _OverflowBarAlignment_end$(m.Scope scope$) =>
    () => OverflowBarAlignment.end;
Function _OverflowBarAlignment_center$(m.Scope scope$) =>
    () => OverflowBarAlignment.center;
Function _OverflowBarAlignment_values$(m.Scope scope$) =>
    () => OverflowBarAlignment.values;
