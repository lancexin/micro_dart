// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/overflow_bar.dart';
import 'dart:math';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/overflow_bar.dart',
  {
    'OverflowBarAlignment.start': _OverflowBarAlignment_start$,
    'OverflowBarAlignment.end': _OverflowBarAlignment_end$,
    'OverflowBarAlignment.center': _OverflowBarAlignment_center$,
    'OverflowBarAlignment.values': _OverflowBarAlignment_values$,
  },
  {},
  {
    'OverflowBar': m.ClassMirror(
      'OverflowBar',
      {
        '#as': OverflowBar_as$,
        '#is': OverflowBar_is$,
        'spacing': _OverflowBar_spacing$,
        'alignment': _OverflowBar_alignment$,
        'overflowSpacing': _OverflowBar_overflowSpacing$,
        'overflowAlignment': _OverflowBar_overflowAlignment$,
        'overflowDirection': _OverflowBar_overflowDirection$,
        'textDirection': _OverflowBar_textDirection$,
        'clipBehavior': _OverflowBar_clipBehavior$,
        'createRenderObject': _OverflowBar_createRenderObject$,
        'updateRenderObject': _OverflowBar_updateRenderObject$,
        'debugFillProperties': _OverflowBar_debugFillProperties$,
      },
      {},
    ),
    'OverflowBarAlignment': m.ClassMirror(
      'OverflowBarAlignment',
      {},
      {},
    ),
  },
);
Function OverflowBar_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as OverflowBar;
Function OverflowBar_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is OverflowBar;
double _OverflowBar_spacing$(OverflowBar target) {
  return target.spacing;
}

MainAxisAlignment? _OverflowBar_alignment$(OverflowBar target) {
  return target.alignment;
}

double _OverflowBar_overflowSpacing$(OverflowBar target) {
  return target.overflowSpacing;
}

OverflowBarAlignment _OverflowBar_overflowAlignment$(OverflowBar target) {
  return target.overflowAlignment;
}

VerticalDirection _OverflowBar_overflowDirection$(OverflowBar target) {
  return target.overflowDirection;
}

TextDirection? _OverflowBar_textDirection$(OverflowBar target) {
  return target.textDirection;
}

Clip _OverflowBar_clipBehavior$(OverflowBar target) {
  return target.clipBehavior;
}

Function _OverflowBar_createRenderObject$(
  m.Scope scope,
  OverflowBar target,
) =>
    target.createRenderObject;
Function _OverflowBar_updateRenderObject$(
  m.Scope scope,
  OverflowBar target,
) =>
    target.updateRenderObject;
Function _OverflowBar_debugFillProperties$(
  m.Scope scope,
  OverflowBar target,
) =>
    target.debugFillProperties;
OverflowBarAlignment _OverflowBarAlignment_start$() {
  return OverflowBarAlignment.start;
}

OverflowBarAlignment _OverflowBarAlignment_end$() {
  return OverflowBarAlignment.end;
}

OverflowBarAlignment _OverflowBarAlignment_center$() {
  return OverflowBarAlignment.center;
}

List<OverflowBarAlignment> _OverflowBarAlignment_values$() {
  return OverflowBarAlignment.values;
}
