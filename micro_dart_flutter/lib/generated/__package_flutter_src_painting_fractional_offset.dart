// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/fractional_offset.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/painting/basic_types.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/fractional_offset.dart',
  {
    'FractionalOffset.topLeft': _FractionalOffset_topLeft$,
    'FractionalOffset.topCenter': _FractionalOffset_topCenter$,
    'FractionalOffset.topRight': _FractionalOffset_topRight$,
    'FractionalOffset.centerLeft': _FractionalOffset_centerLeft$,
    'FractionalOffset.center': _FractionalOffset_center$,
    'FractionalOffset.centerRight': _FractionalOffset_centerRight$,
    'FractionalOffset.bottomLeft': _FractionalOffset_bottomLeft$,
    'FractionalOffset.bottomCenter': _FractionalOffset_bottomCenter$,
    'FractionalOffset.bottomRight': _FractionalOffset_bottomRight$,
    'FractionalOffset.': _FractionalOffset__$,
    'FractionalOffset.fromOffsetAndSize': _FractionalOffset_fromOffsetAndSize_$,
    'FractionalOffset.fromOffsetAndRect': _FractionalOffset_fromOffsetAndRect_$,
    'FractionalOffset.lerp': _FractionalOffset_lerp$,
  },
  {},
  {
    'FractionalOffset': m.ClassMirror(
      'FractionalOffset',
      {
        '#as': FractionalOffset_as$,
        '#is': FractionalOffset_is$,
        'dx': _FractionalOffset_dx$,
        'dy': _FractionalOffset_dy$,
        '-': _FractionalOffset_minus$$,
        '+': _FractionalOffset_plus$$,
        'unary-': _FractionalOffset_unary_minus$$,
        '*': _FractionalOffset_times$$,
        '/': _FractionalOffset_over$$,
        '~/': _FractionalOffset_division$$,
        '%': _FractionalOffset_surplus$$,
        'toString': _FractionalOffset_toString$,
      },
      {},
    )
  },
);
Function FractionalOffset_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FractionalOffset;
Function FractionalOffset_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FractionalOffset;
FractionalOffset _FractionalOffset_topLeft$() {
  return FractionalOffset.topLeft;
}

FractionalOffset _FractionalOffset_topCenter$() {
  return FractionalOffset.topCenter;
}

FractionalOffset _FractionalOffset_topRight$() {
  return FractionalOffset.topRight;
}

FractionalOffset _FractionalOffset_centerLeft$() {
  return FractionalOffset.centerLeft;
}

FractionalOffset _FractionalOffset_center$() {
  return FractionalOffset.center;
}

FractionalOffset _FractionalOffset_centerRight$() {
  return FractionalOffset.centerRight;
}

FractionalOffset _FractionalOffset_bottomLeft$() {
  return FractionalOffset.bottomLeft;
}

FractionalOffset _FractionalOffset_bottomCenter$() {
  return FractionalOffset.bottomCenter;
}

FractionalOffset _FractionalOffset_bottomRight$() {
  return FractionalOffset.bottomRight;
}

Function _FractionalOffset_dx$(
  m.Scope scope$,
  FractionalOffset target$,
) =>
    () {
      return target$.dx;
    };
Function _FractionalOffset_dy$(
  m.Scope scope$,
  FractionalOffset target$,
) =>
    () {
      return target$.dy;
    };
Function _FractionalOffset__$(m.Scope scope$) => (
      double dx,
      double dy,
    ) {
      return FractionalOffset(
        dx,
        dy,
      );
    };
Function _FractionalOffset_fromOffsetAndSize_$(m.Scope scope$) =>
    FractionalOffset.fromOffsetAndSize;
Function _FractionalOffset_fromOffsetAndRect_$(m.Scope scope$) =>
    FractionalOffset.fromOffsetAndRect;
Function _FractionalOffset_minus$$(
  m.Scope scope$,
  FractionalOffset target$,
) =>
    (Alignment other$) => target$ - other$;
Function _FractionalOffset_plus$$(
  m.Scope scope$,
  FractionalOffset target$,
) =>
    (Alignment other$) => target$ + other$;
Function _FractionalOffset_unary_minus$$(
  m.Scope scope$,
  FractionalOffset target$,
) =>
    () => -target$;
Function _FractionalOffset_times$$(
  m.Scope scope$,
  FractionalOffset target$,
) =>
    (double other$) => target$ * other$;
Function _FractionalOffset_over$$(
  m.Scope scope$,
  FractionalOffset target$,
) =>
    (double other$) => target$ / other$;
Function _FractionalOffset_division$$(
  m.Scope scope$,
  FractionalOffset target$,
) =>
    (double other$) => target$ ~/ other$;
Function _FractionalOffset_surplus$$(
  m.Scope scope$,
  FractionalOffset target$,
) =>
    (double other$) => target$ % other$;
Function _FractionalOffset_lerp$(m.Scope scope$) => FractionalOffset.lerp;
Function _FractionalOffset_toString$(
  m.Scope scope$,
  FractionalOffset target$,
) =>
    target$.toString;
