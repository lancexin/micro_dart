// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/fractional_offset.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/painting/basic_types.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/fractional_offset.dart',
  {
    'FractionalOffset.topLeft': _FractionalOffset_topLeft$,
    'FractionalOffset.topCenter': _FractionalOffset_topCenter$,
    'FractionalOffset.topRight': _FractionalOffset_topRight$,
    'FractionalOffset.centerLeft': _FractionalOffset_centerLeft$,
    'FractionalOffset.center': _FractionalOffset_center$,
    'FractionalOffset.centerRight': _FractionalOffset_centerRight$,
    'FractionalOffset.bottomLeft': _FractionalOffset_bottomLeft$,
    'FractionalOffset.bottomCenter': _FractionalOffset_bottomCenter$,
    'FractionalOffset.bottomRight': _FractionalOffset_bottomRight$,
    'FractionalOffset.lerp': _FractionalOffset_lerp$,
  },
  {},
  {
    'FractionalOffset': m.ClassMirror(
      'FractionalOffset',
      {
        'dx': _FractionalOffset_dx$,
        'dy': _FractionalOffset_dy$,
        'toString': _FractionalOffset_toString$,
      },
      {},
    )
  },
);
FractionalOffset _FractionalOffset_topLeft$() {
  return FractionalOffset.topLeft;
}

FractionalOffset _FractionalOffset_topCenter$() {
  return FractionalOffset.topCenter;
}

FractionalOffset _FractionalOffset_topRight$() {
  return FractionalOffset.topRight;
}

FractionalOffset _FractionalOffset_centerLeft$() {
  return FractionalOffset.centerLeft;
}

FractionalOffset _FractionalOffset_center$() {
  return FractionalOffset.center;
}

FractionalOffset _FractionalOffset_centerRight$() {
  return FractionalOffset.centerRight;
}

FractionalOffset _FractionalOffset_bottomLeft$() {
  return FractionalOffset.bottomLeft;
}

FractionalOffset _FractionalOffset_bottomCenter$() {
  return FractionalOffset.bottomCenter;
}

FractionalOffset _FractionalOffset_bottomRight$() {
  return FractionalOffset.bottomRight;
}

double _FractionalOffset_dx$(FractionalOffset target) {
  return target.dx;
}

double _FractionalOffset_dy$(FractionalOffset target) {
  return target.dy;
}

Function _FractionalOffset_lerp$(m.Scope scope) => FractionalOffset.lerp;
Function _FractionalOffset_toString$(
  m.Scope scope,
  FractionalOffset target,
) =>
    target.toString;
