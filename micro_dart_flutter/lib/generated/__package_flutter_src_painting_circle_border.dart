// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/circle_border.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/painting/borders.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/circle_border.dart',
  {'CircleBorder.': _CircleBorder__$},
  {},
  {
    'CircleBorder': m.ClassMirror(
      'CircleBorder',
      {
        '#as': CircleBorder_as$,
        '#is': CircleBorder_is$,
        'eccentricity': _CircleBorder_eccentricity$,
        'preferPaintInterior': _CircleBorder_preferPaintInterior$,
        'hashCode': _CircleBorder_hashCode$,
        'scale': _CircleBorder_scale$,
        'lerpFrom': _CircleBorder_lerpFrom$,
        'lerpTo': _CircleBorder_lerpTo$,
        'getInnerPath': _CircleBorder_getInnerPath$,
        'getOuterPath': _CircleBorder_getOuterPath$,
        'paintInterior': _CircleBorder_paintInterior$,
        'copyWith': _CircleBorder_copyWith$,
        'paint': _CircleBorder_paint$,
        '==': _CircleBorder_eq$$,
        'toString': _CircleBorder_toString$,
      },
      {},
    )
  },
);
Function CircleBorder_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CircleBorder;
Function CircleBorder_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CircleBorder;
Function _CircleBorder_eccentricity$(
  m.Scope scope$,
  CircleBorder target$,
) =>
    () {
      return target$.eccentricity;
    };
Function _CircleBorder_preferPaintInterior$(
  m.Scope scope$,
  CircleBorder target$,
) =>
    () {
      return target$.preferPaintInterior;
    };
Function _CircleBorder_hashCode$(
  m.Scope scope$,
  CircleBorder target$,
) =>
    () {
      return target$.hashCode;
    };
Function _CircleBorder__$(m.Scope scope$) => ({
      BorderSide? side,
      double? eccentricity,
    }) {
      return CircleBorder(
        eccentricity: eccentricity ?? 0.0,
        side: side ?? BorderSide.none,
      );
    };
Function _CircleBorder_scale$(
  m.Scope scope$,
  CircleBorder target$,
) =>
    target$.scale;
Function _CircleBorder_lerpFrom$(
  m.Scope scope$,
  CircleBorder target$,
) =>
    target$.lerpFrom;
Function _CircleBorder_lerpTo$(
  m.Scope scope$,
  CircleBorder target$,
) =>
    target$.lerpTo;
Function _CircleBorder_getInnerPath$(
  m.Scope scope$,
  CircleBorder target$,
) =>
    target$.getInnerPath;
Function _CircleBorder_getOuterPath$(
  m.Scope scope$,
  CircleBorder target$,
) =>
    target$.getOuterPath;
Function _CircleBorder_paintInterior$(
  m.Scope scope$,
  CircleBorder target$,
) =>
    target$.paintInterior;
Function _CircleBorder_copyWith$(
  m.Scope scope$,
  CircleBorder target$,
) =>
    target$.copyWith;
Function _CircleBorder_paint$(
  m.Scope scope$,
  CircleBorder target$,
) =>
    target$.paint;
Function _CircleBorder_eq$$(
  m.Scope scope$,
  CircleBorder target$,
) =>
    (Object other$) => target$ == other$;
Function _CircleBorder_toString$(
  m.Scope scope$,
  CircleBorder target$,
) =>
    target$.toString;
