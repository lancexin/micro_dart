// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/circle_border.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/painting/borders.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/circle_border.dart',
  {},
  {},
  {
    'CircleBorder': m.ClassMirror(
      'CircleBorder',
      {
        'eccentricity': _CircleBorder_eccentricity$,
        'preferPaintInterior': _CircleBorder_preferPaintInterior$,
        'hashCode': _CircleBorder_hashCode$,
        'scale': _CircleBorder_scale$,
        'lerpFrom': _CircleBorder_lerpFrom$,
        'lerpTo': _CircleBorder_lerpTo$,
        'getInnerPath': _CircleBorder_getInnerPath$,
        'getOuterPath': _CircleBorder_getOuterPath$,
        'paintInterior': _CircleBorder_paintInterior$,
        'copyWith': _CircleBorder_copyWith$,
        'paint': _CircleBorder_paint$,
        'toString': _CircleBorder_toString$,
      },
      {},
    )
  },
);
double _CircleBorder_eccentricity$(CircleBorder target) {
  return target.eccentricity;
}

bool _CircleBorder_preferPaintInterior$(CircleBorder target) {
  return target.preferPaintInterior;
}

int _CircleBorder_hashCode$(CircleBorder target) {
  return target.hashCode;
}

Function _CircleBorder_scale$(
  m.Scope scope,
  CircleBorder target,
) =>
    target.scale;
Function _CircleBorder_lerpFrom$(
  m.Scope scope,
  CircleBorder target,
) =>
    target.lerpFrom;
Function _CircleBorder_lerpTo$(
  m.Scope scope,
  CircleBorder target,
) =>
    target.lerpTo;
Function _CircleBorder_getInnerPath$(
  m.Scope scope,
  CircleBorder target,
) =>
    target.getInnerPath;
Function _CircleBorder_getOuterPath$(
  m.Scope scope,
  CircleBorder target,
) =>
    target.getOuterPath;
Function _CircleBorder_paintInterior$(
  m.Scope scope,
  CircleBorder target,
) =>
    target.paintInterior;
Function _CircleBorder_copyWith$(
  m.Scope scope,
  CircleBorder target,
) =>
    target.copyWith;
Function _CircleBorder_paint$(
  m.Scope scope,
  CircleBorder target,
) =>
    target.paint;
Function _CircleBorder_toString$(
  m.Scope scope,
  CircleBorder target,
) =>
    target.toString;
