// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/custom_paint.dart';
import 'dart:collection';
import 'package:flutter/foundation.dart';
import 'package:flutter/semantics.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/rendering/object.dart';
import 'package:flutter/src/rendering/proxy_box.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/custom_paint.dart',
  {},
  {},
  {
    'CustomPainter': m.ClassMirror(
      'CustomPainter',
      {
        'semanticsBuilder': _CustomPainter_semanticsBuilder$,
        'paint': _CustomPainter_paint$,
        'shouldRebuildSemantics': _CustomPainter_shouldRebuildSemantics$,
        'shouldRepaint': _CustomPainter_shouldRepaint$,
        'hitTest': _CustomPainter_hitTest$,
        'toString': _CustomPainter_toString$,
      },
      {},
    ),
    'CustomPainterSemantics': m.ClassMirror(
      'CustomPainterSemantics',
      {
        'key': _CustomPainterSemantics_key$,
        'rect': _CustomPainterSemantics_rect$,
        'transform': _CustomPainterSemantics_transform$,
        'properties': _CustomPainterSemantics_properties$,
        'tags': _CustomPainterSemantics_tags$,
      },
      {},
    ),
    'RenderCustomPaint': m.ClassMirror(
      'RenderCustomPaint',
      {
        'isComplex': _RenderCustomPaint_isComplex$,
        'willChange': _RenderCustomPaint_willChange$,
        'painter': _RenderCustomPaint_painter$,
        'foregroundPainter': _RenderCustomPaint_foregroundPainter$,
        'preferredSize': _RenderCustomPaint_preferredSize$,
        'computeMinIntrinsicWidth':
            _RenderCustomPaint_computeMinIntrinsicWidth$,
        'computeMaxIntrinsicWidth':
            _RenderCustomPaint_computeMaxIntrinsicWidth$,
        'computeMinIntrinsicHeight':
            _RenderCustomPaint_computeMinIntrinsicHeight$,
        'computeMaxIntrinsicHeight':
            _RenderCustomPaint_computeMaxIntrinsicHeight$,
        'attach': _RenderCustomPaint_attach$,
        'detach': _RenderCustomPaint_detach$,
        'hitTestChildren': _RenderCustomPaint_hitTestChildren$,
        'hitTestSelf': _RenderCustomPaint_hitTestSelf$,
        'performLayout': _RenderCustomPaint_performLayout$,
        'computeSizeForNoChild': _RenderCustomPaint_computeSizeForNoChild$,
        'paint': _RenderCustomPaint_paint$,
        'describeSemanticsConfiguration':
            _RenderCustomPaint_describeSemanticsConfiguration$,
        'assembleSemanticsNode': _RenderCustomPaint_assembleSemanticsNode$,
        'clearSemantics': _RenderCustomPaint_clearSemantics$,
        'debugFillProperties': _RenderCustomPaint_debugFillProperties$,
      },
      {
        'isComplex': _RenderCustomPaint_isComplex_set$,
        'willChange': _RenderCustomPaint_willChange_set$,
        'painter': _RenderCustomPaint_painter_set$,
        'foregroundPainter': _RenderCustomPaint_foregroundPainter_set$,
        'preferredSize': _RenderCustomPaint_preferredSize_set$,
      },
    ),
  },
);
List<CustomPainterSemantics> Function(Size)? _CustomPainter_semanticsBuilder$(
    CustomPainter target) {
  return target.semanticsBuilder;
}

Function _CustomPainter_paint$(
  m.Scope scope,
  CustomPainter target,
) =>
    target.paint;
Function _CustomPainter_shouldRebuildSemantics$(
  m.Scope scope,
  CustomPainter target,
) =>
    target.shouldRebuildSemantics;
Function _CustomPainter_shouldRepaint$(
  m.Scope scope,
  CustomPainter target,
) =>
    target.shouldRepaint;
Function _CustomPainter_hitTest$(
  m.Scope scope,
  CustomPainter target,
) =>
    target.hitTest;
Function _CustomPainter_toString$(
  m.Scope scope,
  CustomPainter target,
) =>
    target.toString;
Key? _CustomPainterSemantics_key$(CustomPainterSemantics target) {
  return target.key;
}

Rect _CustomPainterSemantics_rect$(CustomPainterSemantics target) {
  return target.rect;
}

Matrix4? _CustomPainterSemantics_transform$(CustomPainterSemantics target) {
  return target.transform;
}

SemanticsProperties _CustomPainterSemantics_properties$(
    CustomPainterSemantics target) {
  return target.properties;
}

Set<SemanticsTag>? _CustomPainterSemantics_tags$(
    CustomPainterSemantics target) {
  return target.tags;
}

bool _RenderCustomPaint_isComplex$(RenderCustomPaint target) {
  return target.isComplex;
}

void _RenderCustomPaint_isComplex_set$(
  RenderCustomPaint target,
  bool other,
) {
  target.isComplex = other;
}

bool _RenderCustomPaint_willChange$(RenderCustomPaint target) {
  return target.willChange;
}

void _RenderCustomPaint_willChange_set$(
  RenderCustomPaint target,
  bool other,
) {
  target.willChange = other;
}

CustomPainter? _RenderCustomPaint_painter$(RenderCustomPaint target) {
  return target.painter;
}

void _RenderCustomPaint_painter_set$(
  RenderCustomPaint target,
  CustomPainter? other,
) {
  target.painter = other;
}

CustomPainter? _RenderCustomPaint_foregroundPainter$(RenderCustomPaint target) {
  return target.foregroundPainter;
}

void _RenderCustomPaint_foregroundPainter_set$(
  RenderCustomPaint target,
  CustomPainter? other,
) {
  target.foregroundPainter = other;
}

Size _RenderCustomPaint_preferredSize$(RenderCustomPaint target) {
  return target.preferredSize;
}

void _RenderCustomPaint_preferredSize_set$(
  RenderCustomPaint target,
  Size other,
) {
  target.preferredSize = other;
}

Function _RenderCustomPaint_computeMinIntrinsicWidth$(
  m.Scope scope,
  RenderCustomPaint target,
) =>
    target.computeMinIntrinsicWidth;
Function _RenderCustomPaint_computeMaxIntrinsicWidth$(
  m.Scope scope,
  RenderCustomPaint target,
) =>
    target.computeMaxIntrinsicWidth;
Function _RenderCustomPaint_computeMinIntrinsicHeight$(
  m.Scope scope,
  RenderCustomPaint target,
) =>
    target.computeMinIntrinsicHeight;
Function _RenderCustomPaint_computeMaxIntrinsicHeight$(
  m.Scope scope,
  RenderCustomPaint target,
) =>
    target.computeMaxIntrinsicHeight;
Function _RenderCustomPaint_attach$(
  m.Scope scope,
  RenderCustomPaint target,
) =>
    target.attach;
Function _RenderCustomPaint_detach$(
  m.Scope scope,
  RenderCustomPaint target,
) =>
    target.detach;
Function _RenderCustomPaint_hitTestChildren$(
  m.Scope scope,
  RenderCustomPaint target,
) =>
    target.hitTestChildren;
Function _RenderCustomPaint_hitTestSelf$(
  m.Scope scope,
  RenderCustomPaint target,
) =>
    target.hitTestSelf;
Function _RenderCustomPaint_performLayout$(
  m.Scope scope,
  RenderCustomPaint target,
) =>
    target.performLayout;
Function _RenderCustomPaint_computeSizeForNoChild$(
  m.Scope scope,
  RenderCustomPaint target,
) =>
    target.computeSizeForNoChild;
Function _RenderCustomPaint_paint$(
  m.Scope scope,
  RenderCustomPaint target,
) =>
    target.paint;
Function _RenderCustomPaint_describeSemanticsConfiguration$(
  m.Scope scope,
  RenderCustomPaint target,
) =>
    target.describeSemanticsConfiguration;
Function _RenderCustomPaint_assembleSemanticsNode$(
  m.Scope scope,
  RenderCustomPaint target,
) =>
    target.assembleSemanticsNode;
Function _RenderCustomPaint_clearSemantics$(
  m.Scope scope,
  RenderCustomPaint target,
) =>
    target.clearSemantics;
Function _RenderCustomPaint_debugFillProperties$(
  m.Scope scope,
  RenderCustomPaint target,
) =>
    target.debugFillProperties;
