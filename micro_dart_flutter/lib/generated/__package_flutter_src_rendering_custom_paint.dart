// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/custom_paint.dart';
import 'dart:collection';
import 'package:flutter/foundation.dart';
import 'package:flutter/semantics.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/rendering/object.dart';
import 'package:flutter/src/rendering/proxy_box.dart';

part '../proxy/proxy__package_flutter_src_rendering_custom_paint.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/custom_paint.dart',
  {
    'CustomPainter.': _CustomPainter__$,
    'CustomPainterSemantics.': _CustomPainterSemantics__$,
    'RenderCustomPaint.': _RenderCustomPaint__$,
  },
  {},
  {
    'CustomPainter': m.ClassMirror(
      'CustomPainter',
      {
        '#as': CustomPainter_as$,
        '#is': CustomPainter_is$,
        'semanticsBuilder': _CustomPainter_semanticsBuilder$,
        'addListener': _CustomPainter_addListener$,
        'removeListener': _CustomPainter_removeListener$,
        'paint': _CustomPainter_paint$,
        'shouldRebuildSemantics': _CustomPainter_shouldRebuildSemantics$,
        'shouldRepaint': _CustomPainter_shouldRepaint$,
        'hitTest': _CustomPainter_hitTest$,
        'toString': _CustomPainter_toString$,
      },
      {},
    ),
    'CustomPainterSemantics': m.ClassMirror(
      'CustomPainterSemantics',
      {
        '#as': CustomPainterSemantics_as$,
        '#is': CustomPainterSemantics_is$,
        'key': _CustomPainterSemantics_key$,
        'rect': _CustomPainterSemantics_rect$,
        'transform': _CustomPainterSemantics_transform$,
        'properties': _CustomPainterSemantics_properties$,
        'tags': _CustomPainterSemantics_tags$,
      },
      {},
    ),
    'RenderCustomPaint': m.ClassMirror(
      'RenderCustomPaint',
      {
        '#as': RenderCustomPaint_as$,
        '#is': RenderCustomPaint_is$,
        'isComplex': _RenderCustomPaint_isComplex$,
        'willChange': _RenderCustomPaint_willChange$,
        'painter': _RenderCustomPaint_painter$,
        'foregroundPainter': _RenderCustomPaint_foregroundPainter$,
        'preferredSize': _RenderCustomPaint_preferredSize$,
        'computeMinIntrinsicWidth':
            _RenderCustomPaint_computeMinIntrinsicWidth$,
        'computeMaxIntrinsicWidth':
            _RenderCustomPaint_computeMaxIntrinsicWidth$,
        'computeMinIntrinsicHeight':
            _RenderCustomPaint_computeMinIntrinsicHeight$,
        'computeMaxIntrinsicHeight':
            _RenderCustomPaint_computeMaxIntrinsicHeight$,
        'attach': _RenderCustomPaint_attach$,
        'detach': _RenderCustomPaint_detach$,
        'hitTestChildren': _RenderCustomPaint_hitTestChildren$,
        'hitTestSelf': _RenderCustomPaint_hitTestSelf$,
        'performLayout': _RenderCustomPaint_performLayout$,
        'computeSizeForNoChild': _RenderCustomPaint_computeSizeForNoChild$,
        'paint': _RenderCustomPaint_paint$,
        'describeSemanticsConfiguration':
            _RenderCustomPaint_describeSemanticsConfiguration$,
        'assembleSemanticsNode': _RenderCustomPaint_assembleSemanticsNode$,
        'clearSemantics': _RenderCustomPaint_clearSemantics$,
        'debugFillProperties': _RenderCustomPaint_debugFillProperties$,
      },
      {
        'isComplex': _RenderCustomPaint_isComplex_set$,
        'willChange': _RenderCustomPaint_willChange_set$,
        'painter': _RenderCustomPaint_painter_set$,
        'foregroundPainter': _RenderCustomPaint_foregroundPainter_set$,
        'preferredSize': _RenderCustomPaint_preferredSize_set$,
      },
    ),
  },
);
Function CustomPainter_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CustomPainter;
Function CustomPainter_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CustomPainter;
Function _CustomPainter_semanticsBuilder$(
  m.Scope scope$,
  CustomPainter target$,
) =>
    () {
      return target$.semanticsBuilder;
    };
Function _CustomPainter_addListener$(
  m.Scope scope$,
  CustomPainter target$,
) =>
    (m.FunctionPointer listener) {
      void listenerProxy() => scope$.engine.callFunctionPointer(
            scope$,
            listener,
            [],
            {},
          );
      target$.addListener(listenerProxy);
    };
Function _CustomPainter_removeListener$(
  m.Scope scope$,
  CustomPainter target$,
) =>
    (m.FunctionPointer listener) {
      void listenerProxy() => scope$.engine.callFunctionPointer(
            scope$,
            listener,
            [],
            {},
          );
      target$.removeListener(listenerProxy);
    };
Function _CustomPainter_paint$(
  m.Scope scope$,
  CustomPainter target$,
) =>
    target$.paint;
Function _CustomPainter_shouldRebuildSemantics$(
  m.Scope scope$,
  CustomPainter target$,
) =>
    target$.shouldRebuildSemantics;
Function _CustomPainter_shouldRepaint$(
  m.Scope scope$,
  CustomPainter target$,
) =>
    target$.shouldRepaint;
Function _CustomPainter_hitTest$(
  m.Scope scope$,
  CustomPainter target$,
) =>
    target$.hitTest;
Function _CustomPainter_toString$(
  m.Scope scope$,
  CustomPainter target$,
) =>
    target$.toString;
Function CustomPainterSemantics_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CustomPainterSemantics;
Function CustomPainterSemantics_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CustomPainterSemantics;
Function _CustomPainterSemantics_key$(
  m.Scope scope$,
  CustomPainterSemantics target$,
) =>
    () {
      return target$.key;
    };
Function _CustomPainterSemantics_rect$(
  m.Scope scope$,
  CustomPainterSemantics target$,
) =>
    () {
      return target$.rect;
    };
Function _CustomPainterSemantics_transform$(
  m.Scope scope$,
  CustomPainterSemantics target$,
) =>
    () {
      return target$.transform;
    };
Function _CustomPainterSemantics_properties$(
  m.Scope scope$,
  CustomPainterSemantics target$,
) =>
    () {
      return target$.properties;
    };
Function _CustomPainterSemantics_tags$(
  m.Scope scope$,
  CustomPainterSemantics target$,
) =>
    () {
      return target$.tags;
    };
Function _CustomPainterSemantics__$(m.Scope scope$) => ({
      Key? key,
      required Rect rect,
      required SemanticsProperties properties,
      Matrix4? transform,
      Set? tags,
    }) {
      return CustomPainterSemantics(
        key: key,
        properties: properties,
        rect: rect,
        tags: tags == null ? null : Set.from(tags),
        transform: transform,
      );
    };
Function RenderCustomPaint_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RenderCustomPaint;
Function RenderCustomPaint_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RenderCustomPaint;
Function _RenderCustomPaint_isComplex$(
  m.Scope scope$,
  RenderCustomPaint target$,
) =>
    () {
      return target$.isComplex;
    };
void _RenderCustomPaint_isComplex_set$(
  m.Scope scope$,
  RenderCustomPaint target$,
) =>
    (dynamic other$) {
      target$.isComplex = other$;
    };
Function _RenderCustomPaint_willChange$(
  m.Scope scope$,
  RenderCustomPaint target$,
) =>
    () {
      return target$.willChange;
    };
void _RenderCustomPaint_willChange_set$(
  m.Scope scope$,
  RenderCustomPaint target$,
) =>
    (dynamic other$) {
      target$.willChange = other$;
    };
Function _RenderCustomPaint_painter$(
  m.Scope scope$,
  RenderCustomPaint target$,
) =>
    () {
      return target$.painter;
    };
void _RenderCustomPaint_painter_set$(
  m.Scope scope$,
  RenderCustomPaint target$,
) =>
    (dynamic other$) {
      target$.painter = other$;
    };
Function _RenderCustomPaint_foregroundPainter$(
  m.Scope scope$,
  RenderCustomPaint target$,
) =>
    () {
      return target$.foregroundPainter;
    };
void _RenderCustomPaint_foregroundPainter_set$(
  m.Scope scope$,
  RenderCustomPaint target$,
) =>
    (dynamic other$) {
      target$.foregroundPainter = other$;
    };
Function _RenderCustomPaint_preferredSize$(
  m.Scope scope$,
  RenderCustomPaint target$,
) =>
    () {
      return target$.preferredSize;
    };
void _RenderCustomPaint_preferredSize_set$(
  m.Scope scope$,
  RenderCustomPaint target$,
) =>
    (dynamic other$) {
      target$.preferredSize = other$;
    };
Function _RenderCustomPaint__$(m.Scope scope$) => ({
      CustomPainter? painter,
      CustomPainter? foregroundPainter,
      Size? preferredSize,
      bool? isComplex,
      bool? willChange,
      RenderBox? child,
    }) {
      return RenderCustomPaint(
        child: child,
        foregroundPainter: foregroundPainter,
        isComplex: isComplex ?? false,
        painter: painter,
        preferredSize: preferredSize ?? Size.zero,
        willChange: willChange ?? false,
      );
    };
Function _RenderCustomPaint_computeMinIntrinsicWidth$(
  m.Scope scope$,
  RenderCustomPaint target$,
) =>
    target$.computeMinIntrinsicWidth;
Function _RenderCustomPaint_computeMaxIntrinsicWidth$(
  m.Scope scope$,
  RenderCustomPaint target$,
) =>
    target$.computeMaxIntrinsicWidth;
Function _RenderCustomPaint_computeMinIntrinsicHeight$(
  m.Scope scope$,
  RenderCustomPaint target$,
) =>
    target$.computeMinIntrinsicHeight;
Function _RenderCustomPaint_computeMaxIntrinsicHeight$(
  m.Scope scope$,
  RenderCustomPaint target$,
) =>
    target$.computeMaxIntrinsicHeight;
Function _RenderCustomPaint_attach$(
  m.Scope scope$,
  RenderCustomPaint target$,
) =>
    target$.attach;
Function _RenderCustomPaint_detach$(
  m.Scope scope$,
  RenderCustomPaint target$,
) =>
    target$.detach;
Function _RenderCustomPaint_hitTestChildren$(
  m.Scope scope$,
  RenderCustomPaint target$,
) =>
    target$.hitTestChildren;
Function _RenderCustomPaint_hitTestSelf$(
  m.Scope scope$,
  RenderCustomPaint target$,
) =>
    target$.hitTestSelf;
Function _RenderCustomPaint_performLayout$(
  m.Scope scope$,
  RenderCustomPaint target$,
) =>
    target$.performLayout;
Function _RenderCustomPaint_computeSizeForNoChild$(
  m.Scope scope$,
  RenderCustomPaint target$,
) =>
    target$.computeSizeForNoChild;
Function _RenderCustomPaint_paint$(
  m.Scope scope$,
  RenderCustomPaint target$,
) =>
    target$.paint;
Function _RenderCustomPaint_describeSemanticsConfiguration$(
  m.Scope scope$,
  RenderCustomPaint target$,
) =>
    target$.describeSemanticsConfiguration;
Function _RenderCustomPaint_assembleSemanticsNode$(
  m.Scope scope$,
  RenderCustomPaint target$,
) =>
    target$.assembleSemanticsNode;
Function _RenderCustomPaint_clearSemantics$(
  m.Scope scope$,
  RenderCustomPaint target$,
) =>
    target$.clearSemantics;
Function _RenderCustomPaint_debugFillProperties$(
  m.Scope scope$,
  RenderCustomPaint target$,
) =>
    target$.debugFillProperties;
