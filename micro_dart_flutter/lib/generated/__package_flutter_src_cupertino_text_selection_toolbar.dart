// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/text_selection_toolbar.dart';
import 'dart:collection';
import 'dart:ui';
import 'package:flutter/foundation.dart' show Brightness, clampDouble;
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/text_selection_toolbar_button.dart';
import 'package:flutter/src/cupertino/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/text_selection_toolbar.dart',
  {
    'CupertinoTextSelectionToolbar.kToolbarScreenPadding':
        _CupertinoTextSelectionToolbar_kToolbarScreenPadding$
  },
  {},
  {
    'CupertinoTextSelectionToolbar': m.ClassMirror(
      'CupertinoTextSelectionToolbar',
      {
        '#as': CupertinoTextSelectionToolbar_as$,
        '#is': CupertinoTextSelectionToolbar_is$,
        'anchorAbove': _CupertinoTextSelectionToolbar_anchorAbove$,
        'anchorBelow': _CupertinoTextSelectionToolbar_anchorBelow$,
        'children': _CupertinoTextSelectionToolbar_children$,
        'toolbarBuilder': _CupertinoTextSelectionToolbar_toolbarBuilder$,
        'build': _CupertinoTextSelectionToolbar_build$,
      },
      {},
    )
  },
);
Function CupertinoTextSelectionToolbar_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CupertinoTextSelectionToolbar;
Function CupertinoTextSelectionToolbar_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CupertinoTextSelectionToolbar;
Offset _CupertinoTextSelectionToolbar_anchorAbove$(
    CupertinoTextSelectionToolbar target) {
  return target.anchorAbove;
}

Offset _CupertinoTextSelectionToolbar_anchorBelow$(
    CupertinoTextSelectionToolbar target) {
  return target.anchorBelow;
}

List<Widget> _CupertinoTextSelectionToolbar_children$(
    CupertinoTextSelectionToolbar target) {
  return target.children;
}

Widget Function(BuildContext, Offset, bool, Widget)
    _CupertinoTextSelectionToolbar_toolbarBuilder$(
        CupertinoTextSelectionToolbar target) {
  return target.toolbarBuilder;
}

double _CupertinoTextSelectionToolbar_kToolbarScreenPadding$() {
  return CupertinoTextSelectionToolbar.kToolbarScreenPadding;
}

Function _CupertinoTextSelectionToolbar_build$(
  m.Scope scope,
  CupertinoTextSelectionToolbar target,
) =>
    target.build;
