// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/text_selection_toolbar.dart';
import 'dart:collection';
import 'dart:ui';
import 'package:flutter/foundation.dart' show Brightness, clampDouble;
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/text_selection_toolbar_button.dart';
import 'package:flutter/src/cupertino/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/text_selection_toolbar.dart',
  {
    'CupertinoTextSelectionToolbar.kToolbarScreenPadding':
        _CupertinoTextSelectionToolbar_kToolbarScreenPadding$,
    'CupertinoTextSelectionToolbar.': _CupertinoTextSelectionToolbar__$,
  },
  {},
  {
    'CupertinoTextSelectionToolbar': m.ClassMirror(
      'CupertinoTextSelectionToolbar',
      {
        '#as': CupertinoTextSelectionToolbar_as$,
        '#is': CupertinoTextSelectionToolbar_is$,
        'anchorAbove': _CupertinoTextSelectionToolbar_anchorAbove$,
        'anchorBelow': _CupertinoTextSelectionToolbar_anchorBelow$,
        'children': _CupertinoTextSelectionToolbar_children$,
        'toolbarBuilder': _CupertinoTextSelectionToolbar_toolbarBuilder$,
        'build': _CupertinoTextSelectionToolbar_build$,
      },
      {},
    )
  },
);
Function CupertinoTextSelectionToolbar_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoTextSelectionToolbar;
Function CupertinoTextSelectionToolbar_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoTextSelectionToolbar;
Function _CupertinoTextSelectionToolbar_anchorAbove$(
  m.Scope scope$,
  CupertinoTextSelectionToolbar target$,
) =>
    () {
      return target$.anchorAbove;
    };
Function _CupertinoTextSelectionToolbar_anchorBelow$(
  m.Scope scope$,
  CupertinoTextSelectionToolbar target$,
) =>
    () {
      return target$.anchorBelow;
    };
Function _CupertinoTextSelectionToolbar_children$(
  m.Scope scope$,
  CupertinoTextSelectionToolbar target$,
) =>
    () {
      return target$.children;
    };
Function _CupertinoTextSelectionToolbar_toolbarBuilder$(
  m.Scope scope$,
  CupertinoTextSelectionToolbar target$,
) =>
    () {
      return target$.toolbarBuilder;
    };
Function _CupertinoTextSelectionToolbar_kToolbarScreenPadding$(
        m.Scope scope$) =>
    () => CupertinoTextSelectionToolbar.kToolbarScreenPadding;
Function _CupertinoTextSelectionToolbar__$(m.Scope scope$) => ({
      Key? key,
      required Offset anchorAbove,
      required Offset anchorBelow,
      required List children,
      m.FunctionPointer? toolbarBuilder,
    }) {
      Widget toolbarBuilderProxy(
        BuildContext toolbarBuilder_context$,
        Offset toolbarBuilder_anchor$,
        bool toolbarBuilder_isAbove$,
        Widget toolbarBuilder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            toolbarBuilder!,
            [
              toolbarBuilder_context$,
              toolbarBuilder_anchor$,
              toolbarBuilder_isAbove$,
              toolbarBuilder_child$,
            ],
            {},
          );
      if (toolbarBuilder == null) {
        return CupertinoTextSelectionToolbar(
          anchorAbove: anchorAbove,
          anchorBelow: anchorBelow,
          children: List.from(children),
          key: key,
        );
      }
      return CupertinoTextSelectionToolbar(
        anchorAbove: anchorAbove,
        anchorBelow: anchorBelow,
        children: List.from(children),
        key: key,
        toolbarBuilder: toolbarBuilderProxy,
      );
    };
Function _CupertinoTextSelectionToolbar_build$(
  m.Scope scope$,
  CupertinoTextSelectionToolbar target$,
) =>
    target$.build;
