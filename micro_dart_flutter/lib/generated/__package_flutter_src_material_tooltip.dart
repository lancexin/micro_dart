// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/tooltip.dart';
import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/feedback.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/tooltip_theme.dart';
import 'package:flutter/src/material/tooltip_visibility.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/tooltip.dart',
  {'Tooltip.dismissAllToolTips': _Tooltip_dismissAllToolTips$},
  {},
  {
    'Tooltip': m.ClassMirror(
      'Tooltip',
      {
        'message': _Tooltip_message$,
        'richMessage': _Tooltip_richMessage$,
        'height': _Tooltip_height$,
        'padding': _Tooltip_padding$,
        'margin': _Tooltip_margin$,
        'verticalOffset': _Tooltip_verticalOffset$,
        'preferBelow': _Tooltip_preferBelow$,
        'excludeFromSemantics': _Tooltip_excludeFromSemantics$,
        'child': _Tooltip_child$,
        'decoration': _Tooltip_decoration$,
        'textStyle': _Tooltip_textStyle$,
        'textAlign': _Tooltip_textAlign$,
        'waitDuration': _Tooltip_waitDuration$,
        'showDuration': _Tooltip_showDuration$,
        'triggerMode': _Tooltip_triggerMode$,
        'enableFeedback': _Tooltip_enableFeedback$,
        'onTriggered': _Tooltip_onTriggered$,
        'createState': _Tooltip_createState$,
        'debugFillProperties': _Tooltip_debugFillProperties$,
      },
      {},
    ),
    'TooltipState': m.ClassMirror(
      'TooltipState',
      {
        'initState': _TooltipState_initState$,
        'didChangeDependencies': _TooltipState_didChangeDependencies$,
        'ensureTooltipVisible': _TooltipState_ensureTooltipVisible$,
        'deactivate': _TooltipState_deactivate$,
        'dispose': _TooltipState_dispose$,
        'build': _TooltipState_build$,
      },
      {},
    ),
  },
);
String? _Tooltip_message$(Tooltip target) {
  return target.message;
}

InlineSpan? _Tooltip_richMessage$(Tooltip target) {
  return target.richMessage;
}

double? _Tooltip_height$(Tooltip target) {
  return target.height;
}

EdgeInsetsGeometry? _Tooltip_padding$(Tooltip target) {
  return target.padding;
}

EdgeInsetsGeometry? _Tooltip_margin$(Tooltip target) {
  return target.margin;
}

double? _Tooltip_verticalOffset$(Tooltip target) {
  return target.verticalOffset;
}

bool? _Tooltip_preferBelow$(Tooltip target) {
  return target.preferBelow;
}

bool? _Tooltip_excludeFromSemantics$(Tooltip target) {
  return target.excludeFromSemantics;
}

Widget? _Tooltip_child$(Tooltip target) {
  return target.child;
}

Decoration? _Tooltip_decoration$(Tooltip target) {
  return target.decoration;
}

TextStyle? _Tooltip_textStyle$(Tooltip target) {
  return target.textStyle;
}

TextAlign? _Tooltip_textAlign$(Tooltip target) {
  return target.textAlign;
}

Duration? _Tooltip_waitDuration$(Tooltip target) {
  return target.waitDuration;
}

Duration? _Tooltip_showDuration$(Tooltip target) {
  return target.showDuration;
}

TooltipTriggerMode? _Tooltip_triggerMode$(Tooltip target) {
  return target.triggerMode;
}

bool? _Tooltip_enableFeedback$(Tooltip target) {
  return target.enableFeedback;
}

void Function()? _Tooltip_onTriggered$(Tooltip target) {
  return target.onTriggered;
}

Function _Tooltip_dismissAllToolTips$(m.Scope scope) =>
    Tooltip.dismissAllToolTips;
Function _Tooltip_createState$(
  m.Scope scope,
  Tooltip target,
) =>
    target.createState;
Function _Tooltip_debugFillProperties$(
  m.Scope scope,
  Tooltip target,
) =>
    target.debugFillProperties;
Function _TooltipState_initState$(
  m.Scope scope,
  TooltipState target,
) =>
    target.initState;
Function _TooltipState_didChangeDependencies$(
  m.Scope scope,
  TooltipState target,
) =>
    target.didChangeDependencies;
Function _TooltipState_ensureTooltipVisible$(
  m.Scope scope,
  TooltipState target,
) =>
    target.ensureTooltipVisible;
Function _TooltipState_deactivate$(
  m.Scope scope,
  TooltipState target,
) =>
    target.deactivate;
Function _TooltipState_dispose$(
  m.Scope scope,
  TooltipState target,
) =>
    target.dispose;
Function _TooltipState_build$(
  m.Scope scope,
  TooltipState target,
) =>
    target.build;
