// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/tooltip.dart';
import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/feedback.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/tooltip_theme.dart';
import 'package:flutter/src/material/tooltip_visibility.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/tooltip.dart',
  {
    'Tooltip.': _Tooltip__$,
    'Tooltip.dismissAllToolTips': _Tooltip_dismissAllToolTips$,
    'TooltipState.': _TooltipState__$,
  },
  {},
  {
    'Tooltip': m.ClassMirror(
      'Tooltip',
      {
        '#as': Tooltip_as$,
        '#is': Tooltip_is$,
        'message': _Tooltip_message$,
        'richMessage': _Tooltip_richMessage$,
        'height': _Tooltip_height$,
        'padding': _Tooltip_padding$,
        'margin': _Tooltip_margin$,
        'verticalOffset': _Tooltip_verticalOffset$,
        'preferBelow': _Tooltip_preferBelow$,
        'excludeFromSemantics': _Tooltip_excludeFromSemantics$,
        'child': _Tooltip_child$,
        'decoration': _Tooltip_decoration$,
        'textStyle': _Tooltip_textStyle$,
        'textAlign': _Tooltip_textAlign$,
        'waitDuration': _Tooltip_waitDuration$,
        'showDuration': _Tooltip_showDuration$,
        'triggerMode': _Tooltip_triggerMode$,
        'enableFeedback': _Tooltip_enableFeedback$,
        'onTriggered': _Tooltip_onTriggered$,
        'createState': _Tooltip_createState$,
        'debugFillProperties': _Tooltip_debugFillProperties$,
      },
      {},
    ),
    'TooltipState': m.ClassMirror(
      'TooltipState',
      {
        '#as': TooltipState_as$,
        '#is': TooltipState_is$,
        'initState': _TooltipState_initState$,
        'didChangeDependencies': _TooltipState_didChangeDependencies$,
        'ensureTooltipVisible': _TooltipState_ensureTooltipVisible$,
        'deactivate': _TooltipState_deactivate$,
        'dispose': _TooltipState_dispose$,
        'build': _TooltipState_build$,
      },
      {},
    ),
  },
);
Function Tooltip_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Tooltip;
Function Tooltip_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Tooltip;
Function _Tooltip_message$(
  m.Scope scope$,
  Tooltip target$,
) =>
    () {
      return target$.message;
    };
Function _Tooltip_richMessage$(
  m.Scope scope$,
  Tooltip target$,
) =>
    () {
      return target$.richMessage;
    };
Function _Tooltip_height$(
  m.Scope scope$,
  Tooltip target$,
) =>
    () {
      return target$.height;
    };
Function _Tooltip_padding$(
  m.Scope scope$,
  Tooltip target$,
) =>
    () {
      return target$.padding;
    };
Function _Tooltip_margin$(
  m.Scope scope$,
  Tooltip target$,
) =>
    () {
      return target$.margin;
    };
Function _Tooltip_verticalOffset$(
  m.Scope scope$,
  Tooltip target$,
) =>
    () {
      return target$.verticalOffset;
    };
Function _Tooltip_preferBelow$(
  m.Scope scope$,
  Tooltip target$,
) =>
    () {
      return target$.preferBelow;
    };
Function _Tooltip_excludeFromSemantics$(
  m.Scope scope$,
  Tooltip target$,
) =>
    () {
      return target$.excludeFromSemantics;
    };
Function _Tooltip_child$(
  m.Scope scope$,
  Tooltip target$,
) =>
    () {
      return target$.child;
    };
Function _Tooltip_decoration$(
  m.Scope scope$,
  Tooltip target$,
) =>
    () {
      return target$.decoration;
    };
Function _Tooltip_textStyle$(
  m.Scope scope$,
  Tooltip target$,
) =>
    () {
      return target$.textStyle;
    };
Function _Tooltip_textAlign$(
  m.Scope scope$,
  Tooltip target$,
) =>
    () {
      return target$.textAlign;
    };
Function _Tooltip_waitDuration$(
  m.Scope scope$,
  Tooltip target$,
) =>
    () {
      return target$.waitDuration;
    };
Function _Tooltip_showDuration$(
  m.Scope scope$,
  Tooltip target$,
) =>
    () {
      return target$.showDuration;
    };
Function _Tooltip_triggerMode$(
  m.Scope scope$,
  Tooltip target$,
) =>
    () {
      return target$.triggerMode;
    };
Function _Tooltip_enableFeedback$(
  m.Scope scope$,
  Tooltip target$,
) =>
    () {
      return target$.enableFeedback;
    };
Function _Tooltip_onTriggered$(
  m.Scope scope$,
  Tooltip target$,
) =>
    () {
      return target$.onTriggered;
    };
Function _Tooltip__$(m.Scope scope$) => ({
      Key? key,
      String? message,
      InlineSpan? richMessage,
      double? height,
      EdgeInsetsGeometry? padding,
      EdgeInsetsGeometry? margin,
      double? verticalOffset,
      bool? preferBelow,
      bool? excludeFromSemantics,
      Decoration? decoration,
      TextStyle? textStyle,
      TextAlign? textAlign,
      Duration? waitDuration,
      Duration? showDuration,
      TooltipTriggerMode? triggerMode,
      bool? enableFeedback,
      m.FunctionPointer? onTriggered,
      Widget? child,
    }) {
      void onTriggeredProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTriggered!,
            [],
            {},
          );
      return Tooltip(
        child: child,
        decoration: decoration,
        enableFeedback: enableFeedback,
        excludeFromSemantics: excludeFromSemantics,
        height: height,
        key: key,
        margin: margin,
        message: message,
        onTriggered: onTriggered == null ? null : onTriggeredProxy,
        padding: padding,
        preferBelow: preferBelow,
        richMessage: richMessage,
        showDuration: showDuration,
        textAlign: textAlign,
        textStyle: textStyle,
        triggerMode: triggerMode,
        verticalOffset: verticalOffset,
        waitDuration: waitDuration,
      );
    };
Function _Tooltip_dismissAllToolTips$(m.Scope scope$) =>
    Tooltip.dismissAllToolTips;
Function _Tooltip_createState$(
  m.Scope scope$,
  Tooltip target$,
) =>
    target$.createState;
Function _Tooltip_debugFillProperties$(
  m.Scope scope$,
  Tooltip target$,
) =>
    target$.debugFillProperties;
Function TooltipState_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TooltipState;
Function TooltipState_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TooltipState;
Function _TooltipState__$(m.Scope scope$) => () {
      return TooltipState();
    };
Function _TooltipState_initState$(
  m.Scope scope$,
  TooltipState target$,
) =>
    target$.initState;
Function _TooltipState_didChangeDependencies$(
  m.Scope scope$,
  TooltipState target$,
) =>
    target$.didChangeDependencies;
Function _TooltipState_ensureTooltipVisible$(
  m.Scope scope$,
  TooltipState target$,
) =>
    target$.ensureTooltipVisible;
Function _TooltipState_deactivate$(
  m.Scope scope$,
  TooltipState target$,
) =>
    target$.deactivate;
Function _TooltipState_dispose$(
  m.Scope scope$,
  TooltipState target$,
) =>
    target$.dispose;
Function _TooltipState_build$(
  m.Scope scope$,
  TooltipState target$,
) =>
    target$.build;
