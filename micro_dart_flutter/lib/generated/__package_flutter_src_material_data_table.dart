// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/data_table.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/checkbox.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/data_table_theme.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/divider.dart';
import 'package:flutter/src/material/dropdown.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/tooltip.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/data_table.dart',
  {
    'DataColumn.': _DataColumn__$,
    'DataRow.': _DataRow__$,
    'DataRow.byIndex': _DataRow_byIndex_$,
    'DataCell.empty': _DataCell_empty$,
    'DataCell.': _DataCell__$,
    'DataTable.': _DataTable__$,
    'TableRowInkWell.': _TableRowInkWell__$,
  },
  {},
  {
    'DataColumn': m.ClassMirror(
      'DataColumn',
      {
        '#as': DataColumn_as$,
        '#is': DataColumn_is$,
        'label': _DataColumn_label$,
        'tooltip': _DataColumn_tooltip$,
        'numeric': _DataColumn_numeric$,
        'onSort': _DataColumn_onSort$,
        'mouseCursor': _DataColumn_mouseCursor$,
      },
      {},
    ),
    'DataRow': m.ClassMirror(
      'DataRow',
      {
        '#as': DataRow_as$,
        '#is': DataRow_is$,
        'key': _DataRow_key$,
        'onSelectChanged': _DataRow_onSelectChanged$,
        'onLongPress': _DataRow_onLongPress$,
        'selected': _DataRow_selected$,
        'cells': _DataRow_cells$,
        'color': _DataRow_color$,
        'mouseCursor': _DataRow_mouseCursor$,
      },
      {},
    ),
    'DataCell': m.ClassMirror(
      'DataCell',
      {
        '#as': DataCell_as$,
        '#is': DataCell_is$,
        'child': _DataCell_child$,
        'placeholder': _DataCell_placeholder$,
        'showEditIcon': _DataCell_showEditIcon$,
        'onTap': _DataCell_onTap$,
        'onDoubleTap': _DataCell_onDoubleTap$,
        'onLongPress': _DataCell_onLongPress$,
        'onTapDown': _DataCell_onTapDown$,
        'onTapCancel': _DataCell_onTapCancel$,
      },
      {},
    ),
    'DataTable': m.ClassMirror(
      'DataTable',
      {
        '#as': DataTable_as$,
        '#is': DataTable_is$,
        'columns': _DataTable_columns$,
        'sortColumnIndex': _DataTable_sortColumnIndex$,
        'sortAscending': _DataTable_sortAscending$,
        'onSelectAll': _DataTable_onSelectAll$,
        'decoration': _DataTable_decoration$,
        'dataRowColor': _DataTable_dataRowColor$,
        'dataRowMinHeight': _DataTable_dataRowMinHeight$,
        'dataRowMaxHeight': _DataTable_dataRowMaxHeight$,
        'dataTextStyle': _DataTable_dataTextStyle$,
        'headingRowColor': _DataTable_headingRowColor$,
        'headingRowHeight': _DataTable_headingRowHeight$,
        'headingTextStyle': _DataTable_headingTextStyle$,
        'horizontalMargin': _DataTable_horizontalMargin$,
        'columnSpacing': _DataTable_columnSpacing$,
        'showCheckboxColumn': _DataTable_showCheckboxColumn$,
        'rows': _DataTable_rows$,
        'dividerThickness': _DataTable_dividerThickness$,
        'showBottomBorder': _DataTable_showBottomBorder$,
        'checkboxHorizontalMargin': _DataTable_checkboxHorizontalMargin$,
        'border': _DataTable_border$,
        'clipBehavior': _DataTable_clipBehavior$,
        'build': _DataTable_build$,
      },
      {},
    ),
    'TableRowInkWell': m.ClassMirror(
      'TableRowInkWell',
      {
        '#as': TableRowInkWell_as$,
        '#is': TableRowInkWell_is$,
        'getRectCallback': _TableRowInkWell_getRectCallback$,
        'debugCheckContext': _TableRowInkWell_debugCheckContext$,
      },
      {},
    ),
  },
);
Function DataColumn_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DataColumn;
Function DataColumn_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DataColumn;
Function _DataColumn_label$(
  m.Scope scope$,
  DataColumn target$,
) =>
    () {
      return target$.label;
    };
Function _DataColumn_tooltip$(
  m.Scope scope$,
  DataColumn target$,
) =>
    () {
      return target$.tooltip;
    };
Function _DataColumn_numeric$(
  m.Scope scope$,
  DataColumn target$,
) =>
    () {
      return target$.numeric;
    };
Function _DataColumn_onSort$(
  m.Scope scope$,
  DataColumn target$,
) =>
    () {
      return target$.onSort;
    };
Function _DataColumn_mouseCursor$(
  m.Scope scope$,
  DataColumn target$,
) =>
    () {
      return target$.mouseCursor;
    };
Function _DataColumn__$(m.Scope scope$) => ({
      required Widget label,
      String? tooltip,
      bool? numeric,
      m.FunctionPointer? onSort,
      MaterialStateProperty<MouseCursor>? mouseCursor,
    }) {
      void onSortProxy(
        int onSort_columnIndex$,
        bool onSort_ascending$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSort!,
            [
              onSort_columnIndex$,
              onSort_ascending$,
            ],
            {},
          );
      return DataColumn(
        label: label,
        mouseCursor: mouseCursor,
        numeric: numeric ?? false,
        onSort: onSort == null ? null : onSortProxy,
        tooltip: tooltip,
      );
    };
Function DataRow_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DataRow;
Function DataRow_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DataRow;
Function _DataRow_key$(
  m.Scope scope$,
  DataRow target$,
) =>
    () {
      return target$.key;
    };
Function _DataRow_onSelectChanged$(
  m.Scope scope$,
  DataRow target$,
) =>
    () {
      return target$.onSelectChanged;
    };
Function _DataRow_onLongPress$(
  m.Scope scope$,
  DataRow target$,
) =>
    () {
      return target$.onLongPress;
    };
Function _DataRow_selected$(
  m.Scope scope$,
  DataRow target$,
) =>
    () {
      return target$.selected;
    };
Function _DataRow_cells$(
  m.Scope scope$,
  DataRow target$,
) =>
    () {
      return target$.cells;
    };
Function _DataRow_color$(
  m.Scope scope$,
  DataRow target$,
) =>
    () {
      return target$.color;
    };
Function _DataRow_mouseCursor$(
  m.Scope scope$,
  DataRow target$,
) =>
    () {
      return target$.mouseCursor;
    };
Function _DataRow__$(m.Scope scope$) => ({
      LocalKey? key,
      bool? selected,
      m.FunctionPointer? onSelectChanged,
      m.FunctionPointer? onLongPress,
      MaterialStateProperty<Color>? color,
      MaterialStateProperty<MouseCursor>? mouseCursor,
      required List cells,
    }) {
      void onLongPressProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onLongPress!,
            [],
            {},
          );
      void onSelectChangedProxy(bool? onSelectChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSelectChanged!,
            [onSelectChanged_value$],
            {},
          );
      return DataRow(
        cells: List.from(cells),
        color: color,
        key: key,
        mouseCursor: mouseCursor,
        onLongPress: onLongPress == null ? null : onLongPressProxy,
        onSelectChanged: onSelectChanged == null ? null : onSelectChangedProxy,
        selected: selected ?? false,
      );
    };
Function _DataRow_byIndex_$(m.Scope scope$) => ({
      int? index,
      bool? selected,
      m.FunctionPointer? onSelectChanged,
      m.FunctionPointer? onLongPress,
      MaterialStateProperty<Color>? color,
      MaterialStateProperty<MouseCursor>? mouseCursor,
      required List cells,
    }) {
      void onLongPressProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onLongPress!,
            [],
            {},
          );
      void onSelectChangedProxy(bool? onSelectChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSelectChanged!,
            [onSelectChanged_value$],
            {},
          );
      return DataRow.byIndex(
        cells: List.from(cells),
        color: color,
        index: index,
        mouseCursor: mouseCursor,
        onLongPress: onLongPress == null ? null : onLongPressProxy,
        onSelectChanged: onSelectChanged == null ? null : onSelectChangedProxy,
        selected: selected ?? false,
      );
    };
Function DataCell_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DataCell;
Function DataCell_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DataCell;
DataCell _DataCell_empty$() {
  return DataCell.empty;
}

Function _DataCell_child$(
  m.Scope scope$,
  DataCell target$,
) =>
    () {
      return target$.child;
    };
Function _DataCell_placeholder$(
  m.Scope scope$,
  DataCell target$,
) =>
    () {
      return target$.placeholder;
    };
Function _DataCell_showEditIcon$(
  m.Scope scope$,
  DataCell target$,
) =>
    () {
      return target$.showEditIcon;
    };
Function _DataCell_onTap$(
  m.Scope scope$,
  DataCell target$,
) =>
    () {
      return target$.onTap;
    };
Function _DataCell_onDoubleTap$(
  m.Scope scope$,
  DataCell target$,
) =>
    () {
      return target$.onDoubleTap;
    };
Function _DataCell_onLongPress$(
  m.Scope scope$,
  DataCell target$,
) =>
    () {
      return target$.onLongPress;
    };
Function _DataCell_onTapDown$(
  m.Scope scope$,
  DataCell target$,
) =>
    () {
      return target$.onTapDown;
    };
Function _DataCell_onTapCancel$(
  m.Scope scope$,
  DataCell target$,
) =>
    () {
      return target$.onTapCancel;
    };
Function _DataCell__$(m.Scope scope$) => (
      Widget child, {
      bool? placeholder,
      bool? showEditIcon,
      m.FunctionPointer? onTap,
      m.FunctionPointer? onLongPress,
      m.FunctionPointer? onTapDown,
      m.FunctionPointer? onDoubleTap,
      m.FunctionPointer? onTapCancel,
    }) {
      void onDoubleTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onDoubleTap!,
            [],
            {},
          );
      void onLongPressProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onLongPress!,
            [],
            {},
          );
      void onTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTap!,
            [],
            {},
          );
      void onTapCancelProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTapCancel!,
            [],
            {},
          );
      void onTapDownProxy(TapDownDetails onTapDown_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onTapDown!,
            [onTapDown_details$],
            {},
          );
      return DataCell(
        child,
        onDoubleTap: onDoubleTap == null ? null : onDoubleTapProxy,
        onLongPress: onLongPress == null ? null : onLongPressProxy,
        onTap: onTap == null ? null : onTapProxy,
        onTapCancel: onTapCancel == null ? null : onTapCancelProxy,
        onTapDown: onTapDown == null ? null : onTapDownProxy,
        placeholder: placeholder ?? false,
        showEditIcon: showEditIcon ?? false,
      );
    };
Function DataTable_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DataTable;
Function DataTable_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DataTable;
Function _DataTable_columns$(
  m.Scope scope$,
  DataTable target$,
) =>
    () {
      return target$.columns;
    };
Function _DataTable_sortColumnIndex$(
  m.Scope scope$,
  DataTable target$,
) =>
    () {
      return target$.sortColumnIndex;
    };
Function _DataTable_sortAscending$(
  m.Scope scope$,
  DataTable target$,
) =>
    () {
      return target$.sortAscending;
    };
Function _DataTable_onSelectAll$(
  m.Scope scope$,
  DataTable target$,
) =>
    () {
      return target$.onSelectAll;
    };
Function _DataTable_decoration$(
  m.Scope scope$,
  DataTable target$,
) =>
    () {
      return target$.decoration;
    };
Function _DataTable_dataRowColor$(
  m.Scope scope$,
  DataTable target$,
) =>
    () {
      return target$.dataRowColor;
    };
Function _DataTable_dataRowMinHeight$(
  m.Scope scope$,
  DataTable target$,
) =>
    () {
      return target$.dataRowMinHeight;
    };
Function _DataTable_dataRowMaxHeight$(
  m.Scope scope$,
  DataTable target$,
) =>
    () {
      return target$.dataRowMaxHeight;
    };
Function _DataTable_dataTextStyle$(
  m.Scope scope$,
  DataTable target$,
) =>
    () {
      return target$.dataTextStyle;
    };
Function _DataTable_headingRowColor$(
  m.Scope scope$,
  DataTable target$,
) =>
    () {
      return target$.headingRowColor;
    };
Function _DataTable_headingRowHeight$(
  m.Scope scope$,
  DataTable target$,
) =>
    () {
      return target$.headingRowHeight;
    };
Function _DataTable_headingTextStyle$(
  m.Scope scope$,
  DataTable target$,
) =>
    () {
      return target$.headingTextStyle;
    };
Function _DataTable_horizontalMargin$(
  m.Scope scope$,
  DataTable target$,
) =>
    () {
      return target$.horizontalMargin;
    };
Function _DataTable_columnSpacing$(
  m.Scope scope$,
  DataTable target$,
) =>
    () {
      return target$.columnSpacing;
    };
Function _DataTable_showCheckboxColumn$(
  m.Scope scope$,
  DataTable target$,
) =>
    () {
      return target$.showCheckboxColumn;
    };
Function _DataTable_rows$(
  m.Scope scope$,
  DataTable target$,
) =>
    () {
      return target$.rows;
    };
Function _DataTable_dividerThickness$(
  m.Scope scope$,
  DataTable target$,
) =>
    () {
      return target$.dividerThickness;
    };
Function _DataTable_showBottomBorder$(
  m.Scope scope$,
  DataTable target$,
) =>
    () {
      return target$.showBottomBorder;
    };
Function _DataTable_checkboxHorizontalMargin$(
  m.Scope scope$,
  DataTable target$,
) =>
    () {
      return target$.checkboxHorizontalMargin;
    };
Function _DataTable_border$(
  m.Scope scope$,
  DataTable target$,
) =>
    () {
      return target$.border;
    };
Function _DataTable_clipBehavior$(
  m.Scope scope$,
  DataTable target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _DataTable__$(m.Scope scope$) => ({
      Key? key,
      required List columns,
      int? sortColumnIndex,
      bool? sortAscending,
      m.FunctionPointer? onSelectAll,
      Decoration? decoration,
      MaterialStateProperty<Color>? dataRowColor,
      double? dataRowHeight,
      double? dataRowMinHeight,
      double? dataRowMaxHeight,
      TextStyle? dataTextStyle,
      MaterialStateProperty<Color>? headingRowColor,
      double? headingRowHeight,
      TextStyle? headingTextStyle,
      double? horizontalMargin,
      double? columnSpacing,
      bool? showCheckboxColumn,
      bool? showBottomBorder,
      double? dividerThickness,
      required List rows,
      double? checkboxHorizontalMargin,
      TableBorder? border,
      Clip? clipBehavior,
    }) {
      void onSelectAllProxy(bool? onSelectAll_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSelectAll!,
            [onSelectAll_value$],
            {},
          );
      return DataTable(
        border: border,
        checkboxHorizontalMargin: checkboxHorizontalMargin,
        clipBehavior: clipBehavior ?? Clip.none,
        columnSpacing: columnSpacing,
        columns: List.from(columns),
        dataRowColor: dataRowColor,
        dataRowHeight: dataRowHeight,
        dataRowMaxHeight: dataRowMaxHeight,
        dataRowMinHeight: dataRowMinHeight,
        dataTextStyle: dataTextStyle,
        decoration: decoration,
        dividerThickness: dividerThickness,
        headingRowColor: headingRowColor,
        headingRowHeight: headingRowHeight,
        headingTextStyle: headingTextStyle,
        horizontalMargin: horizontalMargin,
        key: key,
        onSelectAll: onSelectAll == null ? null : onSelectAllProxy,
        rows: List.from(rows),
        showBottomBorder: showBottomBorder ?? false,
        showCheckboxColumn: showCheckboxColumn ?? true,
        sortAscending: sortAscending ?? true,
        sortColumnIndex: sortColumnIndex,
      );
    };
Function _DataTable_build$(
  m.Scope scope$,
  DataTable target$,
) =>
    target$.build;
Function TableRowInkWell_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TableRowInkWell;
Function TableRowInkWell_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TableRowInkWell;
Function _TableRowInkWell__$(m.Scope scope$) => ({
      Key? key,
      Widget? child,
      m.FunctionPointer? onTap,
      m.FunctionPointer? onDoubleTap,
      m.FunctionPointer? onLongPress,
      m.FunctionPointer? onHighlightChanged,
      m.FunctionPointer? onSecondaryTap,
      m.FunctionPointer? onSecondaryTapDown,
      MaterialStateProperty<Color>? overlayColor,
      MouseCursor? mouseCursor,
    }) {
      void onDoubleTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onDoubleTap!,
            [],
            {},
          );
      void onHighlightChangedProxy(bool onHighlightChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onHighlightChanged!,
            [onHighlightChanged_value$],
            {},
          );
      void onLongPressProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onLongPress!,
            [],
            {},
          );
      void onSecondaryTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onSecondaryTap!,
            [],
            {},
          );
      void onSecondaryTapDownProxy(
              TapDownDetails onSecondaryTapDown_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSecondaryTapDown!,
            [onSecondaryTapDown_details$],
            {},
          );
      void onTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTap!,
            [],
            {},
          );
      return TableRowInkWell(
        child: child,
        key: key,
        mouseCursor: mouseCursor,
        onDoubleTap: onDoubleTap == null ? null : onDoubleTapProxy,
        onHighlightChanged:
            onHighlightChanged == null ? null : onHighlightChangedProxy,
        onLongPress: onLongPress == null ? null : onLongPressProxy,
        onSecondaryTap: onSecondaryTap == null ? null : onSecondaryTapProxy,
        onSecondaryTapDown:
            onSecondaryTapDown == null ? null : onSecondaryTapDownProxy,
        onTap: onTap == null ? null : onTapProxy,
        overlayColor: overlayColor,
      );
    };
Function _TableRowInkWell_getRectCallback$(
  m.Scope scope$,
  TableRowInkWell target$,
) =>
    target$.getRectCallback;
Function _TableRowInkWell_debugCheckContext$(
  m.Scope scope$,
  TableRowInkWell target$,
) =>
    target$.debugCheckContext;
