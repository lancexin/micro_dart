// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/input_chip.dart';
import 'package:flutter/foundation.dart' show clampDouble;
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/chip.dart';
import 'package:flutter/src/material/chip_theme.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/input_chip.dart',
  {'InputChip.': _InputChip__$},
  {},
  {
    'InputChip': m.ClassMirror(
      'InputChip',
      {
        '#as': InputChip_as$,
        '#is': InputChip_is$,
        'avatar': _InputChip_avatar$,
        'label': _InputChip_label$,
        'labelStyle': _InputChip_labelStyle$,
        'labelPadding': _InputChip_labelPadding$,
        'selected': _InputChip_selected$,
        'isEnabled': _InputChip_isEnabled$,
        'onSelected': _InputChip_onSelected$,
        'deleteIcon': _InputChip_deleteIcon$,
        'onDeleted': _InputChip_onDeleted$,
        'deleteIconColor': _InputChip_deleteIconColor$,
        'deleteButtonTooltipMessage': _InputChip_deleteButtonTooltipMessage$,
        'onPressed': _InputChip_onPressed$,
        'pressElevation': _InputChip_pressElevation$,
        'disabledColor': _InputChip_disabledColor$,
        'selectedColor': _InputChip_selectedColor$,
        'tooltip': _InputChip_tooltip$,
        'side': _InputChip_side$,
        'shape': _InputChip_shape$,
        'clipBehavior': _InputChip_clipBehavior$,
        'focusNode': _InputChip_focusNode$,
        'autofocus': _InputChip_autofocus$,
        'backgroundColor': _InputChip_backgroundColor$,
        'padding': _InputChip_padding$,
        'visualDensity': _InputChip_visualDensity$,
        'materialTapTargetSize': _InputChip_materialTapTargetSize$,
        'elevation': _InputChip_elevation$,
        'shadowColor': _InputChip_shadowColor$,
        'surfaceTintColor': _InputChip_surfaceTintColor$,
        'selectedShadowColor': _InputChip_selectedShadowColor$,
        'showCheckmark': _InputChip_showCheckmark$,
        'checkmarkColor': _InputChip_checkmarkColor$,
        'avatarBorder': _InputChip_avatarBorder$,
        'iconTheme': _InputChip_iconTheme$,
        'useDeleteButtonTooltip': _InputChip_useDeleteButtonTooltip$,
        'build': _InputChip_build$,
      },
      {},
    )
  },
);
Function InputChip_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as InputChip;
Function InputChip_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is InputChip;
Function _InputChip_avatar$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.avatar;
    };
Function _InputChip_label$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.label;
    };
Function _InputChip_labelStyle$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.labelStyle;
    };
Function _InputChip_labelPadding$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.labelPadding;
    };
Function _InputChip_selected$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.selected;
    };
Function _InputChip_isEnabled$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.isEnabled;
    };
Function _InputChip_onSelected$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.onSelected;
    };
Function _InputChip_deleteIcon$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.deleteIcon;
    };
Function _InputChip_onDeleted$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.onDeleted;
    };
Function _InputChip_deleteIconColor$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.deleteIconColor;
    };
Function _InputChip_deleteButtonTooltipMessage$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.deleteButtonTooltipMessage;
    };
Function _InputChip_onPressed$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.onPressed;
    };
Function _InputChip_pressElevation$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.pressElevation;
    };
Function _InputChip_disabledColor$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.disabledColor;
    };
Function _InputChip_selectedColor$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.selectedColor;
    };
Function _InputChip_tooltip$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.tooltip;
    };
Function _InputChip_side$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.side;
    };
Function _InputChip_shape$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.shape;
    };
Function _InputChip_clipBehavior$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _InputChip_focusNode$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.focusNode;
    };
Function _InputChip_autofocus$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.autofocus;
    };
Function _InputChip_backgroundColor$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _InputChip_padding$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.padding;
    };
Function _InputChip_visualDensity$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.visualDensity;
    };
Function _InputChip_materialTapTargetSize$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.materialTapTargetSize;
    };
Function _InputChip_elevation$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.elevation;
    };
Function _InputChip_shadowColor$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _InputChip_surfaceTintColor$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _InputChip_selectedShadowColor$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.selectedShadowColor;
    };
Function _InputChip_showCheckmark$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.showCheckmark;
    };
Function _InputChip_checkmarkColor$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.checkmarkColor;
    };
Function _InputChip_avatarBorder$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.avatarBorder;
    };
Function _InputChip_iconTheme$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.iconTheme;
    };
Function _InputChip_useDeleteButtonTooltip$(
  m.Scope scope$,
  InputChip target$,
) =>
    () {
      return target$.useDeleteButtonTooltip;
    };
Function _InputChip__$(m.Scope scope$) => ({
      Key? key,
      Widget? avatar,
      required Widget label,
      TextStyle? labelStyle,
      EdgeInsetsGeometry? labelPadding,
      bool? selected,
      bool? isEnabled,
      m.FunctionPointer? onSelected,
      Widget? deleteIcon,
      m.FunctionPointer? onDeleted,
      Color? deleteIconColor,
      String? deleteButtonTooltipMessage,
      m.FunctionPointer? onPressed,
      double? pressElevation,
      Color? disabledColor,
      Color? selectedColor,
      String? tooltip,
      BorderSide? side,
      OutlinedBorder? shape,
      Clip? clipBehavior,
      FocusNode? focusNode,
      bool? autofocus,
      Color? backgroundColor,
      EdgeInsetsGeometry? padding,
      VisualDensity? visualDensity,
      MaterialTapTargetSize? materialTapTargetSize,
      double? elevation,
      Color? shadowColor,
      Color? surfaceTintColor,
      IconThemeData? iconTheme,
      Color? selectedShadowColor,
      bool? showCheckmark,
      Color? checkmarkColor,
      ShapeBorder? avatarBorder,
      bool? useDeleteButtonTooltip,
    }) {
      void onDeletedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onDeleted!,
            [],
            {},
          );
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      void onSelectedProxy(bool onSelected_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSelected!,
            [onSelected_value$],
            {},
          );
      return InputChip(
        autofocus: autofocus ?? false,
        avatar: avatar,
        avatarBorder: avatarBorder ?? const CircleBorder(),
        backgroundColor: backgroundColor,
        checkmarkColor: checkmarkColor,
        clipBehavior: clipBehavior ?? Clip.none,
        deleteButtonTooltipMessage: deleteButtonTooltipMessage,
        deleteIcon: deleteIcon,
        deleteIconColor: deleteIconColor,
        disabledColor: disabledColor,
        elevation: elevation,
        focusNode: focusNode,
        iconTheme: iconTheme,
        isEnabled: isEnabled ?? true,
        key: key,
        label: label,
        labelPadding: labelPadding,
        labelStyle: labelStyle,
        materialTapTargetSize: materialTapTargetSize,
        onDeleted: onDeleted == null ? null : onDeletedProxy,
        onPressed: onPressed == null ? null : onPressedProxy,
        onSelected: onSelected == null ? null : onSelectedProxy,
        padding: padding,
        pressElevation: pressElevation,
        selected: selected ?? false,
        selectedColor: selectedColor,
        selectedShadowColor: selectedShadowColor,
        shadowColor: shadowColor,
        shape: shape,
        showCheckmark: showCheckmark,
        side: side,
        surfaceTintColor: surfaceTintColor,
        tooltip: tooltip,
        useDeleteButtonTooltip: useDeleteButtonTooltip ?? true,
        visualDensity: visualDensity,
      );
    };
Function _InputChip_build$(
  m.Scope scope$,
  InputChip target$,
) =>
    target$.build;
