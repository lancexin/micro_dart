// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/input_chip.dart';
import 'package:flutter/foundation.dart' show clampDouble;
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/chip.dart';
import 'package:flutter/src/material/chip_theme.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/input_chip.dart',
  {},
  {},
  {
    'InputChip': m.ClassMirror(
      'InputChip',
      {
        'avatar': _InputChip_avatar$,
        'label': _InputChip_label$,
        'labelStyle': _InputChip_labelStyle$,
        'labelPadding': _InputChip_labelPadding$,
        'selected': _InputChip_selected$,
        'isEnabled': _InputChip_isEnabled$,
        'onSelected': _InputChip_onSelected$,
        'deleteIcon': _InputChip_deleteIcon$,
        'onDeleted': _InputChip_onDeleted$,
        'deleteIconColor': _InputChip_deleteIconColor$,
        'deleteButtonTooltipMessage': _InputChip_deleteButtonTooltipMessage$,
        'onPressed': _InputChip_onPressed$,
        'pressElevation': _InputChip_pressElevation$,
        'disabledColor': _InputChip_disabledColor$,
        'selectedColor': _InputChip_selectedColor$,
        'tooltip': _InputChip_tooltip$,
        'side': _InputChip_side$,
        'shape': _InputChip_shape$,
        'clipBehavior': _InputChip_clipBehavior$,
        'focusNode': _InputChip_focusNode$,
        'autofocus': _InputChip_autofocus$,
        'backgroundColor': _InputChip_backgroundColor$,
        'padding': _InputChip_padding$,
        'visualDensity': _InputChip_visualDensity$,
        'materialTapTargetSize': _InputChip_materialTapTargetSize$,
        'elevation': _InputChip_elevation$,
        'shadowColor': _InputChip_shadowColor$,
        'surfaceTintColor': _InputChip_surfaceTintColor$,
        'selectedShadowColor': _InputChip_selectedShadowColor$,
        'showCheckmark': _InputChip_showCheckmark$,
        'checkmarkColor': _InputChip_checkmarkColor$,
        'avatarBorder': _InputChip_avatarBorder$,
        'iconTheme': _InputChip_iconTheme$,
        'useDeleteButtonTooltip': _InputChip_useDeleteButtonTooltip$,
        'build': _InputChip_build$,
      },
      {},
    )
  },
);
Widget? _InputChip_avatar$(InputChip target) {
  return target.avatar;
}

Widget _InputChip_label$(InputChip target) {
  return target.label;
}

TextStyle? _InputChip_labelStyle$(InputChip target) {
  return target.labelStyle;
}

EdgeInsetsGeometry? _InputChip_labelPadding$(InputChip target) {
  return target.labelPadding;
}

bool _InputChip_selected$(InputChip target) {
  return target.selected;
}

bool _InputChip_isEnabled$(InputChip target) {
  return target.isEnabled;
}

void Function(bool)? _InputChip_onSelected$(InputChip target) {
  return target.onSelected;
}

Widget? _InputChip_deleteIcon$(InputChip target) {
  return target.deleteIcon;
}

void Function()? _InputChip_onDeleted$(InputChip target) {
  return target.onDeleted;
}

Color? _InputChip_deleteIconColor$(InputChip target) {
  return target.deleteIconColor;
}

String? _InputChip_deleteButtonTooltipMessage$(InputChip target) {
  return target.deleteButtonTooltipMessage;
}

void Function()? _InputChip_onPressed$(InputChip target) {
  return target.onPressed;
}

double? _InputChip_pressElevation$(InputChip target) {
  return target.pressElevation;
}

Color? _InputChip_disabledColor$(InputChip target) {
  return target.disabledColor;
}

Color? _InputChip_selectedColor$(InputChip target) {
  return target.selectedColor;
}

String? _InputChip_tooltip$(InputChip target) {
  return target.tooltip;
}

BorderSide? _InputChip_side$(InputChip target) {
  return target.side;
}

OutlinedBorder? _InputChip_shape$(InputChip target) {
  return target.shape;
}

Clip _InputChip_clipBehavior$(InputChip target) {
  return target.clipBehavior;
}

FocusNode? _InputChip_focusNode$(InputChip target) {
  return target.focusNode;
}

bool _InputChip_autofocus$(InputChip target) {
  return target.autofocus;
}

Color? _InputChip_backgroundColor$(InputChip target) {
  return target.backgroundColor;
}

EdgeInsetsGeometry? _InputChip_padding$(InputChip target) {
  return target.padding;
}

VisualDensity? _InputChip_visualDensity$(InputChip target) {
  return target.visualDensity;
}

MaterialTapTargetSize? _InputChip_materialTapTargetSize$(InputChip target) {
  return target.materialTapTargetSize;
}

double? _InputChip_elevation$(InputChip target) {
  return target.elevation;
}

Color? _InputChip_shadowColor$(InputChip target) {
  return target.shadowColor;
}

Color? _InputChip_surfaceTintColor$(InputChip target) {
  return target.surfaceTintColor;
}

Color? _InputChip_selectedShadowColor$(InputChip target) {
  return target.selectedShadowColor;
}

bool? _InputChip_showCheckmark$(InputChip target) {
  return target.showCheckmark;
}

Color? _InputChip_checkmarkColor$(InputChip target) {
  return target.checkmarkColor;
}

ShapeBorder _InputChip_avatarBorder$(InputChip target) {
  return target.avatarBorder;
}

IconThemeData? _InputChip_iconTheme$(InputChip target) {
  return target.iconTheme;
}

bool _InputChip_useDeleteButtonTooltip$(InputChip target) {
  return target.useDeleteButtonTooltip;
}

Function _InputChip_build$(
  m.Scope scope,
  InputChip target,
) =>
    target.build;
