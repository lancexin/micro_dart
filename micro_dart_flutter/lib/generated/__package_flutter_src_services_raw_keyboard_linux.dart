// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/raw_keyboard_linux.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/services/keyboard_maps.g.dart';
import 'package:flutter/src/services/raw_keyboard.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/raw_keyboard_linux.dart',
  {
    'GLFWKeyHelper.modifierCapsLock': _GLFWKeyHelper_modifierCapsLock$,
    'GLFWKeyHelper.modifierShift': _GLFWKeyHelper_modifierShift$,
    'GLFWKeyHelper.modifierControl': _GLFWKeyHelper_modifierControl$,
    'GLFWKeyHelper.modifierAlt': _GLFWKeyHelper_modifierAlt$,
    'GLFWKeyHelper.modifierMeta': _GLFWKeyHelper_modifierMeta$,
    'GLFWKeyHelper.modifierNumericPad': _GLFWKeyHelper_modifierNumericPad$,
    'GtkKeyHelper.modifierShift': _GtkKeyHelper_modifierShift$,
    'GtkKeyHelper.modifierCapsLock': _GtkKeyHelper_modifierCapsLock$,
    'GtkKeyHelper.modifierControl': _GtkKeyHelper_modifierControl$,
    'GtkKeyHelper.modifierMod1': _GtkKeyHelper_modifierMod1$,
    'GtkKeyHelper.modifierMod2': _GtkKeyHelper_modifierMod2$,
    'GtkKeyHelper.modifierMeta': _GtkKeyHelper_modifierMeta$,
  },
  {},
  {
    'RawKeyEventDataLinux': m.ClassMirror(
      'RawKeyEventDataLinux',
      {
        'keyHelper': _RawKeyEventDataLinux_keyHelper$,
        'unicodeScalarValues': _RawKeyEventDataLinux_unicodeScalarValues$,
        'scanCode': _RawKeyEventDataLinux_scanCode$,
        'keyCode': _RawKeyEventDataLinux_keyCode$,
        'modifiers': _RawKeyEventDataLinux_modifiers$,
        'isDown': _RawKeyEventDataLinux_isDown$,
        'specifiedLogicalKey': _RawKeyEventDataLinux_specifiedLogicalKey$,
        'keyLabel': _RawKeyEventDataLinux_keyLabel$,
        'physicalKey': _RawKeyEventDataLinux_physicalKey$,
        'logicalKey': _RawKeyEventDataLinux_logicalKey$,
        'hashCode': _RawKeyEventDataLinux_hashCode$,
        'isModifierPressed': _RawKeyEventDataLinux_isModifierPressed$,
        'getModifierSide': _RawKeyEventDataLinux_getModifierSide$,
        'debugFillProperties': _RawKeyEventDataLinux_debugFillProperties$,
      },
      {},
    ),
    'KeyHelper': m.ClassMirror(
      'KeyHelper',
      {
        'debugToolkit': _KeyHelper_debugToolkit$,
        'platformPlane': _KeyHelper_platformPlane$,
        'getModifierSide': _KeyHelper_getModifierSide$,
        'isModifierPressed': _KeyHelper_isModifierPressed$,
        'numpadKey': _KeyHelper_numpadKey$,
        'logicalKey': _KeyHelper_logicalKey$,
      },
      {},
    ),
    'GLFWKeyHelper': m.ClassMirror(
      'GLFWKeyHelper',
      {
        'debugToolkit': _GLFWKeyHelper_debugToolkit$,
        'platformPlane': _GLFWKeyHelper_platformPlane$,
        'isModifierPressed': _GLFWKeyHelper_isModifierPressed$,
        'getModifierSide': _GLFWKeyHelper_getModifierSide$,
        'numpadKey': _GLFWKeyHelper_numpadKey$,
        'logicalKey': _GLFWKeyHelper_logicalKey$,
      },
      {},
    ),
    'GtkKeyHelper': m.ClassMirror(
      'GtkKeyHelper',
      {
        'debugToolkit': _GtkKeyHelper_debugToolkit$,
        'platformPlane': _GtkKeyHelper_platformPlane$,
        'isModifierPressed': _GtkKeyHelper_isModifierPressed$,
        'getModifierSide': _GtkKeyHelper_getModifierSide$,
        'numpadKey': _GtkKeyHelper_numpadKey$,
        'logicalKey': _GtkKeyHelper_logicalKey$,
      },
      {},
    ),
  },
);
KeyHelper _RawKeyEventDataLinux_keyHelper$(RawKeyEventDataLinux target) {
  return target.keyHelper;
}

int _RawKeyEventDataLinux_unicodeScalarValues$(RawKeyEventDataLinux target) {
  return target.unicodeScalarValues;
}

int _RawKeyEventDataLinux_scanCode$(RawKeyEventDataLinux target) {
  return target.scanCode;
}

int _RawKeyEventDataLinux_keyCode$(RawKeyEventDataLinux target) {
  return target.keyCode;
}

int _RawKeyEventDataLinux_modifiers$(RawKeyEventDataLinux target) {
  return target.modifiers;
}

bool _RawKeyEventDataLinux_isDown$(RawKeyEventDataLinux target) {
  return target.isDown;
}

int? _RawKeyEventDataLinux_specifiedLogicalKey$(RawKeyEventDataLinux target) {
  return target.specifiedLogicalKey;
}

String _RawKeyEventDataLinux_keyLabel$(RawKeyEventDataLinux target) {
  return target.keyLabel;
}

PhysicalKeyboardKey _RawKeyEventDataLinux_physicalKey$(
    RawKeyEventDataLinux target) {
  return target.physicalKey;
}

LogicalKeyboardKey _RawKeyEventDataLinux_logicalKey$(
    RawKeyEventDataLinux target) {
  return target.logicalKey;
}

int _RawKeyEventDataLinux_hashCode$(RawKeyEventDataLinux target) {
  return target.hashCode;
}

Function _RawKeyEventDataLinux_isModifierPressed$(
  m.Scope scope,
  RawKeyEventDataLinux target,
) =>
    target.isModifierPressed;
Function _RawKeyEventDataLinux_getModifierSide$(
  m.Scope scope,
  RawKeyEventDataLinux target,
) =>
    target.getModifierSide;
Function _RawKeyEventDataLinux_debugFillProperties$(
  m.Scope scope,
  RawKeyEventDataLinux target,
) =>
    target.debugFillProperties;
String _KeyHelper_debugToolkit$(KeyHelper target) {
  return target.debugToolkit;
}

int _KeyHelper_platformPlane$(KeyHelper target) {
  return target.platformPlane;
}

Function _KeyHelper_getModifierSide$(
  m.Scope scope,
  KeyHelper target,
) =>
    target.getModifierSide;
Function _KeyHelper_isModifierPressed$(
  m.Scope scope,
  KeyHelper target,
) =>
    target.isModifierPressed;
Function _KeyHelper_numpadKey$(
  m.Scope scope,
  KeyHelper target,
) =>
    target.numpadKey;
Function _KeyHelper_logicalKey$(
  m.Scope scope,
  KeyHelper target,
) =>
    target.logicalKey;
int _GLFWKeyHelper_modifierCapsLock$() {
  return GLFWKeyHelper.modifierCapsLock;
}

int _GLFWKeyHelper_modifierShift$() {
  return GLFWKeyHelper.modifierShift;
}

int _GLFWKeyHelper_modifierControl$() {
  return GLFWKeyHelper.modifierControl;
}

int _GLFWKeyHelper_modifierAlt$() {
  return GLFWKeyHelper.modifierAlt;
}

int _GLFWKeyHelper_modifierMeta$() {
  return GLFWKeyHelper.modifierMeta;
}

int _GLFWKeyHelper_modifierNumericPad$() {
  return GLFWKeyHelper.modifierNumericPad;
}

String _GLFWKeyHelper_debugToolkit$(GLFWKeyHelper target) {
  return target.debugToolkit;
}

int _GLFWKeyHelper_platformPlane$(GLFWKeyHelper target) {
  return target.platformPlane;
}

Function _GLFWKeyHelper_isModifierPressed$(
  m.Scope scope,
  GLFWKeyHelper target,
) =>
    target.isModifierPressed;
Function _GLFWKeyHelper_getModifierSide$(
  m.Scope scope,
  GLFWKeyHelper target,
) =>
    target.getModifierSide;
Function _GLFWKeyHelper_numpadKey$(
  m.Scope scope,
  GLFWKeyHelper target,
) =>
    target.numpadKey;
Function _GLFWKeyHelper_logicalKey$(
  m.Scope scope,
  GLFWKeyHelper target,
) =>
    target.logicalKey;
int _GtkKeyHelper_modifierShift$() {
  return GtkKeyHelper.modifierShift;
}

int _GtkKeyHelper_modifierCapsLock$() {
  return GtkKeyHelper.modifierCapsLock;
}

int _GtkKeyHelper_modifierControl$() {
  return GtkKeyHelper.modifierControl;
}

int _GtkKeyHelper_modifierMod1$() {
  return GtkKeyHelper.modifierMod1;
}

int _GtkKeyHelper_modifierMod2$() {
  return GtkKeyHelper.modifierMod2;
}

int _GtkKeyHelper_modifierMeta$() {
  return GtkKeyHelper.modifierMeta;
}

String _GtkKeyHelper_debugToolkit$(GtkKeyHelper target) {
  return target.debugToolkit;
}

int _GtkKeyHelper_platformPlane$(GtkKeyHelper target) {
  return target.platformPlane;
}

Function _GtkKeyHelper_isModifierPressed$(
  m.Scope scope,
  GtkKeyHelper target,
) =>
    target.isModifierPressed;
Function _GtkKeyHelper_getModifierSide$(
  m.Scope scope,
  GtkKeyHelper target,
) =>
    target.getModifierSide;
Function _GtkKeyHelper_numpadKey$(
  m.Scope scope,
  GtkKeyHelper target,
) =>
    target.numpadKey;
Function _GtkKeyHelper_logicalKey$(
  m.Scope scope,
  GtkKeyHelper target,
) =>
    target.logicalKey;
