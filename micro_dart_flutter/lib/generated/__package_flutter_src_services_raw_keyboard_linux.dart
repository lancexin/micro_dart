// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/raw_keyboard_linux.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/services/keyboard_maps.g.dart';
import 'package:flutter/src/services/raw_keyboard.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/raw_keyboard_linux.dart',
  {
    'RawKeyEventDataLinux.': _RawKeyEventDataLinux__$,
    'KeyHelper.': _KeyHelper__$,
    'GLFWKeyHelper.modifierCapsLock': _GLFWKeyHelper_modifierCapsLock$,
    'GLFWKeyHelper.modifierShift': _GLFWKeyHelper_modifierShift$,
    'GLFWKeyHelper.modifierControl': _GLFWKeyHelper_modifierControl$,
    'GLFWKeyHelper.modifierAlt': _GLFWKeyHelper_modifierAlt$,
    'GLFWKeyHelper.modifierMeta': _GLFWKeyHelper_modifierMeta$,
    'GLFWKeyHelper.modifierNumericPad': _GLFWKeyHelper_modifierNumericPad$,
    'GLFWKeyHelper.': _GLFWKeyHelper__$,
    'GtkKeyHelper.modifierShift': _GtkKeyHelper_modifierShift$,
    'GtkKeyHelper.modifierCapsLock': _GtkKeyHelper_modifierCapsLock$,
    'GtkKeyHelper.modifierControl': _GtkKeyHelper_modifierControl$,
    'GtkKeyHelper.modifierMod1': _GtkKeyHelper_modifierMod1$,
    'GtkKeyHelper.modifierMod2': _GtkKeyHelper_modifierMod2$,
    'GtkKeyHelper.modifierMeta': _GtkKeyHelper_modifierMeta$,
    'GtkKeyHelper.': _GtkKeyHelper__$,
  },
  {},
  {
    'RawKeyEventDataLinux': m.ClassMirror(
      'RawKeyEventDataLinux',
      {
        '#as': RawKeyEventDataLinux_as$,
        '#is': RawKeyEventDataLinux_is$,
        'keyHelper': _RawKeyEventDataLinux_keyHelper$,
        'unicodeScalarValues': _RawKeyEventDataLinux_unicodeScalarValues$,
        'scanCode': _RawKeyEventDataLinux_scanCode$,
        'keyCode': _RawKeyEventDataLinux_keyCode$,
        'modifiers': _RawKeyEventDataLinux_modifiers$,
        'isDown': _RawKeyEventDataLinux_isDown$,
        'specifiedLogicalKey': _RawKeyEventDataLinux_specifiedLogicalKey$,
        'keyLabel': _RawKeyEventDataLinux_keyLabel$,
        'physicalKey': _RawKeyEventDataLinux_physicalKey$,
        'logicalKey': _RawKeyEventDataLinux_logicalKey$,
        'hashCode': _RawKeyEventDataLinux_hashCode$,
        'isModifierPressed': _RawKeyEventDataLinux_isModifierPressed$,
        'getModifierSide': _RawKeyEventDataLinux_getModifierSide$,
        'debugFillProperties': _RawKeyEventDataLinux_debugFillProperties$,
        '==': _RawKeyEventDataLinux_eq$$,
      },
      {},
    ),
    'KeyHelper': m.ClassMirror(
      'KeyHelper',
      {
        '#as': KeyHelper_as$,
        '#is': KeyHelper_is$,
        'debugToolkit': _KeyHelper_debugToolkit$,
        'platformPlane': _KeyHelper_platformPlane$,
        'getModifierSide': _KeyHelper_getModifierSide$,
        'isModifierPressed': _KeyHelper_isModifierPressed$,
        'numpadKey': _KeyHelper_numpadKey$,
        'logicalKey': _KeyHelper_logicalKey$,
      },
      {},
    ),
    'GLFWKeyHelper': m.ClassMirror(
      'GLFWKeyHelper',
      {
        '#as': GLFWKeyHelper_as$,
        '#is': GLFWKeyHelper_is$,
        'debugToolkit': _GLFWKeyHelper_debugToolkit$,
        'platformPlane': _GLFWKeyHelper_platformPlane$,
        'isModifierPressed': _GLFWKeyHelper_isModifierPressed$,
        'getModifierSide': _GLFWKeyHelper_getModifierSide$,
        'numpadKey': _GLFWKeyHelper_numpadKey$,
        'logicalKey': _GLFWKeyHelper_logicalKey$,
      },
      {},
    ),
    'GtkKeyHelper': m.ClassMirror(
      'GtkKeyHelper',
      {
        '#as': GtkKeyHelper_as$,
        '#is': GtkKeyHelper_is$,
        'debugToolkit': _GtkKeyHelper_debugToolkit$,
        'platformPlane': _GtkKeyHelper_platformPlane$,
        'isModifierPressed': _GtkKeyHelper_isModifierPressed$,
        'getModifierSide': _GtkKeyHelper_getModifierSide$,
        'numpadKey': _GtkKeyHelper_numpadKey$,
        'logicalKey': _GtkKeyHelper_logicalKey$,
      },
      {},
    ),
  },
);
Function RawKeyEventDataLinux_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RawKeyEventDataLinux;
Function RawKeyEventDataLinux_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RawKeyEventDataLinux;
Function _RawKeyEventDataLinux_keyHelper$(
  m.Scope scope$,
  RawKeyEventDataLinux target$,
) =>
    () {
      return target$.keyHelper;
    };
Function _RawKeyEventDataLinux_unicodeScalarValues$(
  m.Scope scope$,
  RawKeyEventDataLinux target$,
) =>
    () {
      return target$.unicodeScalarValues;
    };
Function _RawKeyEventDataLinux_scanCode$(
  m.Scope scope$,
  RawKeyEventDataLinux target$,
) =>
    () {
      return target$.scanCode;
    };
Function _RawKeyEventDataLinux_keyCode$(
  m.Scope scope$,
  RawKeyEventDataLinux target$,
) =>
    () {
      return target$.keyCode;
    };
Function _RawKeyEventDataLinux_modifiers$(
  m.Scope scope$,
  RawKeyEventDataLinux target$,
) =>
    () {
      return target$.modifiers;
    };
Function _RawKeyEventDataLinux_isDown$(
  m.Scope scope$,
  RawKeyEventDataLinux target$,
) =>
    () {
      return target$.isDown;
    };
Function _RawKeyEventDataLinux_specifiedLogicalKey$(
  m.Scope scope$,
  RawKeyEventDataLinux target$,
) =>
    () {
      return target$.specifiedLogicalKey;
    };
Function _RawKeyEventDataLinux_keyLabel$(
  m.Scope scope$,
  RawKeyEventDataLinux target$,
) =>
    () {
      return target$.keyLabel;
    };
Function _RawKeyEventDataLinux_physicalKey$(
  m.Scope scope$,
  RawKeyEventDataLinux target$,
) =>
    () {
      return target$.physicalKey;
    };
Function _RawKeyEventDataLinux_logicalKey$(
  m.Scope scope$,
  RawKeyEventDataLinux target$,
) =>
    () {
      return target$.logicalKey;
    };
Function _RawKeyEventDataLinux_hashCode$(
  m.Scope scope$,
  RawKeyEventDataLinux target$,
) =>
    () {
      return target$.hashCode;
    };
Function _RawKeyEventDataLinux__$(m.Scope scope$) => ({
      required KeyHelper keyHelper,
      int? unicodeScalarValues,
      int? scanCode,
      int? keyCode,
      int? modifiers,
      required bool isDown,
      int? specifiedLogicalKey,
    }) {
      return RawKeyEventDataLinux(
        isDown: isDown,
        keyCode: keyCode ?? 0,
        keyHelper: keyHelper,
        modifiers: modifiers ?? 0,
        scanCode: scanCode ?? 0,
        specifiedLogicalKey: specifiedLogicalKey,
        unicodeScalarValues: unicodeScalarValues ?? 0,
      );
    };
Function _RawKeyEventDataLinux_isModifierPressed$(
  m.Scope scope$,
  RawKeyEventDataLinux target$,
) =>
    target$.isModifierPressed;
Function _RawKeyEventDataLinux_getModifierSide$(
  m.Scope scope$,
  RawKeyEventDataLinux target$,
) =>
    target$.getModifierSide;
Function _RawKeyEventDataLinux_debugFillProperties$(
  m.Scope scope$,
  RawKeyEventDataLinux target$,
) =>
    target$.debugFillProperties;
Function _RawKeyEventDataLinux_eq$$(
  m.Scope scope$,
  RawKeyEventDataLinux target$,
) =>
    (Object other$) => target$ == other$;
Function KeyHelper_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as KeyHelper;
Function KeyHelper_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is KeyHelper;
Function _KeyHelper_debugToolkit$(
  m.Scope scope$,
  KeyHelper target$,
) =>
    () {
      return target$.debugToolkit;
    };
Function _KeyHelper_platformPlane$(
  m.Scope scope$,
  KeyHelper target$,
) =>
    () {
      return target$.platformPlane;
    };
Function _KeyHelper__$(m.Scope scope$) => (String toolkit) {
      return KeyHelper(toolkit);
    };
Function _KeyHelper_getModifierSide$(
  m.Scope scope$,
  KeyHelper target$,
) =>
    target$.getModifierSide;
Function _KeyHelper_isModifierPressed$(
  m.Scope scope$,
  KeyHelper target$,
) =>
    target$.isModifierPressed;
Function _KeyHelper_numpadKey$(
  m.Scope scope$,
  KeyHelper target$,
) =>
    target$.numpadKey;
Function _KeyHelper_logicalKey$(
  m.Scope scope$,
  KeyHelper target$,
) =>
    target$.logicalKey;
Function GLFWKeyHelper_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as GLFWKeyHelper;
Function GLFWKeyHelper_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is GLFWKeyHelper;
Function _GLFWKeyHelper_modifierCapsLock$(m.Scope scope$) =>
    () => GLFWKeyHelper.modifierCapsLock;
Function _GLFWKeyHelper_modifierShift$(m.Scope scope$) =>
    () => GLFWKeyHelper.modifierShift;
Function _GLFWKeyHelper_modifierControl$(m.Scope scope$) =>
    () => GLFWKeyHelper.modifierControl;
Function _GLFWKeyHelper_modifierAlt$(m.Scope scope$) =>
    () => GLFWKeyHelper.modifierAlt;
Function _GLFWKeyHelper_modifierMeta$(m.Scope scope$) =>
    () => GLFWKeyHelper.modifierMeta;
Function _GLFWKeyHelper_modifierNumericPad$(m.Scope scope$) =>
    () => GLFWKeyHelper.modifierNumericPad;
Function _GLFWKeyHelper_debugToolkit$(
  m.Scope scope$,
  GLFWKeyHelper target$,
) =>
    () {
      return target$.debugToolkit;
    };
Function _GLFWKeyHelper_platformPlane$(
  m.Scope scope$,
  GLFWKeyHelper target$,
) =>
    () {
      return target$.platformPlane;
    };
Function _GLFWKeyHelper__$(m.Scope scope$) => () {
      return GLFWKeyHelper();
    };
Function _GLFWKeyHelper_isModifierPressed$(
  m.Scope scope$,
  GLFWKeyHelper target$,
) =>
    target$.isModifierPressed;
Function _GLFWKeyHelper_getModifierSide$(
  m.Scope scope$,
  GLFWKeyHelper target$,
) =>
    target$.getModifierSide;
Function _GLFWKeyHelper_numpadKey$(
  m.Scope scope$,
  GLFWKeyHelper target$,
) =>
    target$.numpadKey;
Function _GLFWKeyHelper_logicalKey$(
  m.Scope scope$,
  GLFWKeyHelper target$,
) =>
    target$.logicalKey;
Function GtkKeyHelper_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as GtkKeyHelper;
Function GtkKeyHelper_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is GtkKeyHelper;
Function _GtkKeyHelper_modifierShift$(m.Scope scope$) =>
    () => GtkKeyHelper.modifierShift;
Function _GtkKeyHelper_modifierCapsLock$(m.Scope scope$) =>
    () => GtkKeyHelper.modifierCapsLock;
Function _GtkKeyHelper_modifierControl$(m.Scope scope$) =>
    () => GtkKeyHelper.modifierControl;
Function _GtkKeyHelper_modifierMod1$(m.Scope scope$) =>
    () => GtkKeyHelper.modifierMod1;
Function _GtkKeyHelper_modifierMod2$(m.Scope scope$) =>
    () => GtkKeyHelper.modifierMod2;
Function _GtkKeyHelper_modifierMeta$(m.Scope scope$) =>
    () => GtkKeyHelper.modifierMeta;
Function _GtkKeyHelper_debugToolkit$(
  m.Scope scope$,
  GtkKeyHelper target$,
) =>
    () {
      return target$.debugToolkit;
    };
Function _GtkKeyHelper_platformPlane$(
  m.Scope scope$,
  GtkKeyHelper target$,
) =>
    () {
      return target$.platformPlane;
    };
Function _GtkKeyHelper__$(m.Scope scope$) => () {
      return GtkKeyHelper();
    };
Function _GtkKeyHelper_isModifierPressed$(
  m.Scope scope$,
  GtkKeyHelper target$,
) =>
    target$.isModifierPressed;
Function _GtkKeyHelper_getModifierSide$(
  m.Scope scope$,
  GtkKeyHelper target$,
) =>
    target$.getModifierSide;
Function _GtkKeyHelper_numpadKey$(
  m.Scope scope$,
  GtkKeyHelper target$,
) =>
    target$.numpadKey;
Function _GtkKeyHelper_logicalKey$(
  m.Scope scope$,
  GtkKeyHelper target$,
) =>
    target$.logicalKey;
