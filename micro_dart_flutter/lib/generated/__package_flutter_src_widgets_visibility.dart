// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/visibility.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/sliver.dart';
import 'package:flutter/src/widgets/ticker_provider.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/visibility.dart',
  {'Visibility.of': _Visibility_of$},
  {},
  {
    'Visibility': m.ClassMirror(
      'Visibility',
      {
        '#as': Visibility_as$,
        '#is': Visibility_is$,
        'child': _Visibility_child$,
        'replacement': _Visibility_replacement$,
        'visible': _Visibility_visible$,
        'maintainState': _Visibility_maintainState$,
        'maintainAnimation': _Visibility_maintainAnimation$,
        'maintainSize': _Visibility_maintainSize$,
        'maintainSemantics': _Visibility_maintainSemantics$,
        'maintainInteractivity': _Visibility_maintainInteractivity$,
        'build': _Visibility_build$,
        'debugFillProperties': _Visibility_debugFillProperties$,
      },
      {},
    ),
    'SliverVisibility': m.ClassMirror(
      'SliverVisibility',
      {
        '#as': SliverVisibility_as$,
        '#is': SliverVisibility_is$,
        'sliver': _SliverVisibility_sliver$,
        'replacementSliver': _SliverVisibility_replacementSliver$,
        'visible': _SliverVisibility_visible$,
        'maintainState': _SliverVisibility_maintainState$,
        'maintainAnimation': _SliverVisibility_maintainAnimation$,
        'maintainSize': _SliverVisibility_maintainSize$,
        'maintainSemantics': _SliverVisibility_maintainSemantics$,
        'maintainInteractivity': _SliverVisibility_maintainInteractivity$,
        'build': _SliverVisibility_build$,
        'debugFillProperties': _SliverVisibility_debugFillProperties$,
      },
      {},
    ),
  },
);
Function Visibility_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Visibility;
Function Visibility_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Visibility;
Widget _Visibility_child$(Visibility target) {
  return target.child;
}

Widget _Visibility_replacement$(Visibility target) {
  return target.replacement;
}

bool _Visibility_visible$(Visibility target) {
  return target.visible;
}

bool _Visibility_maintainState$(Visibility target) {
  return target.maintainState;
}

bool _Visibility_maintainAnimation$(Visibility target) {
  return target.maintainAnimation;
}

bool _Visibility_maintainSize$(Visibility target) {
  return target.maintainSize;
}

bool _Visibility_maintainSemantics$(Visibility target) {
  return target.maintainSemantics;
}

bool _Visibility_maintainInteractivity$(Visibility target) {
  return target.maintainInteractivity;
}

Function _Visibility_of$(m.Scope scope) => Visibility.of;
Function _Visibility_build$(
  m.Scope scope,
  Visibility target,
) =>
    target.build;
Function _Visibility_debugFillProperties$(
  m.Scope scope,
  Visibility target,
) =>
    target.debugFillProperties;
Function SliverVisibility_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SliverVisibility;
Function SliverVisibility_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SliverVisibility;
Widget _SliverVisibility_sliver$(SliverVisibility target) {
  return target.sliver;
}

Widget _SliverVisibility_replacementSliver$(SliverVisibility target) {
  return target.replacementSliver;
}

bool _SliverVisibility_visible$(SliverVisibility target) {
  return target.visible;
}

bool _SliverVisibility_maintainState$(SliverVisibility target) {
  return target.maintainState;
}

bool _SliverVisibility_maintainAnimation$(SliverVisibility target) {
  return target.maintainAnimation;
}

bool _SliverVisibility_maintainSize$(SliverVisibility target) {
  return target.maintainSize;
}

bool _SliverVisibility_maintainSemantics$(SliverVisibility target) {
  return target.maintainSemantics;
}

bool _SliverVisibility_maintainInteractivity$(SliverVisibility target) {
  return target.maintainInteractivity;
}

Function _SliverVisibility_build$(
  m.Scope scope,
  SliverVisibility target,
) =>
    target.build;
Function _SliverVisibility_debugFillProperties$(
  m.Scope scope,
  SliverVisibility target,
) =>
    target.debugFillProperties;
