// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/visibility.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/sliver.dart';
import 'package:flutter/src/widgets/ticker_provider.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/visibility.dart',
  {
    'Visibility.': _Visibility__$,
    'Visibility.maintain': _Visibility_maintain_$,
    'Visibility.of': _Visibility_of$,
    'SliverVisibility.': _SliverVisibility__$,
    'SliverVisibility.maintain': _SliverVisibility_maintain_$,
  },
  {},
  {
    'Visibility': m.ClassMirror(
      'Visibility',
      {
        '#as': Visibility_as$,
        '#is': Visibility_is$,
        'child': _Visibility_child$,
        'replacement': _Visibility_replacement$,
        'visible': _Visibility_visible$,
        'maintainState': _Visibility_maintainState$,
        'maintainAnimation': _Visibility_maintainAnimation$,
        'maintainSize': _Visibility_maintainSize$,
        'maintainSemantics': _Visibility_maintainSemantics$,
        'maintainInteractivity': _Visibility_maintainInteractivity$,
        'build': _Visibility_build$,
        'debugFillProperties': _Visibility_debugFillProperties$,
      },
      {},
    ),
    'SliverVisibility': m.ClassMirror(
      'SliverVisibility',
      {
        '#as': SliverVisibility_as$,
        '#is': SliverVisibility_is$,
        'sliver': _SliverVisibility_sliver$,
        'replacementSliver': _SliverVisibility_replacementSliver$,
        'visible': _SliverVisibility_visible$,
        'maintainState': _SliverVisibility_maintainState$,
        'maintainAnimation': _SliverVisibility_maintainAnimation$,
        'maintainSize': _SliverVisibility_maintainSize$,
        'maintainSemantics': _SliverVisibility_maintainSemantics$,
        'maintainInteractivity': _SliverVisibility_maintainInteractivity$,
        'build': _SliverVisibility_build$,
        'debugFillProperties': _SliverVisibility_debugFillProperties$,
      },
      {},
    ),
  },
);
Function Visibility_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Visibility;
Function Visibility_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Visibility;
Function _Visibility_child$(
  m.Scope scope$,
  Visibility target$,
) =>
    () {
      return target$.child;
    };
Function _Visibility_replacement$(
  m.Scope scope$,
  Visibility target$,
) =>
    () {
      return target$.replacement;
    };
Function _Visibility_visible$(
  m.Scope scope$,
  Visibility target$,
) =>
    () {
      return target$.visible;
    };
Function _Visibility_maintainState$(
  m.Scope scope$,
  Visibility target$,
) =>
    () {
      return target$.maintainState;
    };
Function _Visibility_maintainAnimation$(
  m.Scope scope$,
  Visibility target$,
) =>
    () {
      return target$.maintainAnimation;
    };
Function _Visibility_maintainSize$(
  m.Scope scope$,
  Visibility target$,
) =>
    () {
      return target$.maintainSize;
    };
Function _Visibility_maintainSemantics$(
  m.Scope scope$,
  Visibility target$,
) =>
    () {
      return target$.maintainSemantics;
    };
Function _Visibility_maintainInteractivity$(
  m.Scope scope$,
  Visibility target$,
) =>
    () {
      return target$.maintainInteractivity;
    };
Function _Visibility__$(m.Scope scope$) => ({
      Key? key,
      required Widget child,
      Widget? replacement,
      bool? visible,
      bool? maintainState,
      bool? maintainAnimation,
      bool? maintainSize,
      bool? maintainSemantics,
      bool? maintainInteractivity,
    }) {
      return Visibility(
        child: child,
        key: key,
        maintainAnimation: maintainAnimation ?? false,
        maintainInteractivity: maintainInteractivity ?? false,
        maintainSemantics: maintainSemantics ?? false,
        maintainSize: maintainSize ?? false,
        maintainState: maintainState ?? false,
        replacement: replacement ?? const SizedBox.shrink(),
        visible: visible ?? true,
      );
    };
Function _Visibility_maintain_$(m.Scope scope$) => Visibility.maintain;
Function _Visibility_of$(m.Scope scope$) => Visibility.of;
Function _Visibility_build$(
  m.Scope scope$,
  Visibility target$,
) =>
    target$.build;
Function _Visibility_debugFillProperties$(
  m.Scope scope$,
  Visibility target$,
) =>
    target$.debugFillProperties;
Function SliverVisibility_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverVisibility;
Function SliverVisibility_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverVisibility;
Function _SliverVisibility_sliver$(
  m.Scope scope$,
  SliverVisibility target$,
) =>
    () {
      return target$.sliver;
    };
Function _SliverVisibility_replacementSliver$(
  m.Scope scope$,
  SliverVisibility target$,
) =>
    () {
      return target$.replacementSliver;
    };
Function _SliverVisibility_visible$(
  m.Scope scope$,
  SliverVisibility target$,
) =>
    () {
      return target$.visible;
    };
Function _SliverVisibility_maintainState$(
  m.Scope scope$,
  SliverVisibility target$,
) =>
    () {
      return target$.maintainState;
    };
Function _SliverVisibility_maintainAnimation$(
  m.Scope scope$,
  SliverVisibility target$,
) =>
    () {
      return target$.maintainAnimation;
    };
Function _SliverVisibility_maintainSize$(
  m.Scope scope$,
  SliverVisibility target$,
) =>
    () {
      return target$.maintainSize;
    };
Function _SliverVisibility_maintainSemantics$(
  m.Scope scope$,
  SliverVisibility target$,
) =>
    () {
      return target$.maintainSemantics;
    };
Function _SliverVisibility_maintainInteractivity$(
  m.Scope scope$,
  SliverVisibility target$,
) =>
    () {
      return target$.maintainInteractivity;
    };
Function _SliverVisibility__$(m.Scope scope$) => ({
      Key? key,
      required Widget sliver,
      Widget? replacementSliver,
      bool? visible,
      bool? maintainState,
      bool? maintainAnimation,
      bool? maintainSize,
      bool? maintainSemantics,
      bool? maintainInteractivity,
    }) {
      return SliverVisibility(
        key: key,
        maintainAnimation: maintainAnimation ?? false,
        maintainInteractivity: maintainInteractivity ?? false,
        maintainSemantics: maintainSemantics ?? false,
        maintainSize: maintainSize ?? false,
        maintainState: maintainState ?? false,
        replacementSliver: replacementSliver ?? const SliverToBoxAdapter(),
        sliver: sliver,
        visible: visible ?? true,
      );
    };
Function _SliverVisibility_maintain_$(m.Scope scope$) =>
    SliverVisibility.maintain;
Function _SliverVisibility_build$(
  m.Scope scope$,
  SliverVisibility target$,
) =>
    target$.build;
Function _SliverVisibility_debugFillProperties$(
  m.Scope scope$,
  SliverVisibility target$,
) =>
    target$.debugFillProperties;
