// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/scheduler/binding.dart';
import 'dart:async';
import 'dart:collection';
import 'dart:developer' show Flow, Timeline, TimelineTask;
import 'dart:ui'
    show
        AppLifecycleState,
        DartPerformanceMode,
        FramePhase,
        FrameTiming,
        PlatformDispatcher,
        TimingsCallback;
import 'package:collection/collection.dart'
    show HeapPriorityQueue, PriorityQueue;
import 'package:flutter/foundation.dart';
import 'package:flutter/src/scheduler/debug.dart';
import 'package:flutter/src/scheduler/priority.dart';
import 'package:flutter/src/scheduler/service_extensions.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/scheduler/binding.dart',
  {
    'timeDilation': _timeDilation$,
    'SchedulerPhase.idle': _SchedulerPhase_idle$,
    'SchedulerPhase.transientCallbacks': _SchedulerPhase_transientCallbacks$,
    'SchedulerPhase.midFrameMicrotasks': _SchedulerPhase_midFrameMicrotasks$,
    'SchedulerPhase.persistentCallbacks': _SchedulerPhase_persistentCallbacks$,
    'SchedulerPhase.postFrameCallbacks': _SchedulerPhase_postFrameCallbacks$,
    'SchedulerPhase.values': _SchedulerPhase_values$,
    'defaultSchedulingStrategy': _defaultSchedulingStrategy$,
  },
  {'timeDilation': _timeDilation_set$},
  {
    'PerformanceModeRequestHandle': m.ClassMirror(
      'PerformanceModeRequestHandle',
      {'dispose': _PerformanceModeRequestHandle_dispose$},
      {},
    ),
    'SchedulerPhase': m.ClassMirror(
      'SchedulerPhase',
      {},
      {},
    ),
  },
);
double _timeDilation$() {
  return timeDilation;
}

void _timeDilation_set$(double other) {
  timeDilation = other;
}

Function _PerformanceModeRequestHandle_dispose$(
  m.Scope scope,
  PerformanceModeRequestHandle target,
) =>
    target.dispose;
SchedulerPhase _SchedulerPhase_idle$() {
  return SchedulerPhase.idle;
}

SchedulerPhase _SchedulerPhase_transientCallbacks$() {
  return SchedulerPhase.transientCallbacks;
}

SchedulerPhase _SchedulerPhase_midFrameMicrotasks$() {
  return SchedulerPhase.midFrameMicrotasks;
}

SchedulerPhase _SchedulerPhase_persistentCallbacks$() {
  return SchedulerPhase.persistentCallbacks;
}

SchedulerPhase _SchedulerPhase_postFrameCallbacks$() {
  return SchedulerPhase.postFrameCallbacks;
}

List<SchedulerPhase> _SchedulerPhase_values$() {
  return SchedulerPhase.values;
}

Function _defaultSchedulingStrategy$(m.Scope scope) =>
    defaultSchedulingStrategy;
