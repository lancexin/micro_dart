// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/scheduler/binding.dart';
import 'dart:async';
import 'dart:collection';
import 'dart:developer' show Flow, Timeline, TimelineTask;
import 'dart:ui'
    show
        AppLifecycleState,
        DartPerformanceMode,
        FramePhase,
        FrameTiming,
        PlatformDispatcher,
        TimingsCallback;
import 'package:collection/collection.dart'
    show HeapPriorityQueue, PriorityQueue;
import 'package:flutter/foundation.dart';
import 'package:flutter/src/scheduler/debug.dart';
import 'package:flutter/src/scheduler/priority.dart';
import 'package:flutter/src/scheduler/service_extensions.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/scheduler/binding.dart',
  {
    'timeDilation': _timeDilation$,
    'SchedulerPhase.idle': _SchedulerPhase_idle$,
    'SchedulerPhase.transientCallbacks': _SchedulerPhase_transientCallbacks$,
    'SchedulerPhase.midFrameMicrotasks': _SchedulerPhase_midFrameMicrotasks$,
    'SchedulerPhase.persistentCallbacks': _SchedulerPhase_persistentCallbacks$,
    'SchedulerPhase.postFrameCallbacks': _SchedulerPhase_postFrameCallbacks$,
    'SchedulerPhase.values': _SchedulerPhase_values$,
    'defaultSchedulingStrategy': _defaultSchedulingStrategy$,
  },
  {'timeDilation': _timeDilation_set$},
  {
    'PerformanceModeRequestHandle': m.ClassMirror(
      'PerformanceModeRequestHandle',
      {
        '#as': PerformanceModeRequestHandle_as$,
        '#is': PerformanceModeRequestHandle_is$,
        'dispose': _PerformanceModeRequestHandle_dispose$,
      },
      {},
    ),
    'SchedulerPhase': m.ClassMirror(
      'SchedulerPhase',
      {},
      {},
    ),
  },
);
Function _timeDilation$(m.Scope scope$) => () => timeDilation;
void _timeDilation_set$(double other$) {
  timeDilation = other$;
}

Function PerformanceModeRequestHandle_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PerformanceModeRequestHandle;
Function PerformanceModeRequestHandle_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PerformanceModeRequestHandle;
Function _PerformanceModeRequestHandle_dispose$(
  m.Scope scope$,
  PerformanceModeRequestHandle target$,
) =>
    target$.dispose;
Function _SchedulerPhase_idle$(m.Scope scope$) => () => SchedulerPhase.idle;
Function _SchedulerPhase_transientCallbacks$(m.Scope scope$) =>
    () => SchedulerPhase.transientCallbacks;
Function _SchedulerPhase_midFrameMicrotasks$(m.Scope scope$) =>
    () => SchedulerPhase.midFrameMicrotasks;
Function _SchedulerPhase_persistentCallbacks$(m.Scope scope$) =>
    () => SchedulerPhase.persistentCallbacks;
Function _SchedulerPhase_postFrameCallbacks$(m.Scope scope$) =>
    () => SchedulerPhase.postFrameCallbacks;
Function _SchedulerPhase_values$(m.Scope scope$) => () => SchedulerPhase.values;
Function _defaultSchedulingStrategy$(m.Scope scope$) =>
    defaultSchedulingStrategy;
