// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/animated_cross_fade.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/animated_size.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/focus_scope.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/ticker_provider.dart';
import 'package:flutter/src/widgets/transitions.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/animated_cross_fade.dart',
  {
    'AnimatedCrossFade.defaultLayoutBuilder':
        _AnimatedCrossFade_defaultLayoutBuilder$,
    'CrossFadeState.showFirst': _CrossFadeState_showFirst$,
    'CrossFadeState.showSecond': _CrossFadeState_showSecond$,
    'CrossFadeState.values': _CrossFadeState_values$,
  },
  {},
  {
    'AnimatedCrossFade': m.ClassMirror(
      'AnimatedCrossFade',
      {
        'firstChild': _AnimatedCrossFade_firstChild$,
        'secondChild': _AnimatedCrossFade_secondChild$,
        'crossFadeState': _AnimatedCrossFade_crossFadeState$,
        'duration': _AnimatedCrossFade_duration$,
        'reverseDuration': _AnimatedCrossFade_reverseDuration$,
        'firstCurve': _AnimatedCrossFade_firstCurve$,
        'secondCurve': _AnimatedCrossFade_secondCurve$,
        'sizeCurve': _AnimatedCrossFade_sizeCurve$,
        'alignment': _AnimatedCrossFade_alignment$,
        'layoutBuilder': _AnimatedCrossFade_layoutBuilder$,
        'excludeBottomFocus': _AnimatedCrossFade_excludeBottomFocus$,
        'createState': _AnimatedCrossFade_createState$,
        'debugFillProperties': _AnimatedCrossFade_debugFillProperties$,
      },
      {},
    ),
    'CrossFadeState': m.ClassMirror(
      'CrossFadeState',
      {},
      {},
    ),
  },
);
Widget _AnimatedCrossFade_firstChild$(AnimatedCrossFade target) {
  return target.firstChild;
}

Widget _AnimatedCrossFade_secondChild$(AnimatedCrossFade target) {
  return target.secondChild;
}

CrossFadeState _AnimatedCrossFade_crossFadeState$(AnimatedCrossFade target) {
  return target.crossFadeState;
}

Duration _AnimatedCrossFade_duration$(AnimatedCrossFade target) {
  return target.duration;
}

Duration? _AnimatedCrossFade_reverseDuration$(AnimatedCrossFade target) {
  return target.reverseDuration;
}

Curve _AnimatedCrossFade_firstCurve$(AnimatedCrossFade target) {
  return target.firstCurve;
}

Curve _AnimatedCrossFade_secondCurve$(AnimatedCrossFade target) {
  return target.secondCurve;
}

Curve _AnimatedCrossFade_sizeCurve$(AnimatedCrossFade target) {
  return target.sizeCurve;
}

AlignmentGeometry _AnimatedCrossFade_alignment$(AnimatedCrossFade target) {
  return target.alignment;
}

Widget Function(Widget, Key, Widget, Key) _AnimatedCrossFade_layoutBuilder$(
    AnimatedCrossFade target) {
  return target.layoutBuilder;
}

bool _AnimatedCrossFade_excludeBottomFocus$(AnimatedCrossFade target) {
  return target.excludeBottomFocus;
}

Function _AnimatedCrossFade_defaultLayoutBuilder$(m.Scope scope) =>
    AnimatedCrossFade.defaultLayoutBuilder;
Function _AnimatedCrossFade_createState$(
  m.Scope scope,
  AnimatedCrossFade target,
) =>
    target.createState;
Function _AnimatedCrossFade_debugFillProperties$(
  m.Scope scope,
  AnimatedCrossFade target,
) =>
    target.debugFillProperties;
CrossFadeState _CrossFadeState_showFirst$() {
  return CrossFadeState.showFirst;
}

CrossFadeState _CrossFadeState_showSecond$() {
  return CrossFadeState.showSecond;
}

List<CrossFadeState> _CrossFadeState_values$() {
  return CrossFadeState.values;
}
