// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/animated_cross_fade.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/animated_size.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/focus_scope.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/ticker_provider.dart';
import 'package:flutter/src/widgets/transitions.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/animated_cross_fade.dart',
  {
    'AnimatedCrossFade.': _AnimatedCrossFade__$,
    'AnimatedCrossFade.defaultLayoutBuilder':
        _AnimatedCrossFade_defaultLayoutBuilder$,
    'CrossFadeState.showFirst': _CrossFadeState_showFirst$,
    'CrossFadeState.showSecond': _CrossFadeState_showSecond$,
    'CrossFadeState.values': _CrossFadeState_values$,
  },
  {},
  {
    'AnimatedCrossFade': m.ClassMirror(
      'AnimatedCrossFade',
      {
        '#as': AnimatedCrossFade_as$,
        '#is': AnimatedCrossFade_is$,
        'firstChild': _AnimatedCrossFade_firstChild$,
        'secondChild': _AnimatedCrossFade_secondChild$,
        'crossFadeState': _AnimatedCrossFade_crossFadeState$,
        'duration': _AnimatedCrossFade_duration$,
        'reverseDuration': _AnimatedCrossFade_reverseDuration$,
        'firstCurve': _AnimatedCrossFade_firstCurve$,
        'secondCurve': _AnimatedCrossFade_secondCurve$,
        'sizeCurve': _AnimatedCrossFade_sizeCurve$,
        'alignment': _AnimatedCrossFade_alignment$,
        'layoutBuilder': _AnimatedCrossFade_layoutBuilder$,
        'excludeBottomFocus': _AnimatedCrossFade_excludeBottomFocus$,
        'createState': _AnimatedCrossFade_createState$,
        'debugFillProperties': _AnimatedCrossFade_debugFillProperties$,
      },
      {},
    ),
    'CrossFadeState': m.ClassMirror(
      'CrossFadeState',
      {},
      {},
    ),
  },
);
Function AnimatedCrossFade_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AnimatedCrossFade;
Function AnimatedCrossFade_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AnimatedCrossFade;
Function _AnimatedCrossFade_firstChild$(
  m.Scope scope$,
  AnimatedCrossFade target$,
) =>
    () {
      return target$.firstChild;
    };
Function _AnimatedCrossFade_secondChild$(
  m.Scope scope$,
  AnimatedCrossFade target$,
) =>
    () {
      return target$.secondChild;
    };
Function _AnimatedCrossFade_crossFadeState$(
  m.Scope scope$,
  AnimatedCrossFade target$,
) =>
    () {
      return target$.crossFadeState;
    };
Function _AnimatedCrossFade_duration$(
  m.Scope scope$,
  AnimatedCrossFade target$,
) =>
    () {
      return target$.duration;
    };
Function _AnimatedCrossFade_reverseDuration$(
  m.Scope scope$,
  AnimatedCrossFade target$,
) =>
    () {
      return target$.reverseDuration;
    };
Function _AnimatedCrossFade_firstCurve$(
  m.Scope scope$,
  AnimatedCrossFade target$,
) =>
    () {
      return target$.firstCurve;
    };
Function _AnimatedCrossFade_secondCurve$(
  m.Scope scope$,
  AnimatedCrossFade target$,
) =>
    () {
      return target$.secondCurve;
    };
Function _AnimatedCrossFade_sizeCurve$(
  m.Scope scope$,
  AnimatedCrossFade target$,
) =>
    () {
      return target$.sizeCurve;
    };
Function _AnimatedCrossFade_alignment$(
  m.Scope scope$,
  AnimatedCrossFade target$,
) =>
    () {
      return target$.alignment;
    };
Function _AnimatedCrossFade_layoutBuilder$(
  m.Scope scope$,
  AnimatedCrossFade target$,
) =>
    () {
      return target$.layoutBuilder;
    };
Function _AnimatedCrossFade_excludeBottomFocus$(
  m.Scope scope$,
  AnimatedCrossFade target$,
) =>
    () {
      return target$.excludeBottomFocus;
    };
Function _AnimatedCrossFade__$(m.Scope scope$) => ({
      Key? key,
      required Widget firstChild,
      required Widget secondChild,
      Curve? firstCurve,
      Curve? secondCurve,
      Curve? sizeCurve,
      AlignmentGeometry? alignment,
      required CrossFadeState crossFadeState,
      required Duration duration,
      Duration? reverseDuration,
      m.FunctionPointer? layoutBuilder,
      bool? excludeBottomFocus,
    }) {
      Widget layoutBuilderProxy(
        Widget layoutBuilder_topChild$,
        Key layoutBuilder_topChildKey$,
        Widget layoutBuilder_bottomChild$,
        Key layoutBuilder_bottomChildKey$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            layoutBuilder!,
            [
              layoutBuilder_topChild$,
              layoutBuilder_topChildKey$,
              layoutBuilder_bottomChild$,
              layoutBuilder_bottomChildKey$,
            ],
            {},
          );
      return AnimatedCrossFade(
        alignment: alignment ?? Alignment.topCenter,
        crossFadeState: crossFadeState,
        duration: duration,
        excludeBottomFocus: excludeBottomFocus ?? true,
        firstChild: firstChild,
        firstCurve: firstCurve ?? Curves.linear,
        key: key,
        layoutBuilder: layoutBuilder == null
            ? AnimatedCrossFade.defaultLayoutBuilder
            : layoutBuilderProxy,
        reverseDuration: reverseDuration,
        secondChild: secondChild,
        secondCurve: secondCurve ?? Curves.linear,
        sizeCurve: sizeCurve ?? Curves.linear,
      );
    };
Function _AnimatedCrossFade_defaultLayoutBuilder$(m.Scope scope$) =>
    AnimatedCrossFade.defaultLayoutBuilder;
Function _AnimatedCrossFade_createState$(
  m.Scope scope$,
  AnimatedCrossFade target$,
) =>
    target$.createState;
Function _AnimatedCrossFade_debugFillProperties$(
  m.Scope scope$,
  AnimatedCrossFade target$,
) =>
    target$.debugFillProperties;
CrossFadeState _CrossFadeState_showFirst$() {
  return CrossFadeState.showFirst;
}

CrossFadeState _CrossFadeState_showSecond$() {
  return CrossFadeState.showSecond;
}

List<CrossFadeState> _CrossFadeState_values$() {
  return CrossFadeState.values;
}
