// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/message_codec.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/services/platform_channel.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/message_codec.dart',
  {},
  {},
  {
    'MessageCodec': m.ClassMirror(
      'MessageCodec',
      {
        'encodeMessage': _MessageCodec_encodeMessage$,
        'decodeMessage': _MessageCodec_decodeMessage$,
      },
      {},
    ),
    'MethodCall': m.ClassMirror(
      'MethodCall',
      {
        'method': _MethodCall_method$,
        'arguments': _MethodCall_arguments$,
        'toString': _MethodCall_toString$,
      },
      {},
    ),
    'MethodCodec': m.ClassMirror(
      'MethodCodec',
      {
        'encodeMethodCall': _MethodCodec_encodeMethodCall$,
        'decodeMethodCall': _MethodCodec_decodeMethodCall$,
        'decodeEnvelope': _MethodCodec_decodeEnvelope$,
        'encodeSuccessEnvelope': _MethodCodec_encodeSuccessEnvelope$,
        'encodeErrorEnvelope': _MethodCodec_encodeErrorEnvelope$,
      },
      {},
    ),
    'PlatformException': m.ClassMirror(
      'PlatformException',
      {
        'code': _PlatformException_code$,
        'message': _PlatformException_message$,
        'details': _PlatformException_details$,
        'stacktrace': _PlatformException_stacktrace$,
        'toString': _PlatformException_toString$,
      },
      {},
    ),
    'MissingPluginException': m.ClassMirror(
      'MissingPluginException',
      {
        'message': _MissingPluginException_message$,
        'toString': _MissingPluginException_toString$,
      },
      {},
    ),
  },
);
Function _MessageCodec_encodeMessage$<T>(
  m.Scope scope,
  MessageCodec<T> target,
) =>
    target.encodeMessage;
Function _MessageCodec_decodeMessage$<T>(
  m.Scope scope,
  MessageCodec<T> target,
) =>
    target.decodeMessage;
String _MethodCall_method$(MethodCall target) {
  return target.method;
}

dynamic _MethodCall_arguments$(MethodCall target) {
  return target.arguments;
}

Function _MethodCall_toString$(
  m.Scope scope,
  MethodCall target,
) =>
    target.toString;
Function _MethodCodec_encodeMethodCall$(
  m.Scope scope,
  MethodCodec target,
) =>
    target.encodeMethodCall;
Function _MethodCodec_decodeMethodCall$(
  m.Scope scope,
  MethodCodec target,
) =>
    target.decodeMethodCall;
Function _MethodCodec_decodeEnvelope$(
  m.Scope scope,
  MethodCodec target,
) =>
    target.decodeEnvelope;
Function _MethodCodec_encodeSuccessEnvelope$(
  m.Scope scope,
  MethodCodec target,
) =>
    target.encodeSuccessEnvelope;
Function _MethodCodec_encodeErrorEnvelope$(
  m.Scope scope,
  MethodCodec target,
) =>
    target.encodeErrorEnvelope;
String _PlatformException_code$(PlatformException target) {
  return target.code;
}

String? _PlatformException_message$(PlatformException target) {
  return target.message;
}

dynamic _PlatformException_details$(PlatformException target) {
  return target.details;
}

String? _PlatformException_stacktrace$(PlatformException target) {
  return target.stacktrace;
}

Function _PlatformException_toString$(
  m.Scope scope,
  PlatformException target,
) =>
    target.toString;
String? _MissingPluginException_message$(MissingPluginException target) {
  return target.message;
}

Function _MissingPluginException_toString$(
  m.Scope scope,
  MissingPluginException target,
) =>
    target.toString;
