// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/date_picker.dart';
import 'dart:math';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/app_bar.dart';
import 'package:flutter/src/material/back_button.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/calendar_date_picker.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/date.dart';
import 'package:flutter/src/material/date_picker_theme.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/dialog.dart';
import 'package:flutter/src/material/dialog_theme.dart';
import 'package:flutter/src/material/divider.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/input_border.dart';
import 'package:flutter/src/material/input_date_picker_form_field.dart';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/scaffold.dart';
import 'package:flutter/src/material/text_button.dart';
import 'package:flutter/src/material/text_field.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/date_picker.dart',
  {
    'showDatePicker': _showDatePicker$,
    'showDateRangePicker': _showDateRangePicker$,
  },
  {},
  {
    'DatePickerDialog': m.ClassMirror(
      'DatePickerDialog',
      {
        '#as': DatePickerDialog_as$,
        '#is': DatePickerDialog_is$,
        'initialDate': _DatePickerDialog_initialDate$,
        'firstDate': _DatePickerDialog_firstDate$,
        'lastDate': _DatePickerDialog_lastDate$,
        'currentDate': _DatePickerDialog_currentDate$,
        'initialEntryMode': _DatePickerDialog_initialEntryMode$,
        'selectableDayPredicate': _DatePickerDialog_selectableDayPredicate$,
        'cancelText': _DatePickerDialog_cancelText$,
        'confirmText': _DatePickerDialog_confirmText$,
        'helpText': _DatePickerDialog_helpText$,
        'initialCalendarMode': _DatePickerDialog_initialCalendarMode$,
        'errorFormatText': _DatePickerDialog_errorFormatText$,
        'errorInvalidText': _DatePickerDialog_errorInvalidText$,
        'fieldHintText': _DatePickerDialog_fieldHintText$,
        'fieldLabelText': _DatePickerDialog_fieldLabelText$,
        'keyboardType': _DatePickerDialog_keyboardType$,
        'restorationId': _DatePickerDialog_restorationId$,
        'onDatePickerModeChange': _DatePickerDialog_onDatePickerModeChange$,
        'createState': _DatePickerDialog_createState$,
      },
      {},
    ),
    'DateRangePickerDialog': m.ClassMirror(
      'DateRangePickerDialog',
      {
        '#as': DateRangePickerDialog_as$,
        '#is': DateRangePickerDialog_is$,
        'initialDateRange': _DateRangePickerDialog_initialDateRange$,
        'firstDate': _DateRangePickerDialog_firstDate$,
        'lastDate': _DateRangePickerDialog_lastDate$,
        'currentDate': _DateRangePickerDialog_currentDate$,
        'initialEntryMode': _DateRangePickerDialog_initialEntryMode$,
        'cancelText': _DateRangePickerDialog_cancelText$,
        'confirmText': _DateRangePickerDialog_confirmText$,
        'saveText': _DateRangePickerDialog_saveText$,
        'helpText': _DateRangePickerDialog_helpText$,
        'errorInvalidRangeText': _DateRangePickerDialog_errorInvalidRangeText$,
        'errorFormatText': _DateRangePickerDialog_errorFormatText$,
        'errorInvalidText': _DateRangePickerDialog_errorInvalidText$,
        'fieldStartHintText': _DateRangePickerDialog_fieldStartHintText$,
        'fieldEndHintText': _DateRangePickerDialog_fieldEndHintText$,
        'fieldStartLabelText': _DateRangePickerDialog_fieldStartLabelText$,
        'fieldEndLabelText': _DateRangePickerDialog_fieldEndLabelText$,
        'keyboardType': _DateRangePickerDialog_keyboardType$,
        'restorationId': _DateRangePickerDialog_restorationId$,
        'createState': _DateRangePickerDialog_createState$,
      },
      {},
    ),
  },
);
Function DatePickerDialog_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DatePickerDialog;
Function DatePickerDialog_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DatePickerDialog;
DateTime _DatePickerDialog_initialDate$(DatePickerDialog target) {
  return target.initialDate;
}

DateTime _DatePickerDialog_firstDate$(DatePickerDialog target) {
  return target.firstDate;
}

DateTime _DatePickerDialog_lastDate$(DatePickerDialog target) {
  return target.lastDate;
}

DateTime _DatePickerDialog_currentDate$(DatePickerDialog target) {
  return target.currentDate;
}

DatePickerEntryMode _DatePickerDialog_initialEntryMode$(
    DatePickerDialog target) {
  return target.initialEntryMode;
}

bool Function(DateTime)? _DatePickerDialog_selectableDayPredicate$(
    DatePickerDialog target) {
  return target.selectableDayPredicate;
}

String? _DatePickerDialog_cancelText$(DatePickerDialog target) {
  return target.cancelText;
}

String? _DatePickerDialog_confirmText$(DatePickerDialog target) {
  return target.confirmText;
}

String? _DatePickerDialog_helpText$(DatePickerDialog target) {
  return target.helpText;
}

DatePickerMode _DatePickerDialog_initialCalendarMode$(DatePickerDialog target) {
  return target.initialCalendarMode;
}

String? _DatePickerDialog_errorFormatText$(DatePickerDialog target) {
  return target.errorFormatText;
}

String? _DatePickerDialog_errorInvalidText$(DatePickerDialog target) {
  return target.errorInvalidText;
}

String? _DatePickerDialog_fieldHintText$(DatePickerDialog target) {
  return target.fieldHintText;
}

String? _DatePickerDialog_fieldLabelText$(DatePickerDialog target) {
  return target.fieldLabelText;
}

TextInputType? _DatePickerDialog_keyboardType$(DatePickerDialog target) {
  return target.keyboardType;
}

String? _DatePickerDialog_restorationId$(DatePickerDialog target) {
  return target.restorationId;
}

void Function(DatePickerEntryMode)? _DatePickerDialog_onDatePickerModeChange$(
    DatePickerDialog target) {
  return target.onDatePickerModeChange;
}

Function _DatePickerDialog_createState$(
  m.Scope scope,
  DatePickerDialog target,
) =>
    target.createState;
Function DateRangePickerDialog_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DateRangePickerDialog;
Function DateRangePickerDialog_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DateRangePickerDialog;
DateTimeRange? _DateRangePickerDialog_initialDateRange$(
    DateRangePickerDialog target) {
  return target.initialDateRange;
}

DateTime _DateRangePickerDialog_firstDate$(DateRangePickerDialog target) {
  return target.firstDate;
}

DateTime _DateRangePickerDialog_lastDate$(DateRangePickerDialog target) {
  return target.lastDate;
}

DateTime? _DateRangePickerDialog_currentDate$(DateRangePickerDialog target) {
  return target.currentDate;
}

DatePickerEntryMode _DateRangePickerDialog_initialEntryMode$(
    DateRangePickerDialog target) {
  return target.initialEntryMode;
}

String? _DateRangePickerDialog_cancelText$(DateRangePickerDialog target) {
  return target.cancelText;
}

String? _DateRangePickerDialog_confirmText$(DateRangePickerDialog target) {
  return target.confirmText;
}

String? _DateRangePickerDialog_saveText$(DateRangePickerDialog target) {
  return target.saveText;
}

String? _DateRangePickerDialog_helpText$(DateRangePickerDialog target) {
  return target.helpText;
}

String? _DateRangePickerDialog_errorInvalidRangeText$(
    DateRangePickerDialog target) {
  return target.errorInvalidRangeText;
}

String? _DateRangePickerDialog_errorFormatText$(DateRangePickerDialog target) {
  return target.errorFormatText;
}

String? _DateRangePickerDialog_errorInvalidText$(DateRangePickerDialog target) {
  return target.errorInvalidText;
}

String? _DateRangePickerDialog_fieldStartHintText$(
    DateRangePickerDialog target) {
  return target.fieldStartHintText;
}

String? _DateRangePickerDialog_fieldEndHintText$(DateRangePickerDialog target) {
  return target.fieldEndHintText;
}

String? _DateRangePickerDialog_fieldStartLabelText$(
    DateRangePickerDialog target) {
  return target.fieldStartLabelText;
}

String? _DateRangePickerDialog_fieldEndLabelText$(
    DateRangePickerDialog target) {
  return target.fieldEndLabelText;
}

TextInputType _DateRangePickerDialog_keyboardType$(
    DateRangePickerDialog target) {
  return target.keyboardType;
}

String? _DateRangePickerDialog_restorationId$(DateRangePickerDialog target) {
  return target.restorationId;
}

Function _DateRangePickerDialog_createState$(
  m.Scope scope,
  DateRangePickerDialog target,
) =>
    target.createState;
Function _showDatePicker$(m.Scope scope) => ({
      Offset? anchorPoint,
      m.FunctionPointer? builder,
      String? cancelText,
      String? confirmText,
      required BuildContext context,
      DateTime? currentDate,
      String? errorFormatText,
      String? errorInvalidText,
      String? fieldHintText,
      String? fieldLabelText,
      required DateTime firstDate,
      String? helpText,
      required DateTime initialDate,
      DatePickerMode? initialDatePickerMode,
      DatePickerEntryMode? initialEntryMode,
      TextInputType? keyboardType,
      required DateTime lastDate,
      Locale? locale,
      m.FunctionPointer? onDatePickerModeChange,
      RouteSettings? routeSettings,
      m.FunctionPointer? selectableDayPredicate,
      TextDirection? textDirection,
      bool? useRootNavigator,
    }) {
      Widget builderProxy(
        BuildContext builder_context,
        Widget? builder_child,
      ) =>
          scope.engine.callFunctionPointer(
            scope,
            builder!,
            [
              builder_context,
              builder_child,
            ],
            {},
          );
      void onDatePickerModeChangeProxy(
              DatePickerEntryMode onDatePickerModeChange_value) =>
          scope.engine.callFunctionPointer(
            scope,
            onDatePickerModeChange!,
            [onDatePickerModeChange_value],
            {},
          );
      bool selectableDayPredicateProxy(DateTime selectableDayPredicate_day) =>
          scope.engine.callFunctionPointer(
            scope,
            selectableDayPredicate!,
            [selectableDayPredicate_day],
            {},
          );
      return showDatePicker(
        anchorPoint: anchorPoint,
        builder: builder == null ? null : builderProxy,
        cancelText: cancelText,
        confirmText: confirmText,
        context: context,
        currentDate: currentDate,
        errorFormatText: errorFormatText,
        errorInvalidText: errorInvalidText,
        fieldHintText: fieldHintText,
        fieldLabelText: fieldLabelText,
        firstDate: firstDate,
        helpText: helpText,
        initialDate: initialDate,
        initialDatePickerMode: initialDatePickerMode == null
            ? DatePickerMode.day
            : initialDatePickerMode,
        initialEntryMode: initialEntryMode == null
            ? DatePickerEntryMode.calendar
            : initialEntryMode,
        keyboardType: keyboardType,
        lastDate: lastDate,
        locale: locale,
        onDatePickerModeChange:
            onDatePickerModeChange == null ? null : onDatePickerModeChangeProxy,
        routeSettings: routeSettings,
        selectableDayPredicate:
            selectableDayPredicate == null ? null : selectableDayPredicateProxy,
        textDirection: textDirection,
        useRootNavigator: useRootNavigator == null ? true : useRootNavigator,
      );
    };
Function _showDateRangePicker$(m.Scope scope) => ({
      Offset? anchorPoint,
      m.FunctionPointer? builder,
      String? cancelText,
      String? confirmText,
      required BuildContext context,
      DateTime? currentDate,
      String? errorFormatText,
      String? errorInvalidRangeText,
      String? errorInvalidText,
      String? fieldEndHintText,
      String? fieldEndLabelText,
      String? fieldStartHintText,
      String? fieldStartLabelText,
      required DateTime firstDate,
      String? helpText,
      DateTimeRange? initialDateRange,
      DatePickerEntryMode? initialEntryMode,
      TextInputType? keyboardType,
      required DateTime lastDate,
      Locale? locale,
      RouteSettings? routeSettings,
      String? saveText,
      TextDirection? textDirection,
      bool? useRootNavigator,
    }) {
      Widget builderProxy(
        BuildContext builder_context,
        Widget? builder_child,
      ) =>
          scope.engine.callFunctionPointer(
            scope,
            builder!,
            [
              builder_context,
              builder_child,
            ],
            {},
          );
      return showDateRangePicker(
        anchorPoint: anchorPoint,
        builder: builder == null ? null : builderProxy,
        cancelText: cancelText,
        confirmText: confirmText,
        context: context,
        currentDate: currentDate,
        errorFormatText: errorFormatText,
        errorInvalidRangeText: errorInvalidRangeText,
        errorInvalidText: errorInvalidText,
        fieldEndHintText: fieldEndHintText,
        fieldEndLabelText: fieldEndLabelText,
        fieldStartHintText: fieldStartHintText,
        fieldStartLabelText: fieldStartLabelText,
        firstDate: firstDate,
        helpText: helpText,
        initialDateRange: initialDateRange,
        initialEntryMode: initialEntryMode == null
            ? DatePickerEntryMode.calendar
            : initialEntryMode,
        keyboardType:
            keyboardType == null ? TextInputType.datetime : keyboardType,
        lastDate: lastDate,
        locale: locale,
        routeSettings: routeSettings,
        saveText: saveText,
        textDirection: textDirection,
        useRootNavigator: useRootNavigator == null ? true : useRootNavigator,
      );
    };
