// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/switch.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/theme.dart';
import 'package:flutter/src/cupertino/thumb_painter.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/switch.dart',
  {'CupertinoSwitch.': _CupertinoSwitch__$},
  {},
  {
    'CupertinoSwitch': m.ClassMirror(
      'CupertinoSwitch',
      {
        '#as': CupertinoSwitch_as$,
        '#is': CupertinoSwitch_is$,
        'value': _CupertinoSwitch_value$,
        'onChanged': _CupertinoSwitch_onChanged$,
        'activeColor': _CupertinoSwitch_activeColor$,
        'trackColor': _CupertinoSwitch_trackColor$,
        'thumbColor': _CupertinoSwitch_thumbColor$,
        'focusColor': _CupertinoSwitch_focusColor$,
        'applyTheme': _CupertinoSwitch_applyTheme$,
        'dragStartBehavior': _CupertinoSwitch_dragStartBehavior$,
        'createState': _CupertinoSwitch_createState$,
        'debugFillProperties': _CupertinoSwitch_debugFillProperties$,
      },
      {},
    )
  },
);
Function CupertinoSwitch_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoSwitch;
Function CupertinoSwitch_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoSwitch;
Function _CupertinoSwitch_value$(
  m.Scope scope$,
  CupertinoSwitch target$,
) =>
    () {
      return target$.value;
    };
Function _CupertinoSwitch_onChanged$(
  m.Scope scope$,
  CupertinoSwitch target$,
) =>
    () {
      return target$.onChanged;
    };
Function _CupertinoSwitch_activeColor$(
  m.Scope scope$,
  CupertinoSwitch target$,
) =>
    () {
      return target$.activeColor;
    };
Function _CupertinoSwitch_trackColor$(
  m.Scope scope$,
  CupertinoSwitch target$,
) =>
    () {
      return target$.trackColor;
    };
Function _CupertinoSwitch_thumbColor$(
  m.Scope scope$,
  CupertinoSwitch target$,
) =>
    () {
      return target$.thumbColor;
    };
Function _CupertinoSwitch_focusColor$(
  m.Scope scope$,
  CupertinoSwitch target$,
) =>
    () {
      return target$.focusColor;
    };
Function _CupertinoSwitch_applyTheme$(
  m.Scope scope$,
  CupertinoSwitch target$,
) =>
    () {
      return target$.applyTheme;
    };
Function _CupertinoSwitch_dragStartBehavior$(
  m.Scope scope$,
  CupertinoSwitch target$,
) =>
    () {
      return target$.dragStartBehavior;
    };
Function _CupertinoSwitch__$(m.Scope scope$) => ({
      Key? key,
      required bool value,
      required m.FunctionPointer? onChanged,
      Color? activeColor,
      Color? trackColor,
      Color? thumbColor,
      bool? applyTheme,
      Color? focusColor,
      DragStartBehavior? dragStartBehavior,
    }) {
      void onChangedProxy(bool onChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChanged!,
            [onChanged_value$],
            {},
          );
      return CupertinoSwitch(
        activeColor: activeColor,
        applyTheme: applyTheme,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        focusColor: focusColor,
        key: key,
        onChanged: onChanged == null ? null : onChangedProxy,
        thumbColor: thumbColor,
        trackColor: trackColor,
        value: value,
      );
    };
Function _CupertinoSwitch_createState$(
  m.Scope scope$,
  CupertinoSwitch target$,
) =>
    target$.createState;
Function _CupertinoSwitch_debugFillProperties$(
  m.Scope scope$,
  CupertinoSwitch target$,
) =>
    target$.debugFillProperties;
