// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/raw_keyboard_web.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/services/keyboard_maps.g.dart';
import 'package:flutter/src/services/raw_keyboard.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/raw_keyboard_web.dart',
  {
    'RawKeyEventDataWeb.modifierNone': _RawKeyEventDataWeb_modifierNone$,
    'RawKeyEventDataWeb.modifierShift': _RawKeyEventDataWeb_modifierShift$,
    'RawKeyEventDataWeb.modifierAlt': _RawKeyEventDataWeb_modifierAlt$,
    'RawKeyEventDataWeb.modifierControl': _RawKeyEventDataWeb_modifierControl$,
    'RawKeyEventDataWeb.modifierMeta': _RawKeyEventDataWeb_modifierMeta$,
    'RawKeyEventDataWeb.modifierNumLock': _RawKeyEventDataWeb_modifierNumLock$,
    'RawKeyEventDataWeb.modifierCapsLock':
        _RawKeyEventDataWeb_modifierCapsLock$,
    'RawKeyEventDataWeb.modifierScrollLock':
        _RawKeyEventDataWeb_modifierScrollLock$,
    'RawKeyEventDataWeb.': _RawKeyEventDataWeb__$,
  },
  {},
  {
    'RawKeyEventDataWeb': m.ClassMirror(
      'RawKeyEventDataWeb',
      {
        '#as': RawKeyEventDataWeb_as$,
        '#is': RawKeyEventDataWeb_is$,
        'code': _RawKeyEventDataWeb_code$,
        'key': _RawKeyEventDataWeb_key$,
        'location': _RawKeyEventDataWeb_location$,
        'metaState': _RawKeyEventDataWeb_metaState$,
        'keyCode': _RawKeyEventDataWeb_keyCode$,
        'keyLabel': _RawKeyEventDataWeb_keyLabel$,
        'physicalKey': _RawKeyEventDataWeb_physicalKey$,
        'logicalKey': _RawKeyEventDataWeb_logicalKey$,
        'hashCode': _RawKeyEventDataWeb_hashCode$,
        'isModifierPressed': _RawKeyEventDataWeb_isModifierPressed$,
        'getModifierSide': _RawKeyEventDataWeb_getModifierSide$,
        'debugFillProperties': _RawKeyEventDataWeb_debugFillProperties$,
        '==': _RawKeyEventDataWeb_eq$$,
      },
      {},
    )
  },
);
Function RawKeyEventDataWeb_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RawKeyEventDataWeb;
Function RawKeyEventDataWeb_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RawKeyEventDataWeb;
Function _RawKeyEventDataWeb_code$(
  m.Scope scope$,
  RawKeyEventDataWeb target$,
) =>
    () {
      return target$.code;
    };
Function _RawKeyEventDataWeb_key$(
  m.Scope scope$,
  RawKeyEventDataWeb target$,
) =>
    () {
      return target$.key;
    };
Function _RawKeyEventDataWeb_location$(
  m.Scope scope$,
  RawKeyEventDataWeb target$,
) =>
    () {
      return target$.location;
    };
Function _RawKeyEventDataWeb_metaState$(
  m.Scope scope$,
  RawKeyEventDataWeb target$,
) =>
    () {
      return target$.metaState;
    };
Function _RawKeyEventDataWeb_keyCode$(
  m.Scope scope$,
  RawKeyEventDataWeb target$,
) =>
    () {
      return target$.keyCode;
    };
Function _RawKeyEventDataWeb_modifierNone$(m.Scope scope$) =>
    () => RawKeyEventDataWeb.modifierNone;
Function _RawKeyEventDataWeb_modifierShift$(m.Scope scope$) =>
    () => RawKeyEventDataWeb.modifierShift;
Function _RawKeyEventDataWeb_modifierAlt$(m.Scope scope$) =>
    () => RawKeyEventDataWeb.modifierAlt;
Function _RawKeyEventDataWeb_modifierControl$(m.Scope scope$) =>
    () => RawKeyEventDataWeb.modifierControl;
Function _RawKeyEventDataWeb_modifierMeta$(m.Scope scope$) =>
    () => RawKeyEventDataWeb.modifierMeta;
Function _RawKeyEventDataWeb_modifierNumLock$(m.Scope scope$) =>
    () => RawKeyEventDataWeb.modifierNumLock;
Function _RawKeyEventDataWeb_modifierCapsLock$(m.Scope scope$) =>
    () => RawKeyEventDataWeb.modifierCapsLock;
Function _RawKeyEventDataWeb_modifierScrollLock$(m.Scope scope$) =>
    () => RawKeyEventDataWeb.modifierScrollLock;
Function _RawKeyEventDataWeb_keyLabel$(
  m.Scope scope$,
  RawKeyEventDataWeb target$,
) =>
    () {
      return target$.keyLabel;
    };
Function _RawKeyEventDataWeb_physicalKey$(
  m.Scope scope$,
  RawKeyEventDataWeb target$,
) =>
    () {
      return target$.physicalKey;
    };
Function _RawKeyEventDataWeb_logicalKey$(
  m.Scope scope$,
  RawKeyEventDataWeb target$,
) =>
    () {
      return target$.logicalKey;
    };
Function _RawKeyEventDataWeb_hashCode$(
  m.Scope scope$,
  RawKeyEventDataWeb target$,
) =>
    () {
      return target$.hashCode;
    };
Function _RawKeyEventDataWeb__$(m.Scope scope$) => ({
      required String code,
      required String key,
      int? location,
      int? metaState,
      int? keyCode,
    }) {
      return RawKeyEventDataWeb(
        code: code,
        key: key,
        keyCode: keyCode ?? 0,
        location: location ?? 0,
        metaState: metaState ?? RawKeyEventDataWeb.modifierNone,
      );
    };
Function _RawKeyEventDataWeb_isModifierPressed$(
  m.Scope scope$,
  RawKeyEventDataWeb target$,
) =>
    target$.isModifierPressed;
Function _RawKeyEventDataWeb_getModifierSide$(
  m.Scope scope$,
  RawKeyEventDataWeb target$,
) =>
    target$.getModifierSide;
Function _RawKeyEventDataWeb_debugFillProperties$(
  m.Scope scope$,
  RawKeyEventDataWeb target$,
) =>
    target$.debugFillProperties;
Function _RawKeyEventDataWeb_eq$$(
  m.Scope scope$,
  RawKeyEventDataWeb target$,
) =>
    (Object other$) => target$ == other$;
