// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/raw_keyboard_web.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/services/keyboard_maps.g.dart';
import 'package:flutter/src/services/raw_keyboard.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/raw_keyboard_web.dart',
  {
    'RawKeyEventDataWeb.modifierNone': _RawKeyEventDataWeb_modifierNone$,
    'RawKeyEventDataWeb.modifierShift': _RawKeyEventDataWeb_modifierShift$,
    'RawKeyEventDataWeb.modifierAlt': _RawKeyEventDataWeb_modifierAlt$,
    'RawKeyEventDataWeb.modifierControl': _RawKeyEventDataWeb_modifierControl$,
    'RawKeyEventDataWeb.modifierMeta': _RawKeyEventDataWeb_modifierMeta$,
    'RawKeyEventDataWeb.modifierNumLock': _RawKeyEventDataWeb_modifierNumLock$,
    'RawKeyEventDataWeb.modifierCapsLock':
        _RawKeyEventDataWeb_modifierCapsLock$,
    'RawKeyEventDataWeb.modifierScrollLock':
        _RawKeyEventDataWeb_modifierScrollLock$,
  },
  {},
  {
    'RawKeyEventDataWeb': m.ClassMirror(
      'RawKeyEventDataWeb',
      {
        'code': _RawKeyEventDataWeb_code$,
        'key': _RawKeyEventDataWeb_key$,
        'location': _RawKeyEventDataWeb_location$,
        'metaState': _RawKeyEventDataWeb_metaState$,
        'keyCode': _RawKeyEventDataWeb_keyCode$,
        'keyLabel': _RawKeyEventDataWeb_keyLabel$,
        'physicalKey': _RawKeyEventDataWeb_physicalKey$,
        'logicalKey': _RawKeyEventDataWeb_logicalKey$,
        'hashCode': _RawKeyEventDataWeb_hashCode$,
        'isModifierPressed': _RawKeyEventDataWeb_isModifierPressed$,
        'getModifierSide': _RawKeyEventDataWeb_getModifierSide$,
        'debugFillProperties': _RawKeyEventDataWeb_debugFillProperties$,
      },
      {},
    )
  },
);
String _RawKeyEventDataWeb_code$(RawKeyEventDataWeb target) {
  return target.code;
}

String _RawKeyEventDataWeb_key$(RawKeyEventDataWeb target) {
  return target.key;
}

int _RawKeyEventDataWeb_location$(RawKeyEventDataWeb target) {
  return target.location;
}

int _RawKeyEventDataWeb_metaState$(RawKeyEventDataWeb target) {
  return target.metaState;
}

int _RawKeyEventDataWeb_keyCode$(RawKeyEventDataWeb target) {
  return target.keyCode;
}

int _RawKeyEventDataWeb_modifierNone$() {
  return RawKeyEventDataWeb.modifierNone;
}

int _RawKeyEventDataWeb_modifierShift$() {
  return RawKeyEventDataWeb.modifierShift;
}

int _RawKeyEventDataWeb_modifierAlt$() {
  return RawKeyEventDataWeb.modifierAlt;
}

int _RawKeyEventDataWeb_modifierControl$() {
  return RawKeyEventDataWeb.modifierControl;
}

int _RawKeyEventDataWeb_modifierMeta$() {
  return RawKeyEventDataWeb.modifierMeta;
}

int _RawKeyEventDataWeb_modifierNumLock$() {
  return RawKeyEventDataWeb.modifierNumLock;
}

int _RawKeyEventDataWeb_modifierCapsLock$() {
  return RawKeyEventDataWeb.modifierCapsLock;
}

int _RawKeyEventDataWeb_modifierScrollLock$() {
  return RawKeyEventDataWeb.modifierScrollLock;
}

String _RawKeyEventDataWeb_keyLabel$(RawKeyEventDataWeb target) {
  return target.keyLabel;
}

PhysicalKeyboardKey _RawKeyEventDataWeb_physicalKey$(
    RawKeyEventDataWeb target) {
  return target.physicalKey;
}

LogicalKeyboardKey _RawKeyEventDataWeb_logicalKey$(RawKeyEventDataWeb target) {
  return target.logicalKey;
}

int _RawKeyEventDataWeb_hashCode$(RawKeyEventDataWeb target) {
  return target.hashCode;
}

Function _RawKeyEventDataWeb_isModifierPressed$(
  m.Scope scope,
  RawKeyEventDataWeb target,
) =>
    target.isModifierPressed;
Function _RawKeyEventDataWeb_getModifierSide$(
  m.Scope scope,
  RawKeyEventDataWeb target,
) =>
    target.getModifierSide;
Function _RawKeyEventDataWeb_debugFillProperties$(
  m.Scope scope,
  RawKeyEventDataWeb target,
) =>
    target.debugFillProperties;
