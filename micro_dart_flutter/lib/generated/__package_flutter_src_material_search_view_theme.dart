// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/search_view_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/search_view_theme.dart',
  {
    'SearchViewThemeData.': _SearchViewThemeData__$,
    'SearchViewThemeData.lerp': _SearchViewThemeData_lerp$,
    'SearchViewTheme.': _SearchViewTheme__$,
    'SearchViewTheme.of': _SearchViewTheme_of$,
  },
  {},
  {
    'SearchViewThemeData': m.ClassMirror(
      'SearchViewThemeData',
      {
        '#as': SearchViewThemeData_as$,
        '#is': SearchViewThemeData_is$,
        'backgroundColor': _SearchViewThemeData_backgroundColor$,
        'elevation': _SearchViewThemeData_elevation$,
        'surfaceTintColor': _SearchViewThemeData_surfaceTintColor$,
        'side': _SearchViewThemeData_side$,
        'shape': _SearchViewThemeData_shape$,
        'headerTextStyle': _SearchViewThemeData_headerTextStyle$,
        'headerHintStyle': _SearchViewThemeData_headerHintStyle$,
        'constraints': _SearchViewThemeData_constraints$,
        'dividerColor': _SearchViewThemeData_dividerColor$,
        'hashCode': _SearchViewThemeData_hashCode$,
        'copyWith': _SearchViewThemeData_copyWith$,
        '==': _SearchViewThemeData_eq$$,
        'debugFillProperties': _SearchViewThemeData_debugFillProperties$,
      },
      {},
    ),
    'SearchViewTheme': m.ClassMirror(
      'SearchViewTheme',
      {
        '#as': SearchViewTheme_as$,
        '#is': SearchViewTheme_is$,
        'data': _SearchViewTheme_data$,
        'updateShouldNotify': _SearchViewTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function SearchViewThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SearchViewThemeData;
Function SearchViewThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SearchViewThemeData;
Function _SearchViewThemeData_backgroundColor$(
  m.Scope scope$,
  SearchViewThemeData target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _SearchViewThemeData_elevation$(
  m.Scope scope$,
  SearchViewThemeData target$,
) =>
    () {
      return target$.elevation;
    };
Function _SearchViewThemeData_surfaceTintColor$(
  m.Scope scope$,
  SearchViewThemeData target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _SearchViewThemeData_side$(
  m.Scope scope$,
  SearchViewThemeData target$,
) =>
    () {
      return target$.side;
    };
Function _SearchViewThemeData_shape$(
  m.Scope scope$,
  SearchViewThemeData target$,
) =>
    () {
      return target$.shape;
    };
Function _SearchViewThemeData_headerTextStyle$(
  m.Scope scope$,
  SearchViewThemeData target$,
) =>
    () {
      return target$.headerTextStyle;
    };
Function _SearchViewThemeData_headerHintStyle$(
  m.Scope scope$,
  SearchViewThemeData target$,
) =>
    () {
      return target$.headerHintStyle;
    };
Function _SearchViewThemeData_constraints$(
  m.Scope scope$,
  SearchViewThemeData target$,
) =>
    () {
      return target$.constraints;
    };
Function _SearchViewThemeData_dividerColor$(
  m.Scope scope$,
  SearchViewThemeData target$,
) =>
    () {
      return target$.dividerColor;
    };
Function _SearchViewThemeData_hashCode$(
  m.Scope scope$,
  SearchViewThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _SearchViewThemeData__$(m.Scope scope$) => ({
      Color? backgroundColor,
      double? elevation,
      Color? surfaceTintColor,
      BoxConstraints? constraints,
      BorderSide? side,
      OutlinedBorder? shape,
      TextStyle? headerTextStyle,
      TextStyle? headerHintStyle,
      Color? dividerColor,
    }) {
      return SearchViewThemeData(
        backgroundColor: backgroundColor,
        constraints: constraints,
        dividerColor: dividerColor,
        elevation: elevation,
        headerHintStyle: headerHintStyle,
        headerTextStyle: headerTextStyle,
        shape: shape,
        side: side,
        surfaceTintColor: surfaceTintColor,
      );
    };
Function _SearchViewThemeData_copyWith$(
  m.Scope scope$,
  SearchViewThemeData target$,
) =>
    target$.copyWith;
Function _SearchViewThemeData_lerp$(m.Scope scope$) => SearchViewThemeData.lerp;
Function _SearchViewThemeData_eq$$(
  m.Scope scope$,
  SearchViewThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _SearchViewThemeData_debugFillProperties$(
  m.Scope scope$,
  SearchViewThemeData target$,
) =>
    target$.debugFillProperties;
Function SearchViewTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SearchViewTheme;
Function SearchViewTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SearchViewTheme;
Function _SearchViewTheme_data$(
  m.Scope scope$,
  SearchViewTheme target$,
) =>
    () {
      return target$.data;
    };
Function _SearchViewTheme__$(m.Scope scope$) => ({
      Key? key,
      required SearchViewThemeData data,
      required Widget child,
    }) {
      return SearchViewTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _SearchViewTheme_of$(m.Scope scope$) => SearchViewTheme.of;
Function _SearchViewTheme_updateShouldNotify$(
  m.Scope scope$,
  SearchViewTheme target$,
) =>
    target$.updateShouldNotify;
