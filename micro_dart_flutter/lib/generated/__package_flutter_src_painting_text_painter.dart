// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/text_painter.dart';
import 'dart:math' show max, min;
import 'dart:ui'
    show
        BoxHeightStyle,
        BoxWidthStyle,
        LineMetrics,
        Paragraph,
        ParagraphBuilder,
        ParagraphConstraints,
        ParagraphStyle,
        PlaceholderAlignment,
        TextHeightBehavior,
        TextStyle;
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/painting/inline_span.dart';
import 'package:flutter/src/painting/placeholder_span.dart';
import 'package:flutter/src/painting/strut_style.dart';
import 'package:flutter/src/painting/text_span.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/text_painter.dart',
  {
    'PlaceholderDimensions.empty': _PlaceholderDimensions_empty$,
    'TextPainter.computeWidth': _TextPainter_computeWidth$,
    'TextPainter.computeMaxIntrinsicWidth':
        _TextPainter_computeMaxIntrinsicWidth$,
    'TextOverflow.clip': _TextOverflow_clip$,
    'TextOverflow.fade': _TextOverflow_fade$,
    'TextOverflow.ellipsis': _TextOverflow_ellipsis$,
    'TextOverflow.visible': _TextOverflow_visible$,
    'TextOverflow.values': _TextOverflow_values$,
    'TextWidthBasis.parent': _TextWidthBasis_parent$,
    'TextWidthBasis.longestLine': _TextWidthBasis_longestLine$,
    'TextWidthBasis.values': _TextWidthBasis_values$,
  },
  {},
  {
    'PlaceholderDimensions': m.ClassMirror(
      'PlaceholderDimensions',
      {
        '#as': PlaceholderDimensions_as$,
        '#is': PlaceholderDimensions_is$,
        'size': _PlaceholderDimensions_size$,
        'alignment': _PlaceholderDimensions_alignment$,
        'baselineOffset': _PlaceholderDimensions_baselineOffset$,
        'baseline': _PlaceholderDimensions_baseline$,
        'hashCode': _PlaceholderDimensions_hashCode$,
        '==': _PlaceholderDimensions_eq$$,
        'toString': _PlaceholderDimensions_toString$,
      },
      {},
    ),
    'WordBoundary': m.ClassMirror(
      'WordBoundary',
      {
        '#as': WordBoundary_as$,
        '#is': WordBoundary_is$,
        'moveByWordBoundary': _WordBoundary_moveByWordBoundary$,
        'getTextBoundaryAt': _WordBoundary_getTextBoundaryAt$,
      },
      {},
    ),
    'TextPainter': m.ClassMirror(
      'TextPainter',
      {
        '#as': TextPainter_as$,
        '#is': TextPainter_is$,
        'text': _TextPainter_text$,
        'plainText': _TextPainter_plainText$,
        'textAlign': _TextPainter_textAlign$,
        'textDirection': _TextPainter_textDirection$,
        'textScaleFactor': _TextPainter_textScaleFactor$,
        'ellipsis': _TextPainter_ellipsis$,
        'locale': _TextPainter_locale$,
        'maxLines': _TextPainter_maxLines$,
        'strutStyle': _TextPainter_strutStyle$,
        'textWidthBasis': _TextPainter_textWidthBasis$,
        'textHeightBehavior': _TextPainter_textHeightBehavior$,
        'inlinePlaceholderBoxes': _TextPainter_inlinePlaceholderBoxes$,
        'inlinePlaceholderScales': _TextPainter_inlinePlaceholderScales$,
        'preferredLineHeight': _TextPainter_preferredLineHeight$,
        'minIntrinsicWidth': _TextPainter_minIntrinsicWidth$,
        'maxIntrinsicWidth': _TextPainter_maxIntrinsicWidth$,
        'width': _TextPainter_width$,
        'height': _TextPainter_height$,
        'size': _TextPainter_size$,
        'didExceedMaxLines': _TextPainter_didExceedMaxLines$,
        'wordBoundaries': _TextPainter_wordBoundaries$,
        'debugDisposed': _TextPainter_debugDisposed$,
        'markNeedsLayout': _TextPainter_markNeedsLayout$,
        'setPlaceholderDimensions': _TextPainter_setPlaceholderDimensions$,
        'computeDistanceToActualBaseline':
            _TextPainter_computeDistanceToActualBaseline$,
        'layout': _TextPainter_layout$,
        'paint': _TextPainter_paint$,
        'getOffsetAfter': _TextPainter_getOffsetAfter$,
        'getOffsetBefore': _TextPainter_getOffsetBefore$,
        'getOffsetForCaret': _TextPainter_getOffsetForCaret$,
        'getFullHeightForCaret': _TextPainter_getFullHeightForCaret$,
        'getBoxesForSelection': _TextPainter_getBoxesForSelection$,
        'getPositionForOffset': _TextPainter_getPositionForOffset$,
        'getWordBoundary': _TextPainter_getWordBoundary$,
        'getLineBoundary': _TextPainter_getLineBoundary$,
        'computeLineMetrics': _TextPainter_computeLineMetrics$,
        'dispose': _TextPainter_dispose$,
      },
      {
        'text': _TextPainter_text_set$,
        'textAlign': _TextPainter_textAlign_set$,
        'textDirection': _TextPainter_textDirection_set$,
        'textScaleFactor': _TextPainter_textScaleFactor_set$,
        'ellipsis': _TextPainter_ellipsis_set$,
        'locale': _TextPainter_locale_set$,
        'maxLines': _TextPainter_maxLines_set$,
        'strutStyle': _TextPainter_strutStyle_set$,
        'textWidthBasis': _TextPainter_textWidthBasis_set$,
        'textHeightBehavior': _TextPainter_textHeightBehavior_set$,
      },
    ),
    'TextOverflow': m.ClassMirror(
      'TextOverflow',
      {},
      {},
    ),
    'TextWidthBasis': m.ClassMirror(
      'TextWidthBasis',
      {},
      {},
    ),
  },
);
Function PlaceholderDimensions_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as PlaceholderDimensions;
Function PlaceholderDimensions_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is PlaceholderDimensions;
PlaceholderDimensions _PlaceholderDimensions_empty$() {
  return PlaceholderDimensions.empty;
}

Size _PlaceholderDimensions_size$(PlaceholderDimensions target) {
  return target.size;
}

PlaceholderAlignment _PlaceholderDimensions_alignment$(
    PlaceholderDimensions target) {
  return target.alignment;
}

double? _PlaceholderDimensions_baselineOffset$(PlaceholderDimensions target) {
  return target.baselineOffset;
}

TextBaseline? _PlaceholderDimensions_baseline$(PlaceholderDimensions target) {
  return target.baseline;
}

int _PlaceholderDimensions_hashCode$(PlaceholderDimensions target) {
  return target.hashCode;
}

Function _PlaceholderDimensions_eq$$(
  m.Scope scope,
  PlaceholderDimensions target,
) =>
    (Object other) => target == other;
Function _PlaceholderDimensions_toString$(
  m.Scope scope,
  PlaceholderDimensions target,
) =>
    target.toString;
Function WordBoundary_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as WordBoundary;
Function WordBoundary_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is WordBoundary;
TextBoundary _WordBoundary_moveByWordBoundary$(WordBoundary target) {
  return target.moveByWordBoundary;
}

Function _WordBoundary_getTextBoundaryAt$(
  m.Scope scope,
  WordBoundary target,
) =>
    target.getTextBoundaryAt;
Function TextPainter_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as TextPainter;
Function TextPainter_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is TextPainter;
InlineSpan? _TextPainter_text$(TextPainter target) {
  return target.text;
}

void _TextPainter_text_set$(
  TextPainter target,
  InlineSpan? other,
) {
  target.text = other;
}

String _TextPainter_plainText$(TextPainter target) {
  return target.plainText;
}

TextAlign _TextPainter_textAlign$(TextPainter target) {
  return target.textAlign;
}

void _TextPainter_textAlign_set$(
  TextPainter target,
  TextAlign other,
) {
  target.textAlign = other;
}

TextDirection? _TextPainter_textDirection$(TextPainter target) {
  return target.textDirection;
}

void _TextPainter_textDirection_set$(
  TextPainter target,
  TextDirection? other,
) {
  target.textDirection = other;
}

double _TextPainter_textScaleFactor$(TextPainter target) {
  return target.textScaleFactor;
}

void _TextPainter_textScaleFactor_set$(
  TextPainter target,
  double other,
) {
  target.textScaleFactor = other;
}

String? _TextPainter_ellipsis$(TextPainter target) {
  return target.ellipsis;
}

void _TextPainter_ellipsis_set$(
  TextPainter target,
  String? other,
) {
  target.ellipsis = other;
}

Locale? _TextPainter_locale$(TextPainter target) {
  return target.locale;
}

void _TextPainter_locale_set$(
  TextPainter target,
  Locale? other,
) {
  target.locale = other;
}

int? _TextPainter_maxLines$(TextPainter target) {
  return target.maxLines;
}

void _TextPainter_maxLines_set$(
  TextPainter target,
  int? other,
) {
  target.maxLines = other;
}

StrutStyle? _TextPainter_strutStyle$(TextPainter target) {
  return target.strutStyle;
}

void _TextPainter_strutStyle_set$(
  TextPainter target,
  StrutStyle? other,
) {
  target.strutStyle = other;
}

TextWidthBasis _TextPainter_textWidthBasis$(TextPainter target) {
  return target.textWidthBasis;
}

void _TextPainter_textWidthBasis_set$(
  TextPainter target,
  TextWidthBasis other,
) {
  target.textWidthBasis = other;
}

TextHeightBehavior? _TextPainter_textHeightBehavior$(TextPainter target) {
  return target.textHeightBehavior;
}

void _TextPainter_textHeightBehavior_set$(
  TextPainter target,
  TextHeightBehavior? other,
) {
  target.textHeightBehavior = other;
}

List<TextBox>? _TextPainter_inlinePlaceholderBoxes$(TextPainter target) {
  return target.inlinePlaceholderBoxes;
}

List<double>? _TextPainter_inlinePlaceholderScales$(TextPainter target) {
  return target.inlinePlaceholderScales;
}

double _TextPainter_preferredLineHeight$(TextPainter target) {
  return target.preferredLineHeight;
}

double _TextPainter_minIntrinsicWidth$(TextPainter target) {
  return target.minIntrinsicWidth;
}

double _TextPainter_maxIntrinsicWidth$(TextPainter target) {
  return target.maxIntrinsicWidth;
}

double _TextPainter_width$(TextPainter target) {
  return target.width;
}

double _TextPainter_height$(TextPainter target) {
  return target.height;
}

Size _TextPainter_size$(TextPainter target) {
  return target.size;
}

bool _TextPainter_didExceedMaxLines$(TextPainter target) {
  return target.didExceedMaxLines;
}

WordBoundary _TextPainter_wordBoundaries$(TextPainter target) {
  return target.wordBoundaries;
}

bool _TextPainter_debugDisposed$(TextPainter target) {
  return target.debugDisposed;
}

Function _TextPainter_computeWidth$(m.Scope scope) => TextPainter.computeWidth;
Function _TextPainter_computeMaxIntrinsicWidth$(m.Scope scope) =>
    TextPainter.computeMaxIntrinsicWidth;
Function _TextPainter_markNeedsLayout$(
  m.Scope scope,
  TextPainter target,
) =>
    target.markNeedsLayout;
Function _TextPainter_setPlaceholderDimensions$(
  m.Scope scope,
  TextPainter target,
) =>
    target.setPlaceholderDimensions;
Function _TextPainter_computeDistanceToActualBaseline$(
  m.Scope scope,
  TextPainter target,
) =>
    target.computeDistanceToActualBaseline;
Function _TextPainter_layout$(
  m.Scope scope,
  TextPainter target,
) =>
    target.layout;
Function _TextPainter_paint$(
  m.Scope scope,
  TextPainter target,
) =>
    target.paint;
Function _TextPainter_getOffsetAfter$(
  m.Scope scope,
  TextPainter target,
) =>
    target.getOffsetAfter;
Function _TextPainter_getOffsetBefore$(
  m.Scope scope,
  TextPainter target,
) =>
    target.getOffsetBefore;
Function _TextPainter_getOffsetForCaret$(
  m.Scope scope,
  TextPainter target,
) =>
    target.getOffsetForCaret;
Function _TextPainter_getFullHeightForCaret$(
  m.Scope scope,
  TextPainter target,
) =>
    target.getFullHeightForCaret;
Function _TextPainter_getBoxesForSelection$(
  m.Scope scope,
  TextPainter target,
) =>
    target.getBoxesForSelection;
Function _TextPainter_getPositionForOffset$(
  m.Scope scope,
  TextPainter target,
) =>
    target.getPositionForOffset;
Function _TextPainter_getWordBoundary$(
  m.Scope scope,
  TextPainter target,
) =>
    target.getWordBoundary;
Function _TextPainter_getLineBoundary$(
  m.Scope scope,
  TextPainter target,
) =>
    target.getLineBoundary;
Function _TextPainter_computeLineMetrics$(
  m.Scope scope,
  TextPainter target,
) =>
    target.computeLineMetrics;
Function _TextPainter_dispose$(
  m.Scope scope,
  TextPainter target,
) =>
    target.dispose;
TextOverflow _TextOverflow_clip$() {
  return TextOverflow.clip;
}

TextOverflow _TextOverflow_fade$() {
  return TextOverflow.fade;
}

TextOverflow _TextOverflow_ellipsis$() {
  return TextOverflow.ellipsis;
}

TextOverflow _TextOverflow_visible$() {
  return TextOverflow.visible;
}

List<TextOverflow> _TextOverflow_values$() {
  return TextOverflow.values;
}

TextWidthBasis _TextWidthBasis_parent$() {
  return TextWidthBasis.parent;
}

TextWidthBasis _TextWidthBasis_longestLine$() {
  return TextWidthBasis.longestLine;
}

List<TextWidthBasis> _TextWidthBasis_values$() {
  return TextWidthBasis.values;
}
