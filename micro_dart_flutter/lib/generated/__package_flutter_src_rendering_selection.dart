// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/selection.dart';
import 'package:flutter/foundation.dart';
import 'package:vector_math/vector_math_64.dart';
import 'package:flutter/src/rendering/layer.dart';
import 'package:flutter/src/rendering/object.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/selection.dart',
  {
    'SelectedContent.': _SelectedContent__$,
    'SelectionUtils.getResultBasedOnRect':
        _SelectionUtils_getResultBasedOnRect$,
    'SelectionUtils.adjustDragOffset': _SelectionUtils_adjustDragOffset$,
    'SelectAllSelectionEvent.': _SelectAllSelectionEvent__$,
    'ClearSelectionEvent.': _ClearSelectionEvent__$,
    'SelectWordSelectionEvent.': _SelectWordSelectionEvent__$,
    'SelectionEdgeUpdateEvent.forStart': _SelectionEdgeUpdateEvent_forStart_$,
    'SelectionEdgeUpdateEvent.forEnd': _SelectionEdgeUpdateEvent_forEnd_$,
    'GranularlyExtendSelectionEvent.': _GranularlyExtendSelectionEvent__$,
    'DirectionallyExtendSelectionEvent.': _DirectionallyExtendSelectionEvent__$,
    'SelectionGeometry.': _SelectionGeometry__$,
    'SelectionPoint.': _SelectionPoint__$,
    'SelectionResult.next': _SelectionResult_next$,
    'SelectionResult.previous': _SelectionResult_previous$,
    'SelectionResult.end': _SelectionResult_end$,
    'SelectionResult.pending': _SelectionResult_pending$,
    'SelectionResult.none': _SelectionResult_none$,
    'SelectionResult.values': _SelectionResult_values$,
    'SelectionEventType.startEdgeUpdate': _SelectionEventType_startEdgeUpdate$,
    'SelectionEventType.endEdgeUpdate': _SelectionEventType_endEdgeUpdate$,
    'SelectionEventType.clear': _SelectionEventType_clear$,
    'SelectionEventType.selectAll': _SelectionEventType_selectAll$,
    'SelectionEventType.selectWord': _SelectionEventType_selectWord$,
    'SelectionEventType.granularlyExtendSelection':
        _SelectionEventType_granularlyExtendSelection$,
    'SelectionEventType.directionallyExtendSelection':
        _SelectionEventType_directionallyExtendSelection$,
    'SelectionEventType.values': _SelectionEventType_values$,
    'TextGranularity.character': _TextGranularity_character$,
    'TextGranularity.word': _TextGranularity_word$,
    'TextGranularity.line': _TextGranularity_line$,
    'TextGranularity.document': _TextGranularity_document$,
    'TextGranularity.values': _TextGranularity_values$,
    'SelectionExtendDirection.previousLine':
        _SelectionExtendDirection_previousLine$,
    'SelectionExtendDirection.nextLine': _SelectionExtendDirection_nextLine$,
    'SelectionExtendDirection.forward': _SelectionExtendDirection_forward$,
    'SelectionExtendDirection.backward': _SelectionExtendDirection_backward$,
    'SelectionExtendDirection.values': _SelectionExtendDirection_values$,
    'SelectionStatus.uncollapsed': _SelectionStatus_uncollapsed$,
    'SelectionStatus.collapsed': _SelectionStatus_collapsed$,
    'SelectionStatus.none': _SelectionStatus_none$,
    'SelectionStatus.values': _SelectionStatus_values$,
    'TextSelectionHandleType.left': _TextSelectionHandleType_left$,
    'TextSelectionHandleType.right': _TextSelectionHandleType_right$,
    'TextSelectionHandleType.collapsed': _TextSelectionHandleType_collapsed$,
    'TextSelectionHandleType.values': _TextSelectionHandleType_values$,
  },
  {},
  {
    'SelectionHandler': m.ClassMirror(
      'SelectionHandler',
      {
        '#as': SelectionHandler_as$,
        '#is': SelectionHandler_is$,
        'pushHandleLayers': _SelectionHandler_pushHandleLayers$,
        'getSelectedContent': _SelectionHandler_getSelectedContent$,
        'dispatchSelectionEvent': _SelectionHandler_dispatchSelectionEvent$,
      },
      {},
    ),
    'SelectedContent': m.ClassMirror(
      'SelectedContent',
      {
        '#as': SelectedContent_as$,
        '#is': SelectedContent_is$,
        'plainText': _SelectedContent_plainText$,
      },
      {},
    ),
    'SelectionUtils': m.ClassMirror(
      'SelectionUtils',
      {
        '#as': SelectionUtils_as$,
        '#is': SelectionUtils_is$,
      },
      {},
    ),
    'SelectionEvent': m.ClassMirror(
      'SelectionEvent',
      {
        '#as': SelectionEvent_as$,
        '#is': SelectionEvent_is$,
        'type': _SelectionEvent_type$,
      },
      {},
    ),
    'SelectAllSelectionEvent': m.ClassMirror(
      'SelectAllSelectionEvent',
      {
        '#as': SelectAllSelectionEvent_as$,
        '#is': SelectAllSelectionEvent_is$,
      },
      {},
    ),
    'ClearSelectionEvent': m.ClassMirror(
      'ClearSelectionEvent',
      {
        '#as': ClearSelectionEvent_as$,
        '#is': ClearSelectionEvent_is$,
      },
      {},
    ),
    'SelectWordSelectionEvent': m.ClassMirror(
      'SelectWordSelectionEvent',
      {
        '#as': SelectWordSelectionEvent_as$,
        '#is': SelectWordSelectionEvent_is$,
        'globalPosition': _SelectWordSelectionEvent_globalPosition$,
      },
      {},
    ),
    'SelectionEdgeUpdateEvent': m.ClassMirror(
      'SelectionEdgeUpdateEvent',
      {
        '#as': SelectionEdgeUpdateEvent_as$,
        '#is': SelectionEdgeUpdateEvent_is$,
        'globalPosition': _SelectionEdgeUpdateEvent_globalPosition$,
      },
      {},
    ),
    'GranularlyExtendSelectionEvent': m.ClassMirror(
      'GranularlyExtendSelectionEvent',
      {
        '#as': GranularlyExtendSelectionEvent_as$,
        '#is': GranularlyExtendSelectionEvent_is$,
        'forward': _GranularlyExtendSelectionEvent_forward$,
        'isEnd': _GranularlyExtendSelectionEvent_isEnd$,
        'granularity': _GranularlyExtendSelectionEvent_granularity$,
      },
      {},
    ),
    'DirectionallyExtendSelectionEvent': m.ClassMirror(
      'DirectionallyExtendSelectionEvent',
      {
        '#as': DirectionallyExtendSelectionEvent_as$,
        '#is': DirectionallyExtendSelectionEvent_is$,
        'dx': _DirectionallyExtendSelectionEvent_dx$,
        'isEnd': _DirectionallyExtendSelectionEvent_isEnd$,
        'direction': _DirectionallyExtendSelectionEvent_direction$,
        'copyWith': _DirectionallyExtendSelectionEvent_copyWith$,
      },
      {},
    ),
    'SelectionRegistrar': m.ClassMirror(
      'SelectionRegistrar',
      {
        '#as': SelectionRegistrar_as$,
        '#is': SelectionRegistrar_is$,
        'add': _SelectionRegistrar_add$,
        'remove': _SelectionRegistrar_remove$,
      },
      {},
    ),
    'SelectionGeometry': m.ClassMirror(
      'SelectionGeometry',
      {
        '#as': SelectionGeometry_as$,
        '#is': SelectionGeometry_is$,
        'startSelectionPoint': _SelectionGeometry_startSelectionPoint$,
        'endSelectionPoint': _SelectionGeometry_endSelectionPoint$,
        'status': _SelectionGeometry_status$,
        'hasContent': _SelectionGeometry_hasContent$,
        'hasSelection': _SelectionGeometry_hasSelection$,
        'hashCode': _SelectionGeometry_hashCode$,
        'copyWith': _SelectionGeometry_copyWith$,
        '==': _SelectionGeometry_eq$$,
      },
      {},
    ),
    'SelectionPoint': m.ClassMirror(
      'SelectionPoint',
      {
        '#as': SelectionPoint_as$,
        '#is': SelectionPoint_is$,
        'localPosition': _SelectionPoint_localPosition$,
        'lineHeight': _SelectionPoint_lineHeight$,
        'handleType': _SelectionPoint_handleType$,
        'hashCode': _SelectionPoint_hashCode$,
        '==': _SelectionPoint_eq$$,
      },
      {},
    ),
    'SelectionResult': m.ClassMirror(
      'SelectionResult',
      {},
      {},
    ),
    'SelectionEventType': m.ClassMirror(
      'SelectionEventType',
      {},
      {},
    ),
    'TextGranularity': m.ClassMirror(
      'TextGranularity',
      {},
      {},
    ),
    'SelectionExtendDirection': m.ClassMirror(
      'SelectionExtendDirection',
      {},
      {},
    ),
    'SelectionStatus': m.ClassMirror(
      'SelectionStatus',
      {},
      {},
    ),
    'TextSelectionHandleType': m.ClassMirror(
      'TextSelectionHandleType',
      {},
      {},
    ),
  },
);
Function SelectionHandler_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SelectionHandler;
Function SelectionHandler_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SelectionHandler;
Function _SelectionHandler_pushHandleLayers$(
  m.Scope scope$,
  SelectionHandler target$,
) =>
    target$.pushHandleLayers;
Function _SelectionHandler_getSelectedContent$(
  m.Scope scope$,
  SelectionHandler target$,
) =>
    target$.getSelectedContent;
Function _SelectionHandler_dispatchSelectionEvent$(
  m.Scope scope$,
  SelectionHandler target$,
) =>
    target$.dispatchSelectionEvent;
Function SelectedContent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SelectedContent;
Function SelectedContent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SelectedContent;
Function _SelectedContent_plainText$(
  m.Scope scope$,
  SelectedContent target$,
) =>
    () {
      return target$.plainText;
    };
Function _SelectedContent__$(m.Scope scope$) => ({required String plainText}) {
      return SelectedContent(plainText: plainText);
    };
Function SelectionUtils_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SelectionUtils;
Function SelectionUtils_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SelectionUtils;
Function _SelectionUtils_getResultBasedOnRect$(m.Scope scope$) =>
    SelectionUtils.getResultBasedOnRect;
Function _SelectionUtils_adjustDragOffset$(m.Scope scope$) =>
    SelectionUtils.adjustDragOffset;
Function SelectionEvent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SelectionEvent;
Function SelectionEvent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SelectionEvent;
Function _SelectionEvent_type$(
  m.Scope scope$,
  SelectionEvent target$,
) =>
    () {
      return target$.type;
    };
Function SelectAllSelectionEvent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SelectAllSelectionEvent;
Function SelectAllSelectionEvent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SelectAllSelectionEvent;
Function _SelectAllSelectionEvent__$(m.Scope scope$) => () {
      return SelectAllSelectionEvent();
    };
Function ClearSelectionEvent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ClearSelectionEvent;
Function ClearSelectionEvent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ClearSelectionEvent;
Function _ClearSelectionEvent__$(m.Scope scope$) => () {
      return ClearSelectionEvent();
    };
Function SelectWordSelectionEvent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SelectWordSelectionEvent;
Function SelectWordSelectionEvent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SelectWordSelectionEvent;
Function _SelectWordSelectionEvent_globalPosition$(
  m.Scope scope$,
  SelectWordSelectionEvent target$,
) =>
    () {
      return target$.globalPosition;
    };
Function _SelectWordSelectionEvent__$(m.Scope scope$) =>
    ({required Offset globalPosition}) {
      return SelectWordSelectionEvent(globalPosition: globalPosition);
    };
Function SelectionEdgeUpdateEvent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SelectionEdgeUpdateEvent;
Function SelectionEdgeUpdateEvent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SelectionEdgeUpdateEvent;
Function _SelectionEdgeUpdateEvent_globalPosition$(
  m.Scope scope$,
  SelectionEdgeUpdateEvent target$,
) =>
    () {
      return target$.globalPosition;
    };
Function _SelectionEdgeUpdateEvent_forStart_$(m.Scope scope$) =>
    SelectionEdgeUpdateEvent.forStart;
Function _SelectionEdgeUpdateEvent_forEnd_$(m.Scope scope$) =>
    SelectionEdgeUpdateEvent.forEnd;
Function GranularlyExtendSelectionEvent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as GranularlyExtendSelectionEvent;
Function GranularlyExtendSelectionEvent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is GranularlyExtendSelectionEvent;
Function _GranularlyExtendSelectionEvent_forward$(
  m.Scope scope$,
  GranularlyExtendSelectionEvent target$,
) =>
    () {
      return target$.forward;
    };
Function _GranularlyExtendSelectionEvent_isEnd$(
  m.Scope scope$,
  GranularlyExtendSelectionEvent target$,
) =>
    () {
      return target$.isEnd;
    };
Function _GranularlyExtendSelectionEvent_granularity$(
  m.Scope scope$,
  GranularlyExtendSelectionEvent target$,
) =>
    () {
      return target$.granularity;
    };
Function _GranularlyExtendSelectionEvent__$(m.Scope scope$) => ({
      required bool forward,
      required bool isEnd,
      required TextGranularity granularity,
    }) {
      return GranularlyExtendSelectionEvent(
        forward: forward,
        granularity: granularity,
        isEnd: isEnd,
      );
    };
Function DirectionallyExtendSelectionEvent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DirectionallyExtendSelectionEvent;
Function DirectionallyExtendSelectionEvent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DirectionallyExtendSelectionEvent;
Function _DirectionallyExtendSelectionEvent_dx$(
  m.Scope scope$,
  DirectionallyExtendSelectionEvent target$,
) =>
    () {
      return target$.dx;
    };
Function _DirectionallyExtendSelectionEvent_isEnd$(
  m.Scope scope$,
  DirectionallyExtendSelectionEvent target$,
) =>
    () {
      return target$.isEnd;
    };
Function _DirectionallyExtendSelectionEvent_direction$(
  m.Scope scope$,
  DirectionallyExtendSelectionEvent target$,
) =>
    () {
      return target$.direction;
    };
Function _DirectionallyExtendSelectionEvent__$(m.Scope scope$) => ({
      required double dx,
      required bool isEnd,
      required SelectionExtendDirection direction,
    }) {
      return DirectionallyExtendSelectionEvent(
        direction: direction,
        dx: dx,
        isEnd: isEnd,
      );
    };
Function _DirectionallyExtendSelectionEvent_copyWith$(
  m.Scope scope$,
  DirectionallyExtendSelectionEvent target$,
) =>
    target$.copyWith;
Function SelectionRegistrar_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SelectionRegistrar;
Function SelectionRegistrar_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SelectionRegistrar;
Function _SelectionRegistrar_add$(
  m.Scope scope$,
  SelectionRegistrar target$,
) =>
    target$.add;
Function _SelectionRegistrar_remove$(
  m.Scope scope$,
  SelectionRegistrar target$,
) =>
    target$.remove;
Function SelectionGeometry_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SelectionGeometry;
Function SelectionGeometry_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SelectionGeometry;
Function _SelectionGeometry_startSelectionPoint$(
  m.Scope scope$,
  SelectionGeometry target$,
) =>
    () {
      return target$.startSelectionPoint;
    };
Function _SelectionGeometry_endSelectionPoint$(
  m.Scope scope$,
  SelectionGeometry target$,
) =>
    () {
      return target$.endSelectionPoint;
    };
Function _SelectionGeometry_status$(
  m.Scope scope$,
  SelectionGeometry target$,
) =>
    () {
      return target$.status;
    };
Function _SelectionGeometry_hasContent$(
  m.Scope scope$,
  SelectionGeometry target$,
) =>
    () {
      return target$.hasContent;
    };
Function _SelectionGeometry_hasSelection$(
  m.Scope scope$,
  SelectionGeometry target$,
) =>
    () {
      return target$.hasSelection;
    };
Function _SelectionGeometry_hashCode$(
  m.Scope scope$,
  SelectionGeometry target$,
) =>
    () {
      return target$.hashCode;
    };
Function _SelectionGeometry__$(m.Scope scope$) => ({
      SelectionPoint? startSelectionPoint,
      SelectionPoint? endSelectionPoint,
      required SelectionStatus status,
      required bool hasContent,
    }) {
      return SelectionGeometry(
        endSelectionPoint: endSelectionPoint,
        hasContent: hasContent,
        startSelectionPoint: startSelectionPoint,
        status: status,
      );
    };
Function _SelectionGeometry_copyWith$(
  m.Scope scope$,
  SelectionGeometry target$,
) =>
    target$.copyWith;
Function _SelectionGeometry_eq$$(
  m.Scope scope$,
  SelectionGeometry target$,
) =>
    (Object other$) => target$ == other$;
Function SelectionPoint_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SelectionPoint;
Function SelectionPoint_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SelectionPoint;
Function _SelectionPoint_localPosition$(
  m.Scope scope$,
  SelectionPoint target$,
) =>
    () {
      return target$.localPosition;
    };
Function _SelectionPoint_lineHeight$(
  m.Scope scope$,
  SelectionPoint target$,
) =>
    () {
      return target$.lineHeight;
    };
Function _SelectionPoint_handleType$(
  m.Scope scope$,
  SelectionPoint target$,
) =>
    () {
      return target$.handleType;
    };
Function _SelectionPoint_hashCode$(
  m.Scope scope$,
  SelectionPoint target$,
) =>
    () {
      return target$.hashCode;
    };
Function _SelectionPoint__$(m.Scope scope$) => ({
      required Offset localPosition,
      required double lineHeight,
      required TextSelectionHandleType handleType,
    }) {
      return SelectionPoint(
        handleType: handleType,
        lineHeight: lineHeight,
        localPosition: localPosition,
      );
    };
Function _SelectionPoint_eq$$(
  m.Scope scope$,
  SelectionPoint target$,
) =>
    (Object other$) => target$ == other$;
Function _SelectionResult_next$(m.Scope scope$) => () => SelectionResult.next;
Function _SelectionResult_previous$(m.Scope scope$) =>
    () => SelectionResult.previous;
Function _SelectionResult_end$(m.Scope scope$) => () => SelectionResult.end;
Function _SelectionResult_pending$(m.Scope scope$) =>
    () => SelectionResult.pending;
Function _SelectionResult_none$(m.Scope scope$) => () => SelectionResult.none;
Function _SelectionResult_values$(m.Scope scope$) =>
    () => SelectionResult.values;
Function _SelectionEventType_startEdgeUpdate$(m.Scope scope$) =>
    () => SelectionEventType.startEdgeUpdate;
Function _SelectionEventType_endEdgeUpdate$(m.Scope scope$) =>
    () => SelectionEventType.endEdgeUpdate;
Function _SelectionEventType_clear$(m.Scope scope$) =>
    () => SelectionEventType.clear;
Function _SelectionEventType_selectAll$(m.Scope scope$) =>
    () => SelectionEventType.selectAll;
Function _SelectionEventType_selectWord$(m.Scope scope$) =>
    () => SelectionEventType.selectWord;
Function _SelectionEventType_granularlyExtendSelection$(m.Scope scope$) =>
    () => SelectionEventType.granularlyExtendSelection;
Function _SelectionEventType_directionallyExtendSelection$(m.Scope scope$) =>
    () => SelectionEventType.directionallyExtendSelection;
Function _SelectionEventType_values$(m.Scope scope$) =>
    () => SelectionEventType.values;
Function _TextGranularity_character$(m.Scope scope$) =>
    () => TextGranularity.character;
Function _TextGranularity_word$(m.Scope scope$) => () => TextGranularity.word;
Function _TextGranularity_line$(m.Scope scope$) => () => TextGranularity.line;
Function _TextGranularity_document$(m.Scope scope$) =>
    () => TextGranularity.document;
Function _TextGranularity_values$(m.Scope scope$) =>
    () => TextGranularity.values;
Function _SelectionExtendDirection_previousLine$(m.Scope scope$) =>
    () => SelectionExtendDirection.previousLine;
Function _SelectionExtendDirection_nextLine$(m.Scope scope$) =>
    () => SelectionExtendDirection.nextLine;
Function _SelectionExtendDirection_forward$(m.Scope scope$) =>
    () => SelectionExtendDirection.forward;
Function _SelectionExtendDirection_backward$(m.Scope scope$) =>
    () => SelectionExtendDirection.backward;
Function _SelectionExtendDirection_values$(m.Scope scope$) =>
    () => SelectionExtendDirection.values;
Function _SelectionStatus_uncollapsed$(m.Scope scope$) =>
    () => SelectionStatus.uncollapsed;
Function _SelectionStatus_collapsed$(m.Scope scope$) =>
    () => SelectionStatus.collapsed;
Function _SelectionStatus_none$(m.Scope scope$) => () => SelectionStatus.none;
Function _SelectionStatus_values$(m.Scope scope$) =>
    () => SelectionStatus.values;
Function _TextSelectionHandleType_left$(m.Scope scope$) =>
    () => TextSelectionHandleType.left;
Function _TextSelectionHandleType_right$(m.Scope scope$) =>
    () => TextSelectionHandleType.right;
Function _TextSelectionHandleType_collapsed$(m.Scope scope$) =>
    () => TextSelectionHandleType.collapsed;
Function _TextSelectionHandleType_values$(m.Scope scope$) =>
    () => TextSelectionHandleType.values;
