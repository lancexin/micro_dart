// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/selection.dart';
import 'package:flutter/foundation.dart';
import 'package:vector_math/vector_math_64.dart';
import 'package:flutter/src/rendering/layer.dart';
import 'package:flutter/src/rendering/object.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/selection.dart',
  {
    'SelectionUtils.getResultBasedOnRect':
        _SelectionUtils_getResultBasedOnRect$,
    'SelectionUtils.adjustDragOffset': _SelectionUtils_adjustDragOffset$,
    'SelectionResult.next': _SelectionResult_next$,
    'SelectionResult.previous': _SelectionResult_previous$,
    'SelectionResult.end': _SelectionResult_end$,
    'SelectionResult.pending': _SelectionResult_pending$,
    'SelectionResult.none': _SelectionResult_none$,
    'SelectionResult.values': _SelectionResult_values$,
    'SelectionEventType.startEdgeUpdate': _SelectionEventType_startEdgeUpdate$,
    'SelectionEventType.endEdgeUpdate': _SelectionEventType_endEdgeUpdate$,
    'SelectionEventType.clear': _SelectionEventType_clear$,
    'SelectionEventType.selectAll': _SelectionEventType_selectAll$,
    'SelectionEventType.selectWord': _SelectionEventType_selectWord$,
    'SelectionEventType.granularlyExtendSelection':
        _SelectionEventType_granularlyExtendSelection$,
    'SelectionEventType.directionallyExtendSelection':
        _SelectionEventType_directionallyExtendSelection$,
    'SelectionEventType.values': _SelectionEventType_values$,
    'TextGranularity.character': _TextGranularity_character$,
    'TextGranularity.word': _TextGranularity_word$,
    'TextGranularity.line': _TextGranularity_line$,
    'TextGranularity.document': _TextGranularity_document$,
    'TextGranularity.values': _TextGranularity_values$,
    'SelectionExtendDirection.previousLine':
        _SelectionExtendDirection_previousLine$,
    'SelectionExtendDirection.nextLine': _SelectionExtendDirection_nextLine$,
    'SelectionExtendDirection.forward': _SelectionExtendDirection_forward$,
    'SelectionExtendDirection.backward': _SelectionExtendDirection_backward$,
    'SelectionExtendDirection.values': _SelectionExtendDirection_values$,
    'SelectionStatus.uncollapsed': _SelectionStatus_uncollapsed$,
    'SelectionStatus.collapsed': _SelectionStatus_collapsed$,
    'SelectionStatus.none': _SelectionStatus_none$,
    'SelectionStatus.values': _SelectionStatus_values$,
    'TextSelectionHandleType.left': _TextSelectionHandleType_left$,
    'TextSelectionHandleType.right': _TextSelectionHandleType_right$,
    'TextSelectionHandleType.collapsed': _TextSelectionHandleType_collapsed$,
    'TextSelectionHandleType.values': _TextSelectionHandleType_values$,
  },
  {},
  {
    'SelectionHandler': m.ClassMirror(
      'SelectionHandler',
      {
        'pushHandleLayers': _SelectionHandler_pushHandleLayers$,
        'getSelectedContent': _SelectionHandler_getSelectedContent$,
        'dispatchSelectionEvent': _SelectionHandler_dispatchSelectionEvent$,
      },
      {},
    ),
    'SelectedContent': m.ClassMirror(
      'SelectedContent',
      {'plainText': _SelectedContent_plainText$},
      {},
    ),
    'SelectionUtils': m.ClassMirror(
      'SelectionUtils',
      {},
      {},
    ),
    'SelectionEvent': m.ClassMirror(
      'SelectionEvent',
      {'type': _SelectionEvent_type$},
      {},
    ),
    'SelectAllSelectionEvent': m.ClassMirror(
      'SelectAllSelectionEvent',
      {},
      {},
    ),
    'ClearSelectionEvent': m.ClassMirror(
      'ClearSelectionEvent',
      {},
      {},
    ),
    'SelectWordSelectionEvent': m.ClassMirror(
      'SelectWordSelectionEvent',
      {'globalPosition': _SelectWordSelectionEvent_globalPosition$},
      {},
    ),
    'SelectionEdgeUpdateEvent': m.ClassMirror(
      'SelectionEdgeUpdateEvent',
      {'globalPosition': _SelectionEdgeUpdateEvent_globalPosition$},
      {},
    ),
    'GranularlyExtendSelectionEvent': m.ClassMirror(
      'GranularlyExtendSelectionEvent',
      {
        'forward': _GranularlyExtendSelectionEvent_forward$,
        'isEnd': _GranularlyExtendSelectionEvent_isEnd$,
        'granularity': _GranularlyExtendSelectionEvent_granularity$,
      },
      {},
    ),
    'DirectionallyExtendSelectionEvent': m.ClassMirror(
      'DirectionallyExtendSelectionEvent',
      {
        'dx': _DirectionallyExtendSelectionEvent_dx$,
        'isEnd': _DirectionallyExtendSelectionEvent_isEnd$,
        'direction': _DirectionallyExtendSelectionEvent_direction$,
        'copyWith': _DirectionallyExtendSelectionEvent_copyWith$,
      },
      {},
    ),
    'SelectionRegistrar': m.ClassMirror(
      'SelectionRegistrar',
      {
        'add': _SelectionRegistrar_add$,
        'remove': _SelectionRegistrar_remove$,
      },
      {},
    ),
    'SelectionGeometry': m.ClassMirror(
      'SelectionGeometry',
      {
        'startSelectionPoint': _SelectionGeometry_startSelectionPoint$,
        'endSelectionPoint': _SelectionGeometry_endSelectionPoint$,
        'status': _SelectionGeometry_status$,
        'hasContent': _SelectionGeometry_hasContent$,
        'hasSelection': _SelectionGeometry_hasSelection$,
        'hashCode': _SelectionGeometry_hashCode$,
        'copyWith': _SelectionGeometry_copyWith$,
      },
      {},
    ),
    'SelectionPoint': m.ClassMirror(
      'SelectionPoint',
      {
        'localPosition': _SelectionPoint_localPosition$,
        'lineHeight': _SelectionPoint_lineHeight$,
        'handleType': _SelectionPoint_handleType$,
        'hashCode': _SelectionPoint_hashCode$,
      },
      {},
    ),
    'SelectionResult': m.ClassMirror(
      'SelectionResult',
      {},
      {},
    ),
    'SelectionEventType': m.ClassMirror(
      'SelectionEventType',
      {},
      {},
    ),
    'TextGranularity': m.ClassMirror(
      'TextGranularity',
      {},
      {},
    ),
    'SelectionExtendDirection': m.ClassMirror(
      'SelectionExtendDirection',
      {},
      {},
    ),
    'SelectionStatus': m.ClassMirror(
      'SelectionStatus',
      {},
      {},
    ),
    'TextSelectionHandleType': m.ClassMirror(
      'TextSelectionHandleType',
      {},
      {},
    ),
  },
);
Function _SelectionHandler_pushHandleLayers$(
  m.Scope scope,
  SelectionHandler target,
) =>
    target.pushHandleLayers;
Function _SelectionHandler_getSelectedContent$(
  m.Scope scope,
  SelectionHandler target,
) =>
    target.getSelectedContent;
Function _SelectionHandler_dispatchSelectionEvent$(
  m.Scope scope,
  SelectionHandler target,
) =>
    target.dispatchSelectionEvent;
String _SelectedContent_plainText$(SelectedContent target) {
  return target.plainText;
}

Function _SelectionUtils_getResultBasedOnRect$(m.Scope scope) =>
    SelectionUtils.getResultBasedOnRect;
Function _SelectionUtils_adjustDragOffset$(m.Scope scope) =>
    SelectionUtils.adjustDragOffset;
SelectionEventType _SelectionEvent_type$(SelectionEvent target) {
  return target.type;
}

Offset _SelectWordSelectionEvent_globalPosition$(
    SelectWordSelectionEvent target) {
  return target.globalPosition;
}

Offset _SelectionEdgeUpdateEvent_globalPosition$(
    SelectionEdgeUpdateEvent target) {
  return target.globalPosition;
}

bool _GranularlyExtendSelectionEvent_forward$(
    GranularlyExtendSelectionEvent target) {
  return target.forward;
}

bool _GranularlyExtendSelectionEvent_isEnd$(
    GranularlyExtendSelectionEvent target) {
  return target.isEnd;
}

TextGranularity _GranularlyExtendSelectionEvent_granularity$(
    GranularlyExtendSelectionEvent target) {
  return target.granularity;
}

double _DirectionallyExtendSelectionEvent_dx$(
    DirectionallyExtendSelectionEvent target) {
  return target.dx;
}

bool _DirectionallyExtendSelectionEvent_isEnd$(
    DirectionallyExtendSelectionEvent target) {
  return target.isEnd;
}

SelectionExtendDirection _DirectionallyExtendSelectionEvent_direction$(
    DirectionallyExtendSelectionEvent target) {
  return target.direction;
}

Function _DirectionallyExtendSelectionEvent_copyWith$(
  m.Scope scope,
  DirectionallyExtendSelectionEvent target,
) =>
    target.copyWith;
Function _SelectionRegistrar_add$(
  m.Scope scope,
  SelectionRegistrar target,
) =>
    target.add;
Function _SelectionRegistrar_remove$(
  m.Scope scope,
  SelectionRegistrar target,
) =>
    target.remove;
SelectionPoint? _SelectionGeometry_startSelectionPoint$(
    SelectionGeometry target) {
  return target.startSelectionPoint;
}

SelectionPoint? _SelectionGeometry_endSelectionPoint$(
    SelectionGeometry target) {
  return target.endSelectionPoint;
}

SelectionStatus _SelectionGeometry_status$(SelectionGeometry target) {
  return target.status;
}

bool _SelectionGeometry_hasContent$(SelectionGeometry target) {
  return target.hasContent;
}

bool _SelectionGeometry_hasSelection$(SelectionGeometry target) {
  return target.hasSelection;
}

int _SelectionGeometry_hashCode$(SelectionGeometry target) {
  return target.hashCode;
}

Function _SelectionGeometry_copyWith$(
  m.Scope scope,
  SelectionGeometry target,
) =>
    target.copyWith;
Offset _SelectionPoint_localPosition$(SelectionPoint target) {
  return target.localPosition;
}

double _SelectionPoint_lineHeight$(SelectionPoint target) {
  return target.lineHeight;
}

TextSelectionHandleType _SelectionPoint_handleType$(SelectionPoint target) {
  return target.handleType;
}

int _SelectionPoint_hashCode$(SelectionPoint target) {
  return target.hashCode;
}

SelectionResult _SelectionResult_next$() {
  return SelectionResult.next;
}

SelectionResult _SelectionResult_previous$() {
  return SelectionResult.previous;
}

SelectionResult _SelectionResult_end$() {
  return SelectionResult.end;
}

SelectionResult _SelectionResult_pending$() {
  return SelectionResult.pending;
}

SelectionResult _SelectionResult_none$() {
  return SelectionResult.none;
}

List<SelectionResult> _SelectionResult_values$() {
  return SelectionResult.values;
}

SelectionEventType _SelectionEventType_startEdgeUpdate$() {
  return SelectionEventType.startEdgeUpdate;
}

SelectionEventType _SelectionEventType_endEdgeUpdate$() {
  return SelectionEventType.endEdgeUpdate;
}

SelectionEventType _SelectionEventType_clear$() {
  return SelectionEventType.clear;
}

SelectionEventType _SelectionEventType_selectAll$() {
  return SelectionEventType.selectAll;
}

SelectionEventType _SelectionEventType_selectWord$() {
  return SelectionEventType.selectWord;
}

SelectionEventType _SelectionEventType_granularlyExtendSelection$() {
  return SelectionEventType.granularlyExtendSelection;
}

SelectionEventType _SelectionEventType_directionallyExtendSelection$() {
  return SelectionEventType.directionallyExtendSelection;
}

List<SelectionEventType> _SelectionEventType_values$() {
  return SelectionEventType.values;
}

TextGranularity _TextGranularity_character$() {
  return TextGranularity.character;
}

TextGranularity _TextGranularity_word$() {
  return TextGranularity.word;
}

TextGranularity _TextGranularity_line$() {
  return TextGranularity.line;
}

TextGranularity _TextGranularity_document$() {
  return TextGranularity.document;
}

List<TextGranularity> _TextGranularity_values$() {
  return TextGranularity.values;
}

SelectionExtendDirection _SelectionExtendDirection_previousLine$() {
  return SelectionExtendDirection.previousLine;
}

SelectionExtendDirection _SelectionExtendDirection_nextLine$() {
  return SelectionExtendDirection.nextLine;
}

SelectionExtendDirection _SelectionExtendDirection_forward$() {
  return SelectionExtendDirection.forward;
}

SelectionExtendDirection _SelectionExtendDirection_backward$() {
  return SelectionExtendDirection.backward;
}

List<SelectionExtendDirection> _SelectionExtendDirection_values$() {
  return SelectionExtendDirection.values;
}

SelectionStatus _SelectionStatus_uncollapsed$() {
  return SelectionStatus.uncollapsed;
}

SelectionStatus _SelectionStatus_collapsed$() {
  return SelectionStatus.collapsed;
}

SelectionStatus _SelectionStatus_none$() {
  return SelectionStatus.none;
}

List<SelectionStatus> _SelectionStatus_values$() {
  return SelectionStatus.values;
}

TextSelectionHandleType _TextSelectionHandleType_left$() {
  return TextSelectionHandleType.left;
}

TextSelectionHandleType _TextSelectionHandleType_right$() {
  return TextSelectionHandleType.right;
}

TextSelectionHandleType _TextSelectionHandleType_collapsed$() {
  return TextSelectionHandleType.collapsed;
}

List<TextSelectionHandleType> _TextSelectionHandleType_values$() {
  return TextSelectionHandleType.values;
}
