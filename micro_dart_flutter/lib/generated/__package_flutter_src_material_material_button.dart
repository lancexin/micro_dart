// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/material_button.dart';
import 'dart:ui';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button.dart';
import 'package:flutter/src/material/button_theme.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/material_button.dart',
  {'MaterialButton.': _MaterialButton__$},
  {},
  {
    'MaterialButton': m.ClassMirror(
      'MaterialButton',
      {
        '#as': MaterialButton_as$,
        '#is': MaterialButton_is$,
        'onPressed': _MaterialButton_onPressed$,
        'onLongPress': _MaterialButton_onLongPress$,
        'onHighlightChanged': _MaterialButton_onHighlightChanged$,
        'mouseCursor': _MaterialButton_mouseCursor$,
        'textTheme': _MaterialButton_textTheme$,
        'textColor': _MaterialButton_textColor$,
        'disabledTextColor': _MaterialButton_disabledTextColor$,
        'color': _MaterialButton_color$,
        'disabledColor': _MaterialButton_disabledColor$,
        'splashColor': _MaterialButton_splashColor$,
        'focusColor': _MaterialButton_focusColor$,
        'hoverColor': _MaterialButton_hoverColor$,
        'highlightColor': _MaterialButton_highlightColor$,
        'elevation': _MaterialButton_elevation$,
        'hoverElevation': _MaterialButton_hoverElevation$,
        'focusElevation': _MaterialButton_focusElevation$,
        'highlightElevation': _MaterialButton_highlightElevation$,
        'disabledElevation': _MaterialButton_disabledElevation$,
        'colorBrightness': _MaterialButton_colorBrightness$,
        'child': _MaterialButton_child$,
        'padding': _MaterialButton_padding$,
        'visualDensity': _MaterialButton_visualDensity$,
        'shape': _MaterialButton_shape$,
        'clipBehavior': _MaterialButton_clipBehavior$,
        'focusNode': _MaterialButton_focusNode$,
        'autofocus': _MaterialButton_autofocus$,
        'animationDuration': _MaterialButton_animationDuration$,
        'materialTapTargetSize': _MaterialButton_materialTapTargetSize$,
        'minWidth': _MaterialButton_minWidth$,
        'height': _MaterialButton_height$,
        'enableFeedback': _MaterialButton_enableFeedback$,
        'enabled': _MaterialButton_enabled$,
        'build': _MaterialButton_build$,
        'debugFillProperties': _MaterialButton_debugFillProperties$,
      },
      {},
    )
  },
);
Function MaterialButton_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MaterialButton;
Function MaterialButton_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MaterialButton;
Function _MaterialButton_onPressed$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.onPressed;
    };
Function _MaterialButton_onLongPress$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.onLongPress;
    };
Function _MaterialButton_onHighlightChanged$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.onHighlightChanged;
    };
Function _MaterialButton_mouseCursor$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.mouseCursor;
    };
Function _MaterialButton_textTheme$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.textTheme;
    };
Function _MaterialButton_textColor$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.textColor;
    };
Function _MaterialButton_disabledTextColor$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.disabledTextColor;
    };
Function _MaterialButton_color$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.color;
    };
Function _MaterialButton_disabledColor$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.disabledColor;
    };
Function _MaterialButton_splashColor$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.splashColor;
    };
Function _MaterialButton_focusColor$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.focusColor;
    };
Function _MaterialButton_hoverColor$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.hoverColor;
    };
Function _MaterialButton_highlightColor$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.highlightColor;
    };
Function _MaterialButton_elevation$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.elevation;
    };
Function _MaterialButton_hoverElevation$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.hoverElevation;
    };
Function _MaterialButton_focusElevation$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.focusElevation;
    };
Function _MaterialButton_highlightElevation$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.highlightElevation;
    };
Function _MaterialButton_disabledElevation$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.disabledElevation;
    };
Function _MaterialButton_colorBrightness$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.colorBrightness;
    };
Function _MaterialButton_child$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.child;
    };
Function _MaterialButton_padding$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.padding;
    };
Function _MaterialButton_visualDensity$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.visualDensity;
    };
Function _MaterialButton_shape$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.shape;
    };
Function _MaterialButton_clipBehavior$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _MaterialButton_focusNode$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.focusNode;
    };
Function _MaterialButton_autofocus$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.autofocus;
    };
Function _MaterialButton_animationDuration$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.animationDuration;
    };
Function _MaterialButton_materialTapTargetSize$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.materialTapTargetSize;
    };
Function _MaterialButton_minWidth$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.minWidth;
    };
Function _MaterialButton_height$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.height;
    };
Function _MaterialButton_enableFeedback$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.enableFeedback;
    };
Function _MaterialButton_enabled$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    () {
      return target$.enabled;
    };
Function _MaterialButton__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer? onPressed,
      m.FunctionPointer? onLongPress,
      m.FunctionPointer? onHighlightChanged,
      MouseCursor? mouseCursor,
      ButtonTextTheme? textTheme,
      Color? textColor,
      Color? disabledTextColor,
      Color? color,
      Color? disabledColor,
      Color? focusColor,
      Color? hoverColor,
      Color? highlightColor,
      Color? splashColor,
      Brightness? colorBrightness,
      double? elevation,
      double? focusElevation,
      double? hoverElevation,
      double? highlightElevation,
      double? disabledElevation,
      EdgeInsetsGeometry? padding,
      VisualDensity? visualDensity,
      ShapeBorder? shape,
      Clip? clipBehavior,
      FocusNode? focusNode,
      bool? autofocus,
      MaterialTapTargetSize? materialTapTargetSize,
      Duration? animationDuration,
      double? minWidth,
      double? height,
      bool? enableFeedback,
      Widget? child,
    }) {
      void onHighlightChangedProxy(bool onHighlightChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onHighlightChanged!,
            [onHighlightChanged_value$],
            {},
          );
      void onLongPressProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onLongPress!,
            [],
            {},
          );
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return MaterialButton(
        animationDuration: animationDuration,
        autofocus: autofocus ?? false,
        child: child,
        clipBehavior: clipBehavior ?? Clip.none,
        color: color,
        colorBrightness: colorBrightness,
        disabledColor: disabledColor,
        disabledElevation: disabledElevation,
        disabledTextColor: disabledTextColor,
        elevation: elevation,
        enableFeedback: enableFeedback ?? true,
        focusColor: focusColor,
        focusElevation: focusElevation,
        focusNode: focusNode,
        height: height,
        highlightColor: highlightColor,
        highlightElevation: highlightElevation,
        hoverColor: hoverColor,
        hoverElevation: hoverElevation,
        key: key,
        materialTapTargetSize: materialTapTargetSize,
        minWidth: minWidth,
        mouseCursor: mouseCursor,
        onHighlightChanged:
            onHighlightChanged == null ? null : onHighlightChangedProxy,
        onLongPress: onLongPress == null ? null : onLongPressProxy,
        onPressed: onPressed == null ? null : onPressedProxy,
        padding: padding,
        shape: shape,
        splashColor: splashColor,
        textColor: textColor,
        textTheme: textTheme,
        visualDensity: visualDensity,
      );
    };
Function _MaterialButton_build$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    target$.build;
Function _MaterialButton_debugFillProperties$(
  m.Scope scope$,
  MaterialButton target$,
) =>
    target$.debugFillProperties;
