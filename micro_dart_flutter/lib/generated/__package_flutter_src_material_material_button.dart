// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/material_button.dart';
import 'dart:ui';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button.dart';
import 'package:flutter/src/material/button_theme.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/material_button.dart',
  {},
  {},
  {
    'MaterialButton': m.ClassMirror(
      'MaterialButton',
      {
        'onPressed': _MaterialButton_onPressed$,
        'onLongPress': _MaterialButton_onLongPress$,
        'onHighlightChanged': _MaterialButton_onHighlightChanged$,
        'mouseCursor': _MaterialButton_mouseCursor$,
        'textTheme': _MaterialButton_textTheme$,
        'textColor': _MaterialButton_textColor$,
        'disabledTextColor': _MaterialButton_disabledTextColor$,
        'color': _MaterialButton_color$,
        'disabledColor': _MaterialButton_disabledColor$,
        'splashColor': _MaterialButton_splashColor$,
        'focusColor': _MaterialButton_focusColor$,
        'hoverColor': _MaterialButton_hoverColor$,
        'highlightColor': _MaterialButton_highlightColor$,
        'elevation': _MaterialButton_elevation$,
        'hoverElevation': _MaterialButton_hoverElevation$,
        'focusElevation': _MaterialButton_focusElevation$,
        'highlightElevation': _MaterialButton_highlightElevation$,
        'disabledElevation': _MaterialButton_disabledElevation$,
        'colorBrightness': _MaterialButton_colorBrightness$,
        'child': _MaterialButton_child$,
        'padding': _MaterialButton_padding$,
        'visualDensity': _MaterialButton_visualDensity$,
        'shape': _MaterialButton_shape$,
        'clipBehavior': _MaterialButton_clipBehavior$,
        'focusNode': _MaterialButton_focusNode$,
        'autofocus': _MaterialButton_autofocus$,
        'animationDuration': _MaterialButton_animationDuration$,
        'materialTapTargetSize': _MaterialButton_materialTapTargetSize$,
        'minWidth': _MaterialButton_minWidth$,
        'height': _MaterialButton_height$,
        'enableFeedback': _MaterialButton_enableFeedback$,
        'enabled': _MaterialButton_enabled$,
        'build': _MaterialButton_build$,
        'debugFillProperties': _MaterialButton_debugFillProperties$,
      },
      {},
    )
  },
);
void Function()? _MaterialButton_onPressed$(MaterialButton target) {
  return target.onPressed;
}

void Function()? _MaterialButton_onLongPress$(MaterialButton target) {
  return target.onLongPress;
}

void Function(bool)? _MaterialButton_onHighlightChanged$(
    MaterialButton target) {
  return target.onHighlightChanged;
}

MouseCursor? _MaterialButton_mouseCursor$(MaterialButton target) {
  return target.mouseCursor;
}

ButtonTextTheme? _MaterialButton_textTheme$(MaterialButton target) {
  return target.textTheme;
}

Color? _MaterialButton_textColor$(MaterialButton target) {
  return target.textColor;
}

Color? _MaterialButton_disabledTextColor$(MaterialButton target) {
  return target.disabledTextColor;
}

Color? _MaterialButton_color$(MaterialButton target) {
  return target.color;
}

Color? _MaterialButton_disabledColor$(MaterialButton target) {
  return target.disabledColor;
}

Color? _MaterialButton_splashColor$(MaterialButton target) {
  return target.splashColor;
}

Color? _MaterialButton_focusColor$(MaterialButton target) {
  return target.focusColor;
}

Color? _MaterialButton_hoverColor$(MaterialButton target) {
  return target.hoverColor;
}

Color? _MaterialButton_highlightColor$(MaterialButton target) {
  return target.highlightColor;
}

double? _MaterialButton_elevation$(MaterialButton target) {
  return target.elevation;
}

double? _MaterialButton_hoverElevation$(MaterialButton target) {
  return target.hoverElevation;
}

double? _MaterialButton_focusElevation$(MaterialButton target) {
  return target.focusElevation;
}

double? _MaterialButton_highlightElevation$(MaterialButton target) {
  return target.highlightElevation;
}

double? _MaterialButton_disabledElevation$(MaterialButton target) {
  return target.disabledElevation;
}

Brightness? _MaterialButton_colorBrightness$(MaterialButton target) {
  return target.colorBrightness;
}

Widget? _MaterialButton_child$(MaterialButton target) {
  return target.child;
}

EdgeInsetsGeometry? _MaterialButton_padding$(MaterialButton target) {
  return target.padding;
}

VisualDensity? _MaterialButton_visualDensity$(MaterialButton target) {
  return target.visualDensity;
}

ShapeBorder? _MaterialButton_shape$(MaterialButton target) {
  return target.shape;
}

Clip _MaterialButton_clipBehavior$(MaterialButton target) {
  return target.clipBehavior;
}

FocusNode? _MaterialButton_focusNode$(MaterialButton target) {
  return target.focusNode;
}

bool _MaterialButton_autofocus$(MaterialButton target) {
  return target.autofocus;
}

Duration? _MaterialButton_animationDuration$(MaterialButton target) {
  return target.animationDuration;
}

MaterialTapTargetSize? _MaterialButton_materialTapTargetSize$(
    MaterialButton target) {
  return target.materialTapTargetSize;
}

double? _MaterialButton_minWidth$(MaterialButton target) {
  return target.minWidth;
}

double? _MaterialButton_height$(MaterialButton target) {
  return target.height;
}

bool _MaterialButton_enableFeedback$(MaterialButton target) {
  return target.enableFeedback;
}

bool _MaterialButton_enabled$(MaterialButton target) {
  return target.enabled;
}

Function _MaterialButton_build$(
  m.Scope scope,
  MaterialButton target,
) =>
    target.build;
Function _MaterialButton_debugFillProperties$(
  m.Scope scope,
  MaterialButton target,
) =>
    target.debugFillProperties;
