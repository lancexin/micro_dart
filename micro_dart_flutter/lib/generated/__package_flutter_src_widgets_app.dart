// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/app.dart';
import 'dart:collection' show HashMap;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/actions.dart';
import 'package:flutter/src/widgets/banner.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/binding.dart';
import 'package:flutter/src/widgets/default_text_editing_shortcuts.dart';
import 'package:flutter/src/widgets/focus_scope.dart';
import 'package:flutter/src/widgets/focus_traversal.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/localizations.dart';
import 'package:flutter/src/widgets/media_query.dart';
import 'package:flutter/src/widgets/navigator.dart';
import 'package:flutter/src/widgets/pages.dart';
import 'package:flutter/src/widgets/performance_overlay.dart';
import 'package:flutter/src/widgets/restoration.dart';
import 'package:flutter/src/widgets/router.dart';
import 'package:flutter/src/widgets/scrollable_helpers.dart';
import 'package:flutter/src/widgets/semantics_debugger.dart';
import 'package:flutter/src/widgets/shared_app_data.dart';
import 'package:flutter/src/widgets/shortcuts.dart';
import 'package:flutter/src/widgets/tap_region.dart';
import 'package:flutter/src/widgets/text.dart';
import 'package:flutter/src/widgets/title.dart';
import 'package:flutter/src/widgets/widget_inspector.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/app.dart',
  {
    'WidgetsApp.showPerformanceOverlayOverride':
        _WidgetsApp_showPerformanceOverlayOverride$,
    'WidgetsApp.debugShowWidgetInspectorOverride':
        _WidgetsApp_debugShowWidgetInspectorOverride$,
    'WidgetsApp.debugAllowBannerOverride':
        _WidgetsApp_debugAllowBannerOverride$,
    'WidgetsApp.defaultActions': _WidgetsApp_defaultActions$,
    'WidgetsApp.defaultShortcuts': _WidgetsApp_defaultShortcuts$,
    'basicLocaleListResolution': _basicLocaleListResolution$,
  },
  {
    'WidgetsApp.showPerformanceOverlayOverride':
        _WidgetsApp_showPerformanceOverlayOverride_set$,
    'WidgetsApp.debugShowWidgetInspectorOverride':
        _WidgetsApp_debugShowWidgetInspectorOverride_set$,
    'WidgetsApp.debugAllowBannerOverride':
        _WidgetsApp_debugAllowBannerOverride_set$,
    'WidgetsApp.defaultActions': _WidgetsApp_defaultActions_set$,
  },
  {
    'WidgetsApp': m.ClassMirror(
      'WidgetsApp',
      {
        '#as': WidgetsApp_as$,
        '#is': WidgetsApp_is$,
        'navigatorKey': _WidgetsApp_navigatorKey$,
        'onGenerateRoute': _WidgetsApp_onGenerateRoute$,
        'onGenerateInitialRoutes': _WidgetsApp_onGenerateInitialRoutes$,
        'pageRouteBuilder': _WidgetsApp_pageRouteBuilder$,
        'routeInformationParser': _WidgetsApp_routeInformationParser$,
        'routerDelegate': _WidgetsApp_routerDelegate$,
        'backButtonDispatcher': _WidgetsApp_backButtonDispatcher$,
        'routeInformationProvider': _WidgetsApp_routeInformationProvider$,
        'routerConfig': _WidgetsApp_routerConfig$,
        'home': _WidgetsApp_home$,
        'routes': _WidgetsApp_routes$,
        'onUnknownRoute': _WidgetsApp_onUnknownRoute$,
        'initialRoute': _WidgetsApp_initialRoute$,
        'navigatorObservers': _WidgetsApp_navigatorObservers$,
        'builder': _WidgetsApp_builder$,
        'title': _WidgetsApp_title$,
        'onGenerateTitle': _WidgetsApp_onGenerateTitle$,
        'textStyle': _WidgetsApp_textStyle$,
        'color': _WidgetsApp_color$,
        'locale': _WidgetsApp_locale$,
        'localizationsDelegates': _WidgetsApp_localizationsDelegates$,
        'localeListResolutionCallback':
            _WidgetsApp_localeListResolutionCallback$,
        'localeResolutionCallback': _WidgetsApp_localeResolutionCallback$,
        'supportedLocales': _WidgetsApp_supportedLocales$,
        'showPerformanceOverlay': _WidgetsApp_showPerformanceOverlay$,
        'checkerboardRasterCacheImages':
            _WidgetsApp_checkerboardRasterCacheImages$,
        'checkerboardOffscreenLayers': _WidgetsApp_checkerboardOffscreenLayers$,
        'showSemanticsDebugger': _WidgetsApp_showSemanticsDebugger$,
        'debugShowWidgetInspector': _WidgetsApp_debugShowWidgetInspector$,
        'inspectorSelectButtonBuilder':
            _WidgetsApp_inspectorSelectButtonBuilder$,
        'debugShowCheckedModeBanner': _WidgetsApp_debugShowCheckedModeBanner$,
        'shortcuts': _WidgetsApp_shortcuts$,
        'actions': _WidgetsApp_actions$,
        'restorationScopeId': _WidgetsApp_restorationScopeId$,
        'useInheritedMediaQuery': _WidgetsApp_useInheritedMediaQuery$,
        'createState': _WidgetsApp_createState$,
      },
      {},
    )
  },
);
Function WidgetsApp_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as WidgetsApp;
Function WidgetsApp_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is WidgetsApp;
GlobalKey<NavigatorState>? _WidgetsApp_navigatorKey$(WidgetsApp target) {
  return target.navigatorKey;
}

Route<dynamic>? Function(RouteSettings)? _WidgetsApp_onGenerateRoute$(
    WidgetsApp target) {
  return target.onGenerateRoute;
}

List<Route<dynamic>> Function(String)? _WidgetsApp_onGenerateInitialRoutes$(
    WidgetsApp target) {
  return target.onGenerateInitialRoutes;
}

PageRoute<T> Function<T>(RouteSettings, Widget Function(BuildContext))?
    _WidgetsApp_pageRouteBuilder$(WidgetsApp target) {
  return target.pageRouteBuilder;
}

RouteInformationParser<Object>? _WidgetsApp_routeInformationParser$(
    WidgetsApp target) {
  return target.routeInformationParser;
}

RouterDelegate<Object>? _WidgetsApp_routerDelegate$(WidgetsApp target) {
  return target.routerDelegate;
}

BackButtonDispatcher? _WidgetsApp_backButtonDispatcher$(WidgetsApp target) {
  return target.backButtonDispatcher;
}

RouteInformationProvider? _WidgetsApp_routeInformationProvider$(
    WidgetsApp target) {
  return target.routeInformationProvider;
}

RouterConfig<Object>? _WidgetsApp_routerConfig$(WidgetsApp target) {
  return target.routerConfig;
}

Widget? _WidgetsApp_home$(WidgetsApp target) {
  return target.home;
}

Map<String, Widget Function(BuildContext)>? _WidgetsApp_routes$(
    WidgetsApp target) {
  return target.routes;
}

Route<dynamic>? Function(RouteSettings)? _WidgetsApp_onUnknownRoute$(
    WidgetsApp target) {
  return target.onUnknownRoute;
}

String? _WidgetsApp_initialRoute$(WidgetsApp target) {
  return target.initialRoute;
}

List<NavigatorObserver>? _WidgetsApp_navigatorObservers$(WidgetsApp target) {
  return target.navigatorObservers;
}

Widget Function(BuildContext, Widget?)? _WidgetsApp_builder$(
    WidgetsApp target) {
  return target.builder;
}

String _WidgetsApp_title$(WidgetsApp target) {
  return target.title;
}

String Function(BuildContext)? _WidgetsApp_onGenerateTitle$(WidgetsApp target) {
  return target.onGenerateTitle;
}

TextStyle? _WidgetsApp_textStyle$(WidgetsApp target) {
  return target.textStyle;
}

Color _WidgetsApp_color$(WidgetsApp target) {
  return target.color;
}

Locale? _WidgetsApp_locale$(WidgetsApp target) {
  return target.locale;
}

Iterable<LocalizationsDelegate<dynamic>>? _WidgetsApp_localizationsDelegates$(
    WidgetsApp target) {
  return target.localizationsDelegates;
}

Locale? Function(List<Locale>?, Iterable<Locale>)?
    _WidgetsApp_localeListResolutionCallback$(WidgetsApp target) {
  return target.localeListResolutionCallback;
}

Locale? Function(Locale?, Iterable<Locale>)?
    _WidgetsApp_localeResolutionCallback$(WidgetsApp target) {
  return target.localeResolutionCallback;
}

Iterable<Locale> _WidgetsApp_supportedLocales$(WidgetsApp target) {
  return target.supportedLocales;
}

bool _WidgetsApp_showPerformanceOverlay$(WidgetsApp target) {
  return target.showPerformanceOverlay;
}

bool _WidgetsApp_checkerboardRasterCacheImages$(WidgetsApp target) {
  return target.checkerboardRasterCacheImages;
}

bool _WidgetsApp_checkerboardOffscreenLayers$(WidgetsApp target) {
  return target.checkerboardOffscreenLayers;
}

bool _WidgetsApp_showSemanticsDebugger$(WidgetsApp target) {
  return target.showSemanticsDebugger;
}

bool _WidgetsApp_debugShowWidgetInspector$(WidgetsApp target) {
  return target.debugShowWidgetInspector;
}

Widget Function(BuildContext, void Function())?
    _WidgetsApp_inspectorSelectButtonBuilder$(WidgetsApp target) {
  return target.inspectorSelectButtonBuilder;
}

bool _WidgetsApp_debugShowCheckedModeBanner$(WidgetsApp target) {
  return target.debugShowCheckedModeBanner;
}

Map<ShortcutActivator, Intent>? _WidgetsApp_shortcuts$(WidgetsApp target) {
  return target.shortcuts;
}

Map<Type, Action<Intent>>? _WidgetsApp_actions$(WidgetsApp target) {
  return target.actions;
}

String? _WidgetsApp_restorationScopeId$(WidgetsApp target) {
  return target.restorationScopeId;
}

bool _WidgetsApp_useInheritedMediaQuery$(WidgetsApp target) {
  return target.useInheritedMediaQuery;
}

bool _WidgetsApp_showPerformanceOverlayOverride$() {
  return WidgetsApp.showPerformanceOverlayOverride;
}

void _WidgetsApp_showPerformanceOverlayOverride_set$(bool other) {
  WidgetsApp.showPerformanceOverlayOverride = other;
}

bool _WidgetsApp_debugShowWidgetInspectorOverride$() {
  return WidgetsApp.debugShowWidgetInspectorOverride;
}

void _WidgetsApp_debugShowWidgetInspectorOverride_set$(bool other) {
  WidgetsApp.debugShowWidgetInspectorOverride = other;
}

bool _WidgetsApp_debugAllowBannerOverride$() {
  return WidgetsApp.debugAllowBannerOverride;
}

void _WidgetsApp_debugAllowBannerOverride_set$(bool other) {
  WidgetsApp.debugAllowBannerOverride = other;
}

Map<Type, Action<Intent>> _WidgetsApp_defaultActions$() {
  return WidgetsApp.defaultActions;
}

void _WidgetsApp_defaultActions_set$(Map<Type, Action<Intent>> other) {
  WidgetsApp.defaultActions = other;
}

Map<ShortcutActivator, Intent> _WidgetsApp_defaultShortcuts$() {
  return WidgetsApp.defaultShortcuts;
}

Function _WidgetsApp_createState$(
  m.Scope scope,
  WidgetsApp target,
) =>
    target.createState;
Function _basicLocaleListResolution$(m.Scope scope) =>
    basicLocaleListResolution;
