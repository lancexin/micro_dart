// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/app.dart';
import 'dart:collection' show HashMap;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/actions.dart';
import 'package:flutter/src/widgets/banner.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/binding.dart';
import 'package:flutter/src/widgets/default_text_editing_shortcuts.dart';
import 'package:flutter/src/widgets/focus_scope.dart';
import 'package:flutter/src/widgets/focus_traversal.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/localizations.dart';
import 'package:flutter/src/widgets/media_query.dart';
import 'package:flutter/src/widgets/navigator.dart';
import 'package:flutter/src/widgets/pages.dart';
import 'package:flutter/src/widgets/performance_overlay.dart';
import 'package:flutter/src/widgets/restoration.dart';
import 'package:flutter/src/widgets/router.dart';
import 'package:flutter/src/widgets/scrollable_helpers.dart';
import 'package:flutter/src/widgets/semantics_debugger.dart';
import 'package:flutter/src/widgets/shared_app_data.dart';
import 'package:flutter/src/widgets/shortcuts.dart';
import 'package:flutter/src/widgets/tap_region.dart';
import 'package:flutter/src/widgets/text.dart';
import 'package:flutter/src/widgets/title.dart';
import 'package:flutter/src/widgets/widget_inspector.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/app.dart',
  {
    'WidgetsApp.showPerformanceOverlayOverride':
        _WidgetsApp_showPerformanceOverlayOverride$,
    'WidgetsApp.debugShowWidgetInspectorOverride':
        _WidgetsApp_debugShowWidgetInspectorOverride$,
    'WidgetsApp.debugAllowBannerOverride':
        _WidgetsApp_debugAllowBannerOverride$,
    'WidgetsApp.defaultActions': _WidgetsApp_defaultActions$,
    'WidgetsApp.defaultShortcuts': _WidgetsApp_defaultShortcuts$,
    'WidgetsApp.': _WidgetsApp__$,
    'WidgetsApp.router': _WidgetsApp_router_$,
    'basicLocaleListResolution': _basicLocaleListResolution$,
  },
  {
    'WidgetsApp.showPerformanceOverlayOverride':
        _WidgetsApp_showPerformanceOverlayOverride_set$,
    'WidgetsApp.debugShowWidgetInspectorOverride':
        _WidgetsApp_debugShowWidgetInspectorOverride_set$,
    'WidgetsApp.debugAllowBannerOverride':
        _WidgetsApp_debugAllowBannerOverride_set$,
    'WidgetsApp.defaultActions': _WidgetsApp_defaultActions_set$,
  },
  {
    'WidgetsApp': m.ClassMirror(
      'WidgetsApp',
      {
        '#as': WidgetsApp_as$,
        '#is': WidgetsApp_is$,
        'navigatorKey': _WidgetsApp_navigatorKey$,
        'onGenerateRoute': _WidgetsApp_onGenerateRoute$,
        'onGenerateInitialRoutes': _WidgetsApp_onGenerateInitialRoutes$,
        'pageRouteBuilder': _WidgetsApp_pageRouteBuilder$,
        'routeInformationParser': _WidgetsApp_routeInformationParser$,
        'routerDelegate': _WidgetsApp_routerDelegate$,
        'backButtonDispatcher': _WidgetsApp_backButtonDispatcher$,
        'routeInformationProvider': _WidgetsApp_routeInformationProvider$,
        'routerConfig': _WidgetsApp_routerConfig$,
        'home': _WidgetsApp_home$,
        'routes': _WidgetsApp_routes$,
        'onUnknownRoute': _WidgetsApp_onUnknownRoute$,
        'initialRoute': _WidgetsApp_initialRoute$,
        'navigatorObservers': _WidgetsApp_navigatorObservers$,
        'builder': _WidgetsApp_builder$,
        'title': _WidgetsApp_title$,
        'onGenerateTitle': _WidgetsApp_onGenerateTitle$,
        'textStyle': _WidgetsApp_textStyle$,
        'color': _WidgetsApp_color$,
        'locale': _WidgetsApp_locale$,
        'localizationsDelegates': _WidgetsApp_localizationsDelegates$,
        'localeListResolutionCallback':
            _WidgetsApp_localeListResolutionCallback$,
        'localeResolutionCallback': _WidgetsApp_localeResolutionCallback$,
        'supportedLocales': _WidgetsApp_supportedLocales$,
        'showPerformanceOverlay': _WidgetsApp_showPerformanceOverlay$,
        'checkerboardRasterCacheImages':
            _WidgetsApp_checkerboardRasterCacheImages$,
        'checkerboardOffscreenLayers': _WidgetsApp_checkerboardOffscreenLayers$,
        'showSemanticsDebugger': _WidgetsApp_showSemanticsDebugger$,
        'debugShowWidgetInspector': _WidgetsApp_debugShowWidgetInspector$,
        'inspectorSelectButtonBuilder':
            _WidgetsApp_inspectorSelectButtonBuilder$,
        'debugShowCheckedModeBanner': _WidgetsApp_debugShowCheckedModeBanner$,
        'shortcuts': _WidgetsApp_shortcuts$,
        'actions': _WidgetsApp_actions$,
        'restorationScopeId': _WidgetsApp_restorationScopeId$,
        'useInheritedMediaQuery': _WidgetsApp_useInheritedMediaQuery$,
        'createState': _WidgetsApp_createState$,
      },
      {},
    )
  },
);
Function WidgetsApp_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as WidgetsApp;
Function WidgetsApp_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is WidgetsApp;
Function _WidgetsApp_navigatorKey$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.navigatorKey;
    };
Function _WidgetsApp_onGenerateRoute$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.onGenerateRoute;
    };
Function _WidgetsApp_onGenerateInitialRoutes$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.onGenerateInitialRoutes;
    };
Function _WidgetsApp_pageRouteBuilder$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.pageRouteBuilder;
    };
Function _WidgetsApp_routeInformationParser$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.routeInformationParser;
    };
Function _WidgetsApp_routerDelegate$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.routerDelegate;
    };
Function _WidgetsApp_backButtonDispatcher$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.backButtonDispatcher;
    };
Function _WidgetsApp_routeInformationProvider$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.routeInformationProvider;
    };
Function _WidgetsApp_routerConfig$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.routerConfig;
    };
Function _WidgetsApp_home$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.home;
    };
Function _WidgetsApp_routes$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.routes;
    };
Function _WidgetsApp_onUnknownRoute$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.onUnknownRoute;
    };
Function _WidgetsApp_initialRoute$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.initialRoute;
    };
Function _WidgetsApp_navigatorObservers$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.navigatorObservers;
    };
Function _WidgetsApp_builder$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.builder;
    };
Function _WidgetsApp_title$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.title;
    };
Function _WidgetsApp_onGenerateTitle$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.onGenerateTitle;
    };
Function _WidgetsApp_textStyle$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.textStyle;
    };
Function _WidgetsApp_color$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.color;
    };
Function _WidgetsApp_locale$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.locale;
    };
Function _WidgetsApp_localizationsDelegates$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.localizationsDelegates;
    };
Function _WidgetsApp_localeListResolutionCallback$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.localeListResolutionCallback;
    };
Function _WidgetsApp_localeResolutionCallback$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.localeResolutionCallback;
    };
Function _WidgetsApp_supportedLocales$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.supportedLocales;
    };
Function _WidgetsApp_showPerformanceOverlay$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.showPerformanceOverlay;
    };
Function _WidgetsApp_checkerboardRasterCacheImages$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.checkerboardRasterCacheImages;
    };
Function _WidgetsApp_checkerboardOffscreenLayers$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.checkerboardOffscreenLayers;
    };
Function _WidgetsApp_showSemanticsDebugger$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.showSemanticsDebugger;
    };
Function _WidgetsApp_debugShowWidgetInspector$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.debugShowWidgetInspector;
    };
Function _WidgetsApp_inspectorSelectButtonBuilder$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.inspectorSelectButtonBuilder;
    };
Function _WidgetsApp_debugShowCheckedModeBanner$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.debugShowCheckedModeBanner;
    };
Function _WidgetsApp_shortcuts$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.shortcuts;
    };
Function _WidgetsApp_actions$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.actions;
    };
Function _WidgetsApp_restorationScopeId$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.restorationScopeId;
    };
Function _WidgetsApp_useInheritedMediaQuery$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    () {
      return target$.useInheritedMediaQuery;
    };
bool _WidgetsApp_showPerformanceOverlayOverride$() {
  return WidgetsApp.showPerformanceOverlayOverride;
}

void _WidgetsApp_showPerformanceOverlayOverride_set$(bool other$) {
  WidgetsApp.showPerformanceOverlayOverride = other$;
}

bool _WidgetsApp_debugShowWidgetInspectorOverride$() {
  return WidgetsApp.debugShowWidgetInspectorOverride;
}

void _WidgetsApp_debugShowWidgetInspectorOverride_set$(bool other$) {
  WidgetsApp.debugShowWidgetInspectorOverride = other$;
}

bool _WidgetsApp_debugAllowBannerOverride$() {
  return WidgetsApp.debugAllowBannerOverride;
}

void _WidgetsApp_debugAllowBannerOverride_set$(bool other$) {
  WidgetsApp.debugAllowBannerOverride = other$;
}

Map<Type, Action<Intent>> _WidgetsApp_defaultActions$() {
  return WidgetsApp.defaultActions;
}

void _WidgetsApp_defaultActions_set$(Map<Type, Action<Intent>> other$) {
  WidgetsApp.defaultActions = other$;
}

Map<ShortcutActivator, Intent> _WidgetsApp_defaultShortcuts$() {
  return WidgetsApp.defaultShortcuts;
}

Function _WidgetsApp__$(m.Scope scope$) => ({
      Key? key,
      GlobalKey<NavigatorState>? navigatorKey,
      m.FunctionPointer? onGenerateRoute,
      m.FunctionPointer? onGenerateInitialRoutes,
      m.FunctionPointer? onUnknownRoute,
      List? navigatorObservers,
      String? initialRoute,
      m.FunctionPointer? pageRouteBuilder,
      Widget? home,
      Map? routes,
      m.FunctionPointer? builder,
      String? title,
      m.FunctionPointer? onGenerateTitle,
      TextStyle? textStyle,
      required Color color,
      Locale? locale,
      Iterable? localizationsDelegates,
      m.FunctionPointer? localeListResolutionCallback,
      m.FunctionPointer? localeResolutionCallback,
      Iterable? supportedLocales,
      bool? showPerformanceOverlay,
      bool? checkerboardRasterCacheImages,
      bool? checkerboardOffscreenLayers,
      bool? showSemanticsDebugger,
      bool? debugShowWidgetInspector,
      bool? debugShowCheckedModeBanner,
      m.FunctionPointer? inspectorSelectButtonBuilder,
      Map? shortcuts,
      Map? actions,
      String? restorationScopeId,
      bool? useInheritedMediaQuery,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      Widget inspectorSelectButtonBuilderProxy(
        BuildContext inspectorSelectButtonBuilder_context$,
        void Function() inspectorSelectButtonBuilder_onPressed$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            inspectorSelectButtonBuilder!,
            [
              inspectorSelectButtonBuilder_context$,
              inspectorSelectButtonBuilder_onPressed$,
            ],
            {},
          );
      Locale? localeListResolutionCallbackProxy(
        List? localeListResolutionCallback_locales$,
        Iterable localeListResolutionCallback_supportedLocales$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            localeListResolutionCallback!,
            [
              localeListResolutionCallback_locales$,
              localeListResolutionCallback_supportedLocales$,
            ],
            {},
          );
      Locale? localeResolutionCallbackProxy(
        Locale? localeResolutionCallback_locale$,
        Iterable localeResolutionCallback_supportedLocales$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            localeResolutionCallback!,
            [
              localeResolutionCallback_locale$,
              localeResolutionCallback_supportedLocales$,
            ],
            {},
          );
      List<Route<dynamic>> onGenerateInitialRoutesProxy(
              String onGenerateInitialRoutes_initialRoute$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onGenerateInitialRoutes!,
            [onGenerateInitialRoutes_initialRoute$],
            {},
          );
      Route<dynamic>? onGenerateRouteProxy(
              RouteSettings onGenerateRoute_settings$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onGenerateRoute!,
            [onGenerateRoute_settings$],
            {},
          );
      String onGenerateTitleProxy(BuildContext onGenerateTitle_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onGenerateTitle!,
            [onGenerateTitle_context$],
            {},
          );
      Route<dynamic>? onUnknownRouteProxy(
              RouteSettings onUnknownRoute_settings$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onUnknownRoute!,
            [onUnknownRoute_settings$],
            {},
          );
      PageRoute<T> pageRouteBuilderProxy<T>(
        RouteSettings pageRouteBuilder_settings$,
        Widget Function(BuildContext) pageRouteBuilder_builder$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            pageRouteBuilder!,
            [
              pageRouteBuilder_settings$,
              pageRouteBuilder_builder$,
            ],
            {},
          );
      return WidgetsApp(
        actions: actions == null ? null : Map.from(actions),
        builder: builder == null ? null : builderProxy,
        checkerboardOffscreenLayers: checkerboardOffscreenLayers ?? false,
        checkerboardRasterCacheImages: checkerboardRasterCacheImages ?? false,
        color: color,
        debugShowCheckedModeBanner: debugShowCheckedModeBanner ?? true,
        debugShowWidgetInspector: debugShowWidgetInspector ?? false,
        home: home,
        initialRoute: initialRoute,
        inspectorSelectButtonBuilder: inspectorSelectButtonBuilder == null
            ? null
            : inspectorSelectButtonBuilderProxy,
        key: key,
        locale: locale,
        localeListResolutionCallback: localeListResolutionCallback == null
            ? null
            : localeListResolutionCallbackProxy,
        localeResolutionCallback: localeResolutionCallback == null
            ? null
            : localeResolutionCallbackProxy,
        localizationsDelegates: localizationsDelegates == null
            ? null
            : Iterable.castFrom(localizationsDelegates),
        navigatorKey: navigatorKey,
        navigatorObservers: navigatorObservers == null
            ? const <NavigatorObserver>[]
            : List.from(navigatorObservers),
        onGenerateInitialRoutes: onGenerateInitialRoutes == null
            ? null
            : onGenerateInitialRoutesProxy,
        onGenerateRoute: onGenerateRoute == null ? null : onGenerateRouteProxy,
        onGenerateTitle: onGenerateTitle == null ? null : onGenerateTitleProxy,
        onUnknownRoute: onUnknownRoute == null ? null : onUnknownRouteProxy,
        pageRouteBuilder:
            pageRouteBuilder == null ? null : pageRouteBuilderProxy,
        restorationScopeId: restorationScopeId,
        routes:
            routes == null ? const <String, WidgetBuilder>{} : Map.from(routes),
        shortcuts: shortcuts == null ? null : Map.from(shortcuts),
        showPerformanceOverlay: showPerformanceOverlay ?? false,
        showSemanticsDebugger: showSemanticsDebugger ?? false,
        supportedLocales: supportedLocales == null
            ? const <Locale>[Locale('en', 'US')]
            : Iterable.castFrom(supportedLocales),
        textStyle: textStyle,
        title: title ?? '',
        useInheritedMediaQuery: useInheritedMediaQuery ?? false,
      );
    };
Function _WidgetsApp_router_$(m.Scope scope$) => ({
      Key? key,
      RouteInformationProvider? routeInformationProvider,
      RouteInformationParser<Object>? routeInformationParser,
      RouterDelegate<Object>? routerDelegate,
      RouterConfig<Object>? routerConfig,
      BackButtonDispatcher? backButtonDispatcher,
      m.FunctionPointer? builder,
      String? title,
      m.FunctionPointer? onGenerateTitle,
      TextStyle? textStyle,
      required Color color,
      Locale? locale,
      Iterable? localizationsDelegates,
      m.FunctionPointer? localeListResolutionCallback,
      m.FunctionPointer? localeResolutionCallback,
      Iterable? supportedLocales,
      bool? showPerformanceOverlay,
      bool? checkerboardRasterCacheImages,
      bool? checkerboardOffscreenLayers,
      bool? showSemanticsDebugger,
      bool? debugShowWidgetInspector,
      bool? debugShowCheckedModeBanner,
      m.FunctionPointer? inspectorSelectButtonBuilder,
      Map? shortcuts,
      Map? actions,
      String? restorationScopeId,
      bool? useInheritedMediaQuery,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      Widget inspectorSelectButtonBuilderProxy(
        BuildContext inspectorSelectButtonBuilder_context$,
        void Function() inspectorSelectButtonBuilder_onPressed$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            inspectorSelectButtonBuilder!,
            [
              inspectorSelectButtonBuilder_context$,
              inspectorSelectButtonBuilder_onPressed$,
            ],
            {},
          );
      Locale? localeListResolutionCallbackProxy(
        List? localeListResolutionCallback_locales$,
        Iterable localeListResolutionCallback_supportedLocales$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            localeListResolutionCallback!,
            [
              localeListResolutionCallback_locales$,
              localeListResolutionCallback_supportedLocales$,
            ],
            {},
          );
      Locale? localeResolutionCallbackProxy(
        Locale? localeResolutionCallback_locale$,
        Iterable localeResolutionCallback_supportedLocales$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            localeResolutionCallback!,
            [
              localeResolutionCallback_locale$,
              localeResolutionCallback_supportedLocales$,
            ],
            {},
          );
      String onGenerateTitleProxy(BuildContext onGenerateTitle_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onGenerateTitle!,
            [onGenerateTitle_context$],
            {},
          );
      return WidgetsApp.router(
        actions: actions == null ? null : Map.from(actions),
        backButtonDispatcher: backButtonDispatcher,
        builder: builder == null ? null : builderProxy,
        checkerboardOffscreenLayers: checkerboardOffscreenLayers ?? false,
        checkerboardRasterCacheImages: checkerboardRasterCacheImages ?? false,
        color: color,
        debugShowCheckedModeBanner: debugShowCheckedModeBanner ?? true,
        debugShowWidgetInspector: debugShowWidgetInspector ?? false,
        inspectorSelectButtonBuilder: inspectorSelectButtonBuilder == null
            ? null
            : inspectorSelectButtonBuilderProxy,
        key: key,
        locale: locale,
        localeListResolutionCallback: localeListResolutionCallback == null
            ? null
            : localeListResolutionCallbackProxy,
        localeResolutionCallback: localeResolutionCallback == null
            ? null
            : localeResolutionCallbackProxy,
        localizationsDelegates: localizationsDelegates == null
            ? null
            : Iterable.castFrom(localizationsDelegates),
        onGenerateTitle: onGenerateTitle == null ? null : onGenerateTitleProxy,
        restorationScopeId: restorationScopeId,
        routeInformationParser: routeInformationParser,
        routeInformationProvider: routeInformationProvider,
        routerConfig: routerConfig,
        routerDelegate: routerDelegate,
        shortcuts: shortcuts == null ? null : Map.from(shortcuts),
        showPerformanceOverlay: showPerformanceOverlay ?? false,
        showSemanticsDebugger: showSemanticsDebugger ?? false,
        supportedLocales: supportedLocales == null
            ? const <Locale>[Locale('en', 'US')]
            : Iterable.castFrom(supportedLocales),
        textStyle: textStyle,
        title: title ?? '',
        useInheritedMediaQuery: useInheritedMediaQuery ?? false,
      );
    };
Function _WidgetsApp_createState$(
  m.Scope scope$,
  WidgetsApp target$,
) =>
    target$.createState;
Function _basicLocaleListResolution$(m.Scope scope$) =>
    basicLocaleListResolution;
