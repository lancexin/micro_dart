// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/proxy_box.dart';
import 'dart:ui' show Color, Gradient, Image, ImageFilter;
import 'package:flutter/animation.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/semantics.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/rendering/layer.dart';
import 'package:flutter/src/rendering/layout_helper.dart';
import 'package:flutter/src/rendering/object.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/proxy_box.dart',
  {
    'RenderOpacity.visitChildrenForSemantics':
        _RenderOpacity_visitChildrenForSemantics$,
    'CustomClipper.addListener': _CustomClipper_addListener$,
    'CustomClipper.removeListener': _CustomClipper_removeListener$,
    'RenderIgnorePointer.visitChildrenForSemantics':
        _RenderIgnorePointer_visitChildrenForSemantics$,
    'RenderOffstage.visitChildrenForSemantics':
        _RenderOffstage_visitChildrenForSemantics$,
    'RenderAbsorbPointer.visitChildrenForSemantics':
        _RenderAbsorbPointer_visitChildrenForSemantics$,
    'RenderSemanticsAnnotations.visitChildrenForSemantics':
        _RenderSemanticsAnnotations_visitChildrenForSemantics$,
    'RenderExcludeSemantics.visitChildrenForSemantics':
        _RenderExcludeSemantics_visitChildrenForSemantics$,
    'HitTestBehavior.deferToChild': _HitTestBehavior_deferToChild$,
    'HitTestBehavior.opaque': _HitTestBehavior_opaque$,
    'HitTestBehavior.translucent': _HitTestBehavior_translucent$,
    'HitTestBehavior.values': _HitTestBehavior_values$,
    'DecorationPosition.background': _DecorationPosition_background$,
    'DecorationPosition.foreground': _DecorationPosition_foreground$,
    'DecorationPosition.values': _DecorationPosition_values$,
  },
  {},
  {
    'RenderProxyBox': m.ClassMirror(
      'RenderProxyBox',
      {
        '#as': RenderProxyBox_as$,
        '#is': RenderProxyBox_is$,
      },
      {},
    ),
    'RenderProxyBoxWithHitTestBehavior': m.ClassMirror(
      'RenderProxyBoxWithHitTestBehavior',
      {
        '#as': RenderProxyBoxWithHitTestBehavior_as$,
        '#is': RenderProxyBoxWithHitTestBehavior_is$,
        'behavior': _RenderProxyBoxWithHitTestBehavior_behavior$,
        'hitTest': _RenderProxyBoxWithHitTestBehavior_hitTest$,
        'hitTestSelf': _RenderProxyBoxWithHitTestBehavior_hitTestSelf$,
        'debugFillProperties':
            _RenderProxyBoxWithHitTestBehavior_debugFillProperties$,
      },
      {'behavior': _RenderProxyBoxWithHitTestBehavior_behavior_set$},
    ),
    'RenderConstrainedBox': m.ClassMirror(
      'RenderConstrainedBox',
      {
        '#as': RenderConstrainedBox_as$,
        '#is': RenderConstrainedBox_is$,
        'additionalConstraints': _RenderConstrainedBox_additionalConstraints$,
        'computeMinIntrinsicWidth':
            _RenderConstrainedBox_computeMinIntrinsicWidth$,
        'computeMaxIntrinsicWidth':
            _RenderConstrainedBox_computeMaxIntrinsicWidth$,
        'computeMinIntrinsicHeight':
            _RenderConstrainedBox_computeMinIntrinsicHeight$,
        'computeMaxIntrinsicHeight':
            _RenderConstrainedBox_computeMaxIntrinsicHeight$,
        'performLayout': _RenderConstrainedBox_performLayout$,
        'computeDryLayout': _RenderConstrainedBox_computeDryLayout$,
        'debugPaintSize': _RenderConstrainedBox_debugPaintSize$,
        'debugFillProperties': _RenderConstrainedBox_debugFillProperties$,
      },
      {
        'additionalConstraints':
            _RenderConstrainedBox_additionalConstraints_set$
      },
    ),
    'RenderLimitedBox': m.ClassMirror(
      'RenderLimitedBox',
      {
        '#as': RenderLimitedBox_as$,
        '#is': RenderLimitedBox_is$,
        'maxWidth': _RenderLimitedBox_maxWidth$,
        'maxHeight': _RenderLimitedBox_maxHeight$,
        'computeDryLayout': _RenderLimitedBox_computeDryLayout$,
        'performLayout': _RenderLimitedBox_performLayout$,
        'debugFillProperties': _RenderLimitedBox_debugFillProperties$,
      },
      {
        'maxWidth': _RenderLimitedBox_maxWidth_set$,
        'maxHeight': _RenderLimitedBox_maxHeight_set$,
      },
    ),
    'RenderAspectRatio': m.ClassMirror(
      'RenderAspectRatio',
      {
        '#as': RenderAspectRatio_as$,
        '#is': RenderAspectRatio_is$,
        'aspectRatio': _RenderAspectRatio_aspectRatio$,
        'computeMinIntrinsicWidth':
            _RenderAspectRatio_computeMinIntrinsicWidth$,
        'computeMaxIntrinsicWidth':
            _RenderAspectRatio_computeMaxIntrinsicWidth$,
        'computeMinIntrinsicHeight':
            _RenderAspectRatio_computeMinIntrinsicHeight$,
        'computeMaxIntrinsicHeight':
            _RenderAspectRatio_computeMaxIntrinsicHeight$,
        'computeDryLayout': _RenderAspectRatio_computeDryLayout$,
        'performLayout': _RenderAspectRatio_performLayout$,
        'debugFillProperties': _RenderAspectRatio_debugFillProperties$,
      },
      {'aspectRatio': _RenderAspectRatio_aspectRatio_set$},
    ),
    'RenderIntrinsicWidth': m.ClassMirror(
      'RenderIntrinsicWidth',
      {
        '#as': RenderIntrinsicWidth_as$,
        '#is': RenderIntrinsicWidth_is$,
        'stepWidth': _RenderIntrinsicWidth_stepWidth$,
        'stepHeight': _RenderIntrinsicWidth_stepHeight$,
        'computeMinIntrinsicWidth':
            _RenderIntrinsicWidth_computeMinIntrinsicWidth$,
        'computeMaxIntrinsicWidth':
            _RenderIntrinsicWidth_computeMaxIntrinsicWidth$,
        'computeMinIntrinsicHeight':
            _RenderIntrinsicWidth_computeMinIntrinsicHeight$,
        'computeMaxIntrinsicHeight':
            _RenderIntrinsicWidth_computeMaxIntrinsicHeight$,
        'computeDryLayout': _RenderIntrinsicWidth_computeDryLayout$,
        'performLayout': _RenderIntrinsicWidth_performLayout$,
        'debugFillProperties': _RenderIntrinsicWidth_debugFillProperties$,
      },
      {
        'stepWidth': _RenderIntrinsicWidth_stepWidth_set$,
        'stepHeight': _RenderIntrinsicWidth_stepHeight_set$,
      },
    ),
    'RenderIntrinsicHeight': m.ClassMirror(
      'RenderIntrinsicHeight',
      {
        '#as': RenderIntrinsicHeight_as$,
        '#is': RenderIntrinsicHeight_is$,
        'computeMinIntrinsicWidth':
            _RenderIntrinsicHeight_computeMinIntrinsicWidth$,
        'computeMaxIntrinsicWidth':
            _RenderIntrinsicHeight_computeMaxIntrinsicWidth$,
        'computeMinIntrinsicHeight':
            _RenderIntrinsicHeight_computeMinIntrinsicHeight$,
        'computeDryLayout': _RenderIntrinsicHeight_computeDryLayout$,
        'performLayout': _RenderIntrinsicHeight_performLayout$,
      },
      {},
    ),
    'RenderOpacity': m.ClassMirror(
      'RenderOpacity',
      {
        '#as': RenderOpacity_as$,
        '#is': RenderOpacity_is$,
        'alwaysNeedsCompositing': _RenderOpacity_alwaysNeedsCompositing$,
        'isRepaintBoundary': _RenderOpacity_isRepaintBoundary$,
        'opacity': _RenderOpacity_opacity$,
        'alwaysIncludeSemantics': _RenderOpacity_alwaysIncludeSemantics$,
        'paintsChild': _RenderOpacity_paintsChild$,
        'updateCompositedLayer': _RenderOpacity_updateCompositedLayer$,
        'paint': _RenderOpacity_paint$,
        'debugFillProperties': _RenderOpacity_debugFillProperties$,
      },
      {
        'opacity': _RenderOpacity_opacity_set$,
        'alwaysIncludeSemantics': _RenderOpacity_alwaysIncludeSemantics_set$,
      },
    ),
    'RenderAnimatedOpacity': m.ClassMirror(
      'RenderAnimatedOpacity',
      {
        '#as': RenderAnimatedOpacity_as$,
        '#is': RenderAnimatedOpacity_is$,
      },
      {},
    ),
    'RenderShaderMask': m.ClassMirror(
      'RenderShaderMask',
      {
        '#as': RenderShaderMask_as$,
        '#is': RenderShaderMask_is$,
        'layer': _RenderShaderMask_layer$,
        'shaderCallback': _RenderShaderMask_shaderCallback$,
        'blendMode': _RenderShaderMask_blendMode$,
        'alwaysNeedsCompositing': _RenderShaderMask_alwaysNeedsCompositing$,
        'paint': _RenderShaderMask_paint$,
      },
      {
        'shaderCallback': _RenderShaderMask_shaderCallback_set$,
        'blendMode': _RenderShaderMask_blendMode_set$,
      },
    ),
    'RenderBackdropFilter': m.ClassMirror(
      'RenderBackdropFilter',
      {
        '#as': RenderBackdropFilter_as$,
        '#is': RenderBackdropFilter_is$,
        'layer': _RenderBackdropFilter_layer$,
        'filter': _RenderBackdropFilter_filter$,
        'blendMode': _RenderBackdropFilter_blendMode$,
        'alwaysNeedsCompositing': _RenderBackdropFilter_alwaysNeedsCompositing$,
        'paint': _RenderBackdropFilter_paint$,
      },
      {
        'filter': _RenderBackdropFilter_filter_set$,
        'blendMode': _RenderBackdropFilter_blendMode_set$,
      },
    ),
    'CustomClipper': m.ClassMirror(
      'CustomClipper',
      {
        '#as': CustomClipper_as$,
        '#is': CustomClipper_is$,
        'getClip': _CustomClipper_getClip$,
        'getApproximateClipRect': _CustomClipper_getApproximateClipRect$,
        'shouldReclip': _CustomClipper_shouldReclip$,
        'toString': _CustomClipper_toString$,
      },
      {},
    ),
    'ShapeBorderClipper': m.ClassMirror(
      'ShapeBorderClipper',
      {
        '#as': ShapeBorderClipper_as$,
        '#is': ShapeBorderClipper_is$,
        'shape': _ShapeBorderClipper_shape$,
        'textDirection': _ShapeBorderClipper_textDirection$,
        'getClip': _ShapeBorderClipper_getClip$,
        'shouldReclip': _ShapeBorderClipper_shouldReclip$,
      },
      {},
    ),
    'RenderClipRect': m.ClassMirror(
      'RenderClipRect',
      {
        '#as': RenderClipRect_as$,
        '#is': RenderClipRect_is$,
        'hitTest': _RenderClipRect_hitTest$,
        'paint': _RenderClipRect_paint$,
        'debugPaintSize': _RenderClipRect_debugPaintSize$,
      },
      {},
    ),
    'RenderClipRRect': m.ClassMirror(
      'RenderClipRRect',
      {
        '#as': RenderClipRRect_as$,
        '#is': RenderClipRRect_is$,
        'borderRadius': _RenderClipRRect_borderRadius$,
        'textDirection': _RenderClipRRect_textDirection$,
        'hitTest': _RenderClipRRect_hitTest$,
        'paint': _RenderClipRRect_paint$,
        'debugPaintSize': _RenderClipRRect_debugPaintSize$,
      },
      {
        'borderRadius': _RenderClipRRect_borderRadius_set$,
        'textDirection': _RenderClipRRect_textDirection_set$,
      },
    ),
    'RenderClipOval': m.ClassMirror(
      'RenderClipOval',
      {
        '#as': RenderClipOval_as$,
        '#is': RenderClipOval_is$,
        'hitTest': _RenderClipOval_hitTest$,
        'paint': _RenderClipOval_paint$,
        'debugPaintSize': _RenderClipOval_debugPaintSize$,
      },
      {},
    ),
    'RenderClipPath': m.ClassMirror(
      'RenderClipPath',
      {
        '#as': RenderClipPath_as$,
        '#is': RenderClipPath_is$,
        'hitTest': _RenderClipPath_hitTest$,
        'paint': _RenderClipPath_paint$,
        'debugPaintSize': _RenderClipPath_debugPaintSize$,
      },
      {},
    ),
    'RenderPhysicalModel': m.ClassMirror(
      'RenderPhysicalModel',
      {
        '#as': RenderPhysicalModel_as$,
        '#is': RenderPhysicalModel_is$,
        'shape': _RenderPhysicalModel_shape$,
        'borderRadius': _RenderPhysicalModel_borderRadius$,
        'hitTest': _RenderPhysicalModel_hitTest$,
        'paint': _RenderPhysicalModel_paint$,
        'debugFillProperties': _RenderPhysicalModel_debugFillProperties$,
      },
      {
        'shape': _RenderPhysicalModel_shape_set$,
        'borderRadius': _RenderPhysicalModel_borderRadius_set$,
      },
    ),
    'RenderPhysicalShape': m.ClassMirror(
      'RenderPhysicalShape',
      {
        '#as': RenderPhysicalShape_as$,
        '#is': RenderPhysicalShape_is$,
        'hitTest': _RenderPhysicalShape_hitTest$,
        'paint': _RenderPhysicalShape_paint$,
        'debugFillProperties': _RenderPhysicalShape_debugFillProperties$,
      },
      {},
    ),
    'RenderDecoratedBox': m.ClassMirror(
      'RenderDecoratedBox',
      {
        '#as': RenderDecoratedBox_as$,
        '#is': RenderDecoratedBox_is$,
        'decoration': _RenderDecoratedBox_decoration$,
        'position': _RenderDecoratedBox_position$,
        'configuration': _RenderDecoratedBox_configuration$,
        'detach': _RenderDecoratedBox_detach$,
        'hitTestSelf': _RenderDecoratedBox_hitTestSelf$,
        'paint': _RenderDecoratedBox_paint$,
        'debugFillProperties': _RenderDecoratedBox_debugFillProperties$,
      },
      {
        'decoration': _RenderDecoratedBox_decoration_set$,
        'position': _RenderDecoratedBox_position_set$,
        'configuration': _RenderDecoratedBox_configuration_set$,
      },
    ),
    'RenderTransform': m.ClassMirror(
      'RenderTransform',
      {
        '#as': RenderTransform_as$,
        '#is': RenderTransform_is$,
        'transformHitTests': _RenderTransform_transformHitTests$,
        'origin': _RenderTransform_origin$,
        'alignment': _RenderTransform_alignment$,
        'textDirection': _RenderTransform_textDirection$,
        'alwaysNeedsCompositing': _RenderTransform_alwaysNeedsCompositing$,
        'filterQuality': _RenderTransform_filterQuality$,
        'setIdentity': _RenderTransform_setIdentity$,
        'rotateX': _RenderTransform_rotateX$,
        'rotateY': _RenderTransform_rotateY$,
        'rotateZ': _RenderTransform_rotateZ$,
        'translate': _RenderTransform_translate$,
        'scale': _RenderTransform_scale$,
        'hitTest': _RenderTransform_hitTest$,
        'hitTestChildren': _RenderTransform_hitTestChildren$,
        'paint': _RenderTransform_paint$,
        'applyPaintTransform': _RenderTransform_applyPaintTransform$,
        'debugFillProperties': _RenderTransform_debugFillProperties$,
      },
      {
        'transformHitTests': _RenderTransform_transformHitTests_set$,
        'origin': _RenderTransform_origin_set$,
        'alignment': _RenderTransform_alignment_set$,
        'textDirection': _RenderTransform_textDirection_set$,
        'transform': _RenderTransform_transform_set$,
        'filterQuality': _RenderTransform_filterQuality_set$,
      },
    ),
    'RenderFittedBox': m.ClassMirror(
      'RenderFittedBox',
      {
        '#as': RenderFittedBox_as$,
        '#is': RenderFittedBox_is$,
        'fit': _RenderFittedBox_fit$,
        'alignment': _RenderFittedBox_alignment$,
        'textDirection': _RenderFittedBox_textDirection$,
        'clipBehavior': _RenderFittedBox_clipBehavior$,
        'computeDryLayout': _RenderFittedBox_computeDryLayout$,
        'performLayout': _RenderFittedBox_performLayout$,
        'paint': _RenderFittedBox_paint$,
        'hitTestChildren': _RenderFittedBox_hitTestChildren$,
        'paintsChild': _RenderFittedBox_paintsChild$,
        'applyPaintTransform': _RenderFittedBox_applyPaintTransform$,
        'debugFillProperties': _RenderFittedBox_debugFillProperties$,
      },
      {
        'fit': _RenderFittedBox_fit_set$,
        'alignment': _RenderFittedBox_alignment_set$,
        'textDirection': _RenderFittedBox_textDirection_set$,
        'clipBehavior': _RenderFittedBox_clipBehavior_set$,
      },
    ),
    'RenderFractionalTranslation': m.ClassMirror(
      'RenderFractionalTranslation',
      {
        '#as': RenderFractionalTranslation_as$,
        '#is': RenderFractionalTranslation_is$,
        'transformHitTests': _RenderFractionalTranslation_transformHitTests$,
        'translation': _RenderFractionalTranslation_translation$,
        'hitTest': _RenderFractionalTranslation_hitTest$,
        'hitTestChildren': _RenderFractionalTranslation_hitTestChildren$,
        'paint': _RenderFractionalTranslation_paint$,
        'applyPaintTransform':
            _RenderFractionalTranslation_applyPaintTransform$,
        'debugFillProperties':
            _RenderFractionalTranslation_debugFillProperties$,
      },
      {
        'transformHitTests':
            _RenderFractionalTranslation_transformHitTests_set$,
        'translation': _RenderFractionalTranslation_translation_set$,
      },
    ),
    'RenderPointerListener': m.ClassMirror(
      'RenderPointerListener',
      {
        '#as': RenderPointerListener_as$,
        '#is': RenderPointerListener_is$,
        'onPointerDown': _RenderPointerListener_onPointerDown$,
        'onPointerMove': _RenderPointerListener_onPointerMove$,
        'onPointerUp': _RenderPointerListener_onPointerUp$,
        'onPointerHover': _RenderPointerListener_onPointerHover$,
        'onPointerCancel': _RenderPointerListener_onPointerCancel$,
        'onPointerPanZoomStart': _RenderPointerListener_onPointerPanZoomStart$,
        'onPointerPanZoomUpdate':
            _RenderPointerListener_onPointerPanZoomUpdate$,
        'onPointerPanZoomEnd': _RenderPointerListener_onPointerPanZoomEnd$,
        'onPointerSignal': _RenderPointerListener_onPointerSignal$,
        'computeSizeForNoChild': _RenderPointerListener_computeSizeForNoChild$,
        'handleEvent': _RenderPointerListener_handleEvent$,
        'debugFillProperties': _RenderPointerListener_debugFillProperties$,
      },
      {
        'onPointerDown': _RenderPointerListener_onPointerDown_set$,
        'onPointerMove': _RenderPointerListener_onPointerMove_set$,
        'onPointerUp': _RenderPointerListener_onPointerUp_set$,
        'onPointerHover': _RenderPointerListener_onPointerHover_set$,
        'onPointerCancel': _RenderPointerListener_onPointerCancel_set$,
        'onPointerPanZoomStart':
            _RenderPointerListener_onPointerPanZoomStart_set$,
        'onPointerPanZoomUpdate':
            _RenderPointerListener_onPointerPanZoomUpdate_set$,
        'onPointerPanZoomEnd': _RenderPointerListener_onPointerPanZoomEnd_set$,
        'onPointerSignal': _RenderPointerListener_onPointerSignal_set$,
      },
    ),
    'RenderMouseRegion': m.ClassMirror(
      'RenderMouseRegion',
      {
        '#as': RenderMouseRegion_as$,
        '#is': RenderMouseRegion_is$,
        'onEnter': _RenderMouseRegion_onEnter$,
        'onHover': _RenderMouseRegion_onHover$,
        'onExit': _RenderMouseRegion_onExit$,
        'opaque': _RenderMouseRegion_opaque$,
        'hitTestBehavior': _RenderMouseRegion_hitTestBehavior$,
        'cursor': _RenderMouseRegion_cursor$,
        'validForMouseTracker': _RenderMouseRegion_validForMouseTracker$,
        'hitTest': _RenderMouseRegion_hitTest$,
        'handleEvent': _RenderMouseRegion_handleEvent$,
        'attach': _RenderMouseRegion_attach$,
        'detach': _RenderMouseRegion_detach$,
        'computeSizeForNoChild': _RenderMouseRegion_computeSizeForNoChild$,
        'debugFillProperties': _RenderMouseRegion_debugFillProperties$,
      },
      {
        'onEnter': _RenderMouseRegion_onEnter_set$,
        'onHover': _RenderMouseRegion_onHover_set$,
        'onExit': _RenderMouseRegion_onExit_set$,
        'opaque': _RenderMouseRegion_opaque_set$,
        'hitTestBehavior': _RenderMouseRegion_hitTestBehavior_set$,
        'cursor': _RenderMouseRegion_cursor_set$,
      },
    ),
    'RenderRepaintBoundary': m.ClassMirror(
      'RenderRepaintBoundary',
      {
        '#as': RenderRepaintBoundary_as$,
        '#is': RenderRepaintBoundary_is$,
        'isRepaintBoundary': _RenderRepaintBoundary_isRepaintBoundary$,
        'debugSymmetricPaintCount':
            _RenderRepaintBoundary_debugSymmetricPaintCount$,
        'debugAsymmetricPaintCount':
            _RenderRepaintBoundary_debugAsymmetricPaintCount$,
        'toImage': _RenderRepaintBoundary_toImage$,
        'toImageSync': _RenderRepaintBoundary_toImageSync$,
        'debugResetMetrics': _RenderRepaintBoundary_debugResetMetrics$,
        'debugRegisterRepaintBoundaryPaint':
            _RenderRepaintBoundary_debugRegisterRepaintBoundaryPaint$,
        'debugFillProperties': _RenderRepaintBoundary_debugFillProperties$,
      },
      {},
    ),
    'RenderIgnorePointer': m.ClassMirror(
      'RenderIgnorePointer',
      {
        '#as': RenderIgnorePointer_as$,
        '#is': RenderIgnorePointer_is$,
        'ignoring': _RenderIgnorePointer_ignoring$,
        'ignoringSemantics': _RenderIgnorePointer_ignoringSemantics$,
        'hitTest': _RenderIgnorePointer_hitTest$,
        'debugFillProperties': _RenderIgnorePointer_debugFillProperties$,
      },
      {
        'ignoring': _RenderIgnorePointer_ignoring_set$,
        'ignoringSemantics': _RenderIgnorePointer_ignoringSemantics_set$,
      },
    ),
    'RenderOffstage': m.ClassMirror(
      'RenderOffstage',
      {
        '#as': RenderOffstage_as$,
        '#is': RenderOffstage_is$,
        'offstage': _RenderOffstage_offstage$,
        'sizedByParent': _RenderOffstage_sizedByParent$,
        'computeMinIntrinsicWidth': _RenderOffstage_computeMinIntrinsicWidth$,
        'computeMaxIntrinsicWidth': _RenderOffstage_computeMaxIntrinsicWidth$,
        'computeMinIntrinsicHeight': _RenderOffstage_computeMinIntrinsicHeight$,
        'computeMaxIntrinsicHeight': _RenderOffstage_computeMaxIntrinsicHeight$,
        'computeDistanceToActualBaseline':
            _RenderOffstage_computeDistanceToActualBaseline$,
        'computeDryLayout': _RenderOffstage_computeDryLayout$,
        'performResize': _RenderOffstage_performResize$,
        'performLayout': _RenderOffstage_performLayout$,
        'hitTest': _RenderOffstage_hitTest$,
        'paintsChild': _RenderOffstage_paintsChild$,
        'paint': _RenderOffstage_paint$,
        'debugFillProperties': _RenderOffstage_debugFillProperties$,
        'debugDescribeChildren': _RenderOffstage_debugDescribeChildren$,
      },
      {'offstage': _RenderOffstage_offstage_set$},
    ),
    'RenderAbsorbPointer': m.ClassMirror(
      'RenderAbsorbPointer',
      {
        '#as': RenderAbsorbPointer_as$,
        '#is': RenderAbsorbPointer_is$,
        'absorbing': _RenderAbsorbPointer_absorbing$,
        'ignoringSemantics': _RenderAbsorbPointer_ignoringSemantics$,
        'hitTest': _RenderAbsorbPointer_hitTest$,
        'debugFillProperties': _RenderAbsorbPointer_debugFillProperties$,
      },
      {
        'absorbing': _RenderAbsorbPointer_absorbing_set$,
        'ignoringSemantics': _RenderAbsorbPointer_ignoringSemantics_set$,
      },
    ),
    'RenderMetaData': m.ClassMirror(
      'RenderMetaData',
      {
        '#as': RenderMetaData_as$,
        '#is': RenderMetaData_is$,
        'metaData': _RenderMetaData_metaData$,
        'debugFillProperties': _RenderMetaData_debugFillProperties$,
      },
      {'metaData': _RenderMetaData_metaData_set$},
    ),
    'RenderSemanticsGestureHandler': m.ClassMirror(
      'RenderSemanticsGestureHandler',
      {
        '#as': RenderSemanticsGestureHandler_as$,
        '#is': RenderSemanticsGestureHandler_is$,
        'scrollFactor': _RenderSemanticsGestureHandler_scrollFactor$,
        'validActions': _RenderSemanticsGestureHandler_validActions$,
        'onTap': _RenderSemanticsGestureHandler_onTap$,
        'onLongPress': _RenderSemanticsGestureHandler_onLongPress$,
        'onHorizontalDragUpdate':
            _RenderSemanticsGestureHandler_onHorizontalDragUpdate$,
        'onVerticalDragUpdate':
            _RenderSemanticsGestureHandler_onVerticalDragUpdate$,
        'describeSemanticsConfiguration':
            _RenderSemanticsGestureHandler_describeSemanticsConfiguration$,
        'debugFillProperties':
            _RenderSemanticsGestureHandler_debugFillProperties$,
      },
      {
        'scrollFactor': _RenderSemanticsGestureHandler_scrollFactor_set$,
        'validActions': _RenderSemanticsGestureHandler_validActions_set$,
        'onTap': _RenderSemanticsGestureHandler_onTap_set$,
        'onLongPress': _RenderSemanticsGestureHandler_onLongPress_set$,
        'onHorizontalDragUpdate':
            _RenderSemanticsGestureHandler_onHorizontalDragUpdate_set$,
        'onVerticalDragUpdate':
            _RenderSemanticsGestureHandler_onVerticalDragUpdate_set$,
      },
    ),
    'RenderSemanticsAnnotations': m.ClassMirror(
      'RenderSemanticsAnnotations',
      {
        '#as': RenderSemanticsAnnotations_as$,
        '#is': RenderSemanticsAnnotations_is$,
        'properties': _RenderSemanticsAnnotations_properties$,
        'container': _RenderSemanticsAnnotations_container$,
        'explicitChildNodes': _RenderSemanticsAnnotations_explicitChildNodes$,
        'excludeSemantics': _RenderSemanticsAnnotations_excludeSemantics$,
        'textDirection': _RenderSemanticsAnnotations_textDirection$,
        'describeSemanticsConfiguration':
            _RenderSemanticsAnnotations_describeSemanticsConfiguration$,
      },
      {
        'properties': _RenderSemanticsAnnotations_properties_set$,
        'container': _RenderSemanticsAnnotations_container_set$,
        'explicitChildNodes':
            _RenderSemanticsAnnotations_explicitChildNodes_set$,
        'excludeSemantics': _RenderSemanticsAnnotations_excludeSemantics_set$,
        'textDirection': _RenderSemanticsAnnotations_textDirection_set$,
      },
    ),
    'RenderBlockSemantics': m.ClassMirror(
      'RenderBlockSemantics',
      {
        '#as': RenderBlockSemantics_as$,
        '#is': RenderBlockSemantics_is$,
        'blocking': _RenderBlockSemantics_blocking$,
        'describeSemanticsConfiguration':
            _RenderBlockSemantics_describeSemanticsConfiguration$,
        'debugFillProperties': _RenderBlockSemantics_debugFillProperties$,
      },
      {'blocking': _RenderBlockSemantics_blocking_set$},
    ),
    'RenderMergeSemantics': m.ClassMirror(
      'RenderMergeSemantics',
      {
        '#as': RenderMergeSemantics_as$,
        '#is': RenderMergeSemantics_is$,
        'describeSemanticsConfiguration':
            _RenderMergeSemantics_describeSemanticsConfiguration$,
      },
      {},
    ),
    'RenderExcludeSemantics': m.ClassMirror(
      'RenderExcludeSemantics',
      {
        '#as': RenderExcludeSemantics_as$,
        '#is': RenderExcludeSemantics_is$,
        'excluding': _RenderExcludeSemantics_excluding$,
        'debugFillProperties': _RenderExcludeSemantics_debugFillProperties$,
      },
      {'excluding': _RenderExcludeSemantics_excluding_set$},
    ),
    'RenderIndexedSemantics': m.ClassMirror(
      'RenderIndexedSemantics',
      {
        '#as': RenderIndexedSemantics_as$,
        '#is': RenderIndexedSemantics_is$,
        'index': _RenderIndexedSemantics_index$,
        'describeSemanticsConfiguration':
            _RenderIndexedSemantics_describeSemanticsConfiguration$,
        'debugFillProperties': _RenderIndexedSemantics_debugFillProperties$,
      },
      {'index': _RenderIndexedSemantics_index_set$},
    ),
    'RenderLeaderLayer': m.ClassMirror(
      'RenderLeaderLayer',
      {
        '#as': RenderLeaderLayer_as$,
        '#is': RenderLeaderLayer_is$,
        'link': _RenderLeaderLayer_link$,
        'alwaysNeedsCompositing': _RenderLeaderLayer_alwaysNeedsCompositing$,
        'performLayout': _RenderLeaderLayer_performLayout$,
        'paint': _RenderLeaderLayer_paint$,
        'debugFillProperties': _RenderLeaderLayer_debugFillProperties$,
      },
      {'link': _RenderLeaderLayer_link_set$},
    ),
    'RenderFollowerLayer': m.ClassMirror(
      'RenderFollowerLayer',
      {
        '#as': RenderFollowerLayer_as$,
        '#is': RenderFollowerLayer_is$,
        'link': _RenderFollowerLayer_link$,
        'showWhenUnlinked': _RenderFollowerLayer_showWhenUnlinked$,
        'offset': _RenderFollowerLayer_offset$,
        'leaderAnchor': _RenderFollowerLayer_leaderAnchor$,
        'followerAnchor': _RenderFollowerLayer_followerAnchor$,
        'alwaysNeedsCompositing': _RenderFollowerLayer_alwaysNeedsCompositing$,
        'layer': _RenderFollowerLayer_layer$,
        'detach': _RenderFollowerLayer_detach$,
        'getCurrentTransform': _RenderFollowerLayer_getCurrentTransform$,
        'hitTest': _RenderFollowerLayer_hitTest$,
        'hitTestChildren': _RenderFollowerLayer_hitTestChildren$,
        'paint': _RenderFollowerLayer_paint$,
        'applyPaintTransform': _RenderFollowerLayer_applyPaintTransform$,
        'debugFillProperties': _RenderFollowerLayer_debugFillProperties$,
      },
      {
        'link': _RenderFollowerLayer_link_set$,
        'showWhenUnlinked': _RenderFollowerLayer_showWhenUnlinked_set$,
        'offset': _RenderFollowerLayer_offset_set$,
        'leaderAnchor': _RenderFollowerLayer_leaderAnchor_set$,
        'followerAnchor': _RenderFollowerLayer_followerAnchor_set$,
      },
    ),
    'RenderAnnotatedRegion': m.ClassMirror(
      'RenderAnnotatedRegion',
      {
        '#as': RenderAnnotatedRegion_as$,
        '#is': RenderAnnotatedRegion_is$,
        'alwaysNeedsCompositing':
            _RenderAnnotatedRegion_alwaysNeedsCompositing$,
        'value': _RenderAnnotatedRegion_value$,
        'sized': _RenderAnnotatedRegion_sized$,
        'paint': _RenderAnnotatedRegion_paint$,
      },
      {
        'value': _RenderAnnotatedRegion_value_set$,
        'sized': _RenderAnnotatedRegion_sized_set$,
      },
    ),
    'HitTestBehavior': m.ClassMirror(
      'HitTestBehavior',
      {},
      {},
    ),
    'DecorationPosition': m.ClassMirror(
      'DecorationPosition',
      {},
      {},
    ),
  },
);
Function RenderProxyBox_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderProxyBox;
Function RenderProxyBox_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderProxyBox;
Function RenderProxyBoxWithHitTestBehavior_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderProxyBoxWithHitTestBehavior;
Function RenderProxyBoxWithHitTestBehavior_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderProxyBoxWithHitTestBehavior;
HitTestBehavior _RenderProxyBoxWithHitTestBehavior_behavior$(
    RenderProxyBoxWithHitTestBehavior target) {
  return target.behavior;
}

void _RenderProxyBoxWithHitTestBehavior_behavior_set$(
  RenderProxyBoxWithHitTestBehavior target,
  HitTestBehavior other,
) {
  target.behavior = other;
}

Function _RenderProxyBoxWithHitTestBehavior_hitTest$(
  m.Scope scope,
  RenderProxyBoxWithHitTestBehavior target,
) =>
    target.hitTest;
Function _RenderProxyBoxWithHitTestBehavior_hitTestSelf$(
  m.Scope scope,
  RenderProxyBoxWithHitTestBehavior target,
) =>
    target.hitTestSelf;
Function _RenderProxyBoxWithHitTestBehavior_debugFillProperties$(
  m.Scope scope,
  RenderProxyBoxWithHitTestBehavior target,
) =>
    target.debugFillProperties;
Function RenderConstrainedBox_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderConstrainedBox;
Function RenderConstrainedBox_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderConstrainedBox;
BoxConstraints _RenderConstrainedBox_additionalConstraints$(
    RenderConstrainedBox target) {
  return target.additionalConstraints;
}

void _RenderConstrainedBox_additionalConstraints_set$(
  RenderConstrainedBox target,
  BoxConstraints other,
) {
  target.additionalConstraints = other;
}

Function _RenderConstrainedBox_computeMinIntrinsicWidth$(
  m.Scope scope,
  RenderConstrainedBox target,
) =>
    target.computeMinIntrinsicWidth;
Function _RenderConstrainedBox_computeMaxIntrinsicWidth$(
  m.Scope scope,
  RenderConstrainedBox target,
) =>
    target.computeMaxIntrinsicWidth;
Function _RenderConstrainedBox_computeMinIntrinsicHeight$(
  m.Scope scope,
  RenderConstrainedBox target,
) =>
    target.computeMinIntrinsicHeight;
Function _RenderConstrainedBox_computeMaxIntrinsicHeight$(
  m.Scope scope,
  RenderConstrainedBox target,
) =>
    target.computeMaxIntrinsicHeight;
Function _RenderConstrainedBox_performLayout$(
  m.Scope scope,
  RenderConstrainedBox target,
) =>
    target.performLayout;
Function _RenderConstrainedBox_computeDryLayout$(
  m.Scope scope,
  RenderConstrainedBox target,
) =>
    target.computeDryLayout;
Function _RenderConstrainedBox_debugPaintSize$(
  m.Scope scope,
  RenderConstrainedBox target,
) =>
    target.debugPaintSize;
Function _RenderConstrainedBox_debugFillProperties$(
  m.Scope scope,
  RenderConstrainedBox target,
) =>
    target.debugFillProperties;
Function RenderLimitedBox_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderLimitedBox;
Function RenderLimitedBox_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderLimitedBox;
double _RenderLimitedBox_maxWidth$(RenderLimitedBox target) {
  return target.maxWidth;
}

void _RenderLimitedBox_maxWidth_set$(
  RenderLimitedBox target,
  double other,
) {
  target.maxWidth = other;
}

double _RenderLimitedBox_maxHeight$(RenderLimitedBox target) {
  return target.maxHeight;
}

void _RenderLimitedBox_maxHeight_set$(
  RenderLimitedBox target,
  double other,
) {
  target.maxHeight = other;
}

Function _RenderLimitedBox_computeDryLayout$(
  m.Scope scope,
  RenderLimitedBox target,
) =>
    target.computeDryLayout;
Function _RenderLimitedBox_performLayout$(
  m.Scope scope,
  RenderLimitedBox target,
) =>
    target.performLayout;
Function _RenderLimitedBox_debugFillProperties$(
  m.Scope scope,
  RenderLimitedBox target,
) =>
    target.debugFillProperties;
Function RenderAspectRatio_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderAspectRatio;
Function RenderAspectRatio_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderAspectRatio;
double _RenderAspectRatio_aspectRatio$(RenderAspectRatio target) {
  return target.aspectRatio;
}

void _RenderAspectRatio_aspectRatio_set$(
  RenderAspectRatio target,
  double other,
) {
  target.aspectRatio = other;
}

Function _RenderAspectRatio_computeMinIntrinsicWidth$(
  m.Scope scope,
  RenderAspectRatio target,
) =>
    target.computeMinIntrinsicWidth;
Function _RenderAspectRatio_computeMaxIntrinsicWidth$(
  m.Scope scope,
  RenderAspectRatio target,
) =>
    target.computeMaxIntrinsicWidth;
Function _RenderAspectRatio_computeMinIntrinsicHeight$(
  m.Scope scope,
  RenderAspectRatio target,
) =>
    target.computeMinIntrinsicHeight;
Function _RenderAspectRatio_computeMaxIntrinsicHeight$(
  m.Scope scope,
  RenderAspectRatio target,
) =>
    target.computeMaxIntrinsicHeight;
Function _RenderAspectRatio_computeDryLayout$(
  m.Scope scope,
  RenderAspectRatio target,
) =>
    target.computeDryLayout;
Function _RenderAspectRatio_performLayout$(
  m.Scope scope,
  RenderAspectRatio target,
) =>
    target.performLayout;
Function _RenderAspectRatio_debugFillProperties$(
  m.Scope scope,
  RenderAspectRatio target,
) =>
    target.debugFillProperties;
Function RenderIntrinsicWidth_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderIntrinsicWidth;
Function RenderIntrinsicWidth_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderIntrinsicWidth;
double? _RenderIntrinsicWidth_stepWidth$(RenderIntrinsicWidth target) {
  return target.stepWidth;
}

void _RenderIntrinsicWidth_stepWidth_set$(
  RenderIntrinsicWidth target,
  double? other,
) {
  target.stepWidth = other;
}

double? _RenderIntrinsicWidth_stepHeight$(RenderIntrinsicWidth target) {
  return target.stepHeight;
}

void _RenderIntrinsicWidth_stepHeight_set$(
  RenderIntrinsicWidth target,
  double? other,
) {
  target.stepHeight = other;
}

Function _RenderIntrinsicWidth_computeMinIntrinsicWidth$(
  m.Scope scope,
  RenderIntrinsicWidth target,
) =>
    target.computeMinIntrinsicWidth;
Function _RenderIntrinsicWidth_computeMaxIntrinsicWidth$(
  m.Scope scope,
  RenderIntrinsicWidth target,
) =>
    target.computeMaxIntrinsicWidth;
Function _RenderIntrinsicWidth_computeMinIntrinsicHeight$(
  m.Scope scope,
  RenderIntrinsicWidth target,
) =>
    target.computeMinIntrinsicHeight;
Function _RenderIntrinsicWidth_computeMaxIntrinsicHeight$(
  m.Scope scope,
  RenderIntrinsicWidth target,
) =>
    target.computeMaxIntrinsicHeight;
Function _RenderIntrinsicWidth_computeDryLayout$(
  m.Scope scope,
  RenderIntrinsicWidth target,
) =>
    target.computeDryLayout;
Function _RenderIntrinsicWidth_performLayout$(
  m.Scope scope,
  RenderIntrinsicWidth target,
) =>
    target.performLayout;
Function _RenderIntrinsicWidth_debugFillProperties$(
  m.Scope scope,
  RenderIntrinsicWidth target,
) =>
    target.debugFillProperties;
Function RenderIntrinsicHeight_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderIntrinsicHeight;
Function RenderIntrinsicHeight_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderIntrinsicHeight;
Function _RenderIntrinsicHeight_computeMinIntrinsicWidth$(
  m.Scope scope,
  RenderIntrinsicHeight target,
) =>
    target.computeMinIntrinsicWidth;
Function _RenderIntrinsicHeight_computeMaxIntrinsicWidth$(
  m.Scope scope,
  RenderIntrinsicHeight target,
) =>
    target.computeMaxIntrinsicWidth;
Function _RenderIntrinsicHeight_computeMinIntrinsicHeight$(
  m.Scope scope,
  RenderIntrinsicHeight target,
) =>
    target.computeMinIntrinsicHeight;
Function _RenderIntrinsicHeight_computeDryLayout$(
  m.Scope scope,
  RenderIntrinsicHeight target,
) =>
    target.computeDryLayout;
Function _RenderIntrinsicHeight_performLayout$(
  m.Scope scope,
  RenderIntrinsicHeight target,
) =>
    target.performLayout;
Function RenderOpacity_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderOpacity;
Function RenderOpacity_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderOpacity;
bool _RenderOpacity_alwaysNeedsCompositing$(RenderOpacity target) {
  return target.alwaysNeedsCompositing;
}

bool _RenderOpacity_isRepaintBoundary$(RenderOpacity target) {
  return target.isRepaintBoundary;
}

double _RenderOpacity_opacity$(RenderOpacity target) {
  return target.opacity;
}

void _RenderOpacity_opacity_set$(
  RenderOpacity target,
  double other,
) {
  target.opacity = other;
}

bool _RenderOpacity_alwaysIncludeSemantics$(RenderOpacity target) {
  return target.alwaysIncludeSemantics;
}

void _RenderOpacity_alwaysIncludeSemantics_set$(
  RenderOpacity target,
  bool other,
) {
  target.alwaysIncludeSemantics = other;
}

Function _RenderOpacity_paintsChild$(
  m.Scope scope,
  RenderOpacity target,
) =>
    target.paintsChild;
Function _RenderOpacity_updateCompositedLayer$(
  m.Scope scope,
  RenderOpacity target,
) =>
    target.updateCompositedLayer;
Function _RenderOpacity_paint$(
  m.Scope scope,
  RenderOpacity target,
) =>
    target.paint;
Function _RenderOpacity_visitChildrenForSemantics$(
  m.Scope scope,
  RenderOpacity target,
) =>
    (m.FunctionPointer visitor) {
      void visitorProxy(RenderObject visitor_child) =>
          scope.engine.callFunctionPointer(
            scope,
            visitor,
            [visitor_child],
            {},
          );
      target.visitChildrenForSemantics(visitorProxy);
    };
Function _RenderOpacity_debugFillProperties$(
  m.Scope scope,
  RenderOpacity target,
) =>
    target.debugFillProperties;
Function RenderAnimatedOpacity_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderAnimatedOpacity;
Function RenderAnimatedOpacity_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderAnimatedOpacity;
Function RenderShaderMask_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderShaderMask;
Function RenderShaderMask_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderShaderMask;
ShaderMaskLayer? _RenderShaderMask_layer$(RenderShaderMask target) {
  return target.layer;
}

Shader Function(Rect) _RenderShaderMask_shaderCallback$(
    RenderShaderMask target) {
  return target.shaderCallback;
}

Function _RenderShaderMask_shaderCallback_set$(
  m.Scope scope,
  RenderShaderMask target,
) =>
    (m.FunctionPointer value) {
      Shader valueProxy(Rect value_bounds) => scope.engine.callFunctionPointer(
            scope,
            value,
            [value_bounds],
            {},
          );
      target.shaderCallback = (valueProxy);
    };
BlendMode _RenderShaderMask_blendMode$(RenderShaderMask target) {
  return target.blendMode;
}

void _RenderShaderMask_blendMode_set$(
  RenderShaderMask target,
  BlendMode other,
) {
  target.blendMode = other;
}

bool _RenderShaderMask_alwaysNeedsCompositing$(RenderShaderMask target) {
  return target.alwaysNeedsCompositing;
}

Function _RenderShaderMask_paint$(
  m.Scope scope,
  RenderShaderMask target,
) =>
    target.paint;
Function RenderBackdropFilter_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderBackdropFilter;
Function RenderBackdropFilter_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderBackdropFilter;
BackdropFilterLayer? _RenderBackdropFilter_layer$(RenderBackdropFilter target) {
  return target.layer;
}

ImageFilter _RenderBackdropFilter_filter$(RenderBackdropFilter target) {
  return target.filter;
}

void _RenderBackdropFilter_filter_set$(
  RenderBackdropFilter target,
  ImageFilter other,
) {
  target.filter = other;
}

BlendMode _RenderBackdropFilter_blendMode$(RenderBackdropFilter target) {
  return target.blendMode;
}

void _RenderBackdropFilter_blendMode_set$(
  RenderBackdropFilter target,
  BlendMode other,
) {
  target.blendMode = other;
}

bool _RenderBackdropFilter_alwaysNeedsCompositing$(
    RenderBackdropFilter target) {
  return target.alwaysNeedsCompositing;
}

Function _RenderBackdropFilter_paint$(
  m.Scope scope,
  RenderBackdropFilter target,
) =>
    target.paint;
Function CustomClipper_as$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CustomClipper<T>;
Function CustomClipper_is$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CustomClipper<T>;
Function _CustomClipper_addListener$<T>(
  m.Scope scope,
  CustomClipper<T> target,
) =>
    (m.FunctionPointer listener) {
      void listenerProxy() => scope.engine.callFunctionPointer(
            scope,
            listener,
            [],
            {},
          );
      target.addListener(listenerProxy);
    };
Function _CustomClipper_removeListener$<T>(
  m.Scope scope,
  CustomClipper<T> target,
) =>
    (m.FunctionPointer listener) {
      void listenerProxy() => scope.engine.callFunctionPointer(
            scope,
            listener,
            [],
            {},
          );
      target.removeListener(listenerProxy);
    };
Function _CustomClipper_getClip$<T>(
  m.Scope scope,
  CustomClipper<T> target,
) =>
    target.getClip;
Function _CustomClipper_getApproximateClipRect$<T>(
  m.Scope scope,
  CustomClipper<T> target,
) =>
    target.getApproximateClipRect;
Function _CustomClipper_shouldReclip$<T>(
  m.Scope scope,
  CustomClipper<T> target,
) =>
    target.shouldReclip;
Function _CustomClipper_toString$<T>(
  m.Scope scope,
  CustomClipper<T> target,
) =>
    target.toString;
Function ShapeBorderClipper_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ShapeBorderClipper;
Function ShapeBorderClipper_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ShapeBorderClipper;
ShapeBorder _ShapeBorderClipper_shape$(ShapeBorderClipper target) {
  return target.shape;
}

TextDirection? _ShapeBorderClipper_textDirection$(ShapeBorderClipper target) {
  return target.textDirection;
}

Function _ShapeBorderClipper_getClip$(
  m.Scope scope,
  ShapeBorderClipper target,
) =>
    target.getClip;
Function _ShapeBorderClipper_shouldReclip$(
  m.Scope scope,
  ShapeBorderClipper target,
) =>
    target.shouldReclip;
Function RenderClipRect_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderClipRect;
Function RenderClipRect_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderClipRect;
Function _RenderClipRect_hitTest$(
  m.Scope scope,
  RenderClipRect target,
) =>
    target.hitTest;
Function _RenderClipRect_paint$(
  m.Scope scope,
  RenderClipRect target,
) =>
    target.paint;
Function _RenderClipRect_debugPaintSize$(
  m.Scope scope,
  RenderClipRect target,
) =>
    target.debugPaintSize;
Function RenderClipRRect_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderClipRRect;
Function RenderClipRRect_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderClipRRect;
BorderRadiusGeometry _RenderClipRRect_borderRadius$(RenderClipRRect target) {
  return target.borderRadius;
}

void _RenderClipRRect_borderRadius_set$(
  RenderClipRRect target,
  BorderRadiusGeometry other,
) {
  target.borderRadius = other;
}

TextDirection? _RenderClipRRect_textDirection$(RenderClipRRect target) {
  return target.textDirection;
}

void _RenderClipRRect_textDirection_set$(
  RenderClipRRect target,
  TextDirection? other,
) {
  target.textDirection = other;
}

Function _RenderClipRRect_hitTest$(
  m.Scope scope,
  RenderClipRRect target,
) =>
    target.hitTest;
Function _RenderClipRRect_paint$(
  m.Scope scope,
  RenderClipRRect target,
) =>
    target.paint;
Function _RenderClipRRect_debugPaintSize$(
  m.Scope scope,
  RenderClipRRect target,
) =>
    target.debugPaintSize;
Function RenderClipOval_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderClipOval;
Function RenderClipOval_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderClipOval;
Function _RenderClipOval_hitTest$(
  m.Scope scope,
  RenderClipOval target,
) =>
    target.hitTest;
Function _RenderClipOval_paint$(
  m.Scope scope,
  RenderClipOval target,
) =>
    target.paint;
Function _RenderClipOval_debugPaintSize$(
  m.Scope scope,
  RenderClipOval target,
) =>
    target.debugPaintSize;
Function RenderClipPath_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderClipPath;
Function RenderClipPath_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderClipPath;
Function _RenderClipPath_hitTest$(
  m.Scope scope,
  RenderClipPath target,
) =>
    target.hitTest;
Function _RenderClipPath_paint$(
  m.Scope scope,
  RenderClipPath target,
) =>
    target.paint;
Function _RenderClipPath_debugPaintSize$(
  m.Scope scope,
  RenderClipPath target,
) =>
    target.debugPaintSize;
Function RenderPhysicalModel_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderPhysicalModel;
Function RenderPhysicalModel_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderPhysicalModel;
BoxShape _RenderPhysicalModel_shape$(RenderPhysicalModel target) {
  return target.shape;
}

void _RenderPhysicalModel_shape_set$(
  RenderPhysicalModel target,
  BoxShape other,
) {
  target.shape = other;
}

BorderRadius? _RenderPhysicalModel_borderRadius$(RenderPhysicalModel target) {
  return target.borderRadius;
}

void _RenderPhysicalModel_borderRadius_set$(
  RenderPhysicalModel target,
  BorderRadius? other,
) {
  target.borderRadius = other;
}

Function _RenderPhysicalModel_hitTest$(
  m.Scope scope,
  RenderPhysicalModel target,
) =>
    target.hitTest;
Function _RenderPhysicalModel_paint$(
  m.Scope scope,
  RenderPhysicalModel target,
) =>
    target.paint;
Function _RenderPhysicalModel_debugFillProperties$(
  m.Scope scope,
  RenderPhysicalModel target,
) =>
    target.debugFillProperties;
Function RenderPhysicalShape_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderPhysicalShape;
Function RenderPhysicalShape_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderPhysicalShape;
Function _RenderPhysicalShape_hitTest$(
  m.Scope scope,
  RenderPhysicalShape target,
) =>
    target.hitTest;
Function _RenderPhysicalShape_paint$(
  m.Scope scope,
  RenderPhysicalShape target,
) =>
    target.paint;
Function _RenderPhysicalShape_debugFillProperties$(
  m.Scope scope,
  RenderPhysicalShape target,
) =>
    target.debugFillProperties;
Function RenderDecoratedBox_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderDecoratedBox;
Function RenderDecoratedBox_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderDecoratedBox;
Decoration _RenderDecoratedBox_decoration$(RenderDecoratedBox target) {
  return target.decoration;
}

void _RenderDecoratedBox_decoration_set$(
  RenderDecoratedBox target,
  Decoration other,
) {
  target.decoration = other;
}

DecorationPosition _RenderDecoratedBox_position$(RenderDecoratedBox target) {
  return target.position;
}

void _RenderDecoratedBox_position_set$(
  RenderDecoratedBox target,
  DecorationPosition other,
) {
  target.position = other;
}

ImageConfiguration _RenderDecoratedBox_configuration$(
    RenderDecoratedBox target) {
  return target.configuration;
}

void _RenderDecoratedBox_configuration_set$(
  RenderDecoratedBox target,
  ImageConfiguration other,
) {
  target.configuration = other;
}

Function _RenderDecoratedBox_detach$(
  m.Scope scope,
  RenderDecoratedBox target,
) =>
    target.detach;
Function _RenderDecoratedBox_hitTestSelf$(
  m.Scope scope,
  RenderDecoratedBox target,
) =>
    target.hitTestSelf;
Function _RenderDecoratedBox_paint$(
  m.Scope scope,
  RenderDecoratedBox target,
) =>
    target.paint;
Function _RenderDecoratedBox_debugFillProperties$(
  m.Scope scope,
  RenderDecoratedBox target,
) =>
    target.debugFillProperties;
Function RenderTransform_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderTransform;
Function RenderTransform_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderTransform;
bool _RenderTransform_transformHitTests$(RenderTransform target) {
  return target.transformHitTests;
}

void _RenderTransform_transformHitTests_set$(
  RenderTransform target,
  bool other,
) {
  target.transformHitTests = other;
}

Offset? _RenderTransform_origin$(RenderTransform target) {
  return target.origin;
}

void _RenderTransform_origin_set$(
  RenderTransform target,
  Offset? other,
) {
  target.origin = other;
}

AlignmentGeometry? _RenderTransform_alignment$(RenderTransform target) {
  return target.alignment;
}

void _RenderTransform_alignment_set$(
  RenderTransform target,
  AlignmentGeometry? other,
) {
  target.alignment = other;
}

TextDirection? _RenderTransform_textDirection$(RenderTransform target) {
  return target.textDirection;
}

void _RenderTransform_textDirection_set$(
  RenderTransform target,
  TextDirection? other,
) {
  target.textDirection = other;
}

bool _RenderTransform_alwaysNeedsCompositing$(RenderTransform target) {
  return target.alwaysNeedsCompositing;
}

void _RenderTransform_transform_set$(
  RenderTransform target,
  Matrix4 other,
) {
  target.transform = other;
}

FilterQuality? _RenderTransform_filterQuality$(RenderTransform target) {
  return target.filterQuality;
}

void _RenderTransform_filterQuality_set$(
  RenderTransform target,
  FilterQuality? other,
) {
  target.filterQuality = other;
}

Function _RenderTransform_setIdentity$(
  m.Scope scope,
  RenderTransform target,
) =>
    target.setIdentity;
Function _RenderTransform_rotateX$(
  m.Scope scope,
  RenderTransform target,
) =>
    target.rotateX;
Function _RenderTransform_rotateY$(
  m.Scope scope,
  RenderTransform target,
) =>
    target.rotateY;
Function _RenderTransform_rotateZ$(
  m.Scope scope,
  RenderTransform target,
) =>
    target.rotateZ;
Function _RenderTransform_translate$(
  m.Scope scope,
  RenderTransform target,
) =>
    target.translate;
Function _RenderTransform_scale$(
  m.Scope scope,
  RenderTransform target,
) =>
    target.scale;
Function _RenderTransform_hitTest$(
  m.Scope scope,
  RenderTransform target,
) =>
    target.hitTest;
Function _RenderTransform_hitTestChildren$(
  m.Scope scope,
  RenderTransform target,
) =>
    target.hitTestChildren;
Function _RenderTransform_paint$(
  m.Scope scope,
  RenderTransform target,
) =>
    target.paint;
Function _RenderTransform_applyPaintTransform$(
  m.Scope scope,
  RenderTransform target,
) =>
    target.applyPaintTransform;
Function _RenderTransform_debugFillProperties$(
  m.Scope scope,
  RenderTransform target,
) =>
    target.debugFillProperties;
Function RenderFittedBox_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderFittedBox;
Function RenderFittedBox_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderFittedBox;
BoxFit _RenderFittedBox_fit$(RenderFittedBox target) {
  return target.fit;
}

void _RenderFittedBox_fit_set$(
  RenderFittedBox target,
  BoxFit other,
) {
  target.fit = other;
}

AlignmentGeometry _RenderFittedBox_alignment$(RenderFittedBox target) {
  return target.alignment;
}

void _RenderFittedBox_alignment_set$(
  RenderFittedBox target,
  AlignmentGeometry other,
) {
  target.alignment = other;
}

TextDirection? _RenderFittedBox_textDirection$(RenderFittedBox target) {
  return target.textDirection;
}

void _RenderFittedBox_textDirection_set$(
  RenderFittedBox target,
  TextDirection? other,
) {
  target.textDirection = other;
}

Clip _RenderFittedBox_clipBehavior$(RenderFittedBox target) {
  return target.clipBehavior;
}

void _RenderFittedBox_clipBehavior_set$(
  RenderFittedBox target,
  Clip other,
) {
  target.clipBehavior = other;
}

Function _RenderFittedBox_computeDryLayout$(
  m.Scope scope,
  RenderFittedBox target,
) =>
    target.computeDryLayout;
Function _RenderFittedBox_performLayout$(
  m.Scope scope,
  RenderFittedBox target,
) =>
    target.performLayout;
Function _RenderFittedBox_paint$(
  m.Scope scope,
  RenderFittedBox target,
) =>
    target.paint;
Function _RenderFittedBox_hitTestChildren$(
  m.Scope scope,
  RenderFittedBox target,
) =>
    target.hitTestChildren;
Function _RenderFittedBox_paintsChild$(
  m.Scope scope,
  RenderFittedBox target,
) =>
    target.paintsChild;
Function _RenderFittedBox_applyPaintTransform$(
  m.Scope scope,
  RenderFittedBox target,
) =>
    target.applyPaintTransform;
Function _RenderFittedBox_debugFillProperties$(
  m.Scope scope,
  RenderFittedBox target,
) =>
    target.debugFillProperties;
Function RenderFractionalTranslation_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderFractionalTranslation;
Function RenderFractionalTranslation_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderFractionalTranslation;
bool _RenderFractionalTranslation_transformHitTests$(
    RenderFractionalTranslation target) {
  return target.transformHitTests;
}

void _RenderFractionalTranslation_transformHitTests_set$(
  RenderFractionalTranslation target,
  bool other,
) {
  target.transformHitTests = other;
}

Offset _RenderFractionalTranslation_translation$(
    RenderFractionalTranslation target) {
  return target.translation;
}

void _RenderFractionalTranslation_translation_set$(
  RenderFractionalTranslation target,
  Offset other,
) {
  target.translation = other;
}

Function _RenderFractionalTranslation_hitTest$(
  m.Scope scope,
  RenderFractionalTranslation target,
) =>
    target.hitTest;
Function _RenderFractionalTranslation_hitTestChildren$(
  m.Scope scope,
  RenderFractionalTranslation target,
) =>
    target.hitTestChildren;
Function _RenderFractionalTranslation_paint$(
  m.Scope scope,
  RenderFractionalTranslation target,
) =>
    target.paint;
Function _RenderFractionalTranslation_applyPaintTransform$(
  m.Scope scope,
  RenderFractionalTranslation target,
) =>
    target.applyPaintTransform;
Function _RenderFractionalTranslation_debugFillProperties$(
  m.Scope scope,
  RenderFractionalTranslation target,
) =>
    target.debugFillProperties;
Function RenderPointerListener_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderPointerListener;
Function RenderPointerListener_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderPointerListener;
void Function(PointerDownEvent)? _RenderPointerListener_onPointerDown$(
    RenderPointerListener target) {
  return target.onPointerDown;
}

Function _RenderPointerListener_onPointerDown_set$(
  m.Scope scope,
  RenderPointerListener target,
) =>
    (m.FunctionPointer? _onPointerDown) {
      void _onPointerDownProxy(PointerDownEvent _onPointerDown_event) =>
          scope.engine.callFunctionPointer(
            scope,
            _onPointerDown!,
            [_onPointerDown_event],
            {},
          );
      target.onPointerDown =
          (_onPointerDown == null ? null : _onPointerDownProxy);
    };
void Function(PointerMoveEvent)? _RenderPointerListener_onPointerMove$(
    RenderPointerListener target) {
  return target.onPointerMove;
}

Function _RenderPointerListener_onPointerMove_set$(
  m.Scope scope,
  RenderPointerListener target,
) =>
    (m.FunctionPointer? _onPointerMove) {
      void _onPointerMoveProxy(PointerMoveEvent _onPointerMove_event) =>
          scope.engine.callFunctionPointer(
            scope,
            _onPointerMove!,
            [_onPointerMove_event],
            {},
          );
      target.onPointerMove =
          (_onPointerMove == null ? null : _onPointerMoveProxy);
    };
void Function(PointerUpEvent)? _RenderPointerListener_onPointerUp$(
    RenderPointerListener target) {
  return target.onPointerUp;
}

Function _RenderPointerListener_onPointerUp_set$(
  m.Scope scope,
  RenderPointerListener target,
) =>
    (m.FunctionPointer? _onPointerUp) {
      void _onPointerUpProxy(PointerUpEvent _onPointerUp_event) =>
          scope.engine.callFunctionPointer(
            scope,
            _onPointerUp!,
            [_onPointerUp_event],
            {},
          );
      target.onPointerUp = (_onPointerUp == null ? null : _onPointerUpProxy);
    };
void Function(PointerHoverEvent)? _RenderPointerListener_onPointerHover$(
    RenderPointerListener target) {
  return target.onPointerHover;
}

Function _RenderPointerListener_onPointerHover_set$(
  m.Scope scope,
  RenderPointerListener target,
) =>
    (m.FunctionPointer? _onPointerHover) {
      void _onPointerHoverProxy(PointerHoverEvent _onPointerHover_event) =>
          scope.engine.callFunctionPointer(
            scope,
            _onPointerHover!,
            [_onPointerHover_event],
            {},
          );
      target.onPointerHover =
          (_onPointerHover == null ? null : _onPointerHoverProxy);
    };
void Function(PointerCancelEvent)? _RenderPointerListener_onPointerCancel$(
    RenderPointerListener target) {
  return target.onPointerCancel;
}

Function _RenderPointerListener_onPointerCancel_set$(
  m.Scope scope,
  RenderPointerListener target,
) =>
    (m.FunctionPointer? _onPointerCancel) {
      void _onPointerCancelProxy(PointerCancelEvent _onPointerCancel_event) =>
          scope.engine.callFunctionPointer(
            scope,
            _onPointerCancel!,
            [_onPointerCancel_event],
            {},
          );
      target.onPointerCancel =
          (_onPointerCancel == null ? null : _onPointerCancelProxy);
    };
void Function(PointerPanZoomStartEvent)?
    _RenderPointerListener_onPointerPanZoomStart$(
        RenderPointerListener target) {
  return target.onPointerPanZoomStart;
}

Function _RenderPointerListener_onPointerPanZoomStart_set$(
  m.Scope scope,
  RenderPointerListener target,
) =>
    (m.FunctionPointer? _onPointerPanZoomStart) {
      void _onPointerPanZoomStartProxy(
              PointerPanZoomStartEvent _onPointerPanZoomStart_event) =>
          scope.engine.callFunctionPointer(
            scope,
            _onPointerPanZoomStart!,
            [_onPointerPanZoomStart_event],
            {},
          );
      target.onPointerPanZoomStart =
          (_onPointerPanZoomStart == null ? null : _onPointerPanZoomStartProxy);
    };
void Function(PointerPanZoomUpdateEvent)?
    _RenderPointerListener_onPointerPanZoomUpdate$(
        RenderPointerListener target) {
  return target.onPointerPanZoomUpdate;
}

Function _RenderPointerListener_onPointerPanZoomUpdate_set$(
  m.Scope scope,
  RenderPointerListener target,
) =>
    (m.FunctionPointer? _onPointerPanZoomUpdate) {
      void _onPointerPanZoomUpdateProxy(
              PointerPanZoomUpdateEvent _onPointerPanZoomUpdate_event) =>
          scope.engine.callFunctionPointer(
            scope,
            _onPointerPanZoomUpdate!,
            [_onPointerPanZoomUpdate_event],
            {},
          );
      target.onPointerPanZoomUpdate = (_onPointerPanZoomUpdate == null
          ? null
          : _onPointerPanZoomUpdateProxy);
    };
void Function(PointerPanZoomEndEvent)?
    _RenderPointerListener_onPointerPanZoomEnd$(RenderPointerListener target) {
  return target.onPointerPanZoomEnd;
}

Function _RenderPointerListener_onPointerPanZoomEnd_set$(
  m.Scope scope,
  RenderPointerListener target,
) =>
    (m.FunctionPointer? _onPointerPanZoomEnd) {
      void _onPointerPanZoomEndProxy(
              PointerPanZoomEndEvent _onPointerPanZoomEnd_event) =>
          scope.engine.callFunctionPointer(
            scope,
            _onPointerPanZoomEnd!,
            [_onPointerPanZoomEnd_event],
            {},
          );
      target.onPointerPanZoomEnd =
          (_onPointerPanZoomEnd == null ? null : _onPointerPanZoomEndProxy);
    };
void Function(PointerSignalEvent)? _RenderPointerListener_onPointerSignal$(
    RenderPointerListener target) {
  return target.onPointerSignal;
}

Function _RenderPointerListener_onPointerSignal_set$(
  m.Scope scope,
  RenderPointerListener target,
) =>
    (m.FunctionPointer? _onPointerSignal) {
      void _onPointerSignalProxy(PointerSignalEvent _onPointerSignal_event) =>
          scope.engine.callFunctionPointer(
            scope,
            _onPointerSignal!,
            [_onPointerSignal_event],
            {},
          );
      target.onPointerSignal =
          (_onPointerSignal == null ? null : _onPointerSignalProxy);
    };
Function _RenderPointerListener_computeSizeForNoChild$(
  m.Scope scope,
  RenderPointerListener target,
) =>
    target.computeSizeForNoChild;
Function _RenderPointerListener_handleEvent$(
  m.Scope scope,
  RenderPointerListener target,
) =>
    target.handleEvent;
Function _RenderPointerListener_debugFillProperties$(
  m.Scope scope,
  RenderPointerListener target,
) =>
    target.debugFillProperties;
Function RenderMouseRegion_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderMouseRegion;
Function RenderMouseRegion_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderMouseRegion;
void Function(PointerEnterEvent)? _RenderMouseRegion_onEnter$(
    RenderMouseRegion target) {
  return target.onEnter;
}

Function _RenderMouseRegion_onEnter_set$(
  m.Scope scope,
  RenderMouseRegion target,
) =>
    (m.FunctionPointer? _onEnter) {
      void _onEnterProxy(PointerEnterEvent _onEnter_event) =>
          scope.engine.callFunctionPointer(
            scope,
            _onEnter!,
            [_onEnter_event],
            {},
          );
      target.onEnter = (_onEnter == null ? null : _onEnterProxy);
    };
void Function(PointerHoverEvent)? _RenderMouseRegion_onHover$(
    RenderMouseRegion target) {
  return target.onHover;
}

Function _RenderMouseRegion_onHover_set$(
  m.Scope scope,
  RenderMouseRegion target,
) =>
    (m.FunctionPointer? _onHover) {
      void _onHoverProxy(PointerHoverEvent _onHover_event) =>
          scope.engine.callFunctionPointer(
            scope,
            _onHover!,
            [_onHover_event],
            {},
          );
      target.onHover = (_onHover == null ? null : _onHoverProxy);
    };
void Function(PointerExitEvent)? _RenderMouseRegion_onExit$(
    RenderMouseRegion target) {
  return target.onExit;
}

Function _RenderMouseRegion_onExit_set$(
  m.Scope scope,
  RenderMouseRegion target,
) =>
    (m.FunctionPointer? _onExit) {
      void _onExitProxy(PointerExitEvent _onExit_event) =>
          scope.engine.callFunctionPointer(
            scope,
            _onExit!,
            [_onExit_event],
            {},
          );
      target.onExit = (_onExit == null ? null : _onExitProxy);
    };
bool _RenderMouseRegion_opaque$(RenderMouseRegion target) {
  return target.opaque;
}

void _RenderMouseRegion_opaque_set$(
  RenderMouseRegion target,
  bool other,
) {
  target.opaque = other;
}

HitTestBehavior? _RenderMouseRegion_hitTestBehavior$(RenderMouseRegion target) {
  return target.hitTestBehavior;
}

void _RenderMouseRegion_hitTestBehavior_set$(
  RenderMouseRegion target,
  HitTestBehavior? other,
) {
  target.hitTestBehavior = other;
}

MouseCursor _RenderMouseRegion_cursor$(RenderMouseRegion target) {
  return target.cursor;
}

void _RenderMouseRegion_cursor_set$(
  RenderMouseRegion target,
  MouseCursor other,
) {
  target.cursor = other;
}

bool _RenderMouseRegion_validForMouseTracker$(RenderMouseRegion target) {
  return target.validForMouseTracker;
}

Function _RenderMouseRegion_hitTest$(
  m.Scope scope,
  RenderMouseRegion target,
) =>
    target.hitTest;
Function _RenderMouseRegion_handleEvent$(
  m.Scope scope,
  RenderMouseRegion target,
) =>
    target.handleEvent;
Function _RenderMouseRegion_attach$(
  m.Scope scope,
  RenderMouseRegion target,
) =>
    target.attach;
Function _RenderMouseRegion_detach$(
  m.Scope scope,
  RenderMouseRegion target,
) =>
    target.detach;
Function _RenderMouseRegion_computeSizeForNoChild$(
  m.Scope scope,
  RenderMouseRegion target,
) =>
    target.computeSizeForNoChild;
Function _RenderMouseRegion_debugFillProperties$(
  m.Scope scope,
  RenderMouseRegion target,
) =>
    target.debugFillProperties;
Function RenderRepaintBoundary_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderRepaintBoundary;
Function RenderRepaintBoundary_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderRepaintBoundary;
bool _RenderRepaintBoundary_isRepaintBoundary$(RenderRepaintBoundary target) {
  return target.isRepaintBoundary;
}

int _RenderRepaintBoundary_debugSymmetricPaintCount$(
    RenderRepaintBoundary target) {
  return target.debugSymmetricPaintCount;
}

int _RenderRepaintBoundary_debugAsymmetricPaintCount$(
    RenderRepaintBoundary target) {
  return target.debugAsymmetricPaintCount;
}

Function _RenderRepaintBoundary_toImage$(
  m.Scope scope,
  RenderRepaintBoundary target,
) =>
    target.toImage;
Function _RenderRepaintBoundary_toImageSync$(
  m.Scope scope,
  RenderRepaintBoundary target,
) =>
    target.toImageSync;
Function _RenderRepaintBoundary_debugResetMetrics$(
  m.Scope scope,
  RenderRepaintBoundary target,
) =>
    target.debugResetMetrics;
Function _RenderRepaintBoundary_debugRegisterRepaintBoundaryPaint$(
  m.Scope scope,
  RenderRepaintBoundary target,
) =>
    target.debugRegisterRepaintBoundaryPaint;
Function _RenderRepaintBoundary_debugFillProperties$(
  m.Scope scope,
  RenderRepaintBoundary target,
) =>
    target.debugFillProperties;
Function RenderIgnorePointer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderIgnorePointer;
Function RenderIgnorePointer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderIgnorePointer;
bool _RenderIgnorePointer_ignoring$(RenderIgnorePointer target) {
  return target.ignoring;
}

void _RenderIgnorePointer_ignoring_set$(
  RenderIgnorePointer target,
  bool other,
) {
  target.ignoring = other;
}

bool? _RenderIgnorePointer_ignoringSemantics$(RenderIgnorePointer target) {
  return target.ignoringSemantics;
}

void _RenderIgnorePointer_ignoringSemantics_set$(
  RenderIgnorePointer target,
  bool? other,
) {
  target.ignoringSemantics = other;
}

Function _RenderIgnorePointer_hitTest$(
  m.Scope scope,
  RenderIgnorePointer target,
) =>
    target.hitTest;
Function _RenderIgnorePointer_visitChildrenForSemantics$(
  m.Scope scope,
  RenderIgnorePointer target,
) =>
    (m.FunctionPointer visitor) {
      void visitorProxy(RenderObject visitor_child) =>
          scope.engine.callFunctionPointer(
            scope,
            visitor,
            [visitor_child],
            {},
          );
      target.visitChildrenForSemantics(visitorProxy);
    };
Function _RenderIgnorePointer_debugFillProperties$(
  m.Scope scope,
  RenderIgnorePointer target,
) =>
    target.debugFillProperties;
Function RenderOffstage_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderOffstage;
Function RenderOffstage_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderOffstage;
bool _RenderOffstage_offstage$(RenderOffstage target) {
  return target.offstage;
}

void _RenderOffstage_offstage_set$(
  RenderOffstage target,
  bool other,
) {
  target.offstage = other;
}

bool _RenderOffstage_sizedByParent$(RenderOffstage target) {
  return target.sizedByParent;
}

Function _RenderOffstage_computeMinIntrinsicWidth$(
  m.Scope scope,
  RenderOffstage target,
) =>
    target.computeMinIntrinsicWidth;
Function _RenderOffstage_computeMaxIntrinsicWidth$(
  m.Scope scope,
  RenderOffstage target,
) =>
    target.computeMaxIntrinsicWidth;
Function _RenderOffstage_computeMinIntrinsicHeight$(
  m.Scope scope,
  RenderOffstage target,
) =>
    target.computeMinIntrinsicHeight;
Function _RenderOffstage_computeMaxIntrinsicHeight$(
  m.Scope scope,
  RenderOffstage target,
) =>
    target.computeMaxIntrinsicHeight;
Function _RenderOffstage_computeDistanceToActualBaseline$(
  m.Scope scope,
  RenderOffstage target,
) =>
    target.computeDistanceToActualBaseline;
Function _RenderOffstage_computeDryLayout$(
  m.Scope scope,
  RenderOffstage target,
) =>
    target.computeDryLayout;
Function _RenderOffstage_performResize$(
  m.Scope scope,
  RenderOffstage target,
) =>
    target.performResize;
Function _RenderOffstage_performLayout$(
  m.Scope scope,
  RenderOffstage target,
) =>
    target.performLayout;
Function _RenderOffstage_hitTest$(
  m.Scope scope,
  RenderOffstage target,
) =>
    target.hitTest;
Function _RenderOffstage_paintsChild$(
  m.Scope scope,
  RenderOffstage target,
) =>
    target.paintsChild;
Function _RenderOffstage_paint$(
  m.Scope scope,
  RenderOffstage target,
) =>
    target.paint;
Function _RenderOffstage_visitChildrenForSemantics$(
  m.Scope scope,
  RenderOffstage target,
) =>
    (m.FunctionPointer visitor) {
      void visitorProxy(RenderObject visitor_child) =>
          scope.engine.callFunctionPointer(
            scope,
            visitor,
            [visitor_child],
            {},
          );
      target.visitChildrenForSemantics(visitorProxy);
    };
Function _RenderOffstage_debugFillProperties$(
  m.Scope scope,
  RenderOffstage target,
) =>
    target.debugFillProperties;
Function _RenderOffstage_debugDescribeChildren$(
  m.Scope scope,
  RenderOffstage target,
) =>
    target.debugDescribeChildren;
Function RenderAbsorbPointer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderAbsorbPointer;
Function RenderAbsorbPointer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderAbsorbPointer;
bool _RenderAbsorbPointer_absorbing$(RenderAbsorbPointer target) {
  return target.absorbing;
}

void _RenderAbsorbPointer_absorbing_set$(
  RenderAbsorbPointer target,
  bool other,
) {
  target.absorbing = other;
}

bool? _RenderAbsorbPointer_ignoringSemantics$(RenderAbsorbPointer target) {
  return target.ignoringSemantics;
}

void _RenderAbsorbPointer_ignoringSemantics_set$(
  RenderAbsorbPointer target,
  bool? other,
) {
  target.ignoringSemantics = other;
}

Function _RenderAbsorbPointer_hitTest$(
  m.Scope scope,
  RenderAbsorbPointer target,
) =>
    target.hitTest;
Function _RenderAbsorbPointer_visitChildrenForSemantics$(
  m.Scope scope,
  RenderAbsorbPointer target,
) =>
    (m.FunctionPointer visitor) {
      void visitorProxy(RenderObject visitor_child) =>
          scope.engine.callFunctionPointer(
            scope,
            visitor,
            [visitor_child],
            {},
          );
      target.visitChildrenForSemantics(visitorProxy);
    };
Function _RenderAbsorbPointer_debugFillProperties$(
  m.Scope scope,
  RenderAbsorbPointer target,
) =>
    target.debugFillProperties;
Function RenderMetaData_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderMetaData;
Function RenderMetaData_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderMetaData;
dynamic _RenderMetaData_metaData$(RenderMetaData target) {
  return target.metaData;
}

void _RenderMetaData_metaData_set$(
  RenderMetaData target,
  dynamic other,
) {
  target.metaData = other;
}

Function _RenderMetaData_debugFillProperties$(
  m.Scope scope,
  RenderMetaData target,
) =>
    target.debugFillProperties;
Function RenderSemanticsGestureHandler_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderSemanticsGestureHandler;
Function RenderSemanticsGestureHandler_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderSemanticsGestureHandler;
double _RenderSemanticsGestureHandler_scrollFactor$(
    RenderSemanticsGestureHandler target) {
  return target.scrollFactor;
}

void _RenderSemanticsGestureHandler_scrollFactor_set$(
  RenderSemanticsGestureHandler target,
  double other,
) {
  target.scrollFactor = other;
}

Set<SemanticsAction>? _RenderSemanticsGestureHandler_validActions$(
    RenderSemanticsGestureHandler target) {
  return target.validActions;
}

void _RenderSemanticsGestureHandler_validActions_set$(
  RenderSemanticsGestureHandler target,
  Set<SemanticsAction>? other,
) {
  target.validActions = other;
}

void Function()? _RenderSemanticsGestureHandler_onTap$(
    RenderSemanticsGestureHandler target) {
  return target.onTap;
}

Function _RenderSemanticsGestureHandler_onTap_set$(
  m.Scope scope,
  RenderSemanticsGestureHandler target,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope.engine.callFunctionPointer(
            scope,
            value!,
            [],
            {},
          );
      target.onTap = (value == null ? null : valueProxy);
    };
void Function()? _RenderSemanticsGestureHandler_onLongPress$(
    RenderSemanticsGestureHandler target) {
  return target.onLongPress;
}

Function _RenderSemanticsGestureHandler_onLongPress_set$(
  m.Scope scope,
  RenderSemanticsGestureHandler target,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope.engine.callFunctionPointer(
            scope,
            value!,
            [],
            {},
          );
      target.onLongPress = (value == null ? null : valueProxy);
    };
void Function(DragUpdateDetails)?
    _RenderSemanticsGestureHandler_onHorizontalDragUpdate$(
        RenderSemanticsGestureHandler target) {
  return target.onHorizontalDragUpdate;
}

Function _RenderSemanticsGestureHandler_onHorizontalDragUpdate_set$(
  m.Scope scope,
  RenderSemanticsGestureHandler target,
) =>
    (m.FunctionPointer? value) {
      void valueProxy(DragUpdateDetails value_details) =>
          scope.engine.callFunctionPointer(
            scope,
            value!,
            [value_details],
            {},
          );
      target.onHorizontalDragUpdate = (value == null ? null : valueProxy);
    };
void Function(DragUpdateDetails)?
    _RenderSemanticsGestureHandler_onVerticalDragUpdate$(
        RenderSemanticsGestureHandler target) {
  return target.onVerticalDragUpdate;
}

Function _RenderSemanticsGestureHandler_onVerticalDragUpdate_set$(
  m.Scope scope,
  RenderSemanticsGestureHandler target,
) =>
    (m.FunctionPointer? value) {
      void valueProxy(DragUpdateDetails value_details) =>
          scope.engine.callFunctionPointer(
            scope,
            value!,
            [value_details],
            {},
          );
      target.onVerticalDragUpdate = (value == null ? null : valueProxy);
    };
Function _RenderSemanticsGestureHandler_describeSemanticsConfiguration$(
  m.Scope scope,
  RenderSemanticsGestureHandler target,
) =>
    target.describeSemanticsConfiguration;
Function _RenderSemanticsGestureHandler_debugFillProperties$(
  m.Scope scope,
  RenderSemanticsGestureHandler target,
) =>
    target.debugFillProperties;
Function RenderSemanticsAnnotations_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderSemanticsAnnotations;
Function RenderSemanticsAnnotations_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderSemanticsAnnotations;
SemanticsProperties _RenderSemanticsAnnotations_properties$(
    RenderSemanticsAnnotations target) {
  return target.properties;
}

void _RenderSemanticsAnnotations_properties_set$(
  RenderSemanticsAnnotations target,
  SemanticsProperties other,
) {
  target.properties = other;
}

bool _RenderSemanticsAnnotations_container$(RenderSemanticsAnnotations target) {
  return target.container;
}

void _RenderSemanticsAnnotations_container_set$(
  RenderSemanticsAnnotations target,
  bool other,
) {
  target.container = other;
}

bool _RenderSemanticsAnnotations_explicitChildNodes$(
    RenderSemanticsAnnotations target) {
  return target.explicitChildNodes;
}

void _RenderSemanticsAnnotations_explicitChildNodes_set$(
  RenderSemanticsAnnotations target,
  bool other,
) {
  target.explicitChildNodes = other;
}

bool _RenderSemanticsAnnotations_excludeSemantics$(
    RenderSemanticsAnnotations target) {
  return target.excludeSemantics;
}

void _RenderSemanticsAnnotations_excludeSemantics_set$(
  RenderSemanticsAnnotations target,
  bool other,
) {
  target.excludeSemantics = other;
}

TextDirection? _RenderSemanticsAnnotations_textDirection$(
    RenderSemanticsAnnotations target) {
  return target.textDirection;
}

void _RenderSemanticsAnnotations_textDirection_set$(
  RenderSemanticsAnnotations target,
  TextDirection? other,
) {
  target.textDirection = other;
}

Function _RenderSemanticsAnnotations_visitChildrenForSemantics$(
  m.Scope scope,
  RenderSemanticsAnnotations target,
) =>
    (m.FunctionPointer visitor) {
      void visitorProxy(RenderObject visitor_child) =>
          scope.engine.callFunctionPointer(
            scope,
            visitor,
            [visitor_child],
            {},
          );
      target.visitChildrenForSemantics(visitorProxy);
    };
Function _RenderSemanticsAnnotations_describeSemanticsConfiguration$(
  m.Scope scope,
  RenderSemanticsAnnotations target,
) =>
    target.describeSemanticsConfiguration;
Function RenderBlockSemantics_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderBlockSemantics;
Function RenderBlockSemantics_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderBlockSemantics;
bool _RenderBlockSemantics_blocking$(RenderBlockSemantics target) {
  return target.blocking;
}

void _RenderBlockSemantics_blocking_set$(
  RenderBlockSemantics target,
  bool other,
) {
  target.blocking = other;
}

Function _RenderBlockSemantics_describeSemanticsConfiguration$(
  m.Scope scope,
  RenderBlockSemantics target,
) =>
    target.describeSemanticsConfiguration;
Function _RenderBlockSemantics_debugFillProperties$(
  m.Scope scope,
  RenderBlockSemantics target,
) =>
    target.debugFillProperties;
Function RenderMergeSemantics_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderMergeSemantics;
Function RenderMergeSemantics_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderMergeSemantics;
Function _RenderMergeSemantics_describeSemanticsConfiguration$(
  m.Scope scope,
  RenderMergeSemantics target,
) =>
    target.describeSemanticsConfiguration;
Function RenderExcludeSemantics_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderExcludeSemantics;
Function RenderExcludeSemantics_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderExcludeSemantics;
bool _RenderExcludeSemantics_excluding$(RenderExcludeSemantics target) {
  return target.excluding;
}

void _RenderExcludeSemantics_excluding_set$(
  RenderExcludeSemantics target,
  bool other,
) {
  target.excluding = other;
}

Function _RenderExcludeSemantics_visitChildrenForSemantics$(
  m.Scope scope,
  RenderExcludeSemantics target,
) =>
    (m.FunctionPointer visitor) {
      void visitorProxy(RenderObject visitor_child) =>
          scope.engine.callFunctionPointer(
            scope,
            visitor,
            [visitor_child],
            {},
          );
      target.visitChildrenForSemantics(visitorProxy);
    };
Function _RenderExcludeSemantics_debugFillProperties$(
  m.Scope scope,
  RenderExcludeSemantics target,
) =>
    target.debugFillProperties;
Function RenderIndexedSemantics_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderIndexedSemantics;
Function RenderIndexedSemantics_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderIndexedSemantics;
int _RenderIndexedSemantics_index$(RenderIndexedSemantics target) {
  return target.index;
}

void _RenderIndexedSemantics_index_set$(
  RenderIndexedSemantics target,
  int other,
) {
  target.index = other;
}

Function _RenderIndexedSemantics_describeSemanticsConfiguration$(
  m.Scope scope,
  RenderIndexedSemantics target,
) =>
    target.describeSemanticsConfiguration;
Function _RenderIndexedSemantics_debugFillProperties$(
  m.Scope scope,
  RenderIndexedSemantics target,
) =>
    target.debugFillProperties;
Function RenderLeaderLayer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderLeaderLayer;
Function RenderLeaderLayer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderLeaderLayer;
LayerLink _RenderLeaderLayer_link$(RenderLeaderLayer target) {
  return target.link;
}

void _RenderLeaderLayer_link_set$(
  RenderLeaderLayer target,
  LayerLink other,
) {
  target.link = other;
}

bool _RenderLeaderLayer_alwaysNeedsCompositing$(RenderLeaderLayer target) {
  return target.alwaysNeedsCompositing;
}

Function _RenderLeaderLayer_performLayout$(
  m.Scope scope,
  RenderLeaderLayer target,
) =>
    target.performLayout;
Function _RenderLeaderLayer_paint$(
  m.Scope scope,
  RenderLeaderLayer target,
) =>
    target.paint;
Function _RenderLeaderLayer_debugFillProperties$(
  m.Scope scope,
  RenderLeaderLayer target,
) =>
    target.debugFillProperties;
Function RenderFollowerLayer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderFollowerLayer;
Function RenderFollowerLayer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderFollowerLayer;
LayerLink _RenderFollowerLayer_link$(RenderFollowerLayer target) {
  return target.link;
}

void _RenderFollowerLayer_link_set$(
  RenderFollowerLayer target,
  LayerLink other,
) {
  target.link = other;
}

bool _RenderFollowerLayer_showWhenUnlinked$(RenderFollowerLayer target) {
  return target.showWhenUnlinked;
}

void _RenderFollowerLayer_showWhenUnlinked_set$(
  RenderFollowerLayer target,
  bool other,
) {
  target.showWhenUnlinked = other;
}

Offset _RenderFollowerLayer_offset$(RenderFollowerLayer target) {
  return target.offset;
}

void _RenderFollowerLayer_offset_set$(
  RenderFollowerLayer target,
  Offset other,
) {
  target.offset = other;
}

Alignment _RenderFollowerLayer_leaderAnchor$(RenderFollowerLayer target) {
  return target.leaderAnchor;
}

void _RenderFollowerLayer_leaderAnchor_set$(
  RenderFollowerLayer target,
  Alignment other,
) {
  target.leaderAnchor = other;
}

Alignment _RenderFollowerLayer_followerAnchor$(RenderFollowerLayer target) {
  return target.followerAnchor;
}

void _RenderFollowerLayer_followerAnchor_set$(
  RenderFollowerLayer target,
  Alignment other,
) {
  target.followerAnchor = other;
}

bool _RenderFollowerLayer_alwaysNeedsCompositing$(RenderFollowerLayer target) {
  return target.alwaysNeedsCompositing;
}

FollowerLayer? _RenderFollowerLayer_layer$(RenderFollowerLayer target) {
  return target.layer;
}

Function _RenderFollowerLayer_detach$(
  m.Scope scope,
  RenderFollowerLayer target,
) =>
    target.detach;
Function _RenderFollowerLayer_getCurrentTransform$(
  m.Scope scope,
  RenderFollowerLayer target,
) =>
    target.getCurrentTransform;
Function _RenderFollowerLayer_hitTest$(
  m.Scope scope,
  RenderFollowerLayer target,
) =>
    target.hitTest;
Function _RenderFollowerLayer_hitTestChildren$(
  m.Scope scope,
  RenderFollowerLayer target,
) =>
    target.hitTestChildren;
Function _RenderFollowerLayer_paint$(
  m.Scope scope,
  RenderFollowerLayer target,
) =>
    target.paint;
Function _RenderFollowerLayer_applyPaintTransform$(
  m.Scope scope,
  RenderFollowerLayer target,
) =>
    target.applyPaintTransform;
Function _RenderFollowerLayer_debugFillProperties$(
  m.Scope scope,
  RenderFollowerLayer target,
) =>
    target.debugFillProperties;
Function RenderAnnotatedRegion_as$<T extends Object>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderAnnotatedRegion<T>;
Function RenderAnnotatedRegion_is$<T extends Object>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderAnnotatedRegion<T>;
bool _RenderAnnotatedRegion_alwaysNeedsCompositing$<T extends Object>(
    RenderAnnotatedRegion<T> target) {
  return target.alwaysNeedsCompositing;
}

T _RenderAnnotatedRegion_value$<T extends Object>(
    RenderAnnotatedRegion<T> target) {
  return target.value;
}

void _RenderAnnotatedRegion_value_set$<T extends Object>(
  RenderAnnotatedRegion<T> target,
  T other,
) {
  target.value = other;
}

bool _RenderAnnotatedRegion_sized$<T extends Object>(
    RenderAnnotatedRegion<T> target) {
  return target.sized;
}

void _RenderAnnotatedRegion_sized_set$<T extends Object>(
  RenderAnnotatedRegion<T> target,
  bool other,
) {
  target.sized = other;
}

Function _RenderAnnotatedRegion_paint$<T extends Object>(
  m.Scope scope,
  RenderAnnotatedRegion<T> target,
) =>
    target.paint;
HitTestBehavior _HitTestBehavior_deferToChild$() {
  return HitTestBehavior.deferToChild;
}

HitTestBehavior _HitTestBehavior_opaque$() {
  return HitTestBehavior.opaque;
}

HitTestBehavior _HitTestBehavior_translucent$() {
  return HitTestBehavior.translucent;
}

List<HitTestBehavior> _HitTestBehavior_values$() {
  return HitTestBehavior.values;
}

DecorationPosition _DecorationPosition_background$() {
  return DecorationPosition.background;
}

DecorationPosition _DecorationPosition_foreground$() {
  return DecorationPosition.foreground;
}

List<DecorationPosition> _DecorationPosition_values$() {
  return DecorationPosition.values;
}
