// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/search.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/app_bar.dart';
import 'package:flutter/src/material/app_bar_theme.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/input_border.dart';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/scaffold.dart';
import 'package:flutter/src/material/text_field.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/search.dart',
  {'showSearch': _showSearch$},
  {},
  {
    'SearchDelegate': m.ClassMirror(
      'SearchDelegate',
      {
        '#as': SearchDelegate_as$,
        '#is': SearchDelegate_is$,
        'searchFieldLabel': _SearchDelegate_searchFieldLabel$,
        'searchFieldStyle': _SearchDelegate_searchFieldStyle$,
        'searchFieldDecorationTheme':
            _SearchDelegate_searchFieldDecorationTheme$,
        'keyboardType': _SearchDelegate_keyboardType$,
        'textInputAction': _SearchDelegate_textInputAction$,
        'query': _SearchDelegate_query$,
        'transitionAnimation': _SearchDelegate_transitionAnimation$,
        'buildSuggestions': _SearchDelegate_buildSuggestions$,
        'buildResults': _SearchDelegate_buildResults$,
        'buildLeading': _SearchDelegate_buildLeading$,
        'buildActions': _SearchDelegate_buildActions$,
        'buildBottom': _SearchDelegate_buildBottom$,
        'appBarTheme': _SearchDelegate_appBarTheme$,
        'showResults': _SearchDelegate_showResults$,
        'showSuggestions': _SearchDelegate_showSuggestions$,
        'close': _SearchDelegate_close$,
      },
      {'query': _SearchDelegate_query_set$},
    )
  },
);
Function SearchDelegate_as$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SearchDelegate<T>;
Function SearchDelegate_is$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SearchDelegate<T>;
String? _SearchDelegate_searchFieldLabel$<T>(SearchDelegate<T> target) {
  return target.searchFieldLabel;
}

TextStyle? _SearchDelegate_searchFieldStyle$<T>(SearchDelegate<T> target) {
  return target.searchFieldStyle;
}

InputDecorationTheme? _SearchDelegate_searchFieldDecorationTheme$<T>(
    SearchDelegate<T> target) {
  return target.searchFieldDecorationTheme;
}

TextInputType? _SearchDelegate_keyboardType$<T>(SearchDelegate<T> target) {
  return target.keyboardType;
}

TextInputAction _SearchDelegate_textInputAction$<T>(SearchDelegate<T> target) {
  return target.textInputAction;
}

String _SearchDelegate_query$<T>(SearchDelegate<T> target) {
  return target.query;
}

void _SearchDelegate_query_set$<T>(
  SearchDelegate<T> target,
  String other,
) {
  target.query = other;
}

Animation<double> _SearchDelegate_transitionAnimation$<T>(
    SearchDelegate<T> target) {
  return target.transitionAnimation;
}

Function _SearchDelegate_buildSuggestions$<T>(
  m.Scope scope,
  SearchDelegate<T> target,
) =>
    target.buildSuggestions;
Function _SearchDelegate_buildResults$<T>(
  m.Scope scope,
  SearchDelegate<T> target,
) =>
    target.buildResults;
Function _SearchDelegate_buildLeading$<T>(
  m.Scope scope,
  SearchDelegate<T> target,
) =>
    target.buildLeading;
Function _SearchDelegate_buildActions$<T>(
  m.Scope scope,
  SearchDelegate<T> target,
) =>
    target.buildActions;
Function _SearchDelegate_buildBottom$<T>(
  m.Scope scope,
  SearchDelegate<T> target,
) =>
    target.buildBottom;
Function _SearchDelegate_appBarTheme$<T>(
  m.Scope scope,
  SearchDelegate<T> target,
) =>
    target.appBarTheme;
Function _SearchDelegate_showResults$<T>(
  m.Scope scope,
  SearchDelegate<T> target,
) =>
    target.showResults;
Function _SearchDelegate_showSuggestions$<T>(
  m.Scope scope,
  SearchDelegate<T> target,
) =>
    target.showSuggestions;
Function _SearchDelegate_close$<T>(
  m.Scope scope,
  SearchDelegate<T> target,
) =>
    target.close;
Function _showSearch$<T>(m.Scope scope) => showSearch<T>;
