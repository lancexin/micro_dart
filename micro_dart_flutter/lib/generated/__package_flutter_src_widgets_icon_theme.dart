// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/icon_theme.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/icon_theme_data.dart';
import 'package:flutter/src/widgets/inherited_theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/icon_theme.dart',
  {
    'IconTheme.merge': _IconTheme_merge$,
    'IconTheme.of': _IconTheme_of$,
  },
  {},
  {
    'IconTheme': m.ClassMirror(
      'IconTheme',
      {
        'data': _IconTheme_data$,
        'updateShouldNotify': _IconTheme_updateShouldNotify$,
        'wrap': _IconTheme_wrap$,
        'debugFillProperties': _IconTheme_debugFillProperties$,
      },
      {},
    )
  },
);
IconThemeData _IconTheme_data$(IconTheme target) {
  return target.data;
}

Function _IconTheme_merge$(m.Scope scope) => IconTheme.merge;
Function _IconTheme_of$(m.Scope scope) => IconTheme.of;
Function _IconTheme_updateShouldNotify$(
  m.Scope scope,
  IconTheme target,
) =>
    target.updateShouldNotify;
Function _IconTheme_wrap$(
  m.Scope scope,
  IconTheme target,
) =>
    target.wrap;
Function _IconTheme_debugFillProperties$(
  m.Scope scope,
  IconTheme target,
) =>
    target.debugFillProperties;
