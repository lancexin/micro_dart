// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/dual_transition_builder.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/dual_transition_builder.dart',
  {'DualTransitionBuilder.': _DualTransitionBuilder__$},
  {},
  {
    'DualTransitionBuilder': m.ClassMirror(
      'DualTransitionBuilder',
      {
        '#as': DualTransitionBuilder_as$,
        '#is': DualTransitionBuilder_is$,
        'animation': _DualTransitionBuilder_animation$,
        'forwardBuilder': _DualTransitionBuilder_forwardBuilder$,
        'reverseBuilder': _DualTransitionBuilder_reverseBuilder$,
        'child': _DualTransitionBuilder_child$,
        'createState': _DualTransitionBuilder_createState$,
      },
      {},
    )
  },
);
Function DualTransitionBuilder_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DualTransitionBuilder;
Function DualTransitionBuilder_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DualTransitionBuilder;
Function _DualTransitionBuilder_animation$(
  m.Scope scope$,
  DualTransitionBuilder target$,
) =>
    () {
      return target$.animation;
    };
Function _DualTransitionBuilder_forwardBuilder$(
  m.Scope scope$,
  DualTransitionBuilder target$,
) =>
    () {
      return target$.forwardBuilder;
    };
Function _DualTransitionBuilder_reverseBuilder$(
  m.Scope scope$,
  DualTransitionBuilder target$,
) =>
    () {
      return target$.reverseBuilder;
    };
Function _DualTransitionBuilder_child$(
  m.Scope scope$,
  DualTransitionBuilder target$,
) =>
    () {
      return target$.child;
    };
Function _DualTransitionBuilder__$(m.Scope scope$) => ({
      Key? key,
      required Animation<double> animation,
      required m.FunctionPointer forwardBuilder,
      required m.FunctionPointer reverseBuilder,
      Widget? child,
    }) {
      Widget forwardBuilderProxy(
        BuildContext forwardBuilder_context$,
        Animation<double> forwardBuilder_animation$,
        Widget? forwardBuilder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            forwardBuilder,
            [
              forwardBuilder_context$,
              forwardBuilder_animation$,
              forwardBuilder_child$,
            ],
            {},
          );
      Widget reverseBuilderProxy(
        BuildContext reverseBuilder_context$,
        Animation<double> reverseBuilder_animation$,
        Widget? reverseBuilder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            reverseBuilder,
            [
              reverseBuilder_context$,
              reverseBuilder_animation$,
              reverseBuilder_child$,
            ],
            {},
          );
      return DualTransitionBuilder(
        animation: animation,
        child: child,
        forwardBuilder: forwardBuilderProxy,
        key: key,
        reverseBuilder: reverseBuilderProxy,
      );
    };
Function _DualTransitionBuilder_createState$(
  m.Scope scope$,
  DualTransitionBuilder target$,
) =>
    target$.createState;
