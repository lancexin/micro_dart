// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/colors.dart';
import 'dart:math';
import 'dart:ui' show Color, lerpDouble;
import 'package:flutter/foundation.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/colors.dart',
  {
    'HSVColor.lerp': _HSVColor_lerp$,
    'HSLColor.lerp': _HSLColor_lerp$,
    'ColorSwatch.lerp': _ColorSwatch_lerp$,
  },
  {},
  {
    'HSVColor': m.ClassMirror(
      'HSVColor',
      {
        'alpha': _HSVColor_alpha$,
        'hue': _HSVColor_hue$,
        'saturation': _HSVColor_saturation$,
        'value': _HSVColor_value$,
        'hashCode': _HSVColor_hashCode$,
        'withAlpha': _HSVColor_withAlpha$,
        'withHue': _HSVColor_withHue$,
        'withSaturation': _HSVColor_withSaturation$,
        'withValue': _HSVColor_withValue$,
        'toColor': _HSVColor_toColor$,
        'toString': _HSVColor_toString$,
      },
      {},
    ),
    'HSLColor': m.ClassMirror(
      'HSLColor',
      {
        'alpha': _HSLColor_alpha$,
        'hue': _HSLColor_hue$,
        'saturation': _HSLColor_saturation$,
        'lightness': _HSLColor_lightness$,
        'hashCode': _HSLColor_hashCode$,
        'withAlpha': _HSLColor_withAlpha$,
        'withHue': _HSLColor_withHue$,
        'withSaturation': _HSLColor_withSaturation$,
        'withLightness': _HSLColor_withLightness$,
        'toColor': _HSLColor_toColor$,
        'toString': _HSLColor_toString$,
      },
      {},
    ),
    'ColorSwatch': m.ClassMirror(
      'ColorSwatch',
      {
        'hashCode': _ColorSwatch_hashCode$,
        'toString': _ColorSwatch_toString$,
      },
      {},
    ),
    'ColorProperty': m.ClassMirror(
      'ColorProperty',
      {'toJsonMap': _ColorProperty_toJsonMap$},
      {},
    ),
  },
);
double _HSVColor_alpha$(HSVColor target) {
  return target.alpha;
}

double _HSVColor_hue$(HSVColor target) {
  return target.hue;
}

double _HSVColor_saturation$(HSVColor target) {
  return target.saturation;
}

double _HSVColor_value$(HSVColor target) {
  return target.value;
}

int _HSVColor_hashCode$(HSVColor target) {
  return target.hashCode;
}

Function _HSVColor_withAlpha$(
  m.Scope scope,
  HSVColor target,
) =>
    target.withAlpha;
Function _HSVColor_withHue$(
  m.Scope scope,
  HSVColor target,
) =>
    target.withHue;
Function _HSVColor_withSaturation$(
  m.Scope scope,
  HSVColor target,
) =>
    target.withSaturation;
Function _HSVColor_withValue$(
  m.Scope scope,
  HSVColor target,
) =>
    target.withValue;
Function _HSVColor_toColor$(
  m.Scope scope,
  HSVColor target,
) =>
    target.toColor;
Function _HSVColor_lerp$(m.Scope scope) => HSVColor.lerp;
Function _HSVColor_toString$(
  m.Scope scope,
  HSVColor target,
) =>
    target.toString;
double _HSLColor_alpha$(HSLColor target) {
  return target.alpha;
}

double _HSLColor_hue$(HSLColor target) {
  return target.hue;
}

double _HSLColor_saturation$(HSLColor target) {
  return target.saturation;
}

double _HSLColor_lightness$(HSLColor target) {
  return target.lightness;
}

int _HSLColor_hashCode$(HSLColor target) {
  return target.hashCode;
}

Function _HSLColor_withAlpha$(
  m.Scope scope,
  HSLColor target,
) =>
    target.withAlpha;
Function _HSLColor_withHue$(
  m.Scope scope,
  HSLColor target,
) =>
    target.withHue;
Function _HSLColor_withSaturation$(
  m.Scope scope,
  HSLColor target,
) =>
    target.withSaturation;
Function _HSLColor_withLightness$(
  m.Scope scope,
  HSLColor target,
) =>
    target.withLightness;
Function _HSLColor_toColor$(
  m.Scope scope,
  HSLColor target,
) =>
    target.toColor;
Function _HSLColor_lerp$(m.Scope scope) => HSLColor.lerp;
Function _HSLColor_toString$(
  m.Scope scope,
  HSLColor target,
) =>
    target.toString;
int _ColorSwatch_hashCode$<T>(ColorSwatch<T> target) {
  return target.hashCode;
}

Function _ColorSwatch_toString$<T>(
  m.Scope scope,
  ColorSwatch<T> target,
) =>
    target.toString;
Function _ColorSwatch_lerp$<T>(m.Scope scope) => ColorSwatch.lerp<T>;
Function _ColorProperty_toJsonMap$(
  m.Scope scope,
  ColorProperty target,
) =>
    target.toJsonMap;
