// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/colors.dart';
import 'dart:math';
import 'dart:ui' show Color, lerpDouble;
import 'package:flutter/foundation.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/colors.dart',
  {
    'HSVColor.fromAHSV': _HSVColor_fromAHSV_$,
    'HSVColor.fromColor': _HSVColor_fromColor_$,
    'HSVColor.lerp': _HSVColor_lerp$,
    'HSLColor.fromAHSL': _HSLColor_fromAHSL_$,
    'HSLColor.fromColor': _HSLColor_fromColor_$,
    'HSLColor.lerp': _HSLColor_lerp$,
    'ColorSwatch.': _ColorSwatch__$,
    'ColorSwatch.lerp': _ColorSwatch_lerp$,
    'ColorProperty.': _ColorProperty__$,
  },
  {},
  {
    'HSVColor': m.ClassMirror(
      'HSVColor',
      {
        '#as': HSVColor_as$,
        '#is': HSVColor_is$,
        'alpha': _HSVColor_alpha$,
        'hue': _HSVColor_hue$,
        'saturation': _HSVColor_saturation$,
        'value': _HSVColor_value$,
        'hashCode': _HSVColor_hashCode$,
        'withAlpha': _HSVColor_withAlpha$,
        'withHue': _HSVColor_withHue$,
        'withSaturation': _HSVColor_withSaturation$,
        'withValue': _HSVColor_withValue$,
        'toColor': _HSVColor_toColor$,
        '==': _HSVColor_eq$$,
        'toString': _HSVColor_toString$,
      },
      {},
    ),
    'HSLColor': m.ClassMirror(
      'HSLColor',
      {
        '#as': HSLColor_as$,
        '#is': HSLColor_is$,
        'alpha': _HSLColor_alpha$,
        'hue': _HSLColor_hue$,
        'saturation': _HSLColor_saturation$,
        'lightness': _HSLColor_lightness$,
        'hashCode': _HSLColor_hashCode$,
        'withAlpha': _HSLColor_withAlpha$,
        'withHue': _HSLColor_withHue$,
        'withSaturation': _HSLColor_withSaturation$,
        'withLightness': _HSLColor_withLightness$,
        'toColor': _HSLColor_toColor$,
        '==': _HSLColor_eq$$,
        'toString': _HSLColor_toString$,
      },
      {},
    ),
    'ColorSwatch': m.ClassMirror(
      'ColorSwatch',
      {
        '#as': ColorSwatch_as$,
        '#is': ColorSwatch_is$,
        'hashCode': _ColorSwatch_hashCode$,
        '[]': _ColorSwatch_$index$$,
        '==': _ColorSwatch_eq$$,
        'toString': _ColorSwatch_toString$,
      },
      {},
    ),
    'ColorProperty': m.ClassMirror(
      'ColorProperty',
      {
        '#as': ColorProperty_as$,
        '#is': ColorProperty_is$,
        'toJsonMap': _ColorProperty_toJsonMap$,
      },
      {},
    ),
  },
);
Function HSVColor_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as HSVColor;
Function HSVColor_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is HSVColor;
Function _HSVColor_alpha$(
  m.Scope scope$,
  HSVColor target$,
) =>
    () {
      return target$.alpha;
    };
Function _HSVColor_hue$(
  m.Scope scope$,
  HSVColor target$,
) =>
    () {
      return target$.hue;
    };
Function _HSVColor_saturation$(
  m.Scope scope$,
  HSVColor target$,
) =>
    () {
      return target$.saturation;
    };
Function _HSVColor_value$(
  m.Scope scope$,
  HSVColor target$,
) =>
    () {
      return target$.value;
    };
Function _HSVColor_hashCode$(
  m.Scope scope$,
  HSVColor target$,
) =>
    () {
      return target$.hashCode;
    };
Function _HSVColor_fromAHSV_$(m.Scope scope$) => HSVColor.fromAHSV;
Function _HSVColor_fromColor_$(m.Scope scope$) => HSVColor.fromColor;
Function _HSVColor_withAlpha$(
  m.Scope scope$,
  HSVColor target$,
) =>
    target$.withAlpha;
Function _HSVColor_withHue$(
  m.Scope scope$,
  HSVColor target$,
) =>
    target$.withHue;
Function _HSVColor_withSaturation$(
  m.Scope scope$,
  HSVColor target$,
) =>
    target$.withSaturation;
Function _HSVColor_withValue$(
  m.Scope scope$,
  HSVColor target$,
) =>
    target$.withValue;
Function _HSVColor_toColor$(
  m.Scope scope$,
  HSVColor target$,
) =>
    target$.toColor;
Function _HSVColor_lerp$(m.Scope scope$) => HSVColor.lerp;
Function _HSVColor_eq$$(
  m.Scope scope$,
  HSVColor target$,
) =>
    (Object other$) => target$ == other$;
Function _HSVColor_toString$(
  m.Scope scope$,
  HSVColor target$,
) =>
    target$.toString;
Function HSLColor_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as HSLColor;
Function HSLColor_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is HSLColor;
Function _HSLColor_alpha$(
  m.Scope scope$,
  HSLColor target$,
) =>
    () {
      return target$.alpha;
    };
Function _HSLColor_hue$(
  m.Scope scope$,
  HSLColor target$,
) =>
    () {
      return target$.hue;
    };
Function _HSLColor_saturation$(
  m.Scope scope$,
  HSLColor target$,
) =>
    () {
      return target$.saturation;
    };
Function _HSLColor_lightness$(
  m.Scope scope$,
  HSLColor target$,
) =>
    () {
      return target$.lightness;
    };
Function _HSLColor_hashCode$(
  m.Scope scope$,
  HSLColor target$,
) =>
    () {
      return target$.hashCode;
    };
Function _HSLColor_fromAHSL_$(m.Scope scope$) => HSLColor.fromAHSL;
Function _HSLColor_fromColor_$(m.Scope scope$) => HSLColor.fromColor;
Function _HSLColor_withAlpha$(
  m.Scope scope$,
  HSLColor target$,
) =>
    target$.withAlpha;
Function _HSLColor_withHue$(
  m.Scope scope$,
  HSLColor target$,
) =>
    target$.withHue;
Function _HSLColor_withSaturation$(
  m.Scope scope$,
  HSLColor target$,
) =>
    target$.withSaturation;
Function _HSLColor_withLightness$(
  m.Scope scope$,
  HSLColor target$,
) =>
    target$.withLightness;
Function _HSLColor_toColor$(
  m.Scope scope$,
  HSLColor target$,
) =>
    target$.toColor;
Function _HSLColor_lerp$(m.Scope scope$) => HSLColor.lerp;
Function _HSLColor_eq$$(
  m.Scope scope$,
  HSLColor target$,
) =>
    (Object other$) => target$ == other$;
Function _HSLColor_toString$(
  m.Scope scope$,
  HSLColor target$,
) =>
    target$.toString;
Function ColorSwatch_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ColorSwatch<T>;
Function ColorSwatch_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ColorSwatch<T>;
Function _ColorSwatch_hashCode$<T>(
  m.Scope scope$,
  ColorSwatch<T> target$,
) =>
    () {
      return target$.hashCode;
    };
Function _ColorSwatch__$(m.Scope scope$) => (
      int primary,
      Map _swatch,
    ) {
      return ColorSwatch(
        primary,
        Map.from(_swatch),
      );
    };
Function _ColorSwatch_$index$$<T>(
  m.Scope scope$,
  ColorSwatch<T> target$,
) =>
    (T index) => target$[index];
Function _ColorSwatch_eq$$<T>(
  m.Scope scope$,
  ColorSwatch<T> target$,
) =>
    (Object other$) => target$ == other$;
Function _ColorSwatch_toString$<T>(
  m.Scope scope$,
  ColorSwatch<T> target$,
) =>
    target$.toString;
Function _ColorSwatch_lerp$<T>(m.Scope scope$) => ColorSwatch.lerp<T>;
Function ColorProperty_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ColorProperty;
Function ColorProperty_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ColorProperty;
Function _ColorProperty__$(m.Scope scope$) => (
      String name,
      Color? value, {
      bool? showName,
      Object? defaultValue,
      DiagnosticsTreeStyle? style,
      DiagnosticLevel? level,
    }) {
      return ColorProperty(
        name,
        value,
        defaultValue: defaultValue ?? kNoDefaultValue,
        level: level ?? DiagnosticLevel.info,
        showName: showName ?? true,
        style: style ?? DiagnosticsTreeStyle.singleLine,
      );
    };
Function _ColorProperty_toJsonMap$(
  m.Scope scope$,
  ColorProperty target$,
) =>
    target$.toJsonMap;
