// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/filter_chip.dart';
import 'package:flutter/foundation.dart' show clampDouble;
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/chip.dart';
import 'package:flutter/src/material/chip_theme.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/filter_chip.dart',
  {'FilterChip.': _FilterChip__$},
  {},
  {
    'FilterChip': m.ClassMirror(
      'FilterChip',
      {
        '#as': FilterChip_as$,
        '#is': FilterChip_is$,
        'avatar': _FilterChip_avatar$,
        'label': _FilterChip_label$,
        'labelStyle': _FilterChip_labelStyle$,
        'labelPadding': _FilterChip_labelPadding$,
        'selected': _FilterChip_selected$,
        'onSelected': _FilterChip_onSelected$,
        'pressElevation': _FilterChip_pressElevation$,
        'disabledColor': _FilterChip_disabledColor$,
        'selectedColor': _FilterChip_selectedColor$,
        'tooltip': _FilterChip_tooltip$,
        'side': _FilterChip_side$,
        'shape': _FilterChip_shape$,
        'clipBehavior': _FilterChip_clipBehavior$,
        'focusNode': _FilterChip_focusNode$,
        'autofocus': _FilterChip_autofocus$,
        'backgroundColor': _FilterChip_backgroundColor$,
        'padding': _FilterChip_padding$,
        'visualDensity': _FilterChip_visualDensity$,
        'materialTapTargetSize': _FilterChip_materialTapTargetSize$,
        'elevation': _FilterChip_elevation$,
        'shadowColor': _FilterChip_shadowColor$,
        'surfaceTintColor': _FilterChip_surfaceTintColor$,
        'selectedShadowColor': _FilterChip_selectedShadowColor$,
        'showCheckmark': _FilterChip_showCheckmark$,
        'checkmarkColor': _FilterChip_checkmarkColor$,
        'avatarBorder': _FilterChip_avatarBorder$,
        'iconTheme': _FilterChip_iconTheme$,
        'isEnabled': _FilterChip_isEnabled$,
        'build': _FilterChip_build$,
      },
      {},
    )
  },
);
Function FilterChip_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FilterChip;
Function FilterChip_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FilterChip;
Function _FilterChip_avatar$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.avatar;
    };
Function _FilterChip_label$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.label;
    };
Function _FilterChip_labelStyle$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.labelStyle;
    };
Function _FilterChip_labelPadding$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.labelPadding;
    };
Function _FilterChip_selected$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.selected;
    };
Function _FilterChip_onSelected$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.onSelected;
    };
Function _FilterChip_pressElevation$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.pressElevation;
    };
Function _FilterChip_disabledColor$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.disabledColor;
    };
Function _FilterChip_selectedColor$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.selectedColor;
    };
Function _FilterChip_tooltip$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.tooltip;
    };
Function _FilterChip_side$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.side;
    };
Function _FilterChip_shape$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.shape;
    };
Function _FilterChip_clipBehavior$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _FilterChip_focusNode$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.focusNode;
    };
Function _FilterChip_autofocus$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.autofocus;
    };
Function _FilterChip_backgroundColor$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _FilterChip_padding$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.padding;
    };
Function _FilterChip_visualDensity$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.visualDensity;
    };
Function _FilterChip_materialTapTargetSize$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.materialTapTargetSize;
    };
Function _FilterChip_elevation$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.elevation;
    };
Function _FilterChip_shadowColor$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _FilterChip_surfaceTintColor$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _FilterChip_selectedShadowColor$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.selectedShadowColor;
    };
Function _FilterChip_showCheckmark$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.showCheckmark;
    };
Function _FilterChip_checkmarkColor$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.checkmarkColor;
    };
Function _FilterChip_avatarBorder$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.avatarBorder;
    };
Function _FilterChip_iconTheme$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.iconTheme;
    };
Function _FilterChip_isEnabled$(
  m.Scope scope$,
  FilterChip target$,
) =>
    () {
      return target$.isEnabled;
    };
Function _FilterChip__$(m.Scope scope$) => ({
      Key? key,
      Widget? avatar,
      required Widget label,
      TextStyle? labelStyle,
      EdgeInsetsGeometry? labelPadding,
      bool? selected,
      required m.FunctionPointer? onSelected,
      double? pressElevation,
      Color? disabledColor,
      Color? selectedColor,
      String? tooltip,
      BorderSide? side,
      OutlinedBorder? shape,
      Clip? clipBehavior,
      FocusNode? focusNode,
      bool? autofocus,
      Color? backgroundColor,
      EdgeInsetsGeometry? padding,
      VisualDensity? visualDensity,
      MaterialTapTargetSize? materialTapTargetSize,
      double? elevation,
      Color? shadowColor,
      Color? surfaceTintColor,
      IconThemeData? iconTheme,
      Color? selectedShadowColor,
      bool? showCheckmark,
      Color? checkmarkColor,
      ShapeBorder? avatarBorder,
    }) {
      void onSelectedProxy(bool onSelected_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSelected!,
            [onSelected_value$],
            {},
          );
      return FilterChip(
        autofocus: autofocus ?? false,
        avatar: avatar,
        avatarBorder: avatarBorder ?? const CircleBorder(),
        backgroundColor: backgroundColor,
        checkmarkColor: checkmarkColor,
        clipBehavior: clipBehavior ?? Clip.none,
        disabledColor: disabledColor,
        elevation: elevation,
        focusNode: focusNode,
        iconTheme: iconTheme,
        key: key,
        label: label,
        labelPadding: labelPadding,
        labelStyle: labelStyle,
        materialTapTargetSize: materialTapTargetSize,
        onSelected: onSelected == null ? null : onSelectedProxy,
        padding: padding,
        pressElevation: pressElevation,
        selected: selected ?? false,
        selectedColor: selectedColor,
        selectedShadowColor: selectedShadowColor,
        shadowColor: shadowColor,
        shape: shape,
        showCheckmark: showCheckmark,
        side: side,
        surfaceTintColor: surfaceTintColor,
        tooltip: tooltip,
        visualDensity: visualDensity,
      );
    };
Function _FilterChip_build$(
  m.Scope scope$,
  FilterChip target$,
) =>
    target$.build;
