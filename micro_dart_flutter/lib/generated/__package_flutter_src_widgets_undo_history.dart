// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/undo_history.dart';
import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/actions.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/text_editing_intents.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/undo_history.dart',
  {'UndoHistoryValue.empty': _UndoHistoryValue_empty$},
  {},
  {
    'UndoHistory': m.ClassMirror(
      'UndoHistory',
      {
        'value': _UndoHistory_value$,
        'shouldChangeUndoStack': _UndoHistory_shouldChangeUndoStack$,
        'onTriggered': _UndoHistory_onTriggered$,
        'focusNode': _UndoHistory_focusNode$,
        'controller': _UndoHistory_controller$,
        'child': _UndoHistory_child$,
        'createState': _UndoHistory_createState$,
      },
      {},
    ),
    'UndoHistoryState': m.ClassMirror(
      'UndoHistoryState',
      {
        'canUndo': _UndoHistoryState_canUndo$,
        'canRedo': _UndoHistoryState_canRedo$,
        'undo': _UndoHistoryState_undo$,
        'redo': _UndoHistoryState_redo$,
        'handlePlatformUndo': _UndoHistoryState_handlePlatformUndo$,
        'initState': _UndoHistoryState_initState$,
        'didUpdateWidget': _UndoHistoryState_didUpdateWidget$,
        'dispose': _UndoHistoryState_dispose$,
        'build': _UndoHistoryState_build$,
      },
      {},
    ),
    'UndoHistoryValue': m.ClassMirror(
      'UndoHistoryValue',
      {
        'canUndo': _UndoHistoryValue_canUndo$,
        'canRedo': _UndoHistoryValue_canRedo$,
        'hashCode': _UndoHistoryValue_hashCode$,
        'toString': _UndoHistoryValue_toString$,
      },
      {},
    ),
    'UndoHistoryController': m.ClassMirror(
      'UndoHistoryController',
      {
        'onUndo': _UndoHistoryController_onUndo$,
        'onRedo': _UndoHistoryController_onRedo$,
        'undo': _UndoHistoryController_undo$,
        'redo': _UndoHistoryController_redo$,
        'dispose': _UndoHistoryController_dispose$,
      },
      {},
    ),
  },
);
ValueNotifier<T> _UndoHistory_value$<T>(UndoHistory<T> target) {
  return target.value;
}

bool Function(T?, T)? _UndoHistory_shouldChangeUndoStack$<T>(
    UndoHistory<T> target) {
  return target.shouldChangeUndoStack;
}

void Function(T) _UndoHistory_onTriggered$<T>(UndoHistory<T> target) {
  return target.onTriggered;
}

FocusNode _UndoHistory_focusNode$<T>(UndoHistory<T> target) {
  return target.focusNode;
}

UndoHistoryController? _UndoHistory_controller$<T>(UndoHistory<T> target) {
  return target.controller;
}

Widget _UndoHistory_child$<T>(UndoHistory<T> target) {
  return target.child;
}

Function _UndoHistory_createState$<T>(
  m.Scope scope,
  UndoHistory<T> target,
) =>
    target.createState;
bool _UndoHistoryState_canUndo$<T>(UndoHistoryState<T> target) {
  return target.canUndo;
}

bool _UndoHistoryState_canRedo$<T>(UndoHistoryState<T> target) {
  return target.canRedo;
}

Function _UndoHistoryState_undo$<T>(
  m.Scope scope,
  UndoHistoryState<T> target,
) =>
    target.undo;
Function _UndoHistoryState_redo$<T>(
  m.Scope scope,
  UndoHistoryState<T> target,
) =>
    target.redo;
Function _UndoHistoryState_handlePlatformUndo$<T>(
  m.Scope scope,
  UndoHistoryState<T> target,
) =>
    target.handlePlatformUndo;
Function _UndoHistoryState_initState$<T>(
  m.Scope scope,
  UndoHistoryState<T> target,
) =>
    target.initState;
Function _UndoHistoryState_didUpdateWidget$<T>(
  m.Scope scope,
  UndoHistoryState<T> target,
) =>
    target.didUpdateWidget;
Function _UndoHistoryState_dispose$<T>(
  m.Scope scope,
  UndoHistoryState<T> target,
) =>
    target.dispose;
Function _UndoHistoryState_build$<T>(
  m.Scope scope,
  UndoHistoryState<T> target,
) =>
    target.build;
UndoHistoryValue _UndoHistoryValue_empty$() {
  return UndoHistoryValue.empty;
}

bool _UndoHistoryValue_canUndo$(UndoHistoryValue target) {
  return target.canUndo;
}

bool _UndoHistoryValue_canRedo$(UndoHistoryValue target) {
  return target.canRedo;
}

int _UndoHistoryValue_hashCode$(UndoHistoryValue target) {
  return target.hashCode;
}

Function _UndoHistoryValue_toString$(
  m.Scope scope,
  UndoHistoryValue target,
) =>
    target.toString;
ChangeNotifier _UndoHistoryController_onUndo$(UndoHistoryController target) {
  return target.onUndo;
}

ChangeNotifier _UndoHistoryController_onRedo$(UndoHistoryController target) {
  return target.onRedo;
}

Function _UndoHistoryController_undo$(
  m.Scope scope,
  UndoHistoryController target,
) =>
    target.undo;
Function _UndoHistoryController_redo$(
  m.Scope scope,
  UndoHistoryController target,
) =>
    target.redo;
Function _UndoHistoryController_dispose$(
  m.Scope scope,
  UndoHistoryController target,
) =>
    target.dispose;
