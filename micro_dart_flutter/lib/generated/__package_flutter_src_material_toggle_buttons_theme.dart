// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/toggle_buttons_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/toggle_buttons_theme.dart',
  {
    'ToggleButtonsThemeData.': _ToggleButtonsThemeData__$,
    'ToggleButtonsThemeData.lerp': _ToggleButtonsThemeData_lerp$,
    'ToggleButtonsTheme.': _ToggleButtonsTheme__$,
    'ToggleButtonsTheme.of': _ToggleButtonsTheme_of$,
  },
  {},
  {
    'ToggleButtonsThemeData': m.ClassMirror(
      'ToggleButtonsThemeData',
      {
        '#as': ToggleButtonsThemeData_as$,
        '#is': ToggleButtonsThemeData_is$,
        'textStyle': _ToggleButtonsThemeData_textStyle$,
        'constraints': _ToggleButtonsThemeData_constraints$,
        'color': _ToggleButtonsThemeData_color$,
        'selectedColor': _ToggleButtonsThemeData_selectedColor$,
        'disabledColor': _ToggleButtonsThemeData_disabledColor$,
        'fillColor': _ToggleButtonsThemeData_fillColor$,
        'focusColor': _ToggleButtonsThemeData_focusColor$,
        'highlightColor': _ToggleButtonsThemeData_highlightColor$,
        'splashColor': _ToggleButtonsThemeData_splashColor$,
        'hoverColor': _ToggleButtonsThemeData_hoverColor$,
        'borderColor': _ToggleButtonsThemeData_borderColor$,
        'selectedBorderColor': _ToggleButtonsThemeData_selectedBorderColor$,
        'disabledBorderColor': _ToggleButtonsThemeData_disabledBorderColor$,
        'borderWidth': _ToggleButtonsThemeData_borderWidth$,
        'borderRadius': _ToggleButtonsThemeData_borderRadius$,
        'hashCode': _ToggleButtonsThemeData_hashCode$,
        'copyWith': _ToggleButtonsThemeData_copyWith$,
        '==': _ToggleButtonsThemeData_eq$$,
        'debugFillProperties': _ToggleButtonsThemeData_debugFillProperties$,
      },
      {},
    ),
    'ToggleButtonsTheme': m.ClassMirror(
      'ToggleButtonsTheme',
      {
        '#as': ToggleButtonsTheme_as$,
        '#is': ToggleButtonsTheme_is$,
        'data': _ToggleButtonsTheme_data$,
        'wrap': _ToggleButtonsTheme_wrap$,
        'updateShouldNotify': _ToggleButtonsTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function ToggleButtonsThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ToggleButtonsThemeData;
Function ToggleButtonsThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ToggleButtonsThemeData;
Function _ToggleButtonsThemeData_textStyle$(
  m.Scope scope$,
  ToggleButtonsThemeData target$,
) =>
    () {
      return target$.textStyle;
    };
Function _ToggleButtonsThemeData_constraints$(
  m.Scope scope$,
  ToggleButtonsThemeData target$,
) =>
    () {
      return target$.constraints;
    };
Function _ToggleButtonsThemeData_color$(
  m.Scope scope$,
  ToggleButtonsThemeData target$,
) =>
    () {
      return target$.color;
    };
Function _ToggleButtonsThemeData_selectedColor$(
  m.Scope scope$,
  ToggleButtonsThemeData target$,
) =>
    () {
      return target$.selectedColor;
    };
Function _ToggleButtonsThemeData_disabledColor$(
  m.Scope scope$,
  ToggleButtonsThemeData target$,
) =>
    () {
      return target$.disabledColor;
    };
Function _ToggleButtonsThemeData_fillColor$(
  m.Scope scope$,
  ToggleButtonsThemeData target$,
) =>
    () {
      return target$.fillColor;
    };
Function _ToggleButtonsThemeData_focusColor$(
  m.Scope scope$,
  ToggleButtonsThemeData target$,
) =>
    () {
      return target$.focusColor;
    };
Function _ToggleButtonsThemeData_highlightColor$(
  m.Scope scope$,
  ToggleButtonsThemeData target$,
) =>
    () {
      return target$.highlightColor;
    };
Function _ToggleButtonsThemeData_splashColor$(
  m.Scope scope$,
  ToggleButtonsThemeData target$,
) =>
    () {
      return target$.splashColor;
    };
Function _ToggleButtonsThemeData_hoverColor$(
  m.Scope scope$,
  ToggleButtonsThemeData target$,
) =>
    () {
      return target$.hoverColor;
    };
Function _ToggleButtonsThemeData_borderColor$(
  m.Scope scope$,
  ToggleButtonsThemeData target$,
) =>
    () {
      return target$.borderColor;
    };
Function _ToggleButtonsThemeData_selectedBorderColor$(
  m.Scope scope$,
  ToggleButtonsThemeData target$,
) =>
    () {
      return target$.selectedBorderColor;
    };
Function _ToggleButtonsThemeData_disabledBorderColor$(
  m.Scope scope$,
  ToggleButtonsThemeData target$,
) =>
    () {
      return target$.disabledBorderColor;
    };
Function _ToggleButtonsThemeData_borderWidth$(
  m.Scope scope$,
  ToggleButtonsThemeData target$,
) =>
    () {
      return target$.borderWidth;
    };
Function _ToggleButtonsThemeData_borderRadius$(
  m.Scope scope$,
  ToggleButtonsThemeData target$,
) =>
    () {
      return target$.borderRadius;
    };
Function _ToggleButtonsThemeData_hashCode$(
  m.Scope scope$,
  ToggleButtonsThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _ToggleButtonsThemeData__$(m.Scope scope$) => ({
      TextStyle? textStyle,
      BoxConstraints? constraints,
      Color? color,
      Color? selectedColor,
      Color? disabledColor,
      Color? fillColor,
      Color? focusColor,
      Color? highlightColor,
      Color? hoverColor,
      Color? splashColor,
      Color? borderColor,
      Color? selectedBorderColor,
      Color? disabledBorderColor,
      BorderRadius? borderRadius,
      double? borderWidth,
    }) {
      return ToggleButtonsThemeData(
        borderColor: borderColor,
        borderRadius: borderRadius,
        borderWidth: borderWidth,
        color: color,
        constraints: constraints,
        disabledBorderColor: disabledBorderColor,
        disabledColor: disabledColor,
        fillColor: fillColor,
        focusColor: focusColor,
        highlightColor: highlightColor,
        hoverColor: hoverColor,
        selectedBorderColor: selectedBorderColor,
        selectedColor: selectedColor,
        splashColor: splashColor,
        textStyle: textStyle,
      );
    };
Function _ToggleButtonsThemeData_copyWith$(
  m.Scope scope$,
  ToggleButtonsThemeData target$,
) =>
    target$.copyWith;
Function _ToggleButtonsThemeData_lerp$(m.Scope scope$) =>
    ToggleButtonsThemeData.lerp;
Function _ToggleButtonsThemeData_eq$$(
  m.Scope scope$,
  ToggleButtonsThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _ToggleButtonsThemeData_debugFillProperties$(
  m.Scope scope$,
  ToggleButtonsThemeData target$,
) =>
    target$.debugFillProperties;
Function ToggleButtonsTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ToggleButtonsTheme;
Function ToggleButtonsTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ToggleButtonsTheme;
Function _ToggleButtonsTheme_data$(
  m.Scope scope$,
  ToggleButtonsTheme target$,
) =>
    () {
      return target$.data;
    };
Function _ToggleButtonsTheme__$(m.Scope scope$) => ({
      Key? key,
      required ToggleButtonsThemeData data,
      required Widget child,
    }) {
      return ToggleButtonsTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _ToggleButtonsTheme_of$(m.Scope scope$) => ToggleButtonsTheme.of;
Function _ToggleButtonsTheme_wrap$(
  m.Scope scope$,
  ToggleButtonsTheme target$,
) =>
    target$.wrap;
Function _ToggleButtonsTheme_updateShouldNotify$(
  m.Scope scope$,
  ToggleButtonsTheme target$,
) =>
    target$.updateShouldNotify;
