// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/toggle_buttons_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/toggle_buttons_theme.dart',
  {
    'ToggleButtonsThemeData.lerp': _ToggleButtonsThemeData_lerp$,
    'ToggleButtonsTheme.of': _ToggleButtonsTheme_of$,
  },
  {},
  {
    'ToggleButtonsThemeData': m.ClassMirror(
      'ToggleButtonsThemeData',
      {
        'textStyle': _ToggleButtonsThemeData_textStyle$,
        'constraints': _ToggleButtonsThemeData_constraints$,
        'color': _ToggleButtonsThemeData_color$,
        'selectedColor': _ToggleButtonsThemeData_selectedColor$,
        'disabledColor': _ToggleButtonsThemeData_disabledColor$,
        'fillColor': _ToggleButtonsThemeData_fillColor$,
        'focusColor': _ToggleButtonsThemeData_focusColor$,
        'highlightColor': _ToggleButtonsThemeData_highlightColor$,
        'splashColor': _ToggleButtonsThemeData_splashColor$,
        'hoverColor': _ToggleButtonsThemeData_hoverColor$,
        'borderColor': _ToggleButtonsThemeData_borderColor$,
        'selectedBorderColor': _ToggleButtonsThemeData_selectedBorderColor$,
        'disabledBorderColor': _ToggleButtonsThemeData_disabledBorderColor$,
        'borderWidth': _ToggleButtonsThemeData_borderWidth$,
        'borderRadius': _ToggleButtonsThemeData_borderRadius$,
        'hashCode': _ToggleButtonsThemeData_hashCode$,
        'copyWith': _ToggleButtonsThemeData_copyWith$,
        'debugFillProperties': _ToggleButtonsThemeData_debugFillProperties$,
      },
      {},
    ),
    'ToggleButtonsTheme': m.ClassMirror(
      'ToggleButtonsTheme',
      {
        'data': _ToggleButtonsTheme_data$,
        'wrap': _ToggleButtonsTheme_wrap$,
        'updateShouldNotify': _ToggleButtonsTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
TextStyle? _ToggleButtonsThemeData_textStyle$(ToggleButtonsThemeData target) {
  return target.textStyle;
}

BoxConstraints? _ToggleButtonsThemeData_constraints$(
    ToggleButtonsThemeData target) {
  return target.constraints;
}

Color? _ToggleButtonsThemeData_color$(ToggleButtonsThemeData target) {
  return target.color;
}

Color? _ToggleButtonsThemeData_selectedColor$(ToggleButtonsThemeData target) {
  return target.selectedColor;
}

Color? _ToggleButtonsThemeData_disabledColor$(ToggleButtonsThemeData target) {
  return target.disabledColor;
}

Color? _ToggleButtonsThemeData_fillColor$(ToggleButtonsThemeData target) {
  return target.fillColor;
}

Color? _ToggleButtonsThemeData_focusColor$(ToggleButtonsThemeData target) {
  return target.focusColor;
}

Color? _ToggleButtonsThemeData_highlightColor$(ToggleButtonsThemeData target) {
  return target.highlightColor;
}

Color? _ToggleButtonsThemeData_splashColor$(ToggleButtonsThemeData target) {
  return target.splashColor;
}

Color? _ToggleButtonsThemeData_hoverColor$(ToggleButtonsThemeData target) {
  return target.hoverColor;
}

Color? _ToggleButtonsThemeData_borderColor$(ToggleButtonsThemeData target) {
  return target.borderColor;
}

Color? _ToggleButtonsThemeData_selectedBorderColor$(
    ToggleButtonsThemeData target) {
  return target.selectedBorderColor;
}

Color? _ToggleButtonsThemeData_disabledBorderColor$(
    ToggleButtonsThemeData target) {
  return target.disabledBorderColor;
}

double? _ToggleButtonsThemeData_borderWidth$(ToggleButtonsThemeData target) {
  return target.borderWidth;
}

BorderRadius? _ToggleButtonsThemeData_borderRadius$(
    ToggleButtonsThemeData target) {
  return target.borderRadius;
}

int _ToggleButtonsThemeData_hashCode$(ToggleButtonsThemeData target) {
  return target.hashCode;
}

Function _ToggleButtonsThemeData_copyWith$(
  m.Scope scope,
  ToggleButtonsThemeData target,
) =>
    target.copyWith;
Function _ToggleButtonsThemeData_lerp$(m.Scope scope) =>
    ToggleButtonsThemeData.lerp;
Function _ToggleButtonsThemeData_debugFillProperties$(
  m.Scope scope,
  ToggleButtonsThemeData target,
) =>
    target.debugFillProperties;
ToggleButtonsThemeData _ToggleButtonsTheme_data$(ToggleButtonsTheme target) {
  return target.data;
}

Function _ToggleButtonsTheme_of$(m.Scope scope) => ToggleButtonsTheme.of;
Function _ToggleButtonsTheme_wrap$(
  m.Scope scope,
  ToggleButtonsTheme target,
) =>
    target.wrap;
Function _ToggleButtonsTheme_updateShouldNotify$(
  m.Scope scope,
  ToggleButtonsTheme target,
) =>
    target.updateShouldNotify;
