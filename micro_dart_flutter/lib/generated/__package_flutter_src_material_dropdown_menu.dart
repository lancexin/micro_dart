// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/dropdown_menu.dart';
import 'dart:math';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/dropdown_menu_theme.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/input_border.dart';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/menu_anchor.dart';
import 'package:flutter/src/material/menu_style.dart';
import 'package:flutter/src/material/text_field.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/dropdown_menu.dart',
  {},
  {},
  {
    'DropdownMenuEntry': m.ClassMirror(
      'DropdownMenuEntry',
      {
        'value': _DropdownMenuEntry_value$,
        'label': _DropdownMenuEntry_label$,
        'leadingIcon': _DropdownMenuEntry_leadingIcon$,
        'trailingIcon': _DropdownMenuEntry_trailingIcon$,
        'enabled': _DropdownMenuEntry_enabled$,
        'style': _DropdownMenuEntry_style$,
      },
      {},
    ),
    'DropdownMenu': m.ClassMirror(
      'DropdownMenu',
      {
        'enabled': _DropdownMenu_enabled$,
        'width': _DropdownMenu_width$,
        'menuHeight': _DropdownMenu_menuHeight$,
        'leadingIcon': _DropdownMenu_leadingIcon$,
        'trailingIcon': _DropdownMenu_trailingIcon$,
        'label': _DropdownMenu_label$,
        'hintText': _DropdownMenu_hintText$,
        'helperText': _DropdownMenu_helperText$,
        'errorText': _DropdownMenu_errorText$,
        'selectedTrailingIcon': _DropdownMenu_selectedTrailingIcon$,
        'enableFilter': _DropdownMenu_enableFilter$,
        'enableSearch': _DropdownMenu_enableSearch$,
        'textStyle': _DropdownMenu_textStyle$,
        'inputDecorationTheme': _DropdownMenu_inputDecorationTheme$,
        'menuStyle': _DropdownMenu_menuStyle$,
        'controller': _DropdownMenu_controller$,
        'initialSelection': _DropdownMenu_initialSelection$,
        'onSelected': _DropdownMenu_onSelected$,
        'requestFocusOnTap': _DropdownMenu_requestFocusOnTap$,
        'dropdownMenuEntries': _DropdownMenu_dropdownMenuEntries$,
        'createState': _DropdownMenu_createState$,
      },
      {},
    ),
  },
);
T _DropdownMenuEntry_value$<T>(DropdownMenuEntry<T> target) {
  return target.value;
}

String _DropdownMenuEntry_label$<T>(DropdownMenuEntry<T> target) {
  return target.label;
}

Widget? _DropdownMenuEntry_leadingIcon$<T>(DropdownMenuEntry<T> target) {
  return target.leadingIcon;
}

Widget? _DropdownMenuEntry_trailingIcon$<T>(DropdownMenuEntry<T> target) {
  return target.trailingIcon;
}

bool _DropdownMenuEntry_enabled$<T>(DropdownMenuEntry<T> target) {
  return target.enabled;
}

ButtonStyle? _DropdownMenuEntry_style$<T>(DropdownMenuEntry<T> target) {
  return target.style;
}

bool _DropdownMenu_enabled$<T>(DropdownMenu<T> target) {
  return target.enabled;
}

double? _DropdownMenu_width$<T>(DropdownMenu<T> target) {
  return target.width;
}

double? _DropdownMenu_menuHeight$<T>(DropdownMenu<T> target) {
  return target.menuHeight;
}

Widget? _DropdownMenu_leadingIcon$<T>(DropdownMenu<T> target) {
  return target.leadingIcon;
}

Widget? _DropdownMenu_trailingIcon$<T>(DropdownMenu<T> target) {
  return target.trailingIcon;
}

Widget? _DropdownMenu_label$<T>(DropdownMenu<T> target) {
  return target.label;
}

String? _DropdownMenu_hintText$<T>(DropdownMenu<T> target) {
  return target.hintText;
}

String? _DropdownMenu_helperText$<T>(DropdownMenu<T> target) {
  return target.helperText;
}

String? _DropdownMenu_errorText$<T>(DropdownMenu<T> target) {
  return target.errorText;
}

Widget? _DropdownMenu_selectedTrailingIcon$<T>(DropdownMenu<T> target) {
  return target.selectedTrailingIcon;
}

bool _DropdownMenu_enableFilter$<T>(DropdownMenu<T> target) {
  return target.enableFilter;
}

bool _DropdownMenu_enableSearch$<T>(DropdownMenu<T> target) {
  return target.enableSearch;
}

TextStyle? _DropdownMenu_textStyle$<T>(DropdownMenu<T> target) {
  return target.textStyle;
}

InputDecorationTheme? _DropdownMenu_inputDecorationTheme$<T>(
    DropdownMenu<T> target) {
  return target.inputDecorationTheme;
}

MenuStyle? _DropdownMenu_menuStyle$<T>(DropdownMenu<T> target) {
  return target.menuStyle;
}

TextEditingController? _DropdownMenu_controller$<T>(DropdownMenu<T> target) {
  return target.controller;
}

T? _DropdownMenu_initialSelection$<T>(DropdownMenu<T> target) {
  return target.initialSelection;
}

void Function(T?)? _DropdownMenu_onSelected$<T>(DropdownMenu<T> target) {
  return target.onSelected;
}

bool? _DropdownMenu_requestFocusOnTap$<T>(DropdownMenu<T> target) {
  return target.requestFocusOnTap;
}

List<DropdownMenuEntry<T>> _DropdownMenu_dropdownMenuEntries$<T>(
    DropdownMenu<T> target) {
  return target.dropdownMenuEntries;
}

Function _DropdownMenu_createState$<T>(
  m.Scope scope,
  DropdownMenu<T> target,
) =>
    target.createState;
