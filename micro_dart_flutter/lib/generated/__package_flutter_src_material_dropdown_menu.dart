// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/dropdown_menu.dart';
import 'dart:math';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/dropdown_menu_theme.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/input_border.dart';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/menu_anchor.dart';
import 'package:flutter/src/material/menu_style.dart';
import 'package:flutter/src/material/text_field.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/dropdown_menu.dart',
  {
    'DropdownMenuEntry.': _DropdownMenuEntry__$,
    'DropdownMenu.': _DropdownMenu__$,
  },
  {},
  {
    'DropdownMenuEntry': m.ClassMirror(
      'DropdownMenuEntry',
      {
        '#as': DropdownMenuEntry_as$,
        '#is': DropdownMenuEntry_is$,
        'value': _DropdownMenuEntry_value$,
        'label': _DropdownMenuEntry_label$,
        'leadingIcon': _DropdownMenuEntry_leadingIcon$,
        'trailingIcon': _DropdownMenuEntry_trailingIcon$,
        'enabled': _DropdownMenuEntry_enabled$,
        'style': _DropdownMenuEntry_style$,
      },
      {},
    ),
    'DropdownMenu': m.ClassMirror(
      'DropdownMenu',
      {
        '#as': DropdownMenu_as$,
        '#is': DropdownMenu_is$,
        'enabled': _DropdownMenu_enabled$,
        'width': _DropdownMenu_width$,
        'menuHeight': _DropdownMenu_menuHeight$,
        'leadingIcon': _DropdownMenu_leadingIcon$,
        'trailingIcon': _DropdownMenu_trailingIcon$,
        'label': _DropdownMenu_label$,
        'hintText': _DropdownMenu_hintText$,
        'helperText': _DropdownMenu_helperText$,
        'errorText': _DropdownMenu_errorText$,
        'selectedTrailingIcon': _DropdownMenu_selectedTrailingIcon$,
        'enableFilter': _DropdownMenu_enableFilter$,
        'enableSearch': _DropdownMenu_enableSearch$,
        'textStyle': _DropdownMenu_textStyle$,
        'inputDecorationTheme': _DropdownMenu_inputDecorationTheme$,
        'menuStyle': _DropdownMenu_menuStyle$,
        'controller': _DropdownMenu_controller$,
        'initialSelection': _DropdownMenu_initialSelection$,
        'onSelected': _DropdownMenu_onSelected$,
        'requestFocusOnTap': _DropdownMenu_requestFocusOnTap$,
        'dropdownMenuEntries': _DropdownMenu_dropdownMenuEntries$,
        'createState': _DropdownMenu_createState$,
      },
      {},
    ),
  },
);
Function DropdownMenuEntry_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DropdownMenuEntry<T>;
Function DropdownMenuEntry_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DropdownMenuEntry<T>;
Function _DropdownMenuEntry_value$<T>(
  m.Scope scope$,
  DropdownMenuEntry<T> target$,
) =>
    () {
      return target$.value;
    };
Function _DropdownMenuEntry_label$<T>(
  m.Scope scope$,
  DropdownMenuEntry<T> target$,
) =>
    () {
      return target$.label;
    };
Function _DropdownMenuEntry_leadingIcon$<T>(
  m.Scope scope$,
  DropdownMenuEntry<T> target$,
) =>
    () {
      return target$.leadingIcon;
    };
Function _DropdownMenuEntry_trailingIcon$<T>(
  m.Scope scope$,
  DropdownMenuEntry<T> target$,
) =>
    () {
      return target$.trailingIcon;
    };
Function _DropdownMenuEntry_enabled$<T>(
  m.Scope scope$,
  DropdownMenuEntry<T> target$,
) =>
    () {
      return target$.enabled;
    };
Function _DropdownMenuEntry_style$<T>(
  m.Scope scope$,
  DropdownMenuEntry<T> target$,
) =>
    () {
      return target$.style;
    };
Function _DropdownMenuEntry__$(m.Scope scope$) => ({
      required dynamic value,
      required String label,
      Widget? leadingIcon,
      Widget? trailingIcon,
      bool? enabled,
      ButtonStyle? style,
    }) {
      return DropdownMenuEntry(
        enabled: enabled ?? true,
        label: label,
        leadingIcon: leadingIcon,
        style: style,
        trailingIcon: trailingIcon,
        value: value,
      );
    };
Function DropdownMenu_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DropdownMenu<T>;
Function DropdownMenu_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DropdownMenu<T>;
Function _DropdownMenu_enabled$<T>(
  m.Scope scope$,
  DropdownMenu<T> target$,
) =>
    () {
      return target$.enabled;
    };
Function _DropdownMenu_width$<T>(
  m.Scope scope$,
  DropdownMenu<T> target$,
) =>
    () {
      return target$.width;
    };
Function _DropdownMenu_menuHeight$<T>(
  m.Scope scope$,
  DropdownMenu<T> target$,
) =>
    () {
      return target$.menuHeight;
    };
Function _DropdownMenu_leadingIcon$<T>(
  m.Scope scope$,
  DropdownMenu<T> target$,
) =>
    () {
      return target$.leadingIcon;
    };
Function _DropdownMenu_trailingIcon$<T>(
  m.Scope scope$,
  DropdownMenu<T> target$,
) =>
    () {
      return target$.trailingIcon;
    };
Function _DropdownMenu_label$<T>(
  m.Scope scope$,
  DropdownMenu<T> target$,
) =>
    () {
      return target$.label;
    };
Function _DropdownMenu_hintText$<T>(
  m.Scope scope$,
  DropdownMenu<T> target$,
) =>
    () {
      return target$.hintText;
    };
Function _DropdownMenu_helperText$<T>(
  m.Scope scope$,
  DropdownMenu<T> target$,
) =>
    () {
      return target$.helperText;
    };
Function _DropdownMenu_errorText$<T>(
  m.Scope scope$,
  DropdownMenu<T> target$,
) =>
    () {
      return target$.errorText;
    };
Function _DropdownMenu_selectedTrailingIcon$<T>(
  m.Scope scope$,
  DropdownMenu<T> target$,
) =>
    () {
      return target$.selectedTrailingIcon;
    };
Function _DropdownMenu_enableFilter$<T>(
  m.Scope scope$,
  DropdownMenu<T> target$,
) =>
    () {
      return target$.enableFilter;
    };
Function _DropdownMenu_enableSearch$<T>(
  m.Scope scope$,
  DropdownMenu<T> target$,
) =>
    () {
      return target$.enableSearch;
    };
Function _DropdownMenu_textStyle$<T>(
  m.Scope scope$,
  DropdownMenu<T> target$,
) =>
    () {
      return target$.textStyle;
    };
Function _DropdownMenu_inputDecorationTheme$<T>(
  m.Scope scope$,
  DropdownMenu<T> target$,
) =>
    () {
      return target$.inputDecorationTheme;
    };
Function _DropdownMenu_menuStyle$<T>(
  m.Scope scope$,
  DropdownMenu<T> target$,
) =>
    () {
      return target$.menuStyle;
    };
Function _DropdownMenu_controller$<T>(
  m.Scope scope$,
  DropdownMenu<T> target$,
) =>
    () {
      return target$.controller;
    };
Function _DropdownMenu_initialSelection$<T>(
  m.Scope scope$,
  DropdownMenu<T> target$,
) =>
    () {
      return target$.initialSelection;
    };
Function _DropdownMenu_onSelected$<T>(
  m.Scope scope$,
  DropdownMenu<T> target$,
) =>
    () {
      return target$.onSelected;
    };
Function _DropdownMenu_requestFocusOnTap$<T>(
  m.Scope scope$,
  DropdownMenu<T> target$,
) =>
    () {
      return target$.requestFocusOnTap;
    };
Function _DropdownMenu_dropdownMenuEntries$<T>(
  m.Scope scope$,
  DropdownMenu<T> target$,
) =>
    () {
      return target$.dropdownMenuEntries;
    };
Function _DropdownMenu__$(m.Scope scope$) => ({
      Key? key,
      bool? enabled,
      double? width,
      double? menuHeight,
      Widget? leadingIcon,
      Widget? trailingIcon,
      Widget? label,
      String? hintText,
      String? helperText,
      String? errorText,
      Widget? selectedTrailingIcon,
      bool? enableFilter,
      bool? enableSearch,
      TextStyle? textStyle,
      InputDecorationTheme? inputDecorationTheme,
      MenuStyle? menuStyle,
      TextEditingController? controller,
      dynamic? initialSelection,
      m.FunctionPointer? onSelected,
      bool? requestFocusOnTap,
      required List dropdownMenuEntries,
    }) {
      void onSelectedProxy(dynamic onSelected_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSelected!,
            [onSelected_value$],
            {},
          );
      return DropdownMenu(
        controller: controller,
        dropdownMenuEntries: List.from(dropdownMenuEntries),
        enableFilter: enableFilter ?? false,
        enableSearch: enableSearch ?? true,
        enabled: enabled ?? true,
        errorText: errorText,
        helperText: helperText,
        hintText: hintText,
        initialSelection: initialSelection,
        inputDecorationTheme: inputDecorationTheme,
        key: key,
        label: label,
        leadingIcon: leadingIcon,
        menuHeight: menuHeight,
        menuStyle: menuStyle,
        onSelected: onSelected == null ? null : onSelectedProxy,
        requestFocusOnTap: requestFocusOnTap,
        selectedTrailingIcon: selectedTrailingIcon,
        textStyle: textStyle,
        trailingIcon: trailingIcon,
        width: width,
      );
    };
Function _DropdownMenu_createState$<T>(
  m.Scope scope$,
  DropdownMenu<T> target$,
) =>
    target$.createState;
