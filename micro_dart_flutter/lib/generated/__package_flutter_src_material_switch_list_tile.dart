// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/switch_list_tile.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'package:flutter/src/material/list_tile_theme.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/switch.dart';
import 'package:flutter/src/material/switch_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/switch_list_tile.dart',
  {},
  {},
  {
    'SwitchListTile': m.ClassMirror(
      'SwitchListTile',
      {
        'value': _SwitchListTile_value$,
        'onChanged': _SwitchListTile_onChanged$,
        'activeColor': _SwitchListTile_activeColor$,
        'activeTrackColor': _SwitchListTile_activeTrackColor$,
        'inactiveThumbColor': _SwitchListTile_inactiveThumbColor$,
        'inactiveTrackColor': _SwitchListTile_inactiveTrackColor$,
        'activeThumbImage': _SwitchListTile_activeThumbImage$,
        'onActiveThumbImageError': _SwitchListTile_onActiveThumbImageError$,
        'inactiveThumbImage': _SwitchListTile_inactiveThumbImage$,
        'onInactiveThumbImageError': _SwitchListTile_onInactiveThumbImageError$,
        'thumbColor': _SwitchListTile_thumbColor$,
        'trackColor': _SwitchListTile_trackColor$,
        'trackOutlineColor': _SwitchListTile_trackOutlineColor$,
        'thumbIcon': _SwitchListTile_thumbIcon$,
        'materialTapTargetSize': _SwitchListTile_materialTapTargetSize$,
        'dragStartBehavior': _SwitchListTile_dragStartBehavior$,
        'mouseCursor': _SwitchListTile_mouseCursor$,
        'overlayColor': _SwitchListTile_overlayColor$,
        'splashRadius': _SwitchListTile_splashRadius$,
        'focusNode': _SwitchListTile_focusNode$,
        'onFocusChange': _SwitchListTile_onFocusChange$,
        'autofocus': _SwitchListTile_autofocus$,
        'tileColor': _SwitchListTile_tileColor$,
        'title': _SwitchListTile_title$,
        'subtitle': _SwitchListTile_subtitle$,
        'secondary': _SwitchListTile_secondary$,
        'isThreeLine': _SwitchListTile_isThreeLine$,
        'dense': _SwitchListTile_dense$,
        'contentPadding': _SwitchListTile_contentPadding$,
        'selected': _SwitchListTile_selected$,
        'controlAffinity': _SwitchListTile_controlAffinity$,
        'shape': _SwitchListTile_shape$,
        'selectedTileColor': _SwitchListTile_selectedTileColor$,
        'visualDensity': _SwitchListTile_visualDensity$,
        'enableFeedback': _SwitchListTile_enableFeedback$,
        'hoverColor': _SwitchListTile_hoverColor$,
        'applyCupertinoTheme': _SwitchListTile_applyCupertinoTheme$,
        'build': _SwitchListTile_build$,
      },
      {},
    )
  },
);
bool _SwitchListTile_value$(SwitchListTile target) {
  return target.value;
}

void Function(bool)? _SwitchListTile_onChanged$(SwitchListTile target) {
  return target.onChanged;
}

Color? _SwitchListTile_activeColor$(SwitchListTile target) {
  return target.activeColor;
}

Color? _SwitchListTile_activeTrackColor$(SwitchListTile target) {
  return target.activeTrackColor;
}

Color? _SwitchListTile_inactiveThumbColor$(SwitchListTile target) {
  return target.inactiveThumbColor;
}

Color? _SwitchListTile_inactiveTrackColor$(SwitchListTile target) {
  return target.inactiveTrackColor;
}

ImageProvider<Object>? _SwitchListTile_activeThumbImage$(
    SwitchListTile target) {
  return target.activeThumbImage;
}

void Function(Object, StackTrace?)? _SwitchListTile_onActiveThumbImageError$(
    SwitchListTile target) {
  return target.onActiveThumbImageError;
}

ImageProvider<Object>? _SwitchListTile_inactiveThumbImage$(
    SwitchListTile target) {
  return target.inactiveThumbImage;
}

void Function(Object, StackTrace?)? _SwitchListTile_onInactiveThumbImageError$(
    SwitchListTile target) {
  return target.onInactiveThumbImageError;
}

MaterialStateProperty<Color?>? _SwitchListTile_thumbColor$(
    SwitchListTile target) {
  return target.thumbColor;
}

MaterialStateProperty<Color?>? _SwitchListTile_trackColor$(
    SwitchListTile target) {
  return target.trackColor;
}

MaterialStateProperty<Color?>? _SwitchListTile_trackOutlineColor$(
    SwitchListTile target) {
  return target.trackOutlineColor;
}

MaterialStateProperty<Icon?>? _SwitchListTile_thumbIcon$(
    SwitchListTile target) {
  return target.thumbIcon;
}

MaterialTapTargetSize? _SwitchListTile_materialTapTargetSize$(
    SwitchListTile target) {
  return target.materialTapTargetSize;
}

DragStartBehavior _SwitchListTile_dragStartBehavior$(SwitchListTile target) {
  return target.dragStartBehavior;
}

MouseCursor? _SwitchListTile_mouseCursor$(SwitchListTile target) {
  return target.mouseCursor;
}

MaterialStateProperty<Color?>? _SwitchListTile_overlayColor$(
    SwitchListTile target) {
  return target.overlayColor;
}

double? _SwitchListTile_splashRadius$(SwitchListTile target) {
  return target.splashRadius;
}

FocusNode? _SwitchListTile_focusNode$(SwitchListTile target) {
  return target.focusNode;
}

void Function(bool)? _SwitchListTile_onFocusChange$(SwitchListTile target) {
  return target.onFocusChange;
}

bool _SwitchListTile_autofocus$(SwitchListTile target) {
  return target.autofocus;
}

Color? _SwitchListTile_tileColor$(SwitchListTile target) {
  return target.tileColor;
}

Widget? _SwitchListTile_title$(SwitchListTile target) {
  return target.title;
}

Widget? _SwitchListTile_subtitle$(SwitchListTile target) {
  return target.subtitle;
}

Widget? _SwitchListTile_secondary$(SwitchListTile target) {
  return target.secondary;
}

bool _SwitchListTile_isThreeLine$(SwitchListTile target) {
  return target.isThreeLine;
}

bool? _SwitchListTile_dense$(SwitchListTile target) {
  return target.dense;
}

EdgeInsetsGeometry? _SwitchListTile_contentPadding$(SwitchListTile target) {
  return target.contentPadding;
}

bool _SwitchListTile_selected$(SwitchListTile target) {
  return target.selected;
}

ListTileControlAffinity _SwitchListTile_controlAffinity$(
    SwitchListTile target) {
  return target.controlAffinity;
}

ShapeBorder? _SwitchListTile_shape$(SwitchListTile target) {
  return target.shape;
}

Color? _SwitchListTile_selectedTileColor$(SwitchListTile target) {
  return target.selectedTileColor;
}

VisualDensity? _SwitchListTile_visualDensity$(SwitchListTile target) {
  return target.visualDensity;
}

bool? _SwitchListTile_enableFeedback$(SwitchListTile target) {
  return target.enableFeedback;
}

Color? _SwitchListTile_hoverColor$(SwitchListTile target) {
  return target.hoverColor;
}

bool? _SwitchListTile_applyCupertinoTheme$(SwitchListTile target) {
  return target.applyCupertinoTheme;
}

Function _SwitchListTile_build$(
  m.Scope scope,
  SwitchListTile target,
) =>
    target.build;
