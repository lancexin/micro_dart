// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/switch_list_tile.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'package:flutter/src/material/list_tile_theme.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/switch.dart';
import 'package:flutter/src/material/switch_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/switch_list_tile.dart',
  {
    'SwitchListTile.': _SwitchListTile__$,
    'SwitchListTile.adaptive': _SwitchListTile_adaptive_$,
  },
  {},
  {
    'SwitchListTile': m.ClassMirror(
      'SwitchListTile',
      {
        '#as': SwitchListTile_as$,
        '#is': SwitchListTile_is$,
        'value': _SwitchListTile_value$,
        'onChanged': _SwitchListTile_onChanged$,
        'activeColor': _SwitchListTile_activeColor$,
        'activeTrackColor': _SwitchListTile_activeTrackColor$,
        'inactiveThumbColor': _SwitchListTile_inactiveThumbColor$,
        'inactiveTrackColor': _SwitchListTile_inactiveTrackColor$,
        'activeThumbImage': _SwitchListTile_activeThumbImage$,
        'onActiveThumbImageError': _SwitchListTile_onActiveThumbImageError$,
        'inactiveThumbImage': _SwitchListTile_inactiveThumbImage$,
        'onInactiveThumbImageError': _SwitchListTile_onInactiveThumbImageError$,
        'thumbColor': _SwitchListTile_thumbColor$,
        'trackColor': _SwitchListTile_trackColor$,
        'trackOutlineColor': _SwitchListTile_trackOutlineColor$,
        'thumbIcon': _SwitchListTile_thumbIcon$,
        'materialTapTargetSize': _SwitchListTile_materialTapTargetSize$,
        'dragStartBehavior': _SwitchListTile_dragStartBehavior$,
        'mouseCursor': _SwitchListTile_mouseCursor$,
        'overlayColor': _SwitchListTile_overlayColor$,
        'splashRadius': _SwitchListTile_splashRadius$,
        'focusNode': _SwitchListTile_focusNode$,
        'onFocusChange': _SwitchListTile_onFocusChange$,
        'autofocus': _SwitchListTile_autofocus$,
        'tileColor': _SwitchListTile_tileColor$,
        'title': _SwitchListTile_title$,
        'subtitle': _SwitchListTile_subtitle$,
        'secondary': _SwitchListTile_secondary$,
        'isThreeLine': _SwitchListTile_isThreeLine$,
        'dense': _SwitchListTile_dense$,
        'contentPadding': _SwitchListTile_contentPadding$,
        'selected': _SwitchListTile_selected$,
        'controlAffinity': _SwitchListTile_controlAffinity$,
        'shape': _SwitchListTile_shape$,
        'selectedTileColor': _SwitchListTile_selectedTileColor$,
        'visualDensity': _SwitchListTile_visualDensity$,
        'enableFeedback': _SwitchListTile_enableFeedback$,
        'hoverColor': _SwitchListTile_hoverColor$,
        'applyCupertinoTheme': _SwitchListTile_applyCupertinoTheme$,
        'build': _SwitchListTile_build$,
      },
      {},
    )
  },
);
Function SwitchListTile_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SwitchListTile;
Function SwitchListTile_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SwitchListTile;
Function _SwitchListTile_value$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.value;
    };
Function _SwitchListTile_onChanged$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.onChanged;
    };
Function _SwitchListTile_activeColor$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.activeColor;
    };
Function _SwitchListTile_activeTrackColor$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.activeTrackColor;
    };
Function _SwitchListTile_inactiveThumbColor$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.inactiveThumbColor;
    };
Function _SwitchListTile_inactiveTrackColor$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.inactiveTrackColor;
    };
Function _SwitchListTile_activeThumbImage$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.activeThumbImage;
    };
Function _SwitchListTile_onActiveThumbImageError$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.onActiveThumbImageError;
    };
Function _SwitchListTile_inactiveThumbImage$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.inactiveThumbImage;
    };
Function _SwitchListTile_onInactiveThumbImageError$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.onInactiveThumbImageError;
    };
Function _SwitchListTile_thumbColor$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.thumbColor;
    };
Function _SwitchListTile_trackColor$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.trackColor;
    };
Function _SwitchListTile_trackOutlineColor$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.trackOutlineColor;
    };
Function _SwitchListTile_thumbIcon$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.thumbIcon;
    };
Function _SwitchListTile_materialTapTargetSize$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.materialTapTargetSize;
    };
Function _SwitchListTile_dragStartBehavior$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.dragStartBehavior;
    };
Function _SwitchListTile_mouseCursor$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.mouseCursor;
    };
Function _SwitchListTile_overlayColor$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.overlayColor;
    };
Function _SwitchListTile_splashRadius$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.splashRadius;
    };
Function _SwitchListTile_focusNode$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.focusNode;
    };
Function _SwitchListTile_onFocusChange$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.onFocusChange;
    };
Function _SwitchListTile_autofocus$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.autofocus;
    };
Function _SwitchListTile_tileColor$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.tileColor;
    };
Function _SwitchListTile_title$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.title;
    };
Function _SwitchListTile_subtitle$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.subtitle;
    };
Function _SwitchListTile_secondary$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.secondary;
    };
Function _SwitchListTile_isThreeLine$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.isThreeLine;
    };
Function _SwitchListTile_dense$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.dense;
    };
Function _SwitchListTile_contentPadding$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.contentPadding;
    };
Function _SwitchListTile_selected$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.selected;
    };
Function _SwitchListTile_controlAffinity$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.controlAffinity;
    };
Function _SwitchListTile_shape$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.shape;
    };
Function _SwitchListTile_selectedTileColor$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.selectedTileColor;
    };
Function _SwitchListTile_visualDensity$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.visualDensity;
    };
Function _SwitchListTile_enableFeedback$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.enableFeedback;
    };
Function _SwitchListTile_hoverColor$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.hoverColor;
    };
Function _SwitchListTile_applyCupertinoTheme$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    () {
      return target$.applyCupertinoTheme;
    };
Function _SwitchListTile__$(m.Scope scope$) => ({
      Key? key,
      required bool value,
      required m.FunctionPointer? onChanged,
      Color? activeColor,
      Color? activeTrackColor,
      Color? inactiveThumbColor,
      Color? inactiveTrackColor,
      ImageProvider<Object>? activeThumbImage,
      m.FunctionPointer? onActiveThumbImageError,
      ImageProvider<Object>? inactiveThumbImage,
      m.FunctionPointer? onInactiveThumbImageError,
      MaterialStateProperty<Color>? thumbColor,
      MaterialStateProperty<Color>? trackColor,
      MaterialStateProperty<Color>? trackOutlineColor,
      MaterialStateProperty<Icon>? thumbIcon,
      MaterialTapTargetSize? materialTapTargetSize,
      DragStartBehavior? dragStartBehavior,
      MouseCursor? mouseCursor,
      MaterialStateProperty<Color>? overlayColor,
      double? splashRadius,
      FocusNode? focusNode,
      m.FunctionPointer? onFocusChange,
      bool? autofocus,
      Color? tileColor,
      Widget? title,
      Widget? subtitle,
      bool? isThreeLine,
      bool? dense,
      EdgeInsetsGeometry? contentPadding,
      Widget? secondary,
      bool? selected,
      ListTileControlAffinity? controlAffinity,
      ShapeBorder? shape,
      Color? selectedTileColor,
      VisualDensity? visualDensity,
      bool? enableFeedback,
      Color? hoverColor,
    }) {
      void onActiveThumbImageErrorProxy(
        Object onActiveThumbImageError_exception$,
        StackTrace? onActiveThumbImageError_stackTrace$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onActiveThumbImageError!,
            [
              onActiveThumbImageError_exception$,
              onActiveThumbImageError_stackTrace$,
            ],
            {},
          );
      void onChangedProxy(bool onChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChanged!,
            [onChanged_value$],
            {},
          );
      void onFocusChangeProxy(bool onFocusChange_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onFocusChange!,
            [onFocusChange_value$],
            {},
          );
      void onInactiveThumbImageErrorProxy(
        Object onInactiveThumbImageError_exception$,
        StackTrace? onInactiveThumbImageError_stackTrace$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onInactiveThumbImageError!,
            [
              onInactiveThumbImageError_exception$,
              onInactiveThumbImageError_stackTrace$,
            ],
            {},
          );
      return SwitchListTile(
        activeColor: activeColor,
        activeThumbImage: activeThumbImage,
        activeTrackColor: activeTrackColor,
        autofocus: autofocus ?? false,
        contentPadding: contentPadding,
        controlAffinity: controlAffinity ?? ListTileControlAffinity.platform,
        dense: dense,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        enableFeedback: enableFeedback,
        focusNode: focusNode,
        hoverColor: hoverColor,
        inactiveThumbColor: inactiveThumbColor,
        inactiveThumbImage: inactiveThumbImage,
        inactiveTrackColor: inactiveTrackColor,
        isThreeLine: isThreeLine ?? false,
        key: key,
        materialTapTargetSize: materialTapTargetSize,
        mouseCursor: mouseCursor,
        onActiveThumbImageError: onActiveThumbImageError == null
            ? null
            : onActiveThumbImageErrorProxy,
        onChanged: onChanged == null ? null : onChangedProxy,
        onFocusChange: onFocusChange == null ? null : onFocusChangeProxy,
        onInactiveThumbImageError: onInactiveThumbImageError == null
            ? null
            : onInactiveThumbImageErrorProxy,
        overlayColor: overlayColor,
        secondary: secondary,
        selected: selected ?? false,
        selectedTileColor: selectedTileColor,
        shape: shape,
        splashRadius: splashRadius,
        subtitle: subtitle,
        thumbColor: thumbColor,
        thumbIcon: thumbIcon,
        tileColor: tileColor,
        title: title,
        trackColor: trackColor,
        trackOutlineColor: trackOutlineColor,
        value: value,
        visualDensity: visualDensity,
      );
    };
Function _SwitchListTile_adaptive_$(m.Scope scope$) => ({
      Key? key,
      required bool value,
      required m.FunctionPointer? onChanged,
      Color? activeColor,
      Color? activeTrackColor,
      Color? inactiveThumbColor,
      Color? inactiveTrackColor,
      ImageProvider<Object>? activeThumbImage,
      m.FunctionPointer? onActiveThumbImageError,
      ImageProvider<Object>? inactiveThumbImage,
      m.FunctionPointer? onInactiveThumbImageError,
      MaterialStateProperty<Color>? thumbColor,
      MaterialStateProperty<Color>? trackColor,
      MaterialStateProperty<Color>? trackOutlineColor,
      MaterialStateProperty<Icon>? thumbIcon,
      MaterialTapTargetSize? materialTapTargetSize,
      DragStartBehavior? dragStartBehavior,
      MouseCursor? mouseCursor,
      MaterialStateProperty<Color>? overlayColor,
      double? splashRadius,
      FocusNode? focusNode,
      m.FunctionPointer? onFocusChange,
      bool? autofocus,
      bool? applyCupertinoTheme,
      Color? tileColor,
      Widget? title,
      Widget? subtitle,
      bool? isThreeLine,
      bool? dense,
      EdgeInsetsGeometry? contentPadding,
      Widget? secondary,
      bool? selected,
      ListTileControlAffinity? controlAffinity,
      ShapeBorder? shape,
      Color? selectedTileColor,
      VisualDensity? visualDensity,
      bool? enableFeedback,
      Color? hoverColor,
    }) {
      void onActiveThumbImageErrorProxy(
        Object onActiveThumbImageError_exception$,
        StackTrace? onActiveThumbImageError_stackTrace$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onActiveThumbImageError!,
            [
              onActiveThumbImageError_exception$,
              onActiveThumbImageError_stackTrace$,
            ],
            {},
          );
      void onChangedProxy(bool onChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChanged!,
            [onChanged_value$],
            {},
          );
      void onFocusChangeProxy(bool onFocusChange_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onFocusChange!,
            [onFocusChange_value$],
            {},
          );
      void onInactiveThumbImageErrorProxy(
        Object onInactiveThumbImageError_exception$,
        StackTrace? onInactiveThumbImageError_stackTrace$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onInactiveThumbImageError!,
            [
              onInactiveThumbImageError_exception$,
              onInactiveThumbImageError_stackTrace$,
            ],
            {},
          );
      return SwitchListTile.adaptive(
        activeColor: activeColor,
        activeThumbImage: activeThumbImage,
        activeTrackColor: activeTrackColor,
        applyCupertinoTheme: applyCupertinoTheme,
        autofocus: autofocus ?? false,
        contentPadding: contentPadding,
        controlAffinity: controlAffinity ?? ListTileControlAffinity.platform,
        dense: dense,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        enableFeedback: enableFeedback,
        focusNode: focusNode,
        hoverColor: hoverColor,
        inactiveThumbColor: inactiveThumbColor,
        inactiveThumbImage: inactiveThumbImage,
        inactiveTrackColor: inactiveTrackColor,
        isThreeLine: isThreeLine ?? false,
        key: key,
        materialTapTargetSize: materialTapTargetSize,
        mouseCursor: mouseCursor,
        onActiveThumbImageError: onActiveThumbImageError == null
            ? null
            : onActiveThumbImageErrorProxy,
        onChanged: onChanged == null ? null : onChangedProxy,
        onFocusChange: onFocusChange == null ? null : onFocusChangeProxy,
        onInactiveThumbImageError: onInactiveThumbImageError == null
            ? null
            : onInactiveThumbImageErrorProxy,
        overlayColor: overlayColor,
        secondary: secondary,
        selected: selected ?? false,
        selectedTileColor: selectedTileColor,
        shape: shape,
        splashRadius: splashRadius,
        subtitle: subtitle,
        thumbColor: thumbColor,
        thumbIcon: thumbIcon,
        tileColor: tileColor,
        title: title,
        trackColor: trackColor,
        trackOutlineColor: trackOutlineColor,
        value: value,
        visualDensity: visualDensity,
      );
    };
Function _SwitchListTile_build$(
  m.Scope scope$,
  SwitchListTile target$,
) =>
    target$.build;
