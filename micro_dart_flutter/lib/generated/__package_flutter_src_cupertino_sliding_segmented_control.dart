// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/sliding_segmented_control.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/physics.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/sliding_segmented_control.dart',
  {},
  {},
  {
    'CupertinoSlidingSegmentedControl': m.ClassMirror(
      'CupertinoSlidingSegmentedControl',
      {
        '#as': CupertinoSlidingSegmentedControl_as$,
        '#is': CupertinoSlidingSegmentedControl_is$,
        'children': _CupertinoSlidingSegmentedControl_children$,
        'groupValue': _CupertinoSlidingSegmentedControl_groupValue$,
        'onValueChanged': _CupertinoSlidingSegmentedControl_onValueChanged$,
        'backgroundColor': _CupertinoSlidingSegmentedControl_backgroundColor$,
        'thumbColor': _CupertinoSlidingSegmentedControl_thumbColor$,
        'padding': _CupertinoSlidingSegmentedControl_padding$,
        'createState': _CupertinoSlidingSegmentedControl_createState$,
      },
      {},
    )
  },
);
Function CupertinoSlidingSegmentedControl_as$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CupertinoSlidingSegmentedControl<T>;
Function CupertinoSlidingSegmentedControl_is$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CupertinoSlidingSegmentedControl<T>;
Map<T, Widget> _CupertinoSlidingSegmentedControl_children$<T>(
    CupertinoSlidingSegmentedControl<T> target) {
  return target.children;
}

T? _CupertinoSlidingSegmentedControl_groupValue$<T>(
    CupertinoSlidingSegmentedControl<T> target) {
  return target.groupValue;
}

void Function(T?) _CupertinoSlidingSegmentedControl_onValueChanged$<T>(
    CupertinoSlidingSegmentedControl<T> target) {
  return target.onValueChanged;
}

Color _CupertinoSlidingSegmentedControl_backgroundColor$<T>(
    CupertinoSlidingSegmentedControl<T> target) {
  return target.backgroundColor;
}

Color _CupertinoSlidingSegmentedControl_thumbColor$<T>(
    CupertinoSlidingSegmentedControl<T> target) {
  return target.thumbColor;
}

EdgeInsetsGeometry _CupertinoSlidingSegmentedControl_padding$<T>(
    CupertinoSlidingSegmentedControl<T> target) {
  return target.padding;
}

Function _CupertinoSlidingSegmentedControl_createState$<T>(
  m.Scope scope,
  CupertinoSlidingSegmentedControl<T> target,
) =>
    target.createState;
