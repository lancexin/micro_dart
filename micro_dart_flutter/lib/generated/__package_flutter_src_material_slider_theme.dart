// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/slider_theme.dart';
import 'dart:math';
import 'dart:ui' show Path, lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/slider_theme.dart',
  {
    'SliderTheme.of': _SliderTheme_of$,
    'SliderThemeData.copyWith': _SliderThemeData_copyWith$,
    'SliderThemeData.lerp': _SliderThemeData_lerp$,
    'SliderComponentShape.noThumb': _SliderComponentShape_noThumb$,
    'SliderComponentShape.noOverlay': _SliderComponentShape_noOverlay$,
    'SliderTickMarkShape.noTickMark': _SliderTickMarkShape_noTickMark$,
    'ShowValueIndicator.onlyForDiscrete': _ShowValueIndicator_onlyForDiscrete$,
    'ShowValueIndicator.onlyForContinuous':
        _ShowValueIndicator_onlyForContinuous$,
    'ShowValueIndicator.always': _ShowValueIndicator_always$,
    'ShowValueIndicator.never': _ShowValueIndicator_never$,
    'ShowValueIndicator.values': _ShowValueIndicator_values$,
    'Thumb.start': _Thumb_start$,
    'Thumb.end': _Thumb_end$,
    'Thumb.values': _Thumb_values$,
  },
  {},
  {
    'SliderTheme': m.ClassMirror(
      'SliderTheme',
      {
        '#as': SliderTheme_as$,
        '#is': SliderTheme_is$,
        'data': _SliderTheme_data$,
        'wrap': _SliderTheme_wrap$,
        'updateShouldNotify': _SliderTheme_updateShouldNotify$,
      },
      {},
    ),
    'SliderThemeData': m.ClassMirror(
      'SliderThemeData',
      {
        '#as': SliderThemeData_as$,
        '#is': SliderThemeData_is$,
        'trackHeight': _SliderThemeData_trackHeight$,
        'activeTrackColor': _SliderThemeData_activeTrackColor$,
        'inactiveTrackColor': _SliderThemeData_inactiveTrackColor$,
        'secondaryActiveTrackColor':
            _SliderThemeData_secondaryActiveTrackColor$,
        'disabledActiveTrackColor': _SliderThemeData_disabledActiveTrackColor$,
        'disabledSecondaryActiveTrackColor':
            _SliderThemeData_disabledSecondaryActiveTrackColor$,
        'disabledInactiveTrackColor':
            _SliderThemeData_disabledInactiveTrackColor$,
        'activeTickMarkColor': _SliderThemeData_activeTickMarkColor$,
        'inactiveTickMarkColor': _SliderThemeData_inactiveTickMarkColor$,
        'disabledActiveTickMarkColor':
            _SliderThemeData_disabledActiveTickMarkColor$,
        'disabledInactiveTickMarkColor':
            _SliderThemeData_disabledInactiveTickMarkColor$,
        'thumbColor': _SliderThemeData_thumbColor$,
        'overlappingShapeStrokeColor':
            _SliderThemeData_overlappingShapeStrokeColor$,
        'disabledThumbColor': _SliderThemeData_disabledThumbColor$,
        'overlayColor': _SliderThemeData_overlayColor$,
        'valueIndicatorColor': _SliderThemeData_valueIndicatorColor$,
        'overlayShape': _SliderThemeData_overlayShape$,
        'tickMarkShape': _SliderThemeData_tickMarkShape$,
        'thumbShape': _SliderThemeData_thumbShape$,
        'trackShape': _SliderThemeData_trackShape$,
        'valueIndicatorShape': _SliderThemeData_valueIndicatorShape$,
        'rangeTickMarkShape': _SliderThemeData_rangeTickMarkShape$,
        'rangeThumbShape': _SliderThemeData_rangeThumbShape$,
        'rangeTrackShape': _SliderThemeData_rangeTrackShape$,
        'rangeValueIndicatorShape': _SliderThemeData_rangeValueIndicatorShape$,
        'showValueIndicator': _SliderThemeData_showValueIndicator$,
        'valueIndicatorTextStyle': _SliderThemeData_valueIndicatorTextStyle$,
        'minThumbSeparation': _SliderThemeData_minThumbSeparation$,
        'thumbSelector': _SliderThemeData_thumbSelector$,
        'mouseCursor': _SliderThemeData_mouseCursor$,
        'hashCode': _SliderThemeData_hashCode$,
        '==': _SliderThemeData_eq$$,
        'debugFillProperties': _SliderThemeData_debugFillProperties$,
      },
      {},
    ),
    'SliderComponentShape': m.ClassMirror(
      'SliderComponentShape',
      {
        '#as': SliderComponentShape_as$,
        '#is': SliderComponentShape_is$,
        'getPreferredSize': _SliderComponentShape_getPreferredSize$,
        'paint': _SliderComponentShape_paint$,
      },
      {},
    ),
    'SliderTickMarkShape': m.ClassMirror(
      'SliderTickMarkShape',
      {
        '#as': SliderTickMarkShape_as$,
        '#is': SliderTickMarkShape_is$,
        'getPreferredSize': _SliderTickMarkShape_getPreferredSize$,
        'paint': _SliderTickMarkShape_paint$,
      },
      {},
    ),
    'SliderTrackShape': m.ClassMirror(
      'SliderTrackShape',
      {
        '#as': SliderTrackShape_as$,
        '#is': SliderTrackShape_is$,
        'getPreferredRect': _SliderTrackShape_getPreferredRect$,
        'paint': _SliderTrackShape_paint$,
      },
      {},
    ),
    'RangeSliderThumbShape': m.ClassMirror(
      'RangeSliderThumbShape',
      {
        '#as': RangeSliderThumbShape_as$,
        '#is': RangeSliderThumbShape_is$,
        'getPreferredSize': _RangeSliderThumbShape_getPreferredSize$,
        'paint': _RangeSliderThumbShape_paint$,
      },
      {},
    ),
    'RangeSliderValueIndicatorShape': m.ClassMirror(
      'RangeSliderValueIndicatorShape',
      {
        '#as': RangeSliderValueIndicatorShape_as$,
        '#is': RangeSliderValueIndicatorShape_is$,
        'getPreferredSize': _RangeSliderValueIndicatorShape_getPreferredSize$,
        'getHorizontalShift':
            _RangeSliderValueIndicatorShape_getHorizontalShift$,
        'paint': _RangeSliderValueIndicatorShape_paint$,
      },
      {},
    ),
    'RangeSliderTickMarkShape': m.ClassMirror(
      'RangeSliderTickMarkShape',
      {
        '#as': RangeSliderTickMarkShape_as$,
        '#is': RangeSliderTickMarkShape_is$,
        'getPreferredSize': _RangeSliderTickMarkShape_getPreferredSize$,
        'paint': _RangeSliderTickMarkShape_paint$,
      },
      {},
    ),
    'RangeSliderTrackShape': m.ClassMirror(
      'RangeSliderTrackShape',
      {
        '#as': RangeSliderTrackShape_as$,
        '#is': RangeSliderTrackShape_is$,
        'getPreferredRect': _RangeSliderTrackShape_getPreferredRect$,
        'paint': _RangeSliderTrackShape_paint$,
      },
      {},
    ),
    'RectangularSliderTrackShape': m.ClassMirror(
      'RectangularSliderTrackShape',
      {
        '#as': RectangularSliderTrackShape_as$,
        '#is': RectangularSliderTrackShape_is$,
        'paint': _RectangularSliderTrackShape_paint$,
      },
      {},
    ),
    'RoundedRectSliderTrackShape': m.ClassMirror(
      'RoundedRectSliderTrackShape',
      {
        '#as': RoundedRectSliderTrackShape_as$,
        '#is': RoundedRectSliderTrackShape_is$,
        'paint': _RoundedRectSliderTrackShape_paint$,
      },
      {},
    ),
    'RectangularRangeSliderTrackShape': m.ClassMirror(
      'RectangularRangeSliderTrackShape',
      {
        '#as': RectangularRangeSliderTrackShape_as$,
        '#is': RectangularRangeSliderTrackShape_is$,
        'getPreferredRect': _RectangularRangeSliderTrackShape_getPreferredRect$,
        'paint': _RectangularRangeSliderTrackShape_paint$,
      },
      {},
    ),
    'RoundedRectRangeSliderTrackShape': m.ClassMirror(
      'RoundedRectRangeSliderTrackShape',
      {
        '#as': RoundedRectRangeSliderTrackShape_as$,
        '#is': RoundedRectRangeSliderTrackShape_is$,
        'getPreferredRect': _RoundedRectRangeSliderTrackShape_getPreferredRect$,
        'paint': _RoundedRectRangeSliderTrackShape_paint$,
      },
      {},
    ),
    'RoundSliderTickMarkShape': m.ClassMirror(
      'RoundSliderTickMarkShape',
      {
        '#as': RoundSliderTickMarkShape_as$,
        '#is': RoundSliderTickMarkShape_is$,
        'tickMarkRadius': _RoundSliderTickMarkShape_tickMarkRadius$,
        'getPreferredSize': _RoundSliderTickMarkShape_getPreferredSize$,
        'paint': _RoundSliderTickMarkShape_paint$,
      },
      {},
    ),
    'RoundRangeSliderTickMarkShape': m.ClassMirror(
      'RoundRangeSliderTickMarkShape',
      {
        '#as': RoundRangeSliderTickMarkShape_as$,
        '#is': RoundRangeSliderTickMarkShape_is$,
        'tickMarkRadius': _RoundRangeSliderTickMarkShape_tickMarkRadius$,
        'getPreferredSize': _RoundRangeSliderTickMarkShape_getPreferredSize$,
        'paint': _RoundRangeSliderTickMarkShape_paint$,
      },
      {},
    ),
    'RoundSliderThumbShape': m.ClassMirror(
      'RoundSliderThumbShape',
      {
        '#as': RoundSliderThumbShape_as$,
        '#is': RoundSliderThumbShape_is$,
        'enabledThumbRadius': _RoundSliderThumbShape_enabledThumbRadius$,
        'disabledThumbRadius': _RoundSliderThumbShape_disabledThumbRadius$,
        'elevation': _RoundSliderThumbShape_elevation$,
        'pressedElevation': _RoundSliderThumbShape_pressedElevation$,
        'getPreferredSize': _RoundSliderThumbShape_getPreferredSize$,
        'paint': _RoundSliderThumbShape_paint$,
      },
      {},
    ),
    'RoundRangeSliderThumbShape': m.ClassMirror(
      'RoundRangeSliderThumbShape',
      {
        '#as': RoundRangeSliderThumbShape_as$,
        '#is': RoundRangeSliderThumbShape_is$,
        'enabledThumbRadius': _RoundRangeSliderThumbShape_enabledThumbRadius$,
        'disabledThumbRadius': _RoundRangeSliderThumbShape_disabledThumbRadius$,
        'elevation': _RoundRangeSliderThumbShape_elevation$,
        'pressedElevation': _RoundRangeSliderThumbShape_pressedElevation$,
        'getPreferredSize': _RoundRangeSliderThumbShape_getPreferredSize$,
        'paint': _RoundRangeSliderThumbShape_paint$,
      },
      {},
    ),
    'RoundSliderOverlayShape': m.ClassMirror(
      'RoundSliderOverlayShape',
      {
        '#as': RoundSliderOverlayShape_as$,
        '#is': RoundSliderOverlayShape_is$,
        'overlayRadius': _RoundSliderOverlayShape_overlayRadius$,
        'getPreferredSize': _RoundSliderOverlayShape_getPreferredSize$,
        'paint': _RoundSliderOverlayShape_paint$,
      },
      {},
    ),
    'RectangularSliderValueIndicatorShape': m.ClassMirror(
      'RectangularSliderValueIndicatorShape',
      {
        '#as': RectangularSliderValueIndicatorShape_as$,
        '#is': RectangularSliderValueIndicatorShape_is$,
        'getPreferredSize':
            _RectangularSliderValueIndicatorShape_getPreferredSize$,
        'paint': _RectangularSliderValueIndicatorShape_paint$,
      },
      {},
    ),
    'RectangularRangeSliderValueIndicatorShape': m.ClassMirror(
      'RectangularRangeSliderValueIndicatorShape',
      {
        '#as': RectangularRangeSliderValueIndicatorShape_as$,
        '#is': RectangularRangeSliderValueIndicatorShape_is$,
        'getPreferredSize':
            _RectangularRangeSliderValueIndicatorShape_getPreferredSize$,
        'getHorizontalShift':
            _RectangularRangeSliderValueIndicatorShape_getHorizontalShift$,
        'paint': _RectangularRangeSliderValueIndicatorShape_paint$,
      },
      {},
    ),
    'PaddleSliderValueIndicatorShape': m.ClassMirror(
      'PaddleSliderValueIndicatorShape',
      {
        '#as': PaddleSliderValueIndicatorShape_as$,
        '#is': PaddleSliderValueIndicatorShape_is$,
        'getPreferredSize': _PaddleSliderValueIndicatorShape_getPreferredSize$,
        'paint': _PaddleSliderValueIndicatorShape_paint$,
      },
      {},
    ),
    'PaddleRangeSliderValueIndicatorShape': m.ClassMirror(
      'PaddleRangeSliderValueIndicatorShape',
      {
        '#as': PaddleRangeSliderValueIndicatorShape_as$,
        '#is': PaddleRangeSliderValueIndicatorShape_is$,
        'getPreferredSize':
            _PaddleRangeSliderValueIndicatorShape_getPreferredSize$,
        'getHorizontalShift':
            _PaddleRangeSliderValueIndicatorShape_getHorizontalShift$,
        'paint': _PaddleRangeSliderValueIndicatorShape_paint$,
      },
      {},
    ),
    'RangeValues': m.ClassMirror(
      'RangeValues',
      {
        '#as': RangeValues_as$,
        '#is': RangeValues_is$,
        'start': _RangeValues_start$,
        'end': _RangeValues_end$,
        'hashCode': _RangeValues_hashCode$,
        '==': _RangeValues_eq$$,
        'toString': _RangeValues_toString$,
      },
      {},
    ),
    'RangeLabels': m.ClassMirror(
      'RangeLabels',
      {
        '#as': RangeLabels_as$,
        '#is': RangeLabels_is$,
        'start': _RangeLabels_start$,
        'end': _RangeLabels_end$,
        'hashCode': _RangeLabels_hashCode$,
        '==': _RangeLabels_eq$$,
        'toString': _RangeLabels_toString$,
      },
      {},
    ),
    'DropSliderValueIndicatorShape': m.ClassMirror(
      'DropSliderValueIndicatorShape',
      {
        '#as': DropSliderValueIndicatorShape_as$,
        '#is': DropSliderValueIndicatorShape_is$,
        'getPreferredSize': _DropSliderValueIndicatorShape_getPreferredSize$,
        'paint': _DropSliderValueIndicatorShape_paint$,
      },
      {},
    ),
    'ShowValueIndicator': m.ClassMirror(
      'ShowValueIndicator',
      {},
      {},
    ),
    'Thumb': m.ClassMirror(
      'Thumb',
      {},
      {},
    ),
  },
);
Function SliderTheme_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SliderTheme;
Function SliderTheme_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SliderTheme;
SliderThemeData _SliderTheme_data$(SliderTheme target) {
  return target.data;
}

Function _SliderTheme_of$(m.Scope scope) => SliderTheme.of;
Function _SliderTheme_wrap$(
  m.Scope scope,
  SliderTheme target,
) =>
    target.wrap;
Function _SliderTheme_updateShouldNotify$(
  m.Scope scope,
  SliderTheme target,
) =>
    target.updateShouldNotify;
Function SliderThemeData_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SliderThemeData;
Function SliderThemeData_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SliderThemeData;
double? _SliderThemeData_trackHeight$(SliderThemeData target) {
  return target.trackHeight;
}

Color? _SliderThemeData_activeTrackColor$(SliderThemeData target) {
  return target.activeTrackColor;
}

Color? _SliderThemeData_inactiveTrackColor$(SliderThemeData target) {
  return target.inactiveTrackColor;
}

Color? _SliderThemeData_secondaryActiveTrackColor$(SliderThemeData target) {
  return target.secondaryActiveTrackColor;
}

Color? _SliderThemeData_disabledActiveTrackColor$(SliderThemeData target) {
  return target.disabledActiveTrackColor;
}

Color? _SliderThemeData_disabledSecondaryActiveTrackColor$(
    SliderThemeData target) {
  return target.disabledSecondaryActiveTrackColor;
}

Color? _SliderThemeData_disabledInactiveTrackColor$(SliderThemeData target) {
  return target.disabledInactiveTrackColor;
}

Color? _SliderThemeData_activeTickMarkColor$(SliderThemeData target) {
  return target.activeTickMarkColor;
}

Color? _SliderThemeData_inactiveTickMarkColor$(SliderThemeData target) {
  return target.inactiveTickMarkColor;
}

Color? _SliderThemeData_disabledActiveTickMarkColor$(SliderThemeData target) {
  return target.disabledActiveTickMarkColor;
}

Color? _SliderThemeData_disabledInactiveTickMarkColor$(SliderThemeData target) {
  return target.disabledInactiveTickMarkColor;
}

Color? _SliderThemeData_thumbColor$(SliderThemeData target) {
  return target.thumbColor;
}

Color? _SliderThemeData_overlappingShapeStrokeColor$(SliderThemeData target) {
  return target.overlappingShapeStrokeColor;
}

Color? _SliderThemeData_disabledThumbColor$(SliderThemeData target) {
  return target.disabledThumbColor;
}

Color? _SliderThemeData_overlayColor$(SliderThemeData target) {
  return target.overlayColor;
}

Color? _SliderThemeData_valueIndicatorColor$(SliderThemeData target) {
  return target.valueIndicatorColor;
}

SliderComponentShape? _SliderThemeData_overlayShape$(SliderThemeData target) {
  return target.overlayShape;
}

SliderTickMarkShape? _SliderThemeData_tickMarkShape$(SliderThemeData target) {
  return target.tickMarkShape;
}

SliderComponentShape? _SliderThemeData_thumbShape$(SliderThemeData target) {
  return target.thumbShape;
}

SliderTrackShape? _SliderThemeData_trackShape$(SliderThemeData target) {
  return target.trackShape;
}

SliderComponentShape? _SliderThemeData_valueIndicatorShape$(
    SliderThemeData target) {
  return target.valueIndicatorShape;
}

RangeSliderTickMarkShape? _SliderThemeData_rangeTickMarkShape$(
    SliderThemeData target) {
  return target.rangeTickMarkShape;
}

RangeSliderThumbShape? _SliderThemeData_rangeThumbShape$(
    SliderThemeData target) {
  return target.rangeThumbShape;
}

RangeSliderTrackShape? _SliderThemeData_rangeTrackShape$(
    SliderThemeData target) {
  return target.rangeTrackShape;
}

RangeSliderValueIndicatorShape? _SliderThemeData_rangeValueIndicatorShape$(
    SliderThemeData target) {
  return target.rangeValueIndicatorShape;
}

ShowValueIndicator? _SliderThemeData_showValueIndicator$(
    SliderThemeData target) {
  return target.showValueIndicator;
}

TextStyle? _SliderThemeData_valueIndicatorTextStyle$(SliderThemeData target) {
  return target.valueIndicatorTextStyle;
}

double? _SliderThemeData_minThumbSeparation$(SliderThemeData target) {
  return target.minThumbSeparation;
}

Thumb? Function(TextDirection, RangeValues, double, Size, Size, double)?
    _SliderThemeData_thumbSelector$(SliderThemeData target) {
  return target.thumbSelector;
}

MaterialStateProperty<MouseCursor?>? _SliderThemeData_mouseCursor$(
    SliderThemeData target) {
  return target.mouseCursor;
}

int _SliderThemeData_hashCode$(SliderThemeData target) {
  return target.hashCode;
}

Function _SliderThemeData_copyWith$(
  m.Scope scope,
  SliderThemeData target,
) =>
    ({
      Color? activeTickMarkColor,
      Color? activeTrackColor,
      Color? disabledActiveTickMarkColor,
      Color? disabledActiveTrackColor,
      Color? disabledInactiveTickMarkColor,
      Color? disabledInactiveTrackColor,
      Color? disabledSecondaryActiveTrackColor,
      Color? disabledThumbColor,
      Color? inactiveTickMarkColor,
      Color? inactiveTrackColor,
      double? minThumbSeparation,
      MaterialStateProperty<MouseCursor?>? mouseCursor,
      Color? overlappingShapeStrokeColor,
      Color? overlayColor,
      SliderComponentShape? overlayShape,
      RangeSliderThumbShape? rangeThumbShape,
      RangeSliderTickMarkShape? rangeTickMarkShape,
      RangeSliderTrackShape? rangeTrackShape,
      RangeSliderValueIndicatorShape? rangeValueIndicatorShape,
      Color? secondaryActiveTrackColor,
      ShowValueIndicator? showValueIndicator,
      Color? thumbColor,
      m.FunctionPointer? thumbSelector,
      SliderComponentShape? thumbShape,
      SliderTickMarkShape? tickMarkShape,
      double? trackHeight,
      SliderTrackShape? trackShape,
      Color? valueIndicatorColor,
      SliderComponentShape? valueIndicatorShape,
      TextStyle? valueIndicatorTextStyle,
    }) {
      Thumb? thumbSelectorProxy(
        TextDirection thumbSelector_textDirection,
        RangeValues thumbSelector_values,
        double thumbSelector_tapValue,
        Size thumbSelector_thumbSize,
        Size thumbSelector_trackSize,
        double thumbSelector_dx,
      ) =>
          scope.engine.callFunctionPointer(
            scope,
            thumbSelector!,
            [
              thumbSelector_textDirection,
              thumbSelector_values,
              thumbSelector_tapValue,
              thumbSelector_thumbSize,
              thumbSelector_trackSize,
              thumbSelector_dx,
            ],
            {},
          );
      return target.copyWith(
        activeTickMarkColor: activeTickMarkColor,
        activeTrackColor: activeTrackColor,
        disabledActiveTickMarkColor: disabledActiveTickMarkColor,
        disabledActiveTrackColor: disabledActiveTrackColor,
        disabledInactiveTickMarkColor: disabledInactiveTickMarkColor,
        disabledInactiveTrackColor: disabledInactiveTrackColor,
        disabledSecondaryActiveTrackColor: disabledSecondaryActiveTrackColor,
        disabledThumbColor: disabledThumbColor,
        inactiveTickMarkColor: inactiveTickMarkColor,
        inactiveTrackColor: inactiveTrackColor,
        minThumbSeparation: minThumbSeparation,
        mouseCursor: mouseCursor,
        overlappingShapeStrokeColor: overlappingShapeStrokeColor,
        overlayColor: overlayColor,
        overlayShape: overlayShape,
        rangeThumbShape: rangeThumbShape,
        rangeTickMarkShape: rangeTickMarkShape,
        rangeTrackShape: rangeTrackShape,
        rangeValueIndicatorShape: rangeValueIndicatorShape,
        secondaryActiveTrackColor: secondaryActiveTrackColor,
        showValueIndicator: showValueIndicator,
        thumbColor: thumbColor,
        thumbSelector: thumbSelector == null ? null : thumbSelectorProxy,
        thumbShape: thumbShape,
        tickMarkShape: tickMarkShape,
        trackHeight: trackHeight,
        trackShape: trackShape,
        valueIndicatorColor: valueIndicatorColor,
        valueIndicatorShape: valueIndicatorShape,
        valueIndicatorTextStyle: valueIndicatorTextStyle,
      );
    };
Function _SliderThemeData_lerp$(m.Scope scope) => SliderThemeData.lerp;
Function _SliderThemeData_eq$$(
  m.Scope scope,
  SliderThemeData target,
) =>
    (Object other) => target == other;
Function _SliderThemeData_debugFillProperties$(
  m.Scope scope,
  SliderThemeData target,
) =>
    target.debugFillProperties;
Function SliderComponentShape_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SliderComponentShape;
Function SliderComponentShape_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SliderComponentShape;
SliderComponentShape _SliderComponentShape_noThumb$() {
  return SliderComponentShape.noThumb;
}

SliderComponentShape _SliderComponentShape_noOverlay$() {
  return SliderComponentShape.noOverlay;
}

Function _SliderComponentShape_getPreferredSize$(
  m.Scope scope,
  SliderComponentShape target,
) =>
    target.getPreferredSize;
Function _SliderComponentShape_paint$(
  m.Scope scope,
  SliderComponentShape target,
) =>
    target.paint;
Function SliderTickMarkShape_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SliderTickMarkShape;
Function SliderTickMarkShape_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SliderTickMarkShape;
SliderTickMarkShape _SliderTickMarkShape_noTickMark$() {
  return SliderTickMarkShape.noTickMark;
}

Function _SliderTickMarkShape_getPreferredSize$(
  m.Scope scope,
  SliderTickMarkShape target,
) =>
    target.getPreferredSize;
Function _SliderTickMarkShape_paint$(
  m.Scope scope,
  SliderTickMarkShape target,
) =>
    target.paint;
Function SliderTrackShape_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SliderTrackShape;
Function SliderTrackShape_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SliderTrackShape;
Function _SliderTrackShape_getPreferredRect$(
  m.Scope scope,
  SliderTrackShape target,
) =>
    target.getPreferredRect;
Function _SliderTrackShape_paint$(
  m.Scope scope,
  SliderTrackShape target,
) =>
    target.paint;
Function RangeSliderThumbShape_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RangeSliderThumbShape;
Function RangeSliderThumbShape_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RangeSliderThumbShape;
Function _RangeSliderThumbShape_getPreferredSize$(
  m.Scope scope,
  RangeSliderThumbShape target,
) =>
    target.getPreferredSize;
Function _RangeSliderThumbShape_paint$(
  m.Scope scope,
  RangeSliderThumbShape target,
) =>
    target.paint;
Function RangeSliderValueIndicatorShape_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RangeSliderValueIndicatorShape;
Function RangeSliderValueIndicatorShape_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RangeSliderValueIndicatorShape;
Function _RangeSliderValueIndicatorShape_getPreferredSize$(
  m.Scope scope,
  RangeSliderValueIndicatorShape target,
) =>
    target.getPreferredSize;
Function _RangeSliderValueIndicatorShape_getHorizontalShift$(
  m.Scope scope,
  RangeSliderValueIndicatorShape target,
) =>
    target.getHorizontalShift;
Function _RangeSliderValueIndicatorShape_paint$(
  m.Scope scope,
  RangeSliderValueIndicatorShape target,
) =>
    target.paint;
Function RangeSliderTickMarkShape_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RangeSliderTickMarkShape;
Function RangeSliderTickMarkShape_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RangeSliderTickMarkShape;
Function _RangeSliderTickMarkShape_getPreferredSize$(
  m.Scope scope,
  RangeSliderTickMarkShape target,
) =>
    target.getPreferredSize;
Function _RangeSliderTickMarkShape_paint$(
  m.Scope scope,
  RangeSliderTickMarkShape target,
) =>
    target.paint;
Function RangeSliderTrackShape_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RangeSliderTrackShape;
Function RangeSliderTrackShape_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RangeSliderTrackShape;
Function _RangeSliderTrackShape_getPreferredRect$(
  m.Scope scope,
  RangeSliderTrackShape target,
) =>
    target.getPreferredRect;
Function _RangeSliderTrackShape_paint$(
  m.Scope scope,
  RangeSliderTrackShape target,
) =>
    target.paint;
Function RectangularSliderTrackShape_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RectangularSliderTrackShape;
Function RectangularSliderTrackShape_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RectangularSliderTrackShape;
Function _RectangularSliderTrackShape_paint$(
  m.Scope scope,
  RectangularSliderTrackShape target,
) =>
    target.paint;
Function RoundedRectSliderTrackShape_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RoundedRectSliderTrackShape;
Function RoundedRectSliderTrackShape_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RoundedRectSliderTrackShape;
Function _RoundedRectSliderTrackShape_paint$(
  m.Scope scope,
  RoundedRectSliderTrackShape target,
) =>
    target.paint;
Function RectangularRangeSliderTrackShape_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RectangularRangeSliderTrackShape;
Function RectangularRangeSliderTrackShape_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RectangularRangeSliderTrackShape;
Function _RectangularRangeSliderTrackShape_getPreferredRect$(
  m.Scope scope,
  RectangularRangeSliderTrackShape target,
) =>
    target.getPreferredRect;
Function _RectangularRangeSliderTrackShape_paint$(
  m.Scope scope,
  RectangularRangeSliderTrackShape target,
) =>
    target.paint;
Function RoundedRectRangeSliderTrackShape_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RoundedRectRangeSliderTrackShape;
Function RoundedRectRangeSliderTrackShape_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RoundedRectRangeSliderTrackShape;
Function _RoundedRectRangeSliderTrackShape_getPreferredRect$(
  m.Scope scope,
  RoundedRectRangeSliderTrackShape target,
) =>
    target.getPreferredRect;
Function _RoundedRectRangeSliderTrackShape_paint$(
  m.Scope scope,
  RoundedRectRangeSliderTrackShape target,
) =>
    target.paint;
Function RoundSliderTickMarkShape_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RoundSliderTickMarkShape;
Function RoundSliderTickMarkShape_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RoundSliderTickMarkShape;
double? _RoundSliderTickMarkShape_tickMarkRadius$(
    RoundSliderTickMarkShape target) {
  return target.tickMarkRadius;
}

Function _RoundSliderTickMarkShape_getPreferredSize$(
  m.Scope scope,
  RoundSliderTickMarkShape target,
) =>
    target.getPreferredSize;
Function _RoundSliderTickMarkShape_paint$(
  m.Scope scope,
  RoundSliderTickMarkShape target,
) =>
    target.paint;
Function RoundRangeSliderTickMarkShape_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RoundRangeSliderTickMarkShape;
Function RoundRangeSliderTickMarkShape_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RoundRangeSliderTickMarkShape;
double? _RoundRangeSliderTickMarkShape_tickMarkRadius$(
    RoundRangeSliderTickMarkShape target) {
  return target.tickMarkRadius;
}

Function _RoundRangeSliderTickMarkShape_getPreferredSize$(
  m.Scope scope,
  RoundRangeSliderTickMarkShape target,
) =>
    target.getPreferredSize;
Function _RoundRangeSliderTickMarkShape_paint$(
  m.Scope scope,
  RoundRangeSliderTickMarkShape target,
) =>
    target.paint;
Function RoundSliderThumbShape_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RoundSliderThumbShape;
Function RoundSliderThumbShape_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RoundSliderThumbShape;
double _RoundSliderThumbShape_enabledThumbRadius$(
    RoundSliderThumbShape target) {
  return target.enabledThumbRadius;
}

double? _RoundSliderThumbShape_disabledThumbRadius$(
    RoundSliderThumbShape target) {
  return target.disabledThumbRadius;
}

double _RoundSliderThumbShape_elevation$(RoundSliderThumbShape target) {
  return target.elevation;
}

double _RoundSliderThumbShape_pressedElevation$(RoundSliderThumbShape target) {
  return target.pressedElevation;
}

Function _RoundSliderThumbShape_getPreferredSize$(
  m.Scope scope,
  RoundSliderThumbShape target,
) =>
    target.getPreferredSize;
Function _RoundSliderThumbShape_paint$(
  m.Scope scope,
  RoundSliderThumbShape target,
) =>
    target.paint;
Function RoundRangeSliderThumbShape_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RoundRangeSliderThumbShape;
Function RoundRangeSliderThumbShape_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RoundRangeSliderThumbShape;
double _RoundRangeSliderThumbShape_enabledThumbRadius$(
    RoundRangeSliderThumbShape target) {
  return target.enabledThumbRadius;
}

double? _RoundRangeSliderThumbShape_disabledThumbRadius$(
    RoundRangeSliderThumbShape target) {
  return target.disabledThumbRadius;
}

double _RoundRangeSliderThumbShape_elevation$(
    RoundRangeSliderThumbShape target) {
  return target.elevation;
}

double _RoundRangeSliderThumbShape_pressedElevation$(
    RoundRangeSliderThumbShape target) {
  return target.pressedElevation;
}

Function _RoundRangeSliderThumbShape_getPreferredSize$(
  m.Scope scope,
  RoundRangeSliderThumbShape target,
) =>
    target.getPreferredSize;
Function _RoundRangeSliderThumbShape_paint$(
  m.Scope scope,
  RoundRangeSliderThumbShape target,
) =>
    target.paint;
Function RoundSliderOverlayShape_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RoundSliderOverlayShape;
Function RoundSliderOverlayShape_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RoundSliderOverlayShape;
double _RoundSliderOverlayShape_overlayRadius$(RoundSliderOverlayShape target) {
  return target.overlayRadius;
}

Function _RoundSliderOverlayShape_getPreferredSize$(
  m.Scope scope,
  RoundSliderOverlayShape target,
) =>
    target.getPreferredSize;
Function _RoundSliderOverlayShape_paint$(
  m.Scope scope,
  RoundSliderOverlayShape target,
) =>
    target.paint;
Function RectangularSliderValueIndicatorShape_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RectangularSliderValueIndicatorShape;
Function RectangularSliderValueIndicatorShape_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RectangularSliderValueIndicatorShape;
Function _RectangularSliderValueIndicatorShape_getPreferredSize$(
  m.Scope scope,
  RectangularSliderValueIndicatorShape target,
) =>
    target.getPreferredSize;
Function _RectangularSliderValueIndicatorShape_paint$(
  m.Scope scope,
  RectangularSliderValueIndicatorShape target,
) =>
    target.paint;
Function RectangularRangeSliderValueIndicatorShape_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RectangularRangeSliderValueIndicatorShape;
Function RectangularRangeSliderValueIndicatorShape_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RectangularRangeSliderValueIndicatorShape;
Function _RectangularRangeSliderValueIndicatorShape_getPreferredSize$(
  m.Scope scope,
  RectangularRangeSliderValueIndicatorShape target,
) =>
    target.getPreferredSize;
Function _RectangularRangeSliderValueIndicatorShape_getHorizontalShift$(
  m.Scope scope,
  RectangularRangeSliderValueIndicatorShape target,
) =>
    target.getHorizontalShift;
Function _RectangularRangeSliderValueIndicatorShape_paint$(
  m.Scope scope,
  RectangularRangeSliderValueIndicatorShape target,
) =>
    target.paint;
Function PaddleSliderValueIndicatorShape_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as PaddleSliderValueIndicatorShape;
Function PaddleSliderValueIndicatorShape_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is PaddleSliderValueIndicatorShape;
Function _PaddleSliderValueIndicatorShape_getPreferredSize$(
  m.Scope scope,
  PaddleSliderValueIndicatorShape target,
) =>
    target.getPreferredSize;
Function _PaddleSliderValueIndicatorShape_paint$(
  m.Scope scope,
  PaddleSliderValueIndicatorShape target,
) =>
    target.paint;
Function PaddleRangeSliderValueIndicatorShape_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as PaddleRangeSliderValueIndicatorShape;
Function PaddleRangeSliderValueIndicatorShape_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is PaddleRangeSliderValueIndicatorShape;
Function _PaddleRangeSliderValueIndicatorShape_getPreferredSize$(
  m.Scope scope,
  PaddleRangeSliderValueIndicatorShape target,
) =>
    target.getPreferredSize;
Function _PaddleRangeSliderValueIndicatorShape_getHorizontalShift$(
  m.Scope scope,
  PaddleRangeSliderValueIndicatorShape target,
) =>
    target.getHorizontalShift;
Function _PaddleRangeSliderValueIndicatorShape_paint$(
  m.Scope scope,
  PaddleRangeSliderValueIndicatorShape target,
) =>
    target.paint;
Function RangeValues_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RangeValues;
Function RangeValues_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RangeValues;
double _RangeValues_start$(RangeValues target) {
  return target.start;
}

double _RangeValues_end$(RangeValues target) {
  return target.end;
}

int _RangeValues_hashCode$(RangeValues target) {
  return target.hashCode;
}

Function _RangeValues_eq$$(
  m.Scope scope,
  RangeValues target,
) =>
    (Object other) => target == other;
Function _RangeValues_toString$(
  m.Scope scope,
  RangeValues target,
) =>
    target.toString;
Function RangeLabels_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RangeLabels;
Function RangeLabels_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RangeLabels;
String _RangeLabels_start$(RangeLabels target) {
  return target.start;
}

String _RangeLabels_end$(RangeLabels target) {
  return target.end;
}

int _RangeLabels_hashCode$(RangeLabels target) {
  return target.hashCode;
}

Function _RangeLabels_eq$$(
  m.Scope scope,
  RangeLabels target,
) =>
    (Object other) => target == other;
Function _RangeLabels_toString$(
  m.Scope scope,
  RangeLabels target,
) =>
    target.toString;
Function DropSliderValueIndicatorShape_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DropSliderValueIndicatorShape;
Function DropSliderValueIndicatorShape_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DropSliderValueIndicatorShape;
Function _DropSliderValueIndicatorShape_getPreferredSize$(
  m.Scope scope,
  DropSliderValueIndicatorShape target,
) =>
    target.getPreferredSize;
Function _DropSliderValueIndicatorShape_paint$(
  m.Scope scope,
  DropSliderValueIndicatorShape target,
) =>
    target.paint;
ShowValueIndicator _ShowValueIndicator_onlyForDiscrete$() {
  return ShowValueIndicator.onlyForDiscrete;
}

ShowValueIndicator _ShowValueIndicator_onlyForContinuous$() {
  return ShowValueIndicator.onlyForContinuous;
}

ShowValueIndicator _ShowValueIndicator_always$() {
  return ShowValueIndicator.always;
}

ShowValueIndicator _ShowValueIndicator_never$() {
  return ShowValueIndicator.never;
}

List<ShowValueIndicator> _ShowValueIndicator_values$() {
  return ShowValueIndicator.values;
}

Thumb _Thumb_start$() {
  return Thumb.start;
}

Thumb _Thumb_end$() {
  return Thumb.end;
}

List<Thumb> _Thumb_values$() {
  return Thumb.values;
}
