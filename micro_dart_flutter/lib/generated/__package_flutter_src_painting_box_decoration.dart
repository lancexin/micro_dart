// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/box_decoration.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/painting/border_radius.dart';
import 'package:flutter/src/painting/box_border.dart';
import 'package:flutter/src/painting/box_shadow.dart';
import 'package:flutter/src/painting/colors.dart';
import 'package:flutter/src/painting/decoration.dart';
import 'package:flutter/src/painting/decoration_image.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/gradient.dart';
import 'package:flutter/src/painting/image_provider.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/box_decoration.dart',
  {
    'BoxDecoration.': _BoxDecoration__$,
    'BoxDecoration.lerp': _BoxDecoration_lerp$,
    'BoxDecoration.createBoxPainter': _BoxDecoration_createBoxPainter$,
  },
  {},
  {
    'BoxDecoration': m.ClassMirror(
      'BoxDecoration',
      {
        '#as': BoxDecoration_as$,
        '#is': BoxDecoration_is$,
        'color': _BoxDecoration_color$,
        'image': _BoxDecoration_image$,
        'border': _BoxDecoration_border$,
        'borderRadius': _BoxDecoration_borderRadius$,
        'boxShadow': _BoxDecoration_boxShadow$,
        'gradient': _BoxDecoration_gradient$,
        'backgroundBlendMode': _BoxDecoration_backgroundBlendMode$,
        'shape': _BoxDecoration_shape$,
        'padding': _BoxDecoration_padding$,
        'isComplex': _BoxDecoration_isComplex$,
        'hashCode': _BoxDecoration_hashCode$,
        'copyWith': _BoxDecoration_copyWith$,
        'debugAssertIsValid': _BoxDecoration_debugAssertIsValid$,
        'getClipPath': _BoxDecoration_getClipPath$,
        'scale': _BoxDecoration_scale$,
        'lerpFrom': _BoxDecoration_lerpFrom$,
        'lerpTo': _BoxDecoration_lerpTo$,
        '==': _BoxDecoration_eq$$,
        'debugFillProperties': _BoxDecoration_debugFillProperties$,
        'hitTest': _BoxDecoration_hitTest$,
      },
      {},
    )
  },
);
Function BoxDecoration_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as BoxDecoration;
Function BoxDecoration_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is BoxDecoration;
Function _BoxDecoration_color$(
  m.Scope scope$,
  BoxDecoration target$,
) =>
    () {
      return target$.color;
    };
Function _BoxDecoration_image$(
  m.Scope scope$,
  BoxDecoration target$,
) =>
    () {
      return target$.image;
    };
Function _BoxDecoration_border$(
  m.Scope scope$,
  BoxDecoration target$,
) =>
    () {
      return target$.border;
    };
Function _BoxDecoration_borderRadius$(
  m.Scope scope$,
  BoxDecoration target$,
) =>
    () {
      return target$.borderRadius;
    };
Function _BoxDecoration_boxShadow$(
  m.Scope scope$,
  BoxDecoration target$,
) =>
    () {
      return target$.boxShadow;
    };
Function _BoxDecoration_gradient$(
  m.Scope scope$,
  BoxDecoration target$,
) =>
    () {
      return target$.gradient;
    };
Function _BoxDecoration_backgroundBlendMode$(
  m.Scope scope$,
  BoxDecoration target$,
) =>
    () {
      return target$.backgroundBlendMode;
    };
Function _BoxDecoration_shape$(
  m.Scope scope$,
  BoxDecoration target$,
) =>
    () {
      return target$.shape;
    };
Function _BoxDecoration_padding$(
  m.Scope scope$,
  BoxDecoration target$,
) =>
    () {
      return target$.padding;
    };
Function _BoxDecoration_isComplex$(
  m.Scope scope$,
  BoxDecoration target$,
) =>
    () {
      return target$.isComplex;
    };
Function _BoxDecoration_hashCode$(
  m.Scope scope$,
  BoxDecoration target$,
) =>
    () {
      return target$.hashCode;
    };
Function _BoxDecoration__$(m.Scope scope$) => ({
      Color? color,
      DecorationImage? image,
      BoxBorder? border,
      BorderRadiusGeometry? borderRadius,
      List? boxShadow,
      Gradient? gradient,
      BlendMode? backgroundBlendMode,
      BoxShape? shape,
    }) {
      return BoxDecoration(
        backgroundBlendMode: backgroundBlendMode,
        border: border,
        borderRadius: borderRadius,
        boxShadow: boxShadow == null ? null : List.from(boxShadow),
        color: color,
        gradient: gradient,
        image: image,
        shape: shape ?? BoxShape.rectangle,
      );
    };
Function _BoxDecoration_copyWith$(
  m.Scope scope$,
  BoxDecoration target$,
) =>
    target$.copyWith;
Function _BoxDecoration_debugAssertIsValid$(
  m.Scope scope$,
  BoxDecoration target$,
) =>
    target$.debugAssertIsValid;
Function _BoxDecoration_getClipPath$(
  m.Scope scope$,
  BoxDecoration target$,
) =>
    target$.getClipPath;
Function _BoxDecoration_scale$(
  m.Scope scope$,
  BoxDecoration target$,
) =>
    target$.scale;
Function _BoxDecoration_lerpFrom$(
  m.Scope scope$,
  BoxDecoration target$,
) =>
    target$.lerpFrom;
Function _BoxDecoration_lerpTo$(
  m.Scope scope$,
  BoxDecoration target$,
) =>
    target$.lerpTo;
Function _BoxDecoration_lerp$(m.Scope scope$) => BoxDecoration.lerp;
Function _BoxDecoration_eq$$(
  m.Scope scope$,
  BoxDecoration target$,
) =>
    (Object other$) => target$ == other$;
Function _BoxDecoration_debugFillProperties$(
  m.Scope scope$,
  BoxDecoration target$,
) =>
    target$.debugFillProperties;
Function _BoxDecoration_hitTest$(
  m.Scope scope$,
  BoxDecoration target$,
) =>
    target$.hitTest;
Function _BoxDecoration_createBoxPainter$(
  m.Scope scope$,
  BoxDecoration target$,
) =>
    ([m.FunctionPointer? onChanged]) {
      if (onChanged == null) {
        return target$.createBoxPainter();
      }
      void onChangedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onChanged!,
            [],
            {},
          );
      return target$
          .createBoxPainter(onChanged == null ? null : onChangedProxy);
    };
