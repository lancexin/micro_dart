// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/text_selection_theme.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/text_selection_theme.dart',
  {
    'TextSelectionThemeData.': _TextSelectionThemeData__$,
    'TextSelectionThemeData.lerp': _TextSelectionThemeData_lerp$,
    'TextSelectionTheme.': _TextSelectionTheme__$,
    'TextSelectionTheme.of': _TextSelectionTheme_of$,
  },
  {},
  {
    'TextSelectionThemeData': m.ClassMirror(
      'TextSelectionThemeData',
      {
        '#as': TextSelectionThemeData_as$,
        '#is': TextSelectionThemeData_is$,
        'cursorColor': _TextSelectionThemeData_cursorColor$,
        'selectionColor': _TextSelectionThemeData_selectionColor$,
        'selectionHandleColor': _TextSelectionThemeData_selectionHandleColor$,
        'hashCode': _TextSelectionThemeData_hashCode$,
        'copyWith': _TextSelectionThemeData_copyWith$,
        '==': _TextSelectionThemeData_eq$$,
        'debugFillProperties': _TextSelectionThemeData_debugFillProperties$,
      },
      {},
    ),
    'TextSelectionTheme': m.ClassMirror(
      'TextSelectionTheme',
      {
        '#as': TextSelectionTheme_as$,
        '#is': TextSelectionTheme_is$,
        'data': _TextSelectionTheme_data$,
        'child': _TextSelectionTheme_child$,
        'wrap': _TextSelectionTheme_wrap$,
        'updateShouldNotify': _TextSelectionTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function TextSelectionThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextSelectionThemeData;
Function TextSelectionThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextSelectionThemeData;
Function _TextSelectionThemeData_cursorColor$(
  m.Scope scope$,
  TextSelectionThemeData target$,
) =>
    () {
      return target$.cursorColor;
    };
Function _TextSelectionThemeData_selectionColor$(
  m.Scope scope$,
  TextSelectionThemeData target$,
) =>
    () {
      return target$.selectionColor;
    };
Function _TextSelectionThemeData_selectionHandleColor$(
  m.Scope scope$,
  TextSelectionThemeData target$,
) =>
    () {
      return target$.selectionHandleColor;
    };
Function _TextSelectionThemeData_hashCode$(
  m.Scope scope$,
  TextSelectionThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _TextSelectionThemeData__$(m.Scope scope$) => ({
      Color? cursorColor,
      Color? selectionColor,
      Color? selectionHandleColor,
    }) {
      return TextSelectionThemeData(
        cursorColor: cursorColor,
        selectionColor: selectionColor,
        selectionHandleColor: selectionHandleColor,
      );
    };
Function _TextSelectionThemeData_copyWith$(
  m.Scope scope$,
  TextSelectionThemeData target$,
) =>
    target$.copyWith;
Function _TextSelectionThemeData_lerp$(m.Scope scope$) =>
    TextSelectionThemeData.lerp;
Function _TextSelectionThemeData_eq$$(
  m.Scope scope$,
  TextSelectionThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _TextSelectionThemeData_debugFillProperties$(
  m.Scope scope$,
  TextSelectionThemeData target$,
) =>
    target$.debugFillProperties;
Function TextSelectionTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextSelectionTheme;
Function TextSelectionTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextSelectionTheme;
Function _TextSelectionTheme_data$(
  m.Scope scope$,
  TextSelectionTheme target$,
) =>
    () {
      return target$.data;
    };
Function _TextSelectionTheme_child$(
  m.Scope scope$,
  TextSelectionTheme target$,
) =>
    () {
      return target$.child;
    };
Function _TextSelectionTheme__$(m.Scope scope$) => ({
      Key? key,
      required TextSelectionThemeData data,
      required Widget child,
    }) {
      return TextSelectionTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _TextSelectionTheme_of$(m.Scope scope$) => TextSelectionTheme.of;
Function _TextSelectionTheme_wrap$(
  m.Scope scope$,
  TextSelectionTheme target$,
) =>
    target$.wrap;
Function _TextSelectionTheme_updateShouldNotify$(
  m.Scope scope$,
  TextSelectionTheme target$,
) =>
    target$.updateShouldNotify;
