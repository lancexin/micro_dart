// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/text_selection_theme.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/text_selection_theme.dart',
  {
    'TextSelectionThemeData.lerp': _TextSelectionThemeData_lerp$,
    'TextSelectionTheme.of': _TextSelectionTheme_of$,
  },
  {},
  {
    'TextSelectionThemeData': m.ClassMirror(
      'TextSelectionThemeData',
      {
        'cursorColor': _TextSelectionThemeData_cursorColor$,
        'selectionColor': _TextSelectionThemeData_selectionColor$,
        'selectionHandleColor': _TextSelectionThemeData_selectionHandleColor$,
        'hashCode': _TextSelectionThemeData_hashCode$,
        'copyWith': _TextSelectionThemeData_copyWith$,
        'debugFillProperties': _TextSelectionThemeData_debugFillProperties$,
      },
      {},
    ),
    'TextSelectionTheme': m.ClassMirror(
      'TextSelectionTheme',
      {
        'data': _TextSelectionTheme_data$,
        'child': _TextSelectionTheme_child$,
        'wrap': _TextSelectionTheme_wrap$,
        'updateShouldNotify': _TextSelectionTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Color? _TextSelectionThemeData_cursorColor$(TextSelectionThemeData target) {
  return target.cursorColor;
}

Color? _TextSelectionThemeData_selectionColor$(TextSelectionThemeData target) {
  return target.selectionColor;
}

Color? _TextSelectionThemeData_selectionHandleColor$(
    TextSelectionThemeData target) {
  return target.selectionHandleColor;
}

int _TextSelectionThemeData_hashCode$(TextSelectionThemeData target) {
  return target.hashCode;
}

Function _TextSelectionThemeData_copyWith$(
  m.Scope scope,
  TextSelectionThemeData target,
) =>
    target.copyWith;
Function _TextSelectionThemeData_lerp$(m.Scope scope) =>
    TextSelectionThemeData.lerp;
Function _TextSelectionThemeData_debugFillProperties$(
  m.Scope scope,
  TextSelectionThemeData target,
) =>
    target.debugFillProperties;
TextSelectionThemeData _TextSelectionTheme_data$(TextSelectionTheme target) {
  return target.data;
}

Widget _TextSelectionTheme_child$(TextSelectionTheme target) {
  return target.child;
}

Function _TextSelectionTheme_of$(m.Scope scope) => TextSelectionTheme.of;
Function _TextSelectionTheme_wrap$(
  m.Scope scope,
  TextSelectionTheme target,
) =>
    target.wrap;
Function _TextSelectionTheme_updateShouldNotify$(
  m.Scope scope,
  TextSelectionTheme target,
) =>
    target.updateShouldNotify;
