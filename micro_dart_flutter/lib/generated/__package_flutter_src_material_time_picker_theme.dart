// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/time_picker_theme.dart';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/time_picker_theme.dart',
  {
    'TimePickerThemeData.lerp': _TimePickerThemeData_lerp$,
    'TimePickerTheme.of': _TimePickerTheme_of$,
  },
  {},
  {
    'TimePickerThemeData': m.ClassMirror(
      'TimePickerThemeData',
      {
        'backgroundColor': _TimePickerThemeData_backgroundColor$,
        'cancelButtonStyle': _TimePickerThemeData_cancelButtonStyle$,
        'confirmButtonStyle': _TimePickerThemeData_confirmButtonStyle$,
        'dayPeriodBorderSide': _TimePickerThemeData_dayPeriodBorderSide$,
        'dayPeriodColor': _TimePickerThemeData_dayPeriodColor$,
        'dayPeriodShape': _TimePickerThemeData_dayPeriodShape$,
        'dayPeriodTextColor': _TimePickerThemeData_dayPeriodTextColor$,
        'dayPeriodTextStyle': _TimePickerThemeData_dayPeriodTextStyle$,
        'dialBackgroundColor': _TimePickerThemeData_dialBackgroundColor$,
        'dialHandColor': _TimePickerThemeData_dialHandColor$,
        'dialTextColor': _TimePickerThemeData_dialTextColor$,
        'dialTextStyle': _TimePickerThemeData_dialTextStyle$,
        'elevation': _TimePickerThemeData_elevation$,
        'entryModeIconColor': _TimePickerThemeData_entryModeIconColor$,
        'helpTextStyle': _TimePickerThemeData_helpTextStyle$,
        'hourMinuteColor': _TimePickerThemeData_hourMinuteColor$,
        'hourMinuteShape': _TimePickerThemeData_hourMinuteShape$,
        'hourMinuteTextColor': _TimePickerThemeData_hourMinuteTextColor$,
        'hourMinuteTextStyle': _TimePickerThemeData_hourMinuteTextStyle$,
        'inputDecorationTheme': _TimePickerThemeData_inputDecorationTheme$,
        'padding': _TimePickerThemeData_padding$,
        'shape': _TimePickerThemeData_shape$,
        'hashCode': _TimePickerThemeData_hashCode$,
        'copyWith': _TimePickerThemeData_copyWith$,
        'debugFillProperties': _TimePickerThemeData_debugFillProperties$,
      },
      {},
    ),
    'TimePickerTheme': m.ClassMirror(
      'TimePickerTheme',
      {
        'data': _TimePickerTheme_data$,
        'wrap': _TimePickerTheme_wrap$,
        'updateShouldNotify': _TimePickerTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Color? _TimePickerThemeData_backgroundColor$(TimePickerThemeData target) {
  return target.backgroundColor;
}

ButtonStyle? _TimePickerThemeData_cancelButtonStyle$(
    TimePickerThemeData target) {
  return target.cancelButtonStyle;
}

ButtonStyle? _TimePickerThemeData_confirmButtonStyle$(
    TimePickerThemeData target) {
  return target.confirmButtonStyle;
}

BorderSide? _TimePickerThemeData_dayPeriodBorderSide$(
    TimePickerThemeData target) {
  return target.dayPeriodBorderSide;
}

Color? _TimePickerThemeData_dayPeriodColor$(TimePickerThemeData target) {
  return target.dayPeriodColor;
}

OutlinedBorder? _TimePickerThemeData_dayPeriodShape$(
    TimePickerThemeData target) {
  return target.dayPeriodShape;
}

Color? _TimePickerThemeData_dayPeriodTextColor$(TimePickerThemeData target) {
  return target.dayPeriodTextColor;
}

TextStyle? _TimePickerThemeData_dayPeriodTextStyle$(
    TimePickerThemeData target) {
  return target.dayPeriodTextStyle;
}

Color? _TimePickerThemeData_dialBackgroundColor$(TimePickerThemeData target) {
  return target.dialBackgroundColor;
}

Color? _TimePickerThemeData_dialHandColor$(TimePickerThemeData target) {
  return target.dialHandColor;
}

Color? _TimePickerThemeData_dialTextColor$(TimePickerThemeData target) {
  return target.dialTextColor;
}

TextStyle? _TimePickerThemeData_dialTextStyle$(TimePickerThemeData target) {
  return target.dialTextStyle;
}

double? _TimePickerThemeData_elevation$(TimePickerThemeData target) {
  return target.elevation;
}

Color? _TimePickerThemeData_entryModeIconColor$(TimePickerThemeData target) {
  return target.entryModeIconColor;
}

TextStyle? _TimePickerThemeData_helpTextStyle$(TimePickerThemeData target) {
  return target.helpTextStyle;
}

Color? _TimePickerThemeData_hourMinuteColor$(TimePickerThemeData target) {
  return target.hourMinuteColor;
}

ShapeBorder? _TimePickerThemeData_hourMinuteShape$(TimePickerThemeData target) {
  return target.hourMinuteShape;
}

Color? _TimePickerThemeData_hourMinuteTextColor$(TimePickerThemeData target) {
  return target.hourMinuteTextColor;
}

TextStyle? _TimePickerThemeData_hourMinuteTextStyle$(
    TimePickerThemeData target) {
  return target.hourMinuteTextStyle;
}

InputDecorationTheme? _TimePickerThemeData_inputDecorationTheme$(
    TimePickerThemeData target) {
  return target.inputDecorationTheme;
}

EdgeInsetsGeometry? _TimePickerThemeData_padding$(TimePickerThemeData target) {
  return target.padding;
}

ShapeBorder? _TimePickerThemeData_shape$(TimePickerThemeData target) {
  return target.shape;
}

int _TimePickerThemeData_hashCode$(TimePickerThemeData target) {
  return target.hashCode;
}

Function _TimePickerThemeData_copyWith$(
  m.Scope scope,
  TimePickerThemeData target,
) =>
    target.copyWith;
Function _TimePickerThemeData_lerp$(m.Scope scope) => TimePickerThemeData.lerp;
Function _TimePickerThemeData_debugFillProperties$(
  m.Scope scope,
  TimePickerThemeData target,
) =>
    target.debugFillProperties;
TimePickerThemeData _TimePickerTheme_data$(TimePickerTheme target) {
  return target.data;
}

Function _TimePickerTheme_of$(m.Scope scope) => TimePickerTheme.of;
Function _TimePickerTheme_wrap$(
  m.Scope scope,
  TimePickerTheme target,
) =>
    target.wrap;
Function _TimePickerTheme_updateShouldNotify$(
  m.Scope scope,
  TimePickerTheme target,
) =>
    target.updateShouldNotify;
