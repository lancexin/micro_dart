// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/time_picker_theme.dart';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/time_picker_theme.dart',
  {
    'TimePickerThemeData.': _TimePickerThemeData__$,
    'TimePickerThemeData.lerp': _TimePickerThemeData_lerp$,
    'TimePickerTheme.': _TimePickerTheme__$,
    'TimePickerTheme.of': _TimePickerTheme_of$,
  },
  {},
  {
    'TimePickerThemeData': m.ClassMirror(
      'TimePickerThemeData',
      {
        '#as': TimePickerThemeData_as$,
        '#is': TimePickerThemeData_is$,
        'backgroundColor': _TimePickerThemeData_backgroundColor$,
        'cancelButtonStyle': _TimePickerThemeData_cancelButtonStyle$,
        'confirmButtonStyle': _TimePickerThemeData_confirmButtonStyle$,
        'dayPeriodBorderSide': _TimePickerThemeData_dayPeriodBorderSide$,
        'dayPeriodColor': _TimePickerThemeData_dayPeriodColor$,
        'dayPeriodShape': _TimePickerThemeData_dayPeriodShape$,
        'dayPeriodTextColor': _TimePickerThemeData_dayPeriodTextColor$,
        'dayPeriodTextStyle': _TimePickerThemeData_dayPeriodTextStyle$,
        'dialBackgroundColor': _TimePickerThemeData_dialBackgroundColor$,
        'dialHandColor': _TimePickerThemeData_dialHandColor$,
        'dialTextColor': _TimePickerThemeData_dialTextColor$,
        'dialTextStyle': _TimePickerThemeData_dialTextStyle$,
        'elevation': _TimePickerThemeData_elevation$,
        'entryModeIconColor': _TimePickerThemeData_entryModeIconColor$,
        'helpTextStyle': _TimePickerThemeData_helpTextStyle$,
        'hourMinuteColor': _TimePickerThemeData_hourMinuteColor$,
        'hourMinuteShape': _TimePickerThemeData_hourMinuteShape$,
        'hourMinuteTextColor': _TimePickerThemeData_hourMinuteTextColor$,
        'hourMinuteTextStyle': _TimePickerThemeData_hourMinuteTextStyle$,
        'inputDecorationTheme': _TimePickerThemeData_inputDecorationTheme$,
        'padding': _TimePickerThemeData_padding$,
        'shape': _TimePickerThemeData_shape$,
        'hashCode': _TimePickerThemeData_hashCode$,
        'copyWith': _TimePickerThemeData_copyWith$,
        '==': _TimePickerThemeData_eq$$,
        'debugFillProperties': _TimePickerThemeData_debugFillProperties$,
      },
      {},
    ),
    'TimePickerTheme': m.ClassMirror(
      'TimePickerTheme',
      {
        '#as': TimePickerTheme_as$,
        '#is': TimePickerTheme_is$,
        'data': _TimePickerTheme_data$,
        'wrap': _TimePickerTheme_wrap$,
        'updateShouldNotify': _TimePickerTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function TimePickerThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TimePickerThemeData;
Function TimePickerThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TimePickerThemeData;
Function _TimePickerThemeData_backgroundColor$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _TimePickerThemeData_cancelButtonStyle$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    () {
      return target$.cancelButtonStyle;
    };
Function _TimePickerThemeData_confirmButtonStyle$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    () {
      return target$.confirmButtonStyle;
    };
Function _TimePickerThemeData_dayPeriodBorderSide$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    () {
      return target$.dayPeriodBorderSide;
    };
Function _TimePickerThemeData_dayPeriodColor$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    () {
      return target$.dayPeriodColor;
    };
Function _TimePickerThemeData_dayPeriodShape$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    () {
      return target$.dayPeriodShape;
    };
Function _TimePickerThemeData_dayPeriodTextColor$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    () {
      return target$.dayPeriodTextColor;
    };
Function _TimePickerThemeData_dayPeriodTextStyle$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    () {
      return target$.dayPeriodTextStyle;
    };
Function _TimePickerThemeData_dialBackgroundColor$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    () {
      return target$.dialBackgroundColor;
    };
Function _TimePickerThemeData_dialHandColor$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    () {
      return target$.dialHandColor;
    };
Function _TimePickerThemeData_dialTextColor$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    () {
      return target$.dialTextColor;
    };
Function _TimePickerThemeData_dialTextStyle$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    () {
      return target$.dialTextStyle;
    };
Function _TimePickerThemeData_elevation$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    () {
      return target$.elevation;
    };
Function _TimePickerThemeData_entryModeIconColor$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    () {
      return target$.entryModeIconColor;
    };
Function _TimePickerThemeData_helpTextStyle$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    () {
      return target$.helpTextStyle;
    };
Function _TimePickerThemeData_hourMinuteColor$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    () {
      return target$.hourMinuteColor;
    };
Function _TimePickerThemeData_hourMinuteShape$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    () {
      return target$.hourMinuteShape;
    };
Function _TimePickerThemeData_hourMinuteTextColor$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    () {
      return target$.hourMinuteTextColor;
    };
Function _TimePickerThemeData_hourMinuteTextStyle$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    () {
      return target$.hourMinuteTextStyle;
    };
Function _TimePickerThemeData_inputDecorationTheme$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    () {
      return target$.inputDecorationTheme;
    };
Function _TimePickerThemeData_padding$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    () {
      return target$.padding;
    };
Function _TimePickerThemeData_shape$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    () {
      return target$.shape;
    };
Function _TimePickerThemeData_hashCode$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _TimePickerThemeData__$(m.Scope scope$) => ({
      Color? backgroundColor,
      ButtonStyle? cancelButtonStyle,
      ButtonStyle? confirmButtonStyle,
      BorderSide? dayPeriodBorderSide,
      Color? dayPeriodColor,
      OutlinedBorder? dayPeriodShape,
      Color? dayPeriodTextColor,
      TextStyle? dayPeriodTextStyle,
      Color? dialBackgroundColor,
      Color? dialHandColor,
      Color? dialTextColor,
      TextStyle? dialTextStyle,
      double? elevation,
      Color? entryModeIconColor,
      TextStyle? helpTextStyle,
      Color? hourMinuteColor,
      ShapeBorder? hourMinuteShape,
      Color? hourMinuteTextColor,
      TextStyle? hourMinuteTextStyle,
      InputDecorationTheme? inputDecorationTheme,
      EdgeInsetsGeometry? padding,
      ShapeBorder? shape,
    }) {
      return TimePickerThemeData(
        backgroundColor: backgroundColor,
        cancelButtonStyle: cancelButtonStyle,
        confirmButtonStyle: confirmButtonStyle,
        dayPeriodBorderSide: dayPeriodBorderSide,
        dayPeriodColor: dayPeriodColor,
        dayPeriodShape: dayPeriodShape,
        dayPeriodTextColor: dayPeriodTextColor,
        dayPeriodTextStyle: dayPeriodTextStyle,
        dialBackgroundColor: dialBackgroundColor,
        dialHandColor: dialHandColor,
        dialTextColor: dialTextColor,
        dialTextStyle: dialTextStyle,
        elevation: elevation,
        entryModeIconColor: entryModeIconColor,
        helpTextStyle: helpTextStyle,
        hourMinuteColor: hourMinuteColor,
        hourMinuteShape: hourMinuteShape,
        hourMinuteTextColor: hourMinuteTextColor,
        hourMinuteTextStyle: hourMinuteTextStyle,
        inputDecorationTheme: inputDecorationTheme,
        padding: padding,
        shape: shape,
      );
    };
Function _TimePickerThemeData_copyWith$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    target$.copyWith;
Function _TimePickerThemeData_lerp$(m.Scope scope$) => TimePickerThemeData.lerp;
Function _TimePickerThemeData_eq$$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _TimePickerThemeData_debugFillProperties$(
  m.Scope scope$,
  TimePickerThemeData target$,
) =>
    target$.debugFillProperties;
Function TimePickerTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TimePickerTheme;
Function TimePickerTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TimePickerTheme;
Function _TimePickerTheme_data$(
  m.Scope scope$,
  TimePickerTheme target$,
) =>
    () {
      return target$.data;
    };
Function _TimePickerTheme__$(m.Scope scope$) => ({
      Key? key,
      required TimePickerThemeData data,
      required Widget child,
    }) {
      return TimePickerTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _TimePickerTheme_of$(m.Scope scope$) => TimePickerTheme.of;
Function _TimePickerTheme_wrap$(
  m.Scope scope$,
  TimePickerTheme target$,
) =>
    target$.wrap;
Function _TimePickerTheme_updateShouldNotify$(
  m.Scope scope$,
  TimePickerTheme target$,
) =>
    target$.updateShouldNotify;
