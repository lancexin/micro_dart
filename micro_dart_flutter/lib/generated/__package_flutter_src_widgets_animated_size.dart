// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/animated_size.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/ticker_provider.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/animated_size.dart',
  {'AnimatedSize.': _AnimatedSize__$},
  {},
  {
    'AnimatedSize': m.ClassMirror(
      'AnimatedSize',
      {
        '#as': AnimatedSize_as$,
        '#is': AnimatedSize_is$,
        'child': _AnimatedSize_child$,
        'alignment': _AnimatedSize_alignment$,
        'curve': _AnimatedSize_curve$,
        'duration': _AnimatedSize_duration$,
        'reverseDuration': _AnimatedSize_reverseDuration$,
        'clipBehavior': _AnimatedSize_clipBehavior$,
        'createState': _AnimatedSize_createState$,
      },
      {},
    )
  },
);
Function AnimatedSize_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AnimatedSize;
Function AnimatedSize_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AnimatedSize;
Function _AnimatedSize_child$(
  m.Scope scope$,
  AnimatedSize target$,
) =>
    () {
      return target$.child;
    };
Function _AnimatedSize_alignment$(
  m.Scope scope$,
  AnimatedSize target$,
) =>
    () {
      return target$.alignment;
    };
Function _AnimatedSize_curve$(
  m.Scope scope$,
  AnimatedSize target$,
) =>
    () {
      return target$.curve;
    };
Function _AnimatedSize_duration$(
  m.Scope scope$,
  AnimatedSize target$,
) =>
    () {
      return target$.duration;
    };
Function _AnimatedSize_reverseDuration$(
  m.Scope scope$,
  AnimatedSize target$,
) =>
    () {
      return target$.reverseDuration;
    };
Function _AnimatedSize_clipBehavior$(
  m.Scope scope$,
  AnimatedSize target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _AnimatedSize__$(m.Scope scope$) => ({
      Key? key,
      Widget? child,
      AlignmentGeometry? alignment,
      Curve? curve,
      required Duration duration,
      Duration? reverseDuration,
      Clip? clipBehavior,
    }) {
      return AnimatedSize(
        alignment: alignment ?? Alignment.center,
        child: child,
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        curve: curve ?? Curves.linear,
        duration: duration,
        key: key,
        reverseDuration: reverseDuration,
      );
    };
Function _AnimatedSize_createState$(
  m.Scope scope$,
  AnimatedSize target$,
) =>
    target$.createState;
