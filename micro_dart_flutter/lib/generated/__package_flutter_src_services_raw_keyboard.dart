// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/raw_keyboard.dart';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/services/binding.dart';
import 'package:flutter/src/services/hardware_keyboard.dart';
import 'package:flutter/src/services/keyboard_key.g.dart';
import 'package:flutter/src/services/raw_keyboard_android.dart';
import 'package:flutter/src/services/raw_keyboard_fuchsia.dart';
import 'package:flutter/src/services/raw_keyboard_ios.dart';
import 'package:flutter/src/services/raw_keyboard_linux.dart';
import 'package:flutter/src/services/raw_keyboard_macos.dart';
import 'package:flutter/src/services/raw_keyboard_web.dart';
import 'package:flutter/src/services/raw_keyboard_windows.dart';
import 'package:flutter/src/services/system_channels.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/raw_keyboard.dart',
  {
    'RawKeyboard.instance': _RawKeyboard_instance$,
    'RawKeyboard.addListener': _RawKeyboard_addListener$,
    'RawKeyboard.removeListener': _RawKeyboard_removeListener$,
    'KeyboardSide.any': _KeyboardSide_any$,
    'KeyboardSide.left': _KeyboardSide_left$,
    'KeyboardSide.right': _KeyboardSide_right$,
    'KeyboardSide.all': _KeyboardSide_all$,
    'KeyboardSide.values': _KeyboardSide_values$,
    'ModifierKey.controlModifier': _ModifierKey_controlModifier$,
    'ModifierKey.shiftModifier': _ModifierKey_shiftModifier$,
    'ModifierKey.altModifier': _ModifierKey_altModifier$,
    'ModifierKey.metaModifier': _ModifierKey_metaModifier$,
    'ModifierKey.capsLockModifier': _ModifierKey_capsLockModifier$,
    'ModifierKey.numLockModifier': _ModifierKey_numLockModifier$,
    'ModifierKey.scrollLockModifier': _ModifierKey_scrollLockModifier$,
    'ModifierKey.functionModifier': _ModifierKey_functionModifier$,
    'ModifierKey.symbolModifier': _ModifierKey_symbolModifier$,
    'ModifierKey.values': _ModifierKey_values$,
  },
  {},
  {
    'RawKeyEventData': m.ClassMirror(
      'RawKeyEventData',
      {
        '#as': RawKeyEventData_as$,
        '#is': RawKeyEventData_is$,
        'isControlPressed': _RawKeyEventData_isControlPressed$,
        'isShiftPressed': _RawKeyEventData_isShiftPressed$,
        'isAltPressed': _RawKeyEventData_isAltPressed$,
        'isMetaPressed': _RawKeyEventData_isMetaPressed$,
        'modifiersPressed': _RawKeyEventData_modifiersPressed$,
        'physicalKey': _RawKeyEventData_physicalKey$,
        'logicalKey': _RawKeyEventData_logicalKey$,
        'keyLabel': _RawKeyEventData_keyLabel$,
        'isModifierPressed': _RawKeyEventData_isModifierPressed$,
        'getModifierSide': _RawKeyEventData_getModifierSide$,
        'shouldDispatchEvent': _RawKeyEventData_shouldDispatchEvent$,
      },
      {},
    ),
    'RawKeyEvent': m.ClassMirror(
      'RawKeyEvent',
      {
        '#as': RawKeyEvent_as$,
        '#is': RawKeyEvent_is$,
        'character': _RawKeyEvent_character$,
        'repeat': _RawKeyEvent_repeat$,
        'data': _RawKeyEvent_data$,
        'isControlPressed': _RawKeyEvent_isControlPressed$,
        'isShiftPressed': _RawKeyEvent_isShiftPressed$,
        'isAltPressed': _RawKeyEvent_isAltPressed$,
        'isMetaPressed': _RawKeyEvent_isMetaPressed$,
        'physicalKey': _RawKeyEvent_physicalKey$,
        'logicalKey': _RawKeyEvent_logicalKey$,
        'isKeyPressed': _RawKeyEvent_isKeyPressed$,
        'debugFillProperties': _RawKeyEvent_debugFillProperties$,
      },
      {},
    ),
    'RawKeyDownEvent': m.ClassMirror(
      'RawKeyDownEvent',
      {
        '#as': RawKeyDownEvent_as$,
        '#is': RawKeyDownEvent_is$,
      },
      {},
    ),
    'RawKeyUpEvent': m.ClassMirror(
      'RawKeyUpEvent',
      {
        '#as': RawKeyUpEvent_as$,
        '#is': RawKeyUpEvent_is$,
      },
      {},
    ),
    'RawKeyboard': m.ClassMirror(
      'RawKeyboard',
      {
        '#as': RawKeyboard_as$,
        '#is': RawKeyboard_is$,
        'keyEventHandler': _RawKeyboard_keyEventHandler$,
        'keysPressed': _RawKeyboard_keysPressed$,
        'physicalKeysPressed': _RawKeyboard_physicalKeysPressed$,
        'handleRawKeyEvent': _RawKeyboard_handleRawKeyEvent$,
        'lookUpLayout': _RawKeyboard_lookUpLayout$,
        'clearKeysPressed': _RawKeyboard_clearKeysPressed$,
      },
      {'keyEventHandler': _RawKeyboard_keyEventHandler_set$},
    ),
    'KeyboardSide': m.ClassMirror(
      'KeyboardSide',
      {},
      {},
    ),
    'ModifierKey': m.ClassMirror(
      'ModifierKey',
      {},
      {},
    ),
  },
);
Function RawKeyEventData_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RawKeyEventData;
Function RawKeyEventData_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RawKeyEventData;
bool _RawKeyEventData_isControlPressed$(RawKeyEventData target) {
  return target.isControlPressed;
}

bool _RawKeyEventData_isShiftPressed$(RawKeyEventData target) {
  return target.isShiftPressed;
}

bool _RawKeyEventData_isAltPressed$(RawKeyEventData target) {
  return target.isAltPressed;
}

bool _RawKeyEventData_isMetaPressed$(RawKeyEventData target) {
  return target.isMetaPressed;
}

Map<ModifierKey, KeyboardSide> _RawKeyEventData_modifiersPressed$(
    RawKeyEventData target) {
  return target.modifiersPressed;
}

PhysicalKeyboardKey _RawKeyEventData_physicalKey$(RawKeyEventData target) {
  return target.physicalKey;
}

LogicalKeyboardKey _RawKeyEventData_logicalKey$(RawKeyEventData target) {
  return target.logicalKey;
}

String _RawKeyEventData_keyLabel$(RawKeyEventData target) {
  return target.keyLabel;
}

Function _RawKeyEventData_isModifierPressed$(
  m.Scope scope,
  RawKeyEventData target,
) =>
    target.isModifierPressed;
Function _RawKeyEventData_getModifierSide$(
  m.Scope scope,
  RawKeyEventData target,
) =>
    target.getModifierSide;
Function _RawKeyEventData_shouldDispatchEvent$(
  m.Scope scope,
  RawKeyEventData target,
) =>
    target.shouldDispatchEvent;
Function RawKeyEvent_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RawKeyEvent;
Function RawKeyEvent_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RawKeyEvent;
String? _RawKeyEvent_character$(RawKeyEvent target) {
  return target.character;
}

bool _RawKeyEvent_repeat$(RawKeyEvent target) {
  return target.repeat;
}

RawKeyEventData _RawKeyEvent_data$(RawKeyEvent target) {
  return target.data;
}

bool _RawKeyEvent_isControlPressed$(RawKeyEvent target) {
  return target.isControlPressed;
}

bool _RawKeyEvent_isShiftPressed$(RawKeyEvent target) {
  return target.isShiftPressed;
}

bool _RawKeyEvent_isAltPressed$(RawKeyEvent target) {
  return target.isAltPressed;
}

bool _RawKeyEvent_isMetaPressed$(RawKeyEvent target) {
  return target.isMetaPressed;
}

PhysicalKeyboardKey _RawKeyEvent_physicalKey$(RawKeyEvent target) {
  return target.physicalKey;
}

LogicalKeyboardKey _RawKeyEvent_logicalKey$(RawKeyEvent target) {
  return target.logicalKey;
}

Function _RawKeyEvent_isKeyPressed$(
  m.Scope scope,
  RawKeyEvent target,
) =>
    target.isKeyPressed;
Function _RawKeyEvent_debugFillProperties$(
  m.Scope scope,
  RawKeyEvent target,
) =>
    target.debugFillProperties;
Function RawKeyDownEvent_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RawKeyDownEvent;
Function RawKeyDownEvent_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RawKeyDownEvent;
Function RawKeyUpEvent_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RawKeyUpEvent;
Function RawKeyUpEvent_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RawKeyUpEvent;
Function RawKeyboard_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RawKeyboard;
Function RawKeyboard_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RawKeyboard;
RawKeyboard _RawKeyboard_instance$() {
  return RawKeyboard.instance;
}

bool Function(RawKeyEvent)? _RawKeyboard_keyEventHandler$(RawKeyboard target) {
  return target.keyEventHandler;
}

Function _RawKeyboard_keyEventHandler_set$(
  m.Scope scope,
  RawKeyboard target,
) =>
    (m.FunctionPointer? handler) {
      bool handlerProxy(RawKeyEvent handler_event) =>
          scope.engine.callFunctionPointer(
            scope,
            handler!,
            [handler_event],
            {},
          );
      target.keyEventHandler = (handler == null ? null : handlerProxy);
    };
Set<LogicalKeyboardKey> _RawKeyboard_keysPressed$(RawKeyboard target) {
  return target.keysPressed;
}

Set<PhysicalKeyboardKey> _RawKeyboard_physicalKeysPressed$(RawKeyboard target) {
  return target.physicalKeysPressed;
}

Function _RawKeyboard_addListener$(
  m.Scope scope,
  RawKeyboard target,
) =>
    (m.FunctionPointer listener) {
      void listenerProxy(RawKeyEvent listener_value) =>
          scope.engine.callFunctionPointer(
            scope,
            listener,
            [listener_value],
            {},
          );
      target.addListener(listenerProxy);
    };
Function _RawKeyboard_removeListener$(
  m.Scope scope,
  RawKeyboard target,
) =>
    (m.FunctionPointer listener) {
      void listenerProxy(RawKeyEvent listener_value) =>
          scope.engine.callFunctionPointer(
            scope,
            listener,
            [listener_value],
            {},
          );
      target.removeListener(listenerProxy);
    };
Function _RawKeyboard_handleRawKeyEvent$(
  m.Scope scope,
  RawKeyboard target,
) =>
    target.handleRawKeyEvent;
Function _RawKeyboard_lookUpLayout$(
  m.Scope scope,
  RawKeyboard target,
) =>
    target.lookUpLayout;
Function _RawKeyboard_clearKeysPressed$(
  m.Scope scope,
  RawKeyboard target,
) =>
    target.clearKeysPressed;
KeyboardSide _KeyboardSide_any$() {
  return KeyboardSide.any;
}

KeyboardSide _KeyboardSide_left$() {
  return KeyboardSide.left;
}

KeyboardSide _KeyboardSide_right$() {
  return KeyboardSide.right;
}

KeyboardSide _KeyboardSide_all$() {
  return KeyboardSide.all;
}

List<KeyboardSide> _KeyboardSide_values$() {
  return KeyboardSide.values;
}

ModifierKey _ModifierKey_controlModifier$() {
  return ModifierKey.controlModifier;
}

ModifierKey _ModifierKey_shiftModifier$() {
  return ModifierKey.shiftModifier;
}

ModifierKey _ModifierKey_altModifier$() {
  return ModifierKey.altModifier;
}

ModifierKey _ModifierKey_metaModifier$() {
  return ModifierKey.metaModifier;
}

ModifierKey _ModifierKey_capsLockModifier$() {
  return ModifierKey.capsLockModifier;
}

ModifierKey _ModifierKey_numLockModifier$() {
  return ModifierKey.numLockModifier;
}

ModifierKey _ModifierKey_scrollLockModifier$() {
  return ModifierKey.scrollLockModifier;
}

ModifierKey _ModifierKey_functionModifier$() {
  return ModifierKey.functionModifier;
}

ModifierKey _ModifierKey_symbolModifier$() {
  return ModifierKey.symbolModifier;
}

List<ModifierKey> _ModifierKey_values$() {
  return ModifierKey.values;
}
