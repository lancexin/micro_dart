// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/filled_button.dart';
import 'dart:math';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/button_style_button.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/filled_button_theme.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/filled_button.dart',
  {
    'FilledButton.': _FilledButton__$,
    'FilledButton.icon': _FilledButton_icon_$,
    'FilledButton.tonal': _FilledButton_tonal_$,
    'FilledButton.tonalIcon': _FilledButton_tonalIcon_$,
    'FilledButton.styleFrom': _FilledButton_styleFrom$,
  },
  {},
  {
    'FilledButton': m.ClassMirror(
      'FilledButton',
      {
        '#as': FilledButton_as$,
        '#is': FilledButton_is$,
        'defaultStyleOf': _FilledButton_defaultStyleOf$,
        'themeStyleOf': _FilledButton_themeStyleOf$,
      },
      {},
    )
  },
);
Function FilledButton_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FilledButton;
Function FilledButton_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FilledButton;
Function _FilledButton__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer? onPressed,
      m.FunctionPointer? onLongPress,
      m.FunctionPointer? onHover,
      m.FunctionPointer? onFocusChange,
      ButtonStyle? style,
      FocusNode? focusNode,
      bool? autofocus,
      Clip? clipBehavior,
      MaterialStatesController? statesController,
      required Widget? child,
    }) {
      void onFocusChangeProxy(bool onFocusChange_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onFocusChange!,
            [onFocusChange_value$],
            {},
          );
      void onHoverProxy(bool onHover_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onHover!,
            [onHover_value$],
            {},
          );
      void onLongPressProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onLongPress!,
            [],
            {},
          );
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return FilledButton(
        autofocus: autofocus ?? false,
        child: child,
        clipBehavior: clipBehavior ?? Clip.none,
        focusNode: focusNode,
        key: key,
        onFocusChange: onFocusChange == null ? null : onFocusChangeProxy,
        onHover: onHover == null ? null : onHoverProxy,
        onLongPress: onLongPress == null ? null : onLongPressProxy,
        onPressed: onPressed == null ? null : onPressedProxy,
        statesController: statesController,
        style: style,
      );
    };
Function _FilledButton_icon_$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer? onPressed,
      m.FunctionPointer? onLongPress,
      m.FunctionPointer? onHover,
      m.FunctionPointer? onFocusChange,
      ButtonStyle? style,
      FocusNode? focusNode,
      bool? autofocus,
      Clip? clipBehavior,
      MaterialStatesController? statesController,
      required Widget icon,
      required Widget label,
    }) {
      void onFocusChangeProxy(bool onFocusChange_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onFocusChange!,
            [onFocusChange_value$],
            {},
          );
      void onHoverProxy(bool onHover_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onHover!,
            [onHover_value$],
            {},
          );
      void onLongPressProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onLongPress!,
            [],
            {},
          );
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return FilledButton.icon(
        autofocus: autofocus,
        clipBehavior: clipBehavior,
        focusNode: focusNode,
        icon: icon,
        key: key,
        label: label,
        onFocusChange: onFocusChange == null ? null : onFocusChangeProxy,
        onHover: onHover == null ? null : onHoverProxy,
        onLongPress: onLongPress == null ? null : onLongPressProxy,
        onPressed: onPressed == null ? null : onPressedProxy,
        statesController: statesController,
        style: style,
      );
    };
Function _FilledButton_tonal_$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer? onPressed,
      m.FunctionPointer? onLongPress,
      m.FunctionPointer? onHover,
      m.FunctionPointer? onFocusChange,
      ButtonStyle? style,
      FocusNode? focusNode,
      bool? autofocus,
      Clip? clipBehavior,
      MaterialStatesController? statesController,
      required Widget? child,
    }) {
      void onFocusChangeProxy(bool onFocusChange_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onFocusChange!,
            [onFocusChange_value$],
            {},
          );
      void onHoverProxy(bool onHover_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onHover!,
            [onHover_value$],
            {},
          );
      void onLongPressProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onLongPress!,
            [],
            {},
          );
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return FilledButton.tonal(
        autofocus: autofocus ?? false,
        child: child,
        clipBehavior: clipBehavior ?? Clip.none,
        focusNode: focusNode,
        key: key,
        onFocusChange: onFocusChange == null ? null : onFocusChangeProxy,
        onHover: onHover == null ? null : onHoverProxy,
        onLongPress: onLongPress == null ? null : onLongPressProxy,
        onPressed: onPressed == null ? null : onPressedProxy,
        statesController: statesController,
        style: style,
      );
    };
Function _FilledButton_tonalIcon_$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer? onPressed,
      m.FunctionPointer? onLongPress,
      m.FunctionPointer? onHover,
      m.FunctionPointer? onFocusChange,
      ButtonStyle? style,
      FocusNode? focusNode,
      bool? autofocus,
      Clip? clipBehavior,
      MaterialStatesController? statesController,
      required Widget icon,
      required Widget label,
    }) {
      void onFocusChangeProxy(bool onFocusChange_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onFocusChange!,
            [onFocusChange_value$],
            {},
          );
      void onHoverProxy(bool onHover_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onHover!,
            [onHover_value$],
            {},
          );
      void onLongPressProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onLongPress!,
            [],
            {},
          );
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return FilledButton.tonalIcon(
        autofocus: autofocus,
        clipBehavior: clipBehavior,
        focusNode: focusNode,
        icon: icon,
        key: key,
        label: label,
        onFocusChange: onFocusChange == null ? null : onFocusChangeProxy,
        onHover: onHover == null ? null : onHoverProxy,
        onLongPress: onLongPress == null ? null : onLongPressProxy,
        onPressed: onPressed == null ? null : onPressedProxy,
        statesController: statesController,
        style: style,
      );
    };
Function _FilledButton_styleFrom$(m.Scope scope$) => FilledButton.styleFrom;
Function _FilledButton_defaultStyleOf$(
  m.Scope scope$,
  FilledButton target$,
) =>
    target$.defaultStyleOf;
Function _FilledButton_themeStyleOf$(
  m.Scope scope$,
  FilledButton target$,
) =>
    target$.themeStyleOf;
