// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/spell_check.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/foundation.dart'
    show TargetPlatform, defaultTargetPlatform;
import 'package:flutter/painting.dart';
import 'package:flutter/services.dart'
    show SpellCheckResults, SpellCheckService, SuggestionSpan, TextEditingValue;
import 'package:flutter/src/widgets/editable_text.dart'
    show EditableTextContextMenuBuilder;
import 'package:flutter/src/widgets/framework.dart' show immutable;

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/spell_check.dart',
  {
    'SpellCheckConfiguration.': _SpellCheckConfiguration__$,
    'SpellCheckConfiguration.disabled': _SpellCheckConfiguration_disabled_$,
    'buildTextSpanWithSpellCheckSuggestions':
        _buildTextSpanWithSpellCheckSuggestions$,
  },
  {},
  {
    'SpellCheckConfiguration': m.ClassMirror(
      'SpellCheckConfiguration',
      {
        '#as': SpellCheckConfiguration_as$,
        '#is': SpellCheckConfiguration_is$,
        'spellCheckService': _SpellCheckConfiguration_spellCheckService$,
        'misspelledSelectionColor':
            _SpellCheckConfiguration_misspelledSelectionColor$,
        'misspelledTextStyle': _SpellCheckConfiguration_misspelledTextStyle$,
        'spellCheckSuggestionsToolbarBuilder':
            _SpellCheckConfiguration_spellCheckSuggestionsToolbarBuilder$,
        'spellCheckEnabled': _SpellCheckConfiguration_spellCheckEnabled$,
        'hashCode': _SpellCheckConfiguration_hashCode$,
        'copyWith': _SpellCheckConfiguration_copyWith$,
        'toString': _SpellCheckConfiguration_toString$,
        '==': _SpellCheckConfiguration_eq$$,
      },
      {},
    )
  },
);
Function SpellCheckConfiguration_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SpellCheckConfiguration;
Function SpellCheckConfiguration_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SpellCheckConfiguration;
Function _SpellCheckConfiguration_spellCheckService$(
  m.Scope scope$,
  SpellCheckConfiguration target$,
) =>
    () {
      return target$.spellCheckService;
    };
Function _SpellCheckConfiguration_misspelledSelectionColor$(
  m.Scope scope$,
  SpellCheckConfiguration target$,
) =>
    () {
      return target$.misspelledSelectionColor;
    };
Function _SpellCheckConfiguration_misspelledTextStyle$(
  m.Scope scope$,
  SpellCheckConfiguration target$,
) =>
    () {
      return target$.misspelledTextStyle;
    };
Function _SpellCheckConfiguration_spellCheckSuggestionsToolbarBuilder$(
  m.Scope scope$,
  SpellCheckConfiguration target$,
) =>
    () {
      return target$.spellCheckSuggestionsToolbarBuilder;
    };
Function _SpellCheckConfiguration_spellCheckEnabled$(
  m.Scope scope$,
  SpellCheckConfiguration target$,
) =>
    () {
      return target$.spellCheckEnabled;
    };
Function _SpellCheckConfiguration_hashCode$(
  m.Scope scope$,
  SpellCheckConfiguration target$,
) =>
    () {
      return target$.hashCode;
    };
Function _SpellCheckConfiguration__$(m.Scope scope$) => ({
      SpellCheckService? spellCheckService,
      Color? misspelledSelectionColor,
      TextStyle? misspelledTextStyle,
      m.FunctionPointer? spellCheckSuggestionsToolbarBuilder,
    }) {
      Widget spellCheckSuggestionsToolbarBuilderProxy(
        BuildContext spellCheckSuggestionsToolbarBuilder_context$,
        EditableTextState
            spellCheckSuggestionsToolbarBuilder_editableTextState$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            spellCheckSuggestionsToolbarBuilder!,
            [
              spellCheckSuggestionsToolbarBuilder_context$,
              spellCheckSuggestionsToolbarBuilder_editableTextState$,
            ],
            {},
          );
      return SpellCheckConfiguration(
        misspelledSelectionColor: misspelledSelectionColor,
        misspelledTextStyle: misspelledTextStyle,
        spellCheckService: spellCheckService,
        spellCheckSuggestionsToolbarBuilder:
            spellCheckSuggestionsToolbarBuilder == null
                ? null
                : spellCheckSuggestionsToolbarBuilderProxy,
      );
    };
Function _SpellCheckConfiguration_disabled_$(m.Scope scope$) =>
    SpellCheckConfiguration.disabled;
Function _SpellCheckConfiguration_copyWith$(
  m.Scope scope$,
  SpellCheckConfiguration target$,
) =>
    ({
      SpellCheckService? spellCheckService,
      Color? misspelledSelectionColor,
      TextStyle? misspelledTextStyle,
      m.FunctionPointer? spellCheckSuggestionsToolbarBuilder,
    }) {
      Widget spellCheckSuggestionsToolbarBuilderProxy(
        BuildContext spellCheckSuggestionsToolbarBuilder_context$,
        EditableTextState
            spellCheckSuggestionsToolbarBuilder_editableTextState$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            spellCheckSuggestionsToolbarBuilder!,
            [
              spellCheckSuggestionsToolbarBuilder_context$,
              spellCheckSuggestionsToolbarBuilder_editableTextState$,
            ],
            {},
          );
      return target$.copyWith(
        misspelledSelectionColor: misspelledSelectionColor,
        misspelledTextStyle: misspelledTextStyle,
        spellCheckService: spellCheckService,
        spellCheckSuggestionsToolbarBuilder:
            spellCheckSuggestionsToolbarBuilder == null
                ? null
                : spellCheckSuggestionsToolbarBuilderProxy,
      );
    };
Function _SpellCheckConfiguration_toString$(
  m.Scope scope$,
  SpellCheckConfiguration target$,
) =>
    target$.toString;
Function _SpellCheckConfiguration_eq$$(
  m.Scope scope$,
  SpellCheckConfiguration target$,
) =>
    (Object other$) => target$ == other$;
Function _buildTextSpanWithSpellCheckSuggestions$(m.Scope scope$) =>
    buildTextSpanWithSpellCheckSuggestions;
