// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/spell_check.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/foundation.dart'
    show TargetPlatform, defaultTargetPlatform;
import 'package:flutter/painting.dart';
import 'package:flutter/services.dart'
    show SpellCheckResults, SpellCheckService, SuggestionSpan, TextEditingValue;
import 'package:flutter/src/widgets/editable_text.dart'
    show EditableTextContextMenuBuilder;
import 'package:flutter/src/widgets/framework.dart' show immutable;

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/spell_check.dart',
  {
    'buildTextSpanWithSpellCheckSuggestions':
        _buildTextSpanWithSpellCheckSuggestions$
  },
  {},
  {
    'SpellCheckConfiguration': m.ClassMirror(
      'SpellCheckConfiguration',
      {
        'spellCheckService': _SpellCheckConfiguration_spellCheckService$,
        'misspelledSelectionColor':
            _SpellCheckConfiguration_misspelledSelectionColor$,
        'misspelledTextStyle': _SpellCheckConfiguration_misspelledTextStyle$,
        'spellCheckSuggestionsToolbarBuilder':
            _SpellCheckConfiguration_spellCheckSuggestionsToolbarBuilder$,
        'spellCheckEnabled': _SpellCheckConfiguration_spellCheckEnabled$,
        'hashCode': _SpellCheckConfiguration_hashCode$,
        'toString': _SpellCheckConfiguration_toString$,
      },
      {},
    )
  },
);
SpellCheckService? _SpellCheckConfiguration_spellCheckService$(
    SpellCheckConfiguration target) {
  return target.spellCheckService;
}

Color? _SpellCheckConfiguration_misspelledSelectionColor$(
    SpellCheckConfiguration target) {
  return target.misspelledSelectionColor;
}

TextStyle? _SpellCheckConfiguration_misspelledTextStyle$(
    SpellCheckConfiguration target) {
  return target.misspelledTextStyle;
}

Widget Function(BuildContext, EditableTextState)?
    _SpellCheckConfiguration_spellCheckSuggestionsToolbarBuilder$(
        SpellCheckConfiguration target) {
  return target.spellCheckSuggestionsToolbarBuilder;
}

bool _SpellCheckConfiguration_spellCheckEnabled$(
    SpellCheckConfiguration target) {
  return target.spellCheckEnabled;
}

int _SpellCheckConfiguration_hashCode$(SpellCheckConfiguration target) {
  return target.hashCode;
}

Function _SpellCheckConfiguration_toString$(
  m.Scope scope,
  SpellCheckConfiguration target,
) =>
    target.toString;
Function _buildTextSpanWithSpellCheckSuggestions$(m.Scope scope) =>
    buildTextSpanWithSpellCheckSuggestions;
