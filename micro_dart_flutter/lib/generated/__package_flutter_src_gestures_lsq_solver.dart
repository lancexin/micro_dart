// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/gestures/lsq_solver.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/gestures/lsq_solver.dart',
  {},
  {},
  {
    'PolynomialFit': m.ClassMirror(
      'PolynomialFit',
      {
        'coefficients': _PolynomialFit_coefficients$,
        'confidence': _PolynomialFit_confidence$,
        'toString': _PolynomialFit_toString$,
      },
      {'confidence': _PolynomialFit_confidence_set$},
    ),
    'LeastSquaresSolver': m.ClassMirror(
      'LeastSquaresSolver',
      {
        'x': _LeastSquaresSolver_x$,
        'y': _LeastSquaresSolver_y$,
        'w': _LeastSquaresSolver_w$,
        'solve': _LeastSquaresSolver_solve$,
      },
      {},
    ),
  },
);
List<double> _PolynomialFit_coefficients$(PolynomialFit target) {
  return target.coefficients;
}

double _PolynomialFit_confidence$(PolynomialFit target) {
  return target.confidence;
}

void _PolynomialFit_confidence_set$(
  PolynomialFit target,
  double other,
) {
  target.confidence = other;
}

Function _PolynomialFit_toString$(
  m.Scope scope,
  PolynomialFit target,
) =>
    target.toString;
List<double> _LeastSquaresSolver_x$(LeastSquaresSolver target) {
  return target.x;
}

List<double> _LeastSquaresSolver_y$(LeastSquaresSolver target) {
  return target.y;
}

List<double> _LeastSquaresSolver_w$(LeastSquaresSolver target) {
  return target.w;
}

Function _LeastSquaresSolver_solve$(
  m.Scope scope,
  LeastSquaresSolver target,
) =>
    target.solve;
