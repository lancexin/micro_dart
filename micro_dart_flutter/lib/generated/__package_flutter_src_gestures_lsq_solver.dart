// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/gestures/lsq_solver.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/gestures/lsq_solver.dart',
  {
    'PolynomialFit.': _PolynomialFit__$,
    'LeastSquaresSolver.': _LeastSquaresSolver__$,
  },
  {},
  {
    'PolynomialFit': m.ClassMirror(
      'PolynomialFit',
      {
        '#as': PolynomialFit_as$,
        '#is': PolynomialFit_is$,
        'coefficients': _PolynomialFit_coefficients$,
        'confidence': _PolynomialFit_confidence$,
        'toString': _PolynomialFit_toString$,
      },
      {'confidence': _PolynomialFit_confidence_set$},
    ),
    'LeastSquaresSolver': m.ClassMirror(
      'LeastSquaresSolver',
      {
        '#as': LeastSquaresSolver_as$,
        '#is': LeastSquaresSolver_is$,
        'x': _LeastSquaresSolver_x$,
        'y': _LeastSquaresSolver_y$,
        'w': _LeastSquaresSolver_w$,
        'solve': _LeastSquaresSolver_solve$,
      },
      {},
    ),
  },
);
Function PolynomialFit_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PolynomialFit;
Function PolynomialFit_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PolynomialFit;
Function _PolynomialFit_coefficients$(
  m.Scope scope$,
  PolynomialFit target$,
) =>
    () {
      return target$.coefficients;
    };
Function _PolynomialFit_confidence$(
  m.Scope scope$,
  PolynomialFit target$,
) =>
    () {
      return target$.confidence;
    };
void _PolynomialFit_confidence_set$(
  m.Scope scope$,
  PolynomialFit target$,
) =>
    (dynamic other$) {
      target$.confidence = other$;
    };
Function _PolynomialFit__$(m.Scope scope$) => (int degree) {
      return PolynomialFit(degree);
    };
Function _PolynomialFit_toString$(
  m.Scope scope$,
  PolynomialFit target$,
) =>
    target$.toString;
Function LeastSquaresSolver_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as LeastSquaresSolver;
Function LeastSquaresSolver_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is LeastSquaresSolver;
Function _LeastSquaresSolver_x$(
  m.Scope scope$,
  LeastSquaresSolver target$,
) =>
    () {
      return target$.x;
    };
Function _LeastSquaresSolver_y$(
  m.Scope scope$,
  LeastSquaresSolver target$,
) =>
    () {
      return target$.y;
    };
Function _LeastSquaresSolver_w$(
  m.Scope scope$,
  LeastSquaresSolver target$,
) =>
    () {
      return target$.w;
    };
Function _LeastSquaresSolver__$(m.Scope scope$) => (
      List x,
      List y,
      List w,
    ) {
      return LeastSquaresSolver(
        List.from(x),
        List.from(y),
        List.from(w),
      );
    };
Function _LeastSquaresSolver_solve$(
  m.Scope scope$,
  LeastSquaresSolver target$,
) =>
    target$.solve;
