// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/action_buttons.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/action_icons_theme.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/scaffold.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/action_buttons.dart',
  {
    'BackButtonIcon.': _BackButtonIcon__$,
    'BackButton.': _BackButton__$,
    'CloseButtonIcon.': _CloseButtonIcon__$,
    'CloseButton.': _CloseButton__$,
    'DrawerButtonIcon.': _DrawerButtonIcon__$,
    'DrawerButton.': _DrawerButton__$,
    'EndDrawerButtonIcon.': _EndDrawerButtonIcon__$,
    'EndDrawerButton.': _EndDrawerButton__$,
  },
  {},
  {
    'BackButtonIcon': m.ClassMirror(
      'BackButtonIcon',
      {
        '#as': BackButtonIcon_as$,
        '#is': BackButtonIcon_is$,
        'build': _BackButtonIcon_build$,
      },
      {},
    ),
    'BackButton': m.ClassMirror(
      'BackButton',
      {
        '#as': BackButton_as$,
        '#is': BackButton_is$,
      },
      {},
    ),
    'CloseButtonIcon': m.ClassMirror(
      'CloseButtonIcon',
      {
        '#as': CloseButtonIcon_as$,
        '#is': CloseButtonIcon_is$,
        'build': _CloseButtonIcon_build$,
      },
      {},
    ),
    'CloseButton': m.ClassMirror(
      'CloseButton',
      {
        '#as': CloseButton_as$,
        '#is': CloseButton_is$,
      },
      {},
    ),
    'DrawerButtonIcon': m.ClassMirror(
      'DrawerButtonIcon',
      {
        '#as': DrawerButtonIcon_as$,
        '#is': DrawerButtonIcon_is$,
        'build': _DrawerButtonIcon_build$,
      },
      {},
    ),
    'DrawerButton': m.ClassMirror(
      'DrawerButton',
      {
        '#as': DrawerButton_as$,
        '#is': DrawerButton_is$,
      },
      {},
    ),
    'EndDrawerButtonIcon': m.ClassMirror(
      'EndDrawerButtonIcon',
      {
        '#as': EndDrawerButtonIcon_as$,
        '#is': EndDrawerButtonIcon_is$,
        'build': _EndDrawerButtonIcon_build$,
      },
      {},
    ),
    'EndDrawerButton': m.ClassMirror(
      'EndDrawerButton',
      {
        '#as': EndDrawerButton_as$,
        '#is': EndDrawerButton_is$,
      },
      {},
    ),
  },
);
Function BackButtonIcon_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as BackButtonIcon;
Function BackButtonIcon_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is BackButtonIcon;
Function _BackButtonIcon__$(m.Scope scope$) => ({Key? key}) {
      return BackButtonIcon(key: key);
    };
Function _BackButtonIcon_build$(
  m.Scope scope$,
  BackButtonIcon target$,
) =>
    target$.build;
Function BackButton_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as BackButton;
Function BackButton_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is BackButton;
Function _BackButton__$(m.Scope scope$) => ({
      Key? key,
      Color? color,
      ButtonStyle? style,
      m.FunctionPointer? onPressed,
    }) {
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return BackButton(
        color: color,
        key: key,
        onPressed: onPressed == null ? null : onPressedProxy,
        style: style,
      );
    };
Function CloseButtonIcon_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CloseButtonIcon;
Function CloseButtonIcon_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CloseButtonIcon;
Function _CloseButtonIcon__$(m.Scope scope$) => ({Key? key}) {
      return CloseButtonIcon(key: key);
    };
Function _CloseButtonIcon_build$(
  m.Scope scope$,
  CloseButtonIcon target$,
) =>
    target$.build;
Function CloseButton_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CloseButton;
Function CloseButton_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CloseButton;
Function _CloseButton__$(m.Scope scope$) => ({
      Key? key,
      Color? color,
      m.FunctionPointer? onPressed,
      ButtonStyle? style,
    }) {
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return CloseButton(
        color: color,
        key: key,
        onPressed: onPressed == null ? null : onPressedProxy,
        style: style,
      );
    };
Function DrawerButtonIcon_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DrawerButtonIcon;
Function DrawerButtonIcon_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DrawerButtonIcon;
Function _DrawerButtonIcon__$(m.Scope scope$) => ({Key? key}) {
      return DrawerButtonIcon(key: key);
    };
Function _DrawerButtonIcon_build$(
  m.Scope scope$,
  DrawerButtonIcon target$,
) =>
    target$.build;
Function DrawerButton_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DrawerButton;
Function DrawerButton_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DrawerButton;
Function _DrawerButton__$(m.Scope scope$) => ({
      Key? key,
      ButtonStyle? style,
      m.FunctionPointer? onPressed,
    }) {
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return DrawerButton(
        key: key,
        onPressed: onPressed == null ? null : onPressedProxy,
        style: style,
      );
    };
Function EndDrawerButtonIcon_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as EndDrawerButtonIcon;
Function EndDrawerButtonIcon_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is EndDrawerButtonIcon;
Function _EndDrawerButtonIcon__$(m.Scope scope$) => ({Key? key}) {
      return EndDrawerButtonIcon(key: key);
    };
Function _EndDrawerButtonIcon_build$(
  m.Scope scope$,
  EndDrawerButtonIcon target$,
) =>
    target$.build;
Function EndDrawerButton_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as EndDrawerButton;
Function EndDrawerButton_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is EndDrawerButton;
Function _EndDrawerButton__$(m.Scope scope$) => ({
      Key? key,
      ButtonStyle? style,
      m.FunctionPointer? onPressed,
    }) {
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return EndDrawerButton(
        key: key,
        onPressed: onPressed == null ? null : onPressedProxy,
        style: style,
      );
    };
