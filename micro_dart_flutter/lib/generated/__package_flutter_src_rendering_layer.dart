// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/layer.dart';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/scheduler.dart';
import 'package:vector_math/vector_math_64.dart';
import 'package:flutter/src/rendering/debug.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/layer.dart',
  {
    'AnnotationEntry.': _AnnotationEntry__$,
    'AnnotationResult.': _AnnotationResult__$,
    'LayerHandle.': _LayerHandle__$,
    'PictureLayer.': _PictureLayer__$,
    'TextureLayer.': _TextureLayer__$,
    'PlatformViewLayer.': _PlatformViewLayer__$,
    'PerformanceOverlayLayer.': _PerformanceOverlayLayer__$,
    'ContainerLayer.': _ContainerLayer__$,
    'OffsetLayer.': _OffsetLayer__$,
    'ClipRectLayer.': _ClipRectLayer__$,
    'ClipRRectLayer.': _ClipRRectLayer__$,
    'ClipPathLayer.': _ClipPathLayer__$,
    'ColorFilterLayer.': _ColorFilterLayer__$,
    'ImageFilterLayer.': _ImageFilterLayer__$,
    'TransformLayer.': _TransformLayer__$,
    'OpacityLayer.': _OpacityLayer__$,
    'ShaderMaskLayer.': _ShaderMaskLayer__$,
    'BackdropFilterLayer.': _BackdropFilterLayer__$,
    'LayerLink.': _LayerLink__$,
    'LeaderLayer.': _LeaderLayer__$,
    'FollowerLayer.': _FollowerLayer__$,
    'AnnotatedRegionLayer.': _AnnotatedRegionLayer__$,
  },
  {},
  {
    'AnnotationEntry': m.ClassMirror(
      'AnnotationEntry',
      {
        '#as': AnnotationEntry_as$,
        '#is': AnnotationEntry_is$,
        'annotation': _AnnotationEntry_annotation$,
        'localPosition': _AnnotationEntry_localPosition$,
        'toString': _AnnotationEntry_toString$,
      },
      {},
    ),
    'AnnotationResult': m.ClassMirror(
      'AnnotationResult',
      {
        '#as': AnnotationResult_as$,
        '#is': AnnotationResult_is$,
        'entries': _AnnotationResult_entries$,
        'annotations': _AnnotationResult_annotations$,
        'add': _AnnotationResult_add$,
      },
      {},
    ),
    'Layer': m.ClassMirror(
      'Layer',
      {
        '#as': Layer_as$,
        '#is': Layer_is$,
        'debugCreator': _Layer_debugCreator$,
        'subtreeHasCompositionCallbacks':
            _Layer_subtreeHasCompositionCallbacks$,
        'debugDisposed': _Layer_debugDisposed$,
        'debugHandleCount': _Layer_debugHandleCount$,
        'parent': _Layer_parent$,
        'alwaysNeedsAddToScene': _Layer_alwaysNeedsAddToScene$,
        'debugSubtreeNeedsAddToScene': _Layer_debugSubtreeNeedsAddToScene$,
        'engineLayer': _Layer_engineLayer$,
        'nextSibling': _Layer_nextSibling$,
        'previousSibling': _Layer_previousSibling$,
        'supportsRasterization': _Layer_supportsRasterization$,
        'describeClipBounds': _Layer_describeClipBounds$,
        'addCompositionCallback': _Layer_addCompositionCallback$,
        'dispose': _Layer_dispose$,
        'markNeedsAddToScene': _Layer_markNeedsAddToScene$,
        'debugMarkClean': _Layer_debugMarkClean$,
        'updateSubtreeNeedsAddToScene': _Layer_updateSubtreeNeedsAddToScene$,
        // 'dropChild': _Layer_dropChild$,
        // 'adoptChild': _Layer_adoptChild$,
        'remove': _Layer_remove$,
        'findAnnotations': _Layer_findAnnotations$,
        'find': _Layer_find$,
        'findAllAnnotations': _Layer_findAllAnnotations$,
        'addToScene': _Layer_addToScene$,
        'toStringShort': _Layer_toStringShort$,
        'debugFillProperties': _Layer_debugFillProperties$,
      },
      {
        'debugCreator': _Layer_debugCreator_set$,
        'engineLayer': _Layer_engineLayer_set$,
      },
    ),
    'LayerHandle': m.ClassMirror(
      'LayerHandle',
      {
        '#as': LayerHandle_as$,
        '#is': LayerHandle_is$,
        'layer': _LayerHandle_layer$,
        'toString': _LayerHandle_toString$,
      },
      {'layer': _LayerHandle_layer_set$},
    ),
    'PictureLayer': m.ClassMirror(
      'PictureLayer',
      {
        '#as': PictureLayer_as$,
        '#is': PictureLayer_is$,
        'canvasBounds': _PictureLayer_canvasBounds$,
        'picture': _PictureLayer_picture$,
        'isComplexHint': _PictureLayer_isComplexHint$,
        'willChangeHint': _PictureLayer_willChangeHint$,
        'dispose': _PictureLayer_dispose$,
        'addToScene': _PictureLayer_addToScene$,
        'debugFillProperties': _PictureLayer_debugFillProperties$,
        'findAnnotations': _PictureLayer_findAnnotations$,
      },
      {
        'picture': _PictureLayer_picture_set$,
        'isComplexHint': _PictureLayer_isComplexHint_set$,
        'willChangeHint': _PictureLayer_willChangeHint_set$,
      },
    ),
    'TextureLayer': m.ClassMirror(
      'TextureLayer',
      {
        '#as': TextureLayer_as$,
        '#is': TextureLayer_is$,
        'rect': _TextureLayer_rect$,
        'textureId': _TextureLayer_textureId$,
        'freeze': _TextureLayer_freeze$,
        'filterQuality': _TextureLayer_filterQuality$,
        'addToScene': _TextureLayer_addToScene$,
        'findAnnotations': _TextureLayer_findAnnotations$,
      },
      {},
    ),
    'PlatformViewLayer': m.ClassMirror(
      'PlatformViewLayer',
      {
        '#as': PlatformViewLayer_as$,
        '#is': PlatformViewLayer_is$,
        'rect': _PlatformViewLayer_rect$,
        'viewId': _PlatformViewLayer_viewId$,
        'supportsRasterization': _PlatformViewLayer_supportsRasterization$,
        'addToScene': _PlatformViewLayer_addToScene$,
      },
      {},
    ),
    'PerformanceOverlayLayer': m.ClassMirror(
      'PerformanceOverlayLayer',
      {
        '#as': PerformanceOverlayLayer_as$,
        '#is': PerformanceOverlayLayer_is$,
        'optionsMask': _PerformanceOverlayLayer_optionsMask$,
        'rasterizerThreshold': _PerformanceOverlayLayer_rasterizerThreshold$,
        'checkerboardRasterCacheImages':
            _PerformanceOverlayLayer_checkerboardRasterCacheImages$,
        'checkerboardOffscreenLayers':
            _PerformanceOverlayLayer_checkerboardOffscreenLayers$,
        'overlayRect': _PerformanceOverlayLayer_overlayRect$,
        'addToScene': _PerformanceOverlayLayer_addToScene$,
        'findAnnotations': _PerformanceOverlayLayer_findAnnotations$,
      },
      {'overlayRect': _PerformanceOverlayLayer_overlayRect_set$},
    ),
    'ContainerLayer': m.ClassMirror(
      'ContainerLayer',
      {
        '#as': ContainerLayer_as$,
        '#is': ContainerLayer_is$,
        'firstChild': _ContainerLayer_firstChild$,
        'lastChild': _ContainerLayer_lastChild$,
        'hasChildren': _ContainerLayer_hasChildren$,
        'supportsRasterization': _ContainerLayer_supportsRasterization$,
        'buildScene': _ContainerLayer_buildScene$,
        'dispose': _ContainerLayer_dispose$,
        'updateSubtreeNeedsAddToScene':
            _ContainerLayer_updateSubtreeNeedsAddToScene$,
        'findAnnotations': _ContainerLayer_findAnnotations$,
        'attach': _ContainerLayer_attach$,
        'detach': _ContainerLayer_detach$,
        'append': _ContainerLayer_append$,
        'removeAllChildren': _ContainerLayer_removeAllChildren$,
        'addToScene': _ContainerLayer_addToScene$,
        'addChildrenToScene': _ContainerLayer_addChildrenToScene$,
        'applyTransform': _ContainerLayer_applyTransform$,
        'depthFirstIterateChildren': _ContainerLayer_depthFirstIterateChildren$,
        'debugDescribeChildren': _ContainerLayer_debugDescribeChildren$,
      },
      {},
    ),
    'OffsetLayer': m.ClassMirror(
      'OffsetLayer',
      {
        '#as': OffsetLayer_as$,
        '#is': OffsetLayer_is$,
        'offset': _OffsetLayer_offset$,
        'findAnnotations': _OffsetLayer_findAnnotations$,
        'applyTransform': _OffsetLayer_applyTransform$,
        'addToScene': _OffsetLayer_addToScene$,
        'debugFillProperties': _OffsetLayer_debugFillProperties$,
        'toImage': _OffsetLayer_toImage$,
        'toImageSync': _OffsetLayer_toImageSync$,
      },
      {'offset': _OffsetLayer_offset_set$},
    ),
    'ClipRectLayer': m.ClassMirror(
      'ClipRectLayer',
      {
        '#as': ClipRectLayer_as$,
        '#is': ClipRectLayer_is$,
        'clipRect': _ClipRectLayer_clipRect$,
        'clipBehavior': _ClipRectLayer_clipBehavior$,
        'describeClipBounds': _ClipRectLayer_describeClipBounds$,
        'findAnnotations': _ClipRectLayer_findAnnotations$,
        'addToScene': _ClipRectLayer_addToScene$,
        'debugFillProperties': _ClipRectLayer_debugFillProperties$,
      },
      {
        'clipRect': _ClipRectLayer_clipRect_set$,
        'clipBehavior': _ClipRectLayer_clipBehavior_set$,
      },
    ),
    'ClipRRectLayer': m.ClassMirror(
      'ClipRRectLayer',
      {
        '#as': ClipRRectLayer_as$,
        '#is': ClipRRectLayer_is$,
        'clipRRect': _ClipRRectLayer_clipRRect$,
        'clipBehavior': _ClipRRectLayer_clipBehavior$,
        'describeClipBounds': _ClipRRectLayer_describeClipBounds$,
        'findAnnotations': _ClipRRectLayer_findAnnotations$,
        'addToScene': _ClipRRectLayer_addToScene$,
        'debugFillProperties': _ClipRRectLayer_debugFillProperties$,
      },
      {
        'clipRRect': _ClipRRectLayer_clipRRect_set$,
        'clipBehavior': _ClipRRectLayer_clipBehavior_set$,
      },
    ),
    'ClipPathLayer': m.ClassMirror(
      'ClipPathLayer',
      {
        '#as': ClipPathLayer_as$,
        '#is': ClipPathLayer_is$,
        'clipPath': _ClipPathLayer_clipPath$,
        'clipBehavior': _ClipPathLayer_clipBehavior$,
        'describeClipBounds': _ClipPathLayer_describeClipBounds$,
        'findAnnotations': _ClipPathLayer_findAnnotations$,
        'addToScene': _ClipPathLayer_addToScene$,
        'debugFillProperties': _ClipPathLayer_debugFillProperties$,
      },
      {
        'clipPath': _ClipPathLayer_clipPath_set$,
        'clipBehavior': _ClipPathLayer_clipBehavior_set$,
      },
    ),
    'ColorFilterLayer': m.ClassMirror(
      'ColorFilterLayer',
      {
        '#as': ColorFilterLayer_as$,
        '#is': ColorFilterLayer_is$,
        'colorFilter': _ColorFilterLayer_colorFilter$,
        'addToScene': _ColorFilterLayer_addToScene$,
        'debugFillProperties': _ColorFilterLayer_debugFillProperties$,
      },
      {'colorFilter': _ColorFilterLayer_colorFilter_set$},
    ),
    'ImageFilterLayer': m.ClassMirror(
      'ImageFilterLayer',
      {
        '#as': ImageFilterLayer_as$,
        '#is': ImageFilterLayer_is$,
        'imageFilter': _ImageFilterLayer_imageFilter$,
        'addToScene': _ImageFilterLayer_addToScene$,
        'debugFillProperties': _ImageFilterLayer_debugFillProperties$,
      },
      {'imageFilter': _ImageFilterLayer_imageFilter_set$},
    ),
    'TransformLayer': m.ClassMirror(
      'TransformLayer',
      {
        '#as': TransformLayer_as$,
        '#is': TransformLayer_is$,
        'transform': _TransformLayer_transform$,
        'addToScene': _TransformLayer_addToScene$,
        'findAnnotations': _TransformLayer_findAnnotations$,
        'applyTransform': _TransformLayer_applyTransform$,
        'debugFillProperties': _TransformLayer_debugFillProperties$,
      },
      {'transform': _TransformLayer_transform_set$},
    ),
    'OpacityLayer': m.ClassMirror(
      'OpacityLayer',
      {
        '#as': OpacityLayer_as$,
        '#is': OpacityLayer_is$,
        'alpha': _OpacityLayer_alpha$,
        'addToScene': _OpacityLayer_addToScene$,
        'debugFillProperties': _OpacityLayer_debugFillProperties$,
      },
      {'alpha': _OpacityLayer_alpha_set$},
    ),
    'ShaderMaskLayer': m.ClassMirror(
      'ShaderMaskLayer',
      {
        '#as': ShaderMaskLayer_as$,
        '#is': ShaderMaskLayer_is$,
        'shader': _ShaderMaskLayer_shader$,
        'maskRect': _ShaderMaskLayer_maskRect$,
        'blendMode': _ShaderMaskLayer_blendMode$,
        'addToScene': _ShaderMaskLayer_addToScene$,
        'debugFillProperties': _ShaderMaskLayer_debugFillProperties$,
      },
      {
        'shader': _ShaderMaskLayer_shader_set$,
        'maskRect': _ShaderMaskLayer_maskRect_set$,
        'blendMode': _ShaderMaskLayer_blendMode_set$,
      },
    ),
    'BackdropFilterLayer': m.ClassMirror(
      'BackdropFilterLayer',
      {
        '#as': BackdropFilterLayer_as$,
        '#is': BackdropFilterLayer_is$,
        'filter': _BackdropFilterLayer_filter$,
        'blendMode': _BackdropFilterLayer_blendMode$,
        'addToScene': _BackdropFilterLayer_addToScene$,
        'debugFillProperties': _BackdropFilterLayer_debugFillProperties$,
      },
      {
        'filter': _BackdropFilterLayer_filter_set$,
        'blendMode': _BackdropFilterLayer_blendMode_set$,
      },
    ),
    'LayerLink': m.ClassMirror(
      'LayerLink',
      {
        '#as': LayerLink_as$,
        '#is': LayerLink_is$,
        'leaderSize': _LayerLink_leaderSize$,
        'leader': _LayerLink_leader$,
        'toString': _LayerLink_toString$,
      },
      {'leaderSize': _LayerLink_leaderSize_set$},
    ),
    'LeaderLayer': m.ClassMirror(
      'LeaderLayer',
      {
        '#as': LeaderLayer_as$,
        '#is': LeaderLayer_is$,
        'link': _LeaderLayer_link$,
        'offset': _LeaderLayer_offset$,
        'attach': _LeaderLayer_attach$,
        'detach': _LeaderLayer_detach$,
        'findAnnotations': _LeaderLayer_findAnnotations$,
        'addToScene': _LeaderLayer_addToScene$,
        'applyTransform': _LeaderLayer_applyTransform$,
        'debugFillProperties': _LeaderLayer_debugFillProperties$,
      },
      {
        'link': _LeaderLayer_link_set$,
        'offset': _LeaderLayer_offset_set$,
      },
    ),
    'FollowerLayer': m.ClassMirror(
      'FollowerLayer',
      {
        '#as': FollowerLayer_as$,
        '#is': FollowerLayer_is$,
        'link': _FollowerLayer_link$,
        'showWhenUnlinked': _FollowerLayer_showWhenUnlinked$,
        'unlinkedOffset': _FollowerLayer_unlinkedOffset$,
        'linkedOffset': _FollowerLayer_linkedOffset$,
        'alwaysNeedsAddToScene': _FollowerLayer_alwaysNeedsAddToScene$,
        'findAnnotations': _FollowerLayer_findAnnotations$,
        'getLastTransform': _FollowerLayer_getLastTransform$,
        'addToScene': _FollowerLayer_addToScene$,
        'applyTransform': _FollowerLayer_applyTransform$,
        'debugFillProperties': _FollowerLayer_debugFillProperties$,
      },
      {
        'link': _FollowerLayer_link_set$,
        'showWhenUnlinked': _FollowerLayer_showWhenUnlinked_set$,
        'unlinkedOffset': _FollowerLayer_unlinkedOffset_set$,
        'linkedOffset': _FollowerLayer_linkedOffset_set$,
      },
    ),
    'AnnotatedRegionLayer': m.ClassMirror(
      'AnnotatedRegionLayer',
      {
        '#as': AnnotatedRegionLayer_as$,
        '#is': AnnotatedRegionLayer_is$,
        'value': _AnnotatedRegionLayer_value$,
        'size': _AnnotatedRegionLayer_size$,
        'offset': _AnnotatedRegionLayer_offset$,
        'opaque': _AnnotatedRegionLayer_opaque$,
        'findAnnotations': _AnnotatedRegionLayer_findAnnotations$,
        'debugFillProperties': _AnnotatedRegionLayer_debugFillProperties$,
      },
      {},
    ),
  },
);
Function AnnotationEntry_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AnnotationEntry<T>;
Function AnnotationEntry_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AnnotationEntry<T>;
Function _AnnotationEntry_annotation$<T>(
  m.Scope scope$,
  AnnotationEntry<T> target$,
) =>
    () {
      return target$.annotation;
    };
Function _AnnotationEntry_localPosition$<T>(
  m.Scope scope$,
  AnnotationEntry<T> target$,
) =>
    () {
      return target$.localPosition;
    };
Function _AnnotationEntry__$(m.Scope scope$) => ({
      required dynamic annotation,
      required Offset localPosition,
    }) {
      return AnnotationEntry(
        annotation: annotation,
        localPosition: localPosition,
      );
    };
Function _AnnotationEntry_toString$<T>(
  m.Scope scope$,
  AnnotationEntry<T> target$,
) =>
    target$.toString;
Function AnnotationResult_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AnnotationResult<T>;
Function AnnotationResult_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AnnotationResult<T>;
Function _AnnotationResult_entries$<T>(
  m.Scope scope$,
  AnnotationResult<T> target$,
) =>
    () {
      return target$.entries;
    };
Function _AnnotationResult_annotations$<T>(
  m.Scope scope$,
  AnnotationResult<T> target$,
) =>
    () {
      return target$.annotations;
    };
Function _AnnotationResult__$(m.Scope scope$) => () {
      return AnnotationResult();
    };
Function _AnnotationResult_add$<T>(
  m.Scope scope$,
  AnnotationResult<T> target$,
) =>
    target$.add;
Function Layer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Layer;
Function Layer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Layer;
Function _Layer_debugCreator$(
  m.Scope scope$,
  Layer target$,
) =>
    () {
      return target$.debugCreator;
    };
void _Layer_debugCreator_set$(
  m.Scope scope$,
  Layer target$,
) =>
    (dynamic other$) {
      target$.debugCreator = other$;
    };
Function _Layer_subtreeHasCompositionCallbacks$(
  m.Scope scope$,
  Layer target$,
) =>
    () {
      return target$.subtreeHasCompositionCallbacks;
    };
Function _Layer_debugDisposed$(
  m.Scope scope$,
  Layer target$,
) =>
    () {
      return target$.debugDisposed;
    };
Function _Layer_debugHandleCount$(
  m.Scope scope$,
  Layer target$,
) =>
    () {
      return target$.debugHandleCount;
    };
Function _Layer_parent$(
  m.Scope scope$,
  Layer target$,
) =>
    () {
      return target$.parent;
    };
Function _Layer_alwaysNeedsAddToScene$(
  m.Scope scope$,
  Layer target$,
) =>
    () {
      return target$.alwaysNeedsAddToScene;
    };
Function _Layer_debugSubtreeNeedsAddToScene$(
  m.Scope scope$,
  Layer target$,
) =>
    () {
      return target$.debugSubtreeNeedsAddToScene;
    };
Function _Layer_engineLayer$(
  m.Scope scope$,
  Layer target$,
) =>
    () {
      return target$.engineLayer;
    };
void _Layer_engineLayer_set$(
  m.Scope scope$,
  Layer target$,
) =>
    (dynamic other$) {
      target$.engineLayer = other$;
    };
Function _Layer_nextSibling$(
  m.Scope scope$,
  Layer target$,
) =>
    () {
      return target$.nextSibling;
    };
Function _Layer_previousSibling$(
  m.Scope scope$,
  Layer target$,
) =>
    () {
      return target$.previousSibling;
    };
Function _Layer_supportsRasterization$(
  m.Scope scope$,
  Layer target$,
) =>
    target$.supportsRasterization;
Function _Layer_describeClipBounds$(
  m.Scope scope$,
  Layer target$,
) =>
    target$.describeClipBounds;
Function _Layer_addCompositionCallback$(
  m.Scope scope$,
  Layer target$,
) =>
    (m.FunctionPointer callback) {
      void callbackProxy(Layer callback_$p0$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            callback,
            [callback_$p0$],
            {},
          );
      return target$.addCompositionCallback(callbackProxy);
    };
Function _Layer_dispose$(
  m.Scope scope$,
  Layer target$,
) =>
    target$.dispose;
Function _Layer_markNeedsAddToScene$(
  m.Scope scope$,
  Layer target$,
) =>
    target$.markNeedsAddToScene;
Function _Layer_debugMarkClean$(
  m.Scope scope$,
  Layer target$,
) =>
    target$.debugMarkClean;
Function _Layer_updateSubtreeNeedsAddToScene$(
  m.Scope scope$,
  Layer target$,
) =>
    target$.updateSubtreeNeedsAddToScene;
// Function _Layer_dropChild$(
//   m.Scope scope$,
//   Layer target$,
// ) =>
//     target$.dropChild;
// Function _Layer_adoptChild$(
//   m.Scope scope$,
//   Layer target$,
// ) =>
//     target$.adoptChild;
Function _Layer_remove$(
  m.Scope scope$,
  Layer target$,
) =>
    target$.remove;
Function _Layer_findAnnotations$<S extends Object>(
  m.Scope scope$,
  Layer target$,
) =>
    target$.findAnnotations<S>;
Function _Layer_find$<S extends Object>(
  m.Scope scope$,
  Layer target$,
) =>
    target$.find<S>;
Function _Layer_findAllAnnotations$<S extends Object>(
  m.Scope scope$,
  Layer target$,
) =>
    target$.findAllAnnotations<S>;
Function _Layer_addToScene$(
  m.Scope scope$,
  Layer target$,
) =>
    target$.addToScene;
Function _Layer_toStringShort$(
  m.Scope scope$,
  Layer target$,
) =>
    target$.toStringShort;
Function _Layer_debugFillProperties$(
  m.Scope scope$,
  Layer target$,
) =>
    target$.debugFillProperties;
Function LayerHandle_as$<T extends Layer>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as LayerHandle<T>;
Function LayerHandle_is$<T extends Layer>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is LayerHandle<T>;
Function _LayerHandle_layer$<T extends Layer>(
  m.Scope scope$,
  LayerHandle<T> target$,
) =>
    () {
      return target$.layer;
    };
void _LayerHandle_layer_set$<T extends Layer>(
  m.Scope scope$,
  LayerHandle target$,
) =>
    (dynamic other$) {
      target$.layer = other$;
    };
Function _LayerHandle__$(m.Scope scope$) =>
    <T extends Layer>([dynamic? _layer]) {
      if (_layer == null) {
        return LayerHandle<T>();
      }
      return LayerHandle<T>(_layer!);
    };
Function _LayerHandle_toString$<T extends Layer>(
  m.Scope scope$,
  LayerHandle<T> target$,
) =>
    target$.toString;
Function PictureLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PictureLayer;
Function PictureLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PictureLayer;
Function _PictureLayer_canvasBounds$(
  m.Scope scope$,
  PictureLayer target$,
) =>
    () {
      return target$.canvasBounds;
    };
Function _PictureLayer_picture$(
  m.Scope scope$,
  PictureLayer target$,
) =>
    () {
      return target$.picture;
    };
void _PictureLayer_picture_set$(
  m.Scope scope$,
  PictureLayer target$,
) =>
    (dynamic other$) {
      target$.picture = other$;
    };
Function _PictureLayer_isComplexHint$(
  m.Scope scope$,
  PictureLayer target$,
) =>
    () {
      return target$.isComplexHint;
    };
void _PictureLayer_isComplexHint_set$(
  m.Scope scope$,
  PictureLayer target$,
) =>
    (dynamic other$) {
      target$.isComplexHint = other$;
    };
Function _PictureLayer_willChangeHint$(
  m.Scope scope$,
  PictureLayer target$,
) =>
    () {
      return target$.willChangeHint;
    };
void _PictureLayer_willChangeHint_set$(
  m.Scope scope$,
  PictureLayer target$,
) =>
    (dynamic other$) {
      target$.willChangeHint = other$;
    };
Function _PictureLayer__$(m.Scope scope$) => (Rect canvasBounds) {
      return PictureLayer(canvasBounds);
    };
Function _PictureLayer_dispose$(
  m.Scope scope$,
  PictureLayer target$,
) =>
    target$.dispose;
Function _PictureLayer_addToScene$(
  m.Scope scope$,
  PictureLayer target$,
) =>
    target$.addToScene;
Function _PictureLayer_debugFillProperties$(
  m.Scope scope$,
  PictureLayer target$,
) =>
    target$.debugFillProperties;
Function _PictureLayer_findAnnotations$<S extends Object>(
  m.Scope scope$,
  PictureLayer target$,
) =>
    target$.findAnnotations<S>;
Function TextureLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextureLayer;
Function TextureLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextureLayer;
Function _TextureLayer_rect$(
  m.Scope scope$,
  TextureLayer target$,
) =>
    () {
      return target$.rect;
    };
Function _TextureLayer_textureId$(
  m.Scope scope$,
  TextureLayer target$,
) =>
    () {
      return target$.textureId;
    };
Function _TextureLayer_freeze$(
  m.Scope scope$,
  TextureLayer target$,
) =>
    () {
      return target$.freeze;
    };
Function _TextureLayer_filterQuality$(
  m.Scope scope$,
  TextureLayer target$,
) =>
    () {
      return target$.filterQuality;
    };
Function _TextureLayer__$(m.Scope scope$) => ({
      required Rect rect,
      required int textureId,
      bool? freeze,
      FilterQuality? filterQuality,
    }) {
      return TextureLayer(
        filterQuality: filterQuality ?? FilterQuality.low,
        freeze: freeze ?? false,
        rect: rect,
        textureId: textureId,
      );
    };
Function _TextureLayer_addToScene$(
  m.Scope scope$,
  TextureLayer target$,
) =>
    target$.addToScene;
Function _TextureLayer_findAnnotations$<S extends Object>(
  m.Scope scope$,
  TextureLayer target$,
) =>
    target$.findAnnotations<S>;
Function PlatformViewLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PlatformViewLayer;
Function PlatformViewLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PlatformViewLayer;
Function _PlatformViewLayer_rect$(
  m.Scope scope$,
  PlatformViewLayer target$,
) =>
    () {
      return target$.rect;
    };
Function _PlatformViewLayer_viewId$(
  m.Scope scope$,
  PlatformViewLayer target$,
) =>
    () {
      return target$.viewId;
    };
Function _PlatformViewLayer__$(m.Scope scope$) => ({
      required Rect rect,
      required int viewId,
    }) {
      return PlatformViewLayer(
        rect: rect,
        viewId: viewId,
      );
    };
Function _PlatformViewLayer_supportsRasterization$(
  m.Scope scope$,
  PlatformViewLayer target$,
) =>
    target$.supportsRasterization;
Function _PlatformViewLayer_addToScene$(
  m.Scope scope$,
  PlatformViewLayer target$,
) =>
    target$.addToScene;
Function PerformanceOverlayLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PerformanceOverlayLayer;
Function PerformanceOverlayLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PerformanceOverlayLayer;
Function _PerformanceOverlayLayer_optionsMask$(
  m.Scope scope$,
  PerformanceOverlayLayer target$,
) =>
    () {
      return target$.optionsMask;
    };
Function _PerformanceOverlayLayer_rasterizerThreshold$(
  m.Scope scope$,
  PerformanceOverlayLayer target$,
) =>
    () {
      return target$.rasterizerThreshold;
    };
Function _PerformanceOverlayLayer_checkerboardRasterCacheImages$(
  m.Scope scope$,
  PerformanceOverlayLayer target$,
) =>
    () {
      return target$.checkerboardRasterCacheImages;
    };
Function _PerformanceOverlayLayer_checkerboardOffscreenLayers$(
  m.Scope scope$,
  PerformanceOverlayLayer target$,
) =>
    () {
      return target$.checkerboardOffscreenLayers;
    };
Function _PerformanceOverlayLayer_overlayRect$(
  m.Scope scope$,
  PerformanceOverlayLayer target$,
) =>
    () {
      return target$.overlayRect;
    };
void _PerformanceOverlayLayer_overlayRect_set$(
  m.Scope scope$,
  PerformanceOverlayLayer target$,
) =>
    (dynamic other$) {
      target$.overlayRect = other$;
    };
Function _PerformanceOverlayLayer__$(m.Scope scope$) => ({
      required Rect overlayRect,
      required int optionsMask,
      required int rasterizerThreshold,
      required bool checkerboardRasterCacheImages,
      required bool checkerboardOffscreenLayers,
    }) {
      return PerformanceOverlayLayer(
        checkerboardOffscreenLayers: checkerboardOffscreenLayers,
        checkerboardRasterCacheImages: checkerboardRasterCacheImages,
        optionsMask: optionsMask,
        overlayRect: overlayRect,
        rasterizerThreshold: rasterizerThreshold,
      );
    };
Function _PerformanceOverlayLayer_addToScene$(
  m.Scope scope$,
  PerformanceOverlayLayer target$,
) =>
    target$.addToScene;
Function _PerformanceOverlayLayer_findAnnotations$<S extends Object>(
  m.Scope scope$,
  PerformanceOverlayLayer target$,
) =>
    target$.findAnnotations<S>;
Function ContainerLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ContainerLayer;
Function ContainerLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ContainerLayer;
Function _ContainerLayer_firstChild$(
  m.Scope scope$,
  ContainerLayer target$,
) =>
    () {
      return target$.firstChild;
    };
Function _ContainerLayer_lastChild$(
  m.Scope scope$,
  ContainerLayer target$,
) =>
    () {
      return target$.lastChild;
    };
Function _ContainerLayer_hasChildren$(
  m.Scope scope$,
  ContainerLayer target$,
) =>
    () {
      return target$.hasChildren;
    };
Function _ContainerLayer__$(m.Scope scope$) => () {
      return ContainerLayer();
    };
Function _ContainerLayer_supportsRasterization$(
  m.Scope scope$,
  ContainerLayer target$,
) =>
    target$.supportsRasterization;
Function _ContainerLayer_buildScene$(
  m.Scope scope$,
  ContainerLayer target$,
) =>
    target$.buildScene;
Function _ContainerLayer_dispose$(
  m.Scope scope$,
  ContainerLayer target$,
) =>
    target$.dispose;
Function _ContainerLayer_updateSubtreeNeedsAddToScene$(
  m.Scope scope$,
  ContainerLayer target$,
) =>
    target$.updateSubtreeNeedsAddToScene;
Function _ContainerLayer_findAnnotations$<S extends Object>(
  m.Scope scope$,
  ContainerLayer target$,
) =>
    target$.findAnnotations<S>;
Function _ContainerLayer_attach$(
  m.Scope scope$,
  ContainerLayer target$,
) =>
    target$.attach;
Function _ContainerLayer_detach$(
  m.Scope scope$,
  ContainerLayer target$,
) =>
    target$.detach;
Function _ContainerLayer_append$(
  m.Scope scope$,
  ContainerLayer target$,
) =>
    target$.append;
Function _ContainerLayer_removeAllChildren$(
  m.Scope scope$,
  ContainerLayer target$,
) =>
    target$.removeAllChildren;
Function _ContainerLayer_addToScene$(
  m.Scope scope$,
  ContainerLayer target$,
) =>
    target$.addToScene;
Function _ContainerLayer_addChildrenToScene$(
  m.Scope scope$,
  ContainerLayer target$,
) =>
    target$.addChildrenToScene;
Function _ContainerLayer_applyTransform$(
  m.Scope scope$,
  ContainerLayer target$,
) =>
    target$.applyTransform;
Function _ContainerLayer_depthFirstIterateChildren$(
  m.Scope scope$,
  ContainerLayer target$,
) =>
    target$.depthFirstIterateChildren;
Function _ContainerLayer_debugDescribeChildren$(
  m.Scope scope$,
  ContainerLayer target$,
) =>
    target$.debugDescribeChildren;
Function OffsetLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as OffsetLayer;
Function OffsetLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is OffsetLayer;
Function _OffsetLayer_offset$(
  m.Scope scope$,
  OffsetLayer target$,
) =>
    () {
      return target$.offset;
    };
void _OffsetLayer_offset_set$(
  m.Scope scope$,
  OffsetLayer target$,
) =>
    (dynamic other$) {
      target$.offset = other$;
    };
Function _OffsetLayer__$(m.Scope scope$) => ({Offset? offset}) {
      return OffsetLayer(offset: offset ?? Offset.zero);
    };
Function _OffsetLayer_findAnnotations$<S extends Object>(
  m.Scope scope$,
  OffsetLayer target$,
) =>
    target$.findAnnotations<S>;
Function _OffsetLayer_applyTransform$(
  m.Scope scope$,
  OffsetLayer target$,
) =>
    target$.applyTransform;
Function _OffsetLayer_addToScene$(
  m.Scope scope$,
  OffsetLayer target$,
) =>
    target$.addToScene;
Function _OffsetLayer_debugFillProperties$(
  m.Scope scope$,
  OffsetLayer target$,
) =>
    target$.debugFillProperties;
Function _OffsetLayer_toImage$(
  m.Scope scope$,
  OffsetLayer target$,
) =>
    target$.toImage;
Function _OffsetLayer_toImageSync$(
  m.Scope scope$,
  OffsetLayer target$,
) =>
    target$.toImageSync;
Function ClipRectLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ClipRectLayer;
Function ClipRectLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ClipRectLayer;
Function _ClipRectLayer_clipRect$(
  m.Scope scope$,
  ClipRectLayer target$,
) =>
    () {
      return target$.clipRect;
    };
void _ClipRectLayer_clipRect_set$(
  m.Scope scope$,
  ClipRectLayer target$,
) =>
    (dynamic other$) {
      target$.clipRect = other$;
    };
Function _ClipRectLayer_clipBehavior$(
  m.Scope scope$,
  ClipRectLayer target$,
) =>
    () {
      return target$.clipBehavior;
    };
void _ClipRectLayer_clipBehavior_set$(
  m.Scope scope$,
  ClipRectLayer target$,
) =>
    (dynamic other$) {
      target$.clipBehavior = other$;
    };
Function _ClipRectLayer__$(m.Scope scope$) => ({
      Rect? clipRect,
      Clip? clipBehavior,
    }) {
      return ClipRectLayer(
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        clipRect: clipRect,
      );
    };
Function _ClipRectLayer_describeClipBounds$(
  m.Scope scope$,
  ClipRectLayer target$,
) =>
    target$.describeClipBounds;
Function _ClipRectLayer_findAnnotations$<S extends Object>(
  m.Scope scope$,
  ClipRectLayer target$,
) =>
    target$.findAnnotations<S>;
Function _ClipRectLayer_addToScene$(
  m.Scope scope$,
  ClipRectLayer target$,
) =>
    target$.addToScene;
Function _ClipRectLayer_debugFillProperties$(
  m.Scope scope$,
  ClipRectLayer target$,
) =>
    target$.debugFillProperties;
Function ClipRRectLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ClipRRectLayer;
Function ClipRRectLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ClipRRectLayer;
Function _ClipRRectLayer_clipRRect$(
  m.Scope scope$,
  ClipRRectLayer target$,
) =>
    () {
      return target$.clipRRect;
    };
void _ClipRRectLayer_clipRRect_set$(
  m.Scope scope$,
  ClipRRectLayer target$,
) =>
    (dynamic other$) {
      target$.clipRRect = other$;
    };
Function _ClipRRectLayer_clipBehavior$(
  m.Scope scope$,
  ClipRRectLayer target$,
) =>
    () {
      return target$.clipBehavior;
    };
void _ClipRRectLayer_clipBehavior_set$(
  m.Scope scope$,
  ClipRRectLayer target$,
) =>
    (dynamic other$) {
      target$.clipBehavior = other$;
    };
Function _ClipRRectLayer__$(m.Scope scope$) => ({
      RRect? clipRRect,
      Clip? clipBehavior,
    }) {
      return ClipRRectLayer(
        clipBehavior: clipBehavior ?? Clip.antiAlias,
        clipRRect: clipRRect,
      );
    };
Function _ClipRRectLayer_describeClipBounds$(
  m.Scope scope$,
  ClipRRectLayer target$,
) =>
    target$.describeClipBounds;
Function _ClipRRectLayer_findAnnotations$<S extends Object>(
  m.Scope scope$,
  ClipRRectLayer target$,
) =>
    target$.findAnnotations<S>;
Function _ClipRRectLayer_addToScene$(
  m.Scope scope$,
  ClipRRectLayer target$,
) =>
    target$.addToScene;
Function _ClipRRectLayer_debugFillProperties$(
  m.Scope scope$,
  ClipRRectLayer target$,
) =>
    target$.debugFillProperties;
Function ClipPathLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ClipPathLayer;
Function ClipPathLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ClipPathLayer;
Function _ClipPathLayer_clipPath$(
  m.Scope scope$,
  ClipPathLayer target$,
) =>
    () {
      return target$.clipPath;
    };
void _ClipPathLayer_clipPath_set$(
  m.Scope scope$,
  ClipPathLayer target$,
) =>
    (dynamic other$) {
      target$.clipPath = other$;
    };
Function _ClipPathLayer_clipBehavior$(
  m.Scope scope$,
  ClipPathLayer target$,
) =>
    () {
      return target$.clipBehavior;
    };
void _ClipPathLayer_clipBehavior_set$(
  m.Scope scope$,
  ClipPathLayer target$,
) =>
    (dynamic other$) {
      target$.clipBehavior = other$;
    };
Function _ClipPathLayer__$(m.Scope scope$) => ({
      Path? clipPath,
      Clip? clipBehavior,
    }) {
      return ClipPathLayer(
        clipBehavior: clipBehavior ?? Clip.antiAlias,
        clipPath: clipPath,
      );
    };
Function _ClipPathLayer_describeClipBounds$(
  m.Scope scope$,
  ClipPathLayer target$,
) =>
    target$.describeClipBounds;
Function _ClipPathLayer_findAnnotations$<S extends Object>(
  m.Scope scope$,
  ClipPathLayer target$,
) =>
    target$.findAnnotations<S>;
Function _ClipPathLayer_addToScene$(
  m.Scope scope$,
  ClipPathLayer target$,
) =>
    target$.addToScene;
Function _ClipPathLayer_debugFillProperties$(
  m.Scope scope$,
  ClipPathLayer target$,
) =>
    target$.debugFillProperties;
Function ColorFilterLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ColorFilterLayer;
Function ColorFilterLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ColorFilterLayer;
Function _ColorFilterLayer_colorFilter$(
  m.Scope scope$,
  ColorFilterLayer target$,
) =>
    () {
      return target$.colorFilter;
    };
void _ColorFilterLayer_colorFilter_set$(
  m.Scope scope$,
  ColorFilterLayer target$,
) =>
    (dynamic other$) {
      target$.colorFilter = other$;
    };
Function _ColorFilterLayer__$(m.Scope scope$) => ({ColorFilter? colorFilter}) {
      return ColorFilterLayer(colorFilter: colorFilter);
    };
Function _ColorFilterLayer_addToScene$(
  m.Scope scope$,
  ColorFilterLayer target$,
) =>
    target$.addToScene;
Function _ColorFilterLayer_debugFillProperties$(
  m.Scope scope$,
  ColorFilterLayer target$,
) =>
    target$.debugFillProperties;
Function ImageFilterLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ImageFilterLayer;
Function ImageFilterLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ImageFilterLayer;
Function _ImageFilterLayer_imageFilter$(
  m.Scope scope$,
  ImageFilterLayer target$,
) =>
    () {
      return target$.imageFilter;
    };
void _ImageFilterLayer_imageFilter_set$(
  m.Scope scope$,
  ImageFilterLayer target$,
) =>
    (dynamic other$) {
      target$.imageFilter = other$;
    };
Function _ImageFilterLayer__$(m.Scope scope$) => ({
      ImageFilter? imageFilter,
      Offset? offset,
    }) {
      return ImageFilterLayer(
        imageFilter: imageFilter,
        offset: offset ?? Offset.zero,
      );
    };
Function _ImageFilterLayer_addToScene$(
  m.Scope scope$,
  ImageFilterLayer target$,
) =>
    target$.addToScene;
Function _ImageFilterLayer_debugFillProperties$(
  m.Scope scope$,
  ImageFilterLayer target$,
) =>
    target$.debugFillProperties;
Function TransformLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TransformLayer;
Function TransformLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TransformLayer;
Function _TransformLayer_transform$(
  m.Scope scope$,
  TransformLayer target$,
) =>
    () {
      return target$.transform;
    };
void _TransformLayer_transform_set$(
  m.Scope scope$,
  TransformLayer target$,
) =>
    (dynamic other$) {
      target$.transform = other$;
    };
Function _TransformLayer__$(m.Scope scope$) => ({
      Matrix4? transform,
      Offset? offset,
    }) {
      return TransformLayer(
        offset: offset ?? Offset.zero,
        transform: transform,
      );
    };
Function _TransformLayer_addToScene$(
  m.Scope scope$,
  TransformLayer target$,
) =>
    target$.addToScene;
Function _TransformLayer_findAnnotations$<S extends Object>(
  m.Scope scope$,
  TransformLayer target$,
) =>
    target$.findAnnotations<S>;
Function _TransformLayer_applyTransform$(
  m.Scope scope$,
  TransformLayer target$,
) =>
    target$.applyTransform;
Function _TransformLayer_debugFillProperties$(
  m.Scope scope$,
  TransformLayer target$,
) =>
    target$.debugFillProperties;
Function OpacityLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as OpacityLayer;
Function OpacityLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is OpacityLayer;
Function _OpacityLayer_alpha$(
  m.Scope scope$,
  OpacityLayer target$,
) =>
    () {
      return target$.alpha;
    };
void _OpacityLayer_alpha_set$(
  m.Scope scope$,
  OpacityLayer target$,
) =>
    (dynamic other$) {
      target$.alpha = other$;
    };
Function _OpacityLayer__$(m.Scope scope$) => ({
      int? alpha,
      Offset? offset,
    }) {
      return OpacityLayer(
        alpha: alpha,
        offset: offset ?? Offset.zero,
      );
    };
Function _OpacityLayer_addToScene$(
  m.Scope scope$,
  OpacityLayer target$,
) =>
    target$.addToScene;
Function _OpacityLayer_debugFillProperties$(
  m.Scope scope$,
  OpacityLayer target$,
) =>
    target$.debugFillProperties;
Function ShaderMaskLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ShaderMaskLayer;
Function ShaderMaskLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ShaderMaskLayer;
Function _ShaderMaskLayer_shader$(
  m.Scope scope$,
  ShaderMaskLayer target$,
) =>
    () {
      return target$.shader;
    };
void _ShaderMaskLayer_shader_set$(
  m.Scope scope$,
  ShaderMaskLayer target$,
) =>
    (dynamic other$) {
      target$.shader = other$;
    };
Function _ShaderMaskLayer_maskRect$(
  m.Scope scope$,
  ShaderMaskLayer target$,
) =>
    () {
      return target$.maskRect;
    };
void _ShaderMaskLayer_maskRect_set$(
  m.Scope scope$,
  ShaderMaskLayer target$,
) =>
    (dynamic other$) {
      target$.maskRect = other$;
    };
Function _ShaderMaskLayer_blendMode$(
  m.Scope scope$,
  ShaderMaskLayer target$,
) =>
    () {
      return target$.blendMode;
    };
void _ShaderMaskLayer_blendMode_set$(
  m.Scope scope$,
  ShaderMaskLayer target$,
) =>
    (dynamic other$) {
      target$.blendMode = other$;
    };
Function _ShaderMaskLayer__$(m.Scope scope$) => ({
      Shader? shader,
      Rect? maskRect,
      BlendMode? blendMode,
    }) {
      return ShaderMaskLayer(
        blendMode: blendMode,
        maskRect: maskRect,
        shader: shader,
      );
    };
Function _ShaderMaskLayer_addToScene$(
  m.Scope scope$,
  ShaderMaskLayer target$,
) =>
    target$.addToScene;
Function _ShaderMaskLayer_debugFillProperties$(
  m.Scope scope$,
  ShaderMaskLayer target$,
) =>
    target$.debugFillProperties;
Function BackdropFilterLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as BackdropFilterLayer;
Function BackdropFilterLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is BackdropFilterLayer;
Function _BackdropFilterLayer_filter$(
  m.Scope scope$,
  BackdropFilterLayer target$,
) =>
    () {
      return target$.filter;
    };
void _BackdropFilterLayer_filter_set$(
  m.Scope scope$,
  BackdropFilterLayer target$,
) =>
    (dynamic other$) {
      target$.filter = other$;
    };
Function _BackdropFilterLayer_blendMode$(
  m.Scope scope$,
  BackdropFilterLayer target$,
) =>
    () {
      return target$.blendMode;
    };
void _BackdropFilterLayer_blendMode_set$(
  m.Scope scope$,
  BackdropFilterLayer target$,
) =>
    (dynamic other$) {
      target$.blendMode = other$;
    };
Function _BackdropFilterLayer__$(m.Scope scope$) => ({
      ImageFilter? filter,
      BlendMode? blendMode,
    }) {
      return BackdropFilterLayer(
        blendMode: blendMode ?? BlendMode.srcOver,
        filter: filter,
      );
    };
Function _BackdropFilterLayer_addToScene$(
  m.Scope scope$,
  BackdropFilterLayer target$,
) =>
    target$.addToScene;
Function _BackdropFilterLayer_debugFillProperties$(
  m.Scope scope$,
  BackdropFilterLayer target$,
) =>
    target$.debugFillProperties;
Function LayerLink_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as LayerLink;
Function LayerLink_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is LayerLink;
Function _LayerLink_leaderSize$(
  m.Scope scope$,
  LayerLink target$,
) =>
    () {
      return target$.leaderSize;
    };
void _LayerLink_leaderSize_set$(
  m.Scope scope$,
  LayerLink target$,
) =>
    (dynamic other$) {
      target$.leaderSize = other$;
    };
Function _LayerLink_leader$(
  m.Scope scope$,
  LayerLink target$,
) =>
    () {
      return target$.leader;
    };
Function _LayerLink__$(m.Scope scope$) => () {
      return LayerLink();
    };
Function _LayerLink_toString$(
  m.Scope scope$,
  LayerLink target$,
) =>
    target$.toString;
Function LeaderLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as LeaderLayer;
Function LeaderLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is LeaderLayer;
Function _LeaderLayer_link$(
  m.Scope scope$,
  LeaderLayer target$,
) =>
    () {
      return target$.link;
    };
void _LeaderLayer_link_set$(
  m.Scope scope$,
  LeaderLayer target$,
) =>
    (dynamic other$) {
      target$.link = other$;
    };
Function _LeaderLayer_offset$(
  m.Scope scope$,
  LeaderLayer target$,
) =>
    () {
      return target$.offset;
    };
void _LeaderLayer_offset_set$(
  m.Scope scope$,
  LeaderLayer target$,
) =>
    (dynamic other$) {
      target$.offset = other$;
    };
Function _LeaderLayer__$(m.Scope scope$) => ({
      required LayerLink link,
      Offset? offset,
    }) {
      return LeaderLayer(
        link: link,
        offset: offset ?? Offset.zero,
      );
    };
Function _LeaderLayer_attach$(
  m.Scope scope$,
  LeaderLayer target$,
) =>
    target$.attach;
Function _LeaderLayer_detach$(
  m.Scope scope$,
  LeaderLayer target$,
) =>
    target$.detach;
Function _LeaderLayer_findAnnotations$<S extends Object>(
  m.Scope scope$,
  LeaderLayer target$,
) =>
    target$.findAnnotations<S>;
Function _LeaderLayer_addToScene$(
  m.Scope scope$,
  LeaderLayer target$,
) =>
    target$.addToScene;
Function _LeaderLayer_applyTransform$(
  m.Scope scope$,
  LeaderLayer target$,
) =>
    target$.applyTransform;
Function _LeaderLayer_debugFillProperties$(
  m.Scope scope$,
  LeaderLayer target$,
) =>
    target$.debugFillProperties;
Function FollowerLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FollowerLayer;
Function FollowerLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FollowerLayer;
Function _FollowerLayer_link$(
  m.Scope scope$,
  FollowerLayer target$,
) =>
    () {
      return target$.link;
    };
void _FollowerLayer_link_set$(
  m.Scope scope$,
  FollowerLayer target$,
) =>
    (dynamic other$) {
      target$.link = other$;
    };
Function _FollowerLayer_showWhenUnlinked$(
  m.Scope scope$,
  FollowerLayer target$,
) =>
    () {
      return target$.showWhenUnlinked;
    };
void _FollowerLayer_showWhenUnlinked_set$(
  m.Scope scope$,
  FollowerLayer target$,
) =>
    (dynamic other$) {
      target$.showWhenUnlinked = other$;
    };
Function _FollowerLayer_unlinkedOffset$(
  m.Scope scope$,
  FollowerLayer target$,
) =>
    () {
      return target$.unlinkedOffset;
    };
void _FollowerLayer_unlinkedOffset_set$(
  m.Scope scope$,
  FollowerLayer target$,
) =>
    (dynamic other$) {
      target$.unlinkedOffset = other$;
    };
Function _FollowerLayer_linkedOffset$(
  m.Scope scope$,
  FollowerLayer target$,
) =>
    () {
      return target$.linkedOffset;
    };
void _FollowerLayer_linkedOffset_set$(
  m.Scope scope$,
  FollowerLayer target$,
) =>
    (dynamic other$) {
      target$.linkedOffset = other$;
    };
Function _FollowerLayer_alwaysNeedsAddToScene$(
  m.Scope scope$,
  FollowerLayer target$,
) =>
    () {
      return target$.alwaysNeedsAddToScene;
    };
Function _FollowerLayer__$(m.Scope scope$) => ({
      required LayerLink link,
      bool? showWhenUnlinked,
      Offset? unlinkedOffset,
      Offset? linkedOffset,
    }) {
      return FollowerLayer(
        link: link,
        linkedOffset: linkedOffset ?? Offset.zero,
        showWhenUnlinked: showWhenUnlinked ?? true,
        unlinkedOffset: unlinkedOffset ?? Offset.zero,
      );
    };
Function _FollowerLayer_findAnnotations$<S extends Object>(
  m.Scope scope$,
  FollowerLayer target$,
) =>
    target$.findAnnotations<S>;
Function _FollowerLayer_getLastTransform$(
  m.Scope scope$,
  FollowerLayer target$,
) =>
    target$.getLastTransform;
Function _FollowerLayer_addToScene$(
  m.Scope scope$,
  FollowerLayer target$,
) =>
    target$.addToScene;
Function _FollowerLayer_applyTransform$(
  m.Scope scope$,
  FollowerLayer target$,
) =>
    target$.applyTransform;
Function _FollowerLayer_debugFillProperties$(
  m.Scope scope$,
  FollowerLayer target$,
) =>
    target$.debugFillProperties;
Function AnnotatedRegionLayer_as$<T extends Object>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AnnotatedRegionLayer<T>;
Function AnnotatedRegionLayer_is$<T extends Object>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AnnotatedRegionLayer<T>;
Function _AnnotatedRegionLayer_value$<T extends Object>(
  m.Scope scope$,
  AnnotatedRegionLayer<T> target$,
) =>
    () {
      return target$.value;
    };
Function _AnnotatedRegionLayer_size$<T extends Object>(
  m.Scope scope$,
  AnnotatedRegionLayer<T> target$,
) =>
    () {
      return target$.size;
    };
Function _AnnotatedRegionLayer_offset$<T extends Object>(
  m.Scope scope$,
  AnnotatedRegionLayer<T> target$,
) =>
    () {
      return target$.offset;
    };
Function _AnnotatedRegionLayer_opaque$<T extends Object>(
  m.Scope scope$,
  AnnotatedRegionLayer<T> target$,
) =>
    () {
      return target$.opaque;
    };
Function _AnnotatedRegionLayer__$(m.Scope scope$) => <T extends Object>(
      dynamic value, {
      Size? size,
      Offset? offset,
      bool? opaque,
    }) {
      return AnnotatedRegionLayer<T>(
        value,
        offset: offset,
        opaque: opaque ?? false,
        size: size,
      );
    };
Function
    _AnnotatedRegionLayer_findAnnotations$<T extends Object, S extends Object>(
  m.Scope scope$,
  AnnotatedRegionLayer<T> target$,
) =>
        target$.findAnnotations<S>;
Function _AnnotatedRegionLayer_debugFillProperties$<T extends Object>(
  m.Scope scope$,
  AnnotatedRegionLayer<T> target$,
) =>
    target$.debugFillProperties;
