// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/layer.dart';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/scheduler.dart';
import 'package:vector_math/vector_math_64.dart';
import 'package:flutter/src/rendering/debug.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/layer.dart',
  {'Layer.addCompositionCallback': _Layer_addCompositionCallback$},
  {},
  {
    'AnnotationEntry': m.ClassMirror(
      'AnnotationEntry',
      {
        '#as': AnnotationEntry_as$,
        '#is': AnnotationEntry_is$,
        'annotation': _AnnotationEntry_annotation$,
        'localPosition': _AnnotationEntry_localPosition$,
        'toString': _AnnotationEntry_toString$,
      },
      {},
    ),
    'AnnotationResult': m.ClassMirror(
      'AnnotationResult',
      {
        '#as': AnnotationResult_as$,
        '#is': AnnotationResult_is$,
        'entries': _AnnotationResult_entries$,
        'annotations': _AnnotationResult_annotations$,
        'add': _AnnotationResult_add$,
      },
      {},
    ),
    'Layer': m.ClassMirror(
      'Layer',
      {
        '#as': Layer_as$,
        '#is': Layer_is$,
        'debugCreator': _Layer_debugCreator$,
        'subtreeHasCompositionCallbacks':
            _Layer_subtreeHasCompositionCallbacks$,
        'debugDisposed': _Layer_debugDisposed$,
        'debugHandleCount': _Layer_debugHandleCount$,
        'parent': _Layer_parent$,
        'alwaysNeedsAddToScene': _Layer_alwaysNeedsAddToScene$,
        'debugSubtreeNeedsAddToScene': _Layer_debugSubtreeNeedsAddToScene$,
        'engineLayer': _Layer_engineLayer$,
        'nextSibling': _Layer_nextSibling$,
        'previousSibling': _Layer_previousSibling$,
        'supportsRasterization': _Layer_supportsRasterization$,
        'describeClipBounds': _Layer_describeClipBounds$,
        'dispose': _Layer_dispose$,
        'markNeedsAddToScene': _Layer_markNeedsAddToScene$,
        'debugMarkClean': _Layer_debugMarkClean$,
        'updateSubtreeNeedsAddToScene': _Layer_updateSubtreeNeedsAddToScene$,
        'dropChild': _Layer_dropChild$,
        'adoptChild': _Layer_adoptChild$,
        'remove': _Layer_remove$,
        'findAnnotations': _Layer_findAnnotations$,
        'find': _Layer_find$,
        'findAllAnnotations': _Layer_findAllAnnotations$,
        'addToScene': _Layer_addToScene$,
        'toStringShort': _Layer_toStringShort$,
        'debugFillProperties': _Layer_debugFillProperties$,
      },
      {
        'debugCreator': _Layer_debugCreator_set$,
        'engineLayer': _Layer_engineLayer_set$,
      },
    ),
    'LayerHandle': m.ClassMirror(
      'LayerHandle',
      {
        '#as': LayerHandle_as$,
        '#is': LayerHandle_is$,
        'layer': _LayerHandle_layer$,
        'toString': _LayerHandle_toString$,
      },
      {'layer': _LayerHandle_layer_set$},
    ),
    'PictureLayer': m.ClassMirror(
      'PictureLayer',
      {
        '#as': PictureLayer_as$,
        '#is': PictureLayer_is$,
        'canvasBounds': _PictureLayer_canvasBounds$,
        'picture': _PictureLayer_picture$,
        'isComplexHint': _PictureLayer_isComplexHint$,
        'willChangeHint': _PictureLayer_willChangeHint$,
        'dispose': _PictureLayer_dispose$,
        'addToScene': _PictureLayer_addToScene$,
        'debugFillProperties': _PictureLayer_debugFillProperties$,
        'findAnnotations': _PictureLayer_findAnnotations$,
      },
      {
        'picture': _PictureLayer_picture_set$,
        'isComplexHint': _PictureLayer_isComplexHint_set$,
        'willChangeHint': _PictureLayer_willChangeHint_set$,
      },
    ),
    'TextureLayer': m.ClassMirror(
      'TextureLayer',
      {
        '#as': TextureLayer_as$,
        '#is': TextureLayer_is$,
        'rect': _TextureLayer_rect$,
        'textureId': _TextureLayer_textureId$,
        'freeze': _TextureLayer_freeze$,
        'filterQuality': _TextureLayer_filterQuality$,
        'addToScene': _TextureLayer_addToScene$,
        'findAnnotations': _TextureLayer_findAnnotations$,
      },
      {},
    ),
    'PlatformViewLayer': m.ClassMirror(
      'PlatformViewLayer',
      {
        '#as': PlatformViewLayer_as$,
        '#is': PlatformViewLayer_is$,
        'rect': _PlatformViewLayer_rect$,
        'viewId': _PlatformViewLayer_viewId$,
        'supportsRasterization': _PlatformViewLayer_supportsRasterization$,
        'addToScene': _PlatformViewLayer_addToScene$,
      },
      {},
    ),
    'PerformanceOverlayLayer': m.ClassMirror(
      'PerformanceOverlayLayer',
      {
        '#as': PerformanceOverlayLayer_as$,
        '#is': PerformanceOverlayLayer_is$,
        'optionsMask': _PerformanceOverlayLayer_optionsMask$,
        'rasterizerThreshold': _PerformanceOverlayLayer_rasterizerThreshold$,
        'checkerboardRasterCacheImages':
            _PerformanceOverlayLayer_checkerboardRasterCacheImages$,
        'checkerboardOffscreenLayers':
            _PerformanceOverlayLayer_checkerboardOffscreenLayers$,
        'overlayRect': _PerformanceOverlayLayer_overlayRect$,
        'addToScene': _PerformanceOverlayLayer_addToScene$,
        'findAnnotations': _PerformanceOverlayLayer_findAnnotations$,
      },
      {'overlayRect': _PerformanceOverlayLayer_overlayRect_set$},
    ),
    'ContainerLayer': m.ClassMirror(
      'ContainerLayer',
      {
        '#as': ContainerLayer_as$,
        '#is': ContainerLayer_is$,
        'firstChild': _ContainerLayer_firstChild$,
        'lastChild': _ContainerLayer_lastChild$,
        'hasChildren': _ContainerLayer_hasChildren$,
        'supportsRasterization': _ContainerLayer_supportsRasterization$,
        'buildScene': _ContainerLayer_buildScene$,
        'dispose': _ContainerLayer_dispose$,
        'updateSubtreeNeedsAddToScene':
            _ContainerLayer_updateSubtreeNeedsAddToScene$,
        'findAnnotations': _ContainerLayer_findAnnotations$,
        'attach': _ContainerLayer_attach$,
        'detach': _ContainerLayer_detach$,
        'append': _ContainerLayer_append$,
        'removeAllChildren': _ContainerLayer_removeAllChildren$,
        'addToScene': _ContainerLayer_addToScene$,
        'addChildrenToScene': _ContainerLayer_addChildrenToScene$,
        'applyTransform': _ContainerLayer_applyTransform$,
        'depthFirstIterateChildren': _ContainerLayer_depthFirstIterateChildren$,
        'debugDescribeChildren': _ContainerLayer_debugDescribeChildren$,
      },
      {},
    ),
    'OffsetLayer': m.ClassMirror(
      'OffsetLayer',
      {
        '#as': OffsetLayer_as$,
        '#is': OffsetLayer_is$,
        'offset': _OffsetLayer_offset$,
        'findAnnotations': _OffsetLayer_findAnnotations$,
        'applyTransform': _OffsetLayer_applyTransform$,
        'addToScene': _OffsetLayer_addToScene$,
        'debugFillProperties': _OffsetLayer_debugFillProperties$,
        'toImage': _OffsetLayer_toImage$,
        'toImageSync': _OffsetLayer_toImageSync$,
      },
      {'offset': _OffsetLayer_offset_set$},
    ),
    'ClipRectLayer': m.ClassMirror(
      'ClipRectLayer',
      {
        '#as': ClipRectLayer_as$,
        '#is': ClipRectLayer_is$,
        'clipRect': _ClipRectLayer_clipRect$,
        'clipBehavior': _ClipRectLayer_clipBehavior$,
        'describeClipBounds': _ClipRectLayer_describeClipBounds$,
        'findAnnotations': _ClipRectLayer_findAnnotations$,
        'addToScene': _ClipRectLayer_addToScene$,
        'debugFillProperties': _ClipRectLayer_debugFillProperties$,
      },
      {
        'clipRect': _ClipRectLayer_clipRect_set$,
        'clipBehavior': _ClipRectLayer_clipBehavior_set$,
      },
    ),
    'ClipRRectLayer': m.ClassMirror(
      'ClipRRectLayer',
      {
        '#as': ClipRRectLayer_as$,
        '#is': ClipRRectLayer_is$,
        'clipRRect': _ClipRRectLayer_clipRRect$,
        'clipBehavior': _ClipRRectLayer_clipBehavior$,
        'describeClipBounds': _ClipRRectLayer_describeClipBounds$,
        'findAnnotations': _ClipRRectLayer_findAnnotations$,
        'addToScene': _ClipRRectLayer_addToScene$,
        'debugFillProperties': _ClipRRectLayer_debugFillProperties$,
      },
      {
        'clipRRect': _ClipRRectLayer_clipRRect_set$,
        'clipBehavior': _ClipRRectLayer_clipBehavior_set$,
      },
    ),
    'ClipPathLayer': m.ClassMirror(
      'ClipPathLayer',
      {
        '#as': ClipPathLayer_as$,
        '#is': ClipPathLayer_is$,
        'clipPath': _ClipPathLayer_clipPath$,
        'clipBehavior': _ClipPathLayer_clipBehavior$,
        'describeClipBounds': _ClipPathLayer_describeClipBounds$,
        'findAnnotations': _ClipPathLayer_findAnnotations$,
        'addToScene': _ClipPathLayer_addToScene$,
        'debugFillProperties': _ClipPathLayer_debugFillProperties$,
      },
      {
        'clipPath': _ClipPathLayer_clipPath_set$,
        'clipBehavior': _ClipPathLayer_clipBehavior_set$,
      },
    ),
    'ColorFilterLayer': m.ClassMirror(
      'ColorFilterLayer',
      {
        '#as': ColorFilterLayer_as$,
        '#is': ColorFilterLayer_is$,
        'colorFilter': _ColorFilterLayer_colorFilter$,
        'addToScene': _ColorFilterLayer_addToScene$,
        'debugFillProperties': _ColorFilterLayer_debugFillProperties$,
      },
      {'colorFilter': _ColorFilterLayer_colorFilter_set$},
    ),
    'ImageFilterLayer': m.ClassMirror(
      'ImageFilterLayer',
      {
        '#as': ImageFilterLayer_as$,
        '#is': ImageFilterLayer_is$,
        'imageFilter': _ImageFilterLayer_imageFilter$,
        'addToScene': _ImageFilterLayer_addToScene$,
        'debugFillProperties': _ImageFilterLayer_debugFillProperties$,
      },
      {'imageFilter': _ImageFilterLayer_imageFilter_set$},
    ),
    'TransformLayer': m.ClassMirror(
      'TransformLayer',
      {
        '#as': TransformLayer_as$,
        '#is': TransformLayer_is$,
        'transform': _TransformLayer_transform$,
        'addToScene': _TransformLayer_addToScene$,
        'findAnnotations': _TransformLayer_findAnnotations$,
        'applyTransform': _TransformLayer_applyTransform$,
        'debugFillProperties': _TransformLayer_debugFillProperties$,
      },
      {'transform': _TransformLayer_transform_set$},
    ),
    'OpacityLayer': m.ClassMirror(
      'OpacityLayer',
      {
        '#as': OpacityLayer_as$,
        '#is': OpacityLayer_is$,
        'alpha': _OpacityLayer_alpha$,
        'addToScene': _OpacityLayer_addToScene$,
        'debugFillProperties': _OpacityLayer_debugFillProperties$,
      },
      {'alpha': _OpacityLayer_alpha_set$},
    ),
    'ShaderMaskLayer': m.ClassMirror(
      'ShaderMaskLayer',
      {
        '#as': ShaderMaskLayer_as$,
        '#is': ShaderMaskLayer_is$,
        'shader': _ShaderMaskLayer_shader$,
        'maskRect': _ShaderMaskLayer_maskRect$,
        'blendMode': _ShaderMaskLayer_blendMode$,
        'addToScene': _ShaderMaskLayer_addToScene$,
        'debugFillProperties': _ShaderMaskLayer_debugFillProperties$,
      },
      {
        'shader': _ShaderMaskLayer_shader_set$,
        'maskRect': _ShaderMaskLayer_maskRect_set$,
        'blendMode': _ShaderMaskLayer_blendMode_set$,
      },
    ),
    'BackdropFilterLayer': m.ClassMirror(
      'BackdropFilterLayer',
      {
        '#as': BackdropFilterLayer_as$,
        '#is': BackdropFilterLayer_is$,
        'filter': _BackdropFilterLayer_filter$,
        'blendMode': _BackdropFilterLayer_blendMode$,
        'addToScene': _BackdropFilterLayer_addToScene$,
        'debugFillProperties': _BackdropFilterLayer_debugFillProperties$,
      },
      {
        'filter': _BackdropFilterLayer_filter_set$,
        'blendMode': _BackdropFilterLayer_blendMode_set$,
      },
    ),
    'LayerLink': m.ClassMirror(
      'LayerLink',
      {
        '#as': LayerLink_as$,
        '#is': LayerLink_is$,
        'leaderSize': _LayerLink_leaderSize$,
        'leader': _LayerLink_leader$,
        'toString': _LayerLink_toString$,
      },
      {'leaderSize': _LayerLink_leaderSize_set$},
    ),
    'LeaderLayer': m.ClassMirror(
      'LeaderLayer',
      {
        '#as': LeaderLayer_as$,
        '#is': LeaderLayer_is$,
        'link': _LeaderLayer_link$,
        'offset': _LeaderLayer_offset$,
        'attach': _LeaderLayer_attach$,
        'detach': _LeaderLayer_detach$,
        'findAnnotations': _LeaderLayer_findAnnotations$,
        'addToScene': _LeaderLayer_addToScene$,
        'applyTransform': _LeaderLayer_applyTransform$,
        'debugFillProperties': _LeaderLayer_debugFillProperties$,
      },
      {
        'link': _LeaderLayer_link_set$,
        'offset': _LeaderLayer_offset_set$,
      },
    ),
    'FollowerLayer': m.ClassMirror(
      'FollowerLayer',
      {
        '#as': FollowerLayer_as$,
        '#is': FollowerLayer_is$,
        'link': _FollowerLayer_link$,
        'showWhenUnlinked': _FollowerLayer_showWhenUnlinked$,
        'unlinkedOffset': _FollowerLayer_unlinkedOffset$,
        'linkedOffset': _FollowerLayer_linkedOffset$,
        'alwaysNeedsAddToScene': _FollowerLayer_alwaysNeedsAddToScene$,
        'findAnnotations': _FollowerLayer_findAnnotations$,
        'getLastTransform': _FollowerLayer_getLastTransform$,
        'addToScene': _FollowerLayer_addToScene$,
        'applyTransform': _FollowerLayer_applyTransform$,
        'debugFillProperties': _FollowerLayer_debugFillProperties$,
      },
      {
        'link': _FollowerLayer_link_set$,
        'showWhenUnlinked': _FollowerLayer_showWhenUnlinked_set$,
        'unlinkedOffset': _FollowerLayer_unlinkedOffset_set$,
        'linkedOffset': _FollowerLayer_linkedOffset_set$,
      },
    ),
    'AnnotatedRegionLayer': m.ClassMirror(
      'AnnotatedRegionLayer',
      {
        '#as': AnnotatedRegionLayer_as$,
        '#is': AnnotatedRegionLayer_is$,
        'value': _AnnotatedRegionLayer_value$,
        'size': _AnnotatedRegionLayer_size$,
        'offset': _AnnotatedRegionLayer_offset$,
        'opaque': _AnnotatedRegionLayer_opaque$,
        'findAnnotations': _AnnotatedRegionLayer_findAnnotations$,
        'debugFillProperties': _AnnotatedRegionLayer_debugFillProperties$,
      },
      {},
    ),
  },
);
Function AnnotationEntry_as$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AnnotationEntry<T>;
Function AnnotationEntry_is$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AnnotationEntry<T>;
T _AnnotationEntry_annotation$<T>(AnnotationEntry<T> target) {
  return target.annotation;
}

Offset _AnnotationEntry_localPosition$<T>(AnnotationEntry<T> target) {
  return target.localPosition;
}

Function _AnnotationEntry_toString$<T>(
  m.Scope scope,
  AnnotationEntry<T> target,
) =>
    target.toString;
Function AnnotationResult_as$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AnnotationResult<T>;
Function AnnotationResult_is$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AnnotationResult<T>;
Iterable<AnnotationEntry<T>> _AnnotationResult_entries$<T>(
    AnnotationResult<T> target) {
  return target.entries;
}

Iterable<T> _AnnotationResult_annotations$<T>(AnnotationResult<T> target) {
  return target.annotations;
}

Function _AnnotationResult_add$<T>(
  m.Scope scope,
  AnnotationResult<T> target,
) =>
    target.add;
Function Layer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Layer;
Function Layer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Layer;
Object? _Layer_debugCreator$(Layer target) {
  return target.debugCreator;
}

void _Layer_debugCreator_set$(
  Layer target,
  Object? other,
) {
  target.debugCreator = other;
}

bool _Layer_subtreeHasCompositionCallbacks$(Layer target) {
  return target.subtreeHasCompositionCallbacks;
}

bool _Layer_debugDisposed$(Layer target) {
  return target.debugDisposed;
}

int _Layer_debugHandleCount$(Layer target) {
  return target.debugHandleCount;
}

ContainerLayer? _Layer_parent$(Layer target) {
  return target.parent;
}

bool _Layer_alwaysNeedsAddToScene$(Layer target) {
  return target.alwaysNeedsAddToScene;
}

bool? _Layer_debugSubtreeNeedsAddToScene$(Layer target) {
  return target.debugSubtreeNeedsAddToScene;
}

EngineLayer? _Layer_engineLayer$(Layer target) {
  return target.engineLayer;
}

void _Layer_engineLayer_set$(
  Layer target,
  EngineLayer? other,
) {
  target.engineLayer = other;
}

Layer? _Layer_nextSibling$(Layer target) {
  return target.nextSibling;
}

Layer? _Layer_previousSibling$(Layer target) {
  return target.previousSibling;
}

Function _Layer_supportsRasterization$(
  m.Scope scope,
  Layer target,
) =>
    target.supportsRasterization;
Function _Layer_describeClipBounds$(
  m.Scope scope,
  Layer target,
) =>
    target.describeClipBounds;
Function _Layer_addCompositionCallback$(
  m.Scope scope,
  Layer target,
) =>
    (m.FunctionPointer callback) {
      void callbackProxy(Layer callback_$p0) =>
          scope.engine.callFunctionPointer(
            scope,
            callback,
            [callback_$p0],
            {},
          );
      return target.addCompositionCallback(callbackProxy);
    };
Function _Layer_dispose$(
  m.Scope scope,
  Layer target,
) =>
    target.dispose;
Function _Layer_markNeedsAddToScene$(
  m.Scope scope,
  Layer target,
) =>
    target.markNeedsAddToScene;
Function _Layer_debugMarkClean$(
  m.Scope scope,
  Layer target,
) =>
    target.debugMarkClean;
Function _Layer_updateSubtreeNeedsAddToScene$(
  m.Scope scope,
  Layer target,
) =>
    target.updateSubtreeNeedsAddToScene;
Function _Layer_dropChild$(
  m.Scope scope,
  Layer target,
) =>
    target.dropChild;
Function _Layer_adoptChild$(
  m.Scope scope,
  Layer target,
) =>
    target.adoptChild;
Function _Layer_remove$(
  m.Scope scope,
  Layer target,
) =>
    target.remove;
Function _Layer_findAnnotations$<S extends Object>(
  m.Scope scope,
  Layer target,
) =>
    target.findAnnotations<S>;
Function _Layer_find$<S extends Object>(
  m.Scope scope,
  Layer target,
) =>
    target.find<S>;
Function _Layer_findAllAnnotations$<S extends Object>(
  m.Scope scope,
  Layer target,
) =>
    target.findAllAnnotations<S>;
Function _Layer_addToScene$(
  m.Scope scope,
  Layer target,
) =>
    target.addToScene;
Function _Layer_toStringShort$(
  m.Scope scope,
  Layer target,
) =>
    target.toStringShort;
Function _Layer_debugFillProperties$(
  m.Scope scope,
  Layer target,
) =>
    target.debugFillProperties;
Function LayerHandle_as$<T extends Layer>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as LayerHandle<T>;
Function LayerHandle_is$<T extends Layer>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is LayerHandle<T>;
T? _LayerHandle_layer$<T extends Layer>(LayerHandle<T> target) {
  return target.layer;
}

void _LayerHandle_layer_set$<T extends Layer>(
  LayerHandle<T> target,
  T? other,
) {
  target.layer = other;
}

Function _LayerHandle_toString$<T extends Layer>(
  m.Scope scope,
  LayerHandle<T> target,
) =>
    target.toString;
Function PictureLayer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as PictureLayer;
Function PictureLayer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is PictureLayer;
Rect _PictureLayer_canvasBounds$(PictureLayer target) {
  return target.canvasBounds;
}

Picture? _PictureLayer_picture$(PictureLayer target) {
  return target.picture;
}

void _PictureLayer_picture_set$(
  PictureLayer target,
  Picture? other,
) {
  target.picture = other;
}

bool _PictureLayer_isComplexHint$(PictureLayer target) {
  return target.isComplexHint;
}

void _PictureLayer_isComplexHint_set$(
  PictureLayer target,
  bool other,
) {
  target.isComplexHint = other;
}

bool _PictureLayer_willChangeHint$(PictureLayer target) {
  return target.willChangeHint;
}

void _PictureLayer_willChangeHint_set$(
  PictureLayer target,
  bool other,
) {
  target.willChangeHint = other;
}

Function _PictureLayer_dispose$(
  m.Scope scope,
  PictureLayer target,
) =>
    target.dispose;
Function _PictureLayer_addToScene$(
  m.Scope scope,
  PictureLayer target,
) =>
    target.addToScene;
Function _PictureLayer_debugFillProperties$(
  m.Scope scope,
  PictureLayer target,
) =>
    target.debugFillProperties;
Function _PictureLayer_findAnnotations$<S extends Object>(
  m.Scope scope,
  PictureLayer target,
) =>
    target.findAnnotations<S>;
Function TextureLayer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as TextureLayer;
Function TextureLayer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is TextureLayer;
Rect _TextureLayer_rect$(TextureLayer target) {
  return target.rect;
}

int _TextureLayer_textureId$(TextureLayer target) {
  return target.textureId;
}

bool _TextureLayer_freeze$(TextureLayer target) {
  return target.freeze;
}

FilterQuality _TextureLayer_filterQuality$(TextureLayer target) {
  return target.filterQuality;
}

Function _TextureLayer_addToScene$(
  m.Scope scope,
  TextureLayer target,
) =>
    target.addToScene;
Function _TextureLayer_findAnnotations$<S extends Object>(
  m.Scope scope,
  TextureLayer target,
) =>
    target.findAnnotations<S>;
Function PlatformViewLayer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as PlatformViewLayer;
Function PlatformViewLayer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is PlatformViewLayer;
Rect _PlatformViewLayer_rect$(PlatformViewLayer target) {
  return target.rect;
}

int _PlatformViewLayer_viewId$(PlatformViewLayer target) {
  return target.viewId;
}

Function _PlatformViewLayer_supportsRasterization$(
  m.Scope scope,
  PlatformViewLayer target,
) =>
    target.supportsRasterization;
Function _PlatformViewLayer_addToScene$(
  m.Scope scope,
  PlatformViewLayer target,
) =>
    target.addToScene;
Function PerformanceOverlayLayer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as PerformanceOverlayLayer;
Function PerformanceOverlayLayer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is PerformanceOverlayLayer;
int _PerformanceOverlayLayer_optionsMask$(PerformanceOverlayLayer target) {
  return target.optionsMask;
}

int _PerformanceOverlayLayer_rasterizerThreshold$(
    PerformanceOverlayLayer target) {
  return target.rasterizerThreshold;
}

bool _PerformanceOverlayLayer_checkerboardRasterCacheImages$(
    PerformanceOverlayLayer target) {
  return target.checkerboardRasterCacheImages;
}

bool _PerformanceOverlayLayer_checkerboardOffscreenLayers$(
    PerformanceOverlayLayer target) {
  return target.checkerboardOffscreenLayers;
}

Rect _PerformanceOverlayLayer_overlayRect$(PerformanceOverlayLayer target) {
  return target.overlayRect;
}

void _PerformanceOverlayLayer_overlayRect_set$(
  PerformanceOverlayLayer target,
  Rect other,
) {
  target.overlayRect = other;
}

Function _PerformanceOverlayLayer_addToScene$(
  m.Scope scope,
  PerformanceOverlayLayer target,
) =>
    target.addToScene;
Function _PerformanceOverlayLayer_findAnnotations$<S extends Object>(
  m.Scope scope,
  PerformanceOverlayLayer target,
) =>
    target.findAnnotations<S>;
Function ContainerLayer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ContainerLayer;
Function ContainerLayer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ContainerLayer;
Layer? _ContainerLayer_firstChild$(ContainerLayer target) {
  return target.firstChild;
}

Layer? _ContainerLayer_lastChild$(ContainerLayer target) {
  return target.lastChild;
}

bool _ContainerLayer_hasChildren$(ContainerLayer target) {
  return target.hasChildren;
}

Function _ContainerLayer_supportsRasterization$(
  m.Scope scope,
  ContainerLayer target,
) =>
    target.supportsRasterization;
Function _ContainerLayer_buildScene$(
  m.Scope scope,
  ContainerLayer target,
) =>
    target.buildScene;
Function _ContainerLayer_dispose$(
  m.Scope scope,
  ContainerLayer target,
) =>
    target.dispose;
Function _ContainerLayer_updateSubtreeNeedsAddToScene$(
  m.Scope scope,
  ContainerLayer target,
) =>
    target.updateSubtreeNeedsAddToScene;
Function _ContainerLayer_findAnnotations$<S extends Object>(
  m.Scope scope,
  ContainerLayer target,
) =>
    target.findAnnotations<S>;
Function _ContainerLayer_attach$(
  m.Scope scope,
  ContainerLayer target,
) =>
    target.attach;
Function _ContainerLayer_detach$(
  m.Scope scope,
  ContainerLayer target,
) =>
    target.detach;
Function _ContainerLayer_append$(
  m.Scope scope,
  ContainerLayer target,
) =>
    target.append;
Function _ContainerLayer_removeAllChildren$(
  m.Scope scope,
  ContainerLayer target,
) =>
    target.removeAllChildren;
Function _ContainerLayer_addToScene$(
  m.Scope scope,
  ContainerLayer target,
) =>
    target.addToScene;
Function _ContainerLayer_addChildrenToScene$(
  m.Scope scope,
  ContainerLayer target,
) =>
    target.addChildrenToScene;
Function _ContainerLayer_applyTransform$(
  m.Scope scope,
  ContainerLayer target,
) =>
    target.applyTransform;
Function _ContainerLayer_depthFirstIterateChildren$(
  m.Scope scope,
  ContainerLayer target,
) =>
    target.depthFirstIterateChildren;
Function _ContainerLayer_debugDescribeChildren$(
  m.Scope scope,
  ContainerLayer target,
) =>
    target.debugDescribeChildren;
Function OffsetLayer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as OffsetLayer;
Function OffsetLayer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is OffsetLayer;
Offset _OffsetLayer_offset$(OffsetLayer target) {
  return target.offset;
}

void _OffsetLayer_offset_set$(
  OffsetLayer target,
  Offset other,
) {
  target.offset = other;
}

Function _OffsetLayer_findAnnotations$<S extends Object>(
  m.Scope scope,
  OffsetLayer target,
) =>
    target.findAnnotations<S>;
Function _OffsetLayer_applyTransform$(
  m.Scope scope,
  OffsetLayer target,
) =>
    target.applyTransform;
Function _OffsetLayer_addToScene$(
  m.Scope scope,
  OffsetLayer target,
) =>
    target.addToScene;
Function _OffsetLayer_debugFillProperties$(
  m.Scope scope,
  OffsetLayer target,
) =>
    target.debugFillProperties;
Function _OffsetLayer_toImage$(
  m.Scope scope,
  OffsetLayer target,
) =>
    target.toImage;
Function _OffsetLayer_toImageSync$(
  m.Scope scope,
  OffsetLayer target,
) =>
    target.toImageSync;
Function ClipRectLayer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ClipRectLayer;
Function ClipRectLayer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ClipRectLayer;
Rect? _ClipRectLayer_clipRect$(ClipRectLayer target) {
  return target.clipRect;
}

void _ClipRectLayer_clipRect_set$(
  ClipRectLayer target,
  Rect? other,
) {
  target.clipRect = other;
}

Clip _ClipRectLayer_clipBehavior$(ClipRectLayer target) {
  return target.clipBehavior;
}

void _ClipRectLayer_clipBehavior_set$(
  ClipRectLayer target,
  Clip other,
) {
  target.clipBehavior = other;
}

Function _ClipRectLayer_describeClipBounds$(
  m.Scope scope,
  ClipRectLayer target,
) =>
    target.describeClipBounds;
Function _ClipRectLayer_findAnnotations$<S extends Object>(
  m.Scope scope,
  ClipRectLayer target,
) =>
    target.findAnnotations<S>;
Function _ClipRectLayer_addToScene$(
  m.Scope scope,
  ClipRectLayer target,
) =>
    target.addToScene;
Function _ClipRectLayer_debugFillProperties$(
  m.Scope scope,
  ClipRectLayer target,
) =>
    target.debugFillProperties;
Function ClipRRectLayer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ClipRRectLayer;
Function ClipRRectLayer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ClipRRectLayer;
RRect? _ClipRRectLayer_clipRRect$(ClipRRectLayer target) {
  return target.clipRRect;
}

void _ClipRRectLayer_clipRRect_set$(
  ClipRRectLayer target,
  RRect? other,
) {
  target.clipRRect = other;
}

Clip _ClipRRectLayer_clipBehavior$(ClipRRectLayer target) {
  return target.clipBehavior;
}

void _ClipRRectLayer_clipBehavior_set$(
  ClipRRectLayer target,
  Clip other,
) {
  target.clipBehavior = other;
}

Function _ClipRRectLayer_describeClipBounds$(
  m.Scope scope,
  ClipRRectLayer target,
) =>
    target.describeClipBounds;
Function _ClipRRectLayer_findAnnotations$<S extends Object>(
  m.Scope scope,
  ClipRRectLayer target,
) =>
    target.findAnnotations<S>;
Function _ClipRRectLayer_addToScene$(
  m.Scope scope,
  ClipRRectLayer target,
) =>
    target.addToScene;
Function _ClipRRectLayer_debugFillProperties$(
  m.Scope scope,
  ClipRRectLayer target,
) =>
    target.debugFillProperties;
Function ClipPathLayer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ClipPathLayer;
Function ClipPathLayer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ClipPathLayer;
Path? _ClipPathLayer_clipPath$(ClipPathLayer target) {
  return target.clipPath;
}

void _ClipPathLayer_clipPath_set$(
  ClipPathLayer target,
  Path? other,
) {
  target.clipPath = other;
}

Clip _ClipPathLayer_clipBehavior$(ClipPathLayer target) {
  return target.clipBehavior;
}

void _ClipPathLayer_clipBehavior_set$(
  ClipPathLayer target,
  Clip other,
) {
  target.clipBehavior = other;
}

Function _ClipPathLayer_describeClipBounds$(
  m.Scope scope,
  ClipPathLayer target,
) =>
    target.describeClipBounds;
Function _ClipPathLayer_findAnnotations$<S extends Object>(
  m.Scope scope,
  ClipPathLayer target,
) =>
    target.findAnnotations<S>;
Function _ClipPathLayer_addToScene$(
  m.Scope scope,
  ClipPathLayer target,
) =>
    target.addToScene;
Function _ClipPathLayer_debugFillProperties$(
  m.Scope scope,
  ClipPathLayer target,
) =>
    target.debugFillProperties;
Function ColorFilterLayer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ColorFilterLayer;
Function ColorFilterLayer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ColorFilterLayer;
ColorFilter? _ColorFilterLayer_colorFilter$(ColorFilterLayer target) {
  return target.colorFilter;
}

void _ColorFilterLayer_colorFilter_set$(
  ColorFilterLayer target,
  ColorFilter? other,
) {
  target.colorFilter = other;
}

Function _ColorFilterLayer_addToScene$(
  m.Scope scope,
  ColorFilterLayer target,
) =>
    target.addToScene;
Function _ColorFilterLayer_debugFillProperties$(
  m.Scope scope,
  ColorFilterLayer target,
) =>
    target.debugFillProperties;
Function ImageFilterLayer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ImageFilterLayer;
Function ImageFilterLayer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ImageFilterLayer;
ImageFilter? _ImageFilterLayer_imageFilter$(ImageFilterLayer target) {
  return target.imageFilter;
}

void _ImageFilterLayer_imageFilter_set$(
  ImageFilterLayer target,
  ImageFilter? other,
) {
  target.imageFilter = other;
}

Function _ImageFilterLayer_addToScene$(
  m.Scope scope,
  ImageFilterLayer target,
) =>
    target.addToScene;
Function _ImageFilterLayer_debugFillProperties$(
  m.Scope scope,
  ImageFilterLayer target,
) =>
    target.debugFillProperties;
Function TransformLayer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as TransformLayer;
Function TransformLayer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is TransformLayer;
Matrix4? _TransformLayer_transform$(TransformLayer target) {
  return target.transform;
}

void _TransformLayer_transform_set$(
  TransformLayer target,
  Matrix4? other,
) {
  target.transform = other;
}

Function _TransformLayer_addToScene$(
  m.Scope scope,
  TransformLayer target,
) =>
    target.addToScene;
Function _TransformLayer_findAnnotations$<S extends Object>(
  m.Scope scope,
  TransformLayer target,
) =>
    target.findAnnotations<S>;
Function _TransformLayer_applyTransform$(
  m.Scope scope,
  TransformLayer target,
) =>
    target.applyTransform;
Function _TransformLayer_debugFillProperties$(
  m.Scope scope,
  TransformLayer target,
) =>
    target.debugFillProperties;
Function OpacityLayer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as OpacityLayer;
Function OpacityLayer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is OpacityLayer;
int? _OpacityLayer_alpha$(OpacityLayer target) {
  return target.alpha;
}

void _OpacityLayer_alpha_set$(
  OpacityLayer target,
  int? other,
) {
  target.alpha = other;
}

Function _OpacityLayer_addToScene$(
  m.Scope scope,
  OpacityLayer target,
) =>
    target.addToScene;
Function _OpacityLayer_debugFillProperties$(
  m.Scope scope,
  OpacityLayer target,
) =>
    target.debugFillProperties;
Function ShaderMaskLayer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ShaderMaskLayer;
Function ShaderMaskLayer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ShaderMaskLayer;
Shader? _ShaderMaskLayer_shader$(ShaderMaskLayer target) {
  return target.shader;
}

void _ShaderMaskLayer_shader_set$(
  ShaderMaskLayer target,
  Shader? other,
) {
  target.shader = other;
}

Rect? _ShaderMaskLayer_maskRect$(ShaderMaskLayer target) {
  return target.maskRect;
}

void _ShaderMaskLayer_maskRect_set$(
  ShaderMaskLayer target,
  Rect? other,
) {
  target.maskRect = other;
}

BlendMode? _ShaderMaskLayer_blendMode$(ShaderMaskLayer target) {
  return target.blendMode;
}

void _ShaderMaskLayer_blendMode_set$(
  ShaderMaskLayer target,
  BlendMode? other,
) {
  target.blendMode = other;
}

Function _ShaderMaskLayer_addToScene$(
  m.Scope scope,
  ShaderMaskLayer target,
) =>
    target.addToScene;
Function _ShaderMaskLayer_debugFillProperties$(
  m.Scope scope,
  ShaderMaskLayer target,
) =>
    target.debugFillProperties;
Function BackdropFilterLayer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as BackdropFilterLayer;
Function BackdropFilterLayer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is BackdropFilterLayer;
ImageFilter? _BackdropFilterLayer_filter$(BackdropFilterLayer target) {
  return target.filter;
}

void _BackdropFilterLayer_filter_set$(
  BackdropFilterLayer target,
  ImageFilter? other,
) {
  target.filter = other;
}

BlendMode _BackdropFilterLayer_blendMode$(BackdropFilterLayer target) {
  return target.blendMode;
}

void _BackdropFilterLayer_blendMode_set$(
  BackdropFilterLayer target,
  BlendMode other,
) {
  target.blendMode = other;
}

Function _BackdropFilterLayer_addToScene$(
  m.Scope scope,
  BackdropFilterLayer target,
) =>
    target.addToScene;
Function _BackdropFilterLayer_debugFillProperties$(
  m.Scope scope,
  BackdropFilterLayer target,
) =>
    target.debugFillProperties;
Function LayerLink_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as LayerLink;
Function LayerLink_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is LayerLink;
Size? _LayerLink_leaderSize$(LayerLink target) {
  return target.leaderSize;
}

void _LayerLink_leaderSize_set$(
  LayerLink target,
  Size? other,
) {
  target.leaderSize = other;
}

LeaderLayer? _LayerLink_leader$(LayerLink target) {
  return target.leader;
}

Function _LayerLink_toString$(
  m.Scope scope,
  LayerLink target,
) =>
    target.toString;
Function LeaderLayer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as LeaderLayer;
Function LeaderLayer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is LeaderLayer;
LayerLink _LeaderLayer_link$(LeaderLayer target) {
  return target.link;
}

void _LeaderLayer_link_set$(
  LeaderLayer target,
  LayerLink other,
) {
  target.link = other;
}

Offset _LeaderLayer_offset$(LeaderLayer target) {
  return target.offset;
}

void _LeaderLayer_offset_set$(
  LeaderLayer target,
  Offset other,
) {
  target.offset = other;
}

Function _LeaderLayer_attach$(
  m.Scope scope,
  LeaderLayer target,
) =>
    target.attach;
Function _LeaderLayer_detach$(
  m.Scope scope,
  LeaderLayer target,
) =>
    target.detach;
Function _LeaderLayer_findAnnotations$<S extends Object>(
  m.Scope scope,
  LeaderLayer target,
) =>
    target.findAnnotations<S>;
Function _LeaderLayer_addToScene$(
  m.Scope scope,
  LeaderLayer target,
) =>
    target.addToScene;
Function _LeaderLayer_applyTransform$(
  m.Scope scope,
  LeaderLayer target,
) =>
    target.applyTransform;
Function _LeaderLayer_debugFillProperties$(
  m.Scope scope,
  LeaderLayer target,
) =>
    target.debugFillProperties;
Function FollowerLayer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as FollowerLayer;
Function FollowerLayer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is FollowerLayer;
LayerLink _FollowerLayer_link$(FollowerLayer target) {
  return target.link;
}

void _FollowerLayer_link_set$(
  FollowerLayer target,
  LayerLink other,
) {
  target.link = other;
}

bool? _FollowerLayer_showWhenUnlinked$(FollowerLayer target) {
  return target.showWhenUnlinked;
}

void _FollowerLayer_showWhenUnlinked_set$(
  FollowerLayer target,
  bool? other,
) {
  target.showWhenUnlinked = other;
}

Offset? _FollowerLayer_unlinkedOffset$(FollowerLayer target) {
  return target.unlinkedOffset;
}

void _FollowerLayer_unlinkedOffset_set$(
  FollowerLayer target,
  Offset? other,
) {
  target.unlinkedOffset = other;
}

Offset? _FollowerLayer_linkedOffset$(FollowerLayer target) {
  return target.linkedOffset;
}

void _FollowerLayer_linkedOffset_set$(
  FollowerLayer target,
  Offset? other,
) {
  target.linkedOffset = other;
}

bool _FollowerLayer_alwaysNeedsAddToScene$(FollowerLayer target) {
  return target.alwaysNeedsAddToScene;
}

Function _FollowerLayer_findAnnotations$<S extends Object>(
  m.Scope scope,
  FollowerLayer target,
) =>
    target.findAnnotations<S>;
Function _FollowerLayer_getLastTransform$(
  m.Scope scope,
  FollowerLayer target,
) =>
    target.getLastTransform;
Function _FollowerLayer_addToScene$(
  m.Scope scope,
  FollowerLayer target,
) =>
    target.addToScene;
Function _FollowerLayer_applyTransform$(
  m.Scope scope,
  FollowerLayer target,
) =>
    target.applyTransform;
Function _FollowerLayer_debugFillProperties$(
  m.Scope scope,
  FollowerLayer target,
) =>
    target.debugFillProperties;
Function AnnotatedRegionLayer_as$<T extends Object>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AnnotatedRegionLayer<T>;
Function AnnotatedRegionLayer_is$<T extends Object>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AnnotatedRegionLayer<T>;
T _AnnotatedRegionLayer_value$<T extends Object>(
    AnnotatedRegionLayer<T> target) {
  return target.value;
}

Size? _AnnotatedRegionLayer_size$<T extends Object>(
    AnnotatedRegionLayer<T> target) {
  return target.size;
}

Offset _AnnotatedRegionLayer_offset$<T extends Object>(
    AnnotatedRegionLayer<T> target) {
  return target.offset;
}

bool _AnnotatedRegionLayer_opaque$<T extends Object>(
    AnnotatedRegionLayer<T> target) {
  return target.opaque;
}

Function
    _AnnotatedRegionLayer_findAnnotations$<T extends Object, S extends Object>(
  m.Scope scope,
  AnnotatedRegionLayer<T> target,
) =>
        target.findAnnotations<S>;
Function _AnnotatedRegionLayer_debugFillProperties$<T extends Object>(
  m.Scope scope,
  AnnotatedRegionLayer<T> target,
) =>
    target.debugFillProperties;
