// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/expansion_panel.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/expand_icon.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/mergeable_material.dart';
import 'package:flutter/src/material/shadows.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/expansion_panel.dart',
  {
    'ExpansionPanel.': _ExpansionPanel__$,
    'ExpansionPanelRadio.': _ExpansionPanelRadio__$,
    'ExpansionPanelList.': _ExpansionPanelList__$,
    'ExpansionPanelList.radio': _ExpansionPanelList_radio_$,
  },
  {},
  {
    'ExpansionPanel': m.ClassMirror(
      'ExpansionPanel',
      {
        '#as': ExpansionPanel_as$,
        '#is': ExpansionPanel_is$,
        'headerBuilder': _ExpansionPanel_headerBuilder$,
        'body': _ExpansionPanel_body$,
        'isExpanded': _ExpansionPanel_isExpanded$,
        'canTapOnHeader': _ExpansionPanel_canTapOnHeader$,
        'backgroundColor': _ExpansionPanel_backgroundColor$,
      },
      {},
    ),
    'ExpansionPanelRadio': m.ClassMirror(
      'ExpansionPanelRadio',
      {
        '#as': ExpansionPanelRadio_as$,
        '#is': ExpansionPanelRadio_is$,
        'value': _ExpansionPanelRadio_value$,
      },
      {},
    ),
    'ExpansionPanelList': m.ClassMirror(
      'ExpansionPanelList',
      {
        '#as': ExpansionPanelList_as$,
        '#is': ExpansionPanelList_is$,
        'children': _ExpansionPanelList_children$,
        'expansionCallback': _ExpansionPanelList_expansionCallback$,
        'animationDuration': _ExpansionPanelList_animationDuration$,
        'initialOpenPanelValue': _ExpansionPanelList_initialOpenPanelValue$,
        'expandedHeaderPadding': _ExpansionPanelList_expandedHeaderPadding$,
        'dividerColor': _ExpansionPanelList_dividerColor$,
        'elevation': _ExpansionPanelList_elevation$,
        'expandIconColor': _ExpansionPanelList_expandIconColor$,
        'createState': _ExpansionPanelList_createState$,
      },
      {},
    ),
  },
);
Function ExpansionPanel_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ExpansionPanel;
Function ExpansionPanel_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ExpansionPanel;
Function _ExpansionPanel_headerBuilder$(
  m.Scope scope$,
  ExpansionPanel target$,
) =>
    () {
      return target$.headerBuilder;
    };
Function _ExpansionPanel_body$(
  m.Scope scope$,
  ExpansionPanel target$,
) =>
    () {
      return target$.body;
    };
Function _ExpansionPanel_isExpanded$(
  m.Scope scope$,
  ExpansionPanel target$,
) =>
    () {
      return target$.isExpanded;
    };
Function _ExpansionPanel_canTapOnHeader$(
  m.Scope scope$,
  ExpansionPanel target$,
) =>
    () {
      return target$.canTapOnHeader;
    };
Function _ExpansionPanel_backgroundColor$(
  m.Scope scope$,
  ExpansionPanel target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _ExpansionPanel__$(m.Scope scope$) => ({
      required m.FunctionPointer headerBuilder,
      required Widget body,
      bool? isExpanded,
      bool? canTapOnHeader,
      Color? backgroundColor,
    }) {
      Widget headerBuilderProxy(
        BuildContext headerBuilder_context$,
        bool headerBuilder_isExpanded$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            headerBuilder,
            [
              headerBuilder_context$,
              headerBuilder_isExpanded$,
            ],
            {},
          );
      return ExpansionPanel(
        backgroundColor: backgroundColor,
        body: body,
        canTapOnHeader: canTapOnHeader ?? false,
        headerBuilder: headerBuilderProxy,
        isExpanded: isExpanded ?? false,
      );
    };
Function ExpansionPanelRadio_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ExpansionPanelRadio;
Function ExpansionPanelRadio_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ExpansionPanelRadio;
Function _ExpansionPanelRadio_value$(
  m.Scope scope$,
  ExpansionPanelRadio target$,
) =>
    () {
      return target$.value;
    };
Function _ExpansionPanelRadio__$(m.Scope scope$) => ({
      required Object value,
      required m.FunctionPointer headerBuilder,
      required Widget body,
      bool? canTapOnHeader,
      Color? backgroundColor,
    }) {
      Widget headerBuilderProxy(
        BuildContext headerBuilder_context$,
        bool headerBuilder_isExpanded$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            headerBuilder,
            [
              headerBuilder_context$,
              headerBuilder_isExpanded$,
            ],
            {},
          );
      return ExpansionPanelRadio(
        backgroundColor: backgroundColor,
        body: body,
        canTapOnHeader: canTapOnHeader ?? false,
        headerBuilder: headerBuilderProxy,
        value: value,
      );
    };
Function ExpansionPanelList_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ExpansionPanelList;
Function ExpansionPanelList_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ExpansionPanelList;
Function _ExpansionPanelList_children$(
  m.Scope scope$,
  ExpansionPanelList target$,
) =>
    () {
      return target$.children;
    };
Function _ExpansionPanelList_expansionCallback$(
  m.Scope scope$,
  ExpansionPanelList target$,
) =>
    () {
      return target$.expansionCallback;
    };
Function _ExpansionPanelList_animationDuration$(
  m.Scope scope$,
  ExpansionPanelList target$,
) =>
    () {
      return target$.animationDuration;
    };
Function _ExpansionPanelList_initialOpenPanelValue$(
  m.Scope scope$,
  ExpansionPanelList target$,
) =>
    () {
      return target$.initialOpenPanelValue;
    };
Function _ExpansionPanelList_expandedHeaderPadding$(
  m.Scope scope$,
  ExpansionPanelList target$,
) =>
    () {
      return target$.expandedHeaderPadding;
    };
Function _ExpansionPanelList_dividerColor$(
  m.Scope scope$,
  ExpansionPanelList target$,
) =>
    () {
      return target$.dividerColor;
    };
Function _ExpansionPanelList_elevation$(
  m.Scope scope$,
  ExpansionPanelList target$,
) =>
    () {
      return target$.elevation;
    };
Function _ExpansionPanelList_expandIconColor$(
  m.Scope scope$,
  ExpansionPanelList target$,
) =>
    () {
      return target$.expandIconColor;
    };
Function _ExpansionPanelList__$(m.Scope scope$) => ({
      Key? key,
      List? children,
      m.FunctionPointer? expansionCallback,
      Duration? animationDuration,
      EdgeInsets? expandedHeaderPadding,
      Color? dividerColor,
      double? elevation,
      Color? expandIconColor,
    }) {
      void expansionCallbackProxy(
        int expansionCallback_panelIndex$,
        bool expansionCallback_isExpanded$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            expansionCallback!,
            [
              expansionCallback_panelIndex$,
              expansionCallback_isExpanded$,
            ],
            {},
          );
      return ExpansionPanelList(
        animationDuration: animationDuration ?? kThemeAnimationDuration,
        children:
            children == null ? const <ExpansionPanel>[] : List.from(children),
        dividerColor: dividerColor,
        elevation: elevation ?? 2,
        expandIconColor: expandIconColor,
        expandedHeaderPadding: expandedHeaderPadding ??
            const EdgeInsets.symmetric(
              vertical: 64.0 - 48.0,
            ),
        expansionCallback:
            expansionCallback == null ? null : expansionCallbackProxy,
        key: key,
      );
    };
Function _ExpansionPanelList_radio_$(m.Scope scope$) => ({
      Key? key,
      List? children,
      m.FunctionPointer? expansionCallback,
      Duration? animationDuration,
      Object? initialOpenPanelValue,
      EdgeInsets? expandedHeaderPadding,
      Color? dividerColor,
      double? elevation,
      Color? expandIconColor,
    }) {
      void expansionCallbackProxy(
        int expansionCallback_panelIndex$,
        bool expansionCallback_isExpanded$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            expansionCallback!,
            [
              expansionCallback_panelIndex$,
              expansionCallback_isExpanded$,
            ],
            {},
          );
      return ExpansionPanelList.radio(
        animationDuration: animationDuration ?? kThemeAnimationDuration,
        children: children == null
            ? const <ExpansionPanelRadio>[]
            : List.from(children),
        dividerColor: dividerColor,
        elevation: elevation ?? 2,
        expandIconColor: expandIconColor,
        expandedHeaderPadding: expandedHeaderPadding ??
            const EdgeInsets.symmetric(
              vertical: 64.0 - 48.0,
            ),
        expansionCallback:
            expansionCallback == null ? null : expansionCallbackProxy,
        initialOpenPanelValue: initialOpenPanelValue,
        key: key,
      );
    };
Function _ExpansionPanelList_createState$(
  m.Scope scope$,
  ExpansionPanelList target$,
) =>
    target$.createState;
