// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/expansion_panel.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/expand_icon.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/mergeable_material.dart';
import 'package:flutter/src/material/shadows.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/expansion_panel.dart',
  {},
  {},
  {
    'ExpansionPanel': m.ClassMirror(
      'ExpansionPanel',
      {
        '#as': ExpansionPanel_as$,
        '#is': ExpansionPanel_is$,
        'headerBuilder': _ExpansionPanel_headerBuilder$,
        'body': _ExpansionPanel_body$,
        'isExpanded': _ExpansionPanel_isExpanded$,
        'canTapOnHeader': _ExpansionPanel_canTapOnHeader$,
        'backgroundColor': _ExpansionPanel_backgroundColor$,
      },
      {},
    ),
    'ExpansionPanelRadio': m.ClassMirror(
      'ExpansionPanelRadio',
      {
        '#as': ExpansionPanelRadio_as$,
        '#is': ExpansionPanelRadio_is$,
        'value': _ExpansionPanelRadio_value$,
      },
      {},
    ),
    'ExpansionPanelList': m.ClassMirror(
      'ExpansionPanelList',
      {
        '#as': ExpansionPanelList_as$,
        '#is': ExpansionPanelList_is$,
        'children': _ExpansionPanelList_children$,
        'expansionCallback': _ExpansionPanelList_expansionCallback$,
        'animationDuration': _ExpansionPanelList_animationDuration$,
        'initialOpenPanelValue': _ExpansionPanelList_initialOpenPanelValue$,
        'expandedHeaderPadding': _ExpansionPanelList_expandedHeaderPadding$,
        'dividerColor': _ExpansionPanelList_dividerColor$,
        'elevation': _ExpansionPanelList_elevation$,
        'expandIconColor': _ExpansionPanelList_expandIconColor$,
        'createState': _ExpansionPanelList_createState$,
      },
      {},
    ),
  },
);
Function ExpansionPanel_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ExpansionPanel;
Function ExpansionPanel_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ExpansionPanel;
Widget Function(BuildContext, bool) _ExpansionPanel_headerBuilder$(
    ExpansionPanel target) {
  return target.headerBuilder;
}

Widget _ExpansionPanel_body$(ExpansionPanel target) {
  return target.body;
}

bool _ExpansionPanel_isExpanded$(ExpansionPanel target) {
  return target.isExpanded;
}

bool _ExpansionPanel_canTapOnHeader$(ExpansionPanel target) {
  return target.canTapOnHeader;
}

Color? _ExpansionPanel_backgroundColor$(ExpansionPanel target) {
  return target.backgroundColor;
}

Function ExpansionPanelRadio_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ExpansionPanelRadio;
Function ExpansionPanelRadio_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ExpansionPanelRadio;
Object _ExpansionPanelRadio_value$(ExpansionPanelRadio target) {
  return target.value;
}

Function ExpansionPanelList_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ExpansionPanelList;
Function ExpansionPanelList_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ExpansionPanelList;
List<ExpansionPanel> _ExpansionPanelList_children$(ExpansionPanelList target) {
  return target.children;
}

void Function(int, bool)? _ExpansionPanelList_expansionCallback$(
    ExpansionPanelList target) {
  return target.expansionCallback;
}

Duration _ExpansionPanelList_animationDuration$(ExpansionPanelList target) {
  return target.animationDuration;
}

Object? _ExpansionPanelList_initialOpenPanelValue$(ExpansionPanelList target) {
  return target.initialOpenPanelValue;
}

EdgeInsets _ExpansionPanelList_expandedHeaderPadding$(
    ExpansionPanelList target) {
  return target.expandedHeaderPadding;
}

Color? _ExpansionPanelList_dividerColor$(ExpansionPanelList target) {
  return target.dividerColor;
}

double _ExpansionPanelList_elevation$(ExpansionPanelList target) {
  return target.elevation;
}

Color? _ExpansionPanelList_expandIconColor$(ExpansionPanelList target) {
  return target.expandIconColor;
}

Function _ExpansionPanelList_createState$(
  m.Scope scope,
  ExpansionPanelList target,
) =>
    target.createState;
