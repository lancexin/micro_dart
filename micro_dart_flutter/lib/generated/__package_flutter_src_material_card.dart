// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/card.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/card_theme.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/card.dart',
  {},
  {},
  {
    'Card': m.ClassMirror(
      'Card',
      {
        '#as': Card_as$,
        '#is': Card_is$,
        'color': _Card_color$,
        'shadowColor': _Card_shadowColor$,
        'surfaceTintColor': _Card_surfaceTintColor$,
        'elevation': _Card_elevation$,
        'shape': _Card_shape$,
        'borderOnForeground': _Card_borderOnForeground$,
        'clipBehavior': _Card_clipBehavior$,
        'margin': _Card_margin$,
        'semanticContainer': _Card_semanticContainer$,
        'child': _Card_child$,
        'build': _Card_build$,
      },
      {},
    )
  },
);
Function Card_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Card;
Function Card_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Card;
Color? _Card_color$(Card target) {
  return target.color;
}

Color? _Card_shadowColor$(Card target) {
  return target.shadowColor;
}

Color? _Card_surfaceTintColor$(Card target) {
  return target.surfaceTintColor;
}

double? _Card_elevation$(Card target) {
  return target.elevation;
}

ShapeBorder? _Card_shape$(Card target) {
  return target.shape;
}

bool _Card_borderOnForeground$(Card target) {
  return target.borderOnForeground;
}

Clip? _Card_clipBehavior$(Card target) {
  return target.clipBehavior;
}

EdgeInsetsGeometry? _Card_margin$(Card target) {
  return target.margin;
}

bool _Card_semanticContainer$(Card target) {
  return target.semanticContainer;
}

Widget? _Card_child$(Card target) {
  return target.child;
}

Function _Card_build$(
  m.Scope scope,
  Card target,
) =>
    target.build;
