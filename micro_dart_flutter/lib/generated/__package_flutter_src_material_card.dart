// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/card.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/card_theme.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/card.dart',
  {'Card.': _Card__$},
  {},
  {
    'Card': m.ClassMirror(
      'Card',
      {
        '#as': Card_as$,
        '#is': Card_is$,
        'color': _Card_color$,
        'shadowColor': _Card_shadowColor$,
        'surfaceTintColor': _Card_surfaceTintColor$,
        'elevation': _Card_elevation$,
        'shape': _Card_shape$,
        'borderOnForeground': _Card_borderOnForeground$,
        'clipBehavior': _Card_clipBehavior$,
        'margin': _Card_margin$,
        'semanticContainer': _Card_semanticContainer$,
        'child': _Card_child$,
        'build': _Card_build$,
      },
      {},
    )
  },
);
Function Card_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Card;
Function Card_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Card;
Function _Card_color$(
  m.Scope scope$,
  Card target$,
) =>
    () {
      return target$.color;
    };
Function _Card_shadowColor$(
  m.Scope scope$,
  Card target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _Card_surfaceTintColor$(
  m.Scope scope$,
  Card target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _Card_elevation$(
  m.Scope scope$,
  Card target$,
) =>
    () {
      return target$.elevation;
    };
Function _Card_shape$(
  m.Scope scope$,
  Card target$,
) =>
    () {
      return target$.shape;
    };
Function _Card_borderOnForeground$(
  m.Scope scope$,
  Card target$,
) =>
    () {
      return target$.borderOnForeground;
    };
Function _Card_clipBehavior$(
  m.Scope scope$,
  Card target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _Card_margin$(
  m.Scope scope$,
  Card target$,
) =>
    () {
      return target$.margin;
    };
Function _Card_semanticContainer$(
  m.Scope scope$,
  Card target$,
) =>
    () {
      return target$.semanticContainer;
    };
Function _Card_child$(
  m.Scope scope$,
  Card target$,
) =>
    () {
      return target$.child;
    };
Function _Card__$(m.Scope scope$) => ({
      Key? key,
      Color? color,
      Color? shadowColor,
      Color? surfaceTintColor,
      double? elevation,
      ShapeBorder? shape,
      bool? borderOnForeground,
      EdgeInsetsGeometry? margin,
      Clip? clipBehavior,
      Widget? child,
      bool? semanticContainer,
    }) {
      return Card(
        borderOnForeground: borderOnForeground ?? true,
        child: child,
        clipBehavior: clipBehavior,
        color: color,
        elevation: elevation,
        key: key,
        margin: margin,
        semanticContainer: semanticContainer ?? true,
        shadowColor: shadowColor,
        shape: shape,
        surfaceTintColor: surfaceTintColor,
      );
    };
Function _Card_build$(
  m.Scope scope$,
  Card target$,
) =>
    target$.build;
