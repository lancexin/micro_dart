// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/ink_decoration.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/material.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/ink_decoration.dart',
  {},
  {},
  {
    'Ink': m.ClassMirror(
      'Ink',
      {
        'child': _Ink_child$,
        'padding': _Ink_padding$,
        'decoration': _Ink_decoration$,
        'width': _Ink_width$,
        'height': _Ink_height$,
        'debugFillProperties': _Ink_debugFillProperties$,
        'createState': _Ink_createState$,
      },
      {},
    ),
    'InkDecoration': m.ClassMirror(
      'InkDecoration',
      {
        'decoration': _InkDecoration_decoration$,
        'isVisible': _InkDecoration_isVisible$,
        'configuration': _InkDecoration_configuration$,
        'dispose': _InkDecoration_dispose$,
        'paintFeature': _InkDecoration_paintFeature$,
      },
      {
        'decoration': _InkDecoration_decoration_set$,
        'isVisible': _InkDecoration_isVisible_set$,
        'configuration': _InkDecoration_configuration_set$,
      },
    ),
  },
);
Widget? _Ink_child$(Ink target) {
  return target.child;
}

EdgeInsetsGeometry? _Ink_padding$(Ink target) {
  return target.padding;
}

Decoration? _Ink_decoration$(Ink target) {
  return target.decoration;
}

double? _Ink_width$(Ink target) {
  return target.width;
}

double? _Ink_height$(Ink target) {
  return target.height;
}

Function _Ink_debugFillProperties$(
  m.Scope scope,
  Ink target,
) =>
    target.debugFillProperties;
Function _Ink_createState$(
  m.Scope scope,
  Ink target,
) =>
    target.createState;
Decoration? _InkDecoration_decoration$(InkDecoration target) {
  return target.decoration;
}

void _InkDecoration_decoration_set$(
  InkDecoration target,
  Decoration? other,
) {
  target.decoration = other;
}

bool _InkDecoration_isVisible$(InkDecoration target) {
  return target.isVisible;
}

void _InkDecoration_isVisible_set$(
  InkDecoration target,
  bool other,
) {
  target.isVisible = other;
}

ImageConfiguration _InkDecoration_configuration$(InkDecoration target) {
  return target.configuration;
}

void _InkDecoration_configuration_set$(
  InkDecoration target,
  ImageConfiguration other,
) {
  target.configuration = other;
}

Function _InkDecoration_dispose$(
  m.Scope scope,
  InkDecoration target,
) =>
    target.dispose;
Function _InkDecoration_paintFeature$(
  m.Scope scope,
  InkDecoration target,
) =>
    target.paintFeature;
