// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/implicit_animations.dart';
import 'dart:ui' show TextHeightBehavior;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:vector_math/vector_math_64.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/container.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/text.dart';
import 'package:flutter/src/widgets/ticker_provider.dart';
import 'package:flutter/src/widgets/transitions.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/implicit_animations.dart',
  {
    'ImplicitlyAnimatedWidgetState.forEachTween':
        _ImplicitlyAnimatedWidgetState_forEachTween$
  },
  {},
  {
    'BoxConstraintsTween': m.ClassMirror(
      'BoxConstraintsTween',
      {
        '#as': BoxConstraintsTween_as$,
        '#is': BoxConstraintsTween_is$,
        'lerp': _BoxConstraintsTween_lerp$,
      },
      {},
    ),
    'DecorationTween': m.ClassMirror(
      'DecorationTween',
      {
        '#as': DecorationTween_as$,
        '#is': DecorationTween_is$,
        'lerp': _DecorationTween_lerp$,
      },
      {},
    ),
    'EdgeInsetsTween': m.ClassMirror(
      'EdgeInsetsTween',
      {
        '#as': EdgeInsetsTween_as$,
        '#is': EdgeInsetsTween_is$,
        'lerp': _EdgeInsetsTween_lerp$,
      },
      {},
    ),
    'EdgeInsetsGeometryTween': m.ClassMirror(
      'EdgeInsetsGeometryTween',
      {
        '#as': EdgeInsetsGeometryTween_as$,
        '#is': EdgeInsetsGeometryTween_is$,
        'lerp': _EdgeInsetsGeometryTween_lerp$,
      },
      {},
    ),
    'BorderRadiusTween': m.ClassMirror(
      'BorderRadiusTween',
      {
        '#as': BorderRadiusTween_as$,
        '#is': BorderRadiusTween_is$,
        'lerp': _BorderRadiusTween_lerp$,
      },
      {},
    ),
    'BorderTween': m.ClassMirror(
      'BorderTween',
      {
        '#as': BorderTween_as$,
        '#is': BorderTween_is$,
        'lerp': _BorderTween_lerp$,
      },
      {},
    ),
    'Matrix4Tween': m.ClassMirror(
      'Matrix4Tween',
      {
        '#as': Matrix4Tween_as$,
        '#is': Matrix4Tween_is$,
        'lerp': _Matrix4Tween_lerp$,
      },
      {},
    ),
    'TextStyleTween': m.ClassMirror(
      'TextStyleTween',
      {
        '#as': TextStyleTween_as$,
        '#is': TextStyleTween_is$,
        'lerp': _TextStyleTween_lerp$,
      },
      {},
    ),
    'ImplicitlyAnimatedWidget': m.ClassMirror(
      'ImplicitlyAnimatedWidget',
      {
        '#as': ImplicitlyAnimatedWidget_as$,
        '#is': ImplicitlyAnimatedWidget_is$,
        'curve': _ImplicitlyAnimatedWidget_curve$,
        'duration': _ImplicitlyAnimatedWidget_duration$,
        'onEnd': _ImplicitlyAnimatedWidget_onEnd$,
        'createState': _ImplicitlyAnimatedWidget_createState$,
        'debugFillProperties': _ImplicitlyAnimatedWidget_debugFillProperties$,
      },
      {},
    ),
    'ImplicitlyAnimatedWidgetState': m.ClassMirror(
      'ImplicitlyAnimatedWidgetState',
      {
        '#as': ImplicitlyAnimatedWidgetState_as$,
        '#is': ImplicitlyAnimatedWidgetState_is$,
        'controller': _ImplicitlyAnimatedWidgetState_controller$,
        'animation': _ImplicitlyAnimatedWidgetState_animation$,
        'initState': _ImplicitlyAnimatedWidgetState_initState$,
        'didUpdateWidget': _ImplicitlyAnimatedWidgetState_didUpdateWidget$,
        'dispose': _ImplicitlyAnimatedWidgetState_dispose$,
        'didUpdateTweens': _ImplicitlyAnimatedWidgetState_didUpdateTweens$,
      },
      {},
    ),
    'AnimatedWidgetBaseState': m.ClassMirror(
      'AnimatedWidgetBaseState',
      {
        '#as': AnimatedWidgetBaseState_as$,
        '#is': AnimatedWidgetBaseState_is$,
        'initState': _AnimatedWidgetBaseState_initState$,
      },
      {},
    ),
    'AnimatedContainer': m.ClassMirror(
      'AnimatedContainer',
      {
        '#as': AnimatedContainer_as$,
        '#is': AnimatedContainer_is$,
        'child': _AnimatedContainer_child$,
        'alignment': _AnimatedContainer_alignment$,
        'padding': _AnimatedContainer_padding$,
        'decoration': _AnimatedContainer_decoration$,
        'foregroundDecoration': _AnimatedContainer_foregroundDecoration$,
        'constraints': _AnimatedContainer_constraints$,
        'margin': _AnimatedContainer_margin$,
        'transform': _AnimatedContainer_transform$,
        'transformAlignment': _AnimatedContainer_transformAlignment$,
        'clipBehavior': _AnimatedContainer_clipBehavior$,
        'createState': _AnimatedContainer_createState$,
        'debugFillProperties': _AnimatedContainer_debugFillProperties$,
      },
      {},
    ),
    'AnimatedPadding': m.ClassMirror(
      'AnimatedPadding',
      {
        '#as': AnimatedPadding_as$,
        '#is': AnimatedPadding_is$,
        'padding': _AnimatedPadding_padding$,
        'child': _AnimatedPadding_child$,
        'createState': _AnimatedPadding_createState$,
        'debugFillProperties': _AnimatedPadding_debugFillProperties$,
      },
      {},
    ),
    'AnimatedAlign': m.ClassMirror(
      'AnimatedAlign',
      {
        '#as': AnimatedAlign_as$,
        '#is': AnimatedAlign_is$,
        'alignment': _AnimatedAlign_alignment$,
        'child': _AnimatedAlign_child$,
        'heightFactor': _AnimatedAlign_heightFactor$,
        'widthFactor': _AnimatedAlign_widthFactor$,
        'createState': _AnimatedAlign_createState$,
        'debugFillProperties': _AnimatedAlign_debugFillProperties$,
      },
      {},
    ),
    'AnimatedPositioned': m.ClassMirror(
      'AnimatedPositioned',
      {
        '#as': AnimatedPositioned_as$,
        '#is': AnimatedPositioned_is$,
        'child': _AnimatedPositioned_child$,
        'left': _AnimatedPositioned_left$,
        'top': _AnimatedPositioned_top$,
        'right': _AnimatedPositioned_right$,
        'bottom': _AnimatedPositioned_bottom$,
        'width': _AnimatedPositioned_width$,
        'height': _AnimatedPositioned_height$,
        'createState': _AnimatedPositioned_createState$,
        'debugFillProperties': _AnimatedPositioned_debugFillProperties$,
      },
      {},
    ),
    'AnimatedPositionedDirectional': m.ClassMirror(
      'AnimatedPositionedDirectional',
      {
        '#as': AnimatedPositionedDirectional_as$,
        '#is': AnimatedPositionedDirectional_is$,
        'child': _AnimatedPositionedDirectional_child$,
        'start': _AnimatedPositionedDirectional_start$,
        'top': _AnimatedPositionedDirectional_top$,
        'end': _AnimatedPositionedDirectional_end$,
        'bottom': _AnimatedPositionedDirectional_bottom$,
        'width': _AnimatedPositionedDirectional_width$,
        'height': _AnimatedPositionedDirectional_height$,
        'createState': _AnimatedPositionedDirectional_createState$,
        'debugFillProperties':
            _AnimatedPositionedDirectional_debugFillProperties$,
      },
      {},
    ),
    'AnimatedScale': m.ClassMirror(
      'AnimatedScale',
      {
        '#as': AnimatedScale_as$,
        '#is': AnimatedScale_is$,
        'child': _AnimatedScale_child$,
        'scale': _AnimatedScale_scale$,
        'alignment': _AnimatedScale_alignment$,
        'filterQuality': _AnimatedScale_filterQuality$,
        'createState': _AnimatedScale_createState$,
        'debugFillProperties': _AnimatedScale_debugFillProperties$,
      },
      {},
    ),
    'AnimatedRotation': m.ClassMirror(
      'AnimatedRotation',
      {
        '#as': AnimatedRotation_as$,
        '#is': AnimatedRotation_is$,
        'child': _AnimatedRotation_child$,
        'turns': _AnimatedRotation_turns$,
        'alignment': _AnimatedRotation_alignment$,
        'filterQuality': _AnimatedRotation_filterQuality$,
        'createState': _AnimatedRotation_createState$,
        'debugFillProperties': _AnimatedRotation_debugFillProperties$,
      },
      {},
    ),
    'AnimatedSlide': m.ClassMirror(
      'AnimatedSlide',
      {
        '#as': AnimatedSlide_as$,
        '#is': AnimatedSlide_is$,
        'child': _AnimatedSlide_child$,
        'offset': _AnimatedSlide_offset$,
        'createState': _AnimatedSlide_createState$,
        'debugFillProperties': _AnimatedSlide_debugFillProperties$,
      },
      {},
    ),
    'AnimatedOpacity': m.ClassMirror(
      'AnimatedOpacity',
      {
        '#as': AnimatedOpacity_as$,
        '#is': AnimatedOpacity_is$,
        'child': _AnimatedOpacity_child$,
        'opacity': _AnimatedOpacity_opacity$,
        'alwaysIncludeSemantics': _AnimatedOpacity_alwaysIncludeSemantics$,
        'createState': _AnimatedOpacity_createState$,
        'debugFillProperties': _AnimatedOpacity_debugFillProperties$,
      },
      {},
    ),
    'SliverAnimatedOpacity': m.ClassMirror(
      'SliverAnimatedOpacity',
      {
        '#as': SliverAnimatedOpacity_as$,
        '#is': SliverAnimatedOpacity_is$,
        'sliver': _SliverAnimatedOpacity_sliver$,
        'opacity': _SliverAnimatedOpacity_opacity$,
        'alwaysIncludeSemantics':
            _SliverAnimatedOpacity_alwaysIncludeSemantics$,
        'createState': _SliverAnimatedOpacity_createState$,
        'debugFillProperties': _SliverAnimatedOpacity_debugFillProperties$,
      },
      {},
    ),
    'AnimatedDefaultTextStyle': m.ClassMirror(
      'AnimatedDefaultTextStyle',
      {
        '#as': AnimatedDefaultTextStyle_as$,
        '#is': AnimatedDefaultTextStyle_is$,
        'child': _AnimatedDefaultTextStyle_child$,
        'style': _AnimatedDefaultTextStyle_style$,
        'textAlign': _AnimatedDefaultTextStyle_textAlign$,
        'softWrap': _AnimatedDefaultTextStyle_softWrap$,
        'overflow': _AnimatedDefaultTextStyle_overflow$,
        'maxLines': _AnimatedDefaultTextStyle_maxLines$,
        'textWidthBasis': _AnimatedDefaultTextStyle_textWidthBasis$,
        'textHeightBehavior': _AnimatedDefaultTextStyle_textHeightBehavior$,
        'createState': _AnimatedDefaultTextStyle_createState$,
        'debugFillProperties': _AnimatedDefaultTextStyle_debugFillProperties$,
      },
      {},
    ),
    'AnimatedPhysicalModel': m.ClassMirror(
      'AnimatedPhysicalModel',
      {
        '#as': AnimatedPhysicalModel_as$,
        '#is': AnimatedPhysicalModel_is$,
        'child': _AnimatedPhysicalModel_child$,
        'shape': _AnimatedPhysicalModel_shape$,
        'clipBehavior': _AnimatedPhysicalModel_clipBehavior$,
        'borderRadius': _AnimatedPhysicalModel_borderRadius$,
        'elevation': _AnimatedPhysicalModel_elevation$,
        'color': _AnimatedPhysicalModel_color$,
        'animateColor': _AnimatedPhysicalModel_animateColor$,
        'shadowColor': _AnimatedPhysicalModel_shadowColor$,
        'animateShadowColor': _AnimatedPhysicalModel_animateShadowColor$,
        'createState': _AnimatedPhysicalModel_createState$,
        'debugFillProperties': _AnimatedPhysicalModel_debugFillProperties$,
      },
      {},
    ),
    'AnimatedFractionallySizedBox': m.ClassMirror(
      'AnimatedFractionallySizedBox',
      {
        '#as': AnimatedFractionallySizedBox_as$,
        '#is': AnimatedFractionallySizedBox_is$,
        'child': _AnimatedFractionallySizedBox_child$,
        'heightFactor': _AnimatedFractionallySizedBox_heightFactor$,
        'widthFactor': _AnimatedFractionallySizedBox_widthFactor$,
        'alignment': _AnimatedFractionallySizedBox_alignment$,
        'createState': _AnimatedFractionallySizedBox_createState$,
        'debugFillProperties':
            _AnimatedFractionallySizedBox_debugFillProperties$,
      },
      {},
    ),
  },
);
Function BoxConstraintsTween_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as BoxConstraintsTween;
Function BoxConstraintsTween_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is BoxConstraintsTween;
Function _BoxConstraintsTween_lerp$(
  m.Scope scope,
  BoxConstraintsTween target,
) =>
    target.lerp;
Function DecorationTween_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DecorationTween;
Function DecorationTween_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DecorationTween;
Function _DecorationTween_lerp$(
  m.Scope scope,
  DecorationTween target,
) =>
    target.lerp;
Function EdgeInsetsTween_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as EdgeInsetsTween;
Function EdgeInsetsTween_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is EdgeInsetsTween;
Function _EdgeInsetsTween_lerp$(
  m.Scope scope,
  EdgeInsetsTween target,
) =>
    target.lerp;
Function EdgeInsetsGeometryTween_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as EdgeInsetsGeometryTween;
Function EdgeInsetsGeometryTween_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is EdgeInsetsGeometryTween;
Function _EdgeInsetsGeometryTween_lerp$(
  m.Scope scope,
  EdgeInsetsGeometryTween target,
) =>
    target.lerp;
Function BorderRadiusTween_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as BorderRadiusTween;
Function BorderRadiusTween_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is BorderRadiusTween;
Function _BorderRadiusTween_lerp$(
  m.Scope scope,
  BorderRadiusTween target,
) =>
    target.lerp;
Function BorderTween_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as BorderTween;
Function BorderTween_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is BorderTween;
Function _BorderTween_lerp$(
  m.Scope scope,
  BorderTween target,
) =>
    target.lerp;
Function Matrix4Tween_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Matrix4Tween;
Function Matrix4Tween_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Matrix4Tween;
Function _Matrix4Tween_lerp$(
  m.Scope scope,
  Matrix4Tween target,
) =>
    target.lerp;
Function TextStyleTween_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as TextStyleTween;
Function TextStyleTween_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is TextStyleTween;
Function _TextStyleTween_lerp$(
  m.Scope scope,
  TextStyleTween target,
) =>
    target.lerp;
Function ImplicitlyAnimatedWidget_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ImplicitlyAnimatedWidget;
Function ImplicitlyAnimatedWidget_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ImplicitlyAnimatedWidget;
Curve _ImplicitlyAnimatedWidget_curve$(ImplicitlyAnimatedWidget target) {
  return target.curve;
}

Duration _ImplicitlyAnimatedWidget_duration$(ImplicitlyAnimatedWidget target) {
  return target.duration;
}

void Function()? _ImplicitlyAnimatedWidget_onEnd$(
    ImplicitlyAnimatedWidget target) {
  return target.onEnd;
}

Function _ImplicitlyAnimatedWidget_createState$(
  m.Scope scope,
  ImplicitlyAnimatedWidget target,
) =>
    target.createState;
Function _ImplicitlyAnimatedWidget_debugFillProperties$(
  m.Scope scope,
  ImplicitlyAnimatedWidget target,
) =>
    target.debugFillProperties;
Function ImplicitlyAnimatedWidgetState_as$<T extends ImplicitlyAnimatedWidget>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ImplicitlyAnimatedWidgetState<T>;
Function ImplicitlyAnimatedWidgetState_is$<T extends ImplicitlyAnimatedWidget>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ImplicitlyAnimatedWidgetState<T>;
AnimationController _ImplicitlyAnimatedWidgetState_controller$<
        T extends ImplicitlyAnimatedWidget>(
    ImplicitlyAnimatedWidgetState<T> target) {
  return target.controller;
}

Animation<double> _ImplicitlyAnimatedWidgetState_animation$<
        T extends ImplicitlyAnimatedWidget>(
    ImplicitlyAnimatedWidgetState<T> target) {
  return target.animation;
}

Function _ImplicitlyAnimatedWidgetState_initState$<
        T extends ImplicitlyAnimatedWidget>(
  m.Scope scope,
  ImplicitlyAnimatedWidgetState<T> target,
) =>
    target.initState;
Function _ImplicitlyAnimatedWidgetState_didUpdateWidget$<
        T extends ImplicitlyAnimatedWidget>(
  m.Scope scope,
  ImplicitlyAnimatedWidgetState<T> target,
) =>
    target.didUpdateWidget;
Function
    _ImplicitlyAnimatedWidgetState_dispose$<T extends ImplicitlyAnimatedWidget>(
  m.Scope scope,
  ImplicitlyAnimatedWidgetState<T> target,
) =>
        target.dispose;
Function _ImplicitlyAnimatedWidgetState_forEachTween$<
        T extends ImplicitlyAnimatedWidget>(
  m.Scope scope,
  ImplicitlyAnimatedWidgetState<T> target,
) =>
    (m.FunctionPointer visitor) {
      Tween<dynamic>? visitorProxy(
        Tween<dynamic>? visitor_tween,
        dynamic visitor_targetValue,
        Tween<dynamic> Function(dynamic) visitor_constructor,
      ) =>
          scope.engine.callFunctionPointer(
            scope,
            visitor,
            [
              visitor_tween,
              visitor_targetValue,
              visitor_constructor,
            ],
            {},
          );
      target.forEachTween(visitorProxy);
    };
Function _ImplicitlyAnimatedWidgetState_didUpdateTweens$<
        T extends ImplicitlyAnimatedWidget>(
  m.Scope scope,
  ImplicitlyAnimatedWidgetState<T> target,
) =>
    target.didUpdateTweens;
Function AnimatedWidgetBaseState_as$<T extends ImplicitlyAnimatedWidget>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AnimatedWidgetBaseState<T>;
Function AnimatedWidgetBaseState_is$<T extends ImplicitlyAnimatedWidget>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AnimatedWidgetBaseState<T>;
Function
    _AnimatedWidgetBaseState_initState$<T extends ImplicitlyAnimatedWidget>(
  m.Scope scope,
  AnimatedWidgetBaseState<T> target,
) =>
        target.initState;
Function AnimatedContainer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AnimatedContainer;
Function AnimatedContainer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AnimatedContainer;
Widget? _AnimatedContainer_child$(AnimatedContainer target) {
  return target.child;
}

AlignmentGeometry? _AnimatedContainer_alignment$(AnimatedContainer target) {
  return target.alignment;
}

EdgeInsetsGeometry? _AnimatedContainer_padding$(AnimatedContainer target) {
  return target.padding;
}

Decoration? _AnimatedContainer_decoration$(AnimatedContainer target) {
  return target.decoration;
}

Decoration? _AnimatedContainer_foregroundDecoration$(AnimatedContainer target) {
  return target.foregroundDecoration;
}

BoxConstraints? _AnimatedContainer_constraints$(AnimatedContainer target) {
  return target.constraints;
}

EdgeInsetsGeometry? _AnimatedContainer_margin$(AnimatedContainer target) {
  return target.margin;
}

Matrix4? _AnimatedContainer_transform$(AnimatedContainer target) {
  return target.transform;
}

AlignmentGeometry? _AnimatedContainer_transformAlignment$(
    AnimatedContainer target) {
  return target.transformAlignment;
}

Clip _AnimatedContainer_clipBehavior$(AnimatedContainer target) {
  return target.clipBehavior;
}

Function _AnimatedContainer_createState$(
  m.Scope scope,
  AnimatedContainer target,
) =>
    target.createState;
Function _AnimatedContainer_debugFillProperties$(
  m.Scope scope,
  AnimatedContainer target,
) =>
    target.debugFillProperties;
Function AnimatedPadding_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AnimatedPadding;
Function AnimatedPadding_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AnimatedPadding;
EdgeInsetsGeometry _AnimatedPadding_padding$(AnimatedPadding target) {
  return target.padding;
}

Widget? _AnimatedPadding_child$(AnimatedPadding target) {
  return target.child;
}

Function _AnimatedPadding_createState$(
  m.Scope scope,
  AnimatedPadding target,
) =>
    target.createState;
Function _AnimatedPadding_debugFillProperties$(
  m.Scope scope,
  AnimatedPadding target,
) =>
    target.debugFillProperties;
Function AnimatedAlign_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AnimatedAlign;
Function AnimatedAlign_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AnimatedAlign;
AlignmentGeometry _AnimatedAlign_alignment$(AnimatedAlign target) {
  return target.alignment;
}

Widget? _AnimatedAlign_child$(AnimatedAlign target) {
  return target.child;
}

double? _AnimatedAlign_heightFactor$(AnimatedAlign target) {
  return target.heightFactor;
}

double? _AnimatedAlign_widthFactor$(AnimatedAlign target) {
  return target.widthFactor;
}

Function _AnimatedAlign_createState$(
  m.Scope scope,
  AnimatedAlign target,
) =>
    target.createState;
Function _AnimatedAlign_debugFillProperties$(
  m.Scope scope,
  AnimatedAlign target,
) =>
    target.debugFillProperties;
Function AnimatedPositioned_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AnimatedPositioned;
Function AnimatedPositioned_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AnimatedPositioned;
Widget _AnimatedPositioned_child$(AnimatedPositioned target) {
  return target.child;
}

double? _AnimatedPositioned_left$(AnimatedPositioned target) {
  return target.left;
}

double? _AnimatedPositioned_top$(AnimatedPositioned target) {
  return target.top;
}

double? _AnimatedPositioned_right$(AnimatedPositioned target) {
  return target.right;
}

double? _AnimatedPositioned_bottom$(AnimatedPositioned target) {
  return target.bottom;
}

double? _AnimatedPositioned_width$(AnimatedPositioned target) {
  return target.width;
}

double? _AnimatedPositioned_height$(AnimatedPositioned target) {
  return target.height;
}

Function _AnimatedPositioned_createState$(
  m.Scope scope,
  AnimatedPositioned target,
) =>
    target.createState;
Function _AnimatedPositioned_debugFillProperties$(
  m.Scope scope,
  AnimatedPositioned target,
) =>
    target.debugFillProperties;
Function AnimatedPositionedDirectional_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AnimatedPositionedDirectional;
Function AnimatedPositionedDirectional_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AnimatedPositionedDirectional;
Widget _AnimatedPositionedDirectional_child$(
    AnimatedPositionedDirectional target) {
  return target.child;
}

double? _AnimatedPositionedDirectional_start$(
    AnimatedPositionedDirectional target) {
  return target.start;
}

double? _AnimatedPositionedDirectional_top$(
    AnimatedPositionedDirectional target) {
  return target.top;
}

double? _AnimatedPositionedDirectional_end$(
    AnimatedPositionedDirectional target) {
  return target.end;
}

double? _AnimatedPositionedDirectional_bottom$(
    AnimatedPositionedDirectional target) {
  return target.bottom;
}

double? _AnimatedPositionedDirectional_width$(
    AnimatedPositionedDirectional target) {
  return target.width;
}

double? _AnimatedPositionedDirectional_height$(
    AnimatedPositionedDirectional target) {
  return target.height;
}

Function _AnimatedPositionedDirectional_createState$(
  m.Scope scope,
  AnimatedPositionedDirectional target,
) =>
    target.createState;
Function _AnimatedPositionedDirectional_debugFillProperties$(
  m.Scope scope,
  AnimatedPositionedDirectional target,
) =>
    target.debugFillProperties;
Function AnimatedScale_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AnimatedScale;
Function AnimatedScale_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AnimatedScale;
Widget? _AnimatedScale_child$(AnimatedScale target) {
  return target.child;
}

double _AnimatedScale_scale$(AnimatedScale target) {
  return target.scale;
}

Alignment _AnimatedScale_alignment$(AnimatedScale target) {
  return target.alignment;
}

FilterQuality? _AnimatedScale_filterQuality$(AnimatedScale target) {
  return target.filterQuality;
}

Function _AnimatedScale_createState$(
  m.Scope scope,
  AnimatedScale target,
) =>
    target.createState;
Function _AnimatedScale_debugFillProperties$(
  m.Scope scope,
  AnimatedScale target,
) =>
    target.debugFillProperties;
Function AnimatedRotation_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AnimatedRotation;
Function AnimatedRotation_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AnimatedRotation;
Widget? _AnimatedRotation_child$(AnimatedRotation target) {
  return target.child;
}

double _AnimatedRotation_turns$(AnimatedRotation target) {
  return target.turns;
}

Alignment _AnimatedRotation_alignment$(AnimatedRotation target) {
  return target.alignment;
}

FilterQuality? _AnimatedRotation_filterQuality$(AnimatedRotation target) {
  return target.filterQuality;
}

Function _AnimatedRotation_createState$(
  m.Scope scope,
  AnimatedRotation target,
) =>
    target.createState;
Function _AnimatedRotation_debugFillProperties$(
  m.Scope scope,
  AnimatedRotation target,
) =>
    target.debugFillProperties;
Function AnimatedSlide_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AnimatedSlide;
Function AnimatedSlide_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AnimatedSlide;
Widget? _AnimatedSlide_child$(AnimatedSlide target) {
  return target.child;
}

Offset _AnimatedSlide_offset$(AnimatedSlide target) {
  return target.offset;
}

Function _AnimatedSlide_createState$(
  m.Scope scope,
  AnimatedSlide target,
) =>
    target.createState;
Function _AnimatedSlide_debugFillProperties$(
  m.Scope scope,
  AnimatedSlide target,
) =>
    target.debugFillProperties;
Function AnimatedOpacity_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AnimatedOpacity;
Function AnimatedOpacity_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AnimatedOpacity;
Widget? _AnimatedOpacity_child$(AnimatedOpacity target) {
  return target.child;
}

double _AnimatedOpacity_opacity$(AnimatedOpacity target) {
  return target.opacity;
}

bool _AnimatedOpacity_alwaysIncludeSemantics$(AnimatedOpacity target) {
  return target.alwaysIncludeSemantics;
}

Function _AnimatedOpacity_createState$(
  m.Scope scope,
  AnimatedOpacity target,
) =>
    target.createState;
Function _AnimatedOpacity_debugFillProperties$(
  m.Scope scope,
  AnimatedOpacity target,
) =>
    target.debugFillProperties;
Function SliverAnimatedOpacity_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SliverAnimatedOpacity;
Function SliverAnimatedOpacity_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SliverAnimatedOpacity;
Widget? _SliverAnimatedOpacity_sliver$(SliverAnimatedOpacity target) {
  return target.sliver;
}

double _SliverAnimatedOpacity_opacity$(SliverAnimatedOpacity target) {
  return target.opacity;
}

bool _SliverAnimatedOpacity_alwaysIncludeSemantics$(
    SliverAnimatedOpacity target) {
  return target.alwaysIncludeSemantics;
}

Function _SliverAnimatedOpacity_createState$(
  m.Scope scope,
  SliverAnimatedOpacity target,
) =>
    target.createState;
Function _SliverAnimatedOpacity_debugFillProperties$(
  m.Scope scope,
  SliverAnimatedOpacity target,
) =>
    target.debugFillProperties;
Function AnimatedDefaultTextStyle_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AnimatedDefaultTextStyle;
Function AnimatedDefaultTextStyle_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AnimatedDefaultTextStyle;
Widget _AnimatedDefaultTextStyle_child$(AnimatedDefaultTextStyle target) {
  return target.child;
}

TextStyle _AnimatedDefaultTextStyle_style$(AnimatedDefaultTextStyle target) {
  return target.style;
}

TextAlign? _AnimatedDefaultTextStyle_textAlign$(
    AnimatedDefaultTextStyle target) {
  return target.textAlign;
}

bool _AnimatedDefaultTextStyle_softWrap$(AnimatedDefaultTextStyle target) {
  return target.softWrap;
}

TextOverflow _AnimatedDefaultTextStyle_overflow$(
    AnimatedDefaultTextStyle target) {
  return target.overflow;
}

int? _AnimatedDefaultTextStyle_maxLines$(AnimatedDefaultTextStyle target) {
  return target.maxLines;
}

TextWidthBasis _AnimatedDefaultTextStyle_textWidthBasis$(
    AnimatedDefaultTextStyle target) {
  return target.textWidthBasis;
}

TextHeightBehavior? _AnimatedDefaultTextStyle_textHeightBehavior$(
    AnimatedDefaultTextStyle target) {
  return target.textHeightBehavior;
}

Function _AnimatedDefaultTextStyle_createState$(
  m.Scope scope,
  AnimatedDefaultTextStyle target,
) =>
    target.createState;
Function _AnimatedDefaultTextStyle_debugFillProperties$(
  m.Scope scope,
  AnimatedDefaultTextStyle target,
) =>
    target.debugFillProperties;
Function AnimatedPhysicalModel_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AnimatedPhysicalModel;
Function AnimatedPhysicalModel_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AnimatedPhysicalModel;
Widget _AnimatedPhysicalModel_child$(AnimatedPhysicalModel target) {
  return target.child;
}

BoxShape _AnimatedPhysicalModel_shape$(AnimatedPhysicalModel target) {
  return target.shape;
}

Clip _AnimatedPhysicalModel_clipBehavior$(AnimatedPhysicalModel target) {
  return target.clipBehavior;
}

BorderRadius _AnimatedPhysicalModel_borderRadius$(
    AnimatedPhysicalModel target) {
  return target.borderRadius;
}

double _AnimatedPhysicalModel_elevation$(AnimatedPhysicalModel target) {
  return target.elevation;
}

Color _AnimatedPhysicalModel_color$(AnimatedPhysicalModel target) {
  return target.color;
}

bool _AnimatedPhysicalModel_animateColor$(AnimatedPhysicalModel target) {
  return target.animateColor;
}

Color _AnimatedPhysicalModel_shadowColor$(AnimatedPhysicalModel target) {
  return target.shadowColor;
}

bool _AnimatedPhysicalModel_animateShadowColor$(AnimatedPhysicalModel target) {
  return target.animateShadowColor;
}

Function _AnimatedPhysicalModel_createState$(
  m.Scope scope,
  AnimatedPhysicalModel target,
) =>
    target.createState;
Function _AnimatedPhysicalModel_debugFillProperties$(
  m.Scope scope,
  AnimatedPhysicalModel target,
) =>
    target.debugFillProperties;
Function AnimatedFractionallySizedBox_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AnimatedFractionallySizedBox;
Function AnimatedFractionallySizedBox_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AnimatedFractionallySizedBox;
Widget? _AnimatedFractionallySizedBox_child$(
    AnimatedFractionallySizedBox target) {
  return target.child;
}

double? _AnimatedFractionallySizedBox_heightFactor$(
    AnimatedFractionallySizedBox target) {
  return target.heightFactor;
}

double? _AnimatedFractionallySizedBox_widthFactor$(
    AnimatedFractionallySizedBox target) {
  return target.widthFactor;
}

AlignmentGeometry _AnimatedFractionallySizedBox_alignment$(
    AnimatedFractionallySizedBox target) {
  return target.alignment;
}

Function _AnimatedFractionallySizedBox_createState$(
  m.Scope scope,
  AnimatedFractionallySizedBox target,
) =>
    target.createState;
Function _AnimatedFractionallySizedBox_debugFillProperties$(
  m.Scope scope,
  AnimatedFractionallySizedBox target,
) =>
    target.debugFillProperties;
