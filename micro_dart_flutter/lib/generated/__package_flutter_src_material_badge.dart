// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/badge.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/badge_theme.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/badge.dart',
  {},
  {},
  {
    'Badge': m.ClassMirror(
      'Badge',
      {
        '#as': Badge_as$,
        '#is': Badge_is$,
        'backgroundColor': _Badge_backgroundColor$,
        'textColor': _Badge_textColor$,
        'smallSize': _Badge_smallSize$,
        'largeSize': _Badge_largeSize$,
        'textStyle': _Badge_textStyle$,
        'padding': _Badge_padding$,
        'alignment': _Badge_alignment$,
        'offset': _Badge_offset$,
        'label': _Badge_label$,
        'isLabelVisible': _Badge_isLabelVisible$,
        'child': _Badge_child$,
        'build': _Badge_build$,
      },
      {},
    )
  },
);
Function Badge_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Badge;
Function Badge_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Badge;
Color? _Badge_backgroundColor$(Badge target) {
  return target.backgroundColor;
}

Color? _Badge_textColor$(Badge target) {
  return target.textColor;
}

double? _Badge_smallSize$(Badge target) {
  return target.smallSize;
}

double? _Badge_largeSize$(Badge target) {
  return target.largeSize;
}

TextStyle? _Badge_textStyle$(Badge target) {
  return target.textStyle;
}

EdgeInsetsGeometry? _Badge_padding$(Badge target) {
  return target.padding;
}

AlignmentGeometry? _Badge_alignment$(Badge target) {
  return target.alignment;
}

Offset? _Badge_offset$(Badge target) {
  return target.offset;
}

Widget? _Badge_label$(Badge target) {
  return target.label;
}

bool _Badge_isLabelVisible$(Badge target) {
  return target.isLabelVisible;
}

Widget? _Badge_child$(Badge target) {
  return target.child;
}

Function _Badge_build$(
  m.Scope scope,
  Badge target,
) =>
    target.build;
