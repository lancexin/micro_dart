// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/badge.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/badge_theme.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/badge.dart',
  {
    'Badge.': _Badge__$,
    'Badge.count': _Badge_count_$,
  },
  {},
  {
    'Badge': m.ClassMirror(
      'Badge',
      {
        '#as': Badge_as$,
        '#is': Badge_is$,
        'backgroundColor': _Badge_backgroundColor$,
        'textColor': _Badge_textColor$,
        'smallSize': _Badge_smallSize$,
        'largeSize': _Badge_largeSize$,
        'textStyle': _Badge_textStyle$,
        'padding': _Badge_padding$,
        'alignment': _Badge_alignment$,
        'offset': _Badge_offset$,
        'label': _Badge_label$,
        'isLabelVisible': _Badge_isLabelVisible$,
        'child': _Badge_child$,
        'build': _Badge_build$,
      },
      {},
    )
  },
);
Function Badge_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Badge;
Function Badge_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Badge;
Function _Badge_backgroundColor$(
  m.Scope scope$,
  Badge target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _Badge_textColor$(
  m.Scope scope$,
  Badge target$,
) =>
    () {
      return target$.textColor;
    };
Function _Badge_smallSize$(
  m.Scope scope$,
  Badge target$,
) =>
    () {
      return target$.smallSize;
    };
Function _Badge_largeSize$(
  m.Scope scope$,
  Badge target$,
) =>
    () {
      return target$.largeSize;
    };
Function _Badge_textStyle$(
  m.Scope scope$,
  Badge target$,
) =>
    () {
      return target$.textStyle;
    };
Function _Badge_padding$(
  m.Scope scope$,
  Badge target$,
) =>
    () {
      return target$.padding;
    };
Function _Badge_alignment$(
  m.Scope scope$,
  Badge target$,
) =>
    () {
      return target$.alignment;
    };
Function _Badge_offset$(
  m.Scope scope$,
  Badge target$,
) =>
    () {
      return target$.offset;
    };
Function _Badge_label$(
  m.Scope scope$,
  Badge target$,
) =>
    () {
      return target$.label;
    };
Function _Badge_isLabelVisible$(
  m.Scope scope$,
  Badge target$,
) =>
    () {
      return target$.isLabelVisible;
    };
Function _Badge_child$(
  m.Scope scope$,
  Badge target$,
) =>
    () {
      return target$.child;
    };
Function _Badge__$(m.Scope scope$) => ({
      Key? key,
      Color? backgroundColor,
      Color? textColor,
      double? smallSize,
      double? largeSize,
      TextStyle? textStyle,
      EdgeInsetsGeometry? padding,
      AlignmentGeometry? alignment,
      Offset? offset,
      Widget? label,
      bool? isLabelVisible,
      Widget? child,
    }) {
      return Badge(
        alignment: alignment,
        backgroundColor: backgroundColor,
        child: child,
        isLabelVisible: isLabelVisible ?? true,
        key: key,
        label: label,
        largeSize: largeSize,
        offset: offset,
        padding: padding,
        smallSize: smallSize,
        textColor: textColor,
        textStyle: textStyle,
      );
    };
Function _Badge_count_$(m.Scope scope$) => Badge.count;
Function _Badge_build$(
  m.Scope scope$,
  Badge target$,
) =>
    target$.build;
