// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/button_bar.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_bar_theme.dart';
import 'package:flutter/src/material/button_theme.dart';
import 'package:flutter/src/material/dialog.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/button_bar.dart',
  {'ButtonBar.': _ButtonBar__$},
  {},
  {
    'ButtonBar': m.ClassMirror(
      'ButtonBar',
      {
        '#as': ButtonBar_as$,
        '#is': ButtonBar_is$,
        'alignment': _ButtonBar_alignment$,
        'mainAxisSize': _ButtonBar_mainAxisSize$,
        'buttonTextTheme': _ButtonBar_buttonTextTheme$,
        'buttonMinWidth': _ButtonBar_buttonMinWidth$,
        'buttonHeight': _ButtonBar_buttonHeight$,
        'buttonPadding': _ButtonBar_buttonPadding$,
        'buttonAlignedDropdown': _ButtonBar_buttonAlignedDropdown$,
        'layoutBehavior': _ButtonBar_layoutBehavior$,
        'overflowDirection': _ButtonBar_overflowDirection$,
        'overflowButtonSpacing': _ButtonBar_overflowButtonSpacing$,
        'children': _ButtonBar_children$,
        'build': _ButtonBar_build$,
      },
      {},
    )
  },
);
Function ButtonBar_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ButtonBar;
Function ButtonBar_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ButtonBar;
Function _ButtonBar_alignment$(
  m.Scope scope$,
  ButtonBar target$,
) =>
    () {
      return target$.alignment;
    };
Function _ButtonBar_mainAxisSize$(
  m.Scope scope$,
  ButtonBar target$,
) =>
    () {
      return target$.mainAxisSize;
    };
Function _ButtonBar_buttonTextTheme$(
  m.Scope scope$,
  ButtonBar target$,
) =>
    () {
      return target$.buttonTextTheme;
    };
Function _ButtonBar_buttonMinWidth$(
  m.Scope scope$,
  ButtonBar target$,
) =>
    () {
      return target$.buttonMinWidth;
    };
Function _ButtonBar_buttonHeight$(
  m.Scope scope$,
  ButtonBar target$,
) =>
    () {
      return target$.buttonHeight;
    };
Function _ButtonBar_buttonPadding$(
  m.Scope scope$,
  ButtonBar target$,
) =>
    () {
      return target$.buttonPadding;
    };
Function _ButtonBar_buttonAlignedDropdown$(
  m.Scope scope$,
  ButtonBar target$,
) =>
    () {
      return target$.buttonAlignedDropdown;
    };
Function _ButtonBar_layoutBehavior$(
  m.Scope scope$,
  ButtonBar target$,
) =>
    () {
      return target$.layoutBehavior;
    };
Function _ButtonBar_overflowDirection$(
  m.Scope scope$,
  ButtonBar target$,
) =>
    () {
      return target$.overflowDirection;
    };
Function _ButtonBar_overflowButtonSpacing$(
  m.Scope scope$,
  ButtonBar target$,
) =>
    () {
      return target$.overflowButtonSpacing;
    };
Function _ButtonBar_children$(
  m.Scope scope$,
  ButtonBar target$,
) =>
    () {
      return target$.children;
    };
Function _ButtonBar__$(m.Scope scope$) => ({
      Key? key,
      MainAxisAlignment? alignment,
      MainAxisSize? mainAxisSize,
      ButtonTextTheme? buttonTextTheme,
      double? buttonMinWidth,
      double? buttonHeight,
      EdgeInsetsGeometry? buttonPadding,
      bool? buttonAlignedDropdown,
      ButtonBarLayoutBehavior? layoutBehavior,
      VerticalDirection? overflowDirection,
      double? overflowButtonSpacing,
      List? children,
    }) {
      return ButtonBar(
        alignment: alignment,
        buttonAlignedDropdown: buttonAlignedDropdown,
        buttonHeight: buttonHeight,
        buttonMinWidth: buttonMinWidth,
        buttonPadding: buttonPadding,
        buttonTextTheme: buttonTextTheme,
        children: children == null ? const <Widget>[] : List.from(children),
        key: key,
        layoutBehavior: layoutBehavior,
        mainAxisSize: mainAxisSize,
        overflowButtonSpacing: overflowButtonSpacing,
        overflowDirection: overflowDirection,
      );
    };
Function _ButtonBar_build$(
  m.Scope scope$,
  ButtonBar target$,
) =>
    target$.build;
