// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/button_bar.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_bar_theme.dart';
import 'package:flutter/src/material/button_theme.dart';
import 'package:flutter/src/material/dialog.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/button_bar.dart',
  {},
  {},
  {
    'ButtonBar': m.ClassMirror(
      'ButtonBar',
      {
        'alignment': _ButtonBar_alignment$,
        'mainAxisSize': _ButtonBar_mainAxisSize$,
        'buttonTextTheme': _ButtonBar_buttonTextTheme$,
        'buttonMinWidth': _ButtonBar_buttonMinWidth$,
        'buttonHeight': _ButtonBar_buttonHeight$,
        'buttonPadding': _ButtonBar_buttonPadding$,
        'buttonAlignedDropdown': _ButtonBar_buttonAlignedDropdown$,
        'layoutBehavior': _ButtonBar_layoutBehavior$,
        'overflowDirection': _ButtonBar_overflowDirection$,
        'overflowButtonSpacing': _ButtonBar_overflowButtonSpacing$,
        'children': _ButtonBar_children$,
        'build': _ButtonBar_build$,
      },
      {},
    )
  },
);
MainAxisAlignment? _ButtonBar_alignment$(ButtonBar target) {
  return target.alignment;
}

MainAxisSize? _ButtonBar_mainAxisSize$(ButtonBar target) {
  return target.mainAxisSize;
}

ButtonTextTheme? _ButtonBar_buttonTextTheme$(ButtonBar target) {
  return target.buttonTextTheme;
}

double? _ButtonBar_buttonMinWidth$(ButtonBar target) {
  return target.buttonMinWidth;
}

double? _ButtonBar_buttonHeight$(ButtonBar target) {
  return target.buttonHeight;
}

EdgeInsetsGeometry? _ButtonBar_buttonPadding$(ButtonBar target) {
  return target.buttonPadding;
}

bool? _ButtonBar_buttonAlignedDropdown$(ButtonBar target) {
  return target.buttonAlignedDropdown;
}

ButtonBarLayoutBehavior? _ButtonBar_layoutBehavior$(ButtonBar target) {
  return target.layoutBehavior;
}

VerticalDirection? _ButtonBar_overflowDirection$(ButtonBar target) {
  return target.overflowDirection;
}

double? _ButtonBar_overflowButtonSpacing$(ButtonBar target) {
  return target.overflowButtonSpacing;
}

List<Widget> _ButtonBar_children$(ButtonBar target) {
  return target.children;
}

Function _ButtonBar_build$(
  m.Scope scope,
  ButtonBar target,
) =>
    target.build;
