// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/mergeable_material.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/divider.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/mergeable_material.dart',
  {},
  {},
  {
    'MergeableMaterialItem': m.ClassMirror(
      'MergeableMaterialItem',
      {
        '#as': MergeableMaterialItem_as$,
        '#is': MergeableMaterialItem_is$,
        'key': _MergeableMaterialItem_key$,
      },
      {},
    ),
    'MaterialSlice': m.ClassMirror(
      'MaterialSlice',
      {
        '#as': MaterialSlice_as$,
        '#is': MaterialSlice_is$,
        'child': _MaterialSlice_child$,
        'color': _MaterialSlice_color$,
        'toString': _MaterialSlice_toString$,
      },
      {},
    ),
    'MaterialGap': m.ClassMirror(
      'MaterialGap',
      {
        '#as': MaterialGap_as$,
        '#is': MaterialGap_is$,
        'size': _MaterialGap_size$,
        'toString': _MaterialGap_toString$,
      },
      {},
    ),
    'MergeableMaterial': m.ClassMirror(
      'MergeableMaterial',
      {
        '#as': MergeableMaterial_as$,
        '#is': MergeableMaterial_is$,
        'children': _MergeableMaterial_children$,
        'mainAxis': _MergeableMaterial_mainAxis$,
        'elevation': _MergeableMaterial_elevation$,
        'hasDividers': _MergeableMaterial_hasDividers$,
        'dividerColor': _MergeableMaterial_dividerColor$,
        'debugFillProperties': _MergeableMaterial_debugFillProperties$,
        'createState': _MergeableMaterial_createState$,
      },
      {},
    ),
  },
);
Function MergeableMaterialItem_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as MergeableMaterialItem;
Function MergeableMaterialItem_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is MergeableMaterialItem;
LocalKey _MergeableMaterialItem_key$(MergeableMaterialItem target) {
  return target.key;
}

Function MaterialSlice_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as MaterialSlice;
Function MaterialSlice_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is MaterialSlice;
Widget _MaterialSlice_child$(MaterialSlice target) {
  return target.child;
}

Color? _MaterialSlice_color$(MaterialSlice target) {
  return target.color;
}

Function _MaterialSlice_toString$(
  m.Scope scope,
  MaterialSlice target,
) =>
    target.toString;
Function MaterialGap_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as MaterialGap;
Function MaterialGap_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is MaterialGap;
double _MaterialGap_size$(MaterialGap target) {
  return target.size;
}

Function _MaterialGap_toString$(
  m.Scope scope,
  MaterialGap target,
) =>
    target.toString;
Function MergeableMaterial_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as MergeableMaterial;
Function MergeableMaterial_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is MergeableMaterial;
List<MergeableMaterialItem> _MergeableMaterial_children$(
    MergeableMaterial target) {
  return target.children;
}

Axis _MergeableMaterial_mainAxis$(MergeableMaterial target) {
  return target.mainAxis;
}

double _MergeableMaterial_elevation$(MergeableMaterial target) {
  return target.elevation;
}

bool _MergeableMaterial_hasDividers$(MergeableMaterial target) {
  return target.hasDividers;
}

Color? _MergeableMaterial_dividerColor$(MergeableMaterial target) {
  return target.dividerColor;
}

Function _MergeableMaterial_debugFillProperties$(
  m.Scope scope,
  MergeableMaterial target,
) =>
    target.debugFillProperties;
Function _MergeableMaterial_createState$(
  m.Scope scope,
  MergeableMaterial target,
) =>
    target.createState;
