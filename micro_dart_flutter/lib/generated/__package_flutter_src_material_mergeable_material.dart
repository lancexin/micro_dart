// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/mergeable_material.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/divider.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/mergeable_material.dart',
  {
    'MaterialSlice.': _MaterialSlice__$,
    'MaterialGap.': _MaterialGap__$,
    'MergeableMaterial.': _MergeableMaterial__$,
  },
  {},
  {
    'MergeableMaterialItem': m.ClassMirror(
      'MergeableMaterialItem',
      {
        '#as': MergeableMaterialItem_as$,
        '#is': MergeableMaterialItem_is$,
        'key': _MergeableMaterialItem_key$,
      },
      {},
    ),
    'MaterialSlice': m.ClassMirror(
      'MaterialSlice',
      {
        '#as': MaterialSlice_as$,
        '#is': MaterialSlice_is$,
        'child': _MaterialSlice_child$,
        'color': _MaterialSlice_color$,
        'toString': _MaterialSlice_toString$,
      },
      {},
    ),
    'MaterialGap': m.ClassMirror(
      'MaterialGap',
      {
        '#as': MaterialGap_as$,
        '#is': MaterialGap_is$,
        'size': _MaterialGap_size$,
        'toString': _MaterialGap_toString$,
      },
      {},
    ),
    'MergeableMaterial': m.ClassMirror(
      'MergeableMaterial',
      {
        '#as': MergeableMaterial_as$,
        '#is': MergeableMaterial_is$,
        'children': _MergeableMaterial_children$,
        'mainAxis': _MergeableMaterial_mainAxis$,
        'elevation': _MergeableMaterial_elevation$,
        'hasDividers': _MergeableMaterial_hasDividers$,
        'dividerColor': _MergeableMaterial_dividerColor$,
        'debugFillProperties': _MergeableMaterial_debugFillProperties$,
        'createState': _MergeableMaterial_createState$,
      },
      {},
    ),
  },
);
Function MergeableMaterialItem_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MergeableMaterialItem;
Function MergeableMaterialItem_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MergeableMaterialItem;
Function _MergeableMaterialItem_key$(
  m.Scope scope$,
  MergeableMaterialItem target$,
) =>
    () {
      return target$.key;
    };
Function MaterialSlice_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MaterialSlice;
Function MaterialSlice_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MaterialSlice;
Function _MaterialSlice_child$(
  m.Scope scope$,
  MaterialSlice target$,
) =>
    () {
      return target$.child;
    };
Function _MaterialSlice_color$(
  m.Scope scope$,
  MaterialSlice target$,
) =>
    () {
      return target$.color;
    };
Function _MaterialSlice__$(m.Scope scope$) => ({
      required LocalKey key,
      required Widget child,
      Color? color,
    }) {
      return MaterialSlice(
        child: child,
        color: color,
        key: key,
      );
    };
Function _MaterialSlice_toString$(
  m.Scope scope$,
  MaterialSlice target$,
) =>
    target$.toString;
Function MaterialGap_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MaterialGap;
Function MaterialGap_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MaterialGap;
Function _MaterialGap_size$(
  m.Scope scope$,
  MaterialGap target$,
) =>
    () {
      return target$.size;
    };
Function _MaterialGap__$(m.Scope scope$) => ({
      required LocalKey key,
      double? size,
    }) {
      return MaterialGap(
        key: key,
        size: size ?? 16.0,
      );
    };
Function _MaterialGap_toString$(
  m.Scope scope$,
  MaterialGap target$,
) =>
    target$.toString;
Function MergeableMaterial_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MergeableMaterial;
Function MergeableMaterial_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MergeableMaterial;
Function _MergeableMaterial_children$(
  m.Scope scope$,
  MergeableMaterial target$,
) =>
    () {
      return target$.children;
    };
Function _MergeableMaterial_mainAxis$(
  m.Scope scope$,
  MergeableMaterial target$,
) =>
    () {
      return target$.mainAxis;
    };
Function _MergeableMaterial_elevation$(
  m.Scope scope$,
  MergeableMaterial target$,
) =>
    () {
      return target$.elevation;
    };
Function _MergeableMaterial_hasDividers$(
  m.Scope scope$,
  MergeableMaterial target$,
) =>
    () {
      return target$.hasDividers;
    };
Function _MergeableMaterial_dividerColor$(
  m.Scope scope$,
  MergeableMaterial target$,
) =>
    () {
      return target$.dividerColor;
    };
Function _MergeableMaterial__$(m.Scope scope$) => ({
      Key? key,
      Axis? mainAxis,
      double? elevation,
      bool? hasDividers,
      List? children,
      Color? dividerColor,
    }) {
      return MergeableMaterial(
        children: children == null
            ? const <MergeableMaterialItem>[]
            : List.from(children),
        dividerColor: dividerColor,
        elevation: elevation ?? 2,
        hasDividers: hasDividers ?? false,
        key: key,
        mainAxis: mainAxis ?? Axis.vertical,
      );
    };
Function _MergeableMaterial_debugFillProperties$(
  m.Scope scope$,
  MergeableMaterial target$,
) =>
    target$.debugFillProperties;
Function _MergeableMaterial_createState$(
  m.Scope scope$,
  MergeableMaterial target$,
) =>
    target$.createState;
