// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/shortcuts.dart';
import 'dart:collection';
import 'package:flutter/foundation.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/actions.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/focus_scope.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/platform_menu_bar.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/shortcuts.dart',
  {
    'KeySet.': _KeySet__$,
    'KeySet.fromSet': _KeySet_fromSet_$,
    'ShortcutActivator.isActivatedBy': _ShortcutActivator_isActivatedBy$,
    'LogicalKeySet.': _LogicalKeySet__$,
    'LogicalKeySet.fromSet': _LogicalKeySet_fromSet_$,
    'ShortcutMapProperty.': _ShortcutMapProperty__$,
    'SingleActivator.': _SingleActivator__$,
    'CharacterActivator.': _CharacterActivator__$,
    'ShortcutManager.': _ShortcutManager__$,
    'Shortcuts.': _Shortcuts__$,
    'Shortcuts.manager': _Shortcuts_manager_$,
    'CallbackShortcuts.': _CallbackShortcuts__$,
    'ShortcutRegistry.': _ShortcutRegistry__$,
    'ShortcutRegistry.of': _ShortcutRegistry_of$,
    'ShortcutRegistry.maybeOf': _ShortcutRegistry_maybeOf$,
    'ShortcutRegistrar.': _ShortcutRegistrar__$,
  },
  {},
  {
    'KeySet': m.ClassMirror(
      'KeySet',
      {
        '#as': KeySet_as$,
        '#is': KeySet_is$,
        'hashCode': _KeySet_hashCode$,
        'keys': _KeySet_keys$,
        '==': _KeySet_eq$$,
      },
      {},
    ),
    'ShortcutActivator': m.ClassMirror(
      'ShortcutActivator',
      {
        '#as': ShortcutActivator_as$,
        '#is': ShortcutActivator_is$,
        'triggers': _ShortcutActivator_triggers$,
        'accepts': _ShortcutActivator_accepts$,
        'debugDescribeKeys': _ShortcutActivator_debugDescribeKeys$,
      },
      {},
    ),
    'LogicalKeySet': m.ClassMirror(
      'LogicalKeySet',
      {
        '#as': LogicalKeySet_as$,
        '#is': LogicalKeySet_is$,
        'triggers': _LogicalKeySet_triggers$,
        'accepts': _LogicalKeySet_accepts$,
        'debugDescribeKeys': _LogicalKeySet_debugDescribeKeys$,
        'debugFillProperties': _LogicalKeySet_debugFillProperties$,
      },
      {},
    ),
    'ShortcutMapProperty': m.ClassMirror(
      'ShortcutMapProperty',
      {
        '#as': ShortcutMapProperty_as$,
        '#is': ShortcutMapProperty_is$,
        'value': _ShortcutMapProperty_value$,
        'valueToString': _ShortcutMapProperty_valueToString$,
      },
      {},
    ),
    'SingleActivator': m.ClassMirror(
      'SingleActivator',
      {
        '#as': SingleActivator_as$,
        '#is': SingleActivator_is$,
        'trigger': _SingleActivator_trigger$,
        'control': _SingleActivator_control$,
        'shift': _SingleActivator_shift$,
        'alt': _SingleActivator_alt$,
        'meta': _SingleActivator_meta$,
        'includeRepeats': _SingleActivator_includeRepeats$,
        'triggers': _SingleActivator_triggers$,
        'accepts': _SingleActivator_accepts$,
        'serializeForMenu': _SingleActivator_serializeForMenu$,
        'debugDescribeKeys': _SingleActivator_debugDescribeKeys$,
        'debugFillProperties': _SingleActivator_debugFillProperties$,
      },
      {},
    ),
    'CharacterActivator': m.ClassMirror(
      'CharacterActivator',
      {
        '#as': CharacterActivator_as$,
        '#is': CharacterActivator_is$,
        'alt': _CharacterActivator_alt$,
        'control': _CharacterActivator_control$,
        'meta': _CharacterActivator_meta$,
        'includeRepeats': _CharacterActivator_includeRepeats$,
        'character': _CharacterActivator_character$,
        'triggers': _CharacterActivator_triggers$,
        'accepts': _CharacterActivator_accepts$,
        'debugDescribeKeys': _CharacterActivator_debugDescribeKeys$,
        'serializeForMenu': _CharacterActivator_serializeForMenu$,
        'debugFillProperties': _CharacterActivator_debugFillProperties$,
      },
      {},
    ),
    'ShortcutManager': m.ClassMirror(
      'ShortcutManager',
      {
        '#as': ShortcutManager_as$,
        '#is': ShortcutManager_is$,
        'modal': _ShortcutManager_modal$,
        'shortcuts': _ShortcutManager_shortcuts$,
        'handleKeypress': _ShortcutManager_handleKeypress$,
        'debugFillProperties': _ShortcutManager_debugFillProperties$,
      },
      {'shortcuts': _ShortcutManager_shortcuts_set$},
    ),
    'Shortcuts': m.ClassMirror(
      'Shortcuts',
      {
        '#as': Shortcuts_as$,
        '#is': Shortcuts_is$,
        'manager': _Shortcuts_manager$,
        'child': _Shortcuts_child$,
        'debugLabel': _Shortcuts_debugLabel$,
        'shortcuts': _Shortcuts_shortcuts$,
        'createState': _Shortcuts_createState$,
        'debugFillProperties': _Shortcuts_debugFillProperties$,
      },
      {},
    ),
    'CallbackShortcuts': m.ClassMirror(
      'CallbackShortcuts',
      {
        '#as': CallbackShortcuts_as$,
        '#is': CallbackShortcuts_is$,
        'bindings': _CallbackShortcuts_bindings$,
        'child': _CallbackShortcuts_child$,
        'build': _CallbackShortcuts_build$,
      },
      {},
    ),
    'ShortcutRegistryEntry': m.ClassMirror(
      'ShortcutRegistryEntry',
      {
        '#as': ShortcutRegistryEntry_as$,
        '#is': ShortcutRegistryEntry_is$,
        'registry': _ShortcutRegistryEntry_registry$,
        'replaceAll': _ShortcutRegistryEntry_replaceAll$,
        'dispose': _ShortcutRegistryEntry_dispose$,
      },
      {},
    ),
    'ShortcutRegistry': m.ClassMirror(
      'ShortcutRegistry',
      {
        '#as': ShortcutRegistry_as$,
        '#is': ShortcutRegistry_is$,
        'shortcuts': _ShortcutRegistry_shortcuts$,
        'dispose': _ShortcutRegistry_dispose$,
        'addAll': _ShortcutRegistry_addAll$,
      },
      {},
    ),
    'ShortcutRegistrar': m.ClassMirror(
      'ShortcutRegistrar',
      {
        '#as': ShortcutRegistrar_as$,
        '#is': ShortcutRegistrar_is$,
        'child': _ShortcutRegistrar_child$,
        'createState': _ShortcutRegistrar_createState$,
      },
      {},
    ),
  },
);
Function KeySet_as$<T extends KeyboardKey>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as KeySet<T>;
Function KeySet_is$<T extends KeyboardKey>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is KeySet<T>;
Function _KeySet_hashCode$<T extends KeyboardKey>(
  m.Scope scope$,
  KeySet<T> target$,
) =>
    () {
      return target$.hashCode;
    };
Function _KeySet_keys$<T extends KeyboardKey>(
  m.Scope scope$,
  KeySet<T> target$,
) =>
    () {
      return target$.keys;
    };
Function _KeySet__$(m.Scope scope$) => <T extends KeyboardKey>(
      dynamic key1, [
      dynamic? key2,
      dynamic? key3,
      dynamic? key4,
    ]) {
      if (key2 == null && key3 == null && key4 == null) {
        return KeySet<T>(key1);
      }
      if (key3 == null && key4 == null) {
        return KeySet<T>(
          key1,
          key2!,
        );
      }
      if (key4 == null) {
        return KeySet<T>(
          key1,
          key2!,
          key3!,
        );
      }
      return KeySet<T>(
        key1,
        key2!,
        key3!,
        key4!,
      );
    };
Function _KeySet_fromSet_$(m.Scope scope$) => KeySet.fromSet;
Function _KeySet_eq$$<T extends KeyboardKey>(
  m.Scope scope$,
  KeySet<T> target$,
) =>
    (Object other$) => target$ == other$;
Function ShortcutActivator_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ShortcutActivator;
Function ShortcutActivator_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ShortcutActivator;
Function _ShortcutActivator_triggers$(
  m.Scope scope$,
  ShortcutActivator target$,
) =>
    () {
      return target$.triggers;
    };
Function _ShortcutActivator_accepts$(
  m.Scope scope$,
  ShortcutActivator target$,
) =>
    target$.accepts;
Function _ShortcutActivator_isActivatedBy$(m.Scope scope$) =>
    ShortcutActivator.isActivatedBy;
Function _ShortcutActivator_debugDescribeKeys$(
  m.Scope scope$,
  ShortcutActivator target$,
) =>
    target$.debugDescribeKeys;
Function LogicalKeySet_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as LogicalKeySet;
Function LogicalKeySet_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is LogicalKeySet;
Function _LogicalKeySet_triggers$(
  m.Scope scope$,
  LogicalKeySet target$,
) =>
    () {
      return target$.triggers;
    };
Function _LogicalKeySet__$(m.Scope scope$) => (
      LogicalKeyboardKey key1, [
      LogicalKeyboardKey? key2,
      LogicalKeyboardKey? key3,
      LogicalKeyboardKey? key4,
    ]) {
      if (key2 == null && key3 == null && key4 == null) {
        return LogicalKeySet(key1);
      }
      if (key3 == null && key4 == null) {
        return LogicalKeySet(
          key1,
          key2!,
        );
      }
      if (key4 == null) {
        return LogicalKeySet(
          key1,
          key2!,
          key3!,
        );
      }
      return LogicalKeySet(
        key1,
        key2!,
        key3!,
        key4!,
      );
    };
Function _LogicalKeySet_fromSet_$(m.Scope scope$) => LogicalKeySet.fromSet;
Function _LogicalKeySet_accepts$(
  m.Scope scope$,
  LogicalKeySet target$,
) =>
    target$.accepts;
Function _LogicalKeySet_debugDescribeKeys$(
  m.Scope scope$,
  LogicalKeySet target$,
) =>
    target$.debugDescribeKeys;
Function _LogicalKeySet_debugFillProperties$(
  m.Scope scope$,
  LogicalKeySet target$,
) =>
    target$.debugFillProperties;
Function ShortcutMapProperty_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ShortcutMapProperty;
Function ShortcutMapProperty_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ShortcutMapProperty;
Function _ShortcutMapProperty_value$(
  m.Scope scope$,
  ShortcutMapProperty target$,
) =>
    () {
      return target$.value;
    };
Function _ShortcutMapProperty__$(m.Scope scope$) => (
      String name,
      Map value, {
      bool? showName,
      Object? defaultValue,
      DiagnosticLevel? level,
      String? description,
    }) {
      return ShortcutMapProperty(
        name,
        Map.from(value),
        defaultValue: defaultValue ?? kNoDefaultValue,
        description: description,
        level: level ?? DiagnosticLevel.info,
        showName: showName ?? true,
      );
    };
Function _ShortcutMapProperty_valueToString$(
  m.Scope scope$,
  ShortcutMapProperty target$,
) =>
    target$.valueToString;
Function SingleActivator_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SingleActivator;
Function SingleActivator_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SingleActivator;
Function _SingleActivator_trigger$(
  m.Scope scope$,
  SingleActivator target$,
) =>
    () {
      return target$.trigger;
    };
Function _SingleActivator_control$(
  m.Scope scope$,
  SingleActivator target$,
) =>
    () {
      return target$.control;
    };
Function _SingleActivator_shift$(
  m.Scope scope$,
  SingleActivator target$,
) =>
    () {
      return target$.shift;
    };
Function _SingleActivator_alt$(
  m.Scope scope$,
  SingleActivator target$,
) =>
    () {
      return target$.alt;
    };
Function _SingleActivator_meta$(
  m.Scope scope$,
  SingleActivator target$,
) =>
    () {
      return target$.meta;
    };
Function _SingleActivator_includeRepeats$(
  m.Scope scope$,
  SingleActivator target$,
) =>
    () {
      return target$.includeRepeats;
    };
Function _SingleActivator_triggers$(
  m.Scope scope$,
  SingleActivator target$,
) =>
    () {
      return target$.triggers;
    };
Function _SingleActivator__$(m.Scope scope$) => (
      LogicalKeyboardKey trigger, {
      bool? control,
      bool? shift,
      bool? alt,
      bool? meta,
      bool? includeRepeats,
    }) {
      return SingleActivator(
        trigger,
        alt: alt ?? false,
        control: control ?? false,
        includeRepeats: includeRepeats ?? true,
        meta: meta ?? false,
        shift: shift ?? false,
      );
    };
Function _SingleActivator_accepts$(
  m.Scope scope$,
  SingleActivator target$,
) =>
    target$.accepts;
Function _SingleActivator_serializeForMenu$(
  m.Scope scope$,
  SingleActivator target$,
) =>
    target$.serializeForMenu;
Function _SingleActivator_debugDescribeKeys$(
  m.Scope scope$,
  SingleActivator target$,
) =>
    target$.debugDescribeKeys;
Function _SingleActivator_debugFillProperties$(
  m.Scope scope$,
  SingleActivator target$,
) =>
    target$.debugFillProperties;
Function CharacterActivator_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CharacterActivator;
Function CharacterActivator_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CharacterActivator;
Function _CharacterActivator_alt$(
  m.Scope scope$,
  CharacterActivator target$,
) =>
    () {
      return target$.alt;
    };
Function _CharacterActivator_control$(
  m.Scope scope$,
  CharacterActivator target$,
) =>
    () {
      return target$.control;
    };
Function _CharacterActivator_meta$(
  m.Scope scope$,
  CharacterActivator target$,
) =>
    () {
      return target$.meta;
    };
Function _CharacterActivator_includeRepeats$(
  m.Scope scope$,
  CharacterActivator target$,
) =>
    () {
      return target$.includeRepeats;
    };
Function _CharacterActivator_character$(
  m.Scope scope$,
  CharacterActivator target$,
) =>
    () {
      return target$.character;
    };
Function _CharacterActivator_triggers$(
  m.Scope scope$,
  CharacterActivator target$,
) =>
    () {
      return target$.triggers;
    };
Function _CharacterActivator__$(m.Scope scope$) => (
      String character, {
      bool? alt,
      bool? control,
      bool? meta,
      bool? includeRepeats,
    }) {
      return CharacterActivator(
        character,
        alt: alt ?? false,
        control: control ?? false,
        includeRepeats: includeRepeats ?? true,
        meta: meta ?? false,
      );
    };
Function _CharacterActivator_accepts$(
  m.Scope scope$,
  CharacterActivator target$,
) =>
    target$.accepts;
Function _CharacterActivator_debugDescribeKeys$(
  m.Scope scope$,
  CharacterActivator target$,
) =>
    target$.debugDescribeKeys;
Function _CharacterActivator_serializeForMenu$(
  m.Scope scope$,
  CharacterActivator target$,
) =>
    target$.serializeForMenu;
Function _CharacterActivator_debugFillProperties$(
  m.Scope scope$,
  CharacterActivator target$,
) =>
    target$.debugFillProperties;
Function ShortcutManager_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ShortcutManager;
Function ShortcutManager_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ShortcutManager;
Function _ShortcutManager_modal$(
  m.Scope scope$,
  ShortcutManager target$,
) =>
    () {
      return target$.modal;
    };
Function _ShortcutManager_shortcuts$(
  m.Scope scope$,
  ShortcutManager target$,
) =>
    () {
      return target$.shortcuts;
    };
void _ShortcutManager_shortcuts_set$(
  m.Scope scope$,
  ShortcutManager target$,
) =>
    (dynamic other$) {
      target$.shortcuts = other$;
    };
Function _ShortcutManager__$(m.Scope scope$) => ({
      Map? shortcuts,
      bool? modal,
    }) {
      return ShortcutManager(
        modal: modal ?? false,
        shortcuts: shortcuts == null
            ? const <ShortcutActivator, Intent>{}
            : Map.from(shortcuts),
      );
    };
Function _ShortcutManager_handleKeypress$(
  m.Scope scope$,
  ShortcutManager target$,
) =>
    target$.handleKeypress;
Function _ShortcutManager_debugFillProperties$(
  m.Scope scope$,
  ShortcutManager target$,
) =>
    target$.debugFillProperties;
Function Shortcuts_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Shortcuts;
Function Shortcuts_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Shortcuts;
Function _Shortcuts_manager$(
  m.Scope scope$,
  Shortcuts target$,
) =>
    () {
      return target$.manager;
    };
Function _Shortcuts_child$(
  m.Scope scope$,
  Shortcuts target$,
) =>
    () {
      return target$.child;
    };
Function _Shortcuts_debugLabel$(
  m.Scope scope$,
  Shortcuts target$,
) =>
    () {
      return target$.debugLabel;
    };
Function _Shortcuts_shortcuts$(
  m.Scope scope$,
  Shortcuts target$,
) =>
    () {
      return target$.shortcuts;
    };
Function _Shortcuts__$(m.Scope scope$) => ({
      Key? key,
      required Map shortcuts,
      required Widget child,
      String? debugLabel,
    }) {
      return Shortcuts(
        child: child,
        debugLabel: debugLabel,
        key: key,
        shortcuts: Map.from(shortcuts),
      );
    };
Function _Shortcuts_manager_$(m.Scope scope$) => Shortcuts.manager;
Function _Shortcuts_createState$(
  m.Scope scope$,
  Shortcuts target$,
) =>
    target$.createState;
Function _Shortcuts_debugFillProperties$(
  m.Scope scope$,
  Shortcuts target$,
) =>
    target$.debugFillProperties;
Function CallbackShortcuts_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CallbackShortcuts;
Function CallbackShortcuts_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CallbackShortcuts;
Function _CallbackShortcuts_bindings$(
  m.Scope scope$,
  CallbackShortcuts target$,
) =>
    () {
      return target$.bindings;
    };
Function _CallbackShortcuts_child$(
  m.Scope scope$,
  CallbackShortcuts target$,
) =>
    () {
      return target$.child;
    };
Function _CallbackShortcuts__$(m.Scope scope$) => ({
      Key? key,
      required Map bindings,
      required Widget child,
    }) {
      return CallbackShortcuts(
        bindings: Map.from(bindings),
        child: child,
        key: key,
      );
    };
Function _CallbackShortcuts_build$(
  m.Scope scope$,
  CallbackShortcuts target$,
) =>
    target$.build;
Function ShortcutRegistryEntry_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ShortcutRegistryEntry;
Function ShortcutRegistryEntry_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ShortcutRegistryEntry;
Function _ShortcutRegistryEntry_registry$(
  m.Scope scope$,
  ShortcutRegistryEntry target$,
) =>
    () {
      return target$.registry;
    };
Function _ShortcutRegistryEntry_replaceAll$(
  m.Scope scope$,
  ShortcutRegistryEntry target$,
) =>
    target$.replaceAll;
Function _ShortcutRegistryEntry_dispose$(
  m.Scope scope$,
  ShortcutRegistryEntry target$,
) =>
    target$.dispose;
Function ShortcutRegistry_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ShortcutRegistry;
Function ShortcutRegistry_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ShortcutRegistry;
Function _ShortcutRegistry_shortcuts$(
  m.Scope scope$,
  ShortcutRegistry target$,
) =>
    () {
      return target$.shortcuts;
    };
Function _ShortcutRegistry__$(m.Scope scope$) => () {
      return ShortcutRegistry();
    };
Function _ShortcutRegistry_dispose$(
  m.Scope scope$,
  ShortcutRegistry target$,
) =>
    target$.dispose;
Function _ShortcutRegistry_addAll$(
  m.Scope scope$,
  ShortcutRegistry target$,
) =>
    target$.addAll;
Function _ShortcutRegistry_of$(m.Scope scope$) => ShortcutRegistry.of;
Function _ShortcutRegistry_maybeOf$(m.Scope scope$) => ShortcutRegistry.maybeOf;
Function ShortcutRegistrar_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ShortcutRegistrar;
Function ShortcutRegistrar_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ShortcutRegistrar;
Function _ShortcutRegistrar_child$(
  m.Scope scope$,
  ShortcutRegistrar target$,
) =>
    () {
      return target$.child;
    };
Function _ShortcutRegistrar__$(m.Scope scope$) => ({
      Key? key,
      required Widget child,
    }) {
      return ShortcutRegistrar(
        child: child,
        key: key,
      );
    };
Function _ShortcutRegistrar_createState$(
  m.Scope scope$,
  ShortcutRegistrar target$,
) =>
    target$.createState;
