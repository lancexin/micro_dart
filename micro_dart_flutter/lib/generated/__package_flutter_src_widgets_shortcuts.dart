// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/shortcuts.dart';
import 'dart:collection';
import 'package:flutter/foundation.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/actions.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/focus_scope.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/platform_menu_bar.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/shortcuts.dart',
  {
    'ShortcutActivator.isActivatedBy': _ShortcutActivator_isActivatedBy$,
    'ShortcutRegistry.of': _ShortcutRegistry_of$,
    'ShortcutRegistry.maybeOf': _ShortcutRegistry_maybeOf$,
  },
  {},
  {
    'KeySet': m.ClassMirror(
      'KeySet',
      {
        '#as': KeySet_as$,
        '#is': KeySet_is$,
        'hashCode': _KeySet_hashCode$,
        'keys': _KeySet_keys$,
        '==': _KeySet_eq$$,
      },
      {},
    ),
    'ShortcutActivator': m.ClassMirror(
      'ShortcutActivator',
      {
        '#as': ShortcutActivator_as$,
        '#is': ShortcutActivator_is$,
        'triggers': _ShortcutActivator_triggers$,
        'accepts': _ShortcutActivator_accepts$,
        'debugDescribeKeys': _ShortcutActivator_debugDescribeKeys$,
      },
      {},
    ),
    'LogicalKeySet': m.ClassMirror(
      'LogicalKeySet',
      {
        '#as': LogicalKeySet_as$,
        '#is': LogicalKeySet_is$,
        'triggers': _LogicalKeySet_triggers$,
        'accepts': _LogicalKeySet_accepts$,
        'debugDescribeKeys': _LogicalKeySet_debugDescribeKeys$,
        'debugFillProperties': _LogicalKeySet_debugFillProperties$,
      },
      {},
    ),
    'ShortcutMapProperty': m.ClassMirror(
      'ShortcutMapProperty',
      {
        '#as': ShortcutMapProperty_as$,
        '#is': ShortcutMapProperty_is$,
        'value': _ShortcutMapProperty_value$,
        'valueToString': _ShortcutMapProperty_valueToString$,
      },
      {},
    ),
    'SingleActivator': m.ClassMirror(
      'SingleActivator',
      {
        '#as': SingleActivator_as$,
        '#is': SingleActivator_is$,
        'trigger': _SingleActivator_trigger$,
        'control': _SingleActivator_control$,
        'shift': _SingleActivator_shift$,
        'alt': _SingleActivator_alt$,
        'meta': _SingleActivator_meta$,
        'includeRepeats': _SingleActivator_includeRepeats$,
        'triggers': _SingleActivator_triggers$,
        'accepts': _SingleActivator_accepts$,
        'serializeForMenu': _SingleActivator_serializeForMenu$,
        'debugDescribeKeys': _SingleActivator_debugDescribeKeys$,
        'debugFillProperties': _SingleActivator_debugFillProperties$,
      },
      {},
    ),
    'CharacterActivator': m.ClassMirror(
      'CharacterActivator',
      {
        '#as': CharacterActivator_as$,
        '#is': CharacterActivator_is$,
        'alt': _CharacterActivator_alt$,
        'control': _CharacterActivator_control$,
        'meta': _CharacterActivator_meta$,
        'includeRepeats': _CharacterActivator_includeRepeats$,
        'character': _CharacterActivator_character$,
        'triggers': _CharacterActivator_triggers$,
        'accepts': _CharacterActivator_accepts$,
        'debugDescribeKeys': _CharacterActivator_debugDescribeKeys$,
        'serializeForMenu': _CharacterActivator_serializeForMenu$,
        'debugFillProperties': _CharacterActivator_debugFillProperties$,
      },
      {},
    ),
    'ShortcutManager': m.ClassMirror(
      'ShortcutManager',
      {
        '#as': ShortcutManager_as$,
        '#is': ShortcutManager_is$,
        'modal': _ShortcutManager_modal$,
        'shortcuts': _ShortcutManager_shortcuts$,
        'handleKeypress': _ShortcutManager_handleKeypress$,
        'debugFillProperties': _ShortcutManager_debugFillProperties$,
      },
      {'shortcuts': _ShortcutManager_shortcuts_set$},
    ),
    'Shortcuts': m.ClassMirror(
      'Shortcuts',
      {
        '#as': Shortcuts_as$,
        '#is': Shortcuts_is$,
        'manager': _Shortcuts_manager$,
        'child': _Shortcuts_child$,
        'debugLabel': _Shortcuts_debugLabel$,
        'shortcuts': _Shortcuts_shortcuts$,
        'createState': _Shortcuts_createState$,
        'debugFillProperties': _Shortcuts_debugFillProperties$,
      },
      {},
    ),
    'CallbackShortcuts': m.ClassMirror(
      'CallbackShortcuts',
      {
        '#as': CallbackShortcuts_as$,
        '#is': CallbackShortcuts_is$,
        'bindings': _CallbackShortcuts_bindings$,
        'child': _CallbackShortcuts_child$,
        'build': _CallbackShortcuts_build$,
      },
      {},
    ),
    'ShortcutRegistryEntry': m.ClassMirror(
      'ShortcutRegistryEntry',
      {
        '#as': ShortcutRegistryEntry_as$,
        '#is': ShortcutRegistryEntry_is$,
        'registry': _ShortcutRegistryEntry_registry$,
        'replaceAll': _ShortcutRegistryEntry_replaceAll$,
        'dispose': _ShortcutRegistryEntry_dispose$,
      },
      {},
    ),
    'ShortcutRegistry': m.ClassMirror(
      'ShortcutRegistry',
      {
        '#as': ShortcutRegistry_as$,
        '#is': ShortcutRegistry_is$,
        'shortcuts': _ShortcutRegistry_shortcuts$,
        'dispose': _ShortcutRegistry_dispose$,
        'addAll': _ShortcutRegistry_addAll$,
      },
      {},
    ),
    'ShortcutRegistrar': m.ClassMirror(
      'ShortcutRegistrar',
      {
        '#as': ShortcutRegistrar_as$,
        '#is': ShortcutRegistrar_is$,
        'child': _ShortcutRegistrar_child$,
        'createState': _ShortcutRegistrar_createState$,
      },
      {},
    ),
  },
);
Function KeySet_as$<T extends KeyboardKey>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as KeySet<T>;
Function KeySet_is$<T extends KeyboardKey>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is KeySet<T>;
int _KeySet_hashCode$<T extends KeyboardKey>(KeySet<T> target) {
  return target.hashCode;
}

Set<T> _KeySet_keys$<T extends KeyboardKey>(KeySet<T> target) {
  return target.keys;
}

Function _KeySet_eq$$<T extends KeyboardKey>(
  m.Scope scope,
  KeySet<T> target,
) =>
    (Object other) => target == other;
Function ShortcutActivator_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ShortcutActivator;
Function ShortcutActivator_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ShortcutActivator;
Iterable<LogicalKeyboardKey>? _ShortcutActivator_triggers$(
    ShortcutActivator target) {
  return target.triggers;
}

Function _ShortcutActivator_accepts$(
  m.Scope scope,
  ShortcutActivator target,
) =>
    target.accepts;
Function _ShortcutActivator_isActivatedBy$(m.Scope scope) =>
    ShortcutActivator.isActivatedBy;
Function _ShortcutActivator_debugDescribeKeys$(
  m.Scope scope,
  ShortcutActivator target,
) =>
    target.debugDescribeKeys;
Function LogicalKeySet_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as LogicalKeySet;
Function LogicalKeySet_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is LogicalKeySet;
Iterable<LogicalKeyboardKey> _LogicalKeySet_triggers$(LogicalKeySet target) {
  return target.triggers;
}

Function _LogicalKeySet_accepts$(
  m.Scope scope,
  LogicalKeySet target,
) =>
    target.accepts;
Function _LogicalKeySet_debugDescribeKeys$(
  m.Scope scope,
  LogicalKeySet target,
) =>
    target.debugDescribeKeys;
Function _LogicalKeySet_debugFillProperties$(
  m.Scope scope,
  LogicalKeySet target,
) =>
    target.debugFillProperties;
Function ShortcutMapProperty_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ShortcutMapProperty;
Function ShortcutMapProperty_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ShortcutMapProperty;
Map<ShortcutActivator, Intent> _ShortcutMapProperty_value$(
    ShortcutMapProperty target) {
  return target.value;
}

Function _ShortcutMapProperty_valueToString$(
  m.Scope scope,
  ShortcutMapProperty target,
) =>
    target.valueToString;
Function SingleActivator_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SingleActivator;
Function SingleActivator_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SingleActivator;
LogicalKeyboardKey _SingleActivator_trigger$(SingleActivator target) {
  return target.trigger;
}

bool _SingleActivator_control$(SingleActivator target) {
  return target.control;
}

bool _SingleActivator_shift$(SingleActivator target) {
  return target.shift;
}

bool _SingleActivator_alt$(SingleActivator target) {
  return target.alt;
}

bool _SingleActivator_meta$(SingleActivator target) {
  return target.meta;
}

bool _SingleActivator_includeRepeats$(SingleActivator target) {
  return target.includeRepeats;
}

Iterable<LogicalKeyboardKey> _SingleActivator_triggers$(
    SingleActivator target) {
  return target.triggers;
}

Function _SingleActivator_accepts$(
  m.Scope scope,
  SingleActivator target,
) =>
    target.accepts;
Function _SingleActivator_serializeForMenu$(
  m.Scope scope,
  SingleActivator target,
) =>
    target.serializeForMenu;
Function _SingleActivator_debugDescribeKeys$(
  m.Scope scope,
  SingleActivator target,
) =>
    target.debugDescribeKeys;
Function _SingleActivator_debugFillProperties$(
  m.Scope scope,
  SingleActivator target,
) =>
    target.debugFillProperties;
Function CharacterActivator_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CharacterActivator;
Function CharacterActivator_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CharacterActivator;
bool _CharacterActivator_alt$(CharacterActivator target) {
  return target.alt;
}

bool _CharacterActivator_control$(CharacterActivator target) {
  return target.control;
}

bool _CharacterActivator_meta$(CharacterActivator target) {
  return target.meta;
}

bool _CharacterActivator_includeRepeats$(CharacterActivator target) {
  return target.includeRepeats;
}

String _CharacterActivator_character$(CharacterActivator target) {
  return target.character;
}

Iterable<LogicalKeyboardKey>? _CharacterActivator_triggers$(
    CharacterActivator target) {
  return target.triggers;
}

Function _CharacterActivator_accepts$(
  m.Scope scope,
  CharacterActivator target,
) =>
    target.accepts;
Function _CharacterActivator_debugDescribeKeys$(
  m.Scope scope,
  CharacterActivator target,
) =>
    target.debugDescribeKeys;
Function _CharacterActivator_serializeForMenu$(
  m.Scope scope,
  CharacterActivator target,
) =>
    target.serializeForMenu;
Function _CharacterActivator_debugFillProperties$(
  m.Scope scope,
  CharacterActivator target,
) =>
    target.debugFillProperties;
Function ShortcutManager_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ShortcutManager;
Function ShortcutManager_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ShortcutManager;
bool _ShortcutManager_modal$(ShortcutManager target) {
  return target.modal;
}

Map<ShortcutActivator, Intent> _ShortcutManager_shortcuts$(
    ShortcutManager target) {
  return target.shortcuts;
}

void _ShortcutManager_shortcuts_set$(
  ShortcutManager target,
  Map<ShortcutActivator, Intent> other,
) {
  target.shortcuts = other;
}

Function _ShortcutManager_handleKeypress$(
  m.Scope scope,
  ShortcutManager target,
) =>
    target.handleKeypress;
Function _ShortcutManager_debugFillProperties$(
  m.Scope scope,
  ShortcutManager target,
) =>
    target.debugFillProperties;
Function Shortcuts_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Shortcuts;
Function Shortcuts_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Shortcuts;
ShortcutManager? _Shortcuts_manager$(Shortcuts target) {
  return target.manager;
}

Widget _Shortcuts_child$(Shortcuts target) {
  return target.child;
}

String? _Shortcuts_debugLabel$(Shortcuts target) {
  return target.debugLabel;
}

Map<ShortcutActivator, Intent> _Shortcuts_shortcuts$(Shortcuts target) {
  return target.shortcuts;
}

Function _Shortcuts_createState$(
  m.Scope scope,
  Shortcuts target,
) =>
    target.createState;
Function _Shortcuts_debugFillProperties$(
  m.Scope scope,
  Shortcuts target,
) =>
    target.debugFillProperties;
Function CallbackShortcuts_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CallbackShortcuts;
Function CallbackShortcuts_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CallbackShortcuts;
Map<ShortcutActivator, void Function()> _CallbackShortcuts_bindings$(
    CallbackShortcuts target) {
  return target.bindings;
}

Widget _CallbackShortcuts_child$(CallbackShortcuts target) {
  return target.child;
}

Function _CallbackShortcuts_build$(
  m.Scope scope,
  CallbackShortcuts target,
) =>
    target.build;
Function ShortcutRegistryEntry_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ShortcutRegistryEntry;
Function ShortcutRegistryEntry_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ShortcutRegistryEntry;
ShortcutRegistry _ShortcutRegistryEntry_registry$(
    ShortcutRegistryEntry target) {
  return target.registry;
}

Function _ShortcutRegistryEntry_replaceAll$(
  m.Scope scope,
  ShortcutRegistryEntry target,
) =>
    target.replaceAll;
Function _ShortcutRegistryEntry_dispose$(
  m.Scope scope,
  ShortcutRegistryEntry target,
) =>
    target.dispose;
Function ShortcutRegistry_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ShortcutRegistry;
Function ShortcutRegistry_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ShortcutRegistry;
Map<ShortcutActivator, Intent> _ShortcutRegistry_shortcuts$(
    ShortcutRegistry target) {
  return target.shortcuts;
}

Function _ShortcutRegistry_dispose$(
  m.Scope scope,
  ShortcutRegistry target,
) =>
    target.dispose;
Function _ShortcutRegistry_addAll$(
  m.Scope scope,
  ShortcutRegistry target,
) =>
    target.addAll;
Function _ShortcutRegistry_of$(m.Scope scope) => ShortcutRegistry.of;
Function _ShortcutRegistry_maybeOf$(m.Scope scope) => ShortcutRegistry.maybeOf;
Function ShortcutRegistrar_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ShortcutRegistrar;
Function ShortcutRegistrar_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ShortcutRegistrar;
Widget _ShortcutRegistrar_child$(ShortcutRegistrar target) {
  return target.child;
}

Function _ShortcutRegistrar_createState$(
  m.Scope scope,
  ShortcutRegistrar target,
) =>
    target.createState;
