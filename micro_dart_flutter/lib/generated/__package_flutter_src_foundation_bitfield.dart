// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/foundation/bitfield.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/foundation/bitfield.dart',
  {
    'kMaxUnsignedSMI': _kMaxUnsignedSMI$,
    'BitField.': _BitField__$,
    'BitField.filled': _BitField_filled_$,
  },
  {},
  {
    'BitField': m.ClassMirror(
      'BitField',
      {
        '#as': BitField_as$,
        '#is': BitField_is$,
        '[]': _BitField_$index$$,
        '[]=': _BitField_$index_set$$,
        'reset': _BitField_reset$,
      },
      {},
    )
  },
);
int _kMaxUnsignedSMI$() {
  return kMaxUnsignedSMI;
}

Function BitField_as$<T extends dynamic>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as BitField<T>;
Function BitField_is$<T extends dynamic>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is BitField<T>;
Function _BitField__$(m.Scope scope$) => <T extends dynamic>(int length) {
      return BitField<T>(length);
    };
Function _BitField_filled_$(m.Scope scope$) => BitField.filled;
Function _BitField_$index$$<T extends dynamic>(
  m.Scope scope$,
  BitField<T> target$,
) =>
    (T index) => target$[index];
Function _BitField_$index_set$$<T extends dynamic>(
  m.Scope scope$,
  BitField<T> target$,
) =>
    (
      T index,
      bool other,
    ) =>
        target$[index] = other;
Function _BitField_reset$<T extends dynamic>(
  m.Scope scope$,
  BitField<T> target$,
) =>
    target$.reset;
