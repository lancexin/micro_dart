// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/text_layout_metrics.dart';
import 'dart:ui' show TextRange;
import 'package:flutter/src/services/text_editing.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/text_layout_metrics.dart',
  {
    'TextLayoutMetrics.isWhitespace': _TextLayoutMetrics_isWhitespace$,
    'TextLayoutMetrics.isLineTerminator': _TextLayoutMetrics_isLineTerminator$,
  },
  {},
  {
    'TextLayoutMetrics': m.ClassMirror(
      'TextLayoutMetrics',
      {
        '#as': TextLayoutMetrics_as$,
        '#is': TextLayoutMetrics_is$,
        'getLineAtOffset': _TextLayoutMetrics_getLineAtOffset$,
        'getWordBoundary': _TextLayoutMetrics_getWordBoundary$,
        'getTextPositionAbove': _TextLayoutMetrics_getTextPositionAbove$,
        'getTextPositionBelow': _TextLayoutMetrics_getTextPositionBelow$,
      },
      {},
    )
  },
);
Function TextLayoutMetrics_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextLayoutMetrics;
Function TextLayoutMetrics_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextLayoutMetrics;
Function _TextLayoutMetrics_isWhitespace$(m.Scope scope$) =>
    TextLayoutMetrics.isWhitespace;
Function _TextLayoutMetrics_isLineTerminator$(m.Scope scope$) =>
    TextLayoutMetrics.isLineTerminator;
Function _TextLayoutMetrics_getLineAtOffset$(
  m.Scope scope$,
  TextLayoutMetrics target$,
) =>
    target$.getLineAtOffset;
Function _TextLayoutMetrics_getWordBoundary$(
  m.Scope scope$,
  TextLayoutMetrics target$,
) =>
    target$.getWordBoundary;
Function _TextLayoutMetrics_getTextPositionAbove$(
  m.Scope scope$,
  TextLayoutMetrics target$,
) =>
    target$.getTextPositionAbove;
Function _TextLayoutMetrics_getTextPositionBelow$(
  m.Scope scope$,
  TextLayoutMetrics target$,
) =>
    target$.getTextPositionBelow;
