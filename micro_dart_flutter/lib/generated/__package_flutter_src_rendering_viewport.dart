// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/viewport.dart';
import 'dart:math';
import 'package:flutter/animation.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/semantics.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/rendering/debug.dart';
import 'package:flutter/src/rendering/layer.dart';
import 'package:flutter/src/rendering/object.dart';
import 'package:flutter/src/rendering/sliver.dart';
import 'package:flutter/src/rendering/viewport_offset.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/viewport.dart',
  {
    'RenderAbstractViewport.defaultCacheExtent':
        _RenderAbstractViewport_defaultCacheExtent$,
    'RenderAbstractViewport.maybeOf': _RenderAbstractViewport_maybeOf$,
    'RenderAbstractViewport.of': _RenderAbstractViewport_of$,
    'RenderViewportBase.visitChildrenForSemantics':
        _RenderViewportBase_visitChildrenForSemantics$,
    'RenderViewportBase.layoutChildSequence':
        _RenderViewportBase_layoutChildSequence$,
    'RenderViewportBase.showInViewport': _RenderViewportBase_showInViewport$,
    'RenderViewport.useTwoPaneSemantics': _RenderViewport_useTwoPaneSemantics$,
    'RenderViewport.excludeFromScrolling':
        _RenderViewport_excludeFromScrolling$,
    'CacheExtentStyle.pixel': _CacheExtentStyle_pixel$,
    'CacheExtentStyle.viewport': _CacheExtentStyle_viewport$,
    'CacheExtentStyle.values': _CacheExtentStyle_values$,
  },
  {},
  {
    'RenderAbstractViewport': m.ClassMirror(
      'RenderAbstractViewport',
      {
        '#as': RenderAbstractViewport_as$,
        '#is': RenderAbstractViewport_is$,
        'getOffsetToReveal': _RenderAbstractViewport_getOffsetToReveal$,
      },
      {},
    ),
    'RevealedOffset': m.ClassMirror(
      'RevealedOffset',
      {
        '#as': RevealedOffset_as$,
        '#is': RevealedOffset_is$,
        'offset': _RevealedOffset_offset$,
        'rect': _RevealedOffset_rect$,
        'toString': _RevealedOffset_toString$,
      },
      {},
    ),
    'RenderViewportBase': m.ClassMirror(
      'RenderViewportBase',
      {
        '#as': RenderViewportBase_as$,
        '#is': RenderViewportBase_is$,
        'axisDirection': _RenderViewportBase_axisDirection$,
        'crossAxisDirection': _RenderViewportBase_crossAxisDirection$,
        'axis': _RenderViewportBase_axis$,
        'offset': _RenderViewportBase_offset$,
        'cacheExtent': _RenderViewportBase_cacheExtent$,
        'cacheExtentStyle': _RenderViewportBase_cacheExtentStyle$,
        'clipBehavior': _RenderViewportBase_clipBehavior$,
        'isRepaintBoundary': _RenderViewportBase_isRepaintBoundary$,
        'hasVisualOverflow': _RenderViewportBase_hasVisualOverflow$,
        'indexOfFirstChild': _RenderViewportBase_indexOfFirstChild$,
        'childrenInPaintOrder': _RenderViewportBase_childrenInPaintOrder$,
        'childrenInHitTestOrder': _RenderViewportBase_childrenInHitTestOrder$,
        'describeSemanticsConfiguration':
            _RenderViewportBase_describeSemanticsConfiguration$,
        'attach': _RenderViewportBase_attach$,
        'detach': _RenderViewportBase_detach$,
        'debugThrowIfNotCheckingIntrinsics':
            _RenderViewportBase_debugThrowIfNotCheckingIntrinsics$,
        'computeMinIntrinsicWidth':
            _RenderViewportBase_computeMinIntrinsicWidth$,
        'computeMaxIntrinsicWidth':
            _RenderViewportBase_computeMaxIntrinsicWidth$,
        'computeMinIntrinsicHeight':
            _RenderViewportBase_computeMinIntrinsicHeight$,
        'computeMaxIntrinsicHeight':
            _RenderViewportBase_computeMaxIntrinsicHeight$,
        'describeApproximatePaintClip':
            _RenderViewportBase_describeApproximatePaintClip$,
        'describeSemanticsClip': _RenderViewportBase_describeSemanticsClip$,
        'paint': _RenderViewportBase_paint$,
        'dispose': _RenderViewportBase_dispose$,
        'debugPaintSize': _RenderViewportBase_debugPaintSize$,
        'hitTestChildren': _RenderViewportBase_hitTestChildren$,
        'getOffsetToReveal': _RenderViewportBase_getOffsetToReveal$,
        'computeAbsolutePaintOffset':
            _RenderViewportBase_computeAbsolutePaintOffset$,
        'debugFillProperties': _RenderViewportBase_debugFillProperties$,
        'debugDescribeChildren': _RenderViewportBase_debugDescribeChildren$,
        'updateOutOfBandData': _RenderViewportBase_updateOutOfBandData$,
        'updateChildLayoutOffset': _RenderViewportBase_updateChildLayoutOffset$,
        'paintOffsetOf': _RenderViewportBase_paintOffsetOf$,
        'scrollOffsetOf': _RenderViewportBase_scrollOffsetOf$,
        'maxScrollObstructionExtentBefore':
            _RenderViewportBase_maxScrollObstructionExtentBefore$,
        'computeChildMainAxisPosition':
            _RenderViewportBase_computeChildMainAxisPosition$,
        'labelForChild': _RenderViewportBase_labelForChild$,
        'showOnScreen': _RenderViewportBase_showOnScreen$,
      },
      {
        'axisDirection': _RenderViewportBase_axisDirection_set$,
        'crossAxisDirection': _RenderViewportBase_crossAxisDirection_set$,
        'offset': _RenderViewportBase_offset_set$,
        'cacheExtent': _RenderViewportBase_cacheExtent_set$,
        'cacheExtentStyle': _RenderViewportBase_cacheExtentStyle_set$,
        'clipBehavior': _RenderViewportBase_clipBehavior_set$,
      },
    ),
    'RenderViewport': m.ClassMirror(
      'RenderViewport',
      {
        '#as': RenderViewport_as$,
        '#is': RenderViewport_is$,
        'anchor': _RenderViewport_anchor$,
        'center': _RenderViewport_center$,
        'sizedByParent': _RenderViewport_sizedByParent$,
        'hasVisualOverflow': _RenderViewport_hasVisualOverflow$,
        'indexOfFirstChild': _RenderViewport_indexOfFirstChild$,
        'childrenInPaintOrder': _RenderViewport_childrenInPaintOrder$,
        'childrenInHitTestOrder': _RenderViewport_childrenInHitTestOrder$,
        'setupParentData': _RenderViewport_setupParentData$,
        'computeDryLayout': _RenderViewport_computeDryLayout$,
        'performLayout': _RenderViewport_performLayout$,
        'updateOutOfBandData': _RenderViewport_updateOutOfBandData$,
        'updateChildLayoutOffset': _RenderViewport_updateChildLayoutOffset$,
        'paintOffsetOf': _RenderViewport_paintOffsetOf$,
        'scrollOffsetOf': _RenderViewport_scrollOffsetOf$,
        'maxScrollObstructionExtentBefore':
            _RenderViewport_maxScrollObstructionExtentBefore$,
        'applyPaintTransform': _RenderViewport_applyPaintTransform$,
        'computeChildMainAxisPosition':
            _RenderViewport_computeChildMainAxisPosition$,
        'labelForChild': _RenderViewport_labelForChild$,
        'debugFillProperties': _RenderViewport_debugFillProperties$,
      },
      {
        'anchor': _RenderViewport_anchor_set$,
        'center': _RenderViewport_center_set$,
      },
    ),
    'RenderShrinkWrappingViewport': m.ClassMirror(
      'RenderShrinkWrappingViewport',
      {
        '#as': RenderShrinkWrappingViewport_as$,
        '#is': RenderShrinkWrappingViewport_is$,
        'hasVisualOverflow': _RenderShrinkWrappingViewport_hasVisualOverflow$,
        'indexOfFirstChild': _RenderShrinkWrappingViewport_indexOfFirstChild$,
        'childrenInPaintOrder':
            _RenderShrinkWrappingViewport_childrenInPaintOrder$,
        'childrenInHitTestOrder':
            _RenderShrinkWrappingViewport_childrenInHitTestOrder$,
        'setupParentData': _RenderShrinkWrappingViewport_setupParentData$,
        'debugThrowIfNotCheckingIntrinsics':
            _RenderShrinkWrappingViewport_debugThrowIfNotCheckingIntrinsics$,
        'performLayout': _RenderShrinkWrappingViewport_performLayout$,
        'updateOutOfBandData':
            _RenderShrinkWrappingViewport_updateOutOfBandData$,
        'updateChildLayoutOffset':
            _RenderShrinkWrappingViewport_updateChildLayoutOffset$,
        'paintOffsetOf': _RenderShrinkWrappingViewport_paintOffsetOf$,
        'scrollOffsetOf': _RenderShrinkWrappingViewport_scrollOffsetOf$,
        'maxScrollObstructionExtentBefore':
            _RenderShrinkWrappingViewport_maxScrollObstructionExtentBefore$,
        'applyPaintTransform':
            _RenderShrinkWrappingViewport_applyPaintTransform$,
        'computeChildMainAxisPosition':
            _RenderShrinkWrappingViewport_computeChildMainAxisPosition$,
        'labelForChild': _RenderShrinkWrappingViewport_labelForChild$,
      },
      {},
    ),
    'CacheExtentStyle': m.ClassMirror(
      'CacheExtentStyle',
      {},
      {},
    ),
  },
);
Function RenderAbstractViewport_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderAbstractViewport;
Function RenderAbstractViewport_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderAbstractViewport;
double _RenderAbstractViewport_defaultCacheExtent$() {
  return RenderAbstractViewport.defaultCacheExtent;
}

Function _RenderAbstractViewport_maybeOf$(m.Scope scope) =>
    RenderAbstractViewport.maybeOf;
Function _RenderAbstractViewport_of$(m.Scope scope) =>
    RenderAbstractViewport.of;
Function _RenderAbstractViewport_getOffsetToReveal$(
  m.Scope scope,
  RenderAbstractViewport target,
) =>
    target.getOffsetToReveal;
Function RevealedOffset_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RevealedOffset;
Function RevealedOffset_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RevealedOffset;
double _RevealedOffset_offset$(RevealedOffset target) {
  return target.offset;
}

Rect _RevealedOffset_rect$(RevealedOffset target) {
  return target.rect;
}

Function _RevealedOffset_toString$(
  m.Scope scope,
  RevealedOffset target,
) =>
    target.toString;
Function RenderViewportBase_as$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderViewportBase<ParentDataClass>;
Function RenderViewportBase_is$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderViewportBase<ParentDataClass>;
AxisDirection _RenderViewportBase_axisDirection$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
    RenderViewportBase<ParentDataClass> target) {
  return target.axisDirection;
}

void _RenderViewportBase_axisDirection_set$<
    ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  RenderViewportBase<ParentDataClass> target,
  AxisDirection other,
) {
  target.axisDirection = other;
}

AxisDirection _RenderViewportBase_crossAxisDirection$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
    RenderViewportBase<ParentDataClass> target) {
  return target.crossAxisDirection;
}

void _RenderViewportBase_crossAxisDirection_set$<
    ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  RenderViewportBase<ParentDataClass> target,
  AxisDirection other,
) {
  target.crossAxisDirection = other;
}

Axis _RenderViewportBase_axis$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
    RenderViewportBase<ParentDataClass> target) {
  return target.axis;
}

ViewportOffset _RenderViewportBase_offset$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
    RenderViewportBase<ParentDataClass> target) {
  return target.offset;
}

void _RenderViewportBase_offset_set$<
    ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  RenderViewportBase<ParentDataClass> target,
  ViewportOffset other,
) {
  target.offset = other;
}

double? _RenderViewportBase_cacheExtent$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
    RenderViewportBase<ParentDataClass> target) {
  return target.cacheExtent;
}

void _RenderViewportBase_cacheExtent_set$<
    ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  RenderViewportBase<ParentDataClass> target,
  double? other,
) {
  target.cacheExtent = other;
}

CacheExtentStyle _RenderViewportBase_cacheExtentStyle$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
    RenderViewportBase<ParentDataClass> target) {
  return target.cacheExtentStyle;
}

void _RenderViewportBase_cacheExtentStyle_set$<
    ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  RenderViewportBase<ParentDataClass> target,
  CacheExtentStyle other,
) {
  target.cacheExtentStyle = other;
}

Clip _RenderViewportBase_clipBehavior$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
    RenderViewportBase<ParentDataClass> target) {
  return target.clipBehavior;
}

void _RenderViewportBase_clipBehavior_set$<
    ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  RenderViewportBase<ParentDataClass> target,
  Clip other,
) {
  target.clipBehavior = other;
}

bool _RenderViewportBase_isRepaintBoundary$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
    RenderViewportBase<ParentDataClass> target) {
  return target.isRepaintBoundary;
}

bool _RenderViewportBase_hasVisualOverflow$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
    RenderViewportBase<ParentDataClass> target) {
  return target.hasVisualOverflow;
}

int _RenderViewportBase_indexOfFirstChild$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
    RenderViewportBase<ParentDataClass> target) {
  return target.indexOfFirstChild;
}

Iterable<RenderSliver> _RenderViewportBase_childrenInPaintOrder$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
    RenderViewportBase<ParentDataClass> target) {
  return target.childrenInPaintOrder;
}

Iterable<RenderSliver> _RenderViewportBase_childrenInHitTestOrder$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
    RenderViewportBase<ParentDataClass> target) {
  return target.childrenInHitTestOrder;
}

Function _RenderViewportBase_describeSemanticsConfiguration$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.describeSemanticsConfiguration;
Function _RenderViewportBase_visitChildrenForSemantics$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    (m.FunctionPointer visitor) {
      void visitorProxy(RenderObject visitor_child) =>
          scope.engine.callFunctionPointer(
            scope,
            visitor,
            [visitor_child],
            {},
          );
      target.visitChildrenForSemantics(visitorProxy);
    };
Function _RenderViewportBase_attach$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.attach;
Function _RenderViewportBase_detach$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.detach;
Function _RenderViewportBase_debugThrowIfNotCheckingIntrinsics$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.debugThrowIfNotCheckingIntrinsics;
Function _RenderViewportBase_computeMinIntrinsicWidth$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.computeMinIntrinsicWidth;
Function _RenderViewportBase_computeMaxIntrinsicWidth$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.computeMaxIntrinsicWidth;
Function _RenderViewportBase_computeMinIntrinsicHeight$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.computeMinIntrinsicHeight;
Function _RenderViewportBase_computeMaxIntrinsicHeight$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.computeMaxIntrinsicHeight;
Function _RenderViewportBase_layoutChildSequence$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    ({
      required m.FunctionPointer advance,
      required double cacheOrigin,
      required RenderSliver? child,
      required double crossAxisExtent,
      required GrowthDirection growthDirection,
      required double layoutOffset,
      required double mainAxisExtent,
      required double overlap,
      required double remainingCacheExtent,
      required double remainingPaintExtent,
      required double scrollOffset,
    }) {
      RenderSliver? advanceProxy(RenderSliver advance_child) =>
          scope.engine.callFunctionPointer(
            scope,
            advance,
            [advance_child],
            {},
          );
      return target.layoutChildSequence(
        advance: advanceProxy,
        cacheOrigin: cacheOrigin,
        child: child,
        crossAxisExtent: crossAxisExtent,
        growthDirection: growthDirection,
        layoutOffset: layoutOffset,
        mainAxisExtent: mainAxisExtent,
        overlap: overlap,
        remainingCacheExtent: remainingCacheExtent,
        remainingPaintExtent: remainingPaintExtent,
        scrollOffset: scrollOffset,
      );
    };
Function _RenderViewportBase_describeApproximatePaintClip$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.describeApproximatePaintClip;
Function _RenderViewportBase_describeSemanticsClip$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.describeSemanticsClip;
Function _RenderViewportBase_paint$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.paint;
Function _RenderViewportBase_dispose$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.dispose;
Function _RenderViewportBase_debugPaintSize$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.debugPaintSize;
Function _RenderViewportBase_hitTestChildren$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.hitTestChildren;
Function _RenderViewportBase_getOffsetToReveal$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.getOffsetToReveal;
Function _RenderViewportBase_computeAbsolutePaintOffset$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.computeAbsolutePaintOffset;
Function _RenderViewportBase_debugFillProperties$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.debugFillProperties;
Function _RenderViewportBase_debugDescribeChildren$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.debugDescribeChildren;
Function _RenderViewportBase_updateOutOfBandData$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.updateOutOfBandData;
Function _RenderViewportBase_updateChildLayoutOffset$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.updateChildLayoutOffset;
Function _RenderViewportBase_paintOffsetOf$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.paintOffsetOf;
Function _RenderViewportBase_scrollOffsetOf$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.scrollOffsetOf;
Function _RenderViewportBase_maxScrollObstructionExtentBefore$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.maxScrollObstructionExtentBefore;
Function _RenderViewportBase_computeChildMainAxisPosition$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.computeChildMainAxisPosition;
Function _RenderViewportBase_labelForChild$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.labelForChild;
Function _RenderViewportBase_showOnScreen$<
        ParentDataClass extends ContainerParentDataMixin<RenderSliver>>(
  m.Scope scope,
  RenderViewportBase<ParentDataClass> target,
) =>
    target.showOnScreen;
Function _RenderViewportBase_showInViewport$(m.Scope scope) =>
    RenderViewportBase.showInViewport;
Function RenderViewport_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderViewport;
Function RenderViewport_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderViewport;
SemanticsTag _RenderViewport_useTwoPaneSemantics$() {
  return RenderViewport.useTwoPaneSemantics;
}

SemanticsTag _RenderViewport_excludeFromScrolling$() {
  return RenderViewport.excludeFromScrolling;
}

double _RenderViewport_anchor$(RenderViewport target) {
  return target.anchor;
}

void _RenderViewport_anchor_set$(
  RenderViewport target,
  double other,
) {
  target.anchor = other;
}

RenderSliver? _RenderViewport_center$(RenderViewport target) {
  return target.center;
}

void _RenderViewport_center_set$(
  RenderViewport target,
  RenderSliver? other,
) {
  target.center = other;
}

bool _RenderViewport_sizedByParent$(RenderViewport target) {
  return target.sizedByParent;
}

bool _RenderViewport_hasVisualOverflow$(RenderViewport target) {
  return target.hasVisualOverflow;
}

int _RenderViewport_indexOfFirstChild$(RenderViewport target) {
  return target.indexOfFirstChild;
}

Iterable<RenderSliver> _RenderViewport_childrenInPaintOrder$(
    RenderViewport target) {
  return target.childrenInPaintOrder;
}

Iterable<RenderSliver> _RenderViewport_childrenInHitTestOrder$(
    RenderViewport target) {
  return target.childrenInHitTestOrder;
}

Function _RenderViewport_setupParentData$(
  m.Scope scope,
  RenderViewport target,
) =>
    target.setupParentData;
Function _RenderViewport_computeDryLayout$(
  m.Scope scope,
  RenderViewport target,
) =>
    target.computeDryLayout;
Function _RenderViewport_performLayout$(
  m.Scope scope,
  RenderViewport target,
) =>
    target.performLayout;
Function _RenderViewport_updateOutOfBandData$(
  m.Scope scope,
  RenderViewport target,
) =>
    target.updateOutOfBandData;
Function _RenderViewport_updateChildLayoutOffset$(
  m.Scope scope,
  RenderViewport target,
) =>
    target.updateChildLayoutOffset;
Function _RenderViewport_paintOffsetOf$(
  m.Scope scope,
  RenderViewport target,
) =>
    target.paintOffsetOf;
Function _RenderViewport_scrollOffsetOf$(
  m.Scope scope,
  RenderViewport target,
) =>
    target.scrollOffsetOf;
Function _RenderViewport_maxScrollObstructionExtentBefore$(
  m.Scope scope,
  RenderViewport target,
) =>
    target.maxScrollObstructionExtentBefore;
Function _RenderViewport_applyPaintTransform$(
  m.Scope scope,
  RenderViewport target,
) =>
    target.applyPaintTransform;
Function _RenderViewport_computeChildMainAxisPosition$(
  m.Scope scope,
  RenderViewport target,
) =>
    target.computeChildMainAxisPosition;
Function _RenderViewport_labelForChild$(
  m.Scope scope,
  RenderViewport target,
) =>
    target.labelForChild;
Function _RenderViewport_debugFillProperties$(
  m.Scope scope,
  RenderViewport target,
) =>
    target.debugFillProperties;
Function RenderShrinkWrappingViewport_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderShrinkWrappingViewport;
Function RenderShrinkWrappingViewport_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderShrinkWrappingViewport;
bool _RenderShrinkWrappingViewport_hasVisualOverflow$(
    RenderShrinkWrappingViewport target) {
  return target.hasVisualOverflow;
}

int _RenderShrinkWrappingViewport_indexOfFirstChild$(
    RenderShrinkWrappingViewport target) {
  return target.indexOfFirstChild;
}

Iterable<RenderSliver> _RenderShrinkWrappingViewport_childrenInPaintOrder$(
    RenderShrinkWrappingViewport target) {
  return target.childrenInPaintOrder;
}

Iterable<RenderSliver> _RenderShrinkWrappingViewport_childrenInHitTestOrder$(
    RenderShrinkWrappingViewport target) {
  return target.childrenInHitTestOrder;
}

Function _RenderShrinkWrappingViewport_setupParentData$(
  m.Scope scope,
  RenderShrinkWrappingViewport target,
) =>
    target.setupParentData;
Function _RenderShrinkWrappingViewport_debugThrowIfNotCheckingIntrinsics$(
  m.Scope scope,
  RenderShrinkWrappingViewport target,
) =>
    target.debugThrowIfNotCheckingIntrinsics;
Function _RenderShrinkWrappingViewport_performLayout$(
  m.Scope scope,
  RenderShrinkWrappingViewport target,
) =>
    target.performLayout;
Function _RenderShrinkWrappingViewport_updateOutOfBandData$(
  m.Scope scope,
  RenderShrinkWrappingViewport target,
) =>
    target.updateOutOfBandData;
Function _RenderShrinkWrappingViewport_updateChildLayoutOffset$(
  m.Scope scope,
  RenderShrinkWrappingViewport target,
) =>
    target.updateChildLayoutOffset;
Function _RenderShrinkWrappingViewport_paintOffsetOf$(
  m.Scope scope,
  RenderShrinkWrappingViewport target,
) =>
    target.paintOffsetOf;
Function _RenderShrinkWrappingViewport_scrollOffsetOf$(
  m.Scope scope,
  RenderShrinkWrappingViewport target,
) =>
    target.scrollOffsetOf;
Function _RenderShrinkWrappingViewport_maxScrollObstructionExtentBefore$(
  m.Scope scope,
  RenderShrinkWrappingViewport target,
) =>
    target.maxScrollObstructionExtentBefore;
Function _RenderShrinkWrappingViewport_applyPaintTransform$(
  m.Scope scope,
  RenderShrinkWrappingViewport target,
) =>
    target.applyPaintTransform;
Function _RenderShrinkWrappingViewport_computeChildMainAxisPosition$(
  m.Scope scope,
  RenderShrinkWrappingViewport target,
) =>
    target.computeChildMainAxisPosition;
Function _RenderShrinkWrappingViewport_labelForChild$(
  m.Scope scope,
  RenderShrinkWrappingViewport target,
) =>
    target.labelForChild;
CacheExtentStyle _CacheExtentStyle_pixel$() {
  return CacheExtentStyle.pixel;
}

CacheExtentStyle _CacheExtentStyle_viewport$() {
  return CacheExtentStyle.viewport;
}

List<CacheExtentStyle> _CacheExtentStyle_values$() {
  return CacheExtentStyle.values;
}
