// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/sliver_fill.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/scroll_delegate.dart';
import 'package:flutter/src/widgets/sliver.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/sliver_fill.dart',
  {},
  {},
  {
    'SliverFillViewport': m.ClassMirror(
      'SliverFillViewport',
      {
        'viewportFraction': _SliverFillViewport_viewportFraction$,
        'padEnds': _SliverFillViewport_padEnds$,
        'delegate': _SliverFillViewport_delegate$,
        'build': _SliverFillViewport_build$,
      },
      {},
    ),
    'SliverFillRemaining': m.ClassMirror(
      'SliverFillRemaining',
      {
        'child': _SliverFillRemaining_child$,
        'hasScrollBody': _SliverFillRemaining_hasScrollBody$,
        'fillOverscroll': _SliverFillRemaining_fillOverscroll$,
        'build': _SliverFillRemaining_build$,
        'debugFillProperties': _SliverFillRemaining_debugFillProperties$,
      },
      {},
    ),
  },
);
double _SliverFillViewport_viewportFraction$(SliverFillViewport target) {
  return target.viewportFraction;
}

bool _SliverFillViewport_padEnds$(SliverFillViewport target) {
  return target.padEnds;
}

SliverChildDelegate _SliverFillViewport_delegate$(SliverFillViewport target) {
  return target.delegate;
}

Function _SliverFillViewport_build$(
  m.Scope scope,
  SliverFillViewport target,
) =>
    target.build;
Widget? _SliverFillRemaining_child$(SliverFillRemaining target) {
  return target.child;
}

bool _SliverFillRemaining_hasScrollBody$(SliverFillRemaining target) {
  return target.hasScrollBody;
}

bool _SliverFillRemaining_fillOverscroll$(SliverFillRemaining target) {
  return target.fillOverscroll;
}

Function _SliverFillRemaining_build$(
  m.Scope scope,
  SliverFillRemaining target,
) =>
    target.build;
Function _SliverFillRemaining_debugFillProperties$(
  m.Scope scope,
  SliverFillRemaining target,
) =>
    target.debugFillProperties;
