// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/text_selection.dart';
import 'dart:async';
import 'dart:math';
import 'package:characters/characters.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/binding.dart';
import 'package:flutter/src/widgets/constants.dart';
import 'package:flutter/src/widgets/container.dart';
import 'package:flutter/src/widgets/context_menu_controller.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/editable_text.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/gesture_detector.dart';
import 'package:flutter/src/widgets/magnifier.dart';
import 'package:flutter/src/widgets/overlay.dart';
import 'package:flutter/src/widgets/scrollable.dart';
import 'package:flutter/src/widgets/tap_and_drag_gestures.dart';
import 'package:flutter/src/widgets/tap_region.dart';
import 'package:flutter/src/widgets/ticker_provider.dart';
import 'package:flutter/src/widgets/transitions.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/text_selection.dart',
  {
    'emptyTextSelectionControls': _emptyTextSelectionControls$,
    'TextSelectionControls.buildHandle': _TextSelectionControls_buildHandle$,
    'EmptyTextSelectionControls.buildHandle':
        _EmptyTextSelectionControls_buildHandle$,
    'TextSelectionOverlay.fadeDuration': _TextSelectionOverlay_fadeDuration$,
    'TextSelectionOverlay.showSpellCheckSuggestionsToolbar':
        _TextSelectionOverlay_showSpellCheckSuggestionsToolbar$,
    'SelectionOverlay.fadeDuration': _SelectionOverlay_fadeDuration$,
    'SelectionOverlay.showToolbar': _SelectionOverlay_showToolbar$,
    'SelectionOverlay.showSpellCheckSuggestionsToolbar':
        _SelectionOverlay_showSpellCheckSuggestionsToolbar$,
    'ClipboardStatusNotifier.addListener':
        _ClipboardStatusNotifier_addListener$,
    'ClipboardStatusNotifier.removeListener':
        _ClipboardStatusNotifier_removeListener$,
    'ClipboardStatus.pasteable': _ClipboardStatus_pasteable$,
    'ClipboardStatus.unknown': _ClipboardStatus_unknown$,
    'ClipboardStatus.notPasteable': _ClipboardStatus_notPasteable$,
    'ClipboardStatus.values': _ClipboardStatus_values$,
  },
  {},
  {
    'ToolbarItemsParentData': m.ClassMirror(
      'ToolbarItemsParentData',
      {
        '#as': ToolbarItemsParentData_as$,
        '#is': ToolbarItemsParentData_is$,
        'shouldPaint': _ToolbarItemsParentData_shouldPaint$,
        'toString': _ToolbarItemsParentData_toString$,
      },
      {'shouldPaint': _ToolbarItemsParentData_shouldPaint_set$},
    ),
    'TextSelectionControls': m.ClassMirror(
      'TextSelectionControls',
      {
        '#as': TextSelectionControls_as$,
        '#is': TextSelectionControls_is$,
        'getHandleAnchor': _TextSelectionControls_getHandleAnchor$,
        'getHandleSize': _TextSelectionControls_getHandleSize$,
      },
      {},
    ),
    'EmptyTextSelectionControls': m.ClassMirror(
      'EmptyTextSelectionControls',
      {
        '#as': EmptyTextSelectionControls_as$,
        '#is': EmptyTextSelectionControls_is$,
        'getHandleSize': _EmptyTextSelectionControls_getHandleSize$,
        'buildToolbar': _EmptyTextSelectionControls_buildToolbar$,
        'getHandleAnchor': _EmptyTextSelectionControls_getHandleAnchor$,
      },
      {},
    ),
    'TextSelectionOverlay': m.ClassMirror(
      'TextSelectionOverlay',
      {
        '#as': TextSelectionOverlay_as$,
        '#is': TextSelectionOverlay_is$,
        'context': _TextSelectionOverlay_context$,
        'renderObject': _TextSelectionOverlay_renderObject$,
        'selectionControls': _TextSelectionOverlay_selectionControls$,
        'selectionDelegate': _TextSelectionOverlay_selectionDelegate$,
        'contextMenuBuilder': _TextSelectionOverlay_contextMenuBuilder$,
        'value': _TextSelectionOverlay_value$,
        'handlesVisible': _TextSelectionOverlay_handlesVisible$,
        'handlesAreVisible': _TextSelectionOverlay_handlesAreVisible$,
        'toolbarIsVisible': _TextSelectionOverlay_toolbarIsVisible$,
        'magnifierIsVisible': _TextSelectionOverlay_magnifierIsVisible$,
        'spellCheckToolbarIsVisible':
            _TextSelectionOverlay_spellCheckToolbarIsVisible$,
        'showHandles': _TextSelectionOverlay_showHandles$,
        'hideHandles': _TextSelectionOverlay_hideHandles$,
        'showToolbar': _TextSelectionOverlay_showToolbar$,
        'showMagnifier': _TextSelectionOverlay_showMagnifier$,
        'updateMagnifier': _TextSelectionOverlay_updateMagnifier$,
        'hideMagnifier': _TextSelectionOverlay_hideMagnifier$,
        'update': _TextSelectionOverlay_update$,
        'updateForScroll': _TextSelectionOverlay_updateForScroll$,
        'hide': _TextSelectionOverlay_hide$,
        'hideToolbar': _TextSelectionOverlay_hideToolbar$,
        'dispose': _TextSelectionOverlay_dispose$,
      },
      {'handlesVisible': _TextSelectionOverlay_handlesVisible_set$},
    ),
    'SelectionOverlay': m.ClassMirror(
      'SelectionOverlay',
      {
        '#as': SelectionOverlay_as$,
        '#is': SelectionOverlay_is$,
        'context': _SelectionOverlay_context$,
        'magnifierConfiguration': _SelectionOverlay_magnifierConfiguration$,
        'startHandlesVisible': _SelectionOverlay_startHandlesVisible$,
        'onStartHandleDragStart': _SelectionOverlay_onStartHandleDragStart$,
        'onStartHandleDragUpdate': _SelectionOverlay_onStartHandleDragUpdate$,
        'onStartHandleDragEnd': _SelectionOverlay_onStartHandleDragEnd$,
        'endHandlesVisible': _SelectionOverlay_endHandlesVisible$,
        'onEndHandleDragStart': _SelectionOverlay_onEndHandleDragStart$,
        'onEndHandleDragUpdate': _SelectionOverlay_onEndHandleDragUpdate$,
        'onEndHandleDragEnd': _SelectionOverlay_onEndHandleDragEnd$,
        'toolbarVisible': _SelectionOverlay_toolbarVisible$,
        'debugRequiredFor': _SelectionOverlay_debugRequiredFor$,
        'toolbarLayerLink': _SelectionOverlay_toolbarLayerLink$,
        'startHandleLayerLink': _SelectionOverlay_startHandleLayerLink$,
        'endHandleLayerLink': _SelectionOverlay_endHandleLayerLink$,
        'selectionControls': _SelectionOverlay_selectionControls$,
        'selectionDelegate': _SelectionOverlay_selectionDelegate$,
        'dragStartBehavior': _SelectionOverlay_dragStartBehavior$,
        'onSelectionHandleTapped': _SelectionOverlay_onSelectionHandleTapped$,
        'clipboardStatus': _SelectionOverlay_clipboardStatus$,
        'startHandleType': _SelectionOverlay_startHandleType$,
        'lineHeightAtStart': _SelectionOverlay_lineHeightAtStart$,
        'endHandleType': _SelectionOverlay_endHandleType$,
        'lineHeightAtEnd': _SelectionOverlay_lineHeightAtEnd$,
        'selectionEndpoints': _SelectionOverlay_selectionEndpoints$,
        'showMagnifier': _SelectionOverlay_showMagnifier$,
        'hideMagnifier': _SelectionOverlay_hideMagnifier$,
        'showHandles': _SelectionOverlay_showHandles$,
        'hideHandles': _SelectionOverlay_hideHandles$,
        'markNeedsBuild': _SelectionOverlay_markNeedsBuild$,
        'hide': _SelectionOverlay_hide$,
        'hideToolbar': _SelectionOverlay_hideToolbar$,
        'dispose': _SelectionOverlay_dispose$,
        'updateMagnifier': _SelectionOverlay_updateMagnifier$,
      },
      {
        'startHandleType': _SelectionOverlay_startHandleType_set$,
        'lineHeightAtStart': _SelectionOverlay_lineHeightAtStart_set$,
        'endHandleType': _SelectionOverlay_endHandleType_set$,
        'lineHeightAtEnd': _SelectionOverlay_lineHeightAtEnd_set$,
        'selectionEndpoints': _SelectionOverlay_selectionEndpoints_set$,
        'toolbarLocation': _SelectionOverlay_toolbarLocation_set$,
      },
    ),
    'TextSelectionGestureDetectorBuilderDelegate': m.ClassMirror(
      'TextSelectionGestureDetectorBuilderDelegate',
      {
        '#as': TextSelectionGestureDetectorBuilderDelegate_as$,
        '#is': TextSelectionGestureDetectorBuilderDelegate_is$,
        'editableTextKey':
            _TextSelectionGestureDetectorBuilderDelegate_editableTextKey$,
        'forcePressEnabled':
            _TextSelectionGestureDetectorBuilderDelegate_forcePressEnabled$,
        'selectionEnabled':
            _TextSelectionGestureDetectorBuilderDelegate_selectionEnabled$,
      },
      {},
    ),
    'TextSelectionGestureDetectorBuilder': m.ClassMirror(
      'TextSelectionGestureDetectorBuilder',
      {
        '#as': TextSelectionGestureDetectorBuilder_as$,
        '#is': TextSelectionGestureDetectorBuilder_is$,
        'delegate': _TextSelectionGestureDetectorBuilder_delegate$,
        'shouldShowSelectionToolbar':
            _TextSelectionGestureDetectorBuilder_shouldShowSelectionToolbar$,
        'editableText': _TextSelectionGestureDetectorBuilder_editableText$,
        'renderEditable': _TextSelectionGestureDetectorBuilder_renderEditable$,
        'onTapDown': _TextSelectionGestureDetectorBuilder_onTapDown$,
        'onForcePressStart':
            _TextSelectionGestureDetectorBuilder_onForcePressStart$,
        'onForcePressEnd':
            _TextSelectionGestureDetectorBuilder_onForcePressEnd$,
        'onSingleTapUp': _TextSelectionGestureDetectorBuilder_onSingleTapUp$,
        'onSingleTapCancel':
            _TextSelectionGestureDetectorBuilder_onSingleTapCancel$,
        'onSingleLongTapStart':
            _TextSelectionGestureDetectorBuilder_onSingleLongTapStart$,
        'onSingleLongTapMoveUpdate':
            _TextSelectionGestureDetectorBuilder_onSingleLongTapMoveUpdate$,
        'onSingleLongTapEnd':
            _TextSelectionGestureDetectorBuilder_onSingleLongTapEnd$,
        'onSecondaryTap': _TextSelectionGestureDetectorBuilder_onSecondaryTap$,
        'onSecondaryTapDown':
            _TextSelectionGestureDetectorBuilder_onSecondaryTapDown$,
        'onDoubleTapDown':
            _TextSelectionGestureDetectorBuilder_onDoubleTapDown$,
        'onTripleTapDown':
            _TextSelectionGestureDetectorBuilder_onTripleTapDown$,
        'onDragSelectionStart':
            _TextSelectionGestureDetectorBuilder_onDragSelectionStart$,
        'onDragSelectionUpdate':
            _TextSelectionGestureDetectorBuilder_onDragSelectionUpdate$,
        'onDragSelectionEnd':
            _TextSelectionGestureDetectorBuilder_onDragSelectionEnd$,
        'buildGestureDetector':
            _TextSelectionGestureDetectorBuilder_buildGestureDetector$,
      },
      {},
    ),
    'TextSelectionGestureDetector': m.ClassMirror(
      'TextSelectionGestureDetector',
      {
        '#as': TextSelectionGestureDetector_as$,
        '#is': TextSelectionGestureDetector_is$,
        'onTapDown': _TextSelectionGestureDetector_onTapDown$,
        'onForcePressStart': _TextSelectionGestureDetector_onForcePressStart$,
        'onForcePressEnd': _TextSelectionGestureDetector_onForcePressEnd$,
        'onSecondaryTap': _TextSelectionGestureDetector_onSecondaryTap$,
        'onSecondaryTapDown': _TextSelectionGestureDetector_onSecondaryTapDown$,
        'onSingleTapUp': _TextSelectionGestureDetector_onSingleTapUp$,
        'onSingleTapCancel': _TextSelectionGestureDetector_onSingleTapCancel$,
        'onSingleLongTapStart':
            _TextSelectionGestureDetector_onSingleLongTapStart$,
        'onSingleLongTapMoveUpdate':
            _TextSelectionGestureDetector_onSingleLongTapMoveUpdate$,
        'onSingleLongTapEnd': _TextSelectionGestureDetector_onSingleLongTapEnd$,
        'onDoubleTapDown': _TextSelectionGestureDetector_onDoubleTapDown$,
        'onTripleTapDown': _TextSelectionGestureDetector_onTripleTapDown$,
        'onDragSelectionStart':
            _TextSelectionGestureDetector_onDragSelectionStart$,
        'onDragSelectionUpdate':
            _TextSelectionGestureDetector_onDragSelectionUpdate$,
        'onDragSelectionEnd': _TextSelectionGestureDetector_onDragSelectionEnd$,
        'behavior': _TextSelectionGestureDetector_behavior$,
        'child': _TextSelectionGestureDetector_child$,
        'createState': _TextSelectionGestureDetector_createState$,
      },
      {},
    ),
    'ClipboardStatusNotifier': m.ClassMirror(
      'ClipboardStatusNotifier',
      {
        '#as': ClipboardStatusNotifier_as$,
        '#is': ClipboardStatusNotifier_is$,
        'disposed': _ClipboardStatusNotifier_disposed$,
        'update': _ClipboardStatusNotifier_update$,
        'didChangeAppLifecycleState':
            _ClipboardStatusNotifier_didChangeAppLifecycleState$,
        'dispose': _ClipboardStatusNotifier_dispose$,
      },
      {},
    ),
    'ClipboardStatus': m.ClassMirror(
      'ClipboardStatus',
      {},
      {},
    ),
  },
);
TextSelectionControls _emptyTextSelectionControls$() {
  return emptyTextSelectionControls;
}

Function ToolbarItemsParentData_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ToolbarItemsParentData;
Function ToolbarItemsParentData_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ToolbarItemsParentData;
bool _ToolbarItemsParentData_shouldPaint$(ToolbarItemsParentData target) {
  return target.shouldPaint;
}

void _ToolbarItemsParentData_shouldPaint_set$(
  ToolbarItemsParentData target,
  bool other,
) {
  target.shouldPaint = other;
}

Function _ToolbarItemsParentData_toString$(
  m.Scope scope,
  ToolbarItemsParentData target,
) =>
    target.toString;
Function TextSelectionControls_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as TextSelectionControls;
Function TextSelectionControls_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is TextSelectionControls;
Function _TextSelectionControls_buildHandle$(
  m.Scope scope,
  TextSelectionControls target,
) =>
    (
      BuildContext context,
      TextSelectionHandleType type,
      double textLineHeight,
      m.FunctionPointer? onTap,
    ) {
      if (onTap == null) {}
      return target.buildHandle(
        context,
        type,
        textLineHeight,
      );
      void onTapProxy() => scope.engine.callFunctionPointer(
            scope,
            onTap!,
            [],
            {},
          );
      return target.buildHandle(
        context,
        type,
        textLineHeight,
        onTap == null ? null : onTapProxy,
      );
    };
Function _TextSelectionControls_getHandleAnchor$(
  m.Scope scope,
  TextSelectionControls target,
) =>
    target.getHandleAnchor;
Function _TextSelectionControls_getHandleSize$(
  m.Scope scope,
  TextSelectionControls target,
) =>
    target.getHandleSize;
Function EmptyTextSelectionControls_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as EmptyTextSelectionControls;
Function EmptyTextSelectionControls_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is EmptyTextSelectionControls;
Function _EmptyTextSelectionControls_getHandleSize$(
  m.Scope scope,
  EmptyTextSelectionControls target,
) =>
    target.getHandleSize;
Function _EmptyTextSelectionControls_buildToolbar$(
  m.Scope scope,
  EmptyTextSelectionControls target,
) =>
    target.buildToolbar;
Function _EmptyTextSelectionControls_buildHandle$(
  m.Scope scope,
  EmptyTextSelectionControls target,
) =>
    (
      BuildContext context,
      TextSelectionHandleType type,
      double textLineHeight,
      m.FunctionPointer? onTap,
    ) {
      if (onTap == null) {}
      return target.buildHandle(
        context,
        type,
        textLineHeight,
      );
      void onTapProxy() => scope.engine.callFunctionPointer(
            scope,
            onTap!,
            [],
            {},
          );
      return target.buildHandle(
        context,
        type,
        textLineHeight,
        onTap == null ? null : onTapProxy,
      );
    };
Function _EmptyTextSelectionControls_getHandleAnchor$(
  m.Scope scope,
  EmptyTextSelectionControls target,
) =>
    target.getHandleAnchor;
Function TextSelectionOverlay_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as TextSelectionOverlay;
Function TextSelectionOverlay_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is TextSelectionOverlay;
BuildContext _TextSelectionOverlay_context$(TextSelectionOverlay target) {
  return target.context;
}

Duration _TextSelectionOverlay_fadeDuration$() {
  return TextSelectionOverlay.fadeDuration;
}

RenderEditable _TextSelectionOverlay_renderObject$(
    TextSelectionOverlay target) {
  return target.renderObject;
}

TextSelectionControls? _TextSelectionOverlay_selectionControls$(
    TextSelectionOverlay target) {
  return target.selectionControls;
}

TextSelectionDelegate _TextSelectionOverlay_selectionDelegate$(
    TextSelectionOverlay target) {
  return target.selectionDelegate;
}

Widget Function(BuildContext)? _TextSelectionOverlay_contextMenuBuilder$(
    TextSelectionOverlay target) {
  return target.contextMenuBuilder;
}

TextEditingValue _TextSelectionOverlay_value$(TextSelectionOverlay target) {
  return target.value;
}

bool _TextSelectionOverlay_handlesVisible$(TextSelectionOverlay target) {
  return target.handlesVisible;
}

void _TextSelectionOverlay_handlesVisible_set$(
  TextSelectionOverlay target,
  bool other,
) {
  target.handlesVisible = other;
}

bool _TextSelectionOverlay_handlesAreVisible$(TextSelectionOverlay target) {
  return target.handlesAreVisible;
}

bool _TextSelectionOverlay_toolbarIsVisible$(TextSelectionOverlay target) {
  return target.toolbarIsVisible;
}

bool _TextSelectionOverlay_magnifierIsVisible$(TextSelectionOverlay target) {
  return target.magnifierIsVisible;
}

bool _TextSelectionOverlay_spellCheckToolbarIsVisible$(
    TextSelectionOverlay target) {
  return target.spellCheckToolbarIsVisible;
}

Function _TextSelectionOverlay_showHandles$(
  m.Scope scope,
  TextSelectionOverlay target,
) =>
    target.showHandles;
Function _TextSelectionOverlay_hideHandles$(
  m.Scope scope,
  TextSelectionOverlay target,
) =>
    target.hideHandles;
Function _TextSelectionOverlay_showToolbar$(
  m.Scope scope,
  TextSelectionOverlay target,
) =>
    target.showToolbar;
Function _TextSelectionOverlay_showSpellCheckSuggestionsToolbar$(
  m.Scope scope,
  TextSelectionOverlay target,
) =>
    (m.FunctionPointer spellCheckSuggestionsToolbarBuilder) {
      Widget spellCheckSuggestionsToolbarBuilderProxy(
              BuildContext spellCheckSuggestionsToolbarBuilder_context) =>
          scope.engine.callFunctionPointer(
            scope,
            spellCheckSuggestionsToolbarBuilder,
            [spellCheckSuggestionsToolbarBuilder_context],
            {},
          );
      target.showSpellCheckSuggestionsToolbar(
          spellCheckSuggestionsToolbarBuilderProxy);
    };
Function _TextSelectionOverlay_showMagnifier$(
  m.Scope scope,
  TextSelectionOverlay target,
) =>
    target.showMagnifier;
Function _TextSelectionOverlay_updateMagnifier$(
  m.Scope scope,
  TextSelectionOverlay target,
) =>
    target.updateMagnifier;
Function _TextSelectionOverlay_hideMagnifier$(
  m.Scope scope,
  TextSelectionOverlay target,
) =>
    target.hideMagnifier;
Function _TextSelectionOverlay_update$(
  m.Scope scope,
  TextSelectionOverlay target,
) =>
    target.update;
Function _TextSelectionOverlay_updateForScroll$(
  m.Scope scope,
  TextSelectionOverlay target,
) =>
    target.updateForScroll;
Function _TextSelectionOverlay_hide$(
  m.Scope scope,
  TextSelectionOverlay target,
) =>
    target.hide;
Function _TextSelectionOverlay_hideToolbar$(
  m.Scope scope,
  TextSelectionOverlay target,
) =>
    target.hideToolbar;
Function _TextSelectionOverlay_dispose$(
  m.Scope scope,
  TextSelectionOverlay target,
) =>
    target.dispose;
Function SelectionOverlay_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SelectionOverlay;
Function SelectionOverlay_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SelectionOverlay;
BuildContext _SelectionOverlay_context$(SelectionOverlay target) {
  return target.context;
}

TextMagnifierConfiguration _SelectionOverlay_magnifierConfiguration$(
    SelectionOverlay target) {
  return target.magnifierConfiguration;
}

ValueListenable<bool>? _SelectionOverlay_startHandlesVisible$(
    SelectionOverlay target) {
  return target.startHandlesVisible;
}

void Function(DragStartDetails)? _SelectionOverlay_onStartHandleDragStart$(
    SelectionOverlay target) {
  return target.onStartHandleDragStart;
}

void Function(DragUpdateDetails)? _SelectionOverlay_onStartHandleDragUpdate$(
    SelectionOverlay target) {
  return target.onStartHandleDragUpdate;
}

void Function(DragEndDetails)? _SelectionOverlay_onStartHandleDragEnd$(
    SelectionOverlay target) {
  return target.onStartHandleDragEnd;
}

ValueListenable<bool>? _SelectionOverlay_endHandlesVisible$(
    SelectionOverlay target) {
  return target.endHandlesVisible;
}

void Function(DragStartDetails)? _SelectionOverlay_onEndHandleDragStart$(
    SelectionOverlay target) {
  return target.onEndHandleDragStart;
}

void Function(DragUpdateDetails)? _SelectionOverlay_onEndHandleDragUpdate$(
    SelectionOverlay target) {
  return target.onEndHandleDragUpdate;
}

void Function(DragEndDetails)? _SelectionOverlay_onEndHandleDragEnd$(
    SelectionOverlay target) {
  return target.onEndHandleDragEnd;
}

ValueListenable<bool>? _SelectionOverlay_toolbarVisible$(
    SelectionOverlay target) {
  return target.toolbarVisible;
}

Widget? _SelectionOverlay_debugRequiredFor$(SelectionOverlay target) {
  return target.debugRequiredFor;
}

LayerLink _SelectionOverlay_toolbarLayerLink$(SelectionOverlay target) {
  return target.toolbarLayerLink;
}

LayerLink _SelectionOverlay_startHandleLayerLink$(SelectionOverlay target) {
  return target.startHandleLayerLink;
}

LayerLink _SelectionOverlay_endHandleLayerLink$(SelectionOverlay target) {
  return target.endHandleLayerLink;
}

TextSelectionControls? _SelectionOverlay_selectionControls$(
    SelectionOverlay target) {
  return target.selectionControls;
}

TextSelectionDelegate? _SelectionOverlay_selectionDelegate$(
    SelectionOverlay target) {
  return target.selectionDelegate;
}

DragStartBehavior _SelectionOverlay_dragStartBehavior$(
    SelectionOverlay target) {
  return target.dragStartBehavior;
}

void Function()? _SelectionOverlay_onSelectionHandleTapped$(
    SelectionOverlay target) {
  return target.onSelectionHandleTapped;
}

ClipboardStatusNotifier? _SelectionOverlay_clipboardStatus$(
    SelectionOverlay target) {
  return target.clipboardStatus;
}

Duration _SelectionOverlay_fadeDuration$() {
  return SelectionOverlay.fadeDuration;
}

TextSelectionHandleType _SelectionOverlay_startHandleType$(
    SelectionOverlay target) {
  return target.startHandleType;
}

void _SelectionOverlay_startHandleType_set$(
  SelectionOverlay target,
  TextSelectionHandleType other,
) {
  target.startHandleType = other;
}

double _SelectionOverlay_lineHeightAtStart$(SelectionOverlay target) {
  return target.lineHeightAtStart;
}

void _SelectionOverlay_lineHeightAtStart_set$(
  SelectionOverlay target,
  double other,
) {
  target.lineHeightAtStart = other;
}

TextSelectionHandleType _SelectionOverlay_endHandleType$(
    SelectionOverlay target) {
  return target.endHandleType;
}

void _SelectionOverlay_endHandleType_set$(
  SelectionOverlay target,
  TextSelectionHandleType other,
) {
  target.endHandleType = other;
}

double _SelectionOverlay_lineHeightAtEnd$(SelectionOverlay target) {
  return target.lineHeightAtEnd;
}

void _SelectionOverlay_lineHeightAtEnd_set$(
  SelectionOverlay target,
  double other,
) {
  target.lineHeightAtEnd = other;
}

List<TextSelectionPoint> _SelectionOverlay_selectionEndpoints$(
    SelectionOverlay target) {
  return target.selectionEndpoints;
}

void _SelectionOverlay_selectionEndpoints_set$(
  SelectionOverlay target,
  List<TextSelectionPoint> other,
) {
  target.selectionEndpoints = other;
}

void _SelectionOverlay_toolbarLocation_set$(
  SelectionOverlay target,
  Offset? other,
) {
  target.toolbarLocation = other;
}

Function _SelectionOverlay_showMagnifier$(
  m.Scope scope,
  SelectionOverlay target,
) =>
    target.showMagnifier;
Function _SelectionOverlay_hideMagnifier$(
  m.Scope scope,
  SelectionOverlay target,
) =>
    target.hideMagnifier;
Function _SelectionOverlay_showHandles$(
  m.Scope scope,
  SelectionOverlay target,
) =>
    target.showHandles;
Function _SelectionOverlay_hideHandles$(
  m.Scope scope,
  SelectionOverlay target,
) =>
    target.hideHandles;
Function _SelectionOverlay_showToolbar$(
  m.Scope scope,
  SelectionOverlay target,
) =>
    ({
      BuildContext? context,
      m.FunctionPointer? contextMenuBuilder,
    }) {
      Widget contextMenuBuilderProxy(BuildContext contextMenuBuilder_context) =>
          scope.engine.callFunctionPointer(
            scope,
            contextMenuBuilder!,
            [contextMenuBuilder_context],
            {},
          );
      target.showToolbar(
        context: context,
        contextMenuBuilder:
            contextMenuBuilder == null ? null : contextMenuBuilderProxy,
      );
    };
Function _SelectionOverlay_showSpellCheckSuggestionsToolbar$(
  m.Scope scope,
  SelectionOverlay target,
) =>
    ({
      required m.FunctionPointer builder,
      BuildContext? context,
    }) {
      Widget builderProxy(BuildContext builder_context) =>
          scope.engine.callFunctionPointer(
            scope,
            builder,
            [builder_context],
            {},
          );
      target.showSpellCheckSuggestionsToolbar(
        builder: builderProxy,
        context: context,
      );
    };
Function _SelectionOverlay_markNeedsBuild$(
  m.Scope scope,
  SelectionOverlay target,
) =>
    target.markNeedsBuild;
Function _SelectionOverlay_hide$(
  m.Scope scope,
  SelectionOverlay target,
) =>
    target.hide;
Function _SelectionOverlay_hideToolbar$(
  m.Scope scope,
  SelectionOverlay target,
) =>
    target.hideToolbar;
Function _SelectionOverlay_dispose$(
  m.Scope scope,
  SelectionOverlay target,
) =>
    target.dispose;
Function _SelectionOverlay_updateMagnifier$(
  m.Scope scope,
  SelectionOverlay target,
) =>
    target.updateMagnifier;
Function TextSelectionGestureDetectorBuilderDelegate_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as TextSelectionGestureDetectorBuilderDelegate;
Function TextSelectionGestureDetectorBuilderDelegate_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is TextSelectionGestureDetectorBuilderDelegate;
GlobalKey<EditableTextState>
    _TextSelectionGestureDetectorBuilderDelegate_editableTextKey$(
        TextSelectionGestureDetectorBuilderDelegate target) {
  return target.editableTextKey;
}

bool _TextSelectionGestureDetectorBuilderDelegate_forcePressEnabled$(
    TextSelectionGestureDetectorBuilderDelegate target) {
  return target.forcePressEnabled;
}

bool _TextSelectionGestureDetectorBuilderDelegate_selectionEnabled$(
    TextSelectionGestureDetectorBuilderDelegate target) {
  return target.selectionEnabled;
}

Function TextSelectionGestureDetectorBuilder_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as TextSelectionGestureDetectorBuilder;
Function TextSelectionGestureDetectorBuilder_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is TextSelectionGestureDetectorBuilder;
TextSelectionGestureDetectorBuilderDelegate
    _TextSelectionGestureDetectorBuilder_delegate$(
        TextSelectionGestureDetectorBuilder target) {
  return target.delegate;
}

bool _TextSelectionGestureDetectorBuilder_shouldShowSelectionToolbar$(
    TextSelectionGestureDetectorBuilder target) {
  return target.shouldShowSelectionToolbar;
}

EditableTextState _TextSelectionGestureDetectorBuilder_editableText$(
    TextSelectionGestureDetectorBuilder target) {
  return target.editableText;
}

RenderEditable _TextSelectionGestureDetectorBuilder_renderEditable$(
    TextSelectionGestureDetectorBuilder target) {
  return target.renderEditable;
}

Function _TextSelectionGestureDetectorBuilder_onTapDown$(
  m.Scope scope,
  TextSelectionGestureDetectorBuilder target,
) =>
    target.onTapDown;
Function _TextSelectionGestureDetectorBuilder_onForcePressStart$(
  m.Scope scope,
  TextSelectionGestureDetectorBuilder target,
) =>
    target.onForcePressStart;
Function _TextSelectionGestureDetectorBuilder_onForcePressEnd$(
  m.Scope scope,
  TextSelectionGestureDetectorBuilder target,
) =>
    target.onForcePressEnd;
Function _TextSelectionGestureDetectorBuilder_onSingleTapUp$(
  m.Scope scope,
  TextSelectionGestureDetectorBuilder target,
) =>
    target.onSingleTapUp;
Function _TextSelectionGestureDetectorBuilder_onSingleTapCancel$(
  m.Scope scope,
  TextSelectionGestureDetectorBuilder target,
) =>
    target.onSingleTapCancel;
Function _TextSelectionGestureDetectorBuilder_onSingleLongTapStart$(
  m.Scope scope,
  TextSelectionGestureDetectorBuilder target,
) =>
    target.onSingleLongTapStart;
Function _TextSelectionGestureDetectorBuilder_onSingleLongTapMoveUpdate$(
  m.Scope scope,
  TextSelectionGestureDetectorBuilder target,
) =>
    target.onSingleLongTapMoveUpdate;
Function _TextSelectionGestureDetectorBuilder_onSingleLongTapEnd$(
  m.Scope scope,
  TextSelectionGestureDetectorBuilder target,
) =>
    target.onSingleLongTapEnd;
Function _TextSelectionGestureDetectorBuilder_onSecondaryTap$(
  m.Scope scope,
  TextSelectionGestureDetectorBuilder target,
) =>
    target.onSecondaryTap;
Function _TextSelectionGestureDetectorBuilder_onSecondaryTapDown$(
  m.Scope scope,
  TextSelectionGestureDetectorBuilder target,
) =>
    target.onSecondaryTapDown;
Function _TextSelectionGestureDetectorBuilder_onDoubleTapDown$(
  m.Scope scope,
  TextSelectionGestureDetectorBuilder target,
) =>
    target.onDoubleTapDown;
Function _TextSelectionGestureDetectorBuilder_onTripleTapDown$(
  m.Scope scope,
  TextSelectionGestureDetectorBuilder target,
) =>
    target.onTripleTapDown;
Function _TextSelectionGestureDetectorBuilder_onDragSelectionStart$(
  m.Scope scope,
  TextSelectionGestureDetectorBuilder target,
) =>
    target.onDragSelectionStart;
Function _TextSelectionGestureDetectorBuilder_onDragSelectionUpdate$(
  m.Scope scope,
  TextSelectionGestureDetectorBuilder target,
) =>
    target.onDragSelectionUpdate;
Function _TextSelectionGestureDetectorBuilder_onDragSelectionEnd$(
  m.Scope scope,
  TextSelectionGestureDetectorBuilder target,
) =>
    target.onDragSelectionEnd;
Function _TextSelectionGestureDetectorBuilder_buildGestureDetector$(
  m.Scope scope,
  TextSelectionGestureDetectorBuilder target,
) =>
    target.buildGestureDetector;
Function TextSelectionGestureDetector_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as TextSelectionGestureDetector;
Function TextSelectionGestureDetector_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is TextSelectionGestureDetector;
void Function(TapDragDownDetails)? _TextSelectionGestureDetector_onTapDown$(
    TextSelectionGestureDetector target) {
  return target.onTapDown;
}

void Function(ForcePressDetails)?
    _TextSelectionGestureDetector_onForcePressStart$(
        TextSelectionGestureDetector target) {
  return target.onForcePressStart;
}

void Function(ForcePressDetails)?
    _TextSelectionGestureDetector_onForcePressEnd$(
        TextSelectionGestureDetector target) {
  return target.onForcePressEnd;
}

void Function()? _TextSelectionGestureDetector_onSecondaryTap$(
    TextSelectionGestureDetector target) {
  return target.onSecondaryTap;
}

void Function(TapDownDetails)?
    _TextSelectionGestureDetector_onSecondaryTapDown$(
        TextSelectionGestureDetector target) {
  return target.onSecondaryTapDown;
}

void Function(TapDragUpDetails)? _TextSelectionGestureDetector_onSingleTapUp$(
    TextSelectionGestureDetector target) {
  return target.onSingleTapUp;
}

void Function()? _TextSelectionGestureDetector_onSingleTapCancel$(
    TextSelectionGestureDetector target) {
  return target.onSingleTapCancel;
}

void Function(LongPressStartDetails)?
    _TextSelectionGestureDetector_onSingleLongTapStart$(
        TextSelectionGestureDetector target) {
  return target.onSingleLongTapStart;
}

void Function(LongPressMoveUpdateDetails)?
    _TextSelectionGestureDetector_onSingleLongTapMoveUpdate$(
        TextSelectionGestureDetector target) {
  return target.onSingleLongTapMoveUpdate;
}

void Function(LongPressEndDetails)?
    _TextSelectionGestureDetector_onSingleLongTapEnd$(
        TextSelectionGestureDetector target) {
  return target.onSingleLongTapEnd;
}

void Function(TapDragDownDetails)?
    _TextSelectionGestureDetector_onDoubleTapDown$(
        TextSelectionGestureDetector target) {
  return target.onDoubleTapDown;
}

void Function(TapDragDownDetails)?
    _TextSelectionGestureDetector_onTripleTapDown$(
        TextSelectionGestureDetector target) {
  return target.onTripleTapDown;
}

void Function(TapDragStartDetails)?
    _TextSelectionGestureDetector_onDragSelectionStart$(
        TextSelectionGestureDetector target) {
  return target.onDragSelectionStart;
}

void Function(TapDragUpdateDetails)?
    _TextSelectionGestureDetector_onDragSelectionUpdate$(
        TextSelectionGestureDetector target) {
  return target.onDragSelectionUpdate;
}

void Function(TapDragEndDetails)?
    _TextSelectionGestureDetector_onDragSelectionEnd$(
        TextSelectionGestureDetector target) {
  return target.onDragSelectionEnd;
}

HitTestBehavior? _TextSelectionGestureDetector_behavior$(
    TextSelectionGestureDetector target) {
  return target.behavior;
}

Widget _TextSelectionGestureDetector_child$(
    TextSelectionGestureDetector target) {
  return target.child;
}

Function _TextSelectionGestureDetector_createState$(
  m.Scope scope,
  TextSelectionGestureDetector target,
) =>
    target.createState;
Function ClipboardStatusNotifier_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ClipboardStatusNotifier;
Function ClipboardStatusNotifier_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ClipboardStatusNotifier;
bool _ClipboardStatusNotifier_disposed$(ClipboardStatusNotifier target) {
  return target.disposed;
}

Function _ClipboardStatusNotifier_update$(
  m.Scope scope,
  ClipboardStatusNotifier target,
) =>
    target.update;
Function _ClipboardStatusNotifier_addListener$(
  m.Scope scope,
  ClipboardStatusNotifier target,
) =>
    (m.FunctionPointer listener) {
      void listenerProxy() => scope.engine.callFunctionPointer(
            scope,
            listener,
            [],
            {},
          );
      target.addListener(listenerProxy);
    };
Function _ClipboardStatusNotifier_removeListener$(
  m.Scope scope,
  ClipboardStatusNotifier target,
) =>
    (m.FunctionPointer listener) {
      void listenerProxy() => scope.engine.callFunctionPointer(
            scope,
            listener,
            [],
            {},
          );
      target.removeListener(listenerProxy);
    };
Function _ClipboardStatusNotifier_didChangeAppLifecycleState$(
  m.Scope scope,
  ClipboardStatusNotifier target,
) =>
    target.didChangeAppLifecycleState;
Function _ClipboardStatusNotifier_dispose$(
  m.Scope scope,
  ClipboardStatusNotifier target,
) =>
    target.dispose;
ClipboardStatus _ClipboardStatus_pasteable$() {
  return ClipboardStatus.pasteable;
}

ClipboardStatus _ClipboardStatus_unknown$() {
  return ClipboardStatus.unknown;
}

ClipboardStatus _ClipboardStatus_notPasteable$() {
  return ClipboardStatus.notPasteable;
}

List<ClipboardStatus> _ClipboardStatus_values$() {
  return ClipboardStatus.values;
}
