// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/tabs.dart';
import 'dart:math';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart' show DragStartBehavior;
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/app_bar.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/tab_bar_theme.dart';
import 'package:flutter/src/material/tab_controller.dart';
import 'package:flutter/src/material/tab_indicator.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/tabs.dart',
  {
    'TabBarIndicatorSize.tab': _TabBarIndicatorSize_tab$,
    'TabBarIndicatorSize.label': _TabBarIndicatorSize_label$,
    'TabBarIndicatorSize.values': _TabBarIndicatorSize_values$,
  },
  {},
  {
    'Tab': m.ClassMirror(
      'Tab',
      {
        'text': _Tab_text$,
        'child': _Tab_child$,
        'icon': _Tab_icon$,
        'iconMargin': _Tab_iconMargin$,
        'height': _Tab_height$,
        'preferredSize': _Tab_preferredSize$,
        'build': _Tab_build$,
        'debugFillProperties': _Tab_debugFillProperties$,
      },
      {},
    ),
    'TabBar': m.ClassMirror(
      'TabBar',
      {
        'tabs': _TabBar_tabs$,
        'controller': _TabBar_controller$,
        'isScrollable': _TabBar_isScrollable$,
        'padding': _TabBar_padding$,
        'indicatorColor': _TabBar_indicatorColor$,
        'indicatorWeight': _TabBar_indicatorWeight$,
        'indicatorPadding': _TabBar_indicatorPadding$,
        'indicator': _TabBar_indicator$,
        'automaticIndicatorColorAdjustment':
            _TabBar_automaticIndicatorColorAdjustment$,
        'indicatorSize': _TabBar_indicatorSize$,
        'dividerColor': _TabBar_dividerColor$,
        'labelColor': _TabBar_labelColor$,
        'unselectedLabelColor': _TabBar_unselectedLabelColor$,
        'labelStyle': _TabBar_labelStyle$,
        'unselectedLabelStyle': _TabBar_unselectedLabelStyle$,
        'labelPadding': _TabBar_labelPadding$,
        'overlayColor': _TabBar_overlayColor$,
        'dragStartBehavior': _TabBar_dragStartBehavior$,
        'mouseCursor': _TabBar_mouseCursor$,
        'enableFeedback': _TabBar_enableFeedback$,
        'onTap': _TabBar_onTap$,
        'physics': _TabBar_physics$,
        'splashFactory': _TabBar_splashFactory$,
        'splashBorderRadius': _TabBar_splashBorderRadius$,
        'preferredSize': _TabBar_preferredSize$,
        'tabHasTextAndIcon': _TabBar_tabHasTextAndIcon$,
        'createState': _TabBar_createState$,
      },
      {},
    ),
    'TabBarView': m.ClassMirror(
      'TabBarView',
      {
        'controller': _TabBarView_controller$,
        'children': _TabBarView_children$,
        'physics': _TabBarView_physics$,
        'dragStartBehavior': _TabBarView_dragStartBehavior$,
        'viewportFraction': _TabBarView_viewportFraction$,
        'clipBehavior': _TabBarView_clipBehavior$,
        'createState': _TabBarView_createState$,
      },
      {},
    ),
    'TabPageSelectorIndicator': m.ClassMirror(
      'TabPageSelectorIndicator',
      {
        'backgroundColor': _TabPageSelectorIndicator_backgroundColor$,
        'borderColor': _TabPageSelectorIndicator_borderColor$,
        'size': _TabPageSelectorIndicator_size$,
        'borderStyle': _TabPageSelectorIndicator_borderStyle$,
        'build': _TabPageSelectorIndicator_build$,
      },
      {},
    ),
    'TabPageSelector': m.ClassMirror(
      'TabPageSelector',
      {
        'controller': _TabPageSelector_controller$,
        'indicatorSize': _TabPageSelector_indicatorSize$,
        'color': _TabPageSelector_color$,
        'selectedColor': _TabPageSelector_selectedColor$,
        'borderStyle': _TabPageSelector_borderStyle$,
        'build': _TabPageSelector_build$,
      },
      {},
    ),
    'TabBarIndicatorSize': m.ClassMirror(
      'TabBarIndicatorSize',
      {},
      {},
    ),
  },
);
String? _Tab_text$(Tab target) {
  return target.text;
}

Widget? _Tab_child$(Tab target) {
  return target.child;
}

Widget? _Tab_icon$(Tab target) {
  return target.icon;
}

EdgeInsetsGeometry _Tab_iconMargin$(Tab target) {
  return target.iconMargin;
}

double? _Tab_height$(Tab target) {
  return target.height;
}

Size _Tab_preferredSize$(Tab target) {
  return target.preferredSize;
}

Function _Tab_build$(
  m.Scope scope,
  Tab target,
) =>
    target.build;
Function _Tab_debugFillProperties$(
  m.Scope scope,
  Tab target,
) =>
    target.debugFillProperties;
List<Widget> _TabBar_tabs$(TabBar target) {
  return target.tabs;
}

TabController? _TabBar_controller$(TabBar target) {
  return target.controller;
}

bool _TabBar_isScrollable$(TabBar target) {
  return target.isScrollable;
}

EdgeInsetsGeometry? _TabBar_padding$(TabBar target) {
  return target.padding;
}

Color? _TabBar_indicatorColor$(TabBar target) {
  return target.indicatorColor;
}

double _TabBar_indicatorWeight$(TabBar target) {
  return target.indicatorWeight;
}

EdgeInsetsGeometry _TabBar_indicatorPadding$(TabBar target) {
  return target.indicatorPadding;
}

Decoration? _TabBar_indicator$(TabBar target) {
  return target.indicator;
}

bool _TabBar_automaticIndicatorColorAdjustment$(TabBar target) {
  return target.automaticIndicatorColorAdjustment;
}

TabBarIndicatorSize? _TabBar_indicatorSize$(TabBar target) {
  return target.indicatorSize;
}

Color? _TabBar_dividerColor$(TabBar target) {
  return target.dividerColor;
}

Color? _TabBar_labelColor$(TabBar target) {
  return target.labelColor;
}

Color? _TabBar_unselectedLabelColor$(TabBar target) {
  return target.unselectedLabelColor;
}

TextStyle? _TabBar_labelStyle$(TabBar target) {
  return target.labelStyle;
}

TextStyle? _TabBar_unselectedLabelStyle$(TabBar target) {
  return target.unselectedLabelStyle;
}

EdgeInsetsGeometry? _TabBar_labelPadding$(TabBar target) {
  return target.labelPadding;
}

MaterialStateProperty<Color?>? _TabBar_overlayColor$(TabBar target) {
  return target.overlayColor;
}

DragStartBehavior _TabBar_dragStartBehavior$(TabBar target) {
  return target.dragStartBehavior;
}

MouseCursor? _TabBar_mouseCursor$(TabBar target) {
  return target.mouseCursor;
}

bool? _TabBar_enableFeedback$(TabBar target) {
  return target.enableFeedback;
}

void Function(int)? _TabBar_onTap$(TabBar target) {
  return target.onTap;
}

ScrollPhysics? _TabBar_physics$(TabBar target) {
  return target.physics;
}

InteractiveInkFeatureFactory? _TabBar_splashFactory$(TabBar target) {
  return target.splashFactory;
}

BorderRadius? _TabBar_splashBorderRadius$(TabBar target) {
  return target.splashBorderRadius;
}

Size _TabBar_preferredSize$(TabBar target) {
  return target.preferredSize;
}

bool _TabBar_tabHasTextAndIcon$(TabBar target) {
  return target.tabHasTextAndIcon;
}

Function _TabBar_createState$(
  m.Scope scope,
  TabBar target,
) =>
    target.createState;
TabController? _TabBarView_controller$(TabBarView target) {
  return target.controller;
}

List<Widget> _TabBarView_children$(TabBarView target) {
  return target.children;
}

ScrollPhysics? _TabBarView_physics$(TabBarView target) {
  return target.physics;
}

DragStartBehavior _TabBarView_dragStartBehavior$(TabBarView target) {
  return target.dragStartBehavior;
}

double _TabBarView_viewportFraction$(TabBarView target) {
  return target.viewportFraction;
}

Clip _TabBarView_clipBehavior$(TabBarView target) {
  return target.clipBehavior;
}

Function _TabBarView_createState$(
  m.Scope scope,
  TabBarView target,
) =>
    target.createState;
Color _TabPageSelectorIndicator_backgroundColor$(
    TabPageSelectorIndicator target) {
  return target.backgroundColor;
}

Color _TabPageSelectorIndicator_borderColor$(TabPageSelectorIndicator target) {
  return target.borderColor;
}

double _TabPageSelectorIndicator_size$(TabPageSelectorIndicator target) {
  return target.size;
}

BorderStyle _TabPageSelectorIndicator_borderStyle$(
    TabPageSelectorIndicator target) {
  return target.borderStyle;
}

Function _TabPageSelectorIndicator_build$(
  m.Scope scope,
  TabPageSelectorIndicator target,
) =>
    target.build;
TabController? _TabPageSelector_controller$(TabPageSelector target) {
  return target.controller;
}

double _TabPageSelector_indicatorSize$(TabPageSelector target) {
  return target.indicatorSize;
}

Color? _TabPageSelector_color$(TabPageSelector target) {
  return target.color;
}

Color? _TabPageSelector_selectedColor$(TabPageSelector target) {
  return target.selectedColor;
}

BorderStyle? _TabPageSelector_borderStyle$(TabPageSelector target) {
  return target.borderStyle;
}

Function _TabPageSelector_build$(
  m.Scope scope,
  TabPageSelector target,
) =>
    target.build;
TabBarIndicatorSize _TabBarIndicatorSize_tab$() {
  return TabBarIndicatorSize.tab;
}

TabBarIndicatorSize _TabBarIndicatorSize_label$() {
  return TabBarIndicatorSize.label;
}

List<TabBarIndicatorSize> _TabBarIndicatorSize_values$() {
  return TabBarIndicatorSize.values;
}
