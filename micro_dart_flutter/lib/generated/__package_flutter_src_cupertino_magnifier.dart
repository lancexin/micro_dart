// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/magnifier.dart';
import 'dart:math';
import 'package:flutter/widgets.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/magnifier.dart',
  {
    'CupertinoTextMagnifier.': _CupertinoTextMagnifier__$,
    'CupertinoMagnifier.kMagnifierAboveFocalPoint':
        _CupertinoMagnifier_kMagnifierAboveFocalPoint$,
    'CupertinoMagnifier.kDefaultSize': _CupertinoMagnifier_kDefaultSize$,
    'CupertinoMagnifier.': _CupertinoMagnifier__$,
  },
  {},
  {
    'CupertinoTextMagnifier': m.ClassMirror(
      'CupertinoTextMagnifier',
      {
        '#as': CupertinoTextMagnifier_as$,
        '#is': CupertinoTextMagnifier_is$,
        'animationCurve': _CupertinoTextMagnifier_animationCurve$,
        'controller': _CupertinoTextMagnifier_controller$,
        'dragResistance': _CupertinoTextMagnifier_dragResistance$,
        'hideBelowThreshold': _CupertinoTextMagnifier_hideBelowThreshold$,
        'horizontalScreenEdgePadding':
            _CupertinoTextMagnifier_horizontalScreenEdgePadding$,
        'magnifierInfo': _CupertinoTextMagnifier_magnifierInfo$,
        'createState': _CupertinoTextMagnifier_createState$,
      },
      {},
    ),
    'CupertinoMagnifier': m.ClassMirror(
      'CupertinoMagnifier',
      {
        '#as': CupertinoMagnifier_as$,
        '#is': CupertinoMagnifier_is$,
        'shadows': _CupertinoMagnifier_shadows$,
        'borderSide': _CupertinoMagnifier_borderSide$,
        'size': _CupertinoMagnifier_size$,
        'borderRadius': _CupertinoMagnifier_borderRadius$,
        'inOutAnimation': _CupertinoMagnifier_inOutAnimation$,
        'additionalFocalPointOffset':
            _CupertinoMagnifier_additionalFocalPointOffset$,
        'build': _CupertinoMagnifier_build$,
      },
      {},
    ),
  },
);
Function CupertinoTextMagnifier_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoTextMagnifier;
Function CupertinoTextMagnifier_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoTextMagnifier;
Function _CupertinoTextMagnifier_animationCurve$(
  m.Scope scope$,
  CupertinoTextMagnifier target$,
) =>
    () {
      return target$.animationCurve;
    };
Function _CupertinoTextMagnifier_controller$(
  m.Scope scope$,
  CupertinoTextMagnifier target$,
) =>
    () {
      return target$.controller;
    };
Function _CupertinoTextMagnifier_dragResistance$(
  m.Scope scope$,
  CupertinoTextMagnifier target$,
) =>
    () {
      return target$.dragResistance;
    };
Function _CupertinoTextMagnifier_hideBelowThreshold$(
  m.Scope scope$,
  CupertinoTextMagnifier target$,
) =>
    () {
      return target$.hideBelowThreshold;
    };
Function _CupertinoTextMagnifier_horizontalScreenEdgePadding$(
  m.Scope scope$,
  CupertinoTextMagnifier target$,
) =>
    () {
      return target$.horizontalScreenEdgePadding;
    };
Function _CupertinoTextMagnifier_magnifierInfo$(
  m.Scope scope$,
  CupertinoTextMagnifier target$,
) =>
    () {
      return target$.magnifierInfo;
    };
Function _CupertinoTextMagnifier__$(m.Scope scope$) => ({
      Key? key,
      Curve? animationCurve,
      required MagnifierController controller,
      double? dragResistance,
      double? hideBelowThreshold,
      double? horizontalScreenEdgePadding,
      required ValueNotifier<MagnifierInfo> magnifierInfo,
    }) {
      return CupertinoTextMagnifier(
        animationCurve: animationCurve ?? Curves.easeOut,
        controller: controller,
        dragResistance: dragResistance ?? 10.0,
        hideBelowThreshold: hideBelowThreshold ?? 48.0,
        horizontalScreenEdgePadding: horizontalScreenEdgePadding ?? 10.0,
        key: key,
        magnifierInfo: magnifierInfo,
      );
    };
Function _CupertinoTextMagnifier_createState$(
  m.Scope scope$,
  CupertinoTextMagnifier target$,
) =>
    target$.createState;
Function CupertinoMagnifier_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoMagnifier;
Function CupertinoMagnifier_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoMagnifier;
Function _CupertinoMagnifier_shadows$(
  m.Scope scope$,
  CupertinoMagnifier target$,
) =>
    () {
      return target$.shadows;
    };
Function _CupertinoMagnifier_borderSide$(
  m.Scope scope$,
  CupertinoMagnifier target$,
) =>
    () {
      return target$.borderSide;
    };
Function _CupertinoMagnifier_kMagnifierAboveFocalPoint$(m.Scope scope$) =>
    () => CupertinoMagnifier.kMagnifierAboveFocalPoint;
Function _CupertinoMagnifier_kDefaultSize$(m.Scope scope$) =>
    () => CupertinoMagnifier.kDefaultSize;
Function _CupertinoMagnifier_size$(
  m.Scope scope$,
  CupertinoMagnifier target$,
) =>
    () {
      return target$.size;
    };
Function _CupertinoMagnifier_borderRadius$(
  m.Scope scope$,
  CupertinoMagnifier target$,
) =>
    () {
      return target$.borderRadius;
    };
Function _CupertinoMagnifier_inOutAnimation$(
  m.Scope scope$,
  CupertinoMagnifier target$,
) =>
    () {
      return target$.inOutAnimation;
    };
Function _CupertinoMagnifier_additionalFocalPointOffset$(
  m.Scope scope$,
  CupertinoMagnifier target$,
) =>
    () {
      return target$.additionalFocalPointOffset;
    };
Function _CupertinoMagnifier__$(m.Scope scope$) => ({
      Key? key,
      Size? size,
      BorderRadius? borderRadius,
      Offset? additionalFocalPointOffset,
      List? shadows,
      BorderSide? borderSide,
      Animation<double>? inOutAnimation,
    }) {
      return CupertinoMagnifier(
        additionalFocalPointOffset: additionalFocalPointOffset ?? Offset.zero,
        borderRadius:
            borderRadius ?? const BorderRadius.all(Radius.elliptical(60, 50)),
        borderSide: borderSide ??
            const BorderSide(color: Color.fromARGB(255, 232, 232, 232)),
        inOutAnimation: inOutAnimation,
        key: key,
        shadows: shadows == null
            ? const <BoxShadow>[
                BoxShadow(
                    color: Color.fromARGB(25, 0, 0, 0),
                    blurRadius: 11,
                    spreadRadius: 0.2)
              ]
            : List.from(shadows),
        size: size ?? CupertinoMagnifier.kDefaultSize,
      );
    };
Function _CupertinoMagnifier_build$(
  m.Scope scope$,
  CupertinoMagnifier target$,
) =>
    target$.build;
