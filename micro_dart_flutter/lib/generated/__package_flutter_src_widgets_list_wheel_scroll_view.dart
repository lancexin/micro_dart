// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/list_wheel_scroll_view.dart';
import 'dart:collection';
import 'dart:math';
import 'package:flutter/physics.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/notification_listener.dart';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/widgets/scroll_context.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_metrics.dart';
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/scroll_position.dart';
import 'package:flutter/src/widgets/scroll_position_with_single_context.dart';
import 'package:flutter/src/widgets/scrollable.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/list_wheel_scroll_view.dart',
  {
    'ListWheelChildListDelegate.': _ListWheelChildListDelegate__$,
    'ListWheelChildLoopingListDelegate.': _ListWheelChildLoopingListDelegate__$,
    'ListWheelChildBuilderDelegate.': _ListWheelChildBuilderDelegate__$,
    'FixedExtentScrollController.': _FixedExtentScrollController__$,
    'FixedExtentMetrics.': _FixedExtentMetrics__$,
    'FixedExtentScrollPhysics.': _FixedExtentScrollPhysics__$,
    'ListWheelScrollView.': _ListWheelScrollView__$,
    'ListWheelScrollView.useDelegate': _ListWheelScrollView_useDelegate_$,
    'ListWheelElement.': _ListWheelElement__$,
    'ListWheelViewport.': _ListWheelViewport__$,
  },
  {},
  {
    'ListWheelChildDelegate': m.ClassMirror(
      'ListWheelChildDelegate',
      {
        '#as': ListWheelChildDelegate_as$,
        '#is': ListWheelChildDelegate_is$,
        'estimatedChildCount': _ListWheelChildDelegate_estimatedChildCount$,
        'build': _ListWheelChildDelegate_build$,
        'trueIndexOf': _ListWheelChildDelegate_trueIndexOf$,
        'shouldRebuild': _ListWheelChildDelegate_shouldRebuild$,
      },
      {},
    ),
    'ListWheelChildListDelegate': m.ClassMirror(
      'ListWheelChildListDelegate',
      {
        '#as': ListWheelChildListDelegate_as$,
        '#is': ListWheelChildListDelegate_is$,
        'children': _ListWheelChildListDelegate_children$,
        'estimatedChildCount': _ListWheelChildListDelegate_estimatedChildCount$,
        'build': _ListWheelChildListDelegate_build$,
        'shouldRebuild': _ListWheelChildListDelegate_shouldRebuild$,
      },
      {},
    ),
    'ListWheelChildLoopingListDelegate': m.ClassMirror(
      'ListWheelChildLoopingListDelegate',
      {
        '#as': ListWheelChildLoopingListDelegate_as$,
        '#is': ListWheelChildLoopingListDelegate_is$,
        'children': _ListWheelChildLoopingListDelegate_children$,
        'estimatedChildCount':
            _ListWheelChildLoopingListDelegate_estimatedChildCount$,
        'trueIndexOf': _ListWheelChildLoopingListDelegate_trueIndexOf$,
        'build': _ListWheelChildLoopingListDelegate_build$,
        'shouldRebuild': _ListWheelChildLoopingListDelegate_shouldRebuild$,
      },
      {},
    ),
    'ListWheelChildBuilderDelegate': m.ClassMirror(
      'ListWheelChildBuilderDelegate',
      {
        '#as': ListWheelChildBuilderDelegate_as$,
        '#is': ListWheelChildBuilderDelegate_is$,
        'builder': _ListWheelChildBuilderDelegate_builder$,
        'childCount': _ListWheelChildBuilderDelegate_childCount$,
        'estimatedChildCount':
            _ListWheelChildBuilderDelegate_estimatedChildCount$,
        'build': _ListWheelChildBuilderDelegate_build$,
        'shouldRebuild': _ListWheelChildBuilderDelegate_shouldRebuild$,
      },
      {},
    ),
    'FixedExtentScrollController': m.ClassMirror(
      'FixedExtentScrollController',
      {
        '#as': FixedExtentScrollController_as$,
        '#is': FixedExtentScrollController_is$,
        'initialItem': _FixedExtentScrollController_initialItem$,
        'selectedItem': _FixedExtentScrollController_selectedItem$,
        'animateToItem': _FixedExtentScrollController_animateToItem$,
        'jumpToItem': _FixedExtentScrollController_jumpToItem$,
        'createScrollPosition':
            _FixedExtentScrollController_createScrollPosition$,
      },
      {},
    ),
    'FixedExtentMetrics': m.ClassMirror(
      'FixedExtentMetrics',
      {
        '#as': FixedExtentMetrics_as$,
        '#is': FixedExtentMetrics_is$,
        'itemIndex': _FixedExtentMetrics_itemIndex$,
        'copyWith': _FixedExtentMetrics_copyWith$,
      },
      {},
    ),
    'FixedExtentScrollPhysics': m.ClassMirror(
      'FixedExtentScrollPhysics',
      {
        '#as': FixedExtentScrollPhysics_as$,
        '#is': FixedExtentScrollPhysics_is$,
        'applyTo': _FixedExtentScrollPhysics_applyTo$,
        'createBallisticSimulation':
            _FixedExtentScrollPhysics_createBallisticSimulation$,
      },
      {},
    ),
    'ListWheelScrollView': m.ClassMirror(
      'ListWheelScrollView',
      {
        '#as': ListWheelScrollView_as$,
        '#is': ListWheelScrollView_is$,
        'controller': _ListWheelScrollView_controller$,
        'physics': _ListWheelScrollView_physics$,
        'diameterRatio': _ListWheelScrollView_diameterRatio$,
        'perspective': _ListWheelScrollView_perspective$,
        'offAxisFraction': _ListWheelScrollView_offAxisFraction$,
        'useMagnifier': _ListWheelScrollView_useMagnifier$,
        'magnification': _ListWheelScrollView_magnification$,
        'overAndUnderCenterOpacity':
            _ListWheelScrollView_overAndUnderCenterOpacity$,
        'itemExtent': _ListWheelScrollView_itemExtent$,
        'squeeze': _ListWheelScrollView_squeeze$,
        'onSelectedItemChanged': _ListWheelScrollView_onSelectedItemChanged$,
        'renderChildrenOutsideViewport':
            _ListWheelScrollView_renderChildrenOutsideViewport$,
        'childDelegate': _ListWheelScrollView_childDelegate$,
        'clipBehavior': _ListWheelScrollView_clipBehavior$,
        'restorationId': _ListWheelScrollView_restorationId$,
        'scrollBehavior': _ListWheelScrollView_scrollBehavior$,
        'createState': _ListWheelScrollView_createState$,
      },
      {},
    ),
    'ListWheelElement': m.ClassMirror(
      'ListWheelElement',
      {
        '#as': ListWheelElement_as$,
        '#is': ListWheelElement_is$,
        'renderObject': _ListWheelElement_renderObject$,
        'childCount': _ListWheelElement_childCount$,
        'update': _ListWheelElement_update$,
        'performRebuild': _ListWheelElement_performRebuild$,
        'retrieveWidget': _ListWheelElement_retrieveWidget$,
        'childExistsAt': _ListWheelElement_childExistsAt$,
        'createChild': _ListWheelElement_createChild$,
        'removeChild': _ListWheelElement_removeChild$,
        'updateChild': _ListWheelElement_updateChild$,
        'insertRenderObjectChild': _ListWheelElement_insertRenderObjectChild$,
        'moveRenderObjectChild': _ListWheelElement_moveRenderObjectChild$,
        'removeRenderObjectChild': _ListWheelElement_removeRenderObjectChild$,
        'visitChildren': _ListWheelElement_visitChildren$,
        'forgetChild': _ListWheelElement_forgetChild$,
      },
      {},
    ),
    'ListWheelViewport': m.ClassMirror(
      'ListWheelViewport',
      {
        '#as': ListWheelViewport_as$,
        '#is': ListWheelViewport_is$,
        'diameterRatio': _ListWheelViewport_diameterRatio$,
        'perspective': _ListWheelViewport_perspective$,
        'offAxisFraction': _ListWheelViewport_offAxisFraction$,
        'useMagnifier': _ListWheelViewport_useMagnifier$,
        'magnification': _ListWheelViewport_magnification$,
        'overAndUnderCenterOpacity':
            _ListWheelViewport_overAndUnderCenterOpacity$,
        'itemExtent': _ListWheelViewport_itemExtent$,
        'squeeze': _ListWheelViewport_squeeze$,
        'renderChildrenOutsideViewport':
            _ListWheelViewport_renderChildrenOutsideViewport$,
        'offset': _ListWheelViewport_offset$,
        'childDelegate': _ListWheelViewport_childDelegate$,
        'clipBehavior': _ListWheelViewport_clipBehavior$,
        'createElement': _ListWheelViewport_createElement$,
        'createRenderObject': _ListWheelViewport_createRenderObject$,
        'updateRenderObject': _ListWheelViewport_updateRenderObject$,
      },
      {},
    ),
  },
);
Function ListWheelChildDelegate_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ListWheelChildDelegate;
Function ListWheelChildDelegate_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ListWheelChildDelegate;
Function _ListWheelChildDelegate_estimatedChildCount$(
  m.Scope scope$,
  ListWheelChildDelegate target$,
) =>
    () {
      return target$.estimatedChildCount;
    };
Function _ListWheelChildDelegate_build$(
  m.Scope scope$,
  ListWheelChildDelegate target$,
) =>
    target$.build;
Function _ListWheelChildDelegate_trueIndexOf$(
  m.Scope scope$,
  ListWheelChildDelegate target$,
) =>
    target$.trueIndexOf;
Function _ListWheelChildDelegate_shouldRebuild$(
  m.Scope scope$,
  ListWheelChildDelegate target$,
) =>
    target$.shouldRebuild;
Function ListWheelChildListDelegate_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ListWheelChildListDelegate;
Function ListWheelChildListDelegate_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ListWheelChildListDelegate;
Function _ListWheelChildListDelegate_children$(
  m.Scope scope$,
  ListWheelChildListDelegate target$,
) =>
    () {
      return target$.children;
    };
Function _ListWheelChildListDelegate_estimatedChildCount$(
  m.Scope scope$,
  ListWheelChildListDelegate target$,
) =>
    () {
      return target$.estimatedChildCount;
    };
Function _ListWheelChildListDelegate__$(m.Scope scope$) =>
    ({required List children}) {
      return ListWheelChildListDelegate(children: List.from(children));
    };
Function _ListWheelChildListDelegate_build$(
  m.Scope scope$,
  ListWheelChildListDelegate target$,
) =>
    target$.build;
Function _ListWheelChildListDelegate_shouldRebuild$(
  m.Scope scope$,
  ListWheelChildListDelegate target$,
) =>
    target$.shouldRebuild;
Function ListWheelChildLoopingListDelegate_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ListWheelChildLoopingListDelegate;
Function ListWheelChildLoopingListDelegate_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ListWheelChildLoopingListDelegate;
Function _ListWheelChildLoopingListDelegate_children$(
  m.Scope scope$,
  ListWheelChildLoopingListDelegate target$,
) =>
    () {
      return target$.children;
    };
Function _ListWheelChildLoopingListDelegate_estimatedChildCount$(
  m.Scope scope$,
  ListWheelChildLoopingListDelegate target$,
) =>
    () {
      return target$.estimatedChildCount;
    };
Function _ListWheelChildLoopingListDelegate__$(m.Scope scope$) =>
    ({required List children}) {
      return ListWheelChildLoopingListDelegate(children: List.from(children));
    };
Function _ListWheelChildLoopingListDelegate_trueIndexOf$(
  m.Scope scope$,
  ListWheelChildLoopingListDelegate target$,
) =>
    target$.trueIndexOf;
Function _ListWheelChildLoopingListDelegate_build$(
  m.Scope scope$,
  ListWheelChildLoopingListDelegate target$,
) =>
    target$.build;
Function _ListWheelChildLoopingListDelegate_shouldRebuild$(
  m.Scope scope$,
  ListWheelChildLoopingListDelegate target$,
) =>
    target$.shouldRebuild;
Function ListWheelChildBuilderDelegate_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ListWheelChildBuilderDelegate;
Function ListWheelChildBuilderDelegate_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ListWheelChildBuilderDelegate;
Function _ListWheelChildBuilderDelegate_builder$(
  m.Scope scope$,
  ListWheelChildBuilderDelegate target$,
) =>
    () {
      return target$.builder;
    };
Function _ListWheelChildBuilderDelegate_childCount$(
  m.Scope scope$,
  ListWheelChildBuilderDelegate target$,
) =>
    () {
      return target$.childCount;
    };
Function _ListWheelChildBuilderDelegate_estimatedChildCount$(
  m.Scope scope$,
  ListWheelChildBuilderDelegate target$,
) =>
    () {
      return target$.estimatedChildCount;
    };
Function _ListWheelChildBuilderDelegate__$(m.Scope scope$) => ({
      required m.FunctionPointer builder,
      int? childCount,
    }) {
      Widget? builderProxy(
        BuildContext builder_context$,
        int builder_index$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [
              builder_context$,
              builder_index$,
            ],
            {},
          );
      return ListWheelChildBuilderDelegate(
        builder: builderProxy,
        childCount: childCount,
      );
    };
Function _ListWheelChildBuilderDelegate_build$(
  m.Scope scope$,
  ListWheelChildBuilderDelegate target$,
) =>
    target$.build;
Function _ListWheelChildBuilderDelegate_shouldRebuild$(
  m.Scope scope$,
  ListWheelChildBuilderDelegate target$,
) =>
    target$.shouldRebuild;
Function FixedExtentScrollController_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FixedExtentScrollController;
Function FixedExtentScrollController_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FixedExtentScrollController;
Function _FixedExtentScrollController_initialItem$(
  m.Scope scope$,
  FixedExtentScrollController target$,
) =>
    () {
      return target$.initialItem;
    };
Function _FixedExtentScrollController_selectedItem$(
  m.Scope scope$,
  FixedExtentScrollController target$,
) =>
    () {
      return target$.selectedItem;
    };
Function _FixedExtentScrollController__$(m.Scope scope$) =>
    ({int? initialItem}) {
      return FixedExtentScrollController(initialItem: initialItem ?? 0);
    };
Function _FixedExtentScrollController_animateToItem$(
  m.Scope scope$,
  FixedExtentScrollController target$,
) =>
    target$.animateToItem;
Function _FixedExtentScrollController_jumpToItem$(
  m.Scope scope$,
  FixedExtentScrollController target$,
) =>
    target$.jumpToItem;
Function _FixedExtentScrollController_createScrollPosition$(
  m.Scope scope$,
  FixedExtentScrollController target$,
) =>
    target$.createScrollPosition;
Function FixedExtentMetrics_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FixedExtentMetrics;
Function FixedExtentMetrics_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FixedExtentMetrics;
Function _FixedExtentMetrics_itemIndex$(
  m.Scope scope$,
  FixedExtentMetrics target$,
) =>
    () {
      return target$.itemIndex;
    };
Function _FixedExtentMetrics__$(m.Scope scope$) => ({
      required double? minScrollExtent,
      required double? maxScrollExtent,
      required double? pixels,
      required double? viewportDimension,
      required AxisDirection axisDirection,
      required int itemIndex,
      required double devicePixelRatio,
    }) {
      return FixedExtentMetrics(
        axisDirection: axisDirection,
        devicePixelRatio: devicePixelRatio,
        itemIndex: itemIndex,
        maxScrollExtent: maxScrollExtent,
        minScrollExtent: minScrollExtent,
        pixels: pixels,
        viewportDimension: viewportDimension,
      );
    };
Function _FixedExtentMetrics_copyWith$(
  m.Scope scope$,
  FixedExtentMetrics target$,
) =>
    target$.copyWith;
Function FixedExtentScrollPhysics_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FixedExtentScrollPhysics;
Function FixedExtentScrollPhysics_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FixedExtentScrollPhysics;
Function _FixedExtentScrollPhysics__$(m.Scope scope$) =>
    ({ScrollPhysics? parent}) {
      return FixedExtentScrollPhysics(parent: parent);
    };
Function _FixedExtentScrollPhysics_applyTo$(
  m.Scope scope$,
  FixedExtentScrollPhysics target$,
) =>
    target$.applyTo;
Function _FixedExtentScrollPhysics_createBallisticSimulation$(
  m.Scope scope$,
  FixedExtentScrollPhysics target$,
) =>
    target$.createBallisticSimulation;
Function ListWheelScrollView_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ListWheelScrollView;
Function ListWheelScrollView_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ListWheelScrollView;
Function _ListWheelScrollView_controller$(
  m.Scope scope$,
  ListWheelScrollView target$,
) =>
    () {
      return target$.controller;
    };
Function _ListWheelScrollView_physics$(
  m.Scope scope$,
  ListWheelScrollView target$,
) =>
    () {
      return target$.physics;
    };
Function _ListWheelScrollView_diameterRatio$(
  m.Scope scope$,
  ListWheelScrollView target$,
) =>
    () {
      return target$.diameterRatio;
    };
Function _ListWheelScrollView_perspective$(
  m.Scope scope$,
  ListWheelScrollView target$,
) =>
    () {
      return target$.perspective;
    };
Function _ListWheelScrollView_offAxisFraction$(
  m.Scope scope$,
  ListWheelScrollView target$,
) =>
    () {
      return target$.offAxisFraction;
    };
Function _ListWheelScrollView_useMagnifier$(
  m.Scope scope$,
  ListWheelScrollView target$,
) =>
    () {
      return target$.useMagnifier;
    };
Function _ListWheelScrollView_magnification$(
  m.Scope scope$,
  ListWheelScrollView target$,
) =>
    () {
      return target$.magnification;
    };
Function _ListWheelScrollView_overAndUnderCenterOpacity$(
  m.Scope scope$,
  ListWheelScrollView target$,
) =>
    () {
      return target$.overAndUnderCenterOpacity;
    };
Function _ListWheelScrollView_itemExtent$(
  m.Scope scope$,
  ListWheelScrollView target$,
) =>
    () {
      return target$.itemExtent;
    };
Function _ListWheelScrollView_squeeze$(
  m.Scope scope$,
  ListWheelScrollView target$,
) =>
    () {
      return target$.squeeze;
    };
Function _ListWheelScrollView_onSelectedItemChanged$(
  m.Scope scope$,
  ListWheelScrollView target$,
) =>
    () {
      return target$.onSelectedItemChanged;
    };
Function _ListWheelScrollView_renderChildrenOutsideViewport$(
  m.Scope scope$,
  ListWheelScrollView target$,
) =>
    () {
      return target$.renderChildrenOutsideViewport;
    };
Function _ListWheelScrollView_childDelegate$(
  m.Scope scope$,
  ListWheelScrollView target$,
) =>
    () {
      return target$.childDelegate;
    };
Function _ListWheelScrollView_clipBehavior$(
  m.Scope scope$,
  ListWheelScrollView target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _ListWheelScrollView_restorationId$(
  m.Scope scope$,
  ListWheelScrollView target$,
) =>
    () {
      return target$.restorationId;
    };
Function _ListWheelScrollView_scrollBehavior$(
  m.Scope scope$,
  ListWheelScrollView target$,
) =>
    () {
      return target$.scrollBehavior;
    };
Function _ListWheelScrollView__$(m.Scope scope$) => ({
      Key? key,
      ScrollController? controller,
      ScrollPhysics? physics,
      double? diameterRatio,
      double? perspective,
      double? offAxisFraction,
      bool? useMagnifier,
      double? magnification,
      double? overAndUnderCenterOpacity,
      required double itemExtent,
      double? squeeze,
      m.FunctionPointer? onSelectedItemChanged,
      bool? renderChildrenOutsideViewport,
      Clip? clipBehavior,
      String? restorationId,
      ScrollBehavior? scrollBehavior,
      required List children,
    }) {
      void onSelectedItemChangedProxy(int onSelectedItemChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSelectedItemChanged!,
            [onSelectedItemChanged_value$],
            {},
          );
      return ListWheelScrollView(
        children: List.from(children),
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        controller: controller,
        diameterRatio:
            diameterRatio ?? RenderListWheelViewport.defaultDiameterRatio,
        itemExtent: itemExtent,
        key: key,
        magnification: magnification ?? 1.0,
        offAxisFraction: offAxisFraction ?? 0.0,
        onSelectedItemChanged:
            onSelectedItemChanged == null ? null : onSelectedItemChangedProxy,
        overAndUnderCenterOpacity: overAndUnderCenterOpacity ?? 1.0,
        perspective: perspective ?? RenderListWheelViewport.defaultPerspective,
        physics: physics,
        renderChildrenOutsideViewport: renderChildrenOutsideViewport ?? false,
        restorationId: restorationId,
        scrollBehavior: scrollBehavior,
        squeeze: squeeze ?? 1.0,
        useMagnifier: useMagnifier ?? false,
      );
    };
Function _ListWheelScrollView_useDelegate_$(m.Scope scope$) => ({
      Key? key,
      ScrollController? controller,
      ScrollPhysics? physics,
      double? diameterRatio,
      double? perspective,
      double? offAxisFraction,
      bool? useMagnifier,
      double? magnification,
      double? overAndUnderCenterOpacity,
      required double itemExtent,
      double? squeeze,
      m.FunctionPointer? onSelectedItemChanged,
      bool? renderChildrenOutsideViewport,
      Clip? clipBehavior,
      String? restorationId,
      ScrollBehavior? scrollBehavior,
      required ListWheelChildDelegate childDelegate,
    }) {
      void onSelectedItemChangedProxy(int onSelectedItemChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSelectedItemChanged!,
            [onSelectedItemChanged_value$],
            {},
          );
      return ListWheelScrollView.useDelegate(
        childDelegate: childDelegate,
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        controller: controller,
        diameterRatio:
            diameterRatio ?? RenderListWheelViewport.defaultDiameterRatio,
        itemExtent: itemExtent,
        key: key,
        magnification: magnification ?? 1.0,
        offAxisFraction: offAxisFraction ?? 0.0,
        onSelectedItemChanged:
            onSelectedItemChanged == null ? null : onSelectedItemChangedProxy,
        overAndUnderCenterOpacity: overAndUnderCenterOpacity ?? 1.0,
        perspective: perspective ?? RenderListWheelViewport.defaultPerspective,
        physics: physics,
        renderChildrenOutsideViewport: renderChildrenOutsideViewport ?? false,
        restorationId: restorationId,
        scrollBehavior: scrollBehavior,
        squeeze: squeeze ?? 1.0,
        useMagnifier: useMagnifier ?? false,
      );
    };
Function _ListWheelScrollView_createState$(
  m.Scope scope$,
  ListWheelScrollView target$,
) =>
    target$.createState;
Function ListWheelElement_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ListWheelElement;
Function ListWheelElement_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ListWheelElement;
Function _ListWheelElement_renderObject$(
  m.Scope scope$,
  ListWheelElement target$,
) =>
    () {
      return target$.renderObject;
    };
Function _ListWheelElement_childCount$(
  m.Scope scope$,
  ListWheelElement target$,
) =>
    () {
      return target$.childCount;
    };
Function _ListWheelElement__$(m.Scope scope$) => (ListWheelViewport widget) {
      return ListWheelElement(widget);
    };
Function _ListWheelElement_update$(
  m.Scope scope$,
  ListWheelElement target$,
) =>
    target$.update;
Function _ListWheelElement_performRebuild$(
  m.Scope scope$,
  ListWheelElement target$,
) =>
    target$.performRebuild;
Function _ListWheelElement_retrieveWidget$(
  m.Scope scope$,
  ListWheelElement target$,
) =>
    target$.retrieveWidget;
Function _ListWheelElement_childExistsAt$(
  m.Scope scope$,
  ListWheelElement target$,
) =>
    target$.childExistsAt;
Function _ListWheelElement_createChild$(
  m.Scope scope$,
  ListWheelElement target$,
) =>
    target$.createChild;
Function _ListWheelElement_removeChild$(
  m.Scope scope$,
  ListWheelElement target$,
) =>
    target$.removeChild;
Function _ListWheelElement_updateChild$(
  m.Scope scope$,
  ListWheelElement target$,
) =>
    target$.updateChild;
Function _ListWheelElement_insertRenderObjectChild$(
  m.Scope scope$,
  ListWheelElement target$,
) =>
    target$.insertRenderObjectChild;
Function _ListWheelElement_moveRenderObjectChild$(
  m.Scope scope$,
  ListWheelElement target$,
) =>
    target$.moveRenderObjectChild;
Function _ListWheelElement_removeRenderObjectChild$(
  m.Scope scope$,
  ListWheelElement target$,
) =>
    target$.removeRenderObjectChild;
Function _ListWheelElement_visitChildren$(
  m.Scope scope$,
  ListWheelElement target$,
) =>
    (m.FunctionPointer visitor) {
      void visitorProxy(Element visitor_element$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            visitor,
            [visitor_element$],
            {},
          );
      target$.visitChildren(visitorProxy);
    };
Function _ListWheelElement_forgetChild$(
  m.Scope scope$,
  ListWheelElement target$,
) =>
    target$.forgetChild;
Function ListWheelViewport_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ListWheelViewport;
Function ListWheelViewport_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ListWheelViewport;
Function _ListWheelViewport_diameterRatio$(
  m.Scope scope$,
  ListWheelViewport target$,
) =>
    () {
      return target$.diameterRatio;
    };
Function _ListWheelViewport_perspective$(
  m.Scope scope$,
  ListWheelViewport target$,
) =>
    () {
      return target$.perspective;
    };
Function _ListWheelViewport_offAxisFraction$(
  m.Scope scope$,
  ListWheelViewport target$,
) =>
    () {
      return target$.offAxisFraction;
    };
Function _ListWheelViewport_useMagnifier$(
  m.Scope scope$,
  ListWheelViewport target$,
) =>
    () {
      return target$.useMagnifier;
    };
Function _ListWheelViewport_magnification$(
  m.Scope scope$,
  ListWheelViewport target$,
) =>
    () {
      return target$.magnification;
    };
Function _ListWheelViewport_overAndUnderCenterOpacity$(
  m.Scope scope$,
  ListWheelViewport target$,
) =>
    () {
      return target$.overAndUnderCenterOpacity;
    };
Function _ListWheelViewport_itemExtent$(
  m.Scope scope$,
  ListWheelViewport target$,
) =>
    () {
      return target$.itemExtent;
    };
Function _ListWheelViewport_squeeze$(
  m.Scope scope$,
  ListWheelViewport target$,
) =>
    () {
      return target$.squeeze;
    };
Function _ListWheelViewport_renderChildrenOutsideViewport$(
  m.Scope scope$,
  ListWheelViewport target$,
) =>
    () {
      return target$.renderChildrenOutsideViewport;
    };
Function _ListWheelViewport_offset$(
  m.Scope scope$,
  ListWheelViewport target$,
) =>
    () {
      return target$.offset;
    };
Function _ListWheelViewport_childDelegate$(
  m.Scope scope$,
  ListWheelViewport target$,
) =>
    () {
      return target$.childDelegate;
    };
Function _ListWheelViewport_clipBehavior$(
  m.Scope scope$,
  ListWheelViewport target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _ListWheelViewport__$(m.Scope scope$) => ({
      Key? key,
      double? diameterRatio,
      double? perspective,
      double? offAxisFraction,
      bool? useMagnifier,
      double? magnification,
      double? overAndUnderCenterOpacity,
      required double itemExtent,
      double? squeeze,
      bool? renderChildrenOutsideViewport,
      required ViewportOffset offset,
      required ListWheelChildDelegate childDelegate,
      Clip? clipBehavior,
    }) {
      return ListWheelViewport(
        childDelegate: childDelegate,
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        diameterRatio:
            diameterRatio ?? RenderListWheelViewport.defaultDiameterRatio,
        itemExtent: itemExtent,
        key: key,
        magnification: magnification ?? 1.0,
        offAxisFraction: offAxisFraction ?? 0.0,
        offset: offset,
        overAndUnderCenterOpacity: overAndUnderCenterOpacity ?? 1.0,
        perspective: perspective ?? RenderListWheelViewport.defaultPerspective,
        renderChildrenOutsideViewport: renderChildrenOutsideViewport ?? false,
        squeeze: squeeze ?? 1.0,
        useMagnifier: useMagnifier ?? false,
      );
    };
Function _ListWheelViewport_createElement$(
  m.Scope scope$,
  ListWheelViewport target$,
) =>
    target$.createElement;
Function _ListWheelViewport_createRenderObject$(
  m.Scope scope$,
  ListWheelViewport target$,
) =>
    target$.createRenderObject;
Function _ListWheelViewport_updateRenderObject$(
  m.Scope scope$,
  ListWheelViewport target$,
) =>
    target$.updateRenderObject;
