// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/list_wheel_scroll_view.dart';
import 'dart:collection';
import 'dart:math';
import 'package:flutter/physics.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/notification_listener.dart';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/widgets/scroll_context.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_metrics.dart';
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/scroll_position.dart';
import 'package:flutter/src/widgets/scroll_position_with_single_context.dart';
import 'package:flutter/src/widgets/scrollable.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/list_wheel_scroll_view.dart',
  {'ListWheelElement.visitChildren': _ListWheelElement_visitChildren$},
  {},
  {
    'ListWheelChildDelegate': m.ClassMirror(
      'ListWheelChildDelegate',
      {
        '#as': ListWheelChildDelegate_as$,
        '#is': ListWheelChildDelegate_is$,
        'estimatedChildCount': _ListWheelChildDelegate_estimatedChildCount$,
        'build': _ListWheelChildDelegate_build$,
        'trueIndexOf': _ListWheelChildDelegate_trueIndexOf$,
        'shouldRebuild': _ListWheelChildDelegate_shouldRebuild$,
      },
      {},
    ),
    'ListWheelChildListDelegate': m.ClassMirror(
      'ListWheelChildListDelegate',
      {
        '#as': ListWheelChildListDelegate_as$,
        '#is': ListWheelChildListDelegate_is$,
        'children': _ListWheelChildListDelegate_children$,
        'estimatedChildCount': _ListWheelChildListDelegate_estimatedChildCount$,
        'build': _ListWheelChildListDelegate_build$,
        'shouldRebuild': _ListWheelChildListDelegate_shouldRebuild$,
      },
      {},
    ),
    'ListWheelChildLoopingListDelegate': m.ClassMirror(
      'ListWheelChildLoopingListDelegate',
      {
        '#as': ListWheelChildLoopingListDelegate_as$,
        '#is': ListWheelChildLoopingListDelegate_is$,
        'children': _ListWheelChildLoopingListDelegate_children$,
        'estimatedChildCount':
            _ListWheelChildLoopingListDelegate_estimatedChildCount$,
        'trueIndexOf': _ListWheelChildLoopingListDelegate_trueIndexOf$,
        'build': _ListWheelChildLoopingListDelegate_build$,
        'shouldRebuild': _ListWheelChildLoopingListDelegate_shouldRebuild$,
      },
      {},
    ),
    'ListWheelChildBuilderDelegate': m.ClassMirror(
      'ListWheelChildBuilderDelegate',
      {
        '#as': ListWheelChildBuilderDelegate_as$,
        '#is': ListWheelChildBuilderDelegate_is$,
        'builder': _ListWheelChildBuilderDelegate_builder$,
        'childCount': _ListWheelChildBuilderDelegate_childCount$,
        'estimatedChildCount':
            _ListWheelChildBuilderDelegate_estimatedChildCount$,
        'build': _ListWheelChildBuilderDelegate_build$,
        'shouldRebuild': _ListWheelChildBuilderDelegate_shouldRebuild$,
      },
      {},
    ),
    'FixedExtentScrollController': m.ClassMirror(
      'FixedExtentScrollController',
      {
        '#as': FixedExtentScrollController_as$,
        '#is': FixedExtentScrollController_is$,
        'initialItem': _FixedExtentScrollController_initialItem$,
        'selectedItem': _FixedExtentScrollController_selectedItem$,
        'animateToItem': _FixedExtentScrollController_animateToItem$,
        'jumpToItem': _FixedExtentScrollController_jumpToItem$,
        'createScrollPosition':
            _FixedExtentScrollController_createScrollPosition$,
      },
      {},
    ),
    'FixedExtentMetrics': m.ClassMirror(
      'FixedExtentMetrics',
      {
        '#as': FixedExtentMetrics_as$,
        '#is': FixedExtentMetrics_is$,
        'itemIndex': _FixedExtentMetrics_itemIndex$,
        'copyWith': _FixedExtentMetrics_copyWith$,
      },
      {},
    ),
    'FixedExtentScrollPhysics': m.ClassMirror(
      'FixedExtentScrollPhysics',
      {
        '#as': FixedExtentScrollPhysics_as$,
        '#is': FixedExtentScrollPhysics_is$,
        'applyTo': _FixedExtentScrollPhysics_applyTo$,
        'createBallisticSimulation':
            _FixedExtentScrollPhysics_createBallisticSimulation$,
      },
      {},
    ),
    'ListWheelScrollView': m.ClassMirror(
      'ListWheelScrollView',
      {
        '#as': ListWheelScrollView_as$,
        '#is': ListWheelScrollView_is$,
        'controller': _ListWheelScrollView_controller$,
        'physics': _ListWheelScrollView_physics$,
        'diameterRatio': _ListWheelScrollView_diameterRatio$,
        'perspective': _ListWheelScrollView_perspective$,
        'offAxisFraction': _ListWheelScrollView_offAxisFraction$,
        'useMagnifier': _ListWheelScrollView_useMagnifier$,
        'magnification': _ListWheelScrollView_magnification$,
        'overAndUnderCenterOpacity':
            _ListWheelScrollView_overAndUnderCenterOpacity$,
        'itemExtent': _ListWheelScrollView_itemExtent$,
        'squeeze': _ListWheelScrollView_squeeze$,
        'onSelectedItemChanged': _ListWheelScrollView_onSelectedItemChanged$,
        'renderChildrenOutsideViewport':
            _ListWheelScrollView_renderChildrenOutsideViewport$,
        'childDelegate': _ListWheelScrollView_childDelegate$,
        'clipBehavior': _ListWheelScrollView_clipBehavior$,
        'restorationId': _ListWheelScrollView_restorationId$,
        'scrollBehavior': _ListWheelScrollView_scrollBehavior$,
        'createState': _ListWheelScrollView_createState$,
      },
      {},
    ),
    'ListWheelElement': m.ClassMirror(
      'ListWheelElement',
      {
        '#as': ListWheelElement_as$,
        '#is': ListWheelElement_is$,
        'renderObject': _ListWheelElement_renderObject$,
        'childCount': _ListWheelElement_childCount$,
        'update': _ListWheelElement_update$,
        'performRebuild': _ListWheelElement_performRebuild$,
        'retrieveWidget': _ListWheelElement_retrieveWidget$,
        'childExistsAt': _ListWheelElement_childExistsAt$,
        'createChild': _ListWheelElement_createChild$,
        'removeChild': _ListWheelElement_removeChild$,
        'updateChild': _ListWheelElement_updateChild$,
        'insertRenderObjectChild': _ListWheelElement_insertRenderObjectChild$,
        'moveRenderObjectChild': _ListWheelElement_moveRenderObjectChild$,
        'removeRenderObjectChild': _ListWheelElement_removeRenderObjectChild$,
        'forgetChild': _ListWheelElement_forgetChild$,
      },
      {},
    ),
    'ListWheelViewport': m.ClassMirror(
      'ListWheelViewport',
      {
        '#as': ListWheelViewport_as$,
        '#is': ListWheelViewport_is$,
        'diameterRatio': _ListWheelViewport_diameterRatio$,
        'perspective': _ListWheelViewport_perspective$,
        'offAxisFraction': _ListWheelViewport_offAxisFraction$,
        'useMagnifier': _ListWheelViewport_useMagnifier$,
        'magnification': _ListWheelViewport_magnification$,
        'overAndUnderCenterOpacity':
            _ListWheelViewport_overAndUnderCenterOpacity$,
        'itemExtent': _ListWheelViewport_itemExtent$,
        'squeeze': _ListWheelViewport_squeeze$,
        'renderChildrenOutsideViewport':
            _ListWheelViewport_renderChildrenOutsideViewport$,
        'offset': _ListWheelViewport_offset$,
        'childDelegate': _ListWheelViewport_childDelegate$,
        'clipBehavior': _ListWheelViewport_clipBehavior$,
        'createElement': _ListWheelViewport_createElement$,
        'createRenderObject': _ListWheelViewport_createRenderObject$,
        'updateRenderObject': _ListWheelViewport_updateRenderObject$,
      },
      {},
    ),
  },
);
Function ListWheelChildDelegate_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ListWheelChildDelegate;
Function ListWheelChildDelegate_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ListWheelChildDelegate;
int? _ListWheelChildDelegate_estimatedChildCount$(
    ListWheelChildDelegate target) {
  return target.estimatedChildCount;
}

Function _ListWheelChildDelegate_build$(
  m.Scope scope,
  ListWheelChildDelegate target,
) =>
    target.build;
Function _ListWheelChildDelegate_trueIndexOf$(
  m.Scope scope,
  ListWheelChildDelegate target,
) =>
    target.trueIndexOf;
Function _ListWheelChildDelegate_shouldRebuild$(
  m.Scope scope,
  ListWheelChildDelegate target,
) =>
    target.shouldRebuild;
Function ListWheelChildListDelegate_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ListWheelChildListDelegate;
Function ListWheelChildListDelegate_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ListWheelChildListDelegate;
List<Widget> _ListWheelChildListDelegate_children$(
    ListWheelChildListDelegate target) {
  return target.children;
}

int _ListWheelChildListDelegate_estimatedChildCount$(
    ListWheelChildListDelegate target) {
  return target.estimatedChildCount;
}

Function _ListWheelChildListDelegate_build$(
  m.Scope scope,
  ListWheelChildListDelegate target,
) =>
    target.build;
Function _ListWheelChildListDelegate_shouldRebuild$(
  m.Scope scope,
  ListWheelChildListDelegate target,
) =>
    target.shouldRebuild;
Function ListWheelChildLoopingListDelegate_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ListWheelChildLoopingListDelegate;
Function ListWheelChildLoopingListDelegate_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ListWheelChildLoopingListDelegate;
List<Widget> _ListWheelChildLoopingListDelegate_children$(
    ListWheelChildLoopingListDelegate target) {
  return target.children;
}

int? _ListWheelChildLoopingListDelegate_estimatedChildCount$(
    ListWheelChildLoopingListDelegate target) {
  return target.estimatedChildCount;
}

Function _ListWheelChildLoopingListDelegate_trueIndexOf$(
  m.Scope scope,
  ListWheelChildLoopingListDelegate target,
) =>
    target.trueIndexOf;
Function _ListWheelChildLoopingListDelegate_build$(
  m.Scope scope,
  ListWheelChildLoopingListDelegate target,
) =>
    target.build;
Function _ListWheelChildLoopingListDelegate_shouldRebuild$(
  m.Scope scope,
  ListWheelChildLoopingListDelegate target,
) =>
    target.shouldRebuild;
Function ListWheelChildBuilderDelegate_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ListWheelChildBuilderDelegate;
Function ListWheelChildBuilderDelegate_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ListWheelChildBuilderDelegate;
Widget? Function(BuildContext, int) _ListWheelChildBuilderDelegate_builder$(
    ListWheelChildBuilderDelegate target) {
  return target.builder;
}

int? _ListWheelChildBuilderDelegate_childCount$(
    ListWheelChildBuilderDelegate target) {
  return target.childCount;
}

int? _ListWheelChildBuilderDelegate_estimatedChildCount$(
    ListWheelChildBuilderDelegate target) {
  return target.estimatedChildCount;
}

Function _ListWheelChildBuilderDelegate_build$(
  m.Scope scope,
  ListWheelChildBuilderDelegate target,
) =>
    target.build;
Function _ListWheelChildBuilderDelegate_shouldRebuild$(
  m.Scope scope,
  ListWheelChildBuilderDelegate target,
) =>
    target.shouldRebuild;
Function FixedExtentScrollController_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as FixedExtentScrollController;
Function FixedExtentScrollController_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is FixedExtentScrollController;
int _FixedExtentScrollController_initialItem$(
    FixedExtentScrollController target) {
  return target.initialItem;
}

int _FixedExtentScrollController_selectedItem$(
    FixedExtentScrollController target) {
  return target.selectedItem;
}

Function _FixedExtentScrollController_animateToItem$(
  m.Scope scope,
  FixedExtentScrollController target,
) =>
    target.animateToItem;
Function _FixedExtentScrollController_jumpToItem$(
  m.Scope scope,
  FixedExtentScrollController target,
) =>
    target.jumpToItem;
Function _FixedExtentScrollController_createScrollPosition$(
  m.Scope scope,
  FixedExtentScrollController target,
) =>
    target.createScrollPosition;
Function FixedExtentMetrics_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as FixedExtentMetrics;
Function FixedExtentMetrics_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is FixedExtentMetrics;
int _FixedExtentMetrics_itemIndex$(FixedExtentMetrics target) {
  return target.itemIndex;
}

Function _FixedExtentMetrics_copyWith$(
  m.Scope scope,
  FixedExtentMetrics target,
) =>
    target.copyWith;
Function FixedExtentScrollPhysics_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as FixedExtentScrollPhysics;
Function FixedExtentScrollPhysics_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is FixedExtentScrollPhysics;
Function _FixedExtentScrollPhysics_applyTo$(
  m.Scope scope,
  FixedExtentScrollPhysics target,
) =>
    target.applyTo;
Function _FixedExtentScrollPhysics_createBallisticSimulation$(
  m.Scope scope,
  FixedExtentScrollPhysics target,
) =>
    target.createBallisticSimulation;
Function ListWheelScrollView_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ListWheelScrollView;
Function ListWheelScrollView_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ListWheelScrollView;
ScrollController? _ListWheelScrollView_controller$(ListWheelScrollView target) {
  return target.controller;
}

ScrollPhysics? _ListWheelScrollView_physics$(ListWheelScrollView target) {
  return target.physics;
}

double _ListWheelScrollView_diameterRatio$(ListWheelScrollView target) {
  return target.diameterRatio;
}

double _ListWheelScrollView_perspective$(ListWheelScrollView target) {
  return target.perspective;
}

double _ListWheelScrollView_offAxisFraction$(ListWheelScrollView target) {
  return target.offAxisFraction;
}

bool _ListWheelScrollView_useMagnifier$(ListWheelScrollView target) {
  return target.useMagnifier;
}

double _ListWheelScrollView_magnification$(ListWheelScrollView target) {
  return target.magnification;
}

double _ListWheelScrollView_overAndUnderCenterOpacity$(
    ListWheelScrollView target) {
  return target.overAndUnderCenterOpacity;
}

double _ListWheelScrollView_itemExtent$(ListWheelScrollView target) {
  return target.itemExtent;
}

double _ListWheelScrollView_squeeze$(ListWheelScrollView target) {
  return target.squeeze;
}

void Function(int)? _ListWheelScrollView_onSelectedItemChanged$(
    ListWheelScrollView target) {
  return target.onSelectedItemChanged;
}

bool _ListWheelScrollView_renderChildrenOutsideViewport$(
    ListWheelScrollView target) {
  return target.renderChildrenOutsideViewport;
}

ListWheelChildDelegate _ListWheelScrollView_childDelegate$(
    ListWheelScrollView target) {
  return target.childDelegate;
}

Clip _ListWheelScrollView_clipBehavior$(ListWheelScrollView target) {
  return target.clipBehavior;
}

String? _ListWheelScrollView_restorationId$(ListWheelScrollView target) {
  return target.restorationId;
}

ScrollBehavior? _ListWheelScrollView_scrollBehavior$(
    ListWheelScrollView target) {
  return target.scrollBehavior;
}

Function _ListWheelScrollView_createState$(
  m.Scope scope,
  ListWheelScrollView target,
) =>
    target.createState;
Function ListWheelElement_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ListWheelElement;
Function ListWheelElement_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ListWheelElement;
RenderListWheelViewport _ListWheelElement_renderObject$(
    ListWheelElement target) {
  return target.renderObject;
}

int? _ListWheelElement_childCount$(ListWheelElement target) {
  return target.childCount;
}

Function _ListWheelElement_update$(
  m.Scope scope,
  ListWheelElement target,
) =>
    target.update;
Function _ListWheelElement_performRebuild$(
  m.Scope scope,
  ListWheelElement target,
) =>
    target.performRebuild;
Function _ListWheelElement_retrieveWidget$(
  m.Scope scope,
  ListWheelElement target,
) =>
    target.retrieveWidget;
Function _ListWheelElement_childExistsAt$(
  m.Scope scope,
  ListWheelElement target,
) =>
    target.childExistsAt;
Function _ListWheelElement_createChild$(
  m.Scope scope,
  ListWheelElement target,
) =>
    target.createChild;
Function _ListWheelElement_removeChild$(
  m.Scope scope,
  ListWheelElement target,
) =>
    target.removeChild;
Function _ListWheelElement_updateChild$(
  m.Scope scope,
  ListWheelElement target,
) =>
    target.updateChild;
Function _ListWheelElement_insertRenderObjectChild$(
  m.Scope scope,
  ListWheelElement target,
) =>
    target.insertRenderObjectChild;
Function _ListWheelElement_moveRenderObjectChild$(
  m.Scope scope,
  ListWheelElement target,
) =>
    target.moveRenderObjectChild;
Function _ListWheelElement_removeRenderObjectChild$(
  m.Scope scope,
  ListWheelElement target,
) =>
    target.removeRenderObjectChild;
Function _ListWheelElement_visitChildren$(
  m.Scope scope,
  ListWheelElement target,
) =>
    (m.FunctionPointer visitor) {
      void visitorProxy(Element visitor_element) =>
          scope.engine.callFunctionPointer(
            scope,
            visitor,
            [visitor_element],
            {},
          );
      target.visitChildren(visitorProxy);
    };
Function _ListWheelElement_forgetChild$(
  m.Scope scope,
  ListWheelElement target,
) =>
    target.forgetChild;
Function ListWheelViewport_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ListWheelViewport;
Function ListWheelViewport_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ListWheelViewport;
double _ListWheelViewport_diameterRatio$(ListWheelViewport target) {
  return target.diameterRatio;
}

double _ListWheelViewport_perspective$(ListWheelViewport target) {
  return target.perspective;
}

double _ListWheelViewport_offAxisFraction$(ListWheelViewport target) {
  return target.offAxisFraction;
}

bool _ListWheelViewport_useMagnifier$(ListWheelViewport target) {
  return target.useMagnifier;
}

double _ListWheelViewport_magnification$(ListWheelViewport target) {
  return target.magnification;
}

double _ListWheelViewport_overAndUnderCenterOpacity$(ListWheelViewport target) {
  return target.overAndUnderCenterOpacity;
}

double _ListWheelViewport_itemExtent$(ListWheelViewport target) {
  return target.itemExtent;
}

double _ListWheelViewport_squeeze$(ListWheelViewport target) {
  return target.squeeze;
}

bool _ListWheelViewport_renderChildrenOutsideViewport$(
    ListWheelViewport target) {
  return target.renderChildrenOutsideViewport;
}

ViewportOffset _ListWheelViewport_offset$(ListWheelViewport target) {
  return target.offset;
}

ListWheelChildDelegate _ListWheelViewport_childDelegate$(
    ListWheelViewport target) {
  return target.childDelegate;
}

Clip _ListWheelViewport_clipBehavior$(ListWheelViewport target) {
  return target.clipBehavior;
}

Function _ListWheelViewport_createElement$(
  m.Scope scope,
  ListWheelViewport target,
) =>
    target.createElement;
Function _ListWheelViewport_createRenderObject$(
  m.Scope scope,
  ListWheelViewport target,
) =>
    target.createRenderObject;
Function _ListWheelViewport_updateRenderObject$(
  m.Scope scope,
  ListWheelViewport target,
) =>
    target.updateRenderObject;
