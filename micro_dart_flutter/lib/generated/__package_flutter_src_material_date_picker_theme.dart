// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/date_picker_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/date_picker_theme.dart',
  {
    'DatePickerThemeData.': _DatePickerThemeData__$,
    'DatePickerThemeData.lerp': _DatePickerThemeData_lerp$,
    'DatePickerTheme.': _DatePickerTheme__$,
    'DatePickerTheme.of': _DatePickerTheme_of$,
    'DatePickerTheme.maybeOf': _DatePickerTheme_maybeOf$,
    'DatePickerTheme.defaults': _DatePickerTheme_defaults$,
  },
  {},
  {
    'DatePickerThemeData': m.ClassMirror(
      'DatePickerThemeData',
      {
        '#as': DatePickerThemeData_as$,
        '#is': DatePickerThemeData_is$,
        'backgroundColor': _DatePickerThemeData_backgroundColor$,
        'elevation': _DatePickerThemeData_elevation$,
        'shadowColor': _DatePickerThemeData_shadowColor$,
        'surfaceTintColor': _DatePickerThemeData_surfaceTintColor$,
        'shape': _DatePickerThemeData_shape$,
        'headerBackgroundColor': _DatePickerThemeData_headerBackgroundColor$,
        'headerForegroundColor': _DatePickerThemeData_headerForegroundColor$,
        'headerHeadlineStyle': _DatePickerThemeData_headerHeadlineStyle$,
        'headerHelpStyle': _DatePickerThemeData_headerHelpStyle$,
        'weekdayStyle': _DatePickerThemeData_weekdayStyle$,
        'dayStyle': _DatePickerThemeData_dayStyle$,
        'dayForegroundColor': _DatePickerThemeData_dayForegroundColor$,
        'dayBackgroundColor': _DatePickerThemeData_dayBackgroundColor$,
        'dayOverlayColor': _DatePickerThemeData_dayOverlayColor$,
        'todayForegroundColor': _DatePickerThemeData_todayForegroundColor$,
        'todayBackgroundColor': _DatePickerThemeData_todayBackgroundColor$,
        'todayBorder': _DatePickerThemeData_todayBorder$,
        'yearStyle': _DatePickerThemeData_yearStyle$,
        'yearForegroundColor': _DatePickerThemeData_yearForegroundColor$,
        'yearBackgroundColor': _DatePickerThemeData_yearBackgroundColor$,
        'yearOverlayColor': _DatePickerThemeData_yearOverlayColor$,
        'rangePickerBackgroundColor':
            _DatePickerThemeData_rangePickerBackgroundColor$,
        'rangePickerElevation': _DatePickerThemeData_rangePickerElevation$,
        'rangePickerShadowColor': _DatePickerThemeData_rangePickerShadowColor$,
        'rangePickerSurfaceTintColor':
            _DatePickerThemeData_rangePickerSurfaceTintColor$,
        'rangePickerShape': _DatePickerThemeData_rangePickerShape$,
        'rangePickerHeaderBackgroundColor':
            _DatePickerThemeData_rangePickerHeaderBackgroundColor$,
        'rangePickerHeaderForegroundColor':
            _DatePickerThemeData_rangePickerHeaderForegroundColor$,
        'rangePickerHeaderHeadlineStyle':
            _DatePickerThemeData_rangePickerHeaderHeadlineStyle$,
        'rangePickerHeaderHelpStyle':
            _DatePickerThemeData_rangePickerHeaderHelpStyle$,
        'rangeSelectionBackgroundColor':
            _DatePickerThemeData_rangeSelectionBackgroundColor$,
        'rangeSelectionOverlayColor':
            _DatePickerThemeData_rangeSelectionOverlayColor$,
        'hashCode': _DatePickerThemeData_hashCode$,
        'copyWith': _DatePickerThemeData_copyWith$,
        '==': _DatePickerThemeData_eq$$,
        'debugFillProperties': _DatePickerThemeData_debugFillProperties$,
      },
      {},
    ),
    'DatePickerTheme': m.ClassMirror(
      'DatePickerTheme',
      {
        '#as': DatePickerTheme_as$,
        '#is': DatePickerTheme_is$,
        'data': _DatePickerTheme_data$,
        'wrap': _DatePickerTheme_wrap$,
        'updateShouldNotify': _DatePickerTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function DatePickerThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DatePickerThemeData;
Function DatePickerThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DatePickerThemeData;
Function _DatePickerThemeData_backgroundColor$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _DatePickerThemeData_elevation$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.elevation;
    };
Function _DatePickerThemeData_shadowColor$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _DatePickerThemeData_surfaceTintColor$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _DatePickerThemeData_shape$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.shape;
    };
Function _DatePickerThemeData_headerBackgroundColor$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.headerBackgroundColor;
    };
Function _DatePickerThemeData_headerForegroundColor$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.headerForegroundColor;
    };
Function _DatePickerThemeData_headerHeadlineStyle$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.headerHeadlineStyle;
    };
Function _DatePickerThemeData_headerHelpStyle$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.headerHelpStyle;
    };
Function _DatePickerThemeData_weekdayStyle$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.weekdayStyle;
    };
Function _DatePickerThemeData_dayStyle$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.dayStyle;
    };
Function _DatePickerThemeData_dayForegroundColor$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.dayForegroundColor;
    };
Function _DatePickerThemeData_dayBackgroundColor$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.dayBackgroundColor;
    };
Function _DatePickerThemeData_dayOverlayColor$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.dayOverlayColor;
    };
Function _DatePickerThemeData_todayForegroundColor$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.todayForegroundColor;
    };
Function _DatePickerThemeData_todayBackgroundColor$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.todayBackgroundColor;
    };
Function _DatePickerThemeData_todayBorder$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.todayBorder;
    };
Function _DatePickerThemeData_yearStyle$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.yearStyle;
    };
Function _DatePickerThemeData_yearForegroundColor$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.yearForegroundColor;
    };
Function _DatePickerThemeData_yearBackgroundColor$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.yearBackgroundColor;
    };
Function _DatePickerThemeData_yearOverlayColor$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.yearOverlayColor;
    };
Function _DatePickerThemeData_rangePickerBackgroundColor$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.rangePickerBackgroundColor;
    };
Function _DatePickerThemeData_rangePickerElevation$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.rangePickerElevation;
    };
Function _DatePickerThemeData_rangePickerShadowColor$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.rangePickerShadowColor;
    };
Function _DatePickerThemeData_rangePickerSurfaceTintColor$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.rangePickerSurfaceTintColor;
    };
Function _DatePickerThemeData_rangePickerShape$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.rangePickerShape;
    };
Function _DatePickerThemeData_rangePickerHeaderBackgroundColor$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.rangePickerHeaderBackgroundColor;
    };
Function _DatePickerThemeData_rangePickerHeaderForegroundColor$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.rangePickerHeaderForegroundColor;
    };
Function _DatePickerThemeData_rangePickerHeaderHeadlineStyle$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.rangePickerHeaderHeadlineStyle;
    };
Function _DatePickerThemeData_rangePickerHeaderHelpStyle$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.rangePickerHeaderHelpStyle;
    };
Function _DatePickerThemeData_rangeSelectionBackgroundColor$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.rangeSelectionBackgroundColor;
    };
Function _DatePickerThemeData_rangeSelectionOverlayColor$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.rangeSelectionOverlayColor;
    };
Function _DatePickerThemeData_hashCode$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _DatePickerThemeData__$(m.Scope scope$) => ({
      Color? backgroundColor,
      double? elevation,
      Color? shadowColor,
      Color? surfaceTintColor,
      ShapeBorder? shape,
      Color? headerBackgroundColor,
      Color? headerForegroundColor,
      TextStyle? headerHeadlineStyle,
      TextStyle? headerHelpStyle,
      TextStyle? weekdayStyle,
      TextStyle? dayStyle,
      MaterialStateProperty<Color>? dayForegroundColor,
      MaterialStateProperty<Color>? dayBackgroundColor,
      MaterialStateProperty<Color>? dayOverlayColor,
      MaterialStateProperty<Color>? todayForegroundColor,
      MaterialStateProperty<Color>? todayBackgroundColor,
      BorderSide? todayBorder,
      TextStyle? yearStyle,
      MaterialStateProperty<Color>? yearForegroundColor,
      MaterialStateProperty<Color>? yearBackgroundColor,
      MaterialStateProperty<Color>? yearOverlayColor,
      Color? rangePickerBackgroundColor,
      double? rangePickerElevation,
      Color? rangePickerShadowColor,
      Color? rangePickerSurfaceTintColor,
      ShapeBorder? rangePickerShape,
      Color? rangePickerHeaderBackgroundColor,
      Color? rangePickerHeaderForegroundColor,
      TextStyle? rangePickerHeaderHeadlineStyle,
      TextStyle? rangePickerHeaderHelpStyle,
      Color? rangeSelectionBackgroundColor,
      MaterialStateProperty<Color>? rangeSelectionOverlayColor,
    }) {
      return DatePickerThemeData(
        backgroundColor: backgroundColor,
        dayBackgroundColor: dayBackgroundColor,
        dayForegroundColor: dayForegroundColor,
        dayOverlayColor: dayOverlayColor,
        dayStyle: dayStyle,
        elevation: elevation,
        headerBackgroundColor: headerBackgroundColor,
        headerForegroundColor: headerForegroundColor,
        headerHeadlineStyle: headerHeadlineStyle,
        headerHelpStyle: headerHelpStyle,
        rangePickerBackgroundColor: rangePickerBackgroundColor,
        rangePickerElevation: rangePickerElevation,
        rangePickerHeaderBackgroundColor: rangePickerHeaderBackgroundColor,
        rangePickerHeaderForegroundColor: rangePickerHeaderForegroundColor,
        rangePickerHeaderHeadlineStyle: rangePickerHeaderHeadlineStyle,
        rangePickerHeaderHelpStyle: rangePickerHeaderHelpStyle,
        rangePickerShadowColor: rangePickerShadowColor,
        rangePickerShape: rangePickerShape,
        rangePickerSurfaceTintColor: rangePickerSurfaceTintColor,
        rangeSelectionBackgroundColor: rangeSelectionBackgroundColor,
        rangeSelectionOverlayColor: rangeSelectionOverlayColor,
        shadowColor: shadowColor,
        shape: shape,
        surfaceTintColor: surfaceTintColor,
        todayBackgroundColor: todayBackgroundColor,
        todayBorder: todayBorder,
        todayForegroundColor: todayForegroundColor,
        weekdayStyle: weekdayStyle,
        yearBackgroundColor: yearBackgroundColor,
        yearForegroundColor: yearForegroundColor,
        yearOverlayColor: yearOverlayColor,
        yearStyle: yearStyle,
      );
    };
Function _DatePickerThemeData_copyWith$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    target$.copyWith;
Function _DatePickerThemeData_lerp$(m.Scope scope$) => DatePickerThemeData.lerp;
Function _DatePickerThemeData_eq$$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _DatePickerThemeData_debugFillProperties$(
  m.Scope scope$,
  DatePickerThemeData target$,
) =>
    target$.debugFillProperties;
Function DatePickerTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DatePickerTheme;
Function DatePickerTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DatePickerTheme;
Function _DatePickerTheme_data$(
  m.Scope scope$,
  DatePickerTheme target$,
) =>
    () {
      return target$.data;
    };
Function _DatePickerTheme__$(m.Scope scope$) => ({
      Key? key,
      required DatePickerThemeData data,
      required Widget child,
    }) {
      return DatePickerTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _DatePickerTheme_of$(m.Scope scope$) => DatePickerTheme.of;
Function _DatePickerTheme_maybeOf$(m.Scope scope$) => DatePickerTheme.maybeOf;
Function _DatePickerTheme_defaults$(m.Scope scope$) => DatePickerTheme.defaults;
Function _DatePickerTheme_wrap$(
  m.Scope scope$,
  DatePickerTheme target$,
) =>
    target$.wrap;
Function _DatePickerTheme_updateShouldNotify$(
  m.Scope scope$,
  DatePickerTheme target$,
) =>
    target$.updateShouldNotify;
