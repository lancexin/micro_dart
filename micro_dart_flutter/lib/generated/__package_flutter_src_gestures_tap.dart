// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/gestures/tap.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/gestures/arena.dart';
import 'package:flutter/src/gestures/constants.dart';
import 'package:flutter/src/gestures/events.dart';
import 'package:flutter/src/gestures/recognizer.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/gestures/tap.dart',
  {
    'TapDownDetails.': _TapDownDetails__$,
    'TapUpDetails.': _TapUpDetails__$,
    'TapGestureRecognizer.': _TapGestureRecognizer__$,
  },
  {},
  {
    'TapDownDetails': m.ClassMirror(
      'TapDownDetails',
      {
        '#as': TapDownDetails_as$,
        '#is': TapDownDetails_is$,
        'globalPosition': _TapDownDetails_globalPosition$,
        'kind': _TapDownDetails_kind$,
        'localPosition': _TapDownDetails_localPosition$,
      },
      {},
    ),
    'TapUpDetails': m.ClassMirror(
      'TapUpDetails',
      {
        '#as': TapUpDetails_as$,
        '#is': TapUpDetails_is$,
        'globalPosition': _TapUpDetails_globalPosition$,
        'localPosition': _TapUpDetails_localPosition$,
        'kind': _TapUpDetails_kind$,
      },
      {},
    ),
    'BaseTapGestureRecognizer': m.ClassMirror(
      'BaseTapGestureRecognizer',
      {
        '#as': BaseTapGestureRecognizer_as$,
        '#is': BaseTapGestureRecognizer_is$,
        'debugDescription': _BaseTapGestureRecognizer_debugDescription$,
        'handleTapDown': _BaseTapGestureRecognizer_handleTapDown$,
        'handleTapUp': _BaseTapGestureRecognizer_handleTapUp$,
        'handleTapCancel': _BaseTapGestureRecognizer_handleTapCancel$,
        'addAllowedPointer': _BaseTapGestureRecognizer_addAllowedPointer$,
        'startTrackingPointer': _BaseTapGestureRecognizer_startTrackingPointer$,
        'handlePrimaryPointer': _BaseTapGestureRecognizer_handlePrimaryPointer$,
        'resolve': _BaseTapGestureRecognizer_resolve$,
        'didExceedDeadline': _BaseTapGestureRecognizer_didExceedDeadline$,
        'acceptGesture': _BaseTapGestureRecognizer_acceptGesture$,
        'rejectGesture': _BaseTapGestureRecognizer_rejectGesture$,
        'debugFillProperties': _BaseTapGestureRecognizer_debugFillProperties$,
      },
      {},
    ),
    'TapGestureRecognizer': m.ClassMirror(
      'TapGestureRecognizer',
      {
        '#as': TapGestureRecognizer_as$,
        '#is': TapGestureRecognizer_is$,
        'onTapDown': _TapGestureRecognizer_onTapDown$,
        'onTapUp': _TapGestureRecognizer_onTapUp$,
        'onTap': _TapGestureRecognizer_onTap$,
        'onTapCancel': _TapGestureRecognizer_onTapCancel$,
        'onSecondaryTap': _TapGestureRecognizer_onSecondaryTap$,
        'onSecondaryTapDown': _TapGestureRecognizer_onSecondaryTapDown$,
        'onSecondaryTapUp': _TapGestureRecognizer_onSecondaryTapUp$,
        'onSecondaryTapCancel': _TapGestureRecognizer_onSecondaryTapCancel$,
        'onTertiaryTapDown': _TapGestureRecognizer_onTertiaryTapDown$,
        'onTertiaryTapUp': _TapGestureRecognizer_onTertiaryTapUp$,
        'onTertiaryTapCancel': _TapGestureRecognizer_onTertiaryTapCancel$,
        'debugDescription': _TapGestureRecognizer_debugDescription$,
        'isPointerAllowed': _TapGestureRecognizer_isPointerAllowed$,
        'handleTapDown': _TapGestureRecognizer_handleTapDown$,
        'handleTapUp': _TapGestureRecognizer_handleTapUp$,
        'handleTapCancel': _TapGestureRecognizer_handleTapCancel$,
      },
      {
        'onTapDown': _TapGestureRecognizer_onTapDown_set$,
        'onTapUp': _TapGestureRecognizer_onTapUp_set$,
        'onTap': _TapGestureRecognizer_onTap_set$,
        'onTapCancel': _TapGestureRecognizer_onTapCancel_set$,
        'onSecondaryTap': _TapGestureRecognizer_onSecondaryTap_set$,
        'onSecondaryTapDown': _TapGestureRecognizer_onSecondaryTapDown_set$,
        'onSecondaryTapUp': _TapGestureRecognizer_onSecondaryTapUp_set$,
        'onSecondaryTapCancel': _TapGestureRecognizer_onSecondaryTapCancel_set$,
        'onTertiaryTapDown': _TapGestureRecognizer_onTertiaryTapDown_set$,
        'onTertiaryTapUp': _TapGestureRecognizer_onTertiaryTapUp_set$,
        'onTertiaryTapCancel': _TapGestureRecognizer_onTertiaryTapCancel_set$,
      },
    ),
  },
);
Function TapDownDetails_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TapDownDetails;
Function TapDownDetails_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TapDownDetails;
Function _TapDownDetails_globalPosition$(
  m.Scope scope$,
  TapDownDetails target$,
) =>
    () {
      return target$.globalPosition;
    };
Function _TapDownDetails_kind$(
  m.Scope scope$,
  TapDownDetails target$,
) =>
    () {
      return target$.kind;
    };
Function _TapDownDetails_localPosition$(
  m.Scope scope$,
  TapDownDetails target$,
) =>
    () {
      return target$.localPosition;
    };
Function _TapDownDetails__$(m.Scope scope$) => ({
      Offset? globalPosition,
      Offset? localPosition,
      PointerDeviceKind? kind,
    }) {
      return TapDownDetails(
        globalPosition: globalPosition ?? Offset.zero,
        kind: kind,
        localPosition: localPosition,
      );
    };
Function TapUpDetails_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TapUpDetails;
Function TapUpDetails_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TapUpDetails;
Function _TapUpDetails_globalPosition$(
  m.Scope scope$,
  TapUpDetails target$,
) =>
    () {
      return target$.globalPosition;
    };
Function _TapUpDetails_localPosition$(
  m.Scope scope$,
  TapUpDetails target$,
) =>
    () {
      return target$.localPosition;
    };
Function _TapUpDetails_kind$(
  m.Scope scope$,
  TapUpDetails target$,
) =>
    () {
      return target$.kind;
    };
Function _TapUpDetails__$(m.Scope scope$) => ({
      required PointerDeviceKind kind,
      Offset? globalPosition,
      Offset? localPosition,
    }) {
      return TapUpDetails(
        globalPosition: globalPosition ?? Offset.zero,
        kind: kind,
        localPosition: localPosition,
      );
    };
Function BaseTapGestureRecognizer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as BaseTapGestureRecognizer;
Function BaseTapGestureRecognizer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is BaseTapGestureRecognizer;
Function _BaseTapGestureRecognizer_debugDescription$(
  m.Scope scope$,
  BaseTapGestureRecognizer target$,
) =>
    () {
      return target$.debugDescription;
    };
Function _BaseTapGestureRecognizer_handleTapDown$(
  m.Scope scope$,
  BaseTapGestureRecognizer target$,
) =>
    target$.handleTapDown;
Function _BaseTapGestureRecognizer_handleTapUp$(
  m.Scope scope$,
  BaseTapGestureRecognizer target$,
) =>
    target$.handleTapUp;
Function _BaseTapGestureRecognizer_handleTapCancel$(
  m.Scope scope$,
  BaseTapGestureRecognizer target$,
) =>
    target$.handleTapCancel;
Function _BaseTapGestureRecognizer_addAllowedPointer$(
  m.Scope scope$,
  BaseTapGestureRecognizer target$,
) =>
    target$.addAllowedPointer;
Function _BaseTapGestureRecognizer_startTrackingPointer$(
  m.Scope scope$,
  BaseTapGestureRecognizer target$,
) =>
    target$.startTrackingPointer;
Function _BaseTapGestureRecognizer_handlePrimaryPointer$(
  m.Scope scope$,
  BaseTapGestureRecognizer target$,
) =>
    target$.handlePrimaryPointer;
Function _BaseTapGestureRecognizer_resolve$(
  m.Scope scope$,
  BaseTapGestureRecognizer target$,
) =>
    target$.resolve;
Function _BaseTapGestureRecognizer_didExceedDeadline$(
  m.Scope scope$,
  BaseTapGestureRecognizer target$,
) =>
    target$.didExceedDeadline;
Function _BaseTapGestureRecognizer_acceptGesture$(
  m.Scope scope$,
  BaseTapGestureRecognizer target$,
) =>
    target$.acceptGesture;
Function _BaseTapGestureRecognizer_rejectGesture$(
  m.Scope scope$,
  BaseTapGestureRecognizer target$,
) =>
    target$.rejectGesture;
Function _BaseTapGestureRecognizer_debugFillProperties$(
  m.Scope scope$,
  BaseTapGestureRecognizer target$,
) =>
    target$.debugFillProperties;
Function TapGestureRecognizer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TapGestureRecognizer;
Function TapGestureRecognizer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TapGestureRecognizer;
Function _TapGestureRecognizer_onTapDown$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    () {
      return target$.onTapDown;
    };
Function _TapGestureRecognizer_onTapDown_set$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    (m.FunctionPointer? _onTapDown) {
      void _onTapDownProxy(TapDownDetails _onTapDown_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            _onTapDown!,
            [_onTapDown_details$],
            {},
          );
      target$.onTapDown = (_onTapDown == null ? null : _onTapDownProxy);
    };
Function _TapGestureRecognizer_onTapUp$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    () {
      return target$.onTapUp;
    };
Function _TapGestureRecognizer_onTapUp_set$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    (m.FunctionPointer? _onTapUp) {
      void _onTapUpProxy(TapUpDetails _onTapUp_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            _onTapUp!,
            [_onTapUp_details$],
            {},
          );
      target$.onTapUp = (_onTapUp == null ? null : _onTapUpProxy);
    };
Function _TapGestureRecognizer_onTap$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    () {
      return target$.onTap;
    };
Function _TapGestureRecognizer_onTap_set$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    (m.FunctionPointer? _onTap) {
      void _onTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            _onTap!,
            [],
            {},
          );
      target$.onTap = (_onTap == null ? null : _onTapProxy);
    };
Function _TapGestureRecognizer_onTapCancel$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    () {
      return target$.onTapCancel;
    };
Function _TapGestureRecognizer_onTapCancel_set$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    (m.FunctionPointer? _onTapCancel) {
      void _onTapCancelProxy() => scope$.engine.callFunctionPointer(
            scope$,
            _onTapCancel!,
            [],
            {},
          );
      target$.onTapCancel = (_onTapCancel == null ? null : _onTapCancelProxy);
    };
Function _TapGestureRecognizer_onSecondaryTap$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    () {
      return target$.onSecondaryTap;
    };
Function _TapGestureRecognizer_onSecondaryTap_set$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    (m.FunctionPointer? _onSecondaryTap) {
      void _onSecondaryTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            _onSecondaryTap!,
            [],
            {},
          );
      target$.onSecondaryTap =
          (_onSecondaryTap == null ? null : _onSecondaryTapProxy);
    };
Function _TapGestureRecognizer_onSecondaryTapDown$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    () {
      return target$.onSecondaryTapDown;
    };
Function _TapGestureRecognizer_onSecondaryTapDown_set$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    (m.FunctionPointer? _onSecondaryTapDown) {
      void _onSecondaryTapDownProxy(
              TapDownDetails _onSecondaryTapDown_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            _onSecondaryTapDown!,
            [_onSecondaryTapDown_details$],
            {},
          );
      target$.onSecondaryTapDown =
          (_onSecondaryTapDown == null ? null : _onSecondaryTapDownProxy);
    };
Function _TapGestureRecognizer_onSecondaryTapUp$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    () {
      return target$.onSecondaryTapUp;
    };
Function _TapGestureRecognizer_onSecondaryTapUp_set$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    (m.FunctionPointer? _onSecondaryTapUp) {
      void _onSecondaryTapUpProxy(TapUpDetails _onSecondaryTapUp_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            _onSecondaryTapUp!,
            [_onSecondaryTapUp_details$],
            {},
          );
      target$.onSecondaryTapUp =
          (_onSecondaryTapUp == null ? null : _onSecondaryTapUpProxy);
    };
Function _TapGestureRecognizer_onSecondaryTapCancel$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    () {
      return target$.onSecondaryTapCancel;
    };
Function _TapGestureRecognizer_onSecondaryTapCancel_set$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    (m.FunctionPointer? _onSecondaryTapCancel) {
      void _onSecondaryTapCancelProxy() => scope$.engine.callFunctionPointer(
            scope$,
            _onSecondaryTapCancel!,
            [],
            {},
          );
      target$.onSecondaryTapCancel =
          (_onSecondaryTapCancel == null ? null : _onSecondaryTapCancelProxy);
    };
Function _TapGestureRecognizer_onTertiaryTapDown$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    () {
      return target$.onTertiaryTapDown;
    };
Function _TapGestureRecognizer_onTertiaryTapDown_set$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    (m.FunctionPointer? _onTertiaryTapDown) {
      void _onTertiaryTapDownProxy(
              TapDownDetails _onTertiaryTapDown_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            _onTertiaryTapDown!,
            [_onTertiaryTapDown_details$],
            {},
          );
      target$.onTertiaryTapDown =
          (_onTertiaryTapDown == null ? null : _onTertiaryTapDownProxy);
    };
Function _TapGestureRecognizer_onTertiaryTapUp$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    () {
      return target$.onTertiaryTapUp;
    };
Function _TapGestureRecognizer_onTertiaryTapUp_set$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    (m.FunctionPointer? _onTertiaryTapUp) {
      void _onTertiaryTapUpProxy(TapUpDetails _onTertiaryTapUp_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            _onTertiaryTapUp!,
            [_onTertiaryTapUp_details$],
            {},
          );
      target$.onTertiaryTapUp =
          (_onTertiaryTapUp == null ? null : _onTertiaryTapUpProxy);
    };
Function _TapGestureRecognizer_onTertiaryTapCancel$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    () {
      return target$.onTertiaryTapCancel;
    };
Function _TapGestureRecognizer_onTertiaryTapCancel_set$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    (m.FunctionPointer? _onTertiaryTapCancel) {
      void _onTertiaryTapCancelProxy() => scope$.engine.callFunctionPointer(
            scope$,
            _onTertiaryTapCancel!,
            [],
            {},
          );
      target$.onTertiaryTapCancel =
          (_onTertiaryTapCancel == null ? null : _onTertiaryTapCancelProxy);
    };
Function _TapGestureRecognizer_debugDescription$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    () {
      return target$.debugDescription;
    };
Function _TapGestureRecognizer__$(m.Scope scope$) => ({
      Object? debugOwner,
      Set? supportedDevices,
      m.FunctionPointer? allowedButtonsFilter,
    }) {
      bool allowedButtonsFilterProxy(int allowedButtonsFilter_buttons$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            allowedButtonsFilter!,
            [allowedButtonsFilter_buttons$],
            {},
          );
      return TapGestureRecognizer(
        allowedButtonsFilter:
            allowedButtonsFilter == null ? null : allowedButtonsFilterProxy,
        debugOwner: debugOwner,
        supportedDevices:
            supportedDevices == null ? null : Set.from(supportedDevices),
      );
    };
Function _TapGestureRecognizer_isPointerAllowed$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    target$.isPointerAllowed;
Function _TapGestureRecognizer_handleTapDown$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    target$.handleTapDown;
Function _TapGestureRecognizer_handleTapUp$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    target$.handleTapUp;
Function _TapGestureRecognizer_handleTapCancel$(
  m.Scope scope$,
  TapGestureRecognizer target$,
) =>
    target$.handleTapCancel;
