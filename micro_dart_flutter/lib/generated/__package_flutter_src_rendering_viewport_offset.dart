// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/viewport_offset.dart';
import 'package:flutter/animation.dart';
import 'package:flutter/foundation.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/viewport_offset.dart',
  {
    'ViewportOffset.fixed': _ViewportOffset_fixed_$,
    'ViewportOffset.zero': _ViewportOffset_zero_$,
    'ScrollDirection.idle': _ScrollDirection_idle$,
    'ScrollDirection.forward': _ScrollDirection_forward$,
    'ScrollDirection.reverse': _ScrollDirection_reverse$,
    'ScrollDirection.values': _ScrollDirection_values$,
    'flipScrollDirection': _flipScrollDirection$,
  },
  {},
  {
    'ViewportOffset': m.ClassMirror(
      'ViewportOffset',
      {
        '#as': ViewportOffset_as$,
        '#is': ViewportOffset_is$,
        'pixels': _ViewportOffset_pixels$,
        'hasPixels': _ViewportOffset_hasPixels$,
        'userScrollDirection': _ViewportOffset_userScrollDirection$,
        'allowImplicitScrolling': _ViewportOffset_allowImplicitScrolling$,
        'applyViewportDimension': _ViewportOffset_applyViewportDimension$,
        'applyContentDimensions': _ViewportOffset_applyContentDimensions$,
        'correctBy': _ViewportOffset_correctBy$,
        'jumpTo': _ViewportOffset_jumpTo$,
        'animateTo': _ViewportOffset_animateTo$,
        'moveTo': _ViewportOffset_moveTo$,
        'toString': _ViewportOffset_toString$,
        'debugFillDescription': _ViewportOffset_debugFillDescription$,
      },
      {},
    ),
    'ScrollDirection': m.ClassMirror(
      'ScrollDirection',
      {},
      {},
    ),
  },
);
Function ViewportOffset_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ViewportOffset;
Function ViewportOffset_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ViewportOffset;
Function _ViewportOffset_pixels$(
  m.Scope scope$,
  ViewportOffset target$,
) =>
    () {
      return target$.pixels;
    };
Function _ViewportOffset_hasPixels$(
  m.Scope scope$,
  ViewportOffset target$,
) =>
    () {
      return target$.hasPixels;
    };
Function _ViewportOffset_userScrollDirection$(
  m.Scope scope$,
  ViewportOffset target$,
) =>
    () {
      return target$.userScrollDirection;
    };
Function _ViewportOffset_allowImplicitScrolling$(
  m.Scope scope$,
  ViewportOffset target$,
) =>
    () {
      return target$.allowImplicitScrolling;
    };
Function _ViewportOffset_fixed_$(m.Scope scope$) => ViewportOffset.fixed;
Function _ViewportOffset_zero_$(m.Scope scope$) => ViewportOffset.zero;
Function _ViewportOffset_applyViewportDimension$(
  m.Scope scope$,
  ViewportOffset target$,
) =>
    target$.applyViewportDimension;
Function _ViewportOffset_applyContentDimensions$(
  m.Scope scope$,
  ViewportOffset target$,
) =>
    target$.applyContentDimensions;
Function _ViewportOffset_correctBy$(
  m.Scope scope$,
  ViewportOffset target$,
) =>
    target$.correctBy;
Function _ViewportOffset_jumpTo$(
  m.Scope scope$,
  ViewportOffset target$,
) =>
    target$.jumpTo;
Function _ViewportOffset_animateTo$(
  m.Scope scope$,
  ViewportOffset target$,
) =>
    target$.animateTo;
Function _ViewportOffset_moveTo$(
  m.Scope scope$,
  ViewportOffset target$,
) =>
    target$.moveTo;
Function _ViewportOffset_toString$(
  m.Scope scope$,
  ViewportOffset target$,
) =>
    target$.toString;
Function _ViewportOffset_debugFillDescription$(
  m.Scope scope$,
  ViewportOffset target$,
) =>
    target$.debugFillDescription;
ScrollDirection _ScrollDirection_idle$() {
  return ScrollDirection.idle;
}

ScrollDirection _ScrollDirection_forward$() {
  return ScrollDirection.forward;
}

ScrollDirection _ScrollDirection_reverse$() {
  return ScrollDirection.reverse;
}

List<ScrollDirection> _ScrollDirection_values$() {
  return ScrollDirection.values;
}

Function _flipScrollDirection$(m.Scope scope$) => flipScrollDirection;
