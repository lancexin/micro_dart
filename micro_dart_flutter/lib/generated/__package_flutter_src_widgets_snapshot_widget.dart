// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/snapshot_widget.dart';
import 'dart:ui';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/media_query.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/snapshot_widget.dart',
  {
    'SnapshotController.': _SnapshotController__$,
    'SnapshotWidget.': _SnapshotWidget__$,
    'SnapshotPainter.paint': _SnapshotPainter_paint$,
    'SnapshotMode.permissive': _SnapshotMode_permissive$,
    'SnapshotMode.normal': _SnapshotMode_normal$,
    'SnapshotMode.forced': _SnapshotMode_forced$,
    'SnapshotMode.values': _SnapshotMode_values$,
  },
  {},
  {
    'SnapshotController': m.ClassMirror(
      'SnapshotController',
      {
        '#as': SnapshotController_as$,
        '#is': SnapshotController_is$,
        'allowSnapshotting': _SnapshotController_allowSnapshotting$,
        'clear': _SnapshotController_clear$,
      },
      {'allowSnapshotting': _SnapshotController_allowSnapshotting_set$},
    ),
    'SnapshotWidget': m.ClassMirror(
      'SnapshotWidget',
      {
        '#as': SnapshotWidget_as$,
        '#is': SnapshotWidget_is$,
        'controller': _SnapshotWidget_controller$,
        'mode': _SnapshotWidget_mode$,
        'autoresize': _SnapshotWidget_autoresize$,
        'painter': _SnapshotWidget_painter$,
        'createRenderObject': _SnapshotWidget_createRenderObject$,
        'updateRenderObject': _SnapshotWidget_updateRenderObject$,
      },
      {},
    ),
    'SnapshotPainter': m.ClassMirror(
      'SnapshotPainter',
      {
        '#as': SnapshotPainter_as$,
        '#is': SnapshotPainter_is$,
        'paintSnapshot': _SnapshotPainter_paintSnapshot$,
        'shouldRepaint': _SnapshotPainter_shouldRepaint$,
      },
      {},
    ),
    'SnapshotMode': m.ClassMirror(
      'SnapshotMode',
      {},
      {},
    ),
  },
);
Function SnapshotController_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SnapshotController;
Function SnapshotController_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SnapshotController;
Function _SnapshotController_allowSnapshotting$(
  m.Scope scope$,
  SnapshotController target$,
) =>
    () {
      return target$.allowSnapshotting;
    };
void _SnapshotController_allowSnapshotting_set$(
  m.Scope scope$,
  SnapshotController target$,
) =>
    (dynamic other$) {
      target$.allowSnapshotting = other$;
    };
Function _SnapshotController__$(m.Scope scope$) => ({bool? allowSnapshotting}) {
      return SnapshotController(allowSnapshotting: allowSnapshotting ?? false);
    };
Function _SnapshotController_clear$(
  m.Scope scope$,
  SnapshotController target$,
) =>
    target$.clear;
Function SnapshotWidget_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SnapshotWidget;
Function SnapshotWidget_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SnapshotWidget;
Function _SnapshotWidget_controller$(
  m.Scope scope$,
  SnapshotWidget target$,
) =>
    () {
      return target$.controller;
    };
Function _SnapshotWidget_mode$(
  m.Scope scope$,
  SnapshotWidget target$,
) =>
    () {
      return target$.mode;
    };
Function _SnapshotWidget_autoresize$(
  m.Scope scope$,
  SnapshotWidget target$,
) =>
    () {
      return target$.autoresize;
    };
Function _SnapshotWidget_painter$(
  m.Scope scope$,
  SnapshotWidget target$,
) =>
    () {
      return target$.painter;
    };
Function _SnapshotWidget__$(m.Scope scope$) => ({
      Key? key,
      SnapshotMode? mode,
      SnapshotPainter? painter,
      bool? autoresize,
      required SnapshotController controller,
      required Widget? child,
    }) {
      if (painter == null) {
        return SnapshotWidget(
          autoresize: autoresize ?? false,
          child: child,
          controller: controller,
          key: key,
          mode: mode ?? SnapshotMode.normal,
        );
      }
      return SnapshotWidget(
        autoresize: autoresize ?? false,
        child: child,
        controller: controller,
        key: key,
        mode: mode ?? SnapshotMode.normal,
        painter: painter,
      );
    };
Function _SnapshotWidget_createRenderObject$(
  m.Scope scope$,
  SnapshotWidget target$,
) =>
    target$.createRenderObject;
Function _SnapshotWidget_updateRenderObject$(
  m.Scope scope$,
  SnapshotWidget target$,
) =>
    target$.updateRenderObject;
Function SnapshotPainter_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SnapshotPainter;
Function SnapshotPainter_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SnapshotPainter;
Function _SnapshotPainter_paintSnapshot$(
  m.Scope scope$,
  SnapshotPainter target$,
) =>
    target$.paintSnapshot;
Function _SnapshotPainter_paint$(
  m.Scope scope$,
  SnapshotPainter target$,
) =>
    (
      PaintingContext context,
      Offset offset,
      Size size,
      m.FunctionPointer painter,
    ) {
      void painterProxy(
        PaintingContext painter_context$,
        Offset painter_offset$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            painter,
            [
              painter_context$,
              painter_offset$,
            ],
            {},
          );
      target$.paint(
        context,
        offset,
        size,
        painterProxy,
      );
    };
Function _SnapshotPainter_shouldRepaint$(
  m.Scope scope$,
  SnapshotPainter target$,
) =>
    target$.shouldRepaint;
SnapshotMode _SnapshotMode_permissive$() {
  return SnapshotMode.permissive;
}

SnapshotMode _SnapshotMode_normal$() {
  return SnapshotMode.normal;
}

SnapshotMode _SnapshotMode_forced$() {
  return SnapshotMode.forced;
}

List<SnapshotMode> _SnapshotMode_values$() {
  return SnapshotMode.values;
}
