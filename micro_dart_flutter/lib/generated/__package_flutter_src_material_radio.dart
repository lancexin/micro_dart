// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/radio.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/radio_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/material/toggleable.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/radio.dart',
  {
    'Radio.': _Radio__$,
    'Radio.adaptive': _Radio_adaptive_$,
  },
  {},
  {
    'Radio': m.ClassMirror(
      'Radio',
      {
        '#as': Radio_as$,
        '#is': Radio_is$,
        'value': _Radio_value$,
        'groupValue': _Radio_groupValue$,
        'onChanged': _Radio_onChanged$,
        'mouseCursor': _Radio_mouseCursor$,
        'toggleable': _Radio_toggleable$,
        'activeColor': _Radio_activeColor$,
        'fillColor': _Radio_fillColor$,
        'materialTapTargetSize': _Radio_materialTapTargetSize$,
        'visualDensity': _Radio_visualDensity$,
        'focusColor': _Radio_focusColor$,
        'hoverColor': _Radio_hoverColor$,
        'overlayColor': _Radio_overlayColor$,
        'splashRadius': _Radio_splashRadius$,
        'focusNode': _Radio_focusNode$,
        'autofocus': _Radio_autofocus$,
        'createState': _Radio_createState$,
      },
      {},
    )
  },
);
Function Radio_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Radio<T>;
Function Radio_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Radio<T>;
Function _Radio_value$<T>(
  m.Scope scope$,
  Radio<T> target$,
) =>
    () {
      return target$.value;
    };
Function _Radio_groupValue$<T>(
  m.Scope scope$,
  Radio<T> target$,
) =>
    () {
      return target$.groupValue;
    };
Function _Radio_onChanged$<T>(
  m.Scope scope$,
  Radio<T> target$,
) =>
    () {
      return target$.onChanged;
    };
Function _Radio_mouseCursor$<T>(
  m.Scope scope$,
  Radio<T> target$,
) =>
    () {
      return target$.mouseCursor;
    };
Function _Radio_toggleable$<T>(
  m.Scope scope$,
  Radio<T> target$,
) =>
    () {
      return target$.toggleable;
    };
Function _Radio_activeColor$<T>(
  m.Scope scope$,
  Radio<T> target$,
) =>
    () {
      return target$.activeColor;
    };
Function _Radio_fillColor$<T>(
  m.Scope scope$,
  Radio<T> target$,
) =>
    () {
      return target$.fillColor;
    };
Function _Radio_materialTapTargetSize$<T>(
  m.Scope scope$,
  Radio<T> target$,
) =>
    () {
      return target$.materialTapTargetSize;
    };
Function _Radio_visualDensity$<T>(
  m.Scope scope$,
  Radio<T> target$,
) =>
    () {
      return target$.visualDensity;
    };
Function _Radio_focusColor$<T>(
  m.Scope scope$,
  Radio<T> target$,
) =>
    () {
      return target$.focusColor;
    };
Function _Radio_hoverColor$<T>(
  m.Scope scope$,
  Radio<T> target$,
) =>
    () {
      return target$.hoverColor;
    };
Function _Radio_overlayColor$<T>(
  m.Scope scope$,
  Radio<T> target$,
) =>
    () {
      return target$.overlayColor;
    };
Function _Radio_splashRadius$<T>(
  m.Scope scope$,
  Radio<T> target$,
) =>
    () {
      return target$.splashRadius;
    };
Function _Radio_focusNode$<T>(
  m.Scope scope$,
  Radio<T> target$,
) =>
    () {
      return target$.focusNode;
    };
Function _Radio_autofocus$<T>(
  m.Scope scope$,
  Radio<T> target$,
) =>
    () {
      return target$.autofocus;
    };
Function _Radio__$(m.Scope scope$) => ({
      Key? key,
      required dynamic value,
      required dynamic groupValue,
      required m.FunctionPointer? onChanged,
      MouseCursor? mouseCursor,
      bool? toggleable,
      Color? activeColor,
      MaterialStateProperty<Color>? fillColor,
      Color? focusColor,
      Color? hoverColor,
      MaterialStateProperty<Color>? overlayColor,
      double? splashRadius,
      MaterialTapTargetSize? materialTapTargetSize,
      VisualDensity? visualDensity,
      FocusNode? focusNode,
      bool? autofocus,
    }) {
      void onChangedProxy(dynamic onChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChanged!,
            [onChanged_value$],
            {},
          );
      return Radio(
        activeColor: activeColor,
        autofocus: autofocus ?? false,
        fillColor: fillColor,
        focusColor: focusColor,
        focusNode: focusNode,
        groupValue: groupValue,
        hoverColor: hoverColor,
        key: key,
        materialTapTargetSize: materialTapTargetSize,
        mouseCursor: mouseCursor,
        onChanged: onChanged == null ? null : onChangedProxy,
        overlayColor: overlayColor,
        splashRadius: splashRadius,
        toggleable: toggleable ?? false,
        value: value,
        visualDensity: visualDensity,
      );
    };
Function _Radio_adaptive_$(m.Scope scope$) => ({
      Key? key,
      required dynamic value,
      required dynamic groupValue,
      required m.FunctionPointer? onChanged,
      MouseCursor? mouseCursor,
      bool? toggleable,
      Color? activeColor,
      MaterialStateProperty<Color>? fillColor,
      Color? focusColor,
      Color? hoverColor,
      MaterialStateProperty<Color>? overlayColor,
      double? splashRadius,
      MaterialTapTargetSize? materialTapTargetSize,
      VisualDensity? visualDensity,
      FocusNode? focusNode,
      bool? autofocus,
    }) {
      void onChangedProxy(dynamic onChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChanged!,
            [onChanged_value$],
            {},
          );
      return Radio.adaptive(
        activeColor: activeColor,
        autofocus: autofocus ?? false,
        fillColor: fillColor,
        focusColor: focusColor,
        focusNode: focusNode,
        groupValue: groupValue,
        hoverColor: hoverColor,
        key: key,
        materialTapTargetSize: materialTapTargetSize,
        mouseCursor: mouseCursor,
        onChanged: onChanged == null ? null : onChangedProxy,
        overlayColor: overlayColor,
        splashRadius: splashRadius,
        toggleable: toggleable ?? false,
        value: value,
        visualDensity: visualDensity,
      );
    };
Function _Radio_createState$<T>(
  m.Scope scope$,
  Radio<T> target$,
) =>
    target$.createState;
