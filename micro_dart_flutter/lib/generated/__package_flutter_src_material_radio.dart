// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/radio.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/radio_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/material/toggleable.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/radio.dart',
  {},
  {},
  {
    'Radio': m.ClassMirror(
      'Radio',
      {
        'value': _Radio_value$,
        'groupValue': _Radio_groupValue$,
        'onChanged': _Radio_onChanged$,
        'mouseCursor': _Radio_mouseCursor$,
        'toggleable': _Radio_toggleable$,
        'activeColor': _Radio_activeColor$,
        'fillColor': _Radio_fillColor$,
        'materialTapTargetSize': _Radio_materialTapTargetSize$,
        'visualDensity': _Radio_visualDensity$,
        'focusColor': _Radio_focusColor$,
        'hoverColor': _Radio_hoverColor$,
        'overlayColor': _Radio_overlayColor$,
        'splashRadius': _Radio_splashRadius$,
        'focusNode': _Radio_focusNode$,
        'autofocus': _Radio_autofocus$,
        'createState': _Radio_createState$,
      },
      {},
    )
  },
);
T _Radio_value$<T>(Radio<T> target) {
  return target.value;
}

T? _Radio_groupValue$<T>(Radio<T> target) {
  return target.groupValue;
}

void Function(T?)? _Radio_onChanged$<T>(Radio<T> target) {
  return target.onChanged;
}

MouseCursor? _Radio_mouseCursor$<T>(Radio<T> target) {
  return target.mouseCursor;
}

bool _Radio_toggleable$<T>(Radio<T> target) {
  return target.toggleable;
}

Color? _Radio_activeColor$<T>(Radio<T> target) {
  return target.activeColor;
}

MaterialStateProperty<Color?>? _Radio_fillColor$<T>(Radio<T> target) {
  return target.fillColor;
}

MaterialTapTargetSize? _Radio_materialTapTargetSize$<T>(Radio<T> target) {
  return target.materialTapTargetSize;
}

VisualDensity? _Radio_visualDensity$<T>(Radio<T> target) {
  return target.visualDensity;
}

Color? _Radio_focusColor$<T>(Radio<T> target) {
  return target.focusColor;
}

Color? _Radio_hoverColor$<T>(Radio<T> target) {
  return target.hoverColor;
}

MaterialStateProperty<Color?>? _Radio_overlayColor$<T>(Radio<T> target) {
  return target.overlayColor;
}

double? _Radio_splashRadius$<T>(Radio<T> target) {
  return target.splashRadius;
}

FocusNode? _Radio_focusNode$<T>(Radio<T> target) {
  return target.focusNode;
}

bool _Radio_autofocus$<T>(Radio<T> target) {
  return target.autofocus;
}

Function _Radio_createState$<T>(
  m.Scope scope,
  Radio<T> target,
) =>
    target.createState;
