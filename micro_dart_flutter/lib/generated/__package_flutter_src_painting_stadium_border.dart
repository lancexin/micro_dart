// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/stadium_border.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/painting/border_radius.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/painting/circle_border.dart';
import 'package:flutter/src/painting/rounded_rectangle_border.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/stadium_border.dart',
  {'StadiumBorder.': _StadiumBorder__$},
  {},
  {
    'StadiumBorder': m.ClassMirror(
      'StadiumBorder',
      {
        '#as': StadiumBorder_as$,
        '#is': StadiumBorder_is$,
        'preferPaintInterior': _StadiumBorder_preferPaintInterior$,
        'hashCode': _StadiumBorder_hashCode$,
        'scale': _StadiumBorder_scale$,
        'lerpFrom': _StadiumBorder_lerpFrom$,
        'lerpTo': _StadiumBorder_lerpTo$,
        'copyWith': _StadiumBorder_copyWith$,
        'getInnerPath': _StadiumBorder_getInnerPath$,
        'getOuterPath': _StadiumBorder_getOuterPath$,
        'paintInterior': _StadiumBorder_paintInterior$,
        'paint': _StadiumBorder_paint$,
        '==': _StadiumBorder_eq$$,
        'toString': _StadiumBorder_toString$,
      },
      {},
    )
  },
);
Function StadiumBorder_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as StadiumBorder;
Function StadiumBorder_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is StadiumBorder;
Function _StadiumBorder_preferPaintInterior$(
  m.Scope scope$,
  StadiumBorder target$,
) =>
    () {
      return target$.preferPaintInterior;
    };
Function _StadiumBorder_hashCode$(
  m.Scope scope$,
  StadiumBorder target$,
) =>
    () {
      return target$.hashCode;
    };
Function _StadiumBorder__$(m.Scope scope$) => ({BorderSide? side}) {
      return StadiumBorder(side: side ?? BorderSide.none);
    };
Function _StadiumBorder_scale$(
  m.Scope scope$,
  StadiumBorder target$,
) =>
    target$.scale;
Function _StadiumBorder_lerpFrom$(
  m.Scope scope$,
  StadiumBorder target$,
) =>
    target$.lerpFrom;
Function _StadiumBorder_lerpTo$(
  m.Scope scope$,
  StadiumBorder target$,
) =>
    target$.lerpTo;
Function _StadiumBorder_copyWith$(
  m.Scope scope$,
  StadiumBorder target$,
) =>
    target$.copyWith;
Function _StadiumBorder_getInnerPath$(
  m.Scope scope$,
  StadiumBorder target$,
) =>
    target$.getInnerPath;
Function _StadiumBorder_getOuterPath$(
  m.Scope scope$,
  StadiumBorder target$,
) =>
    target$.getOuterPath;
Function _StadiumBorder_paintInterior$(
  m.Scope scope$,
  StadiumBorder target$,
) =>
    target$.paintInterior;
Function _StadiumBorder_paint$(
  m.Scope scope$,
  StadiumBorder target$,
) =>
    target$.paint;
Function _StadiumBorder_eq$$(
  m.Scope scope$,
  StadiumBorder target$,
) =>
    (Object other$) => target$ == other$;
Function _StadiumBorder_toString$(
  m.Scope scope$,
  StadiumBorder target$,
) =>
    target$.toString;
