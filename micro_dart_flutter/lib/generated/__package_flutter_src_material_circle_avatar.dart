// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/circle_avatar.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/circle_avatar.dart',
  {},
  {},
  {
    'CircleAvatar': m.ClassMirror(
      'CircleAvatar',
      {
        '#as': CircleAvatar_as$,
        '#is': CircleAvatar_is$,
        'child': _CircleAvatar_child$,
        'backgroundColor': _CircleAvatar_backgroundColor$,
        'foregroundColor': _CircleAvatar_foregroundColor$,
        'backgroundImage': _CircleAvatar_backgroundImage$,
        'foregroundImage': _CircleAvatar_foregroundImage$,
        'onBackgroundImageError': _CircleAvatar_onBackgroundImageError$,
        'onForegroundImageError': _CircleAvatar_onForegroundImageError$,
        'radius': _CircleAvatar_radius$,
        'minRadius': _CircleAvatar_minRadius$,
        'maxRadius': _CircleAvatar_maxRadius$,
        'build': _CircleAvatar_build$,
      },
      {},
    )
  },
);
Function CircleAvatar_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CircleAvatar;
Function CircleAvatar_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CircleAvatar;
Widget? _CircleAvatar_child$(CircleAvatar target) {
  return target.child;
}

Color? _CircleAvatar_backgroundColor$(CircleAvatar target) {
  return target.backgroundColor;
}

Color? _CircleAvatar_foregroundColor$(CircleAvatar target) {
  return target.foregroundColor;
}

ImageProvider<Object>? _CircleAvatar_backgroundImage$(CircleAvatar target) {
  return target.backgroundImage;
}

ImageProvider<Object>? _CircleAvatar_foregroundImage$(CircleAvatar target) {
  return target.foregroundImage;
}

void Function(Object, StackTrace?)? _CircleAvatar_onBackgroundImageError$(
    CircleAvatar target) {
  return target.onBackgroundImageError;
}

void Function(Object, StackTrace?)? _CircleAvatar_onForegroundImageError$(
    CircleAvatar target) {
  return target.onForegroundImageError;
}

double? _CircleAvatar_radius$(CircleAvatar target) {
  return target.radius;
}

double? _CircleAvatar_minRadius$(CircleAvatar target) {
  return target.minRadius;
}

double? _CircleAvatar_maxRadius$(CircleAvatar target) {
  return target.maxRadius;
}

Function _CircleAvatar_build$(
  m.Scope scope,
  CircleAvatar target,
) =>
    target.build;
