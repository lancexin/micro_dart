// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/navigation_rail_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/navigation_rail.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/navigation_rail_theme.dart',
  {
    'NavigationRailThemeData.': _NavigationRailThemeData__$,
    'NavigationRailThemeData.lerp': _NavigationRailThemeData_lerp$,
    'NavigationRailTheme.': _NavigationRailTheme__$,
    'NavigationRailTheme.of': _NavigationRailTheme_of$,
  },
  {},
  {
    'NavigationRailThemeData': m.ClassMirror(
      'NavigationRailThemeData',
      {
        '#as': NavigationRailThemeData_as$,
        '#is': NavigationRailThemeData_is$,
        'backgroundColor': _NavigationRailThemeData_backgroundColor$,
        'elevation': _NavigationRailThemeData_elevation$,
        'unselectedLabelTextStyle':
            _NavigationRailThemeData_unselectedLabelTextStyle$,
        'selectedLabelTextStyle':
            _NavigationRailThemeData_selectedLabelTextStyle$,
        'unselectedIconTheme': _NavigationRailThemeData_unselectedIconTheme$,
        'selectedIconTheme': _NavigationRailThemeData_selectedIconTheme$,
        'groupAlignment': _NavigationRailThemeData_groupAlignment$,
        'labelType': _NavigationRailThemeData_labelType$,
        'useIndicator': _NavigationRailThemeData_useIndicator$,
        'indicatorColor': _NavigationRailThemeData_indicatorColor$,
        'indicatorShape': _NavigationRailThemeData_indicatorShape$,
        'minWidth': _NavigationRailThemeData_minWidth$,
        'minExtendedWidth': _NavigationRailThemeData_minExtendedWidth$,
        'hashCode': _NavigationRailThemeData_hashCode$,
        'copyWith': _NavigationRailThemeData_copyWith$,
        '==': _NavigationRailThemeData_eq$$,
        'debugFillProperties': _NavigationRailThemeData_debugFillProperties$,
      },
      {},
    ),
    'NavigationRailTheme': m.ClassMirror(
      'NavigationRailTheme',
      {
        '#as': NavigationRailTheme_as$,
        '#is': NavigationRailTheme_is$,
        'data': _NavigationRailTheme_data$,
        'wrap': _NavigationRailTheme_wrap$,
        'updateShouldNotify': _NavigationRailTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function NavigationRailThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as NavigationRailThemeData;
Function NavigationRailThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is NavigationRailThemeData;
Function _NavigationRailThemeData_backgroundColor$(
  m.Scope scope$,
  NavigationRailThemeData target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _NavigationRailThemeData_elevation$(
  m.Scope scope$,
  NavigationRailThemeData target$,
) =>
    () {
      return target$.elevation;
    };
Function _NavigationRailThemeData_unselectedLabelTextStyle$(
  m.Scope scope$,
  NavigationRailThemeData target$,
) =>
    () {
      return target$.unselectedLabelTextStyle;
    };
Function _NavigationRailThemeData_selectedLabelTextStyle$(
  m.Scope scope$,
  NavigationRailThemeData target$,
) =>
    () {
      return target$.selectedLabelTextStyle;
    };
Function _NavigationRailThemeData_unselectedIconTheme$(
  m.Scope scope$,
  NavigationRailThemeData target$,
) =>
    () {
      return target$.unselectedIconTheme;
    };
Function _NavigationRailThemeData_selectedIconTheme$(
  m.Scope scope$,
  NavigationRailThemeData target$,
) =>
    () {
      return target$.selectedIconTheme;
    };
Function _NavigationRailThemeData_groupAlignment$(
  m.Scope scope$,
  NavigationRailThemeData target$,
) =>
    () {
      return target$.groupAlignment;
    };
Function _NavigationRailThemeData_labelType$(
  m.Scope scope$,
  NavigationRailThemeData target$,
) =>
    () {
      return target$.labelType;
    };
Function _NavigationRailThemeData_useIndicator$(
  m.Scope scope$,
  NavigationRailThemeData target$,
) =>
    () {
      return target$.useIndicator;
    };
Function _NavigationRailThemeData_indicatorColor$(
  m.Scope scope$,
  NavigationRailThemeData target$,
) =>
    () {
      return target$.indicatorColor;
    };
Function _NavigationRailThemeData_indicatorShape$(
  m.Scope scope$,
  NavigationRailThemeData target$,
) =>
    () {
      return target$.indicatorShape;
    };
Function _NavigationRailThemeData_minWidth$(
  m.Scope scope$,
  NavigationRailThemeData target$,
) =>
    () {
      return target$.minWidth;
    };
Function _NavigationRailThemeData_minExtendedWidth$(
  m.Scope scope$,
  NavigationRailThemeData target$,
) =>
    () {
      return target$.minExtendedWidth;
    };
Function _NavigationRailThemeData_hashCode$(
  m.Scope scope$,
  NavigationRailThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _NavigationRailThemeData__$(m.Scope scope$) => ({
      Color? backgroundColor,
      double? elevation,
      TextStyle? unselectedLabelTextStyle,
      TextStyle? selectedLabelTextStyle,
      IconThemeData? unselectedIconTheme,
      IconThemeData? selectedIconTheme,
      double? groupAlignment,
      NavigationRailLabelType? labelType,
      bool? useIndicator,
      Color? indicatorColor,
      ShapeBorder? indicatorShape,
      double? minWidth,
      double? minExtendedWidth,
    }) {
      return NavigationRailThemeData(
        backgroundColor: backgroundColor,
        elevation: elevation,
        groupAlignment: groupAlignment,
        indicatorColor: indicatorColor,
        indicatorShape: indicatorShape,
        labelType: labelType,
        minExtendedWidth: minExtendedWidth,
        minWidth: minWidth,
        selectedIconTheme: selectedIconTheme,
        selectedLabelTextStyle: selectedLabelTextStyle,
        unselectedIconTheme: unselectedIconTheme,
        unselectedLabelTextStyle: unselectedLabelTextStyle,
        useIndicator: useIndicator,
      );
    };
Function _NavigationRailThemeData_copyWith$(
  m.Scope scope$,
  NavigationRailThemeData target$,
) =>
    target$.copyWith;
Function _NavigationRailThemeData_lerp$(m.Scope scope$) =>
    NavigationRailThemeData.lerp;
Function _NavigationRailThemeData_eq$$(
  m.Scope scope$,
  NavigationRailThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _NavigationRailThemeData_debugFillProperties$(
  m.Scope scope$,
  NavigationRailThemeData target$,
) =>
    target$.debugFillProperties;
Function NavigationRailTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as NavigationRailTheme;
Function NavigationRailTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is NavigationRailTheme;
Function _NavigationRailTheme_data$(
  m.Scope scope$,
  NavigationRailTheme target$,
) =>
    () {
      return target$.data;
    };
Function _NavigationRailTheme__$(m.Scope scope$) => ({
      Key? key,
      required NavigationRailThemeData data,
      required Widget child,
    }) {
      return NavigationRailTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _NavigationRailTheme_of$(m.Scope scope$) => NavigationRailTheme.of;
Function _NavigationRailTheme_wrap$(
  m.Scope scope$,
  NavigationRailTheme target$,
) =>
    target$.wrap;
Function _NavigationRailTheme_updateShouldNotify$(
  m.Scope scope$,
  NavigationRailTheme target$,
) =>
    target$.updateShouldNotify;
