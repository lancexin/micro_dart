// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/navigation_rail_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/navigation_rail.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/navigation_rail_theme.dart',
  {
    'NavigationRailThemeData.lerp': _NavigationRailThemeData_lerp$,
    'NavigationRailTheme.of': _NavigationRailTheme_of$,
  },
  {},
  {
    'NavigationRailThemeData': m.ClassMirror(
      'NavigationRailThemeData',
      {
        'backgroundColor': _NavigationRailThemeData_backgroundColor$,
        'elevation': _NavigationRailThemeData_elevation$,
        'unselectedLabelTextStyle':
            _NavigationRailThemeData_unselectedLabelTextStyle$,
        'selectedLabelTextStyle':
            _NavigationRailThemeData_selectedLabelTextStyle$,
        'unselectedIconTheme': _NavigationRailThemeData_unselectedIconTheme$,
        'selectedIconTheme': _NavigationRailThemeData_selectedIconTheme$,
        'groupAlignment': _NavigationRailThemeData_groupAlignment$,
        'labelType': _NavigationRailThemeData_labelType$,
        'useIndicator': _NavigationRailThemeData_useIndicator$,
        'indicatorColor': _NavigationRailThemeData_indicatorColor$,
        'indicatorShape': _NavigationRailThemeData_indicatorShape$,
        'minWidth': _NavigationRailThemeData_minWidth$,
        'minExtendedWidth': _NavigationRailThemeData_minExtendedWidth$,
        'hashCode': _NavigationRailThemeData_hashCode$,
        'copyWith': _NavigationRailThemeData_copyWith$,
        'debugFillProperties': _NavigationRailThemeData_debugFillProperties$,
      },
      {},
    ),
    'NavigationRailTheme': m.ClassMirror(
      'NavigationRailTheme',
      {
        'data': _NavigationRailTheme_data$,
        'wrap': _NavigationRailTheme_wrap$,
        'updateShouldNotify': _NavigationRailTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Color? _NavigationRailThemeData_backgroundColor$(
    NavigationRailThemeData target) {
  return target.backgroundColor;
}

double? _NavigationRailThemeData_elevation$(NavigationRailThemeData target) {
  return target.elevation;
}

TextStyle? _NavigationRailThemeData_unselectedLabelTextStyle$(
    NavigationRailThemeData target) {
  return target.unselectedLabelTextStyle;
}

TextStyle? _NavigationRailThemeData_selectedLabelTextStyle$(
    NavigationRailThemeData target) {
  return target.selectedLabelTextStyle;
}

IconThemeData? _NavigationRailThemeData_unselectedIconTheme$(
    NavigationRailThemeData target) {
  return target.unselectedIconTheme;
}

IconThemeData? _NavigationRailThemeData_selectedIconTheme$(
    NavigationRailThemeData target) {
  return target.selectedIconTheme;
}

double? _NavigationRailThemeData_groupAlignment$(
    NavigationRailThemeData target) {
  return target.groupAlignment;
}

NavigationRailLabelType? _NavigationRailThemeData_labelType$(
    NavigationRailThemeData target) {
  return target.labelType;
}

bool? _NavigationRailThemeData_useIndicator$(NavigationRailThemeData target) {
  return target.useIndicator;
}

Color? _NavigationRailThemeData_indicatorColor$(
    NavigationRailThemeData target) {
  return target.indicatorColor;
}

ShapeBorder? _NavigationRailThemeData_indicatorShape$(
    NavigationRailThemeData target) {
  return target.indicatorShape;
}

double? _NavigationRailThemeData_minWidth$(NavigationRailThemeData target) {
  return target.minWidth;
}

double? _NavigationRailThemeData_minExtendedWidth$(
    NavigationRailThemeData target) {
  return target.minExtendedWidth;
}

int _NavigationRailThemeData_hashCode$(NavigationRailThemeData target) {
  return target.hashCode;
}

Function _NavigationRailThemeData_copyWith$(
  m.Scope scope,
  NavigationRailThemeData target,
) =>
    target.copyWith;
Function _NavigationRailThemeData_lerp$(m.Scope scope) =>
    NavigationRailThemeData.lerp;
Function _NavigationRailThemeData_debugFillProperties$(
  m.Scope scope,
  NavigationRailThemeData target,
) =>
    target.debugFillProperties;
NavigationRailThemeData _NavigationRailTheme_data$(NavigationRailTheme target) {
  return target.data;
}

Function _NavigationRailTheme_of$(m.Scope scope) => NavigationRailTheme.of;
Function _NavigationRailTheme_wrap$(
  m.Scope scope,
  NavigationRailTheme target,
) =>
    target.wrap;
Function _NavigationRailTheme_updateShouldNotify$(
  m.Scope scope,
  NavigationRailTheme target,
) =>
    target.updateShouldNotify;
