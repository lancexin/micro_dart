// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/ink_ripple.dart';
import 'dart:math';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/ink_ripple.dart',
  {
    'InkRipple.splashFactory': _InkRipple_splashFactory$,
    'InkRipple.': _InkRipple__$,
  },
  {},
  {
    'InkRipple': m.ClassMirror(
      'InkRipple',
      {
        '#as': InkRipple_as$,
        '#is': InkRipple_is$,
        'confirm': _InkRipple_confirm$,
        'cancel': _InkRipple_cancel$,
        'dispose': _InkRipple_dispose$,
        'paintFeature': _InkRipple_paintFeature$,
      },
      {},
    )
  },
);
Function InkRipple_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as InkRipple;
Function InkRipple_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is InkRipple;
Function _InkRipple_splashFactory$(m.Scope scope$) =>
    () => InkRipple.splashFactory;
Function _InkRipple__$(m.Scope scope$) => ({
      required MaterialInkController controller,
      required RenderBox referenceBox,
      required Offset position,
      required Color color,
      required TextDirection textDirection,
      bool? containedInkWell,
      m.FunctionPointer? rectCallback,
      BorderRadius? borderRadius,
      ShapeBorder? customBorder,
      double? radius,
      m.FunctionPointer? onRemoved,
    }) {
      void onRemovedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onRemoved!,
            [],
            {},
          );
      Rect rectCallbackProxy() => scope$.engine.callFunctionPointer(
            scope$,
            rectCallback!,
            [],
            {},
          );
      return InkRipple(
        borderRadius: borderRadius,
        color: color,
        containedInkWell: containedInkWell ?? false,
        controller: controller,
        customBorder: customBorder,
        onRemoved: onRemoved == null ? null : onRemovedProxy,
        position: position,
        radius: radius,
        rectCallback: rectCallback == null ? null : rectCallbackProxy,
        referenceBox: referenceBox,
        textDirection: textDirection,
      );
    };
Function _InkRipple_confirm$(
  m.Scope scope$,
  InkRipple target$,
) =>
    target$.confirm;
Function _InkRipple_cancel$(
  m.Scope scope$,
  InkRipple target$,
) =>
    target$.cancel;
Function _InkRipple_dispose$(
  m.Scope scope$,
  InkRipple target$,
) =>
    target$.dispose;
Function _InkRipple_paintFeature$(
  m.Scope scope$,
  InkRipple target$,
) =>
    target$.paintFeature;
