// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/floating_action_button.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/floating_action_button_theme.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/scaffold.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/material/tooltip.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/floating_action_button.dart',
  {},
  {},
  {
    'FloatingActionButton': m.ClassMirror(
      'FloatingActionButton',
      {
        '#as': FloatingActionButton_as$,
        '#is': FloatingActionButton_is$,
        'child': _FloatingActionButton_child$,
        'tooltip': _FloatingActionButton_tooltip$,
        'foregroundColor': _FloatingActionButton_foregroundColor$,
        'backgroundColor': _FloatingActionButton_backgroundColor$,
        'focusColor': _FloatingActionButton_focusColor$,
        'hoverColor': _FloatingActionButton_hoverColor$,
        'splashColor': _FloatingActionButton_splashColor$,
        'heroTag': _FloatingActionButton_heroTag$,
        'onPressed': _FloatingActionButton_onPressed$,
        'mouseCursor': _FloatingActionButton_mouseCursor$,
        'elevation': _FloatingActionButton_elevation$,
        'focusElevation': _FloatingActionButton_focusElevation$,
        'hoverElevation': _FloatingActionButton_hoverElevation$,
        'highlightElevation': _FloatingActionButton_highlightElevation$,
        'disabledElevation': _FloatingActionButton_disabledElevation$,
        'mini': _FloatingActionButton_mini$,
        'shape': _FloatingActionButton_shape$,
        'clipBehavior': _FloatingActionButton_clipBehavior$,
        'isExtended': _FloatingActionButton_isExtended$,
        'focusNode': _FloatingActionButton_focusNode$,
        'autofocus': _FloatingActionButton_autofocus$,
        'materialTapTargetSize': _FloatingActionButton_materialTapTargetSize$,
        'enableFeedback': _FloatingActionButton_enableFeedback$,
        'extendedIconLabelSpacing':
            _FloatingActionButton_extendedIconLabelSpacing$,
        'extendedPadding': _FloatingActionButton_extendedPadding$,
        'extendedTextStyle': _FloatingActionButton_extendedTextStyle$,
        'build': _FloatingActionButton_build$,
        'debugFillProperties': _FloatingActionButton_debugFillProperties$,
      },
      {},
    )
  },
);
Function FloatingActionButton_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as FloatingActionButton;
Function FloatingActionButton_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is FloatingActionButton;
Widget? _FloatingActionButton_child$(FloatingActionButton target) {
  return target.child;
}

String? _FloatingActionButton_tooltip$(FloatingActionButton target) {
  return target.tooltip;
}

Color? _FloatingActionButton_foregroundColor$(FloatingActionButton target) {
  return target.foregroundColor;
}

Color? _FloatingActionButton_backgroundColor$(FloatingActionButton target) {
  return target.backgroundColor;
}

Color? _FloatingActionButton_focusColor$(FloatingActionButton target) {
  return target.focusColor;
}

Color? _FloatingActionButton_hoverColor$(FloatingActionButton target) {
  return target.hoverColor;
}

Color? _FloatingActionButton_splashColor$(FloatingActionButton target) {
  return target.splashColor;
}

Object? _FloatingActionButton_heroTag$(FloatingActionButton target) {
  return target.heroTag;
}

void Function()? _FloatingActionButton_onPressed$(FloatingActionButton target) {
  return target.onPressed;
}

MouseCursor? _FloatingActionButton_mouseCursor$(FloatingActionButton target) {
  return target.mouseCursor;
}

double? _FloatingActionButton_elevation$(FloatingActionButton target) {
  return target.elevation;
}

double? _FloatingActionButton_focusElevation$(FloatingActionButton target) {
  return target.focusElevation;
}

double? _FloatingActionButton_hoverElevation$(FloatingActionButton target) {
  return target.hoverElevation;
}

double? _FloatingActionButton_highlightElevation$(FloatingActionButton target) {
  return target.highlightElevation;
}

double? _FloatingActionButton_disabledElevation$(FloatingActionButton target) {
  return target.disabledElevation;
}

bool _FloatingActionButton_mini$(FloatingActionButton target) {
  return target.mini;
}

ShapeBorder? _FloatingActionButton_shape$(FloatingActionButton target) {
  return target.shape;
}

Clip _FloatingActionButton_clipBehavior$(FloatingActionButton target) {
  return target.clipBehavior;
}

bool _FloatingActionButton_isExtended$(FloatingActionButton target) {
  return target.isExtended;
}

FocusNode? _FloatingActionButton_focusNode$(FloatingActionButton target) {
  return target.focusNode;
}

bool _FloatingActionButton_autofocus$(FloatingActionButton target) {
  return target.autofocus;
}

MaterialTapTargetSize? _FloatingActionButton_materialTapTargetSize$(
    FloatingActionButton target) {
  return target.materialTapTargetSize;
}

bool? _FloatingActionButton_enableFeedback$(FloatingActionButton target) {
  return target.enableFeedback;
}

double? _FloatingActionButton_extendedIconLabelSpacing$(
    FloatingActionButton target) {
  return target.extendedIconLabelSpacing;
}

EdgeInsetsGeometry? _FloatingActionButton_extendedPadding$(
    FloatingActionButton target) {
  return target.extendedPadding;
}

TextStyle? _FloatingActionButton_extendedTextStyle$(
    FloatingActionButton target) {
  return target.extendedTextStyle;
}

Function _FloatingActionButton_build$(
  m.Scope scope,
  FloatingActionButton target,
) =>
    target.build;
Function _FloatingActionButton_debugFillProperties$(
  m.Scope scope,
  FloatingActionButton target,
) =>
    target.debugFillProperties;
