// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/dismissible.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/src/widgets/automatic_keep_alive.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/gesture_detector.dart';
import 'package:flutter/src/widgets/ticker_provider.dart';
import 'package:flutter/src/widgets/transitions.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/dismissible.dart',
  {
    'Dismissible.': _Dismissible__$,
    'DismissUpdateDetails.': _DismissUpdateDetails__$,
    'DismissDirection.vertical': _DismissDirection_vertical$,
    'DismissDirection.horizontal': _DismissDirection_horizontal$,
    'DismissDirection.endToStart': _DismissDirection_endToStart$,
    'DismissDirection.startToEnd': _DismissDirection_startToEnd$,
    'DismissDirection.up': _DismissDirection_up$,
    'DismissDirection.down': _DismissDirection_down$,
    'DismissDirection.none': _DismissDirection_none$,
    'DismissDirection.values': _DismissDirection_values$,
  },
  {},
  {
    'Dismissible': m.ClassMirror(
      'Dismissible',
      {
        '#as': Dismissible_as$,
        '#is': Dismissible_is$,
        'child': _Dismissible_child$,
        'background': _Dismissible_background$,
        'secondaryBackground': _Dismissible_secondaryBackground$,
        'confirmDismiss': _Dismissible_confirmDismiss$,
        'onResize': _Dismissible_onResize$,
        'onDismissed': _Dismissible_onDismissed$,
        'direction': _Dismissible_direction$,
        'resizeDuration': _Dismissible_resizeDuration$,
        'dismissThresholds': _Dismissible_dismissThresholds$,
        'movementDuration': _Dismissible_movementDuration$,
        'crossAxisEndOffset': _Dismissible_crossAxisEndOffset$,
        'dragStartBehavior': _Dismissible_dragStartBehavior$,
        'behavior': _Dismissible_behavior$,
        'onUpdate': _Dismissible_onUpdate$,
        'createState': _Dismissible_createState$,
      },
      {},
    ),
    'DismissUpdateDetails': m.ClassMirror(
      'DismissUpdateDetails',
      {
        '#as': DismissUpdateDetails_as$,
        '#is': DismissUpdateDetails_is$,
        'direction': _DismissUpdateDetails_direction$,
        'reached': _DismissUpdateDetails_reached$,
        'previousReached': _DismissUpdateDetails_previousReached$,
        'progress': _DismissUpdateDetails_progress$,
      },
      {},
    ),
    'DismissDirection': m.ClassMirror(
      'DismissDirection',
      {},
      {},
    ),
  },
);
Function Dismissible_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Dismissible;
Function Dismissible_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Dismissible;
Function _Dismissible_child$(
  m.Scope scope$,
  Dismissible target$,
) =>
    () {
      return target$.child;
    };
Function _Dismissible_background$(
  m.Scope scope$,
  Dismissible target$,
) =>
    () {
      return target$.background;
    };
Function _Dismissible_secondaryBackground$(
  m.Scope scope$,
  Dismissible target$,
) =>
    () {
      return target$.secondaryBackground;
    };
Function _Dismissible_confirmDismiss$(
  m.Scope scope$,
  Dismissible target$,
) =>
    () {
      return target$.confirmDismiss;
    };
Function _Dismissible_onResize$(
  m.Scope scope$,
  Dismissible target$,
) =>
    () {
      return target$.onResize;
    };
Function _Dismissible_onDismissed$(
  m.Scope scope$,
  Dismissible target$,
) =>
    () {
      return target$.onDismissed;
    };
Function _Dismissible_direction$(
  m.Scope scope$,
  Dismissible target$,
) =>
    () {
      return target$.direction;
    };
Function _Dismissible_resizeDuration$(
  m.Scope scope$,
  Dismissible target$,
) =>
    () {
      return target$.resizeDuration;
    };
Function _Dismissible_dismissThresholds$(
  m.Scope scope$,
  Dismissible target$,
) =>
    () {
      return target$.dismissThresholds;
    };
Function _Dismissible_movementDuration$(
  m.Scope scope$,
  Dismissible target$,
) =>
    () {
      return target$.movementDuration;
    };
Function _Dismissible_crossAxisEndOffset$(
  m.Scope scope$,
  Dismissible target$,
) =>
    () {
      return target$.crossAxisEndOffset;
    };
Function _Dismissible_dragStartBehavior$(
  m.Scope scope$,
  Dismissible target$,
) =>
    () {
      return target$.dragStartBehavior;
    };
Function _Dismissible_behavior$(
  m.Scope scope$,
  Dismissible target$,
) =>
    () {
      return target$.behavior;
    };
Function _Dismissible_onUpdate$(
  m.Scope scope$,
  Dismissible target$,
) =>
    () {
      return target$.onUpdate;
    };
Function _Dismissible__$(m.Scope scope$) => ({
      required Key key,
      required Widget child,
      Widget? background,
      Widget? secondaryBackground,
      m.FunctionPointer? confirmDismiss,
      m.FunctionPointer? onResize,
      m.FunctionPointer? onUpdate,
      m.FunctionPointer? onDismissed,
      DismissDirection? direction,
      Duration? resizeDuration,
      Map? dismissThresholds,
      Duration? movementDuration,
      double? crossAxisEndOffset,
      DragStartBehavior? dragStartBehavior,
      HitTestBehavior? behavior,
    }) {
      Future<bool> confirmDismissProxy(
              DismissDirection confirmDismiss_direction$) async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            confirmDismiss!,
            [confirmDismiss_direction$],
            {},
          );
      void onDismissedProxy(DismissDirection onDismissed_direction$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onDismissed!,
            [onDismissed_direction$],
            {},
          );
      void onResizeProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onResize!,
            [],
            {},
          );
      void onUpdateProxy(DismissUpdateDetails onUpdate_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onUpdate!,
            [onUpdate_details$],
            {},
          );
      return Dismissible(
        background: background,
        behavior: behavior ?? HitTestBehavior.opaque,
        child: child,
        confirmDismiss: confirmDismiss == null ? null : confirmDismissProxy,
        crossAxisEndOffset: crossAxisEndOffset ?? 0.0,
        direction: direction ?? DismissDirection.horizontal,
        dismissThresholds: dismissThresholds == null
            ? const <DismissDirection, double>{}
            : Map.from(dismissThresholds),
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        key: key,
        movementDuration: movementDuration ?? const Duration(milliseconds: 200),
        onDismissed: onDismissed == null ? null : onDismissedProxy,
        onResize: onResize == null ? null : onResizeProxy,
        onUpdate: onUpdate == null ? null : onUpdateProxy,
        resizeDuration: resizeDuration ?? const Duration(milliseconds: 300),
        secondaryBackground: secondaryBackground,
      );
    };
Function _Dismissible_createState$(
  m.Scope scope$,
  Dismissible target$,
) =>
    target$.createState;
Function DismissUpdateDetails_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DismissUpdateDetails;
Function DismissUpdateDetails_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DismissUpdateDetails;
Function _DismissUpdateDetails_direction$(
  m.Scope scope$,
  DismissUpdateDetails target$,
) =>
    () {
      return target$.direction;
    };
Function _DismissUpdateDetails_reached$(
  m.Scope scope$,
  DismissUpdateDetails target$,
) =>
    () {
      return target$.reached;
    };
Function _DismissUpdateDetails_previousReached$(
  m.Scope scope$,
  DismissUpdateDetails target$,
) =>
    () {
      return target$.previousReached;
    };
Function _DismissUpdateDetails_progress$(
  m.Scope scope$,
  DismissUpdateDetails target$,
) =>
    () {
      return target$.progress;
    };
Function _DismissUpdateDetails__$(m.Scope scope$) => ({
      DismissDirection? direction,
      bool? reached,
      bool? previousReached,
      double? progress,
    }) {
      return DismissUpdateDetails(
        direction: direction ?? DismissDirection.horizontal,
        previousReached: previousReached ?? false,
        progress: progress ?? 0.0,
        reached: reached ?? false,
      );
    };
DismissDirection _DismissDirection_vertical$() {
  return DismissDirection.vertical;
}

DismissDirection _DismissDirection_horizontal$() {
  return DismissDirection.horizontal;
}

DismissDirection _DismissDirection_endToStart$() {
  return DismissDirection.endToStart;
}

DismissDirection _DismissDirection_startToEnd$() {
  return DismissDirection.startToEnd;
}

DismissDirection _DismissDirection_up$() {
  return DismissDirection.up;
}

DismissDirection _DismissDirection_down$() {
  return DismissDirection.down;
}

DismissDirection _DismissDirection_none$() {
  return DismissDirection.none;
}

List<DismissDirection> _DismissDirection_values$() {
  return DismissDirection.values;
}
