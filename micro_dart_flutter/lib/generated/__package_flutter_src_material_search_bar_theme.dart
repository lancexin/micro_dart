// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/search_bar_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/search_bar_theme.dart',
  {
    'SearchBarThemeData.': _SearchBarThemeData__$,
    'SearchBarThemeData.lerp': _SearchBarThemeData_lerp$,
    'SearchBarTheme.': _SearchBarTheme__$,
    'SearchBarTheme.of': _SearchBarTheme_of$,
  },
  {},
  {
    'SearchBarThemeData': m.ClassMirror(
      'SearchBarThemeData',
      {
        '#as': SearchBarThemeData_as$,
        '#is': SearchBarThemeData_is$,
        'elevation': _SearchBarThemeData_elevation$,
        'backgroundColor': _SearchBarThemeData_backgroundColor$,
        'shadowColor': _SearchBarThemeData_shadowColor$,
        'surfaceTintColor': _SearchBarThemeData_surfaceTintColor$,
        'overlayColor': _SearchBarThemeData_overlayColor$,
        'side': _SearchBarThemeData_side$,
        'shape': _SearchBarThemeData_shape$,
        'padding': _SearchBarThemeData_padding$,
        'textStyle': _SearchBarThemeData_textStyle$,
        'hintStyle': _SearchBarThemeData_hintStyle$,
        'constraints': _SearchBarThemeData_constraints$,
        'hashCode': _SearchBarThemeData_hashCode$,
        'copyWith': _SearchBarThemeData_copyWith$,
        '==': _SearchBarThemeData_eq$$,
        'debugFillProperties': _SearchBarThemeData_debugFillProperties$,
      },
      {},
    ),
    'SearchBarTheme': m.ClassMirror(
      'SearchBarTheme',
      {
        '#as': SearchBarTheme_as$,
        '#is': SearchBarTheme_is$,
        'data': _SearchBarTheme_data$,
        'updateShouldNotify': _SearchBarTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function SearchBarThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SearchBarThemeData;
Function SearchBarThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SearchBarThemeData;
Function _SearchBarThemeData_elevation$(
  m.Scope scope$,
  SearchBarThemeData target$,
) =>
    () {
      return target$.elevation;
    };
Function _SearchBarThemeData_backgroundColor$(
  m.Scope scope$,
  SearchBarThemeData target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _SearchBarThemeData_shadowColor$(
  m.Scope scope$,
  SearchBarThemeData target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _SearchBarThemeData_surfaceTintColor$(
  m.Scope scope$,
  SearchBarThemeData target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _SearchBarThemeData_overlayColor$(
  m.Scope scope$,
  SearchBarThemeData target$,
) =>
    () {
      return target$.overlayColor;
    };
Function _SearchBarThemeData_side$(
  m.Scope scope$,
  SearchBarThemeData target$,
) =>
    () {
      return target$.side;
    };
Function _SearchBarThemeData_shape$(
  m.Scope scope$,
  SearchBarThemeData target$,
) =>
    () {
      return target$.shape;
    };
Function _SearchBarThemeData_padding$(
  m.Scope scope$,
  SearchBarThemeData target$,
) =>
    () {
      return target$.padding;
    };
Function _SearchBarThemeData_textStyle$(
  m.Scope scope$,
  SearchBarThemeData target$,
) =>
    () {
      return target$.textStyle;
    };
Function _SearchBarThemeData_hintStyle$(
  m.Scope scope$,
  SearchBarThemeData target$,
) =>
    () {
      return target$.hintStyle;
    };
Function _SearchBarThemeData_constraints$(
  m.Scope scope$,
  SearchBarThemeData target$,
) =>
    () {
      return target$.constraints;
    };
Function _SearchBarThemeData_hashCode$(
  m.Scope scope$,
  SearchBarThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _SearchBarThemeData__$(m.Scope scope$) => ({
      MaterialStateProperty<double>? elevation,
      MaterialStateProperty<Color>? backgroundColor,
      MaterialStateProperty<Color>? shadowColor,
      MaterialStateProperty<Color>? surfaceTintColor,
      MaterialStateProperty<Color>? overlayColor,
      MaterialStateProperty<BorderSide>? side,
      MaterialStateProperty<OutlinedBorder>? shape,
      MaterialStateProperty<EdgeInsetsGeometry>? padding,
      MaterialStateProperty<TextStyle>? textStyle,
      MaterialStateProperty<TextStyle>? hintStyle,
      BoxConstraints? constraints,
    }) {
      return SearchBarThemeData(
        backgroundColor: backgroundColor,
        constraints: constraints,
        elevation: elevation,
        hintStyle: hintStyle,
        overlayColor: overlayColor,
        padding: padding,
        shadowColor: shadowColor,
        shape: shape,
        side: side,
        surfaceTintColor: surfaceTintColor,
        textStyle: textStyle,
      );
    };
Function _SearchBarThemeData_copyWith$(
  m.Scope scope$,
  SearchBarThemeData target$,
) =>
    target$.copyWith;
Function _SearchBarThemeData_lerp$(m.Scope scope$) => SearchBarThemeData.lerp;
Function _SearchBarThemeData_eq$$(
  m.Scope scope$,
  SearchBarThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _SearchBarThemeData_debugFillProperties$(
  m.Scope scope$,
  SearchBarThemeData target$,
) =>
    target$.debugFillProperties;
Function SearchBarTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SearchBarTheme;
Function SearchBarTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SearchBarTheme;
Function _SearchBarTheme_data$(
  m.Scope scope$,
  SearchBarTheme target$,
) =>
    () {
      return target$.data;
    };
Function _SearchBarTheme__$(m.Scope scope$) => ({
      Key? key,
      required SearchBarThemeData data,
      required Widget child,
    }) {
      return SearchBarTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _SearchBarTheme_of$(m.Scope scope$) => SearchBarTheme.of;
Function _SearchBarTheme_updateShouldNotify$(
  m.Scope scope$,
  SearchBarTheme target$,
) =>
    target$.updateShouldNotify;
