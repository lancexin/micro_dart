// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/foundation/assertions.dart';
import 'package:meta/meta.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/foundation/constants.dart';
import 'package:flutter/src/foundation/diagnostics.dart';
import 'package:flutter/src/foundation/print.dart';
import 'package:flutter/src/foundation/stack_frame.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/foundation/assertions.dart',
  {
    'PartialStackFrame.asynchronousSuspension':
        _PartialStackFrame_asynchronousSuspension$,
    'FlutterErrorDetails.propertiesTransformers':
        _FlutterErrorDetails_propertiesTransformers$,
    'FlutterErrorDetails.copyWith': _FlutterErrorDetails_copyWith$,
    'FlutterError.onError': _FlutterError_onError$,
    'FlutterError.demangleStackTrace': _FlutterError_demangleStackTrace$,
    'FlutterError.presentError': _FlutterError_presentError$,
    'FlutterError.wrapWidth': _FlutterError_wrapWidth$,
    'FlutterError.resetErrorCount': _FlutterError_resetErrorCount$,
    'FlutterError.dumpErrorToConsole': _FlutterError_dumpErrorToConsole$,
    'FlutterError.addDefaultStackFilter': _FlutterError_addDefaultStackFilter$,
    'FlutterError.defaultStackFilter': _FlutterError_defaultStackFilter$,
    'FlutterError.reportError': _FlutterError_reportError$,
    'debugPrintStack': _debugPrintStack$,
  },
  {
    'FlutterError.onError': _FlutterError_onError_set$,
    'FlutterError.demangleStackTrace': _FlutterError_demangleStackTrace_set$,
    'FlutterError.presentError': _FlutterError_presentError_set$,
  },
  {
    'PartialStackFrame': m.ClassMirror(
      'PartialStackFrame',
      {
        '#as': PartialStackFrame_as$,
        '#is': PartialStackFrame_is$,
        'package': _PartialStackFrame_package$,
        'className': _PartialStackFrame_className$,
        'method': _PartialStackFrame_method$,
        'matches': _PartialStackFrame_matches$,
      },
      {},
    ),
    'StackFilter': m.ClassMirror(
      'StackFilter',
      {
        '#as': StackFilter_as$,
        '#is': StackFilter_is$,
        'filter': _StackFilter_filter$,
      },
      {},
    ),
    'RepetitiveStackFrameFilter': m.ClassMirror(
      'RepetitiveStackFrameFilter',
      {
        '#as': RepetitiveStackFrameFilter_as$,
        '#is': RepetitiveStackFrameFilter_is$,
        'frames': _RepetitiveStackFrameFilter_frames$,
        'replacement': _RepetitiveStackFrameFilter_replacement$,
        'numFrames': _RepetitiveStackFrameFilter_numFrames$,
        'filter': _RepetitiveStackFrameFilter_filter$,
      },
      {},
    ),
    'ErrorDescription': m.ClassMirror(
      'ErrorDescription',
      {
        '#as': ErrorDescription_as$,
        '#is': ErrorDescription_is$,
      },
      {},
    ),
    'ErrorSummary': m.ClassMirror(
      'ErrorSummary',
      {
        '#as': ErrorSummary_as$,
        '#is': ErrorSummary_is$,
      },
      {},
    ),
    'ErrorHint': m.ClassMirror(
      'ErrorHint',
      {
        '#as': ErrorHint_as$,
        '#is': ErrorHint_is$,
      },
      {},
    ),
    'ErrorSpacer': m.ClassMirror(
      'ErrorSpacer',
      {
        '#as': ErrorSpacer_as$,
        '#is': ErrorSpacer_is$,
      },
      {},
    ),
    'FlutterErrorDetails': m.ClassMirror(
      'FlutterErrorDetails',
      {
        '#as': FlutterErrorDetails_as$,
        '#is': FlutterErrorDetails_is$,
        'exception': _FlutterErrorDetails_exception$,
        'stack': _FlutterErrorDetails_stack$,
        'library': _FlutterErrorDetails_library$,
        'context': _FlutterErrorDetails_context$,
        'stackFilter': _FlutterErrorDetails_stackFilter$,
        'informationCollector': _FlutterErrorDetails_informationCollector$,
        'silent': _FlutterErrorDetails_silent$,
        'summary': _FlutterErrorDetails_summary$,
        'exceptionAsString': _FlutterErrorDetails_exceptionAsString$,
        'debugFillProperties': _FlutterErrorDetails_debugFillProperties$,
        'toStringShort': _FlutterErrorDetails_toStringShort$,
        'toString': _FlutterErrorDetails_toString$,
        'toDiagnosticsNode': _FlutterErrorDetails_toDiagnosticsNode$,
      },
      {},
    ),
    'FlutterError': m.ClassMirror(
      'FlutterError',
      {
        '#as': FlutterError_as$,
        '#is': FlutterError_is$,
        'diagnostics': _FlutterError_diagnostics$,
        'message': _FlutterError_message$,
        'debugFillProperties': _FlutterError_debugFillProperties$,
        'toStringShort': _FlutterError_toStringShort$,
        'toString': _FlutterError_toString$,
      },
      {},
    ),
    'DiagnosticsStackTrace': m.ClassMirror(
      'DiagnosticsStackTrace',
      {
        '#as': DiagnosticsStackTrace_as$,
        '#is': DiagnosticsStackTrace_is$,
        'allowTruncate': _DiagnosticsStackTrace_allowTruncate$,
      },
      {},
    ),
  },
);
Function PartialStackFrame_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as PartialStackFrame;
Function PartialStackFrame_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is PartialStackFrame;
PartialStackFrame _PartialStackFrame_asynchronousSuspension$() {
  return PartialStackFrame.asynchronousSuspension;
}

Pattern _PartialStackFrame_package$(PartialStackFrame target) {
  return target.package;
}

String _PartialStackFrame_className$(PartialStackFrame target) {
  return target.className;
}

String _PartialStackFrame_method$(PartialStackFrame target) {
  return target.method;
}

Function _PartialStackFrame_matches$(
  m.Scope scope,
  PartialStackFrame target,
) =>
    target.matches;
Function StackFilter_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as StackFilter;
Function StackFilter_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is StackFilter;
Function _StackFilter_filter$(
  m.Scope scope,
  StackFilter target,
) =>
    target.filter;
Function RepetitiveStackFrameFilter_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RepetitiveStackFrameFilter;
Function RepetitiveStackFrameFilter_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RepetitiveStackFrameFilter;
List<PartialStackFrame> _RepetitiveStackFrameFilter_frames$(
    RepetitiveStackFrameFilter target) {
  return target.frames;
}

String _RepetitiveStackFrameFilter_replacement$(
    RepetitiveStackFrameFilter target) {
  return target.replacement;
}

int _RepetitiveStackFrameFilter_numFrames$(RepetitiveStackFrameFilter target) {
  return target.numFrames;
}

Function _RepetitiveStackFrameFilter_filter$(
  m.Scope scope,
  RepetitiveStackFrameFilter target,
) =>
    target.filter;
Function ErrorDescription_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ErrorDescription;
Function ErrorDescription_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ErrorDescription;
Function ErrorSummary_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ErrorSummary;
Function ErrorSummary_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ErrorSummary;
Function ErrorHint_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ErrorHint;
Function ErrorHint_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ErrorHint;
Function ErrorSpacer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ErrorSpacer;
Function ErrorSpacer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ErrorSpacer;
Function FlutterErrorDetails_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as FlutterErrorDetails;
Function FlutterErrorDetails_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is FlutterErrorDetails;
List<Iterable<DiagnosticsNode> Function(Iterable<DiagnosticsNode>)>
    _FlutterErrorDetails_propertiesTransformers$() {
  return FlutterErrorDetails.propertiesTransformers;
}

Object _FlutterErrorDetails_exception$(FlutterErrorDetails target) {
  return target.exception;
}

StackTrace? _FlutterErrorDetails_stack$(FlutterErrorDetails target) {
  return target.stack;
}

String? _FlutterErrorDetails_library$(FlutterErrorDetails target) {
  return target.library;
}

DiagnosticsNode? _FlutterErrorDetails_context$(FlutterErrorDetails target) {
  return target.context;
}

Iterable<String> Function(Iterable<String>)? _FlutterErrorDetails_stackFilter$(
    FlutterErrorDetails target) {
  return target.stackFilter;
}

Iterable<DiagnosticsNode> Function()?
    _FlutterErrorDetails_informationCollector$(FlutterErrorDetails target) {
  return target.informationCollector;
}

bool _FlutterErrorDetails_silent$(FlutterErrorDetails target) {
  return target.silent;
}

DiagnosticsNode _FlutterErrorDetails_summary$(FlutterErrorDetails target) {
  return target.summary;
}

Function _FlutterErrorDetails_copyWith$(
  m.Scope scope,
  FlutterErrorDetails target,
) =>
    ({
      DiagnosticsNode? context,
      Object? exception,
      m.FunctionPointer? informationCollector,
      String? library,
      bool? silent,
      StackTrace? stack,
      m.FunctionPointer? stackFilter,
    }) {
      Iterable<DiagnosticsNode> informationCollectorProxy() =>
          scope.engine.callFunctionPointer(
            scope,
            informationCollector!,
            [],
            {},
          );
      Iterable<String> stackFilterProxy(Iterable<String> stackFilter_input) =>
          scope.engine.callFunctionPointer(
            scope,
            stackFilter!,
            [stackFilter_input],
            {},
          );
      return target.copyWith(
        context: context,
        exception: exception,
        informationCollector:
            informationCollector == null ? null : informationCollectorProxy,
        library: library,
        silent: silent,
        stack: stack,
        stackFilter: stackFilter == null ? null : stackFilterProxy,
      );
    };
Function _FlutterErrorDetails_exceptionAsString$(
  m.Scope scope,
  FlutterErrorDetails target,
) =>
    target.exceptionAsString;
Function _FlutterErrorDetails_debugFillProperties$(
  m.Scope scope,
  FlutterErrorDetails target,
) =>
    target.debugFillProperties;
Function _FlutterErrorDetails_toStringShort$(
  m.Scope scope,
  FlutterErrorDetails target,
) =>
    target.toStringShort;
Function _FlutterErrorDetails_toString$(
  m.Scope scope,
  FlutterErrorDetails target,
) =>
    target.toString;
Function _FlutterErrorDetails_toDiagnosticsNode$(
  m.Scope scope,
  FlutterErrorDetails target,
) =>
    target.toDiagnosticsNode;
Function FlutterError_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as FlutterError;
Function FlutterError_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is FlutterError;
List<DiagnosticsNode> _FlutterError_diagnostics$(FlutterError target) {
  return target.diagnostics;
}

void Function(FlutterErrorDetails)? _FlutterError_onError$() {
  return FlutterError.onError;
}

Function _FlutterError_onError_set$(m.Scope scope) =>
    (m.FunctionPointer? _onError) {
      void _onErrorProxy(FlutterErrorDetails _onError_details) =>
          scope.engine.callFunctionPointer(
            scope,
            _onError!,
            [_onError_details],
            {},
          );
      FlutterError.onError = (_onError == null ? null : _onErrorProxy);
    };
StackTrace Function(StackTrace) _FlutterError_demangleStackTrace$() {
  return FlutterError.demangleStackTrace;
}

Function _FlutterError_demangleStackTrace_set$(m.Scope scope) =>
    (m.FunctionPointer _demangleStackTrace) {
      StackTrace _demangleStackTraceProxy(
              StackTrace _demangleStackTrace_details) =>
          scope.engine.callFunctionPointer(
            scope,
            _demangleStackTrace,
            [_demangleStackTrace_details],
            {},
          );
      FlutterError.demangleStackTrace = (_demangleStackTraceProxy);
    };
void Function(FlutterErrorDetails) _FlutterError_presentError$() {
  return FlutterError.presentError;
}

Function _FlutterError_presentError_set$(m.Scope scope) =>
    (m.FunctionPointer _presentError) {
      void _presentErrorProxy(FlutterErrorDetails _presentError_details) =>
          scope.engine.callFunctionPointer(
            scope,
            _presentError,
            [_presentError_details],
            {},
          );
      FlutterError.presentError = (_presentErrorProxy);
    };
int _FlutterError_wrapWidth$() {
  return FlutterError.wrapWidth;
}

String _FlutterError_message$(FlutterError target) {
  return target.message;
}

Function _FlutterError_resetErrorCount$(m.Scope scope) =>
    FlutterError.resetErrorCount;
Function _FlutterError_dumpErrorToConsole$(m.Scope scope) =>
    FlutterError.dumpErrorToConsole;
Function _FlutterError_addDefaultStackFilter$(m.Scope scope) =>
    FlutterError.addDefaultStackFilter;
Function _FlutterError_defaultStackFilter$(m.Scope scope) =>
    FlutterError.defaultStackFilter;
Function _FlutterError_debugFillProperties$(
  m.Scope scope,
  FlutterError target,
) =>
    target.debugFillProperties;
Function _FlutterError_toStringShort$(
  m.Scope scope,
  FlutterError target,
) =>
    target.toStringShort;
Function _FlutterError_toString$(
  m.Scope scope,
  FlutterError target,
) =>
    target.toString;
Function _FlutterError_reportError$(m.Scope scope) => FlutterError.reportError;
Function DiagnosticsStackTrace_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DiagnosticsStackTrace;
Function DiagnosticsStackTrace_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DiagnosticsStackTrace;
bool _DiagnosticsStackTrace_allowTruncate$(DiagnosticsStackTrace target) {
  return target.allowTruncate;
}

Function _debugPrintStack$(m.Scope scope) => debugPrintStack;
