// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/system_chrome.dart';
import 'dart:async';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/services/binding.dart';
import 'package:flutter/src/services/system_channels.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/system_chrome.dart',
  {
    'ApplicationSwitcherDescription.': _ApplicationSwitcherDescription__$,
    'SystemUiOverlayStyle.light': _SystemUiOverlayStyle_light$,
    'SystemUiOverlayStyle.dark': _SystemUiOverlayStyle_dark$,
    'SystemUiOverlayStyle.': _SystemUiOverlayStyle__$,
    'SystemChrome.latestStyle': _SystemChrome_latestStyle$,
    'SystemChrome.setPreferredOrientations':
        _SystemChrome_setPreferredOrientations$,
    'SystemChrome.setApplicationSwitcherDescription':
        _SystemChrome_setApplicationSwitcherDescription$,
    'SystemChrome.setEnabledSystemUIMode':
        _SystemChrome_setEnabledSystemUIMode$,
    'SystemChrome.setSystemUIChangeCallback':
        _SystemChrome_setSystemUIChangeCallback$,
    'SystemChrome.restoreSystemUIOverlays':
        _SystemChrome_restoreSystemUIOverlays$,
    'SystemChrome.setSystemUIOverlayStyle':
        _SystemChrome_setSystemUIOverlayStyle$,
    'DeviceOrientation.portraitUp': _DeviceOrientation_portraitUp$,
    'DeviceOrientation.landscapeLeft': _DeviceOrientation_landscapeLeft$,
    'DeviceOrientation.portraitDown': _DeviceOrientation_portraitDown$,
    'DeviceOrientation.landscapeRight': _DeviceOrientation_landscapeRight$,
    'DeviceOrientation.values': _DeviceOrientation_values$,
    'SystemUiOverlay.top': _SystemUiOverlay_top$,
    'SystemUiOverlay.bottom': _SystemUiOverlay_bottom$,
    'SystemUiOverlay.values': _SystemUiOverlay_values$,
    'SystemUiMode.leanBack': _SystemUiMode_leanBack$,
    'SystemUiMode.immersive': _SystemUiMode_immersive$,
    'SystemUiMode.immersiveSticky': _SystemUiMode_immersiveSticky$,
    'SystemUiMode.edgeToEdge': _SystemUiMode_edgeToEdge$,
    'SystemUiMode.manual': _SystemUiMode_manual$,
    'SystemUiMode.values': _SystemUiMode_values$,
  },
  {},
  {
    'ApplicationSwitcherDescription': m.ClassMirror(
      'ApplicationSwitcherDescription',
      {
        '#as': ApplicationSwitcherDescription_as$,
        '#is': ApplicationSwitcherDescription_is$,
        'label': _ApplicationSwitcherDescription_label$,
        'primaryColor': _ApplicationSwitcherDescription_primaryColor$,
      },
      {},
    ),
    'SystemUiOverlayStyle': m.ClassMirror(
      'SystemUiOverlayStyle',
      {
        '#as': SystemUiOverlayStyle_as$,
        '#is': SystemUiOverlayStyle_is$,
        'systemNavigationBarColor':
            _SystemUiOverlayStyle_systemNavigationBarColor$,
        'systemNavigationBarDividerColor':
            _SystemUiOverlayStyle_systemNavigationBarDividerColor$,
        'systemNavigationBarIconBrightness':
            _SystemUiOverlayStyle_systemNavigationBarIconBrightness$,
        'systemNavigationBarContrastEnforced':
            _SystemUiOverlayStyle_systemNavigationBarContrastEnforced$,
        'statusBarColor': _SystemUiOverlayStyle_statusBarColor$,
        'statusBarBrightness': _SystemUiOverlayStyle_statusBarBrightness$,
        'statusBarIconBrightness':
            _SystemUiOverlayStyle_statusBarIconBrightness$,
        'systemStatusBarContrastEnforced':
            _SystemUiOverlayStyle_systemStatusBarContrastEnforced$,
        'hashCode': _SystemUiOverlayStyle_hashCode$,
        'toString': _SystemUiOverlayStyle_toString$,
        'copyWith': _SystemUiOverlayStyle_copyWith$,
        '==': _SystemUiOverlayStyle_eq$$,
      },
      {},
    ),
    'SystemChrome': m.ClassMirror(
      'SystemChrome',
      {
        '#as': SystemChrome_as$,
        '#is': SystemChrome_is$,
      },
      {},
    ),
    'DeviceOrientation': m.ClassMirror(
      'DeviceOrientation',
      {},
      {},
    ),
    'SystemUiOverlay': m.ClassMirror(
      'SystemUiOverlay',
      {},
      {},
    ),
    'SystemUiMode': m.ClassMirror(
      'SystemUiMode',
      {},
      {},
    ),
  },
);
Function ApplicationSwitcherDescription_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ApplicationSwitcherDescription;
Function ApplicationSwitcherDescription_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ApplicationSwitcherDescription;
Function _ApplicationSwitcherDescription_label$(
  m.Scope scope$,
  ApplicationSwitcherDescription target$,
) =>
    () {
      return target$.label;
    };
Function _ApplicationSwitcherDescription_primaryColor$(
  m.Scope scope$,
  ApplicationSwitcherDescription target$,
) =>
    () {
      return target$.primaryColor;
    };
Function _ApplicationSwitcherDescription__$(m.Scope scope$) => ({
      String? label,
      int? primaryColor,
    }) {
      return ApplicationSwitcherDescription(
        label: label,
        primaryColor: primaryColor,
      );
    };
Function SystemUiOverlayStyle_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SystemUiOverlayStyle;
Function SystemUiOverlayStyle_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SystemUiOverlayStyle;
Function _SystemUiOverlayStyle_systemNavigationBarColor$(
  m.Scope scope$,
  SystemUiOverlayStyle target$,
) =>
    () {
      return target$.systemNavigationBarColor;
    };
Function _SystemUiOverlayStyle_systemNavigationBarDividerColor$(
  m.Scope scope$,
  SystemUiOverlayStyle target$,
) =>
    () {
      return target$.systemNavigationBarDividerColor;
    };
Function _SystemUiOverlayStyle_systemNavigationBarIconBrightness$(
  m.Scope scope$,
  SystemUiOverlayStyle target$,
) =>
    () {
      return target$.systemNavigationBarIconBrightness;
    };
Function _SystemUiOverlayStyle_systemNavigationBarContrastEnforced$(
  m.Scope scope$,
  SystemUiOverlayStyle target$,
) =>
    () {
      return target$.systemNavigationBarContrastEnforced;
    };
Function _SystemUiOverlayStyle_statusBarColor$(
  m.Scope scope$,
  SystemUiOverlayStyle target$,
) =>
    () {
      return target$.statusBarColor;
    };
Function _SystemUiOverlayStyle_statusBarBrightness$(
  m.Scope scope$,
  SystemUiOverlayStyle target$,
) =>
    () {
      return target$.statusBarBrightness;
    };
Function _SystemUiOverlayStyle_statusBarIconBrightness$(
  m.Scope scope$,
  SystemUiOverlayStyle target$,
) =>
    () {
      return target$.statusBarIconBrightness;
    };
Function _SystemUiOverlayStyle_systemStatusBarContrastEnforced$(
  m.Scope scope$,
  SystemUiOverlayStyle target$,
) =>
    () {
      return target$.systemStatusBarContrastEnforced;
    };
SystemUiOverlayStyle _SystemUiOverlayStyle_light$() {
  return SystemUiOverlayStyle.light;
}

SystemUiOverlayStyle _SystemUiOverlayStyle_dark$() {
  return SystemUiOverlayStyle.dark;
}

Function _SystemUiOverlayStyle_hashCode$(
  m.Scope scope$,
  SystemUiOverlayStyle target$,
) =>
    () {
      return target$.hashCode;
    };
Function _SystemUiOverlayStyle__$(m.Scope scope$) => ({
      Color? systemNavigationBarColor,
      Color? systemNavigationBarDividerColor,
      Brightness? systemNavigationBarIconBrightness,
      bool? systemNavigationBarContrastEnforced,
      Color? statusBarColor,
      Brightness? statusBarBrightness,
      Brightness? statusBarIconBrightness,
      bool? systemStatusBarContrastEnforced,
    }) {
      return SystemUiOverlayStyle(
        statusBarBrightness: statusBarBrightness,
        statusBarColor: statusBarColor,
        statusBarIconBrightness: statusBarIconBrightness,
        systemNavigationBarColor: systemNavigationBarColor,
        systemNavigationBarContrastEnforced:
            systemNavigationBarContrastEnforced,
        systemNavigationBarDividerColor: systemNavigationBarDividerColor,
        systemNavigationBarIconBrightness: systemNavigationBarIconBrightness,
        systemStatusBarContrastEnforced: systemStatusBarContrastEnforced,
      );
    };
Function _SystemUiOverlayStyle_toString$(
  m.Scope scope$,
  SystemUiOverlayStyle target$,
) =>
    target$.toString;
Function _SystemUiOverlayStyle_copyWith$(
  m.Scope scope$,
  SystemUiOverlayStyle target$,
) =>
    target$.copyWith;
Function _SystemUiOverlayStyle_eq$$(
  m.Scope scope$,
  SystemUiOverlayStyle target$,
) =>
    (Object other$) => target$ == other$;
Function SystemChrome_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SystemChrome;
Function SystemChrome_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SystemChrome;
SystemUiOverlayStyle? _SystemChrome_latestStyle$() {
  return SystemChrome.latestStyle;
}

Function _SystemChrome_setPreferredOrientations$(m.Scope scope$) =>
    SystemChrome.setPreferredOrientations;
Function _SystemChrome_setApplicationSwitcherDescription$(m.Scope scope$) =>
    SystemChrome.setApplicationSwitcherDescription;
Function _SystemChrome_setEnabledSystemUIMode$(m.Scope scope$) =>
    SystemChrome.setEnabledSystemUIMode;
Function _SystemChrome_setSystemUIChangeCallback$(m.Scope scope$) =>
    (m.FunctionPointer? callback) {
      Future<void> callbackProxy(
              bool callback_systemOverlaysAreVisible$) async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            callback!,
            [callback_systemOverlaysAreVisible$],
            {},
          );
      return SystemChrome.setSystemUIChangeCallback(
          callback == null ? null : callbackProxy);
    };
Function _SystemChrome_restoreSystemUIOverlays$(m.Scope scope$) =>
    SystemChrome.restoreSystemUIOverlays;
Function _SystemChrome_setSystemUIOverlayStyle$(m.Scope scope$) =>
    SystemChrome.setSystemUIOverlayStyle;
DeviceOrientation _DeviceOrientation_portraitUp$() {
  return DeviceOrientation.portraitUp;
}

DeviceOrientation _DeviceOrientation_landscapeLeft$() {
  return DeviceOrientation.landscapeLeft;
}

DeviceOrientation _DeviceOrientation_portraitDown$() {
  return DeviceOrientation.portraitDown;
}

DeviceOrientation _DeviceOrientation_landscapeRight$() {
  return DeviceOrientation.landscapeRight;
}

List<DeviceOrientation> _DeviceOrientation_values$() {
  return DeviceOrientation.values;
}

SystemUiOverlay _SystemUiOverlay_top$() {
  return SystemUiOverlay.top;
}

SystemUiOverlay _SystemUiOverlay_bottom$() {
  return SystemUiOverlay.bottom;
}

List<SystemUiOverlay> _SystemUiOverlay_values$() {
  return SystemUiOverlay.values;
}

SystemUiMode _SystemUiMode_leanBack$() {
  return SystemUiMode.leanBack;
}

SystemUiMode _SystemUiMode_immersive$() {
  return SystemUiMode.immersive;
}

SystemUiMode _SystemUiMode_immersiveSticky$() {
  return SystemUiMode.immersiveSticky;
}

SystemUiMode _SystemUiMode_edgeToEdge$() {
  return SystemUiMode.edgeToEdge;
}

SystemUiMode _SystemUiMode_manual$() {
  return SystemUiMode.manual;
}

List<SystemUiMode> _SystemUiMode_values$() {
  return SystemUiMode.values;
}
