// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/text_editing_delta.dart';
import 'dart:ui' show TextRange;
import 'package:flutter/foundation.dart';
import 'package:flutter/src/services/text_editing.dart';
import 'package:flutter/src/services/text_input.dart' show TextEditingValue;

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/text_editing_delta.dart',
  {},
  {},
  {
    'TextEditingDelta': m.ClassMirror(
      'TextEditingDelta',
      {
        '#as': TextEditingDelta_as$,
        '#is': TextEditingDelta_is$,
        'oldText': _TextEditingDelta_oldText$,
        'selection': _TextEditingDelta_selection$,
        'composing': _TextEditingDelta_composing$,
        'apply': _TextEditingDelta_apply$,
      },
      {},
    ),
    'TextEditingDeltaInsertion': m.ClassMirror(
      'TextEditingDeltaInsertion',
      {
        '#as': TextEditingDeltaInsertion_as$,
        '#is': TextEditingDeltaInsertion_is$,
        'textInserted': _TextEditingDeltaInsertion_textInserted$,
        'insertionOffset': _TextEditingDeltaInsertion_insertionOffset$,
        'apply': _TextEditingDeltaInsertion_apply$,
        'debugFillProperties': _TextEditingDeltaInsertion_debugFillProperties$,
      },
      {},
    ),
    'TextEditingDeltaDeletion': m.ClassMirror(
      'TextEditingDeltaDeletion',
      {
        '#as': TextEditingDeltaDeletion_as$,
        '#is': TextEditingDeltaDeletion_is$,
        'deletedRange': _TextEditingDeltaDeletion_deletedRange$,
        'textDeleted': _TextEditingDeltaDeletion_textDeleted$,
        'apply': _TextEditingDeltaDeletion_apply$,
        'debugFillProperties': _TextEditingDeltaDeletion_debugFillProperties$,
      },
      {},
    ),
    'TextEditingDeltaReplacement': m.ClassMirror(
      'TextEditingDeltaReplacement',
      {
        '#as': TextEditingDeltaReplacement_as$,
        '#is': TextEditingDeltaReplacement_is$,
        'replacementText': _TextEditingDeltaReplacement_replacementText$,
        'replacedRange': _TextEditingDeltaReplacement_replacedRange$,
        'textReplaced': _TextEditingDeltaReplacement_textReplaced$,
        'apply': _TextEditingDeltaReplacement_apply$,
        'debugFillProperties':
            _TextEditingDeltaReplacement_debugFillProperties$,
      },
      {},
    ),
    'TextEditingDeltaNonTextUpdate': m.ClassMirror(
      'TextEditingDeltaNonTextUpdate',
      {
        '#as': TextEditingDeltaNonTextUpdate_as$,
        '#is': TextEditingDeltaNonTextUpdate_is$,
        'apply': _TextEditingDeltaNonTextUpdate_apply$,
        'debugFillProperties':
            _TextEditingDeltaNonTextUpdate_debugFillProperties$,
      },
      {},
    ),
  },
);
Function TextEditingDelta_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as TextEditingDelta;
Function TextEditingDelta_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is TextEditingDelta;
String _TextEditingDelta_oldText$(TextEditingDelta target) {
  return target.oldText;
}

TextSelection _TextEditingDelta_selection$(TextEditingDelta target) {
  return target.selection;
}

TextRange _TextEditingDelta_composing$(TextEditingDelta target) {
  return target.composing;
}

Function _TextEditingDelta_apply$(
  m.Scope scope,
  TextEditingDelta target,
) =>
    target.apply;
Function TextEditingDeltaInsertion_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as TextEditingDeltaInsertion;
Function TextEditingDeltaInsertion_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is TextEditingDeltaInsertion;
String _TextEditingDeltaInsertion_textInserted$(
    TextEditingDeltaInsertion target) {
  return target.textInserted;
}

int _TextEditingDeltaInsertion_insertionOffset$(
    TextEditingDeltaInsertion target) {
  return target.insertionOffset;
}

Function _TextEditingDeltaInsertion_apply$(
  m.Scope scope,
  TextEditingDeltaInsertion target,
) =>
    target.apply;
Function _TextEditingDeltaInsertion_debugFillProperties$(
  m.Scope scope,
  TextEditingDeltaInsertion target,
) =>
    target.debugFillProperties;
Function TextEditingDeltaDeletion_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as TextEditingDeltaDeletion;
Function TextEditingDeltaDeletion_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is TextEditingDeltaDeletion;
TextRange _TextEditingDeltaDeletion_deletedRange$(
    TextEditingDeltaDeletion target) {
  return target.deletedRange;
}

String _TextEditingDeltaDeletion_textDeleted$(TextEditingDeltaDeletion target) {
  return target.textDeleted;
}

Function _TextEditingDeltaDeletion_apply$(
  m.Scope scope,
  TextEditingDeltaDeletion target,
) =>
    target.apply;
Function _TextEditingDeltaDeletion_debugFillProperties$(
  m.Scope scope,
  TextEditingDeltaDeletion target,
) =>
    target.debugFillProperties;
Function TextEditingDeltaReplacement_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as TextEditingDeltaReplacement;
Function TextEditingDeltaReplacement_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is TextEditingDeltaReplacement;
String _TextEditingDeltaReplacement_replacementText$(
    TextEditingDeltaReplacement target) {
  return target.replacementText;
}

TextRange _TextEditingDeltaReplacement_replacedRange$(
    TextEditingDeltaReplacement target) {
  return target.replacedRange;
}

String _TextEditingDeltaReplacement_textReplaced$(
    TextEditingDeltaReplacement target) {
  return target.textReplaced;
}

Function _TextEditingDeltaReplacement_apply$(
  m.Scope scope,
  TextEditingDeltaReplacement target,
) =>
    target.apply;
Function _TextEditingDeltaReplacement_debugFillProperties$(
  m.Scope scope,
  TextEditingDeltaReplacement target,
) =>
    target.debugFillProperties;
Function TextEditingDeltaNonTextUpdate_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as TextEditingDeltaNonTextUpdate;
Function TextEditingDeltaNonTextUpdate_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is TextEditingDeltaNonTextUpdate;
Function _TextEditingDeltaNonTextUpdate_apply$(
  m.Scope scope,
  TextEditingDeltaNonTextUpdate target,
) =>
    target.apply;
Function _TextEditingDeltaNonTextUpdate_debugFillProperties$(
  m.Scope scope,
  TextEditingDeltaNonTextUpdate target,
) =>
    target.debugFillProperties;
