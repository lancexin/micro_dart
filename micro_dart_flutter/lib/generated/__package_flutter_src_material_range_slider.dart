// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/range_slider.dart';
import 'dart:async';
import 'dart:math';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/scheduler.dart' show timeDilation;
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/slider_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/range_slider.dart',
  {},
  {},
  {
    'RangeSlider': m.ClassMirror(
      'RangeSlider',
      {
        'values': _RangeSlider_values$,
        'onChanged': _RangeSlider_onChanged$,
        'onChangeStart': _RangeSlider_onChangeStart$,
        'onChangeEnd': _RangeSlider_onChangeEnd$,
        'min': _RangeSlider_min$,
        'max': _RangeSlider_max$,
        'divisions': _RangeSlider_divisions$,
        'labels': _RangeSlider_labels$,
        'activeColor': _RangeSlider_activeColor$,
        'inactiveColor': _RangeSlider_inactiveColor$,
        'overlayColor': _RangeSlider_overlayColor$,
        'mouseCursor': _RangeSlider_mouseCursor$,
        'semanticFormatterCallback': _RangeSlider_semanticFormatterCallback$,
        'createState': _RangeSlider_createState$,
        'debugFillProperties': _RangeSlider_debugFillProperties$,
      },
      {},
    )
  },
);
RangeValues _RangeSlider_values$(RangeSlider target) {
  return target.values;
}

void Function(RangeValues)? _RangeSlider_onChanged$(RangeSlider target) {
  return target.onChanged;
}

void Function(RangeValues)? _RangeSlider_onChangeStart$(RangeSlider target) {
  return target.onChangeStart;
}

void Function(RangeValues)? _RangeSlider_onChangeEnd$(RangeSlider target) {
  return target.onChangeEnd;
}

double _RangeSlider_min$(RangeSlider target) {
  return target.min;
}

double _RangeSlider_max$(RangeSlider target) {
  return target.max;
}

int? _RangeSlider_divisions$(RangeSlider target) {
  return target.divisions;
}

RangeLabels? _RangeSlider_labels$(RangeSlider target) {
  return target.labels;
}

Color? _RangeSlider_activeColor$(RangeSlider target) {
  return target.activeColor;
}

Color? _RangeSlider_inactiveColor$(RangeSlider target) {
  return target.inactiveColor;
}

MaterialStateProperty<Color?>? _RangeSlider_overlayColor$(RangeSlider target) {
  return target.overlayColor;
}

MaterialStateProperty<MouseCursor?>? _RangeSlider_mouseCursor$(
    RangeSlider target) {
  return target.mouseCursor;
}

String Function(double)? _RangeSlider_semanticFormatterCallback$(
    RangeSlider target) {
  return target.semanticFormatterCallback;
}

Function _RangeSlider_createState$(
  m.Scope scope,
  RangeSlider target,
) =>
    target.createState;
Function _RangeSlider_debugFillProperties$(
  m.Scope scope,
  RangeSlider target,
) =>
    target.debugFillProperties;
