// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/scrollable_helpers.dart';
import 'dart:async';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/actions.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/primary_scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_metrics.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/scrollable.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/scrollable_helpers.dart',
  {
    'ScrollAction.getDirectionalIncrement':
        _ScrollAction_getDirectionalIncrement$,
    'ScrollIncrementType.line': _ScrollIncrementType_line$,
    'ScrollIncrementType.page': _ScrollIncrementType_page$,
    'ScrollIncrementType.values': _ScrollIncrementType_values$,
  },
  {},
  {
    'ScrollableDetails': m.ClassMirror(
      'ScrollableDetails',
      {
        '#as': ScrollableDetails_as$,
        '#is': ScrollableDetails_is$,
        'direction': _ScrollableDetails_direction$,
        'controller': _ScrollableDetails_controller$,
        'physics': _ScrollableDetails_physics$,
        'decorationClipBehavior': _ScrollableDetails_decorationClipBehavior$,
        'hashCode': _ScrollableDetails_hashCode$,
        'copyWith': _ScrollableDetails_copyWith$,
        'toString': _ScrollableDetails_toString$,
        '==': _ScrollableDetails_eq$$,
      },
      {},
    ),
    'EdgeDraggingAutoScroller': m.ClassMirror(
      'EdgeDraggingAutoScroller',
      {
        '#as': EdgeDraggingAutoScroller_as$,
        '#is': EdgeDraggingAutoScroller_is$,
        'scrollable': _EdgeDraggingAutoScroller_scrollable$,
        'onScrollViewScrolled': _EdgeDraggingAutoScroller_onScrollViewScrolled$,
        'velocityScalar': _EdgeDraggingAutoScroller_velocityScalar$,
        'scrolling': _EdgeDraggingAutoScroller_scrolling$,
        'startAutoScrollIfNecessary':
            _EdgeDraggingAutoScroller_startAutoScrollIfNecessary$,
        'stopAutoScroll': _EdgeDraggingAutoScroller_stopAutoScroll$,
      },
      {},
    ),
    'ScrollIncrementDetails': m.ClassMirror(
      'ScrollIncrementDetails',
      {
        '#as': ScrollIncrementDetails_as$,
        '#is': ScrollIncrementDetails_is$,
        'type': _ScrollIncrementDetails_type$,
        'metrics': _ScrollIncrementDetails_metrics$,
      },
      {},
    ),
    'ScrollIntent': m.ClassMirror(
      'ScrollIntent',
      {
        '#as': ScrollIntent_as$,
        '#is': ScrollIntent_is$,
        'direction': _ScrollIntent_direction$,
        'type': _ScrollIntent_type$,
      },
      {},
    ),
    'ScrollAction': m.ClassMirror(
      'ScrollAction',
      {
        '#as': ScrollAction_as$,
        '#is': ScrollAction_is$,
        'isEnabled': _ScrollAction_isEnabled$,
        'invoke': _ScrollAction_invoke$,
      },
      {},
    ),
    'ScrollIncrementType': m.ClassMirror(
      'ScrollIncrementType',
      {},
      {},
    ),
  },
);
Function ScrollableDetails_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ScrollableDetails;
Function ScrollableDetails_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ScrollableDetails;
AxisDirection _ScrollableDetails_direction$(ScrollableDetails target) {
  return target.direction;
}

ScrollController? _ScrollableDetails_controller$(ScrollableDetails target) {
  return target.controller;
}

ScrollPhysics? _ScrollableDetails_physics$(ScrollableDetails target) {
  return target.physics;
}

Clip? _ScrollableDetails_decorationClipBehavior$(ScrollableDetails target) {
  return target.decorationClipBehavior;
}

int _ScrollableDetails_hashCode$(ScrollableDetails target) {
  return target.hashCode;
}

Function _ScrollableDetails_copyWith$(
  m.Scope scope,
  ScrollableDetails target,
) =>
    target.copyWith;
Function _ScrollableDetails_toString$(
  m.Scope scope,
  ScrollableDetails target,
) =>
    target.toString;
Function _ScrollableDetails_eq$$(
  m.Scope scope,
  ScrollableDetails target,
) =>
    (Object other) => target == other;
Function EdgeDraggingAutoScroller_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as EdgeDraggingAutoScroller;
Function EdgeDraggingAutoScroller_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is EdgeDraggingAutoScroller;
ScrollableState _EdgeDraggingAutoScroller_scrollable$(
    EdgeDraggingAutoScroller target) {
  return target.scrollable;
}

void Function()? _EdgeDraggingAutoScroller_onScrollViewScrolled$(
    EdgeDraggingAutoScroller target) {
  return target.onScrollViewScrolled;
}

double _EdgeDraggingAutoScroller_velocityScalar$(
    EdgeDraggingAutoScroller target) {
  return target.velocityScalar;
}

bool _EdgeDraggingAutoScroller_scrolling$(EdgeDraggingAutoScroller target) {
  return target.scrolling;
}

Function _EdgeDraggingAutoScroller_startAutoScrollIfNecessary$(
  m.Scope scope,
  EdgeDraggingAutoScroller target,
) =>
    target.startAutoScrollIfNecessary;
Function _EdgeDraggingAutoScroller_stopAutoScroll$(
  m.Scope scope,
  EdgeDraggingAutoScroller target,
) =>
    target.stopAutoScroll;
Function ScrollIncrementDetails_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ScrollIncrementDetails;
Function ScrollIncrementDetails_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ScrollIncrementDetails;
ScrollIncrementType _ScrollIncrementDetails_type$(
    ScrollIncrementDetails target) {
  return target.type;
}

ScrollMetrics _ScrollIncrementDetails_metrics$(ScrollIncrementDetails target) {
  return target.metrics;
}

Function ScrollIntent_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ScrollIntent;
Function ScrollIntent_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ScrollIntent;
AxisDirection _ScrollIntent_direction$(ScrollIntent target) {
  return target.direction;
}

ScrollIncrementType _ScrollIntent_type$(ScrollIntent target) {
  return target.type;
}

Function ScrollAction_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ScrollAction;
Function ScrollAction_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ScrollAction;
Function _ScrollAction_isEnabled$(
  m.Scope scope,
  ScrollAction target,
) =>
    target.isEnabled;
Function _ScrollAction_getDirectionalIncrement$(m.Scope scope) =>
    ScrollAction.getDirectionalIncrement;
Function _ScrollAction_invoke$(
  m.Scope scope,
  ScrollAction target,
) =>
    target.invoke;
ScrollIncrementType _ScrollIncrementType_line$() {
  return ScrollIncrementType.line;
}

ScrollIncrementType _ScrollIncrementType_page$() {
  return ScrollIncrementType.page;
}

List<ScrollIncrementType> _ScrollIncrementType_values$() {
  return ScrollIncrementType.values;
}
