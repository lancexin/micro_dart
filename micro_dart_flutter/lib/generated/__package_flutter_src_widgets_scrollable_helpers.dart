// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/scrollable_helpers.dart';
import 'dart:async';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/actions.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/primary_scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_metrics.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/scrollable.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/scrollable_helpers.dart',
  {
    'ScrollableDetails.': _ScrollableDetails__$,
    'ScrollableDetails.vertical': _ScrollableDetails_vertical_$,
    'ScrollableDetails.horizontal': _ScrollableDetails_horizontal_$,
    'EdgeDraggingAutoScroller.': _EdgeDraggingAutoScroller__$,
    'ScrollIncrementDetails.': _ScrollIncrementDetails__$,
    'ScrollIntent.': _ScrollIntent__$,
    'ScrollAction.': _ScrollAction__$,
    'ScrollAction.getDirectionalIncrement':
        _ScrollAction_getDirectionalIncrement$,
    'ScrollIncrementType.line': _ScrollIncrementType_line$,
    'ScrollIncrementType.page': _ScrollIncrementType_page$,
    'ScrollIncrementType.values': _ScrollIncrementType_values$,
  },
  {},
  {
    'ScrollableDetails': m.ClassMirror(
      'ScrollableDetails',
      {
        '#as': ScrollableDetails_as$,
        '#is': ScrollableDetails_is$,
        'direction': _ScrollableDetails_direction$,
        'controller': _ScrollableDetails_controller$,
        'physics': _ScrollableDetails_physics$,
        'decorationClipBehavior': _ScrollableDetails_decorationClipBehavior$,
        'hashCode': _ScrollableDetails_hashCode$,
        'copyWith': _ScrollableDetails_copyWith$,
        'toString': _ScrollableDetails_toString$,
        '==': _ScrollableDetails_eq$$,
      },
      {},
    ),
    'EdgeDraggingAutoScroller': m.ClassMirror(
      'EdgeDraggingAutoScroller',
      {
        '#as': EdgeDraggingAutoScroller_as$,
        '#is': EdgeDraggingAutoScroller_is$,
        'scrollable': _EdgeDraggingAutoScroller_scrollable$,
        'onScrollViewScrolled': _EdgeDraggingAutoScroller_onScrollViewScrolled$,
        'velocityScalar': _EdgeDraggingAutoScroller_velocityScalar$,
        'scrolling': _EdgeDraggingAutoScroller_scrolling$,
        'startAutoScrollIfNecessary':
            _EdgeDraggingAutoScroller_startAutoScrollIfNecessary$,
        'stopAutoScroll': _EdgeDraggingAutoScroller_stopAutoScroll$,
      },
      {},
    ),
    'ScrollIncrementDetails': m.ClassMirror(
      'ScrollIncrementDetails',
      {
        '#as': ScrollIncrementDetails_as$,
        '#is': ScrollIncrementDetails_is$,
        'type': _ScrollIncrementDetails_type$,
        'metrics': _ScrollIncrementDetails_metrics$,
      },
      {},
    ),
    'ScrollIntent': m.ClassMirror(
      'ScrollIntent',
      {
        '#as': ScrollIntent_as$,
        '#is': ScrollIntent_is$,
        'direction': _ScrollIntent_direction$,
        'type': _ScrollIntent_type$,
      },
      {},
    ),
    'ScrollAction': m.ClassMirror(
      'ScrollAction',
      {
        '#as': ScrollAction_as$,
        '#is': ScrollAction_is$,
        'isEnabled': _ScrollAction_isEnabled$,
        'invoke': _ScrollAction_invoke$,
      },
      {},
    ),
    'ScrollIncrementType': m.ClassMirror(
      'ScrollIncrementType',
      {},
      {},
    ),
  },
);
Function ScrollableDetails_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ScrollableDetails;
Function ScrollableDetails_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ScrollableDetails;
Function _ScrollableDetails_direction$(
  m.Scope scope$,
  ScrollableDetails target$,
) =>
    () {
      return target$.direction;
    };
Function _ScrollableDetails_controller$(
  m.Scope scope$,
  ScrollableDetails target$,
) =>
    () {
      return target$.controller;
    };
Function _ScrollableDetails_physics$(
  m.Scope scope$,
  ScrollableDetails target$,
) =>
    () {
      return target$.physics;
    };
Function _ScrollableDetails_decorationClipBehavior$(
  m.Scope scope$,
  ScrollableDetails target$,
) =>
    () {
      return target$.decorationClipBehavior;
    };
Function _ScrollableDetails_hashCode$(
  m.Scope scope$,
  ScrollableDetails target$,
) =>
    () {
      return target$.hashCode;
    };
Function _ScrollableDetails__$(m.Scope scope$) => ({
      required AxisDirection direction,
      ScrollController? controller,
      ScrollPhysics? physics,
      Clip? clipBehavior,
      Clip? decorationClipBehavior,
    }) {
      return ScrollableDetails(
        clipBehavior: clipBehavior,
        controller: controller,
        decorationClipBehavior: decorationClipBehavior,
        direction: direction,
        physics: physics,
      );
    };
Function _ScrollableDetails_vertical_$(m.Scope scope$) =>
    ScrollableDetails.vertical;
Function _ScrollableDetails_horizontal_$(m.Scope scope$) =>
    ScrollableDetails.horizontal;
Function _ScrollableDetails_copyWith$(
  m.Scope scope$,
  ScrollableDetails target$,
) =>
    target$.copyWith;
Function _ScrollableDetails_toString$(
  m.Scope scope$,
  ScrollableDetails target$,
) =>
    target$.toString;
Function _ScrollableDetails_eq$$(
  m.Scope scope$,
  ScrollableDetails target$,
) =>
    (Object other$) => target$ == other$;
Function EdgeDraggingAutoScroller_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as EdgeDraggingAutoScroller;
Function EdgeDraggingAutoScroller_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is EdgeDraggingAutoScroller;
Function _EdgeDraggingAutoScroller_scrollable$(
  m.Scope scope$,
  EdgeDraggingAutoScroller target$,
) =>
    () {
      return target$.scrollable;
    };
Function _EdgeDraggingAutoScroller_onScrollViewScrolled$(
  m.Scope scope$,
  EdgeDraggingAutoScroller target$,
) =>
    () {
      return target$.onScrollViewScrolled;
    };
Function _EdgeDraggingAutoScroller_velocityScalar$(
  m.Scope scope$,
  EdgeDraggingAutoScroller target$,
) =>
    () {
      return target$.velocityScalar;
    };
Function _EdgeDraggingAutoScroller_scrolling$(
  m.Scope scope$,
  EdgeDraggingAutoScroller target$,
) =>
    () {
      return target$.scrolling;
    };
Function _EdgeDraggingAutoScroller__$(m.Scope scope$) => (
      ScrollableState scrollable, {
      m.FunctionPointer? onScrollViewScrolled,
      double? velocityScalar,
    }) {
      void onScrollViewScrolledProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onScrollViewScrolled!,
            [],
            {},
          );
      return EdgeDraggingAutoScroller(
        scrollable,
        onScrollViewScrolled:
            onScrollViewScrolled == null ? null : onScrollViewScrolledProxy,
        velocityScalar: velocityScalar ?? 7,
      );
    };
Function _EdgeDraggingAutoScroller_startAutoScrollIfNecessary$(
  m.Scope scope$,
  EdgeDraggingAutoScroller target$,
) =>
    target$.startAutoScrollIfNecessary;
Function _EdgeDraggingAutoScroller_stopAutoScroll$(
  m.Scope scope$,
  EdgeDraggingAutoScroller target$,
) =>
    target$.stopAutoScroll;
Function ScrollIncrementDetails_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ScrollIncrementDetails;
Function ScrollIncrementDetails_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ScrollIncrementDetails;
Function _ScrollIncrementDetails_type$(
  m.Scope scope$,
  ScrollIncrementDetails target$,
) =>
    () {
      return target$.type;
    };
Function _ScrollIncrementDetails_metrics$(
  m.Scope scope$,
  ScrollIncrementDetails target$,
) =>
    () {
      return target$.metrics;
    };
Function _ScrollIncrementDetails__$(m.Scope scope$) => ({
      required ScrollIncrementType type,
      required ScrollMetrics metrics,
    }) {
      return ScrollIncrementDetails(
        metrics: metrics,
        type: type,
      );
    };
Function ScrollIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ScrollIntent;
Function ScrollIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ScrollIntent;
Function _ScrollIntent_direction$(
  m.Scope scope$,
  ScrollIntent target$,
) =>
    () {
      return target$.direction;
    };
Function _ScrollIntent_type$(
  m.Scope scope$,
  ScrollIntent target$,
) =>
    () {
      return target$.type;
    };
Function _ScrollIntent__$(m.Scope scope$) => ({
      required AxisDirection direction,
      ScrollIncrementType? type,
    }) {
      return ScrollIntent(
        direction: direction,
        type: type ?? ScrollIncrementType.line,
      );
    };
Function ScrollAction_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ScrollAction;
Function ScrollAction_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ScrollAction;
Function _ScrollAction__$(m.Scope scope$) => () {
      return ScrollAction();
    };
Function _ScrollAction_isEnabled$(
  m.Scope scope$,
  ScrollAction target$,
) =>
    target$.isEnabled;
Function _ScrollAction_getDirectionalIncrement$(m.Scope scope$) =>
    ScrollAction.getDirectionalIncrement;
Function _ScrollAction_invoke$(
  m.Scope scope$,
  ScrollAction target$,
) =>
    target$.invoke;
Function _ScrollIncrementType_line$(m.Scope scope$) =>
    () => ScrollIncrementType.line;
Function _ScrollIncrementType_page$(m.Scope scope$) =>
    () => ScrollIncrementType.page;
Function _ScrollIncrementType_values$(m.Scope scope$) =>
    () => ScrollIncrementType.values;
