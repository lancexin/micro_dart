// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/widget_inspector.dart';
import 'dart:async';
import 'dart:collection' show HashMap;
import 'dart:convert';
import 'dart:developer';
import 'dart:math';
import 'dart:ui'
    show
        ClipOp,
        FlutterView,
        Image,
        ImageByteFormat,
        Paragraph,
        Picture,
        PictureRecorder,
        PointMode,
        SceneBuilder,
        Vertices;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/scheduler.dart';
import 'package:meta/meta_meta.dart';
import 'package:flutter/src/widgets/app.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/binding.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/gesture_detector.dart';
import 'package:flutter/src/widgets/service_extensions.dart';
import 'package:flutter/src/widgets/view.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/widget_inspector.dart',
  {
    'widgetFactory': _widgetFactory$,
    'debugTransformDebugCreator': _debugTransformDebugCreator$,
    'debugIsLocalCreationLocation': _debugIsLocalCreationLocation$,
    'debugIsWidgetLocalCreation': _debugIsWidgetLocalCreation$,
  },
  {},
  {
    'WidgetInspector': m.ClassMirror(
      'WidgetInspector',
      {
        '#as': WidgetInspector_as$,
        '#is': WidgetInspector_is$,
        'child': _WidgetInspector_child$,
        'selectButtonBuilder': _WidgetInspector_selectButtonBuilder$,
        'createState': _WidgetInspector_createState$,
      },
      {},
    ),
    'InspectorSelection': m.ClassMirror(
      'InspectorSelection',
      {
        '#as': InspectorSelection_as$,
        '#is': InspectorSelection_is$,
        'candidates': _InspectorSelection_candidates$,
        'index': _InspectorSelection_index$,
        'current': _InspectorSelection_current$,
        'currentElement': _InspectorSelection_currentElement$,
        'active': _InspectorSelection_active$,
        'clear': _InspectorSelection_clear$,
      },
      {
        'candidates': _InspectorSelection_candidates_set$,
        'index': _InspectorSelection_index_set$,
        'current': _InspectorSelection_current_set$,
        'currentElement': _InspectorSelection_currentElement_set$,
      },
    ),
    'DevToolsDeepLinkProperty': m.ClassMirror(
      'DevToolsDeepLinkProperty',
      {
        '#as': DevToolsDeepLinkProperty_as$,
        '#is': DevToolsDeepLinkProperty_is$,
      },
      {},
    ),
    'InspectorSerializationDelegate': m.ClassMirror(
      'InspectorSerializationDelegate',
      {
        '#as': InspectorSerializationDelegate_as$,
        '#is': InspectorSerializationDelegate_is$,
        'service': _InspectorSerializationDelegate_service$,
        'groupName': _InspectorSerializationDelegate_groupName$,
        'summaryTree': _InspectorSerializationDelegate_summaryTree$,
        'maxDescendantsTruncatableNode':
            _InspectorSerializationDelegate_maxDescendantsTruncatableNode$,
        'includeProperties': _InspectorSerializationDelegate_includeProperties$,
        'subtreeDepth': _InspectorSerializationDelegate_subtreeDepth$,
        'expandPropertyValues':
            _InspectorSerializationDelegate_expandPropertyValues$,
        'addAdditionalPropertiesCallback':
            _InspectorSerializationDelegate_addAdditionalPropertiesCallback$,
        'additionalNodeProperties':
            _InspectorSerializationDelegate_additionalNodeProperties$,
        'delegateForNode': _InspectorSerializationDelegate_delegateForNode$,
        'filterChildren': _InspectorSerializationDelegate_filterChildren$,
        'filterProperties': _InspectorSerializationDelegate_filterProperties$,
        'truncateNodesList': _InspectorSerializationDelegate_truncateNodesList$,
        'copyWith': _InspectorSerializationDelegate_copyWith$,
      },
      {},
    ),
  },
);
dynamic _widgetFactory$() {
  return widgetFactory;
}

Function WidgetInspector_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as WidgetInspector;
Function WidgetInspector_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is WidgetInspector;
Widget _WidgetInspector_child$(WidgetInspector target) {
  return target.child;
}

Widget Function(BuildContext, void Function())?
    _WidgetInspector_selectButtonBuilder$(WidgetInspector target) {
  return target.selectButtonBuilder;
}

Function _WidgetInspector_createState$(
  m.Scope scope,
  WidgetInspector target,
) =>
    target.createState;
Function InspectorSelection_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as InspectorSelection;
Function InspectorSelection_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is InspectorSelection;
List<RenderObject> _InspectorSelection_candidates$(InspectorSelection target) {
  return target.candidates;
}

void _InspectorSelection_candidates_set$(
  InspectorSelection target,
  List<RenderObject> other,
) {
  target.candidates = other;
}

int _InspectorSelection_index$(InspectorSelection target) {
  return target.index;
}

void _InspectorSelection_index_set$(
  InspectorSelection target,
  int other,
) {
  target.index = other;
}

RenderObject? _InspectorSelection_current$(InspectorSelection target) {
  return target.current;
}

void _InspectorSelection_current_set$(
  InspectorSelection target,
  RenderObject? other,
) {
  target.current = other;
}

Element? _InspectorSelection_currentElement$(InspectorSelection target) {
  return target.currentElement;
}

void _InspectorSelection_currentElement_set$(
  InspectorSelection target,
  Element? other,
) {
  target.currentElement = other;
}

bool _InspectorSelection_active$(InspectorSelection target) {
  return target.active;
}

Function _InspectorSelection_clear$(
  m.Scope scope,
  InspectorSelection target,
) =>
    target.clear;
Function DevToolsDeepLinkProperty_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DevToolsDeepLinkProperty;
Function DevToolsDeepLinkProperty_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DevToolsDeepLinkProperty;
Function InspectorSerializationDelegate_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as InspectorSerializationDelegate;
Function InspectorSerializationDelegate_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is InspectorSerializationDelegate;
WidgetInspectorService _InspectorSerializationDelegate_service$(
    InspectorSerializationDelegate target) {
  return target.service;
}

String? _InspectorSerializationDelegate_groupName$(
    InspectorSerializationDelegate target) {
  return target.groupName;
}

bool _InspectorSerializationDelegate_summaryTree$(
    InspectorSerializationDelegate target) {
  return target.summaryTree;
}

int _InspectorSerializationDelegate_maxDescendantsTruncatableNode$(
    InspectorSerializationDelegate target) {
  return target.maxDescendantsTruncatableNode;
}

bool _InspectorSerializationDelegate_includeProperties$(
    InspectorSerializationDelegate target) {
  return target.includeProperties;
}

int _InspectorSerializationDelegate_subtreeDepth$(
    InspectorSerializationDelegate target) {
  return target.subtreeDepth;
}

bool _InspectorSerializationDelegate_expandPropertyValues$(
    InspectorSerializationDelegate target) {
  return target.expandPropertyValues;
}

Map<String, Object>? Function(DiagnosticsNode, InspectorSerializationDelegate)?
    _InspectorSerializationDelegate_addAdditionalPropertiesCallback$(
        InspectorSerializationDelegate target) {
  return target.addAdditionalPropertiesCallback;
}

Function _InspectorSerializationDelegate_additionalNodeProperties$(
  m.Scope scope,
  InspectorSerializationDelegate target,
) =>
    target.additionalNodeProperties;
Function _InspectorSerializationDelegate_delegateForNode$(
  m.Scope scope,
  InspectorSerializationDelegate target,
) =>
    target.delegateForNode;
Function _InspectorSerializationDelegate_filterChildren$(
  m.Scope scope,
  InspectorSerializationDelegate target,
) =>
    target.filterChildren;
Function _InspectorSerializationDelegate_filterProperties$(
  m.Scope scope,
  InspectorSerializationDelegate target,
) =>
    target.filterProperties;
Function _InspectorSerializationDelegate_truncateNodesList$(
  m.Scope scope,
  InspectorSerializationDelegate target,
) =>
    target.truncateNodesList;
Function _InspectorSerializationDelegate_copyWith$(
  m.Scope scope,
  InspectorSerializationDelegate target,
) =>
    target.copyWith;
Function _debugTransformDebugCreator$(m.Scope scope) =>
    debugTransformDebugCreator;
Function _debugIsLocalCreationLocation$(m.Scope scope) =>
    debugIsLocalCreationLocation;
Function _debugIsWidgetLocalCreation$(m.Scope scope) =>
    debugIsWidgetLocalCreation;
