// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/widget_inspector.dart';
import 'dart:async';
import 'dart:collection' show HashMap;
import 'dart:convert';
import 'dart:developer';
import 'dart:math';
import 'dart:ui'
    show
        ClipOp,
        FlutterView,
        Image,
        ImageByteFormat,
        Paragraph,
        Picture,
        PictureRecorder,
        PointMode,
        SceneBuilder,
        Vertices;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/scheduler.dart';
import 'package:meta/meta_meta.dart';
import 'package:flutter/src/widgets/app.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/binding.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/gesture_detector.dart';
import 'package:flutter/src/widgets/service_extensions.dart';
import 'package:flutter/src/widgets/view.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/widget_inspector.dart',
  {
    'widgetFactory': _widgetFactory$,
    'WidgetInspector.': _WidgetInspector__$,
    'InspectorSelection.': _InspectorSelection__$,
    'DevToolsDeepLinkProperty.': _DevToolsDeepLinkProperty__$,
    'InspectorSerializationDelegate.': _InspectorSerializationDelegate__$,
    'debugTransformDebugCreator': _debugTransformDebugCreator$,
    'debugIsLocalCreationLocation': _debugIsLocalCreationLocation$,
    'debugIsWidgetLocalCreation': _debugIsWidgetLocalCreation$,
  },
  {},
  {
    'WidgetInspector': m.ClassMirror(
      'WidgetInspector',
      {
        '#as': WidgetInspector_as$,
        '#is': WidgetInspector_is$,
        'child': _WidgetInspector_child$,
        'selectButtonBuilder': _WidgetInspector_selectButtonBuilder$,
        'createState': _WidgetInspector_createState$,
      },
      {},
    ),
    'InspectorSelection': m.ClassMirror(
      'InspectorSelection',
      {
        '#as': InspectorSelection_as$,
        '#is': InspectorSelection_is$,
        'candidates': _InspectorSelection_candidates$,
        'index': _InspectorSelection_index$,
        'current': _InspectorSelection_current$,
        'currentElement': _InspectorSelection_currentElement$,
        'active': _InspectorSelection_active$,
        'clear': _InspectorSelection_clear$,
      },
      {
        'candidates': _InspectorSelection_candidates_set$,
        'index': _InspectorSelection_index_set$,
        'current': _InspectorSelection_current_set$,
        'currentElement': _InspectorSelection_currentElement_set$,
      },
    ),
    'DevToolsDeepLinkProperty': m.ClassMirror(
      'DevToolsDeepLinkProperty',
      {
        '#as': DevToolsDeepLinkProperty_as$,
        '#is': DevToolsDeepLinkProperty_is$,
      },
      {},
    ),
    'InspectorSerializationDelegate': m.ClassMirror(
      'InspectorSerializationDelegate',
      {
        '#as': InspectorSerializationDelegate_as$,
        '#is': InspectorSerializationDelegate_is$,
        'service': _InspectorSerializationDelegate_service$,
        'groupName': _InspectorSerializationDelegate_groupName$,
        'summaryTree': _InspectorSerializationDelegate_summaryTree$,
        'maxDescendantsTruncatableNode':
            _InspectorSerializationDelegate_maxDescendantsTruncatableNode$,
        'includeProperties': _InspectorSerializationDelegate_includeProperties$,
        'subtreeDepth': _InspectorSerializationDelegate_subtreeDepth$,
        'expandPropertyValues':
            _InspectorSerializationDelegate_expandPropertyValues$,
        'addAdditionalPropertiesCallback':
            _InspectorSerializationDelegate_addAdditionalPropertiesCallback$,
        'additionalNodeProperties':
            _InspectorSerializationDelegate_additionalNodeProperties$,
        'delegateForNode': _InspectorSerializationDelegate_delegateForNode$,
        'filterChildren': _InspectorSerializationDelegate_filterChildren$,
        'filterProperties': _InspectorSerializationDelegate_filterProperties$,
        'truncateNodesList': _InspectorSerializationDelegate_truncateNodesList$,
        'copyWith': _InspectorSerializationDelegate_copyWith$,
      },
      {},
    ),
  },
);
Function _widgetFactory$(m.Scope scope$) => () => widgetFactory;
Function WidgetInspector_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as WidgetInspector;
Function WidgetInspector_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is WidgetInspector;
Function _WidgetInspector_child$(
  m.Scope scope$,
  WidgetInspector target$,
) =>
    () {
      return target$.child;
    };
Function _WidgetInspector_selectButtonBuilder$(
  m.Scope scope$,
  WidgetInspector target$,
) =>
    () {
      return target$.selectButtonBuilder;
    };
Function _WidgetInspector__$(m.Scope scope$) => ({
      Key? key,
      required Widget child,
      required m.FunctionPointer? selectButtonBuilder,
    }) {
      Widget selectButtonBuilderProxy(
        BuildContext selectButtonBuilder_context$,
        void Function() selectButtonBuilder_onPressed$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            selectButtonBuilder!,
            [
              selectButtonBuilder_context$,
              selectButtonBuilder_onPressed$,
            ],
            {},
          );
      return WidgetInspector(
        child: child,
        key: key,
        selectButtonBuilder:
            selectButtonBuilder == null ? null : selectButtonBuilderProxy,
      );
    };
Function _WidgetInspector_createState$(
  m.Scope scope$,
  WidgetInspector target$,
) =>
    target$.createState;
Function InspectorSelection_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as InspectorSelection;
Function InspectorSelection_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is InspectorSelection;
Function _InspectorSelection_candidates$(
  m.Scope scope$,
  InspectorSelection target$,
) =>
    () {
      return target$.candidates;
    };
void _InspectorSelection_candidates_set$(
  m.Scope scope$,
  InspectorSelection target$,
) =>
    (dynamic other$) {
      target$.candidates = other$;
    };
Function _InspectorSelection_index$(
  m.Scope scope$,
  InspectorSelection target$,
) =>
    () {
      return target$.index;
    };
void _InspectorSelection_index_set$(
  m.Scope scope$,
  InspectorSelection target$,
) =>
    (dynamic other$) {
      target$.index = other$;
    };
Function _InspectorSelection_current$(
  m.Scope scope$,
  InspectorSelection target$,
) =>
    () {
      return target$.current;
    };
void _InspectorSelection_current_set$(
  m.Scope scope$,
  InspectorSelection target$,
) =>
    (dynamic other$) {
      target$.current = other$;
    };
Function _InspectorSelection_currentElement$(
  m.Scope scope$,
  InspectorSelection target$,
) =>
    () {
      return target$.currentElement;
    };
void _InspectorSelection_currentElement_set$(
  m.Scope scope$,
  InspectorSelection target$,
) =>
    (dynamic other$) {
      target$.currentElement = other$;
    };
Function _InspectorSelection_active$(
  m.Scope scope$,
  InspectorSelection target$,
) =>
    () {
      return target$.active;
    };
Function _InspectorSelection__$(m.Scope scope$) => () {
      return InspectorSelection();
    };
Function _InspectorSelection_clear$(
  m.Scope scope$,
  InspectorSelection target$,
) =>
    target$.clear;
Function DevToolsDeepLinkProperty_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DevToolsDeepLinkProperty;
Function DevToolsDeepLinkProperty_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DevToolsDeepLinkProperty;
Function _DevToolsDeepLinkProperty__$(m.Scope scope$) => (
      String description,
      String url,
    ) {
      return DevToolsDeepLinkProperty(
        description,
        url,
      );
    };
Function InspectorSerializationDelegate_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as InspectorSerializationDelegate;
Function InspectorSerializationDelegate_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is InspectorSerializationDelegate;
Function _InspectorSerializationDelegate_service$(
  m.Scope scope$,
  InspectorSerializationDelegate target$,
) =>
    () {
      return target$.service;
    };
Function _InspectorSerializationDelegate_groupName$(
  m.Scope scope$,
  InspectorSerializationDelegate target$,
) =>
    () {
      return target$.groupName;
    };
Function _InspectorSerializationDelegate_summaryTree$(
  m.Scope scope$,
  InspectorSerializationDelegate target$,
) =>
    () {
      return target$.summaryTree;
    };
Function _InspectorSerializationDelegate_maxDescendantsTruncatableNode$(
  m.Scope scope$,
  InspectorSerializationDelegate target$,
) =>
    () {
      return target$.maxDescendantsTruncatableNode;
    };
Function _InspectorSerializationDelegate_includeProperties$(
  m.Scope scope$,
  InspectorSerializationDelegate target$,
) =>
    () {
      return target$.includeProperties;
    };
Function _InspectorSerializationDelegate_subtreeDepth$(
  m.Scope scope$,
  InspectorSerializationDelegate target$,
) =>
    () {
      return target$.subtreeDepth;
    };
Function _InspectorSerializationDelegate_expandPropertyValues$(
  m.Scope scope$,
  InspectorSerializationDelegate target$,
) =>
    () {
      return target$.expandPropertyValues;
    };
Function _InspectorSerializationDelegate_addAdditionalPropertiesCallback$(
  m.Scope scope$,
  InspectorSerializationDelegate target$,
) =>
    () {
      return target$.addAdditionalPropertiesCallback;
    };
Function _InspectorSerializationDelegate__$(m.Scope scope$) => ({
      String? groupName,
      bool? summaryTree,
      int? maxDescendantsTruncatableNode,
      bool? expandPropertyValues,
      int? subtreeDepth,
      bool? includeProperties,
      required WidgetInspectorService service,
      m.FunctionPointer? addAdditionalPropertiesCallback,
    }) {
      Map<String, Object>? addAdditionalPropertiesCallbackProxy(
        DiagnosticsNode addAdditionalPropertiesCallback_$p0$,
        InspectorSerializationDelegate addAdditionalPropertiesCallback_$p1$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            addAdditionalPropertiesCallback!,
            [
              addAdditionalPropertiesCallback_$p0$,
              addAdditionalPropertiesCallback_$p1$,
            ],
            {},
          );
      return InspectorSerializationDelegate(
        addAdditionalPropertiesCallback: addAdditionalPropertiesCallback == null
            ? null
            : addAdditionalPropertiesCallbackProxy,
        expandPropertyValues: expandPropertyValues ?? true,
        groupName: groupName,
        includeProperties: includeProperties ?? false,
        maxDescendantsTruncatableNode: maxDescendantsTruncatableNode ?? -1,
        service: service,
        subtreeDepth: subtreeDepth ?? 1,
        summaryTree: summaryTree ?? false,
      );
    };
Function _InspectorSerializationDelegate_additionalNodeProperties$(
  m.Scope scope$,
  InspectorSerializationDelegate target$,
) =>
    target$.additionalNodeProperties;
Function _InspectorSerializationDelegate_delegateForNode$(
  m.Scope scope$,
  InspectorSerializationDelegate target$,
) =>
    target$.delegateForNode;
Function _InspectorSerializationDelegate_filterChildren$(
  m.Scope scope$,
  InspectorSerializationDelegate target$,
) =>
    target$.filterChildren;
Function _InspectorSerializationDelegate_filterProperties$(
  m.Scope scope$,
  InspectorSerializationDelegate target$,
) =>
    target$.filterProperties;
Function _InspectorSerializationDelegate_truncateNodesList$(
  m.Scope scope$,
  InspectorSerializationDelegate target$,
) =>
    target$.truncateNodesList;
Function _InspectorSerializationDelegate_copyWith$(
  m.Scope scope$,
  InspectorSerializationDelegate target$,
) =>
    target$.copyWith;
Function _debugTransformDebugCreator$(m.Scope scope$) =>
    debugTransformDebugCreator;
Function _debugIsLocalCreationLocation$(m.Scope scope$) =>
    debugIsLocalCreationLocation;
Function _debugIsWidgetLocalCreation$(m.Scope scope$) =>
    debugIsWidgetLocalCreation;
