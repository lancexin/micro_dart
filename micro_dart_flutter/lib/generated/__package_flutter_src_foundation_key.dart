// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/foundation/key.dart';
import 'package:meta/meta.dart';
import 'package:flutter/src/foundation/diagnostics.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/foundation/key.dart',
  {
    'Key.': _Key__$,
    'UniqueKey.': _UniqueKey__$,
    'ValueKey.': _ValueKey__$,
  },
  {},
  {
    'Key': m.ClassMirror(
      'Key',
      {
        '#as': Key_as$,
        '#is': Key_is$,
      },
      {},
    ),
    'LocalKey': m.ClassMirror(
      'LocalKey',
      {
        '#as': LocalKey_as$,
        '#is': LocalKey_is$,
      },
      {},
    ),
    'UniqueKey': m.ClassMirror(
      'UniqueKey',
      {
        '#as': UniqueKey_as$,
        '#is': UniqueKey_is$,
        'toString': _UniqueKey_toString$,
      },
      {},
    ),
    'ValueKey': m.ClassMirror(
      'ValueKey',
      {
        '#as': ValueKey_as$,
        '#is': ValueKey_is$,
        'value': _ValueKey_value$,
        'hashCode': _ValueKey_hashCode$,
        '==': _ValueKey_eq$$,
        'toString': _ValueKey_toString$,
      },
      {},
    ),
  },
);
Function Key_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Key;
Function Key_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Key;
Function _Key__$(m.Scope scope$) => (String value) {
      return Key(value);
    };
Function LocalKey_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as LocalKey;
Function LocalKey_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is LocalKey;
Function UniqueKey_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as UniqueKey;
Function UniqueKey_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is UniqueKey;
Function _UniqueKey__$(m.Scope scope$) => () {
      return UniqueKey();
    };
Function _UniqueKey_toString$(
  m.Scope scope$,
  UniqueKey target$,
) =>
    target$.toString;
Function ValueKey_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ValueKey<T>;
Function ValueKey_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ValueKey<T>;
Function _ValueKey_value$<T>(
  m.Scope scope$,
  ValueKey<T> target$,
) =>
    () {
      return target$.value;
    };
Function _ValueKey_hashCode$<T>(
  m.Scope scope$,
  ValueKey<T> target$,
) =>
    () {
      return target$.hashCode;
    };
Function _ValueKey__$(m.Scope scope$) => (dynamic value) {
      return ValueKey(value);
    };
Function _ValueKey_eq$$<T>(
  m.Scope scope$,
  ValueKey<T> target$,
) =>
    (Object other$) => target$ == other$;
Function _ValueKey_toString$<T>(
  m.Scope scope$,
  ValueKey<T> target$,
) =>
    target$.toString;
