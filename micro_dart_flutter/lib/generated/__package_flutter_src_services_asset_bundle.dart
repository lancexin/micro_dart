// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/asset_bundle.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/services/binding.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/asset_bundle.dart',
  {'rootBundle': _rootBundle$},
  {},
  {
    'AssetBundle': m.ClassMirror(
      'AssetBundle',
      {
        'load': _AssetBundle_load$,
        'loadBuffer': _AssetBundle_loadBuffer$,
        'loadString': _AssetBundle_loadString$,
        'evict': _AssetBundle_evict$,
        'clear': _AssetBundle_clear$,
        'toString': _AssetBundle_toString$,
      },
      {},
    ),
    'NetworkAssetBundle': m.ClassMirror(
      'NetworkAssetBundle',
      {
        'load': _NetworkAssetBundle_load$,
        'toString': _NetworkAssetBundle_toString$,
      },
      {},
    ),
    'CachingAssetBundle': m.ClassMirror(
      'CachingAssetBundle',
      {
        'loadString': _CachingAssetBundle_loadString$,
        'evict': _CachingAssetBundle_evict$,
        'clear': _CachingAssetBundle_clear$,
        'loadBuffer': _CachingAssetBundle_loadBuffer$,
      },
      {},
    ),
    'PlatformAssetBundle': m.ClassMirror(
      'PlatformAssetBundle',
      {
        'load': _PlatformAssetBundle_load$,
        'loadBuffer': _PlatformAssetBundle_loadBuffer$,
      },
      {},
    ),
  },
);
AssetBundle _rootBundle$() {
  return rootBundle;
}

Function _AssetBundle_load$(
  m.Scope scope,
  AssetBundle target,
) =>
    target.load;
Function _AssetBundle_loadBuffer$(
  m.Scope scope,
  AssetBundle target,
) =>
    target.loadBuffer;
Function _AssetBundle_loadString$(
  m.Scope scope,
  AssetBundle target,
) =>
    target.loadString;
Function _AssetBundle_evict$(
  m.Scope scope,
  AssetBundle target,
) =>
    target.evict;
Function _AssetBundle_clear$(
  m.Scope scope,
  AssetBundle target,
) =>
    target.clear;
Function _AssetBundle_toString$(
  m.Scope scope,
  AssetBundle target,
) =>
    target.toString;
Function _NetworkAssetBundle_load$(
  m.Scope scope,
  NetworkAssetBundle target,
) =>
    target.load;
Function _NetworkAssetBundle_toString$(
  m.Scope scope,
  NetworkAssetBundle target,
) =>
    target.toString;
Function _CachingAssetBundle_loadString$(
  m.Scope scope,
  CachingAssetBundle target,
) =>
    target.loadString;
Function _CachingAssetBundle_evict$(
  m.Scope scope,
  CachingAssetBundle target,
) =>
    target.evict;
Function _CachingAssetBundle_clear$(
  m.Scope scope,
  CachingAssetBundle target,
) =>
    target.clear;
Function _CachingAssetBundle_loadBuffer$(
  m.Scope scope,
  CachingAssetBundle target,
) =>
    target.loadBuffer;
Function _PlatformAssetBundle_load$(
  m.Scope scope,
  PlatformAssetBundle target,
) =>
    target.load;
Function _PlatformAssetBundle_loadBuffer$(
  m.Scope scope,
  PlatformAssetBundle target,
) =>
    target.loadBuffer;
