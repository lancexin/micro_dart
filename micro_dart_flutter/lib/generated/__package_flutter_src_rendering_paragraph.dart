// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/paragraph.dart';
import 'dart:collection';
import 'dart:math';
import 'dart:ui'
    show
        BoxHeightStyle,
        BoxWidthStyle,
        Gradient,
        LineMetrics,
        PlaceholderAlignment,
        Shader,
        TextBox,
        TextHeightBehavior;
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/semantics.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/rendering/debug.dart';
import 'package:flutter/src/rendering/editable.dart';
import 'package:flutter/src/rendering/layer.dart';
import 'package:flutter/src/rendering/object.dart';
import 'package:flutter/src/rendering/selection.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/paragraph.dart',
  {},
  {},
  {
    'TextParentData': m.ClassMirror(
      'TextParentData',
      {
        'scale': _TextParentData_scale$,
        'toString': _TextParentData_toString$,
      },
      {'scale': _TextParentData_scale_set$},
    ),
    'PlaceholderSpanIndexSemanticsTag': m.ClassMirror(
      'PlaceholderSpanIndexSemanticsTag',
      {
        'index': _PlaceholderSpanIndexSemanticsTag_index$,
        'hashCode': _PlaceholderSpanIndexSemanticsTag_hashCode$,
      },
      {},
    ),
    'RenderParagraph': m.ClassMirror(
      'RenderParagraph',
      {
        'text': _RenderParagraph_text$,
        'selections': _RenderParagraph_selections$,
        'registrar': _RenderParagraph_registrar$,
        'textAlign': _RenderParagraph_textAlign$,
        'textDirection': _RenderParagraph_textDirection$,
        'softWrap': _RenderParagraph_softWrap$,
        'overflow': _RenderParagraph_overflow$,
        'textScaleFactor': _RenderParagraph_textScaleFactor$,
        'maxLines': _RenderParagraph_maxLines$,
        'locale': _RenderParagraph_locale$,
        'strutStyle': _RenderParagraph_strutStyle$,
        'textWidthBasis': _RenderParagraph_textWidthBasis$,
        'textHeightBehavior': _RenderParagraph_textHeightBehavior$,
        'selectionColor': _RenderParagraph_selectionColor$,
        'debugHasOverflowShader': _RenderParagraph_debugHasOverflowShader$,
        'textSize': _RenderParagraph_textSize$,
        'setupParentData': _RenderParagraph_setupParentData$,
        'markNeedsLayout': _RenderParagraph_markNeedsLayout$,
        'dispose': _RenderParagraph_dispose$,
        'computeMinIntrinsicWidth': _RenderParagraph_computeMinIntrinsicWidth$,
        'computeMaxIntrinsicWidth': _RenderParagraph_computeMaxIntrinsicWidth$,
        'computeMinIntrinsicHeight':
            _RenderParagraph_computeMinIntrinsicHeight$,
        'computeMaxIntrinsicHeight':
            _RenderParagraph_computeMaxIntrinsicHeight$,
        'computeDistanceToActualBaseline':
            _RenderParagraph_computeDistanceToActualBaseline$,
        'hitTestSelf': _RenderParagraph_hitTestSelf$,
        'hitTestChildren': _RenderParagraph_hitTestChildren$,
        'systemFontsDidChange': _RenderParagraph_systemFontsDidChange$,
        'computeDryLayout': _RenderParagraph_computeDryLayout$,
        'performLayout': _RenderParagraph_performLayout$,
        'paint': _RenderParagraph_paint$,
        'getOffsetForCaret': _RenderParagraph_getOffsetForCaret$,
        'getFullHeightForCaret': _RenderParagraph_getFullHeightForCaret$,
        'getBoxesForSelection': _RenderParagraph_getBoxesForSelection$,
        'getPositionForOffset': _RenderParagraph_getPositionForOffset$,
        'getWordBoundary': _RenderParagraph_getWordBoundary$,
        'describeSemanticsConfiguration':
            _RenderParagraph_describeSemanticsConfiguration$,
        'assembleSemanticsNode': _RenderParagraph_assembleSemanticsNode$,
        'clearSemantics': _RenderParagraph_clearSemantics$,
        'debugDescribeChildren': _RenderParagraph_debugDescribeChildren$,
        'debugFillProperties': _RenderParagraph_debugFillProperties$,
      },
      {
        'text': _RenderParagraph_text_set$,
        'registrar': _RenderParagraph_registrar_set$,
        'textAlign': _RenderParagraph_textAlign_set$,
        'textDirection': _RenderParagraph_textDirection_set$,
        'softWrap': _RenderParagraph_softWrap_set$,
        'overflow': _RenderParagraph_overflow_set$,
        'textScaleFactor': _RenderParagraph_textScaleFactor_set$,
        'maxLines': _RenderParagraph_maxLines_set$,
        'locale': _RenderParagraph_locale_set$,
        'strutStyle': _RenderParagraph_strutStyle_set$,
        'textWidthBasis': _RenderParagraph_textWidthBasis_set$,
        'textHeightBehavior': _RenderParagraph_textHeightBehavior_set$,
        'selectionColor': _RenderParagraph_selectionColor_set$,
      },
    ),
  },
);
double? _TextParentData_scale$(TextParentData target) {
  return target.scale;
}

void _TextParentData_scale_set$(
  TextParentData target,
  double? other,
) {
  target.scale = other;
}

Function _TextParentData_toString$(
  m.Scope scope,
  TextParentData target,
) =>
    target.toString;
int _PlaceholderSpanIndexSemanticsTag_index$(
    PlaceholderSpanIndexSemanticsTag target) {
  return target.index;
}

int _PlaceholderSpanIndexSemanticsTag_hashCode$(
    PlaceholderSpanIndexSemanticsTag target) {
  return target.hashCode;
}

InlineSpan _RenderParagraph_text$(RenderParagraph target) {
  return target.text;
}

void _RenderParagraph_text_set$(
  RenderParagraph target,
  InlineSpan other,
) {
  target.text = other;
}

List<TextSelection> _RenderParagraph_selections$(RenderParagraph target) {
  return target.selections;
}

SelectionRegistrar? _RenderParagraph_registrar$(RenderParagraph target) {
  return target.registrar;
}

void _RenderParagraph_registrar_set$(
  RenderParagraph target,
  SelectionRegistrar? other,
) {
  target.registrar = other;
}

TextAlign _RenderParagraph_textAlign$(RenderParagraph target) {
  return target.textAlign;
}

void _RenderParagraph_textAlign_set$(
  RenderParagraph target,
  TextAlign other,
) {
  target.textAlign = other;
}

TextDirection _RenderParagraph_textDirection$(RenderParagraph target) {
  return target.textDirection;
}

void _RenderParagraph_textDirection_set$(
  RenderParagraph target,
  TextDirection other,
) {
  target.textDirection = other;
}

bool _RenderParagraph_softWrap$(RenderParagraph target) {
  return target.softWrap;
}

void _RenderParagraph_softWrap_set$(
  RenderParagraph target,
  bool other,
) {
  target.softWrap = other;
}

TextOverflow _RenderParagraph_overflow$(RenderParagraph target) {
  return target.overflow;
}

void _RenderParagraph_overflow_set$(
  RenderParagraph target,
  TextOverflow other,
) {
  target.overflow = other;
}

double _RenderParagraph_textScaleFactor$(RenderParagraph target) {
  return target.textScaleFactor;
}

void _RenderParagraph_textScaleFactor_set$(
  RenderParagraph target,
  double other,
) {
  target.textScaleFactor = other;
}

int? _RenderParagraph_maxLines$(RenderParagraph target) {
  return target.maxLines;
}

void _RenderParagraph_maxLines_set$(
  RenderParagraph target,
  int? other,
) {
  target.maxLines = other;
}

Locale? _RenderParagraph_locale$(RenderParagraph target) {
  return target.locale;
}

void _RenderParagraph_locale_set$(
  RenderParagraph target,
  Locale? other,
) {
  target.locale = other;
}

StrutStyle? _RenderParagraph_strutStyle$(RenderParagraph target) {
  return target.strutStyle;
}

void _RenderParagraph_strutStyle_set$(
  RenderParagraph target,
  StrutStyle? other,
) {
  target.strutStyle = other;
}

TextWidthBasis _RenderParagraph_textWidthBasis$(RenderParagraph target) {
  return target.textWidthBasis;
}

void _RenderParagraph_textWidthBasis_set$(
  RenderParagraph target,
  TextWidthBasis other,
) {
  target.textWidthBasis = other;
}

TextHeightBehavior? _RenderParagraph_textHeightBehavior$(
    RenderParagraph target) {
  return target.textHeightBehavior;
}

void _RenderParagraph_textHeightBehavior_set$(
  RenderParagraph target,
  TextHeightBehavior? other,
) {
  target.textHeightBehavior = other;
}

Color? _RenderParagraph_selectionColor$(RenderParagraph target) {
  return target.selectionColor;
}

void _RenderParagraph_selectionColor_set$(
  RenderParagraph target,
  Color? other,
) {
  target.selectionColor = other;
}

bool _RenderParagraph_debugHasOverflowShader$(RenderParagraph target) {
  return target.debugHasOverflowShader;
}

Size _RenderParagraph_textSize$(RenderParagraph target) {
  return target.textSize;
}

Function _RenderParagraph_setupParentData$(
  m.Scope scope,
  RenderParagraph target,
) =>
    target.setupParentData;
Function _RenderParagraph_markNeedsLayout$(
  m.Scope scope,
  RenderParagraph target,
) =>
    target.markNeedsLayout;
Function _RenderParagraph_dispose$(
  m.Scope scope,
  RenderParagraph target,
) =>
    target.dispose;
Function _RenderParagraph_computeMinIntrinsicWidth$(
  m.Scope scope,
  RenderParagraph target,
) =>
    target.computeMinIntrinsicWidth;
Function _RenderParagraph_computeMaxIntrinsicWidth$(
  m.Scope scope,
  RenderParagraph target,
) =>
    target.computeMaxIntrinsicWidth;
Function _RenderParagraph_computeMinIntrinsicHeight$(
  m.Scope scope,
  RenderParagraph target,
) =>
    target.computeMinIntrinsicHeight;
Function _RenderParagraph_computeMaxIntrinsicHeight$(
  m.Scope scope,
  RenderParagraph target,
) =>
    target.computeMaxIntrinsicHeight;
Function _RenderParagraph_computeDistanceToActualBaseline$(
  m.Scope scope,
  RenderParagraph target,
) =>
    target.computeDistanceToActualBaseline;
Function _RenderParagraph_hitTestSelf$(
  m.Scope scope,
  RenderParagraph target,
) =>
    target.hitTestSelf;
Function _RenderParagraph_hitTestChildren$(
  m.Scope scope,
  RenderParagraph target,
) =>
    target.hitTestChildren;
Function _RenderParagraph_systemFontsDidChange$(
  m.Scope scope,
  RenderParagraph target,
) =>
    target.systemFontsDidChange;
Function _RenderParagraph_computeDryLayout$(
  m.Scope scope,
  RenderParagraph target,
) =>
    target.computeDryLayout;
Function _RenderParagraph_performLayout$(
  m.Scope scope,
  RenderParagraph target,
) =>
    target.performLayout;
Function _RenderParagraph_paint$(
  m.Scope scope,
  RenderParagraph target,
) =>
    target.paint;
Function _RenderParagraph_getOffsetForCaret$(
  m.Scope scope,
  RenderParagraph target,
) =>
    target.getOffsetForCaret;
Function _RenderParagraph_getFullHeightForCaret$(
  m.Scope scope,
  RenderParagraph target,
) =>
    target.getFullHeightForCaret;
Function _RenderParagraph_getBoxesForSelection$(
  m.Scope scope,
  RenderParagraph target,
) =>
    target.getBoxesForSelection;
Function _RenderParagraph_getPositionForOffset$(
  m.Scope scope,
  RenderParagraph target,
) =>
    target.getPositionForOffset;
Function _RenderParagraph_getWordBoundary$(
  m.Scope scope,
  RenderParagraph target,
) =>
    target.getWordBoundary;
Function _RenderParagraph_describeSemanticsConfiguration$(
  m.Scope scope,
  RenderParagraph target,
) =>
    target.describeSemanticsConfiguration;
Function _RenderParagraph_assembleSemanticsNode$(
  m.Scope scope,
  RenderParagraph target,
) =>
    target.assembleSemanticsNode;
Function _RenderParagraph_clearSemantics$(
  m.Scope scope,
  RenderParagraph target,
) =>
    target.clearSemantics;
Function _RenderParagraph_debugDescribeChildren$(
  m.Scope scope,
  RenderParagraph target,
) =>
    target.debugDescribeChildren;
Function _RenderParagraph_debugFillProperties$(
  m.Scope scope,
  RenderParagraph target,
) =>
    target.debugFillProperties;
