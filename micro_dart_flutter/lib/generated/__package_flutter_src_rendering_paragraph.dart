// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/paragraph.dart';
import 'dart:collection';
import 'dart:math';
import 'dart:ui'
    show
        BoxHeightStyle,
        BoxWidthStyle,
        Gradient,
        LineMetrics,
        PlaceholderAlignment,
        Shader,
        TextBox,
        TextHeightBehavior;
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/semantics.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/rendering/debug.dart';
import 'package:flutter/src/rendering/editable.dart';
import 'package:flutter/src/rendering/layer.dart';
import 'package:flutter/src/rendering/object.dart';
import 'package:flutter/src/rendering/selection.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/paragraph.dart',
  {
    'TextParentData.': _TextParentData__$,
    'PlaceholderSpanIndexSemanticsTag.': _PlaceholderSpanIndexSemanticsTag__$,
    'RenderParagraph.': _RenderParagraph__$,
  },
  {},
  {
    'TextParentData': m.ClassMirror(
      'TextParentData',
      {
        '#as': TextParentData_as$,
        '#is': TextParentData_is$,
        'scale': _TextParentData_scale$,
        'toString': _TextParentData_toString$,
      },
      {'scale': _TextParentData_scale_set$},
    ),
    'PlaceholderSpanIndexSemanticsTag': m.ClassMirror(
      'PlaceholderSpanIndexSemanticsTag',
      {
        '#as': PlaceholderSpanIndexSemanticsTag_as$,
        '#is': PlaceholderSpanIndexSemanticsTag_is$,
        'index': _PlaceholderSpanIndexSemanticsTag_index$,
        'hashCode': _PlaceholderSpanIndexSemanticsTag_hashCode$,
        '==': _PlaceholderSpanIndexSemanticsTag_eq$$,
      },
      {},
    ),
    'RenderParagraph': m.ClassMirror(
      'RenderParagraph',
      {
        '#as': RenderParagraph_as$,
        '#is': RenderParagraph_is$,
        'text': _RenderParagraph_text$,
        'selections': _RenderParagraph_selections$,
        'registrar': _RenderParagraph_registrar$,
        'textAlign': _RenderParagraph_textAlign$,
        'textDirection': _RenderParagraph_textDirection$,
        'softWrap': _RenderParagraph_softWrap$,
        'overflow': _RenderParagraph_overflow$,
        'textScaleFactor': _RenderParagraph_textScaleFactor$,
        'maxLines': _RenderParagraph_maxLines$,
        'locale': _RenderParagraph_locale$,
        'strutStyle': _RenderParagraph_strutStyle$,
        'textWidthBasis': _RenderParagraph_textWidthBasis$,
        'textHeightBehavior': _RenderParagraph_textHeightBehavior$,
        'selectionColor': _RenderParagraph_selectionColor$,
        'debugHasOverflowShader': _RenderParagraph_debugHasOverflowShader$,
        'textSize': _RenderParagraph_textSize$,
        'setupParentData': _RenderParagraph_setupParentData$,
        'markNeedsLayout': _RenderParagraph_markNeedsLayout$,
        'dispose': _RenderParagraph_dispose$,
        'computeMinIntrinsicWidth': _RenderParagraph_computeMinIntrinsicWidth$,
        'computeMaxIntrinsicWidth': _RenderParagraph_computeMaxIntrinsicWidth$,
        'computeMinIntrinsicHeight':
            _RenderParagraph_computeMinIntrinsicHeight$,
        'computeMaxIntrinsicHeight':
            _RenderParagraph_computeMaxIntrinsicHeight$,
        'computeDistanceToActualBaseline':
            _RenderParagraph_computeDistanceToActualBaseline$,
        'hitTestSelf': _RenderParagraph_hitTestSelf$,
        'hitTestChildren': _RenderParagraph_hitTestChildren$,
        'systemFontsDidChange': _RenderParagraph_systemFontsDidChange$,
        'computeDryLayout': _RenderParagraph_computeDryLayout$,
        'performLayout': _RenderParagraph_performLayout$,
        'paint': _RenderParagraph_paint$,
        'getOffsetForCaret': _RenderParagraph_getOffsetForCaret$,
        'getFullHeightForCaret': _RenderParagraph_getFullHeightForCaret$,
        'getBoxesForSelection': _RenderParagraph_getBoxesForSelection$,
        'getPositionForOffset': _RenderParagraph_getPositionForOffset$,
        'getWordBoundary': _RenderParagraph_getWordBoundary$,
        'describeSemanticsConfiguration':
            _RenderParagraph_describeSemanticsConfiguration$,
        'assembleSemanticsNode': _RenderParagraph_assembleSemanticsNode$,
        'clearSemantics': _RenderParagraph_clearSemantics$,
        'debugDescribeChildren': _RenderParagraph_debugDescribeChildren$,
        'debugFillProperties': _RenderParagraph_debugFillProperties$,
      },
      {
        'text': _RenderParagraph_text_set$,
        'registrar': _RenderParagraph_registrar_set$,
        'textAlign': _RenderParagraph_textAlign_set$,
        'textDirection': _RenderParagraph_textDirection_set$,
        'softWrap': _RenderParagraph_softWrap_set$,
        'overflow': _RenderParagraph_overflow_set$,
        'textScaleFactor': _RenderParagraph_textScaleFactor_set$,
        'maxLines': _RenderParagraph_maxLines_set$,
        'locale': _RenderParagraph_locale_set$,
        'strutStyle': _RenderParagraph_strutStyle_set$,
        'textWidthBasis': _RenderParagraph_textWidthBasis_set$,
        'textHeightBehavior': _RenderParagraph_textHeightBehavior_set$,
        'selectionColor': _RenderParagraph_selectionColor_set$,
      },
    ),
  },
);
Function TextParentData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextParentData;
Function TextParentData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextParentData;
Function _TextParentData_scale$(
  m.Scope scope$,
  TextParentData target$,
) =>
    () {
      return target$.scale;
    };
void _TextParentData_scale_set$(
  m.Scope scope$,
  TextParentData target$,
) =>
    (dynamic other$) {
      target$.scale = other$;
    };
Function _TextParentData__$(m.Scope scope$) => () {
      return TextParentData();
    };
Function _TextParentData_toString$(
  m.Scope scope$,
  TextParentData target$,
) =>
    target$.toString;
Function PlaceholderSpanIndexSemanticsTag_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PlaceholderSpanIndexSemanticsTag;
Function PlaceholderSpanIndexSemanticsTag_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PlaceholderSpanIndexSemanticsTag;
Function _PlaceholderSpanIndexSemanticsTag_index$(
  m.Scope scope$,
  PlaceholderSpanIndexSemanticsTag target$,
) =>
    () {
      return target$.index;
    };
Function _PlaceholderSpanIndexSemanticsTag_hashCode$(
  m.Scope scope$,
  PlaceholderSpanIndexSemanticsTag target$,
) =>
    () {
      return target$.hashCode;
    };
Function _PlaceholderSpanIndexSemanticsTag__$(m.Scope scope$) => (int index) {
      return PlaceholderSpanIndexSemanticsTag(index);
    };
Function _PlaceholderSpanIndexSemanticsTag_eq$$(
  m.Scope scope$,
  PlaceholderSpanIndexSemanticsTag target$,
) =>
    (Object other$) => target$ == other$;
Function RenderParagraph_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RenderParagraph;
Function RenderParagraph_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RenderParagraph;
Function _RenderParagraph_text$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    () {
      return target$.text;
    };
void _RenderParagraph_text_set$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    (dynamic other$) {
      target$.text = other$;
    };
Function _RenderParagraph_selections$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    () {
      return target$.selections;
    };
Function _RenderParagraph_registrar$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    () {
      return target$.registrar;
    };
void _RenderParagraph_registrar_set$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    (dynamic other$) {
      target$.registrar = other$;
    };
Function _RenderParagraph_textAlign$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    () {
      return target$.textAlign;
    };
void _RenderParagraph_textAlign_set$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    (dynamic other$) {
      target$.textAlign = other$;
    };
Function _RenderParagraph_textDirection$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    () {
      return target$.textDirection;
    };
void _RenderParagraph_textDirection_set$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    (dynamic other$) {
      target$.textDirection = other$;
    };
Function _RenderParagraph_softWrap$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    () {
      return target$.softWrap;
    };
void _RenderParagraph_softWrap_set$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    (dynamic other$) {
      target$.softWrap = other$;
    };
Function _RenderParagraph_overflow$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    () {
      return target$.overflow;
    };
void _RenderParagraph_overflow_set$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    (dynamic other$) {
      target$.overflow = other$;
    };
Function _RenderParagraph_textScaleFactor$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    () {
      return target$.textScaleFactor;
    };
void _RenderParagraph_textScaleFactor_set$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    (dynamic other$) {
      target$.textScaleFactor = other$;
    };
Function _RenderParagraph_maxLines$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    () {
      return target$.maxLines;
    };
void _RenderParagraph_maxLines_set$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    (dynamic other$) {
      target$.maxLines = other$;
    };
Function _RenderParagraph_locale$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    () {
      return target$.locale;
    };
void _RenderParagraph_locale_set$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    (dynamic other$) {
      target$.locale = other$;
    };
Function _RenderParagraph_strutStyle$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    () {
      return target$.strutStyle;
    };
void _RenderParagraph_strutStyle_set$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    (dynamic other$) {
      target$.strutStyle = other$;
    };
Function _RenderParagraph_textWidthBasis$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    () {
      return target$.textWidthBasis;
    };
void _RenderParagraph_textWidthBasis_set$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    (dynamic other$) {
      target$.textWidthBasis = other$;
    };
Function _RenderParagraph_textHeightBehavior$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    () {
      return target$.textHeightBehavior;
    };
void _RenderParagraph_textHeightBehavior_set$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    (dynamic other$) {
      target$.textHeightBehavior = other$;
    };
Function _RenderParagraph_selectionColor$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    () {
      return target$.selectionColor;
    };
void _RenderParagraph_selectionColor_set$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    (dynamic other$) {
      target$.selectionColor = other$;
    };
Function _RenderParagraph_debugHasOverflowShader$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    () {
      return target$.debugHasOverflowShader;
    };
Function _RenderParagraph_textSize$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    () {
      return target$.textSize;
    };
Function _RenderParagraph__$(m.Scope scope$) => (
      InlineSpan text, {
      TextAlign? textAlign,
      required TextDirection textDirection,
      bool? softWrap,
      TextOverflow? overflow,
      double? textScaleFactor,
      int? maxLines,
      Locale? locale,
      StrutStyle? strutStyle,
      TextWidthBasis? textWidthBasis,
      TextHeightBehavior? textHeightBehavior,
      List? children,
      Color? selectionColor,
      SelectionRegistrar? registrar,
    }) {
      return RenderParagraph(
        text,
        children: children == null ? null : List.from(children),
        locale: locale,
        maxLines: maxLines,
        overflow: overflow ?? TextOverflow.clip,
        registrar: registrar,
        selectionColor: selectionColor,
        softWrap: softWrap ?? true,
        strutStyle: strutStyle,
        textAlign: textAlign ?? TextAlign.start,
        textDirection: textDirection,
        textHeightBehavior: textHeightBehavior,
        textScaleFactor: textScaleFactor ?? 1.0,
        textWidthBasis: textWidthBasis ?? TextWidthBasis.parent,
      );
    };
Function _RenderParagraph_setupParentData$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    target$.setupParentData;
Function _RenderParagraph_markNeedsLayout$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    target$.markNeedsLayout;
Function _RenderParagraph_dispose$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    target$.dispose;
Function _RenderParagraph_computeMinIntrinsicWidth$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    target$.computeMinIntrinsicWidth;
Function _RenderParagraph_computeMaxIntrinsicWidth$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    target$.computeMaxIntrinsicWidth;
Function _RenderParagraph_computeMinIntrinsicHeight$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    target$.computeMinIntrinsicHeight;
Function _RenderParagraph_computeMaxIntrinsicHeight$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    target$.computeMaxIntrinsicHeight;
Function _RenderParagraph_computeDistanceToActualBaseline$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    target$.computeDistanceToActualBaseline;
Function _RenderParagraph_hitTestSelf$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    target$.hitTestSelf;
Function _RenderParagraph_hitTestChildren$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    target$.hitTestChildren;
Function _RenderParagraph_systemFontsDidChange$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    target$.systemFontsDidChange;
Function _RenderParagraph_computeDryLayout$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    target$.computeDryLayout;
Function _RenderParagraph_performLayout$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    target$.performLayout;
Function _RenderParagraph_paint$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    target$.paint;
Function _RenderParagraph_getOffsetForCaret$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    target$.getOffsetForCaret;
Function _RenderParagraph_getFullHeightForCaret$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    target$.getFullHeightForCaret;
Function _RenderParagraph_getBoxesForSelection$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    target$.getBoxesForSelection;
Function _RenderParagraph_getPositionForOffset$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    target$.getPositionForOffset;
Function _RenderParagraph_getWordBoundary$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    target$.getWordBoundary;
Function _RenderParagraph_describeSemanticsConfiguration$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    target$.describeSemanticsConfiguration;
Function _RenderParagraph_assembleSemanticsNode$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    target$.assembleSemanticsNode;
Function _RenderParagraph_clearSemantics$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    target$.clearSemantics;
Function _RenderParagraph_debugDescribeChildren$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    target$.debugDescribeChildren;
Function _RenderParagraph_debugFillProperties$(
  m.Scope scope$,
  RenderParagraph target$,
) =>
    target$.debugFillProperties;
