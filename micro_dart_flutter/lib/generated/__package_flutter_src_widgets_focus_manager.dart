// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/focus_manager.dart';
import 'dart:async';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/binding.dart';
import 'package:flutter/src/widgets/focus_scope.dart';
import 'package:flutter/src/widgets/focus_traversal.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/focus_manager.dart',
  {
    'debugFocusChanges': _debugFocusChanges$,
    'primaryFocus': _primaryFocus$,
    'FocusNode.': _FocusNode__$,
    'FocusNode.attach': _FocusNode_attach$,
    'FocusScopeNode.': _FocusScopeNode__$,
    'FocusManager.instance': _FocusManager_instance$,
    'FocusManager.': _FocusManager__$,
    'FocusManager.addHighlightModeListener':
        _FocusManager_addHighlightModeListener$,
    'FocusManager.removeHighlightModeListener':
        _FocusManager_removeHighlightModeListener$,
    'KeyEventResult.handled': _KeyEventResult_handled$,
    'KeyEventResult.ignored': _KeyEventResult_ignored$,
    'KeyEventResult.skipRemainingHandlers':
        _KeyEventResult_skipRemainingHandlers$,
    'KeyEventResult.values': _KeyEventResult_values$,
    'UnfocusDisposition.scope': _UnfocusDisposition_scope$,
    'UnfocusDisposition.previouslyFocusedChild':
        _UnfocusDisposition_previouslyFocusedChild$,
    'UnfocusDisposition.values': _UnfocusDisposition_values$,
    'FocusHighlightMode.touch': _FocusHighlightMode_touch$,
    'FocusHighlightMode.traditional': _FocusHighlightMode_traditional$,
    'FocusHighlightMode.values': _FocusHighlightMode_values$,
    'FocusHighlightStrategy.automatic': _FocusHighlightStrategy_automatic$,
    'FocusHighlightStrategy.alwaysTouch': _FocusHighlightStrategy_alwaysTouch$,
    'FocusHighlightStrategy.alwaysTraditional':
        _FocusHighlightStrategy_alwaysTraditional$,
    'FocusHighlightStrategy.values': _FocusHighlightStrategy_values$,
    'combineKeyEventResults': _combineKeyEventResults$,
    'debugDescribeFocusTree': _debugDescribeFocusTree$,
    'debugDumpFocusTree': _debugDumpFocusTree$,
  },
  {'debugFocusChanges': _debugFocusChanges_set$},
  {
    'FocusAttachment': m.ClassMirror(
      'FocusAttachment',
      {
        '#as': FocusAttachment_as$,
        '#is': FocusAttachment_is$,
        'isAttached': _FocusAttachment_isAttached$,
        'detach': _FocusAttachment_detach$,
        'reparent': _FocusAttachment_reparent$,
      },
      {},
    ),
    'FocusNode': m.ClassMirror(
      'FocusNode',
      {
        '#as': FocusNode_as$,
        '#is': FocusNode_is$,
        'onKey': _FocusNode_onKey$,
        'onKeyEvent': _FocusNode_onKeyEvent$,
        'skipTraversal': _FocusNode_skipTraversal$,
        'canRequestFocus': _FocusNode_canRequestFocus$,
        'descendantsAreFocusable': _FocusNode_descendantsAreFocusable$,
        'descendantsAreTraversable': _FocusNode_descendantsAreTraversable$,
        'context': _FocusNode_context$,
        'parent': _FocusNode_parent$,
        'children': _FocusNode_children$,
        'traversalChildren': _FocusNode_traversalChildren$,
        'debugLabel': _FocusNode_debugLabel$,
        'descendants': _FocusNode_descendants$,
        'traversalDescendants': _FocusNode_traversalDescendants$,
        'ancestors': _FocusNode_ancestors$,
        'hasFocus': _FocusNode_hasFocus$,
        'hasPrimaryFocus': _FocusNode_hasPrimaryFocus$,
        'highlightMode': _FocusNode_highlightMode$,
        'nearestScope': _FocusNode_nearestScope$,
        'enclosingScope': _FocusNode_enclosingScope$,
        'size': _FocusNode_size$,
        'offset': _FocusNode_offset$,
        'rect': _FocusNode_rect$,
        'unfocus': _FocusNode_unfocus$,
        'consumeKeyboardToken': _FocusNode_consumeKeyboardToken$,
        'dispose': _FocusNode_dispose$,
        'requestFocus': _FocusNode_requestFocus$,
        'nextFocus': _FocusNode_nextFocus$,
        'previousFocus': _FocusNode_previousFocus$,
        'focusInDirection': _FocusNode_focusInDirection$,
        'debugFillProperties': _FocusNode_debugFillProperties$,
        'debugDescribeChildren': _FocusNode_debugDescribeChildren$,
        'toStringShort': _FocusNode_toStringShort$,
      },
      {
        'onKey': _FocusNode_onKey_set$,
        'onKeyEvent': _FocusNode_onKeyEvent_set$,
        'skipTraversal': _FocusNode_skipTraversal_set$,
        'canRequestFocus': _FocusNode_canRequestFocus_set$,
        'descendantsAreFocusable': _FocusNode_descendantsAreFocusable_set$,
        'descendantsAreTraversable': _FocusNode_descendantsAreTraversable_set$,
        'debugLabel': _FocusNode_debugLabel_set$,
      },
    ),
    'FocusScopeNode': m.ClassMirror(
      'FocusScopeNode',
      {
        '#as': FocusScopeNode_as$,
        '#is': FocusScopeNode_is$,
        'traversalEdgeBehavior': _FocusScopeNode_traversalEdgeBehavior$,
        'nearestScope': _FocusScopeNode_nearestScope$,
        'isFirstFocus': _FocusScopeNode_isFirstFocus$,
        'focusedChild': _FocusScopeNode_focusedChild$,
        'traversalChildren': _FocusScopeNode_traversalChildren$,
        'traversalDescendants': _FocusScopeNode_traversalDescendants$,
        'setFirstFocus': _FocusScopeNode_setFirstFocus$,
        'autofocus': _FocusScopeNode_autofocus$,
        'debugFillProperties': _FocusScopeNode_debugFillProperties$,
      },
      {'traversalEdgeBehavior': _FocusScopeNode_traversalEdgeBehavior_set$},
    ),
    'FocusManager': m.ClassMirror(
      'FocusManager',
      {
        '#as': FocusManager_as$,
        '#is': FocusManager_is$,
        'rootScope': _FocusManager_rootScope$,
        'highlightStrategy': _FocusManager_highlightStrategy$,
        'highlightMode': _FocusManager_highlightMode$,
        'primaryFocus': _FocusManager_primaryFocus$,
        'registerGlobalHandlers': _FocusManager_registerGlobalHandlers$,
        'dispose': _FocusManager_dispose$,
        'debugDescribeChildren': _FocusManager_debugDescribeChildren$,
        'debugFillProperties': _FocusManager_debugFillProperties$,
      },
      {'highlightStrategy': _FocusManager_highlightStrategy_set$},
    ),
    'KeyEventResult': m.ClassMirror(
      'KeyEventResult',
      {},
      {},
    ),
    'UnfocusDisposition': m.ClassMirror(
      'UnfocusDisposition',
      {},
      {},
    ),
    'FocusHighlightMode': m.ClassMirror(
      'FocusHighlightMode',
      {},
      {},
    ),
    'FocusHighlightStrategy': m.ClassMirror(
      'FocusHighlightStrategy',
      {},
      {},
    ),
  },
);
bool _debugFocusChanges$() {
  return debugFocusChanges;
}

void _debugFocusChanges_set$(bool other$) {
  debugFocusChanges = other$;
}

FocusNode? _primaryFocus$() {
  return primaryFocus;
}

Function FocusAttachment_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FocusAttachment;
Function FocusAttachment_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FocusAttachment;
Function _FocusAttachment_isAttached$(
  m.Scope scope$,
  FocusAttachment target$,
) =>
    () {
      return target$.isAttached;
    };
Function _FocusAttachment_detach$(
  m.Scope scope$,
  FocusAttachment target$,
) =>
    target$.detach;
Function _FocusAttachment_reparent$(
  m.Scope scope$,
  FocusAttachment target$,
) =>
    target$.reparent;
Function FocusNode_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FocusNode;
Function FocusNode_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FocusNode;
Function _FocusNode_onKey$(
  m.Scope scope$,
  FocusNode target$,
) =>
    () {
      return target$.onKey;
    };
Function _FocusNode_onKey_set$(
  m.Scope scope$,
  FocusNode target$,
) =>
    (m.FunctionPointer? _onKey) {
      KeyEventResult _onKeyProxy(
        FocusNode _onKey_node$,
        RawKeyEvent _onKey_event$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            _onKey!,
            [
              _onKey_node$,
              _onKey_event$,
            ],
            {},
          );
      target$.onKey = (_onKey == null ? null : _onKeyProxy);
    };
Function _FocusNode_onKeyEvent$(
  m.Scope scope$,
  FocusNode target$,
) =>
    () {
      return target$.onKeyEvent;
    };
Function _FocusNode_onKeyEvent_set$(
  m.Scope scope$,
  FocusNode target$,
) =>
    (m.FunctionPointer? _onKeyEvent) {
      KeyEventResult _onKeyEventProxy(
        FocusNode _onKeyEvent_node$,
        KeyEvent _onKeyEvent_event$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            _onKeyEvent!,
            [
              _onKeyEvent_node$,
              _onKeyEvent_event$,
            ],
            {},
          );
      target$.onKeyEvent = (_onKeyEvent == null ? null : _onKeyEventProxy);
    };
Function _FocusNode_skipTraversal$(
  m.Scope scope$,
  FocusNode target$,
) =>
    () {
      return target$.skipTraversal;
    };
void _FocusNode_skipTraversal_set$(
  m.Scope scope$,
  FocusNode target$,
) =>
    (dynamic other$) {
      target$.skipTraversal = other$;
    };
Function _FocusNode_canRequestFocus$(
  m.Scope scope$,
  FocusNode target$,
) =>
    () {
      return target$.canRequestFocus;
    };
void _FocusNode_canRequestFocus_set$(
  m.Scope scope$,
  FocusNode target$,
) =>
    (dynamic other$) {
      target$.canRequestFocus = other$;
    };
Function _FocusNode_descendantsAreFocusable$(
  m.Scope scope$,
  FocusNode target$,
) =>
    () {
      return target$.descendantsAreFocusable;
    };
void _FocusNode_descendantsAreFocusable_set$(
  m.Scope scope$,
  FocusNode target$,
) =>
    (dynamic other$) {
      target$.descendantsAreFocusable = other$;
    };
Function _FocusNode_descendantsAreTraversable$(
  m.Scope scope$,
  FocusNode target$,
) =>
    () {
      return target$.descendantsAreTraversable;
    };
void _FocusNode_descendantsAreTraversable_set$(
  m.Scope scope$,
  FocusNode target$,
) =>
    (dynamic other$) {
      target$.descendantsAreTraversable = other$;
    };
Function _FocusNode_context$(
  m.Scope scope$,
  FocusNode target$,
) =>
    () {
      return target$.context;
    };
Function _FocusNode_parent$(
  m.Scope scope$,
  FocusNode target$,
) =>
    () {
      return target$.parent;
    };
Function _FocusNode_children$(
  m.Scope scope$,
  FocusNode target$,
) =>
    () {
      return target$.children;
    };
Function _FocusNode_traversalChildren$(
  m.Scope scope$,
  FocusNode target$,
) =>
    () {
      return target$.traversalChildren;
    };
Function _FocusNode_debugLabel$(
  m.Scope scope$,
  FocusNode target$,
) =>
    () {
      return target$.debugLabel;
    };
void _FocusNode_debugLabel_set$(
  m.Scope scope$,
  FocusNode target$,
) =>
    (dynamic other$) {
      target$.debugLabel = other$;
    };
Function _FocusNode_descendants$(
  m.Scope scope$,
  FocusNode target$,
) =>
    () {
      return target$.descendants;
    };
Function _FocusNode_traversalDescendants$(
  m.Scope scope$,
  FocusNode target$,
) =>
    () {
      return target$.traversalDescendants;
    };
Function _FocusNode_ancestors$(
  m.Scope scope$,
  FocusNode target$,
) =>
    () {
      return target$.ancestors;
    };
Function _FocusNode_hasFocus$(
  m.Scope scope$,
  FocusNode target$,
) =>
    () {
      return target$.hasFocus;
    };
Function _FocusNode_hasPrimaryFocus$(
  m.Scope scope$,
  FocusNode target$,
) =>
    () {
      return target$.hasPrimaryFocus;
    };
Function _FocusNode_highlightMode$(
  m.Scope scope$,
  FocusNode target$,
) =>
    () {
      return target$.highlightMode;
    };
Function _FocusNode_nearestScope$(
  m.Scope scope$,
  FocusNode target$,
) =>
    () {
      return target$.nearestScope;
    };
Function _FocusNode_enclosingScope$(
  m.Scope scope$,
  FocusNode target$,
) =>
    () {
      return target$.enclosingScope;
    };
Function _FocusNode_size$(
  m.Scope scope$,
  FocusNode target$,
) =>
    () {
      return target$.size;
    };
Function _FocusNode_offset$(
  m.Scope scope$,
  FocusNode target$,
) =>
    () {
      return target$.offset;
    };
Function _FocusNode_rect$(
  m.Scope scope$,
  FocusNode target$,
) =>
    () {
      return target$.rect;
    };
Function _FocusNode__$(m.Scope scope$) => ({
      String? debugLabel,
      m.FunctionPointer? onKey,
      m.FunctionPointer? onKeyEvent,
      bool? skipTraversal,
      bool? canRequestFocus,
      bool? descendantsAreFocusable,
      bool? descendantsAreTraversable,
    }) {
      KeyEventResult onKeyProxy(
        FocusNode onKey_node$,
        RawKeyEvent onKey_event$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onKey!,
            [
              onKey_node$,
              onKey_event$,
            ],
            {},
          );
      KeyEventResult onKeyEventProxy(
        FocusNode onKeyEvent_node$,
        KeyEvent onKeyEvent_event$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onKeyEvent!,
            [
              onKeyEvent_node$,
              onKeyEvent_event$,
            ],
            {},
          );
      return FocusNode(
        canRequestFocus: canRequestFocus ?? true,
        debugLabel: debugLabel,
        descendantsAreFocusable: descendantsAreFocusable ?? true,
        descendantsAreTraversable: descendantsAreTraversable ?? true,
        onKey: onKey == null ? null : onKeyProxy,
        onKeyEvent: onKeyEvent == null ? null : onKeyEventProxy,
        skipTraversal: skipTraversal ?? false,
      );
    };
Function _FocusNode_unfocus$(
  m.Scope scope$,
  FocusNode target$,
) =>
    target$.unfocus;
Function _FocusNode_consumeKeyboardToken$(
  m.Scope scope$,
  FocusNode target$,
) =>
    target$.consumeKeyboardToken;
Function _FocusNode_attach$(
  m.Scope scope$,
  FocusNode target$,
) =>
    (
      BuildContext? context, {
      m.FunctionPointer? onKeyEvent,
      m.FunctionPointer? onKey,
    }) {
      KeyEventResult onKeyProxy(
        FocusNode onKey_node$,
        RawKeyEvent onKey_event$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onKey!,
            [
              onKey_node$,
              onKey_event$,
            ],
            {},
          );
      KeyEventResult onKeyEventProxy(
        FocusNode onKeyEvent_node$,
        KeyEvent onKeyEvent_event$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onKeyEvent!,
            [
              onKeyEvent_node$,
              onKeyEvent_event$,
            ],
            {},
          );
      return target$.attach(
        context,
        onKey: onKey == null ? null : onKeyProxy,
        onKeyEvent: onKeyEvent == null ? null : onKeyEventProxy,
      );
    };
Function _FocusNode_dispose$(
  m.Scope scope$,
  FocusNode target$,
) =>
    target$.dispose;
Function _FocusNode_requestFocus$(
  m.Scope scope$,
  FocusNode target$,
) =>
    target$.requestFocus;
Function _FocusNode_nextFocus$(
  m.Scope scope$,
  FocusNode target$,
) =>
    target$.nextFocus;
Function _FocusNode_previousFocus$(
  m.Scope scope$,
  FocusNode target$,
) =>
    target$.previousFocus;
Function _FocusNode_focusInDirection$(
  m.Scope scope$,
  FocusNode target$,
) =>
    target$.focusInDirection;
Function _FocusNode_debugFillProperties$(
  m.Scope scope$,
  FocusNode target$,
) =>
    target$.debugFillProperties;
Function _FocusNode_debugDescribeChildren$(
  m.Scope scope$,
  FocusNode target$,
) =>
    target$.debugDescribeChildren;
Function _FocusNode_toStringShort$(
  m.Scope scope$,
  FocusNode target$,
) =>
    target$.toStringShort;
Function FocusScopeNode_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FocusScopeNode;
Function FocusScopeNode_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FocusScopeNode;
Function _FocusScopeNode_traversalEdgeBehavior$(
  m.Scope scope$,
  FocusScopeNode target$,
) =>
    () {
      return target$.traversalEdgeBehavior;
    };
void _FocusScopeNode_traversalEdgeBehavior_set$(
  m.Scope scope$,
  FocusScopeNode target$,
) =>
    (dynamic other$) {
      target$.traversalEdgeBehavior = other$;
    };
Function _FocusScopeNode_nearestScope$(
  m.Scope scope$,
  FocusScopeNode target$,
) =>
    () {
      return target$.nearestScope;
    };
Function _FocusScopeNode_isFirstFocus$(
  m.Scope scope$,
  FocusScopeNode target$,
) =>
    () {
      return target$.isFirstFocus;
    };
Function _FocusScopeNode_focusedChild$(
  m.Scope scope$,
  FocusScopeNode target$,
) =>
    () {
      return target$.focusedChild;
    };
Function _FocusScopeNode_traversalChildren$(
  m.Scope scope$,
  FocusScopeNode target$,
) =>
    () {
      return target$.traversalChildren;
    };
Function _FocusScopeNode_traversalDescendants$(
  m.Scope scope$,
  FocusScopeNode target$,
) =>
    () {
      return target$.traversalDescendants;
    };
Function _FocusScopeNode__$(m.Scope scope$) => ({
      String? debugLabel,
      m.FunctionPointer? onKeyEvent,
      m.FunctionPointer? onKey,
      bool? skipTraversal,
      bool? canRequestFocus,
      TraversalEdgeBehavior? traversalEdgeBehavior,
    }) {
      KeyEventResult onKeyProxy(
        FocusNode onKey_node$,
        RawKeyEvent onKey_event$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onKey!,
            [
              onKey_node$,
              onKey_event$,
            ],
            {},
          );
      KeyEventResult onKeyEventProxy(
        FocusNode onKeyEvent_node$,
        KeyEvent onKeyEvent_event$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onKeyEvent!,
            [
              onKeyEvent_node$,
              onKeyEvent_event$,
            ],
            {},
          );
      return FocusScopeNode(
        canRequestFocus: canRequestFocus ?? true,
        debugLabel: debugLabel,
        onKey: onKey == null ? null : onKeyProxy,
        onKeyEvent: onKeyEvent == null ? null : onKeyEventProxy,
        skipTraversal: skipTraversal ?? false,
        traversalEdgeBehavior:
            traversalEdgeBehavior ?? TraversalEdgeBehavior.closedLoop,
      );
    };
Function _FocusScopeNode_setFirstFocus$(
  m.Scope scope$,
  FocusScopeNode target$,
) =>
    target$.setFirstFocus;
Function _FocusScopeNode_autofocus$(
  m.Scope scope$,
  FocusScopeNode target$,
) =>
    target$.autofocus;
Function _FocusScopeNode_debugFillProperties$(
  m.Scope scope$,
  FocusScopeNode target$,
) =>
    target$.debugFillProperties;
Function FocusManager_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FocusManager;
Function FocusManager_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FocusManager;
Function _FocusManager_rootScope$(
  m.Scope scope$,
  FocusManager target$,
) =>
    () {
      return target$.rootScope;
    };
FocusManager _FocusManager_instance$() {
  return FocusManager.instance;
}

Function _FocusManager_highlightStrategy$(
  m.Scope scope$,
  FocusManager target$,
) =>
    () {
      return target$.highlightStrategy;
    };
void _FocusManager_highlightStrategy_set$(
  m.Scope scope$,
  FocusManager target$,
) =>
    (dynamic other$) {
      target$.highlightStrategy = other$;
    };
Function _FocusManager_highlightMode$(
  m.Scope scope$,
  FocusManager target$,
) =>
    () {
      return target$.highlightMode;
    };
Function _FocusManager_primaryFocus$(
  m.Scope scope$,
  FocusManager target$,
) =>
    () {
      return target$.primaryFocus;
    };
Function _FocusManager__$(m.Scope scope$) => () {
      return FocusManager();
    };
Function _FocusManager_registerGlobalHandlers$(
  m.Scope scope$,
  FocusManager target$,
) =>
    target$.registerGlobalHandlers;
Function _FocusManager_dispose$(
  m.Scope scope$,
  FocusManager target$,
) =>
    target$.dispose;
Function _FocusManager_addHighlightModeListener$(
  m.Scope scope$,
  FocusManager target$,
) =>
    (m.FunctionPointer listener) {
      void listenerProxy(FocusHighlightMode listener_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            listener,
            [listener_value$],
            {},
          );
      target$.addHighlightModeListener(listenerProxy);
    };
Function _FocusManager_removeHighlightModeListener$(
  m.Scope scope$,
  FocusManager target$,
) =>
    (m.FunctionPointer listener) {
      void listenerProxy(FocusHighlightMode listener_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            listener,
            [listener_value$],
            {},
          );
      target$.removeHighlightModeListener(listenerProxy);
    };
Function _FocusManager_debugDescribeChildren$(
  m.Scope scope$,
  FocusManager target$,
) =>
    target$.debugDescribeChildren;
Function _FocusManager_debugFillProperties$(
  m.Scope scope$,
  FocusManager target$,
) =>
    target$.debugFillProperties;
KeyEventResult _KeyEventResult_handled$() {
  return KeyEventResult.handled;
}

KeyEventResult _KeyEventResult_ignored$() {
  return KeyEventResult.ignored;
}

KeyEventResult _KeyEventResult_skipRemainingHandlers$() {
  return KeyEventResult.skipRemainingHandlers;
}

List<KeyEventResult> _KeyEventResult_values$() {
  return KeyEventResult.values;
}

UnfocusDisposition _UnfocusDisposition_scope$() {
  return UnfocusDisposition.scope;
}

UnfocusDisposition _UnfocusDisposition_previouslyFocusedChild$() {
  return UnfocusDisposition.previouslyFocusedChild;
}

List<UnfocusDisposition> _UnfocusDisposition_values$() {
  return UnfocusDisposition.values;
}

FocusHighlightMode _FocusHighlightMode_touch$() {
  return FocusHighlightMode.touch;
}

FocusHighlightMode _FocusHighlightMode_traditional$() {
  return FocusHighlightMode.traditional;
}

List<FocusHighlightMode> _FocusHighlightMode_values$() {
  return FocusHighlightMode.values;
}

FocusHighlightStrategy _FocusHighlightStrategy_automatic$() {
  return FocusHighlightStrategy.automatic;
}

FocusHighlightStrategy _FocusHighlightStrategy_alwaysTouch$() {
  return FocusHighlightStrategy.alwaysTouch;
}

FocusHighlightStrategy _FocusHighlightStrategy_alwaysTraditional$() {
  return FocusHighlightStrategy.alwaysTraditional;
}

List<FocusHighlightStrategy> _FocusHighlightStrategy_values$() {
  return FocusHighlightStrategy.values;
}

Function _combineKeyEventResults$(m.Scope scope$) => combineKeyEventResults;
Function _debugDescribeFocusTree$(m.Scope scope$) => debugDescribeFocusTree;
Function _debugDumpFocusTree$(m.Scope scope$) => debugDumpFocusTree;
