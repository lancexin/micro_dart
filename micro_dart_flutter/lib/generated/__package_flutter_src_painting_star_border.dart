// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/star_border.dart';
import 'dart:math';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:vector_math/vector_math_64.dart' show Matrix4;
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/painting/circle_border.dart';
import 'package:flutter/src/painting/rounded_rectangle_border.dart';
import 'package:flutter/src/painting/stadium_border.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/star_border.dart',
  {
    'StarBorder.': _StarBorder__$,
    'StarBorder.polygon': _StarBorder_polygon_$,
  },
  {},
  {
    'StarBorder': m.ClassMirror(
      'StarBorder',
      {
        '#as': StarBorder_as$,
        '#is': StarBorder_is$,
        'points': _StarBorder_points$,
        'pointRounding': _StarBorder_pointRounding$,
        'valleyRounding': _StarBorder_valleyRounding$,
        'squash': _StarBorder_squash$,
        'innerRadiusRatio': _StarBorder_innerRadiusRatio$,
        'rotation': _StarBorder_rotation$,
        'hashCode': _StarBorder_hashCode$,
        'scale': _StarBorder_scale$,
        'lerpFrom': _StarBorder_lerpFrom$,
        'lerpTo': _StarBorder_lerpTo$,
        'copyWith': _StarBorder_copyWith$,
        'getInnerPath': _StarBorder_getInnerPath$,
        'getOuterPath': _StarBorder_getOuterPath$,
        'paint': _StarBorder_paint$,
        '==': _StarBorder_eq$$,
        'toString': _StarBorder_toString$,
      },
      {},
    )
  },
);
Function StarBorder_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as StarBorder;
Function StarBorder_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is StarBorder;
Function _StarBorder_points$(
  m.Scope scope$,
  StarBorder target$,
) =>
    () {
      return target$.points;
    };
Function _StarBorder_pointRounding$(
  m.Scope scope$,
  StarBorder target$,
) =>
    () {
      return target$.pointRounding;
    };
Function _StarBorder_valleyRounding$(
  m.Scope scope$,
  StarBorder target$,
) =>
    () {
      return target$.valleyRounding;
    };
Function _StarBorder_squash$(
  m.Scope scope$,
  StarBorder target$,
) =>
    () {
      return target$.squash;
    };
Function _StarBorder_innerRadiusRatio$(
  m.Scope scope$,
  StarBorder target$,
) =>
    () {
      return target$.innerRadiusRatio;
    };
Function _StarBorder_rotation$(
  m.Scope scope$,
  StarBorder target$,
) =>
    () {
      return target$.rotation;
    };
Function _StarBorder_hashCode$(
  m.Scope scope$,
  StarBorder target$,
) =>
    () {
      return target$.hashCode;
    };
Function _StarBorder__$(m.Scope scope$) => ({
      BorderSide? side,
      double? points,
      double? innerRadiusRatio,
      double? pointRounding,
      double? valleyRounding,
      double? rotation,
      double? squash,
    }) {
      return StarBorder(
        innerRadiusRatio: innerRadiusRatio ?? 0.4,
        pointRounding: pointRounding ?? 0,
        points: points ?? 5,
        rotation: rotation ?? 0,
        side: side ?? BorderSide.none,
        squash: squash ?? 0,
        valleyRounding: valleyRounding ?? 0,
      );
    };
Function _StarBorder_polygon_$(m.Scope scope$) => StarBorder.polygon;
Function _StarBorder_scale$(
  m.Scope scope$,
  StarBorder target$,
) =>
    target$.scale;
Function _StarBorder_lerpFrom$(
  m.Scope scope$,
  StarBorder target$,
) =>
    target$.lerpFrom;
Function _StarBorder_lerpTo$(
  m.Scope scope$,
  StarBorder target$,
) =>
    target$.lerpTo;
Function _StarBorder_copyWith$(
  m.Scope scope$,
  StarBorder target$,
) =>
    target$.copyWith;
Function _StarBorder_getInnerPath$(
  m.Scope scope$,
  StarBorder target$,
) =>
    target$.getInnerPath;
Function _StarBorder_getOuterPath$(
  m.Scope scope$,
  StarBorder target$,
) =>
    target$.getOuterPath;
Function _StarBorder_paint$(
  m.Scope scope$,
  StarBorder target$,
) =>
    target$.paint;
Function _StarBorder_eq$$(
  m.Scope scope$,
  StarBorder target$,
) =>
    (Object other$) => target$ == other$;
Function _StarBorder_toString$(
  m.Scope scope$,
  StarBorder target$,
) =>
    target$.toString;
