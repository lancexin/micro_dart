// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/localizations.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/localizations.dart',
  {
    'WidgetsLocalizations.of': _WidgetsLocalizations_of$,
    'DefaultWidgetsLocalizations.delegate':
        _DefaultWidgetsLocalizations_delegate$,
    'DefaultWidgetsLocalizations.': _DefaultWidgetsLocalizations__$,
    'DefaultWidgetsLocalizations.load': _DefaultWidgetsLocalizations_load$,
    'Localizations.': _Localizations__$,
    'Localizations.override': _Localizations_override_$,
    'Localizations.localeOf': _Localizations_localeOf$,
    'Localizations.maybeLocaleOf': _Localizations_maybeLocaleOf$,
    'Localizations.of': _Localizations_of$,
  },
  {},
  {
    'LocalizationsDelegate': m.ClassMirror(
      'LocalizationsDelegate',
      {
        '#as': LocalizationsDelegate_as$,
        '#is': LocalizationsDelegate_is$,
        'type': _LocalizationsDelegate_type$,
        'isSupported': _LocalizationsDelegate_isSupported$,
        'load': _LocalizationsDelegate_load$,
        'shouldReload': _LocalizationsDelegate_shouldReload$,
        'toString': _LocalizationsDelegate_toString$,
      },
      {},
    ),
    'WidgetsLocalizations': m.ClassMirror(
      'WidgetsLocalizations',
      {
        '#as': WidgetsLocalizations_as$,
        '#is': WidgetsLocalizations_is$,
        'textDirection': _WidgetsLocalizations_textDirection$,
        'reorderItemToStart': _WidgetsLocalizations_reorderItemToStart$,
        'reorderItemToEnd': _WidgetsLocalizations_reorderItemToEnd$,
        'reorderItemUp': _WidgetsLocalizations_reorderItemUp$,
        'reorderItemDown': _WidgetsLocalizations_reorderItemDown$,
        'reorderItemLeft': _WidgetsLocalizations_reorderItemLeft$,
        'reorderItemRight': _WidgetsLocalizations_reorderItemRight$,
      },
      {},
    ),
    'DefaultWidgetsLocalizations': m.ClassMirror(
      'DefaultWidgetsLocalizations',
      {
        '#as': DefaultWidgetsLocalizations_as$,
        '#is': DefaultWidgetsLocalizations_is$,
        'reorderItemUp': _DefaultWidgetsLocalizations_reorderItemUp$,
        'reorderItemDown': _DefaultWidgetsLocalizations_reorderItemDown$,
        'reorderItemLeft': _DefaultWidgetsLocalizations_reorderItemLeft$,
        'reorderItemRight': _DefaultWidgetsLocalizations_reorderItemRight$,
        'reorderItemToEnd': _DefaultWidgetsLocalizations_reorderItemToEnd$,
        'reorderItemToStart': _DefaultWidgetsLocalizations_reorderItemToStart$,
        'textDirection': _DefaultWidgetsLocalizations_textDirection$,
      },
      {},
    ),
    'Localizations': m.ClassMirror(
      'Localizations',
      {
        '#as': Localizations_as$,
        '#is': Localizations_is$,
        'locale': _Localizations_locale$,
        'delegates': _Localizations_delegates$,
        'child': _Localizations_child$,
        'createState': _Localizations_createState$,
        'debugFillProperties': _Localizations_debugFillProperties$,
      },
      {},
    ),
  },
);
Function LocalizationsDelegate_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as LocalizationsDelegate<T>;
Function LocalizationsDelegate_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is LocalizationsDelegate<T>;
Function _LocalizationsDelegate_type$<T>(
  m.Scope scope$,
  LocalizationsDelegate<T> target$,
) =>
    () {
      return target$.type;
    };
Function _LocalizationsDelegate_isSupported$<T>(
  m.Scope scope$,
  LocalizationsDelegate<T> target$,
) =>
    target$.isSupported;
Function _LocalizationsDelegate_load$<T>(
  m.Scope scope$,
  LocalizationsDelegate<T> target$,
) =>
    target$.load;
Function _LocalizationsDelegate_shouldReload$<T>(
  m.Scope scope$,
  LocalizationsDelegate<T> target$,
) =>
    target$.shouldReload;
Function _LocalizationsDelegate_toString$<T>(
  m.Scope scope$,
  LocalizationsDelegate<T> target$,
) =>
    target$.toString;
Function WidgetsLocalizations_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as WidgetsLocalizations;
Function WidgetsLocalizations_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is WidgetsLocalizations;
Function _WidgetsLocalizations_textDirection$(
  m.Scope scope$,
  WidgetsLocalizations target$,
) =>
    () {
      return target$.textDirection;
    };
Function _WidgetsLocalizations_reorderItemToStart$(
  m.Scope scope$,
  WidgetsLocalizations target$,
) =>
    () {
      return target$.reorderItemToStart;
    };
Function _WidgetsLocalizations_reorderItemToEnd$(
  m.Scope scope$,
  WidgetsLocalizations target$,
) =>
    () {
      return target$.reorderItemToEnd;
    };
Function _WidgetsLocalizations_reorderItemUp$(
  m.Scope scope$,
  WidgetsLocalizations target$,
) =>
    () {
      return target$.reorderItemUp;
    };
Function _WidgetsLocalizations_reorderItemDown$(
  m.Scope scope$,
  WidgetsLocalizations target$,
) =>
    () {
      return target$.reorderItemDown;
    };
Function _WidgetsLocalizations_reorderItemLeft$(
  m.Scope scope$,
  WidgetsLocalizations target$,
) =>
    () {
      return target$.reorderItemLeft;
    };
Function _WidgetsLocalizations_reorderItemRight$(
  m.Scope scope$,
  WidgetsLocalizations target$,
) =>
    () {
      return target$.reorderItemRight;
    };
Function _WidgetsLocalizations_of$(m.Scope scope$) => WidgetsLocalizations.of;
Function DefaultWidgetsLocalizations_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DefaultWidgetsLocalizations;
Function DefaultWidgetsLocalizations_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DefaultWidgetsLocalizations;
Function _DefaultWidgetsLocalizations_delegate$(m.Scope scope$) =>
    () => DefaultWidgetsLocalizations.delegate;
Function _DefaultWidgetsLocalizations_reorderItemUp$(
  m.Scope scope$,
  DefaultWidgetsLocalizations target$,
) =>
    () {
      return target$.reorderItemUp;
    };
Function _DefaultWidgetsLocalizations_reorderItemDown$(
  m.Scope scope$,
  DefaultWidgetsLocalizations target$,
) =>
    () {
      return target$.reorderItemDown;
    };
Function _DefaultWidgetsLocalizations_reorderItemLeft$(
  m.Scope scope$,
  DefaultWidgetsLocalizations target$,
) =>
    () {
      return target$.reorderItemLeft;
    };
Function _DefaultWidgetsLocalizations_reorderItemRight$(
  m.Scope scope$,
  DefaultWidgetsLocalizations target$,
) =>
    () {
      return target$.reorderItemRight;
    };
Function _DefaultWidgetsLocalizations_reorderItemToEnd$(
  m.Scope scope$,
  DefaultWidgetsLocalizations target$,
) =>
    () {
      return target$.reorderItemToEnd;
    };
Function _DefaultWidgetsLocalizations_reorderItemToStart$(
  m.Scope scope$,
  DefaultWidgetsLocalizations target$,
) =>
    () {
      return target$.reorderItemToStart;
    };
Function _DefaultWidgetsLocalizations_textDirection$(
  m.Scope scope$,
  DefaultWidgetsLocalizations target$,
) =>
    () {
      return target$.textDirection;
    };
Function _DefaultWidgetsLocalizations__$(m.Scope scope$) => () {
      return DefaultWidgetsLocalizations();
    };
Function _DefaultWidgetsLocalizations_load$(m.Scope scope$) =>
    DefaultWidgetsLocalizations.load;
Function Localizations_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Localizations;
Function Localizations_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Localizations;
Function _Localizations_locale$(
  m.Scope scope$,
  Localizations target$,
) =>
    () {
      return target$.locale;
    };
Function _Localizations_delegates$(
  m.Scope scope$,
  Localizations target$,
) =>
    () {
      return target$.delegates;
    };
Function _Localizations_child$(
  m.Scope scope$,
  Localizations target$,
) =>
    () {
      return target$.child;
    };
Function _Localizations__$(m.Scope scope$) => ({
      Key? key,
      required Locale locale,
      required List delegates,
      Widget? child,
    }) {
      return Localizations(
        child: child,
        delegates: List.from(delegates),
        key: key,
        locale: locale,
      );
    };
Function _Localizations_override_$(m.Scope scope$) => Localizations.override;
Function _Localizations_localeOf$(m.Scope scope$) => Localizations.localeOf;
Function _Localizations_maybeLocaleOf$(m.Scope scope$) =>
    Localizations.maybeLocaleOf;
Function _Localizations_of$<T>(m.Scope scope$) => Localizations.of<T>;
Function _Localizations_createState$(
  m.Scope scope$,
  Localizations target$,
) =>
    target$.createState;
Function _Localizations_debugFillProperties$(
  m.Scope scope$,
  Localizations target$,
) =>
    target$.debugFillProperties;
