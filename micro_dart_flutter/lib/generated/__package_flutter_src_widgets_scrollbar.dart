// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/scrollbar.dart';
import 'dart:async';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/binding.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/gesture_detector.dart';
import 'package:flutter/src/widgets/media_query.dart';
import 'package:flutter/src/widgets/notification_listener.dart';
import 'package:flutter/src/widgets/primary_scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_metrics.dart';
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:flutter/src/widgets/scroll_position.dart';
import 'package:flutter/src/widgets/scrollable.dart';
import 'package:flutter/src/widgets/scrollable_helpers.dart';
import 'package:flutter/src/widgets/ticker_provider.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/scrollbar.dart',
  {
    'ScrollbarPainter.': _ScrollbarPainter__$,
    'RawScrollbar.': _RawScrollbar__$,
    'RawScrollbarState.': _RawScrollbarState__$,
    'ScrollbarOrientation.left': _ScrollbarOrientation_left$,
    'ScrollbarOrientation.right': _ScrollbarOrientation_right$,
    'ScrollbarOrientation.top': _ScrollbarOrientation_top$,
    'ScrollbarOrientation.bottom': _ScrollbarOrientation_bottom$,
    'ScrollbarOrientation.values': _ScrollbarOrientation_values$,
  },
  {},
  {
    'ScrollbarPainter': m.ClassMirror(
      'ScrollbarPainter',
      {
        '#as': ScrollbarPainter_as$,
        '#is': ScrollbarPainter_is$,
        'fadeoutOpacityAnimation': _ScrollbarPainter_fadeoutOpacityAnimation$,
        'color': _ScrollbarPainter_color$,
        'trackColor': _ScrollbarPainter_trackColor$,
        'trackBorderColor': _ScrollbarPainter_trackBorderColor$,
        'trackRadius': _ScrollbarPainter_trackRadius$,
        'textDirection': _ScrollbarPainter_textDirection$,
        'thickness': _ScrollbarPainter_thickness$,
        'mainAxisMargin': _ScrollbarPainter_mainAxisMargin$,
        'crossAxisMargin': _ScrollbarPainter_crossAxisMargin$,
        'radius': _ScrollbarPainter_radius$,
        'shape': _ScrollbarPainter_shape$,
        'padding': _ScrollbarPainter_padding$,
        'minLength': _ScrollbarPainter_minLength$,
        'minOverscrollLength': _ScrollbarPainter_minOverscrollLength$,
        'scrollbarOrientation': _ScrollbarPainter_scrollbarOrientation$,
        'ignorePointer': _ScrollbarPainter_ignorePointer$,
        'semanticsBuilder': _ScrollbarPainter_semanticsBuilder$,
        'update': _ScrollbarPainter_update$,
        'updateThickness': _ScrollbarPainter_updateThickness$,
        'paint': _ScrollbarPainter_paint$,
        'getTrackToScroll': _ScrollbarPainter_getTrackToScroll$,
        'getThumbScrollOffset': _ScrollbarPainter_getThumbScrollOffset$,
        'hitTest': _ScrollbarPainter_hitTest$,
        'hitTestInteractive': _ScrollbarPainter_hitTestInteractive$,
        'hitTestOnlyThumbInteractive':
            _ScrollbarPainter_hitTestOnlyThumbInteractive$,
        'shouldRepaint': _ScrollbarPainter_shouldRepaint$,
        'shouldRebuildSemantics': _ScrollbarPainter_shouldRebuildSemantics$,
        'toString': _ScrollbarPainter_toString$,
        'dispose': _ScrollbarPainter_dispose$,
      },
      {
        'color': _ScrollbarPainter_color_set$,
        'trackColor': _ScrollbarPainter_trackColor_set$,
        'trackBorderColor': _ScrollbarPainter_trackBorderColor_set$,
        'trackRadius': _ScrollbarPainter_trackRadius_set$,
        'textDirection': _ScrollbarPainter_textDirection_set$,
        'thickness': _ScrollbarPainter_thickness_set$,
        'mainAxisMargin': _ScrollbarPainter_mainAxisMargin_set$,
        'crossAxisMargin': _ScrollbarPainter_crossAxisMargin_set$,
        'radius': _ScrollbarPainter_radius_set$,
        'shape': _ScrollbarPainter_shape_set$,
        'padding': _ScrollbarPainter_padding_set$,
        'minLength': _ScrollbarPainter_minLength_set$,
        'minOverscrollLength': _ScrollbarPainter_minOverscrollLength_set$,
        'scrollbarOrientation': _ScrollbarPainter_scrollbarOrientation_set$,
        'ignorePointer': _ScrollbarPainter_ignorePointer_set$,
      },
    ),
    'RawScrollbar': m.ClassMirror(
      'RawScrollbar',
      {
        '#as': RawScrollbar_as$,
        '#is': RawScrollbar_is$,
        'child': _RawScrollbar_child$,
        'controller': _RawScrollbar_controller$,
        'thumbVisibility': _RawScrollbar_thumbVisibility$,
        'isAlwaysShown': _RawScrollbar_isAlwaysShown$,
        'shape': _RawScrollbar_shape$,
        'radius': _RawScrollbar_radius$,
        'thickness': _RawScrollbar_thickness$,
        'thumbColor': _RawScrollbar_thumbColor$,
        'minThumbLength': _RawScrollbar_minThumbLength$,
        'minOverscrollLength': _RawScrollbar_minOverscrollLength$,
        'trackVisibility': _RawScrollbar_trackVisibility$,
        'trackRadius': _RawScrollbar_trackRadius$,
        'trackColor': _RawScrollbar_trackColor$,
        'trackBorderColor': _RawScrollbar_trackBorderColor$,
        'fadeDuration': _RawScrollbar_fadeDuration$,
        'timeToFade': _RawScrollbar_timeToFade$,
        'pressDuration': _RawScrollbar_pressDuration$,
        'notificationPredicate': _RawScrollbar_notificationPredicate$,
        'interactive': _RawScrollbar_interactive$,
        'scrollbarOrientation': _RawScrollbar_scrollbarOrientation$,
        'mainAxisMargin': _RawScrollbar_mainAxisMargin$,
        'crossAxisMargin': _RawScrollbar_crossAxisMargin$,
        'padding': _RawScrollbar_padding$,
        'createState': _RawScrollbar_createState$,
      },
      {},
    ),
    'RawScrollbarState': m.ClassMirror(
      'RawScrollbarState',
      {
        '#as': RawScrollbarState_as$,
        '#is': RawScrollbarState_is$,
        'scrollbarPainter': _RawScrollbarState_scrollbarPainter$,
        'showScrollbar': _RawScrollbarState_showScrollbar$,
        'enableGestures': _RawScrollbarState_enableGestures$,
        'initState': _RawScrollbarState_initState$,
        'didChangeDependencies': _RawScrollbarState_didChangeDependencies$,
        'updateScrollbarPainter': _RawScrollbarState_updateScrollbarPainter$,
        'didUpdateWidget': _RawScrollbarState_didUpdateWidget$,
        'getScrollbarDirection': _RawScrollbarState_getScrollbarDirection$,
        'handleThumbPress': _RawScrollbarState_handleThumbPress$,
        'handleThumbPressStart': _RawScrollbarState_handleThumbPressStart$,
        'handleThumbPressUpdate': _RawScrollbarState_handleThumbPressUpdate$,
        'handleThumbPressEnd': _RawScrollbarState_handleThumbPressEnd$,
        'isPointerOverTrack': _RawScrollbarState_isPointerOverTrack$,
        'isPointerOverThumb': _RawScrollbarState_isPointerOverThumb$,
        'isPointerOverScrollbar': _RawScrollbarState_isPointerOverScrollbar$,
        'handleHover': _RawScrollbarState_handleHover$,
        'handleHoverExit': _RawScrollbarState_handleHoverExit$,
        'dispose': _RawScrollbarState_dispose$,
        'build': _RawScrollbarState_build$,
      },
      {'scrollbarPainter': _RawScrollbarState_scrollbarPainter_set$},
    ),
    'ScrollbarOrientation': m.ClassMirror(
      'ScrollbarOrientation',
      {},
      {},
    ),
  },
);
Function ScrollbarPainter_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ScrollbarPainter;
Function ScrollbarPainter_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ScrollbarPainter;
Function _ScrollbarPainter_fadeoutOpacityAnimation$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    () {
      return target$.fadeoutOpacityAnimation;
    };
Function _ScrollbarPainter_color$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    () {
      return target$.color;
    };
void _ScrollbarPainter_color_set$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    (dynamic other$) {
      target$.color = other$;
    };
Function _ScrollbarPainter_trackColor$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    () {
      return target$.trackColor;
    };
void _ScrollbarPainter_trackColor_set$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    (dynamic other$) {
      target$.trackColor = other$;
    };
Function _ScrollbarPainter_trackBorderColor$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    () {
      return target$.trackBorderColor;
    };
void _ScrollbarPainter_trackBorderColor_set$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    (dynamic other$) {
      target$.trackBorderColor = other$;
    };
Function _ScrollbarPainter_trackRadius$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    () {
      return target$.trackRadius;
    };
void _ScrollbarPainter_trackRadius_set$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    (dynamic other$) {
      target$.trackRadius = other$;
    };
Function _ScrollbarPainter_textDirection$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    () {
      return target$.textDirection;
    };
void _ScrollbarPainter_textDirection_set$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    (dynamic other$) {
      target$.textDirection = other$;
    };
Function _ScrollbarPainter_thickness$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    () {
      return target$.thickness;
    };
void _ScrollbarPainter_thickness_set$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    (dynamic other$) {
      target$.thickness = other$;
    };
Function _ScrollbarPainter_mainAxisMargin$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    () {
      return target$.mainAxisMargin;
    };
void _ScrollbarPainter_mainAxisMargin_set$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    (dynamic other$) {
      target$.mainAxisMargin = other$;
    };
Function _ScrollbarPainter_crossAxisMargin$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    () {
      return target$.crossAxisMargin;
    };
void _ScrollbarPainter_crossAxisMargin_set$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    (dynamic other$) {
      target$.crossAxisMargin = other$;
    };
Function _ScrollbarPainter_radius$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    () {
      return target$.radius;
    };
void _ScrollbarPainter_radius_set$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    (dynamic other$) {
      target$.radius = other$;
    };
Function _ScrollbarPainter_shape$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    () {
      return target$.shape;
    };
void _ScrollbarPainter_shape_set$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    (dynamic other$) {
      target$.shape = other$;
    };
Function _ScrollbarPainter_padding$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    () {
      return target$.padding;
    };
void _ScrollbarPainter_padding_set$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    (dynamic other$) {
      target$.padding = other$;
    };
Function _ScrollbarPainter_minLength$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    () {
      return target$.minLength;
    };
void _ScrollbarPainter_minLength_set$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    (dynamic other$) {
      target$.minLength = other$;
    };
Function _ScrollbarPainter_minOverscrollLength$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    () {
      return target$.minOverscrollLength;
    };
void _ScrollbarPainter_minOverscrollLength_set$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    (dynamic other$) {
      target$.minOverscrollLength = other$;
    };
Function _ScrollbarPainter_scrollbarOrientation$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    () {
      return target$.scrollbarOrientation;
    };
void _ScrollbarPainter_scrollbarOrientation_set$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    (dynamic other$) {
      target$.scrollbarOrientation = other$;
    };
Function _ScrollbarPainter_ignorePointer$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    () {
      return target$.ignorePointer;
    };
void _ScrollbarPainter_ignorePointer_set$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    (dynamic other$) {
      target$.ignorePointer = other$;
    };

const double _kMinThumbExtent = 18.0;
const double _kMinInteractiveSize = 48.0;
const double _kScrollbarThickness = 6.0;
const Duration _kScrollbarFadeDuration = Duration(milliseconds: 300);
const Duration _kScrollbarTimeToFade = Duration(milliseconds: 600);
Function _ScrollbarPainter_semanticsBuilder$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    () {
      return target$.semanticsBuilder;
    };
Function _ScrollbarPainter__$(m.Scope scope$) => ({
      required Color color,
      required Animation<double> fadeoutOpacityAnimation,
      Color? trackColor,
      Color? trackBorderColor,
      TextDirection? textDirection,
      double? thickness,
      EdgeInsets? padding,
      double? mainAxisMargin,
      double? crossAxisMargin,
      Radius? radius,
      Radius? trackRadius,
      OutlinedBorder? shape,
      double? minLength,
      double? minOverscrollLength,
      ScrollbarOrientation? scrollbarOrientation,
      bool? ignorePointer,
    }) {
      return ScrollbarPainter(
        color: color,
        crossAxisMargin: crossAxisMargin ?? 0.0,
        fadeoutOpacityAnimation: fadeoutOpacityAnimation,
        ignorePointer: ignorePointer ?? false,
        mainAxisMargin: mainAxisMargin ?? 0.0,
        minLength: minLength ?? _kMinThumbExtent,
        minOverscrollLength: minOverscrollLength,
        padding: padding ?? EdgeInsets.zero,
        radius: radius,
        scrollbarOrientation: scrollbarOrientation,
        shape: shape,
        textDirection: textDirection,
        thickness: thickness ?? _kScrollbarThickness,
        trackBorderColor: trackBorderColor ?? const Color(0x00000000),
        trackColor: trackColor ?? const Color(0x00000000),
        trackRadius: trackRadius,
      );
    };
Function _ScrollbarPainter_update$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    target$.update;
Function _ScrollbarPainter_updateThickness$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    target$.updateThickness;
Function _ScrollbarPainter_paint$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    target$.paint;
Function _ScrollbarPainter_getTrackToScroll$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    target$.getTrackToScroll;
Function _ScrollbarPainter_getThumbScrollOffset$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    target$.getThumbScrollOffset;
Function _ScrollbarPainter_hitTest$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    target$.hitTest;
Function _ScrollbarPainter_hitTestInteractive$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    target$.hitTestInteractive;
Function _ScrollbarPainter_hitTestOnlyThumbInteractive$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    target$.hitTestOnlyThumbInteractive;
Function _ScrollbarPainter_shouldRepaint$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    target$.shouldRepaint;
Function _ScrollbarPainter_shouldRebuildSemantics$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    target$.shouldRebuildSemantics;
Function _ScrollbarPainter_toString$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    target$.toString;
Function _ScrollbarPainter_dispose$(
  m.Scope scope$,
  ScrollbarPainter target$,
) =>
    target$.dispose;
Function RawScrollbar_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RawScrollbar;
Function RawScrollbar_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RawScrollbar;
Function _RawScrollbar_child$(
  m.Scope scope$,
  RawScrollbar target$,
) =>
    () {
      return target$.child;
    };
Function _RawScrollbar_controller$(
  m.Scope scope$,
  RawScrollbar target$,
) =>
    () {
      return target$.controller;
    };
Function _RawScrollbar_thumbVisibility$(
  m.Scope scope$,
  RawScrollbar target$,
) =>
    () {
      return target$.thumbVisibility;
    };
Function _RawScrollbar_isAlwaysShown$(
  m.Scope scope$,
  RawScrollbar target$,
) =>
    () {
      return target$.isAlwaysShown;
    };
Function _RawScrollbar_shape$(
  m.Scope scope$,
  RawScrollbar target$,
) =>
    () {
      return target$.shape;
    };
Function _RawScrollbar_radius$(
  m.Scope scope$,
  RawScrollbar target$,
) =>
    () {
      return target$.radius;
    };
Function _RawScrollbar_thickness$(
  m.Scope scope$,
  RawScrollbar target$,
) =>
    () {
      return target$.thickness;
    };
Function _RawScrollbar_thumbColor$(
  m.Scope scope$,
  RawScrollbar target$,
) =>
    () {
      return target$.thumbColor;
    };
Function _RawScrollbar_minThumbLength$(
  m.Scope scope$,
  RawScrollbar target$,
) =>
    () {
      return target$.minThumbLength;
    };
Function _RawScrollbar_minOverscrollLength$(
  m.Scope scope$,
  RawScrollbar target$,
) =>
    () {
      return target$.minOverscrollLength;
    };
Function _RawScrollbar_trackVisibility$(
  m.Scope scope$,
  RawScrollbar target$,
) =>
    () {
      return target$.trackVisibility;
    };
Function _RawScrollbar_trackRadius$(
  m.Scope scope$,
  RawScrollbar target$,
) =>
    () {
      return target$.trackRadius;
    };
Function _RawScrollbar_trackColor$(
  m.Scope scope$,
  RawScrollbar target$,
) =>
    () {
      return target$.trackColor;
    };
Function _RawScrollbar_trackBorderColor$(
  m.Scope scope$,
  RawScrollbar target$,
) =>
    () {
      return target$.trackBorderColor;
    };
Function _RawScrollbar_fadeDuration$(
  m.Scope scope$,
  RawScrollbar target$,
) =>
    () {
      return target$.fadeDuration;
    };
Function _RawScrollbar_timeToFade$(
  m.Scope scope$,
  RawScrollbar target$,
) =>
    () {
      return target$.timeToFade;
    };
Function _RawScrollbar_pressDuration$(
  m.Scope scope$,
  RawScrollbar target$,
) =>
    () {
      return target$.pressDuration;
    };
Function _RawScrollbar_notificationPredicate$(
  m.Scope scope$,
  RawScrollbar target$,
) =>
    () {
      return target$.notificationPredicate;
    };
Function _RawScrollbar_interactive$(
  m.Scope scope$,
  RawScrollbar target$,
) =>
    () {
      return target$.interactive;
    };
Function _RawScrollbar_scrollbarOrientation$(
  m.Scope scope$,
  RawScrollbar target$,
) =>
    () {
      return target$.scrollbarOrientation;
    };
Function _RawScrollbar_mainAxisMargin$(
  m.Scope scope$,
  RawScrollbar target$,
) =>
    () {
      return target$.mainAxisMargin;
    };
Function _RawScrollbar_crossAxisMargin$(
  m.Scope scope$,
  RawScrollbar target$,
) =>
    () {
      return target$.crossAxisMargin;
    };
Function _RawScrollbar_padding$(
  m.Scope scope$,
  RawScrollbar target$,
) =>
    () {
      return target$.padding;
    };
Function _RawScrollbar__$(m.Scope scope$) => ({
      Key? key,
      required Widget child,
      ScrollController? controller,
      bool? thumbVisibility,
      OutlinedBorder? shape,
      Radius? radius,
      double? thickness,
      Color? thumbColor,
      double? minThumbLength,
      double? minOverscrollLength,
      bool? trackVisibility,
      Radius? trackRadius,
      Color? trackColor,
      Color? trackBorderColor,
      Duration? fadeDuration,
      Duration? timeToFade,
      Duration? pressDuration,
      m.FunctionPointer? notificationPredicate,
      bool? interactive,
      ScrollbarOrientation? scrollbarOrientation,
      double? mainAxisMargin,
      double? crossAxisMargin,
      EdgeInsets? padding,
      bool? isAlwaysShown,
    }) {
      bool notificationPredicateProxy(
              ScrollNotification notificationPredicate_notification$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            notificationPredicate!,
            [notificationPredicate_notification$],
            {},
          );
      return RawScrollbar(
        child: child,
        controller: controller,
        crossAxisMargin: crossAxisMargin ?? 0.0,
        fadeDuration: fadeDuration ?? const Duration(milliseconds: 300),
        interactive: interactive,
        isAlwaysShown: isAlwaysShown,
        key: key,
        mainAxisMargin: mainAxisMargin ?? 0.0,
        minOverscrollLength: minOverscrollLength,
        minThumbLength: minThumbLength ?? 18.0,
        notificationPredicate: notificationPredicate == null
            ? defaultScrollNotificationPredicate
            : notificationPredicateProxy,
        padding: padding,
        pressDuration: pressDuration ?? Duration.zero,
        radius: radius,
        scrollbarOrientation: scrollbarOrientation,
        shape: shape,
        thickness: thickness,
        thumbColor: thumbColor,
        thumbVisibility: thumbVisibility,
        timeToFade: timeToFade ?? const Duration(milliseconds: 600),
        trackBorderColor: trackBorderColor,
        trackColor: trackColor,
        trackRadius: trackRadius,
        trackVisibility: trackVisibility,
      );
    };
Function _RawScrollbar_createState$(
  m.Scope scope$,
  RawScrollbar target$,
) =>
    target$.createState;
Function RawScrollbarState_as$<T extends RawScrollbar>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RawScrollbarState<T>;
Function RawScrollbarState_is$<T extends RawScrollbar>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RawScrollbarState<T>;
Function _RawScrollbarState_scrollbarPainter$<T extends RawScrollbar>(
  m.Scope scope$,
  RawScrollbarState<T> target$,
) =>
    () {
      return target$.scrollbarPainter;
    };
void _RawScrollbarState_scrollbarPainter_set$<T extends RawScrollbar>(
  m.Scope scope$,
  RawScrollbarState target$,
) =>
    (dynamic other$) {
      target$.scrollbarPainter = other$;
    };
Function _RawScrollbarState_showScrollbar$<T extends RawScrollbar>(
  m.Scope scope$,
  RawScrollbarState<T> target$,
) =>
    () {
      return target$.showScrollbar;
    };
Function _RawScrollbarState_enableGestures$<T extends RawScrollbar>(
  m.Scope scope$,
  RawScrollbarState<T> target$,
) =>
    () {
      return target$.enableGestures;
    };
Function _RawScrollbarState__$(m.Scope scope$) => <T extends RawScrollbar>() {
      return RawScrollbarState<T>();
    };
Function _RawScrollbarState_initState$<T extends RawScrollbar>(
  m.Scope scope$,
  RawScrollbarState<T> target$,
) =>
    target$.initState;
Function _RawScrollbarState_didChangeDependencies$<T extends RawScrollbar>(
  m.Scope scope$,
  RawScrollbarState<T> target$,
) =>
    target$.didChangeDependencies;
Function _RawScrollbarState_updateScrollbarPainter$<T extends RawScrollbar>(
  m.Scope scope$,
  RawScrollbarState<T> target$,
) =>
    target$.updateScrollbarPainter;
Function _RawScrollbarState_didUpdateWidget$<T extends RawScrollbar>(
  m.Scope scope$,
  RawScrollbarState<T> target$,
) =>
    target$.didUpdateWidget;
Function _RawScrollbarState_getScrollbarDirection$<T extends RawScrollbar>(
  m.Scope scope$,
  RawScrollbarState<T> target$,
) =>
    target$.getScrollbarDirection;
Function _RawScrollbarState_handleThumbPress$<T extends RawScrollbar>(
  m.Scope scope$,
  RawScrollbarState<T> target$,
) =>
    target$.handleThumbPress;
Function _RawScrollbarState_handleThumbPressStart$<T extends RawScrollbar>(
  m.Scope scope$,
  RawScrollbarState<T> target$,
) =>
    target$.handleThumbPressStart;
Function _RawScrollbarState_handleThumbPressUpdate$<T extends RawScrollbar>(
  m.Scope scope$,
  RawScrollbarState<T> target$,
) =>
    target$.handleThumbPressUpdate;
Function _RawScrollbarState_handleThumbPressEnd$<T extends RawScrollbar>(
  m.Scope scope$,
  RawScrollbarState<T> target$,
) =>
    target$.handleThumbPressEnd;
Function _RawScrollbarState_isPointerOverTrack$<T extends RawScrollbar>(
  m.Scope scope$,
  RawScrollbarState<T> target$,
) =>
    target$.isPointerOverTrack;
Function _RawScrollbarState_isPointerOverThumb$<T extends RawScrollbar>(
  m.Scope scope$,
  RawScrollbarState<T> target$,
) =>
    target$.isPointerOverThumb;
Function _RawScrollbarState_isPointerOverScrollbar$<T extends RawScrollbar>(
  m.Scope scope$,
  RawScrollbarState<T> target$,
) =>
    target$.isPointerOverScrollbar;
Function _RawScrollbarState_handleHover$<T extends RawScrollbar>(
  m.Scope scope$,
  RawScrollbarState<T> target$,
) =>
    target$.handleHover;
Function _RawScrollbarState_handleHoverExit$<T extends RawScrollbar>(
  m.Scope scope$,
  RawScrollbarState<T> target$,
) =>
    target$.handleHoverExit;
Function _RawScrollbarState_dispose$<T extends RawScrollbar>(
  m.Scope scope$,
  RawScrollbarState<T> target$,
) =>
    target$.dispose;
Function _RawScrollbarState_build$<T extends RawScrollbar>(
  m.Scope scope$,
  RawScrollbarState<T> target$,
) =>
    target$.build;
ScrollbarOrientation _ScrollbarOrientation_left$() {
  return ScrollbarOrientation.left;
}

ScrollbarOrientation _ScrollbarOrientation_right$() {
  return ScrollbarOrientation.right;
}

ScrollbarOrientation _ScrollbarOrientation_top$() {
  return ScrollbarOrientation.top;
}

ScrollbarOrientation _ScrollbarOrientation_bottom$() {
  return ScrollbarOrientation.bottom;
}

List<ScrollbarOrientation> _ScrollbarOrientation_values$() {
  return ScrollbarOrientation.values;
}
