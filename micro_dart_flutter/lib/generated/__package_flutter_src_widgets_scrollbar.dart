// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/scrollbar.dart';
import 'dart:async';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/binding.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/gesture_detector.dart';
import 'package:flutter/src/widgets/media_query.dart';
import 'package:flutter/src/widgets/notification_listener.dart';
import 'package:flutter/src/widgets/primary_scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_metrics.dart';
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:flutter/src/widgets/scroll_position.dart';
import 'package:flutter/src/widgets/scrollable.dart';
import 'package:flutter/src/widgets/scrollable_helpers.dart';
import 'package:flutter/src/widgets/ticker_provider.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/scrollbar.dart',
  {
    'ScrollbarOrientation.left': _ScrollbarOrientation_left$,
    'ScrollbarOrientation.right': _ScrollbarOrientation_right$,
    'ScrollbarOrientation.top': _ScrollbarOrientation_top$,
    'ScrollbarOrientation.bottom': _ScrollbarOrientation_bottom$,
    'ScrollbarOrientation.values': _ScrollbarOrientation_values$,
  },
  {},
  {
    'ScrollbarPainter': m.ClassMirror(
      'ScrollbarPainter',
      {
        '#as': ScrollbarPainter_as$,
        '#is': ScrollbarPainter_is$,
        'fadeoutOpacityAnimation': _ScrollbarPainter_fadeoutOpacityAnimation$,
        'color': _ScrollbarPainter_color$,
        'trackColor': _ScrollbarPainter_trackColor$,
        'trackBorderColor': _ScrollbarPainter_trackBorderColor$,
        'trackRadius': _ScrollbarPainter_trackRadius$,
        'textDirection': _ScrollbarPainter_textDirection$,
        'thickness': _ScrollbarPainter_thickness$,
        'mainAxisMargin': _ScrollbarPainter_mainAxisMargin$,
        'crossAxisMargin': _ScrollbarPainter_crossAxisMargin$,
        'radius': _ScrollbarPainter_radius$,
        'shape': _ScrollbarPainter_shape$,
        'padding': _ScrollbarPainter_padding$,
        'minLength': _ScrollbarPainter_minLength$,
        'minOverscrollLength': _ScrollbarPainter_minOverscrollLength$,
        'scrollbarOrientation': _ScrollbarPainter_scrollbarOrientation$,
        'ignorePointer': _ScrollbarPainter_ignorePointer$,
        'semanticsBuilder': _ScrollbarPainter_semanticsBuilder$,
        'update': _ScrollbarPainter_update$,
        'updateThickness': _ScrollbarPainter_updateThickness$,
        'paint': _ScrollbarPainter_paint$,
        'getTrackToScroll': _ScrollbarPainter_getTrackToScroll$,
        'getThumbScrollOffset': _ScrollbarPainter_getThumbScrollOffset$,
        'hitTest': _ScrollbarPainter_hitTest$,
        'hitTestInteractive': _ScrollbarPainter_hitTestInteractive$,
        'hitTestOnlyThumbInteractive':
            _ScrollbarPainter_hitTestOnlyThumbInteractive$,
        'shouldRepaint': _ScrollbarPainter_shouldRepaint$,
        'shouldRebuildSemantics': _ScrollbarPainter_shouldRebuildSemantics$,
        'toString': _ScrollbarPainter_toString$,
        'dispose': _ScrollbarPainter_dispose$,
      },
      {
        'color': _ScrollbarPainter_color_set$,
        'trackColor': _ScrollbarPainter_trackColor_set$,
        'trackBorderColor': _ScrollbarPainter_trackBorderColor_set$,
        'trackRadius': _ScrollbarPainter_trackRadius_set$,
        'textDirection': _ScrollbarPainter_textDirection_set$,
        'thickness': _ScrollbarPainter_thickness_set$,
        'mainAxisMargin': _ScrollbarPainter_mainAxisMargin_set$,
        'crossAxisMargin': _ScrollbarPainter_crossAxisMargin_set$,
        'radius': _ScrollbarPainter_radius_set$,
        'shape': _ScrollbarPainter_shape_set$,
        'padding': _ScrollbarPainter_padding_set$,
        'minLength': _ScrollbarPainter_minLength_set$,
        'minOverscrollLength': _ScrollbarPainter_minOverscrollLength_set$,
        'scrollbarOrientation': _ScrollbarPainter_scrollbarOrientation_set$,
        'ignorePointer': _ScrollbarPainter_ignorePointer_set$,
      },
    ),
    'RawScrollbar': m.ClassMirror(
      'RawScrollbar',
      {
        '#as': RawScrollbar_as$,
        '#is': RawScrollbar_is$,
        'child': _RawScrollbar_child$,
        'controller': _RawScrollbar_controller$,
        'thumbVisibility': _RawScrollbar_thumbVisibility$,
        'isAlwaysShown': _RawScrollbar_isAlwaysShown$,
        'shape': _RawScrollbar_shape$,
        'radius': _RawScrollbar_radius$,
        'thickness': _RawScrollbar_thickness$,
        'thumbColor': _RawScrollbar_thumbColor$,
        'minThumbLength': _RawScrollbar_minThumbLength$,
        'minOverscrollLength': _RawScrollbar_minOverscrollLength$,
        'trackVisibility': _RawScrollbar_trackVisibility$,
        'trackRadius': _RawScrollbar_trackRadius$,
        'trackColor': _RawScrollbar_trackColor$,
        'trackBorderColor': _RawScrollbar_trackBorderColor$,
        'fadeDuration': _RawScrollbar_fadeDuration$,
        'timeToFade': _RawScrollbar_timeToFade$,
        'pressDuration': _RawScrollbar_pressDuration$,
        'notificationPredicate': _RawScrollbar_notificationPredicate$,
        'interactive': _RawScrollbar_interactive$,
        'scrollbarOrientation': _RawScrollbar_scrollbarOrientation$,
        'mainAxisMargin': _RawScrollbar_mainAxisMargin$,
        'crossAxisMargin': _RawScrollbar_crossAxisMargin$,
        'padding': _RawScrollbar_padding$,
        'createState': _RawScrollbar_createState$,
      },
      {},
    ),
    'RawScrollbarState': m.ClassMirror(
      'RawScrollbarState',
      {
        '#as': RawScrollbarState_as$,
        '#is': RawScrollbarState_is$,
        'scrollbarPainter': _RawScrollbarState_scrollbarPainter$,
        'showScrollbar': _RawScrollbarState_showScrollbar$,
        'enableGestures': _RawScrollbarState_enableGestures$,
        'initState': _RawScrollbarState_initState$,
        'didChangeDependencies': _RawScrollbarState_didChangeDependencies$,
        'updateScrollbarPainter': _RawScrollbarState_updateScrollbarPainter$,
        'didUpdateWidget': _RawScrollbarState_didUpdateWidget$,
        'getScrollbarDirection': _RawScrollbarState_getScrollbarDirection$,
        'handleThumbPress': _RawScrollbarState_handleThumbPress$,
        'handleThumbPressStart': _RawScrollbarState_handleThumbPressStart$,
        'handleThumbPressUpdate': _RawScrollbarState_handleThumbPressUpdate$,
        'handleThumbPressEnd': _RawScrollbarState_handleThumbPressEnd$,
        'isPointerOverTrack': _RawScrollbarState_isPointerOverTrack$,
        'isPointerOverThumb': _RawScrollbarState_isPointerOverThumb$,
        'isPointerOverScrollbar': _RawScrollbarState_isPointerOverScrollbar$,
        'handleHover': _RawScrollbarState_handleHover$,
        'handleHoverExit': _RawScrollbarState_handleHoverExit$,
        'dispose': _RawScrollbarState_dispose$,
        'build': _RawScrollbarState_build$,
      },
      {'scrollbarPainter': _RawScrollbarState_scrollbarPainter_set$},
    ),
    'ScrollbarOrientation': m.ClassMirror(
      'ScrollbarOrientation',
      {},
      {},
    ),
  },
);
Function ScrollbarPainter_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ScrollbarPainter;
Function ScrollbarPainter_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ScrollbarPainter;
Animation<double> _ScrollbarPainter_fadeoutOpacityAnimation$(
    ScrollbarPainter target) {
  return target.fadeoutOpacityAnimation;
}

Color _ScrollbarPainter_color$(ScrollbarPainter target) {
  return target.color;
}

void _ScrollbarPainter_color_set$(
  ScrollbarPainter target,
  Color other,
) {
  target.color = other;
}

Color _ScrollbarPainter_trackColor$(ScrollbarPainter target) {
  return target.trackColor;
}

void _ScrollbarPainter_trackColor_set$(
  ScrollbarPainter target,
  Color other,
) {
  target.trackColor = other;
}

Color _ScrollbarPainter_trackBorderColor$(ScrollbarPainter target) {
  return target.trackBorderColor;
}

void _ScrollbarPainter_trackBorderColor_set$(
  ScrollbarPainter target,
  Color other,
) {
  target.trackBorderColor = other;
}

Radius? _ScrollbarPainter_trackRadius$(ScrollbarPainter target) {
  return target.trackRadius;
}

void _ScrollbarPainter_trackRadius_set$(
  ScrollbarPainter target,
  Radius? other,
) {
  target.trackRadius = other;
}

TextDirection? _ScrollbarPainter_textDirection$(ScrollbarPainter target) {
  return target.textDirection;
}

void _ScrollbarPainter_textDirection_set$(
  ScrollbarPainter target,
  TextDirection? other,
) {
  target.textDirection = other;
}

double _ScrollbarPainter_thickness$(ScrollbarPainter target) {
  return target.thickness;
}

void _ScrollbarPainter_thickness_set$(
  ScrollbarPainter target,
  double other,
) {
  target.thickness = other;
}

double _ScrollbarPainter_mainAxisMargin$(ScrollbarPainter target) {
  return target.mainAxisMargin;
}

void _ScrollbarPainter_mainAxisMargin_set$(
  ScrollbarPainter target,
  double other,
) {
  target.mainAxisMargin = other;
}

double _ScrollbarPainter_crossAxisMargin$(ScrollbarPainter target) {
  return target.crossAxisMargin;
}

void _ScrollbarPainter_crossAxisMargin_set$(
  ScrollbarPainter target,
  double other,
) {
  target.crossAxisMargin = other;
}

Radius? _ScrollbarPainter_radius$(ScrollbarPainter target) {
  return target.radius;
}

void _ScrollbarPainter_radius_set$(
  ScrollbarPainter target,
  Radius? other,
) {
  target.radius = other;
}

OutlinedBorder? _ScrollbarPainter_shape$(ScrollbarPainter target) {
  return target.shape;
}

void _ScrollbarPainter_shape_set$(
  ScrollbarPainter target,
  OutlinedBorder? other,
) {
  target.shape = other;
}

EdgeInsets _ScrollbarPainter_padding$(ScrollbarPainter target) {
  return target.padding;
}

void _ScrollbarPainter_padding_set$(
  ScrollbarPainter target,
  EdgeInsets other,
) {
  target.padding = other;
}

double _ScrollbarPainter_minLength$(ScrollbarPainter target) {
  return target.minLength;
}

void _ScrollbarPainter_minLength_set$(
  ScrollbarPainter target,
  double other,
) {
  target.minLength = other;
}

double _ScrollbarPainter_minOverscrollLength$(ScrollbarPainter target) {
  return target.minOverscrollLength;
}

void _ScrollbarPainter_minOverscrollLength_set$(
  ScrollbarPainter target,
  double other,
) {
  target.minOverscrollLength = other;
}

ScrollbarOrientation? _ScrollbarPainter_scrollbarOrientation$(
    ScrollbarPainter target) {
  return target.scrollbarOrientation;
}

void _ScrollbarPainter_scrollbarOrientation_set$(
  ScrollbarPainter target,
  ScrollbarOrientation? other,
) {
  target.scrollbarOrientation = other;
}

bool _ScrollbarPainter_ignorePointer$(ScrollbarPainter target) {
  return target.ignorePointer;
}

void _ScrollbarPainter_ignorePointer_set$(
  ScrollbarPainter target,
  bool other,
) {
  target.ignorePointer = other;
}

List<CustomPainterSemantics> Function(Size)?
    _ScrollbarPainter_semanticsBuilder$(ScrollbarPainter target) {
  return target.semanticsBuilder;
}

Function _ScrollbarPainter_update$(
  m.Scope scope,
  ScrollbarPainter target,
) =>
    target.update;
Function _ScrollbarPainter_updateThickness$(
  m.Scope scope,
  ScrollbarPainter target,
) =>
    target.updateThickness;
Function _ScrollbarPainter_paint$(
  m.Scope scope,
  ScrollbarPainter target,
) =>
    target.paint;
Function _ScrollbarPainter_getTrackToScroll$(
  m.Scope scope,
  ScrollbarPainter target,
) =>
    target.getTrackToScroll;
Function _ScrollbarPainter_getThumbScrollOffset$(
  m.Scope scope,
  ScrollbarPainter target,
) =>
    target.getThumbScrollOffset;
Function _ScrollbarPainter_hitTest$(
  m.Scope scope,
  ScrollbarPainter target,
) =>
    target.hitTest;
Function _ScrollbarPainter_hitTestInteractive$(
  m.Scope scope,
  ScrollbarPainter target,
) =>
    target.hitTestInteractive;
Function _ScrollbarPainter_hitTestOnlyThumbInteractive$(
  m.Scope scope,
  ScrollbarPainter target,
) =>
    target.hitTestOnlyThumbInteractive;
Function _ScrollbarPainter_shouldRepaint$(
  m.Scope scope,
  ScrollbarPainter target,
) =>
    target.shouldRepaint;
Function _ScrollbarPainter_shouldRebuildSemantics$(
  m.Scope scope,
  ScrollbarPainter target,
) =>
    target.shouldRebuildSemantics;
Function _ScrollbarPainter_toString$(
  m.Scope scope,
  ScrollbarPainter target,
) =>
    target.toString;
Function _ScrollbarPainter_dispose$(
  m.Scope scope,
  ScrollbarPainter target,
) =>
    target.dispose;
Function RawScrollbar_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RawScrollbar;
Function RawScrollbar_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RawScrollbar;
Widget _RawScrollbar_child$(RawScrollbar target) {
  return target.child;
}

ScrollController? _RawScrollbar_controller$(RawScrollbar target) {
  return target.controller;
}

bool? _RawScrollbar_thumbVisibility$(RawScrollbar target) {
  return target.thumbVisibility;
}

bool? _RawScrollbar_isAlwaysShown$(RawScrollbar target) {
  return target.isAlwaysShown;
}

OutlinedBorder? _RawScrollbar_shape$(RawScrollbar target) {
  return target.shape;
}

Radius? _RawScrollbar_radius$(RawScrollbar target) {
  return target.radius;
}

double? _RawScrollbar_thickness$(RawScrollbar target) {
  return target.thickness;
}

Color? _RawScrollbar_thumbColor$(RawScrollbar target) {
  return target.thumbColor;
}

double _RawScrollbar_minThumbLength$(RawScrollbar target) {
  return target.minThumbLength;
}

double? _RawScrollbar_minOverscrollLength$(RawScrollbar target) {
  return target.minOverscrollLength;
}

bool? _RawScrollbar_trackVisibility$(RawScrollbar target) {
  return target.trackVisibility;
}

Radius? _RawScrollbar_trackRadius$(RawScrollbar target) {
  return target.trackRadius;
}

Color? _RawScrollbar_trackColor$(RawScrollbar target) {
  return target.trackColor;
}

Color? _RawScrollbar_trackBorderColor$(RawScrollbar target) {
  return target.trackBorderColor;
}

Duration _RawScrollbar_fadeDuration$(RawScrollbar target) {
  return target.fadeDuration;
}

Duration _RawScrollbar_timeToFade$(RawScrollbar target) {
  return target.timeToFade;
}

Duration _RawScrollbar_pressDuration$(RawScrollbar target) {
  return target.pressDuration;
}

bool Function(ScrollNotification) _RawScrollbar_notificationPredicate$(
    RawScrollbar target) {
  return target.notificationPredicate;
}

bool? _RawScrollbar_interactive$(RawScrollbar target) {
  return target.interactive;
}

ScrollbarOrientation? _RawScrollbar_scrollbarOrientation$(RawScrollbar target) {
  return target.scrollbarOrientation;
}

double _RawScrollbar_mainAxisMargin$(RawScrollbar target) {
  return target.mainAxisMargin;
}

double _RawScrollbar_crossAxisMargin$(RawScrollbar target) {
  return target.crossAxisMargin;
}

EdgeInsets? _RawScrollbar_padding$(RawScrollbar target) {
  return target.padding;
}

Function _RawScrollbar_createState$(
  m.Scope scope,
  RawScrollbar target,
) =>
    target.createState;
Function RawScrollbarState_as$<T extends RawScrollbar>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RawScrollbarState<T>;
Function RawScrollbarState_is$<T extends RawScrollbar>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RawScrollbarState<T>;
ScrollbarPainter _RawScrollbarState_scrollbarPainter$<T extends RawScrollbar>(
    RawScrollbarState<T> target) {
  return target.scrollbarPainter;
}

void _RawScrollbarState_scrollbarPainter_set$<T extends RawScrollbar>(
  RawScrollbarState<T> target,
  ScrollbarPainter other,
) {
  target.scrollbarPainter = other;
}

bool _RawScrollbarState_showScrollbar$<T extends RawScrollbar>(
    RawScrollbarState<T> target) {
  return target.showScrollbar;
}

bool _RawScrollbarState_enableGestures$<T extends RawScrollbar>(
    RawScrollbarState<T> target) {
  return target.enableGestures;
}

Function _RawScrollbarState_initState$<T extends RawScrollbar>(
  m.Scope scope,
  RawScrollbarState<T> target,
) =>
    target.initState;
Function _RawScrollbarState_didChangeDependencies$<T extends RawScrollbar>(
  m.Scope scope,
  RawScrollbarState<T> target,
) =>
    target.didChangeDependencies;
Function _RawScrollbarState_updateScrollbarPainter$<T extends RawScrollbar>(
  m.Scope scope,
  RawScrollbarState<T> target,
) =>
    target.updateScrollbarPainter;
Function _RawScrollbarState_didUpdateWidget$<T extends RawScrollbar>(
  m.Scope scope,
  RawScrollbarState<T> target,
) =>
    target.didUpdateWidget;
Function _RawScrollbarState_getScrollbarDirection$<T extends RawScrollbar>(
  m.Scope scope,
  RawScrollbarState<T> target,
) =>
    target.getScrollbarDirection;
Function _RawScrollbarState_handleThumbPress$<T extends RawScrollbar>(
  m.Scope scope,
  RawScrollbarState<T> target,
) =>
    target.handleThumbPress;
Function _RawScrollbarState_handleThumbPressStart$<T extends RawScrollbar>(
  m.Scope scope,
  RawScrollbarState<T> target,
) =>
    target.handleThumbPressStart;
Function _RawScrollbarState_handleThumbPressUpdate$<T extends RawScrollbar>(
  m.Scope scope,
  RawScrollbarState<T> target,
) =>
    target.handleThumbPressUpdate;
Function _RawScrollbarState_handleThumbPressEnd$<T extends RawScrollbar>(
  m.Scope scope,
  RawScrollbarState<T> target,
) =>
    target.handleThumbPressEnd;
Function _RawScrollbarState_isPointerOverTrack$<T extends RawScrollbar>(
  m.Scope scope,
  RawScrollbarState<T> target,
) =>
    target.isPointerOverTrack;
Function _RawScrollbarState_isPointerOverThumb$<T extends RawScrollbar>(
  m.Scope scope,
  RawScrollbarState<T> target,
) =>
    target.isPointerOverThumb;
Function _RawScrollbarState_isPointerOverScrollbar$<T extends RawScrollbar>(
  m.Scope scope,
  RawScrollbarState<T> target,
) =>
    target.isPointerOverScrollbar;
Function _RawScrollbarState_handleHover$<T extends RawScrollbar>(
  m.Scope scope,
  RawScrollbarState<T> target,
) =>
    target.handleHover;
Function _RawScrollbarState_handleHoverExit$<T extends RawScrollbar>(
  m.Scope scope,
  RawScrollbarState<T> target,
) =>
    target.handleHoverExit;
Function _RawScrollbarState_dispose$<T extends RawScrollbar>(
  m.Scope scope,
  RawScrollbarState<T> target,
) =>
    target.dispose;
Function _RawScrollbarState_build$<T extends RawScrollbar>(
  m.Scope scope,
  RawScrollbarState<T> target,
) =>
    target.build;
ScrollbarOrientation _ScrollbarOrientation_left$() {
  return ScrollbarOrientation.left;
}

ScrollbarOrientation _ScrollbarOrientation_right$() {
  return ScrollbarOrientation.right;
}

ScrollbarOrientation _ScrollbarOrientation_top$() {
  return ScrollbarOrientation.top;
}

ScrollbarOrientation _ScrollbarOrientation_bottom$() {
  return ScrollbarOrientation.bottom;
}

List<ScrollbarOrientation> _ScrollbarOrientation_values$() {
  return ScrollbarOrientation.values;
}
