// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/physics/spring_simulation.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/physics/simulation.dart';
import 'package:flutter/src/physics/utils.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/physics/spring_simulation.dart',
  {
    'SpringType.criticallyDamped': _SpringType_criticallyDamped$,
    'SpringType.underDamped': _SpringType_underDamped$,
    'SpringType.overDamped': _SpringType_overDamped$,
    'SpringType.values': _SpringType_values$,
  },
  {},
  {
    'SpringDescription': m.ClassMirror(
      'SpringDescription',
      {
        '#as': SpringDescription_as$,
        '#is': SpringDescription_is$,
        'mass': _SpringDescription_mass$,
        'stiffness': _SpringDescription_stiffness$,
        'damping': _SpringDescription_damping$,
        'toString': _SpringDescription_toString$,
      },
      {},
    ),
    'SpringSimulation': m.ClassMirror(
      'SpringSimulation',
      {
        '#as': SpringSimulation_as$,
        '#is': SpringSimulation_is$,
        'type': _SpringSimulation_type$,
        'x': _SpringSimulation_x$,
        'dx': _SpringSimulation_dx$,
        'isDone': _SpringSimulation_isDone$,
        'toString': _SpringSimulation_toString$,
      },
      {},
    ),
    'ScrollSpringSimulation': m.ClassMirror(
      'ScrollSpringSimulation',
      {
        '#as': ScrollSpringSimulation_as$,
        '#is': ScrollSpringSimulation_is$,
        'x': _ScrollSpringSimulation_x$,
      },
      {},
    ),
    'SpringType': m.ClassMirror(
      'SpringType',
      {},
      {},
    ),
  },
);
Function SpringDescription_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SpringDescription;
Function SpringDescription_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SpringDescription;
double _SpringDescription_mass$(SpringDescription target) {
  return target.mass;
}

double _SpringDescription_stiffness$(SpringDescription target) {
  return target.stiffness;
}

double _SpringDescription_damping$(SpringDescription target) {
  return target.damping;
}

Function _SpringDescription_toString$(
  m.Scope scope,
  SpringDescription target,
) =>
    target.toString;
Function SpringSimulation_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SpringSimulation;
Function SpringSimulation_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SpringSimulation;
SpringType _SpringSimulation_type$(SpringSimulation target) {
  return target.type;
}

Function _SpringSimulation_x$(
  m.Scope scope,
  SpringSimulation target,
) =>
    target.x;
Function _SpringSimulation_dx$(
  m.Scope scope,
  SpringSimulation target,
) =>
    target.dx;
Function _SpringSimulation_isDone$(
  m.Scope scope,
  SpringSimulation target,
) =>
    target.isDone;
Function _SpringSimulation_toString$(
  m.Scope scope,
  SpringSimulation target,
) =>
    target.toString;
Function ScrollSpringSimulation_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ScrollSpringSimulation;
Function ScrollSpringSimulation_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ScrollSpringSimulation;
Function _ScrollSpringSimulation_x$(
  m.Scope scope,
  ScrollSpringSimulation target,
) =>
    target.x;
SpringType _SpringType_criticallyDamped$() {
  return SpringType.criticallyDamped;
}

SpringType _SpringType_underDamped$() {
  return SpringType.underDamped;
}

SpringType _SpringType_overDamped$() {
  return SpringType.overDamped;
}

List<SpringType> _SpringType_values$() {
  return SpringType.values;
}
