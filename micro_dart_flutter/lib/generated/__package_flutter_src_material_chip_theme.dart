// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/chip_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/chip_theme.dart',
  {
    'ChipTheme.of': _ChipTheme_of$,
    'ChipThemeData.lerp': _ChipThemeData_lerp$,
  },
  {},
  {
    'ChipTheme': m.ClassMirror(
      'ChipTheme',
      {
        '#as': ChipTheme_as$,
        '#is': ChipTheme_is$,
        'data': _ChipTheme_data$,
        'wrap': _ChipTheme_wrap$,
        'updateShouldNotify': _ChipTheme_updateShouldNotify$,
      },
      {},
    ),
    'ChipThemeData': m.ClassMirror(
      'ChipThemeData',
      {
        '#as': ChipThemeData_as$,
        '#is': ChipThemeData_is$,
        'backgroundColor': _ChipThemeData_backgroundColor$,
        'deleteIconColor': _ChipThemeData_deleteIconColor$,
        'disabledColor': _ChipThemeData_disabledColor$,
        'selectedColor': _ChipThemeData_selectedColor$,
        'secondarySelectedColor': _ChipThemeData_secondarySelectedColor$,
        'shadowColor': _ChipThemeData_shadowColor$,
        'surfaceTintColor': _ChipThemeData_surfaceTintColor$,
        'selectedShadowColor': _ChipThemeData_selectedShadowColor$,
        'showCheckmark': _ChipThemeData_showCheckmark$,
        'checkmarkColor': _ChipThemeData_checkmarkColor$,
        'labelPadding': _ChipThemeData_labelPadding$,
        'padding': _ChipThemeData_padding$,
        'side': _ChipThemeData_side$,
        'shape': _ChipThemeData_shape$,
        'labelStyle': _ChipThemeData_labelStyle$,
        'secondaryLabelStyle': _ChipThemeData_secondaryLabelStyle$,
        'brightness': _ChipThemeData_brightness$,
        'elevation': _ChipThemeData_elevation$,
        'pressElevation': _ChipThemeData_pressElevation$,
        'iconTheme': _ChipThemeData_iconTheme$,
        'hashCode': _ChipThemeData_hashCode$,
        'copyWith': _ChipThemeData_copyWith$,
        '==': _ChipThemeData_eq$$,
        'debugFillProperties': _ChipThemeData_debugFillProperties$,
      },
      {},
    ),
  },
);
Function ChipTheme_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ChipTheme;
Function ChipTheme_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ChipTheme;
ChipThemeData _ChipTheme_data$(ChipTheme target) {
  return target.data;
}

Function _ChipTheme_of$(m.Scope scope) => ChipTheme.of;
Function _ChipTheme_wrap$(
  m.Scope scope,
  ChipTheme target,
) =>
    target.wrap;
Function _ChipTheme_updateShouldNotify$(
  m.Scope scope,
  ChipTheme target,
) =>
    target.updateShouldNotify;
Function ChipThemeData_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ChipThemeData;
Function ChipThemeData_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ChipThemeData;
Color? _ChipThemeData_backgroundColor$(ChipThemeData target) {
  return target.backgroundColor;
}

Color? _ChipThemeData_deleteIconColor$(ChipThemeData target) {
  return target.deleteIconColor;
}

Color? _ChipThemeData_disabledColor$(ChipThemeData target) {
  return target.disabledColor;
}

Color? _ChipThemeData_selectedColor$(ChipThemeData target) {
  return target.selectedColor;
}

Color? _ChipThemeData_secondarySelectedColor$(ChipThemeData target) {
  return target.secondarySelectedColor;
}

Color? _ChipThemeData_shadowColor$(ChipThemeData target) {
  return target.shadowColor;
}

Color? _ChipThemeData_surfaceTintColor$(ChipThemeData target) {
  return target.surfaceTintColor;
}

Color? _ChipThemeData_selectedShadowColor$(ChipThemeData target) {
  return target.selectedShadowColor;
}

bool? _ChipThemeData_showCheckmark$(ChipThemeData target) {
  return target.showCheckmark;
}

Color? _ChipThemeData_checkmarkColor$(ChipThemeData target) {
  return target.checkmarkColor;
}

EdgeInsetsGeometry? _ChipThemeData_labelPadding$(ChipThemeData target) {
  return target.labelPadding;
}

EdgeInsetsGeometry? _ChipThemeData_padding$(ChipThemeData target) {
  return target.padding;
}

BorderSide? _ChipThemeData_side$(ChipThemeData target) {
  return target.side;
}

OutlinedBorder? _ChipThemeData_shape$(ChipThemeData target) {
  return target.shape;
}

TextStyle? _ChipThemeData_labelStyle$(ChipThemeData target) {
  return target.labelStyle;
}

TextStyle? _ChipThemeData_secondaryLabelStyle$(ChipThemeData target) {
  return target.secondaryLabelStyle;
}

Brightness? _ChipThemeData_brightness$(ChipThemeData target) {
  return target.brightness;
}

double? _ChipThemeData_elevation$(ChipThemeData target) {
  return target.elevation;
}

double? _ChipThemeData_pressElevation$(ChipThemeData target) {
  return target.pressElevation;
}

IconThemeData? _ChipThemeData_iconTheme$(ChipThemeData target) {
  return target.iconTheme;
}

int _ChipThemeData_hashCode$(ChipThemeData target) {
  return target.hashCode;
}

Function _ChipThemeData_copyWith$(
  m.Scope scope,
  ChipThemeData target,
) =>
    target.copyWith;
Function _ChipThemeData_lerp$(m.Scope scope) => ChipThemeData.lerp;
Function _ChipThemeData_eq$$(
  m.Scope scope,
  ChipThemeData target,
) =>
    (Object other) => target == other;
Function _ChipThemeData_debugFillProperties$(
  m.Scope scope,
  ChipThemeData target,
) =>
    target.debugFillProperties;
