// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/chip_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/chip_theme.dart',
  {
    'ChipTheme.': _ChipTheme__$,
    'ChipTheme.of': _ChipTheme_of$,
    'ChipThemeData.': _ChipThemeData__$,
    'ChipThemeData.fromDefaults': _ChipThemeData_fromDefaults_$,
    'ChipThemeData.lerp': _ChipThemeData_lerp$,
  },
  {},
  {
    'ChipTheme': m.ClassMirror(
      'ChipTheme',
      {
        '#as': ChipTheme_as$,
        '#is': ChipTheme_is$,
        'data': _ChipTheme_data$,
        'wrap': _ChipTheme_wrap$,
        'updateShouldNotify': _ChipTheme_updateShouldNotify$,
      },
      {},
    ),
    'ChipThemeData': m.ClassMirror(
      'ChipThemeData',
      {
        '#as': ChipThemeData_as$,
        '#is': ChipThemeData_is$,
        'backgroundColor': _ChipThemeData_backgroundColor$,
        'deleteIconColor': _ChipThemeData_deleteIconColor$,
        'disabledColor': _ChipThemeData_disabledColor$,
        'selectedColor': _ChipThemeData_selectedColor$,
        'secondarySelectedColor': _ChipThemeData_secondarySelectedColor$,
        'shadowColor': _ChipThemeData_shadowColor$,
        'surfaceTintColor': _ChipThemeData_surfaceTintColor$,
        'selectedShadowColor': _ChipThemeData_selectedShadowColor$,
        'showCheckmark': _ChipThemeData_showCheckmark$,
        'checkmarkColor': _ChipThemeData_checkmarkColor$,
        'labelPadding': _ChipThemeData_labelPadding$,
        'padding': _ChipThemeData_padding$,
        'side': _ChipThemeData_side$,
        'shape': _ChipThemeData_shape$,
        'labelStyle': _ChipThemeData_labelStyle$,
        'secondaryLabelStyle': _ChipThemeData_secondaryLabelStyle$,
        'brightness': _ChipThemeData_brightness$,
        'elevation': _ChipThemeData_elevation$,
        'pressElevation': _ChipThemeData_pressElevation$,
        'iconTheme': _ChipThemeData_iconTheme$,
        'hashCode': _ChipThemeData_hashCode$,
        'copyWith': _ChipThemeData_copyWith$,
        '==': _ChipThemeData_eq$$,
        'debugFillProperties': _ChipThemeData_debugFillProperties$,
      },
      {},
    ),
  },
);
Function ChipTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ChipTheme;
Function ChipTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ChipTheme;
Function _ChipTheme_data$(
  m.Scope scope$,
  ChipTheme target$,
) =>
    () {
      return target$.data;
    };
Function _ChipTheme__$(m.Scope scope$) => ({
      Key? key,
      required ChipThemeData data,
      required Widget child,
    }) {
      return ChipTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _ChipTheme_of$(m.Scope scope$) => ChipTheme.of;
Function _ChipTheme_wrap$(
  m.Scope scope$,
  ChipTheme target$,
) =>
    target$.wrap;
Function _ChipTheme_updateShouldNotify$(
  m.Scope scope$,
  ChipTheme target$,
) =>
    target$.updateShouldNotify;
Function ChipThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ChipThemeData;
Function ChipThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ChipThemeData;
Function _ChipThemeData_backgroundColor$(
  m.Scope scope$,
  ChipThemeData target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _ChipThemeData_deleteIconColor$(
  m.Scope scope$,
  ChipThemeData target$,
) =>
    () {
      return target$.deleteIconColor;
    };
Function _ChipThemeData_disabledColor$(
  m.Scope scope$,
  ChipThemeData target$,
) =>
    () {
      return target$.disabledColor;
    };
Function _ChipThemeData_selectedColor$(
  m.Scope scope$,
  ChipThemeData target$,
) =>
    () {
      return target$.selectedColor;
    };
Function _ChipThemeData_secondarySelectedColor$(
  m.Scope scope$,
  ChipThemeData target$,
) =>
    () {
      return target$.secondarySelectedColor;
    };
Function _ChipThemeData_shadowColor$(
  m.Scope scope$,
  ChipThemeData target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _ChipThemeData_surfaceTintColor$(
  m.Scope scope$,
  ChipThemeData target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _ChipThemeData_selectedShadowColor$(
  m.Scope scope$,
  ChipThemeData target$,
) =>
    () {
      return target$.selectedShadowColor;
    };
Function _ChipThemeData_showCheckmark$(
  m.Scope scope$,
  ChipThemeData target$,
) =>
    () {
      return target$.showCheckmark;
    };
Function _ChipThemeData_checkmarkColor$(
  m.Scope scope$,
  ChipThemeData target$,
) =>
    () {
      return target$.checkmarkColor;
    };
Function _ChipThemeData_labelPadding$(
  m.Scope scope$,
  ChipThemeData target$,
) =>
    () {
      return target$.labelPadding;
    };
Function _ChipThemeData_padding$(
  m.Scope scope$,
  ChipThemeData target$,
) =>
    () {
      return target$.padding;
    };
Function _ChipThemeData_side$(
  m.Scope scope$,
  ChipThemeData target$,
) =>
    () {
      return target$.side;
    };
Function _ChipThemeData_shape$(
  m.Scope scope$,
  ChipThemeData target$,
) =>
    () {
      return target$.shape;
    };
Function _ChipThemeData_labelStyle$(
  m.Scope scope$,
  ChipThemeData target$,
) =>
    () {
      return target$.labelStyle;
    };
Function _ChipThemeData_secondaryLabelStyle$(
  m.Scope scope$,
  ChipThemeData target$,
) =>
    () {
      return target$.secondaryLabelStyle;
    };
Function _ChipThemeData_brightness$(
  m.Scope scope$,
  ChipThemeData target$,
) =>
    () {
      return target$.brightness;
    };
Function _ChipThemeData_elevation$(
  m.Scope scope$,
  ChipThemeData target$,
) =>
    () {
      return target$.elevation;
    };
Function _ChipThemeData_pressElevation$(
  m.Scope scope$,
  ChipThemeData target$,
) =>
    () {
      return target$.pressElevation;
    };
Function _ChipThemeData_iconTheme$(
  m.Scope scope$,
  ChipThemeData target$,
) =>
    () {
      return target$.iconTheme;
    };
Function _ChipThemeData_hashCode$(
  m.Scope scope$,
  ChipThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _ChipThemeData__$(m.Scope scope$) => ({
      Color? backgroundColor,
      Color? deleteIconColor,
      Color? disabledColor,
      Color? selectedColor,
      Color? secondarySelectedColor,
      Color? shadowColor,
      Color? surfaceTintColor,
      Color? selectedShadowColor,
      bool? showCheckmark,
      Color? checkmarkColor,
      EdgeInsetsGeometry? labelPadding,
      EdgeInsetsGeometry? padding,
      BorderSide? side,
      OutlinedBorder? shape,
      TextStyle? labelStyle,
      TextStyle? secondaryLabelStyle,
      Brightness? brightness,
      double? elevation,
      double? pressElevation,
      IconThemeData? iconTheme,
    }) {
      return ChipThemeData(
        backgroundColor: backgroundColor,
        brightness: brightness,
        checkmarkColor: checkmarkColor,
        deleteIconColor: deleteIconColor,
        disabledColor: disabledColor,
        elevation: elevation,
        iconTheme: iconTheme,
        labelPadding: labelPadding,
        labelStyle: labelStyle,
        padding: padding,
        pressElevation: pressElevation,
        secondaryLabelStyle: secondaryLabelStyle,
        secondarySelectedColor: secondarySelectedColor,
        selectedColor: selectedColor,
        selectedShadowColor: selectedShadowColor,
        shadowColor: shadowColor,
        shape: shape,
        showCheckmark: showCheckmark,
        side: side,
        surfaceTintColor: surfaceTintColor,
      );
    };
Function _ChipThemeData_fromDefaults_$(m.Scope scope$) =>
    ChipThemeData.fromDefaults;
Function _ChipThemeData_copyWith$(
  m.Scope scope$,
  ChipThemeData target$,
) =>
    target$.copyWith;
Function _ChipThemeData_lerp$(m.Scope scope$) => ChipThemeData.lerp;
Function _ChipThemeData_eq$$(
  m.Scope scope$,
  ChipThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _ChipThemeData_debugFillProperties$(
  m.Scope scope$,
  ChipThemeData target$,
) =>
    target$.debugFillProperties;
