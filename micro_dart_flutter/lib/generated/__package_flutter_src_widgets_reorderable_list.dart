// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/reorderable_list.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/inherited_theme.dart';
import 'package:flutter/src/widgets/media_query.dart';
import 'package:flutter/src/widgets/overlay.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_delegate.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/scroll_view.dart';
import 'package:flutter/src/widgets/scrollable.dart';
import 'package:flutter/src/widgets/scrollable_helpers.dart';
import 'package:flutter/src/widgets/sliver.dart';
import 'package:flutter/src/widgets/sliver_prototype_extent_list.dart';
import 'package:flutter/src/widgets/ticker_provider.dart';
import 'package:flutter/src/widgets/transitions.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/reorderable_list.dart',
  {
    'ReorderableList.': _ReorderableList__$,
    'ReorderableList.of': _ReorderableList_of$,
    'ReorderableList.maybeOf': _ReorderableList_maybeOf$,
    'ReorderableListState.': _ReorderableListState__$,
    'SliverReorderableList.': _SliverReorderableList__$,
    'SliverReorderableList.of': _SliverReorderableList_of$,
    'SliverReorderableList.maybeOf': _SliverReorderableList_maybeOf$,
    'SliverReorderableListState.': _SliverReorderableListState__$,
    'ReorderableDragStartListener.': _ReorderableDragStartListener__$,
    'ReorderableDelayedDragStartListener.':
        _ReorderableDelayedDragStartListener__$,
  },
  {},
  {
    'ReorderableList': m.ClassMirror(
      'ReorderableList',
      {
        '#as': ReorderableList_as$,
        '#is': ReorderableList_is$,
        'itemBuilder': _ReorderableList_itemBuilder$,
        'itemCount': _ReorderableList_itemCount$,
        'onReorder': _ReorderableList_onReorder$,
        'onReorderStart': _ReorderableList_onReorderStart$,
        'onReorderEnd': _ReorderableList_onReorderEnd$,
        'proxyDecorator': _ReorderableList_proxyDecorator$,
        'padding': _ReorderableList_padding$,
        'scrollDirection': _ReorderableList_scrollDirection$,
        'reverse': _ReorderableList_reverse$,
        'controller': _ReorderableList_controller$,
        'primary': _ReorderableList_primary$,
        'physics': _ReorderableList_physics$,
        'shrinkWrap': _ReorderableList_shrinkWrap$,
        'anchor': _ReorderableList_anchor$,
        'cacheExtent': _ReorderableList_cacheExtent$,
        'dragStartBehavior': _ReorderableList_dragStartBehavior$,
        'keyboardDismissBehavior': _ReorderableList_keyboardDismissBehavior$,
        'restorationId': _ReorderableList_restorationId$,
        'clipBehavior': _ReorderableList_clipBehavior$,
        'itemExtent': _ReorderableList_itemExtent$,
        'prototypeItem': _ReorderableList_prototypeItem$,
        'createState': _ReorderableList_createState$,
      },
      {},
    ),
    'ReorderableListState': m.ClassMirror(
      'ReorderableListState',
      {
        '#as': ReorderableListState_as$,
        '#is': ReorderableListState_is$,
        'startItemDragReorder': _ReorderableListState_startItemDragReorder$,
        'cancelReorder': _ReorderableListState_cancelReorder$,
        'build': _ReorderableListState_build$,
      },
      {},
    ),
    'SliverReorderableList': m.ClassMirror(
      'SliverReorderableList',
      {
        '#as': SliverReorderableList_as$,
        '#is': SliverReorderableList_is$,
        'itemBuilder': _SliverReorderableList_itemBuilder$,
        'findChildIndexCallback':
            _SliverReorderableList_findChildIndexCallback$,
        'itemCount': _SliverReorderableList_itemCount$,
        'onReorder': _SliverReorderableList_onReorder$,
        'onReorderStart': _SliverReorderableList_onReorderStart$,
        'onReorderEnd': _SliverReorderableList_onReorderEnd$,
        'proxyDecorator': _SliverReorderableList_proxyDecorator$,
        'itemExtent': _SliverReorderableList_itemExtent$,
        'prototypeItem': _SliverReorderableList_prototypeItem$,
        'createState': _SliverReorderableList_createState$,
      },
      {},
    ),
    'SliverReorderableListState': m.ClassMirror(
      'SliverReorderableListState',
      {
        '#as': SliverReorderableListState_as$,
        '#is': SliverReorderableListState_is$,
        'didChangeDependencies':
            _SliverReorderableListState_didChangeDependencies$,
        'didUpdateWidget': _SliverReorderableListState_didUpdateWidget$,
        'dispose': _SliverReorderableListState_dispose$,
        'startItemDragReorder':
            _SliverReorderableListState_startItemDragReorder$,
        'cancelReorder': _SliverReorderableListState_cancelReorder$,
        'build': _SliverReorderableListState_build$,
      },
      {},
    ),
    'ReorderableDragStartListener': m.ClassMirror(
      'ReorderableDragStartListener',
      {
        '#as': ReorderableDragStartListener_as$,
        '#is': ReorderableDragStartListener_is$,
        'child': _ReorderableDragStartListener_child$,
        'index': _ReorderableDragStartListener_index$,
        'enabled': _ReorderableDragStartListener_enabled$,
        'build': _ReorderableDragStartListener_build$,
        'createRecognizer': _ReorderableDragStartListener_createRecognizer$,
      },
      {},
    ),
    'ReorderableDelayedDragStartListener': m.ClassMirror(
      'ReorderableDelayedDragStartListener',
      {
        '#as': ReorderableDelayedDragStartListener_as$,
        '#is': ReorderableDelayedDragStartListener_is$,
        'createRecognizer':
            _ReorderableDelayedDragStartListener_createRecognizer$,
      },
      {},
    ),
  },
);
Function ReorderableList_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ReorderableList;
Function ReorderableList_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ReorderableList;
Function _ReorderableList_itemBuilder$(
  m.Scope scope$,
  ReorderableList target$,
) =>
    () {
      return target$.itemBuilder;
    };
Function _ReorderableList_itemCount$(
  m.Scope scope$,
  ReorderableList target$,
) =>
    () {
      return target$.itemCount;
    };
Function _ReorderableList_onReorder$(
  m.Scope scope$,
  ReorderableList target$,
) =>
    () {
      return target$.onReorder;
    };
Function _ReorderableList_onReorderStart$(
  m.Scope scope$,
  ReorderableList target$,
) =>
    () {
      return target$.onReorderStart;
    };
Function _ReorderableList_onReorderEnd$(
  m.Scope scope$,
  ReorderableList target$,
) =>
    () {
      return target$.onReorderEnd;
    };
Function _ReorderableList_proxyDecorator$(
  m.Scope scope$,
  ReorderableList target$,
) =>
    () {
      return target$.proxyDecorator;
    };
Function _ReorderableList_padding$(
  m.Scope scope$,
  ReorderableList target$,
) =>
    () {
      return target$.padding;
    };
Function _ReorderableList_scrollDirection$(
  m.Scope scope$,
  ReorderableList target$,
) =>
    () {
      return target$.scrollDirection;
    };
Function _ReorderableList_reverse$(
  m.Scope scope$,
  ReorderableList target$,
) =>
    () {
      return target$.reverse;
    };
Function _ReorderableList_controller$(
  m.Scope scope$,
  ReorderableList target$,
) =>
    () {
      return target$.controller;
    };
Function _ReorderableList_primary$(
  m.Scope scope$,
  ReorderableList target$,
) =>
    () {
      return target$.primary;
    };
Function _ReorderableList_physics$(
  m.Scope scope$,
  ReorderableList target$,
) =>
    () {
      return target$.physics;
    };
Function _ReorderableList_shrinkWrap$(
  m.Scope scope$,
  ReorderableList target$,
) =>
    () {
      return target$.shrinkWrap;
    };
Function _ReorderableList_anchor$(
  m.Scope scope$,
  ReorderableList target$,
) =>
    () {
      return target$.anchor;
    };
Function _ReorderableList_cacheExtent$(
  m.Scope scope$,
  ReorderableList target$,
) =>
    () {
      return target$.cacheExtent;
    };
Function _ReorderableList_dragStartBehavior$(
  m.Scope scope$,
  ReorderableList target$,
) =>
    () {
      return target$.dragStartBehavior;
    };
Function _ReorderableList_keyboardDismissBehavior$(
  m.Scope scope$,
  ReorderableList target$,
) =>
    () {
      return target$.keyboardDismissBehavior;
    };
Function _ReorderableList_restorationId$(
  m.Scope scope$,
  ReorderableList target$,
) =>
    () {
      return target$.restorationId;
    };
Function _ReorderableList_clipBehavior$(
  m.Scope scope$,
  ReorderableList target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _ReorderableList_itemExtent$(
  m.Scope scope$,
  ReorderableList target$,
) =>
    () {
      return target$.itemExtent;
    };
Function _ReorderableList_prototypeItem$(
  m.Scope scope$,
  ReorderableList target$,
) =>
    () {
      return target$.prototypeItem;
    };
Function _ReorderableList__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer itemBuilder,
      required int itemCount,
      required m.FunctionPointer onReorder,
      m.FunctionPointer? onReorderStart,
      m.FunctionPointer? onReorderEnd,
      double? itemExtent,
      Widget? prototypeItem,
      m.FunctionPointer? proxyDecorator,
      EdgeInsetsGeometry? padding,
      Axis? scrollDirection,
      bool? reverse,
      ScrollController? controller,
      bool? primary,
      ScrollPhysics? physics,
      bool? shrinkWrap,
      double? anchor,
      double? cacheExtent,
      DragStartBehavior? dragStartBehavior,
      ScrollViewKeyboardDismissBehavior? keyboardDismissBehavior,
      String? restorationId,
      Clip? clipBehavior,
    }) {
      Widget itemBuilderProxy(
        BuildContext itemBuilder_context$,
        int itemBuilder_index$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            itemBuilder,
            [
              itemBuilder_context$,
              itemBuilder_index$,
            ],
            {},
          );
      void onReorderProxy(
        int onReorder_oldIndex$,
        int onReorder_newIndex$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onReorder,
            [
              onReorder_oldIndex$,
              onReorder_newIndex$,
            ],
            {},
          );
      void onReorderEndProxy(int onReorderEnd_index$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onReorderEnd!,
            [onReorderEnd_index$],
            {},
          );
      void onReorderStartProxy(int onReorderStart_index$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onReorderStart!,
            [onReorderStart_index$],
            {},
          );
      Widget proxyDecoratorProxy(
        Widget proxyDecorator_child$,
        int proxyDecorator_index$,
        Animation<double> proxyDecorator_animation$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            proxyDecorator!,
            [
              proxyDecorator_child$,
              proxyDecorator_index$,
              proxyDecorator_animation$,
            ],
            {},
          );
      return ReorderableList(
        anchor: anchor ?? 0.0,
        cacheExtent: cacheExtent,
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        controller: controller,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        itemBuilder: itemBuilderProxy,
        itemCount: itemCount,
        itemExtent: itemExtent,
        key: key,
        keyboardDismissBehavior:
            keyboardDismissBehavior ?? ScrollViewKeyboardDismissBehavior.manual,
        onReorder: onReorderProxy,
        onReorderEnd: onReorderEnd == null ? null : onReorderEndProxy,
        onReorderStart: onReorderStart == null ? null : onReorderStartProxy,
        padding: padding,
        physics: physics,
        primary: primary,
        prototypeItem: prototypeItem,
        proxyDecorator: proxyDecorator == null ? null : proxyDecoratorProxy,
        restorationId: restorationId,
        reverse: reverse ?? false,
        scrollDirection: scrollDirection ?? Axis.vertical,
        shrinkWrap: shrinkWrap ?? false,
      );
    };
Function _ReorderableList_of$(m.Scope scope$) => ReorderableList.of;
Function _ReorderableList_maybeOf$(m.Scope scope$) => ReorderableList.maybeOf;
Function _ReorderableList_createState$(
  m.Scope scope$,
  ReorderableList target$,
) =>
    target$.createState;
Function ReorderableListState_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ReorderableListState;
Function ReorderableListState_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ReorderableListState;
Function _ReorderableListState__$(m.Scope scope$) => () {
      return ReorderableListState();
    };
Function _ReorderableListState_startItemDragReorder$(
  m.Scope scope$,
  ReorderableListState target$,
) =>
    target$.startItemDragReorder;
Function _ReorderableListState_cancelReorder$(
  m.Scope scope$,
  ReorderableListState target$,
) =>
    target$.cancelReorder;
Function _ReorderableListState_build$(
  m.Scope scope$,
  ReorderableListState target$,
) =>
    target$.build;
Function SliverReorderableList_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverReorderableList;
Function SliverReorderableList_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverReorderableList;
Function _SliverReorderableList_itemBuilder$(
  m.Scope scope$,
  SliverReorderableList target$,
) =>
    () {
      return target$.itemBuilder;
    };
Function _SliverReorderableList_findChildIndexCallback$(
  m.Scope scope$,
  SliverReorderableList target$,
) =>
    () {
      return target$.findChildIndexCallback;
    };
Function _SliverReorderableList_itemCount$(
  m.Scope scope$,
  SliverReorderableList target$,
) =>
    () {
      return target$.itemCount;
    };
Function _SliverReorderableList_onReorder$(
  m.Scope scope$,
  SliverReorderableList target$,
) =>
    () {
      return target$.onReorder;
    };
Function _SliverReorderableList_onReorderStart$(
  m.Scope scope$,
  SliverReorderableList target$,
) =>
    () {
      return target$.onReorderStart;
    };
Function _SliverReorderableList_onReorderEnd$(
  m.Scope scope$,
  SliverReorderableList target$,
) =>
    () {
      return target$.onReorderEnd;
    };
Function _SliverReorderableList_proxyDecorator$(
  m.Scope scope$,
  SliverReorderableList target$,
) =>
    () {
      return target$.proxyDecorator;
    };
Function _SliverReorderableList_itemExtent$(
  m.Scope scope$,
  SliverReorderableList target$,
) =>
    () {
      return target$.itemExtent;
    };
Function _SliverReorderableList_prototypeItem$(
  m.Scope scope$,
  SliverReorderableList target$,
) =>
    () {
      return target$.prototypeItem;
    };
Function _SliverReorderableList__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer itemBuilder,
      m.FunctionPointer? findChildIndexCallback,
      required int itemCount,
      required m.FunctionPointer onReorder,
      m.FunctionPointer? onReorderStart,
      m.FunctionPointer? onReorderEnd,
      double? itemExtent,
      Widget? prototypeItem,
      m.FunctionPointer? proxyDecorator,
    }) {
      int? findChildIndexCallbackProxy(Key findChildIndexCallback_key$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            findChildIndexCallback!,
            [findChildIndexCallback_key$],
            {},
          );
      Widget itemBuilderProxy(
        BuildContext itemBuilder_context$,
        int itemBuilder_index$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            itemBuilder,
            [
              itemBuilder_context$,
              itemBuilder_index$,
            ],
            {},
          );
      void onReorderProxy(
        int onReorder_oldIndex$,
        int onReorder_newIndex$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onReorder,
            [
              onReorder_oldIndex$,
              onReorder_newIndex$,
            ],
            {},
          );
      void onReorderEndProxy(int onReorderEnd_$p0$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onReorderEnd!,
            [onReorderEnd_$p0$],
            {},
          );
      void onReorderStartProxy(int onReorderStart_$p0$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onReorderStart!,
            [onReorderStart_$p0$],
            {},
          );
      Widget proxyDecoratorProxy(
        Widget proxyDecorator_child$,
        int proxyDecorator_index$,
        Animation<double> proxyDecorator_animation$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            proxyDecorator!,
            [
              proxyDecorator_child$,
              proxyDecorator_index$,
              proxyDecorator_animation$,
            ],
            {},
          );
      return SliverReorderableList(
        findChildIndexCallback:
            findChildIndexCallback == null ? null : findChildIndexCallbackProxy,
        itemBuilder: itemBuilderProxy,
        itemCount: itemCount,
        itemExtent: itemExtent,
        key: key,
        onReorder: onReorderProxy,
        onReorderEnd: onReorderEnd == null ? null : onReorderEndProxy,
        onReorderStart: onReorderStart == null ? null : onReorderStartProxy,
        prototypeItem: prototypeItem,
        proxyDecorator: proxyDecorator == null ? null : proxyDecoratorProxy,
      );
    };
Function _SliverReorderableList_createState$(
  m.Scope scope$,
  SliverReorderableList target$,
) =>
    target$.createState;
Function _SliverReorderableList_of$(m.Scope scope$) => SliverReorderableList.of;
Function _SliverReorderableList_maybeOf$(m.Scope scope$) =>
    SliverReorderableList.maybeOf;
Function SliverReorderableListState_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverReorderableListState;
Function SliverReorderableListState_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverReorderableListState;
Function _SliverReorderableListState__$(m.Scope scope$) => () {
      return SliverReorderableListState();
    };
Function _SliverReorderableListState_didChangeDependencies$(
  m.Scope scope$,
  SliverReorderableListState target$,
) =>
    target$.didChangeDependencies;
Function _SliverReorderableListState_didUpdateWidget$(
  m.Scope scope$,
  SliverReorderableListState target$,
) =>
    target$.didUpdateWidget;
Function _SliverReorderableListState_dispose$(
  m.Scope scope$,
  SliverReorderableListState target$,
) =>
    target$.dispose;
Function _SliverReorderableListState_startItemDragReorder$(
  m.Scope scope$,
  SliverReorderableListState target$,
) =>
    target$.startItemDragReorder;
Function _SliverReorderableListState_cancelReorder$(
  m.Scope scope$,
  SliverReorderableListState target$,
) =>
    target$.cancelReorder;
Function _SliverReorderableListState_build$(
  m.Scope scope$,
  SliverReorderableListState target$,
) =>
    target$.build;
Function ReorderableDragStartListener_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ReorderableDragStartListener;
Function ReorderableDragStartListener_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ReorderableDragStartListener;
Function _ReorderableDragStartListener_child$(
  m.Scope scope$,
  ReorderableDragStartListener target$,
) =>
    () {
      return target$.child;
    };
Function _ReorderableDragStartListener_index$(
  m.Scope scope$,
  ReorderableDragStartListener target$,
) =>
    () {
      return target$.index;
    };
Function _ReorderableDragStartListener_enabled$(
  m.Scope scope$,
  ReorderableDragStartListener target$,
) =>
    () {
      return target$.enabled;
    };
Function _ReorderableDragStartListener__$(m.Scope scope$) => ({
      Key? key,
      required Widget child,
      required int index,
      bool? enabled,
    }) {
      return ReorderableDragStartListener(
        child: child,
        enabled: enabled ?? true,
        index: index,
        key: key,
      );
    };
Function _ReorderableDragStartListener_build$(
  m.Scope scope$,
  ReorderableDragStartListener target$,
) =>
    target$.build;
Function _ReorderableDragStartListener_createRecognizer$(
  m.Scope scope$,
  ReorderableDragStartListener target$,
) =>
    target$.createRecognizer;
Function ReorderableDelayedDragStartListener_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ReorderableDelayedDragStartListener;
Function ReorderableDelayedDragStartListener_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ReorderableDelayedDragStartListener;
Function _ReorderableDelayedDragStartListener__$(m.Scope scope$) => ({
      Key? key,
      required Widget child,
      required int index,
      bool? enabled,
    }) {
      return ReorderableDelayedDragStartListener(
        child: child,
        enabled: enabled ?? true,
        index: index,
        key: key,
      );
    };
Function _ReorderableDelayedDragStartListener_createRecognizer$(
  m.Scope scope$,
  ReorderableDelayedDragStartListener target$,
) =>
    target$.createRecognizer;
