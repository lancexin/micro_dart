// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/beveled_rectangle_border.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/painting/border_radius.dart';
import 'package:flutter/src/painting/borders.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/beveled_rectangle_border.dart',
  {'BeveledRectangleBorder.': _BeveledRectangleBorder__$},
  {},
  {
    'BeveledRectangleBorder': m.ClassMirror(
      'BeveledRectangleBorder',
      {
        '#as': BeveledRectangleBorder_as$,
        '#is': BeveledRectangleBorder_is$,
        'borderRadius': _BeveledRectangleBorder_borderRadius$,
        'hashCode': _BeveledRectangleBorder_hashCode$,
        'scale': _BeveledRectangleBorder_scale$,
        'lerpFrom': _BeveledRectangleBorder_lerpFrom$,
        'lerpTo': _BeveledRectangleBorder_lerpTo$,
        'copyWith': _BeveledRectangleBorder_copyWith$,
        'getInnerPath': _BeveledRectangleBorder_getInnerPath$,
        'getOuterPath': _BeveledRectangleBorder_getOuterPath$,
        'paint': _BeveledRectangleBorder_paint$,
        '==': _BeveledRectangleBorder_eq$$,
        'toString': _BeveledRectangleBorder_toString$,
      },
      {},
    )
  },
);
Function BeveledRectangleBorder_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as BeveledRectangleBorder;
Function BeveledRectangleBorder_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is BeveledRectangleBorder;
Function _BeveledRectangleBorder_borderRadius$(
  m.Scope scope$,
  BeveledRectangleBorder target$,
) =>
    () {
      return target$.borderRadius;
    };
Function _BeveledRectangleBorder_hashCode$(
  m.Scope scope$,
  BeveledRectangleBorder target$,
) =>
    () {
      return target$.hashCode;
    };
Function _BeveledRectangleBorder__$(m.Scope scope$) => ({
      BorderSide? side,
      BorderRadiusGeometry? borderRadius,
    }) {
      return BeveledRectangleBorder(
        borderRadius: borderRadius ?? BorderRadius.zero,
        side: side ?? BorderSide.none,
      );
    };
Function _BeveledRectangleBorder_scale$(
  m.Scope scope$,
  BeveledRectangleBorder target$,
) =>
    target$.scale;
Function _BeveledRectangleBorder_lerpFrom$(
  m.Scope scope$,
  BeveledRectangleBorder target$,
) =>
    target$.lerpFrom;
Function _BeveledRectangleBorder_lerpTo$(
  m.Scope scope$,
  BeveledRectangleBorder target$,
) =>
    target$.lerpTo;
Function _BeveledRectangleBorder_copyWith$(
  m.Scope scope$,
  BeveledRectangleBorder target$,
) =>
    target$.copyWith;
Function _BeveledRectangleBorder_getInnerPath$(
  m.Scope scope$,
  BeveledRectangleBorder target$,
) =>
    target$.getInnerPath;
Function _BeveledRectangleBorder_getOuterPath$(
  m.Scope scope$,
  BeveledRectangleBorder target$,
) =>
    target$.getOuterPath;
Function _BeveledRectangleBorder_paint$(
  m.Scope scope$,
  BeveledRectangleBorder target$,
) =>
    target$.paint;
Function _BeveledRectangleBorder_eq$$(
  m.Scope scope$,
  BeveledRectangleBorder target$,
) =>
    (Object other$) => target$ == other$;
Function _BeveledRectangleBorder_toString$(
  m.Scope scope$,
  BeveledRectangleBorder target$,
) =>
    target$.toString;
