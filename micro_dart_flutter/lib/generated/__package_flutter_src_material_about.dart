// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/about.dart';
import 'dart:developer' show Flow, Timeline;
import 'dart:io' show Platform;
import 'package:flutter/foundation.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/widgets.dart' hide Flow;
import 'package:flutter/src/material/app_bar.dart';
import 'package:flutter/src/material/back_button.dart';
import 'package:flutter/src/material/card.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/dialog.dart';
import 'package:flutter/src/material/divider.dart';
import 'package:flutter/src/material/floating_action_button_location.dart';
import 'package:flutter/src/material/ink_decoration.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/page.dart';
import 'package:flutter/src/material/page_transitions_theme.dart';
import 'package:flutter/src/material/progress_indicator.dart';
import 'package:flutter/src/material/scaffold.dart';
import 'package:flutter/src/material/scrollbar.dart';
import 'package:flutter/src/material/text_button.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/about.dart',
  {
    'showAboutDialog': _showAboutDialog$,
    'showLicensePage': _showLicensePage$,
  },
  {},
  {
    'AboutListTile': m.ClassMirror(
      'AboutListTile',
      {
        '#as': AboutListTile_as$,
        '#is': AboutListTile_is$,
        'icon': _AboutListTile_icon$,
        'child': _AboutListTile_child$,
        'applicationName': _AboutListTile_applicationName$,
        'applicationVersion': _AboutListTile_applicationVersion$,
        'applicationIcon': _AboutListTile_applicationIcon$,
        'applicationLegalese': _AboutListTile_applicationLegalese$,
        'aboutBoxChildren': _AboutListTile_aboutBoxChildren$,
        'dense': _AboutListTile_dense$,
        'build': _AboutListTile_build$,
      },
      {},
    ),
    'AboutDialog': m.ClassMirror(
      'AboutDialog',
      {
        '#as': AboutDialog_as$,
        '#is': AboutDialog_is$,
        'applicationName': _AboutDialog_applicationName$,
        'applicationVersion': _AboutDialog_applicationVersion$,
        'applicationIcon': _AboutDialog_applicationIcon$,
        'applicationLegalese': _AboutDialog_applicationLegalese$,
        'children': _AboutDialog_children$,
        'build': _AboutDialog_build$,
      },
      {},
    ),
    'LicensePage': m.ClassMirror(
      'LicensePage',
      {
        '#as': LicensePage_as$,
        '#is': LicensePage_is$,
        'applicationName': _LicensePage_applicationName$,
        'applicationVersion': _LicensePage_applicationVersion$,
        'applicationIcon': _LicensePage_applicationIcon$,
        'applicationLegalese': _LicensePage_applicationLegalese$,
        'createState': _LicensePage_createState$,
      },
      {},
    ),
  },
);
Function AboutListTile_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AboutListTile;
Function AboutListTile_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AboutListTile;
Widget? _AboutListTile_icon$(AboutListTile target) {
  return target.icon;
}

Widget? _AboutListTile_child$(AboutListTile target) {
  return target.child;
}

String? _AboutListTile_applicationName$(AboutListTile target) {
  return target.applicationName;
}

String? _AboutListTile_applicationVersion$(AboutListTile target) {
  return target.applicationVersion;
}

Widget? _AboutListTile_applicationIcon$(AboutListTile target) {
  return target.applicationIcon;
}

String? _AboutListTile_applicationLegalese$(AboutListTile target) {
  return target.applicationLegalese;
}

List<Widget>? _AboutListTile_aboutBoxChildren$(AboutListTile target) {
  return target.aboutBoxChildren;
}

bool? _AboutListTile_dense$(AboutListTile target) {
  return target.dense;
}

Function _AboutListTile_build$(
  m.Scope scope,
  AboutListTile target,
) =>
    target.build;
Function AboutDialog_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AboutDialog;
Function AboutDialog_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AboutDialog;
String? _AboutDialog_applicationName$(AboutDialog target) {
  return target.applicationName;
}

String? _AboutDialog_applicationVersion$(AboutDialog target) {
  return target.applicationVersion;
}

Widget? _AboutDialog_applicationIcon$(AboutDialog target) {
  return target.applicationIcon;
}

String? _AboutDialog_applicationLegalese$(AboutDialog target) {
  return target.applicationLegalese;
}

List<Widget>? _AboutDialog_children$(AboutDialog target) {
  return target.children;
}

Function _AboutDialog_build$(
  m.Scope scope,
  AboutDialog target,
) =>
    target.build;
Function LicensePage_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as LicensePage;
Function LicensePage_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is LicensePage;
String? _LicensePage_applicationName$(LicensePage target) {
  return target.applicationName;
}

String? _LicensePage_applicationVersion$(LicensePage target) {
  return target.applicationVersion;
}

Widget? _LicensePage_applicationIcon$(LicensePage target) {
  return target.applicationIcon;
}

String? _LicensePage_applicationLegalese$(LicensePage target) {
  return target.applicationLegalese;
}

Function _LicensePage_createState$(
  m.Scope scope,
  LicensePage target,
) =>
    target.createState;
Function _showAboutDialog$(m.Scope scope) => showAboutDialog;
Function _showLicensePage$(m.Scope scope) => showLicensePage;
