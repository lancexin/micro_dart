// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/button_theme.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/material_button.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart'
    show MaterialTapTargetSize;

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/button_theme.dart',
  {
    'ButtonTheme.': _ButtonTheme__$,
    'ButtonTheme.fromButtonThemeData': _ButtonTheme_fromButtonThemeData_$,
    'ButtonTheme.of': _ButtonTheme_of$,
    'ButtonThemeData.': _ButtonThemeData__$,
    'ButtonTextTheme.normal': _ButtonTextTheme_normal$,
    'ButtonTextTheme.accent': _ButtonTextTheme_accent$,
    'ButtonTextTheme.primary': _ButtonTextTheme_primary$,
    'ButtonTextTheme.values': _ButtonTextTheme_values$,
    'ButtonBarLayoutBehavior.constrained':
        _ButtonBarLayoutBehavior_constrained$,
    'ButtonBarLayoutBehavior.padded': _ButtonBarLayoutBehavior_padded$,
    'ButtonBarLayoutBehavior.values': _ButtonBarLayoutBehavior_values$,
  },
  {},
  {
    'ButtonTheme': m.ClassMirror(
      'ButtonTheme',
      {
        '#as': ButtonTheme_as$,
        '#is': ButtonTheme_is$,
        'data': _ButtonTheme_data$,
        'wrap': _ButtonTheme_wrap$,
        'updateShouldNotify': _ButtonTheme_updateShouldNotify$,
      },
      {},
    ),
    'ButtonThemeData': m.ClassMirror(
      'ButtonThemeData',
      {
        '#as': ButtonThemeData_as$,
        '#is': ButtonThemeData_is$,
        'minWidth': _ButtonThemeData_minWidth$,
        'height': _ButtonThemeData_height$,
        'textTheme': _ButtonThemeData_textTheme$,
        'layoutBehavior': _ButtonThemeData_layoutBehavior$,
        'alignedDropdown': _ButtonThemeData_alignedDropdown$,
        'colorScheme': _ButtonThemeData_colorScheme$,
        'constraints': _ButtonThemeData_constraints$,
        'padding': _ButtonThemeData_padding$,
        'shape': _ButtonThemeData_shape$,
        'hashCode': _ButtonThemeData_hashCode$,
        'getBrightness': _ButtonThemeData_getBrightness$,
        'getTextTheme': _ButtonThemeData_getTextTheme$,
        'getDisabledTextColor': _ButtonThemeData_getDisabledTextColor$,
        'getDisabledFillColor': _ButtonThemeData_getDisabledFillColor$,
        'getFillColor': _ButtonThemeData_getFillColor$,
        'getTextColor': _ButtonThemeData_getTextColor$,
        'getSplashColor': _ButtonThemeData_getSplashColor$,
        'getFocusColor': _ButtonThemeData_getFocusColor$,
        'getHoverColor': _ButtonThemeData_getHoverColor$,
        'getHighlightColor': _ButtonThemeData_getHighlightColor$,
        'getElevation': _ButtonThemeData_getElevation$,
        'getFocusElevation': _ButtonThemeData_getFocusElevation$,
        'getHoverElevation': _ButtonThemeData_getHoverElevation$,
        'getHighlightElevation': _ButtonThemeData_getHighlightElevation$,
        'getDisabledElevation': _ButtonThemeData_getDisabledElevation$,
        'getPadding': _ButtonThemeData_getPadding$,
        'getShape': _ButtonThemeData_getShape$,
        'getAnimationDuration': _ButtonThemeData_getAnimationDuration$,
        'getConstraints': _ButtonThemeData_getConstraints$,
        'getMaterialTapTargetSize': _ButtonThemeData_getMaterialTapTargetSize$,
        'copyWith': _ButtonThemeData_copyWith$,
        '==': _ButtonThemeData_eq$$,
        'debugFillProperties': _ButtonThemeData_debugFillProperties$,
      },
      {},
    ),
    'ButtonTextTheme': m.ClassMirror(
      'ButtonTextTheme',
      {},
      {},
    ),
    'ButtonBarLayoutBehavior': m.ClassMirror(
      'ButtonBarLayoutBehavior',
      {},
      {},
    ),
  },
);
Function ButtonTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ButtonTheme;
Function ButtonTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ButtonTheme;
Function _ButtonTheme_data$(
  m.Scope scope$,
  ButtonTheme target$,
) =>
    () {
      return target$.data;
    };
Function _ButtonTheme__$(m.Scope scope$) => ({
      Key? key,
      ButtonTextTheme? textTheme,
      ButtonBarLayoutBehavior? layoutBehavior,
      double? minWidth,
      double? height,
      EdgeInsetsGeometry? padding,
      ShapeBorder? shape,
      bool? alignedDropdown,
      Color? buttonColor,
      Color? disabledColor,
      Color? focusColor,
      Color? hoverColor,
      Color? highlightColor,
      Color? splashColor,
      ColorScheme? colorScheme,
      MaterialTapTargetSize? materialTapTargetSize,
      required Widget child,
    }) {
      return ButtonTheme(
        alignedDropdown: alignedDropdown ?? false,
        buttonColor: buttonColor,
        child: child,
        colorScheme: colorScheme,
        disabledColor: disabledColor,
        focusColor: focusColor,
        height: height ?? 36.0,
        highlightColor: highlightColor,
        hoverColor: hoverColor,
        key: key,
        layoutBehavior: layoutBehavior ?? ButtonBarLayoutBehavior.padded,
        materialTapTargetSize: materialTapTargetSize,
        minWidth: minWidth ?? 88.0,
        padding: padding,
        shape: shape,
        splashColor: splashColor,
        textTheme: textTheme ?? ButtonTextTheme.normal,
      );
    };
Function _ButtonTheme_fromButtonThemeData_$(m.Scope scope$) =>
    ButtonTheme.fromButtonThemeData;
Function _ButtonTheme_of$(m.Scope scope$) => ButtonTheme.of;
Function _ButtonTheme_wrap$(
  m.Scope scope$,
  ButtonTheme target$,
) =>
    target$.wrap;
Function _ButtonTheme_updateShouldNotify$(
  m.Scope scope$,
  ButtonTheme target$,
) =>
    target$.updateShouldNotify;
Function ButtonThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ButtonThemeData;
Function ButtonThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ButtonThemeData;
Function _ButtonThemeData_minWidth$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    () {
      return target$.minWidth;
    };
Function _ButtonThemeData_height$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    () {
      return target$.height;
    };
Function _ButtonThemeData_textTheme$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    () {
      return target$.textTheme;
    };
Function _ButtonThemeData_layoutBehavior$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    () {
      return target$.layoutBehavior;
    };
Function _ButtonThemeData_alignedDropdown$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    () {
      return target$.alignedDropdown;
    };
Function _ButtonThemeData_colorScheme$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    () {
      return target$.colorScheme;
    };
Function _ButtonThemeData_constraints$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    () {
      return target$.constraints;
    };
Function _ButtonThemeData_padding$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    () {
      return target$.padding;
    };
Function _ButtonThemeData_shape$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    () {
      return target$.shape;
    };
Function _ButtonThemeData_hashCode$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _ButtonThemeData__$(m.Scope scope$) => ({
      ButtonTextTheme? textTheme,
      double? minWidth,
      double? height,
      EdgeInsetsGeometry? padding,
      ShapeBorder? shape,
      ButtonBarLayoutBehavior? layoutBehavior,
      bool? alignedDropdown,
      Color? buttonColor,
      Color? disabledColor,
      Color? focusColor,
      Color? hoverColor,
      Color? highlightColor,
      Color? splashColor,
      ColorScheme? colorScheme,
      MaterialTapTargetSize? materialTapTargetSize,
    }) {
      return ButtonThemeData(
        alignedDropdown: alignedDropdown ?? false,
        buttonColor: buttonColor,
        colorScheme: colorScheme,
        disabledColor: disabledColor,
        focusColor: focusColor,
        height: height ?? 36.0,
        highlightColor: highlightColor,
        hoverColor: hoverColor,
        layoutBehavior: layoutBehavior ?? ButtonBarLayoutBehavior.padded,
        materialTapTargetSize: materialTapTargetSize,
        minWidth: minWidth ?? 88.0,
        padding: padding,
        shape: shape,
        splashColor: splashColor,
        textTheme: textTheme ?? ButtonTextTheme.normal,
      );
    };
Function _ButtonThemeData_getBrightness$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    target$.getBrightness;
Function _ButtonThemeData_getTextTheme$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    target$.getTextTheme;
Function _ButtonThemeData_getDisabledTextColor$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    target$.getDisabledTextColor;
Function _ButtonThemeData_getDisabledFillColor$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    target$.getDisabledFillColor;
Function _ButtonThemeData_getFillColor$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    target$.getFillColor;
Function _ButtonThemeData_getTextColor$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    target$.getTextColor;
Function _ButtonThemeData_getSplashColor$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    target$.getSplashColor;
Function _ButtonThemeData_getFocusColor$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    target$.getFocusColor;
Function _ButtonThemeData_getHoverColor$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    target$.getHoverColor;
Function _ButtonThemeData_getHighlightColor$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    target$.getHighlightColor;
Function _ButtonThemeData_getElevation$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    target$.getElevation;
Function _ButtonThemeData_getFocusElevation$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    target$.getFocusElevation;
Function _ButtonThemeData_getHoverElevation$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    target$.getHoverElevation;
Function _ButtonThemeData_getHighlightElevation$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    target$.getHighlightElevation;
Function _ButtonThemeData_getDisabledElevation$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    target$.getDisabledElevation;
Function _ButtonThemeData_getPadding$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    target$.getPadding;
Function _ButtonThemeData_getShape$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    target$.getShape;
Function _ButtonThemeData_getAnimationDuration$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    target$.getAnimationDuration;
Function _ButtonThemeData_getConstraints$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    target$.getConstraints;
Function _ButtonThemeData_getMaterialTapTargetSize$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    target$.getMaterialTapTargetSize;
Function _ButtonThemeData_copyWith$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    target$.copyWith;
Function _ButtonThemeData_eq$$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _ButtonThemeData_debugFillProperties$(
  m.Scope scope$,
  ButtonThemeData target$,
) =>
    target$.debugFillProperties;
Function _ButtonTextTheme_normal$(m.Scope scope$) =>
    () => ButtonTextTheme.normal;
Function _ButtonTextTheme_accent$(m.Scope scope$) =>
    () => ButtonTextTheme.accent;
Function _ButtonTextTheme_primary$(m.Scope scope$) =>
    () => ButtonTextTheme.primary;
Function _ButtonTextTheme_values$(m.Scope scope$) =>
    () => ButtonTextTheme.values;
Function _ButtonBarLayoutBehavior_constrained$(m.Scope scope$) =>
    () => ButtonBarLayoutBehavior.constrained;
Function _ButtonBarLayoutBehavior_padded$(m.Scope scope$) =>
    () => ButtonBarLayoutBehavior.padded;
Function _ButtonBarLayoutBehavior_values$(m.Scope scope$) =>
    () => ButtonBarLayoutBehavior.values;
