// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/button_theme.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/material_button.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart'
    show MaterialTapTargetSize;

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/button_theme.dart',
  {
    'ButtonTheme.of': _ButtonTheme_of$,
    'ButtonTextTheme.normal': _ButtonTextTheme_normal$,
    'ButtonTextTheme.accent': _ButtonTextTheme_accent$,
    'ButtonTextTheme.primary': _ButtonTextTheme_primary$,
    'ButtonTextTheme.values': _ButtonTextTheme_values$,
    'ButtonBarLayoutBehavior.constrained':
        _ButtonBarLayoutBehavior_constrained$,
    'ButtonBarLayoutBehavior.padded': _ButtonBarLayoutBehavior_padded$,
    'ButtonBarLayoutBehavior.values': _ButtonBarLayoutBehavior_values$,
  },
  {},
  {
    'ButtonTheme': m.ClassMirror(
      'ButtonTheme',
      {
        '#as': ButtonTheme_as$,
        '#is': ButtonTheme_is$,
        'data': _ButtonTheme_data$,
        'wrap': _ButtonTheme_wrap$,
        'updateShouldNotify': _ButtonTheme_updateShouldNotify$,
      },
      {},
    ),
    'ButtonThemeData': m.ClassMirror(
      'ButtonThemeData',
      {
        '#as': ButtonThemeData_as$,
        '#is': ButtonThemeData_is$,
        'minWidth': _ButtonThemeData_minWidth$,
        'height': _ButtonThemeData_height$,
        'textTheme': _ButtonThemeData_textTheme$,
        'layoutBehavior': _ButtonThemeData_layoutBehavior$,
        'alignedDropdown': _ButtonThemeData_alignedDropdown$,
        'colorScheme': _ButtonThemeData_colorScheme$,
        'constraints': _ButtonThemeData_constraints$,
        'padding': _ButtonThemeData_padding$,
        'shape': _ButtonThemeData_shape$,
        'hashCode': _ButtonThemeData_hashCode$,
        'getBrightness': _ButtonThemeData_getBrightness$,
        'getTextTheme': _ButtonThemeData_getTextTheme$,
        'getDisabledTextColor': _ButtonThemeData_getDisabledTextColor$,
        'getDisabledFillColor': _ButtonThemeData_getDisabledFillColor$,
        'getFillColor': _ButtonThemeData_getFillColor$,
        'getTextColor': _ButtonThemeData_getTextColor$,
        'getSplashColor': _ButtonThemeData_getSplashColor$,
        'getFocusColor': _ButtonThemeData_getFocusColor$,
        'getHoverColor': _ButtonThemeData_getHoverColor$,
        'getHighlightColor': _ButtonThemeData_getHighlightColor$,
        'getElevation': _ButtonThemeData_getElevation$,
        'getFocusElevation': _ButtonThemeData_getFocusElevation$,
        'getHoverElevation': _ButtonThemeData_getHoverElevation$,
        'getHighlightElevation': _ButtonThemeData_getHighlightElevation$,
        'getDisabledElevation': _ButtonThemeData_getDisabledElevation$,
        'getPadding': _ButtonThemeData_getPadding$,
        'getShape': _ButtonThemeData_getShape$,
        'getAnimationDuration': _ButtonThemeData_getAnimationDuration$,
        'getConstraints': _ButtonThemeData_getConstraints$,
        'getMaterialTapTargetSize': _ButtonThemeData_getMaterialTapTargetSize$,
        'copyWith': _ButtonThemeData_copyWith$,
        '==': _ButtonThemeData_eq$$,
        'debugFillProperties': _ButtonThemeData_debugFillProperties$,
      },
      {},
    ),
    'ButtonTextTheme': m.ClassMirror(
      'ButtonTextTheme',
      {},
      {},
    ),
    'ButtonBarLayoutBehavior': m.ClassMirror(
      'ButtonBarLayoutBehavior',
      {},
      {},
    ),
  },
);
Function ButtonTheme_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ButtonTheme;
Function ButtonTheme_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ButtonTheme;
ButtonThemeData _ButtonTheme_data$(ButtonTheme target) {
  return target.data;
}

Function _ButtonTheme_of$(m.Scope scope) => ButtonTheme.of;
Function _ButtonTheme_wrap$(
  m.Scope scope,
  ButtonTheme target,
) =>
    target.wrap;
Function _ButtonTheme_updateShouldNotify$(
  m.Scope scope,
  ButtonTheme target,
) =>
    target.updateShouldNotify;
Function ButtonThemeData_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ButtonThemeData;
Function ButtonThemeData_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ButtonThemeData;
double _ButtonThemeData_minWidth$(ButtonThemeData target) {
  return target.minWidth;
}

double _ButtonThemeData_height$(ButtonThemeData target) {
  return target.height;
}

ButtonTextTheme _ButtonThemeData_textTheme$(ButtonThemeData target) {
  return target.textTheme;
}

ButtonBarLayoutBehavior _ButtonThemeData_layoutBehavior$(
    ButtonThemeData target) {
  return target.layoutBehavior;
}

bool _ButtonThemeData_alignedDropdown$(ButtonThemeData target) {
  return target.alignedDropdown;
}

ColorScheme? _ButtonThemeData_colorScheme$(ButtonThemeData target) {
  return target.colorScheme;
}

BoxConstraints _ButtonThemeData_constraints$(ButtonThemeData target) {
  return target.constraints;
}

EdgeInsetsGeometry _ButtonThemeData_padding$(ButtonThemeData target) {
  return target.padding;
}

ShapeBorder _ButtonThemeData_shape$(ButtonThemeData target) {
  return target.shape;
}

int _ButtonThemeData_hashCode$(ButtonThemeData target) {
  return target.hashCode;
}

Function _ButtonThemeData_getBrightness$(
  m.Scope scope,
  ButtonThemeData target,
) =>
    target.getBrightness;
Function _ButtonThemeData_getTextTheme$(
  m.Scope scope,
  ButtonThemeData target,
) =>
    target.getTextTheme;
Function _ButtonThemeData_getDisabledTextColor$(
  m.Scope scope,
  ButtonThemeData target,
) =>
    target.getDisabledTextColor;
Function _ButtonThemeData_getDisabledFillColor$(
  m.Scope scope,
  ButtonThemeData target,
) =>
    target.getDisabledFillColor;
Function _ButtonThemeData_getFillColor$(
  m.Scope scope,
  ButtonThemeData target,
) =>
    target.getFillColor;
Function _ButtonThemeData_getTextColor$(
  m.Scope scope,
  ButtonThemeData target,
) =>
    target.getTextColor;
Function _ButtonThemeData_getSplashColor$(
  m.Scope scope,
  ButtonThemeData target,
) =>
    target.getSplashColor;
Function _ButtonThemeData_getFocusColor$(
  m.Scope scope,
  ButtonThemeData target,
) =>
    target.getFocusColor;
Function _ButtonThemeData_getHoverColor$(
  m.Scope scope,
  ButtonThemeData target,
) =>
    target.getHoverColor;
Function _ButtonThemeData_getHighlightColor$(
  m.Scope scope,
  ButtonThemeData target,
) =>
    target.getHighlightColor;
Function _ButtonThemeData_getElevation$(
  m.Scope scope,
  ButtonThemeData target,
) =>
    target.getElevation;
Function _ButtonThemeData_getFocusElevation$(
  m.Scope scope,
  ButtonThemeData target,
) =>
    target.getFocusElevation;
Function _ButtonThemeData_getHoverElevation$(
  m.Scope scope,
  ButtonThemeData target,
) =>
    target.getHoverElevation;
Function _ButtonThemeData_getHighlightElevation$(
  m.Scope scope,
  ButtonThemeData target,
) =>
    target.getHighlightElevation;
Function _ButtonThemeData_getDisabledElevation$(
  m.Scope scope,
  ButtonThemeData target,
) =>
    target.getDisabledElevation;
Function _ButtonThemeData_getPadding$(
  m.Scope scope,
  ButtonThemeData target,
) =>
    target.getPadding;
Function _ButtonThemeData_getShape$(
  m.Scope scope,
  ButtonThemeData target,
) =>
    target.getShape;
Function _ButtonThemeData_getAnimationDuration$(
  m.Scope scope,
  ButtonThemeData target,
) =>
    target.getAnimationDuration;
Function _ButtonThemeData_getConstraints$(
  m.Scope scope,
  ButtonThemeData target,
) =>
    target.getConstraints;
Function _ButtonThemeData_getMaterialTapTargetSize$(
  m.Scope scope,
  ButtonThemeData target,
) =>
    target.getMaterialTapTargetSize;
Function _ButtonThemeData_copyWith$(
  m.Scope scope,
  ButtonThemeData target,
) =>
    target.copyWith;
Function _ButtonThemeData_eq$$(
  m.Scope scope,
  ButtonThemeData target,
) =>
    (Object other) => target == other;
Function _ButtonThemeData_debugFillProperties$(
  m.Scope scope,
  ButtonThemeData target,
) =>
    target.debugFillProperties;
ButtonTextTheme _ButtonTextTheme_normal$() {
  return ButtonTextTheme.normal;
}

ButtonTextTheme _ButtonTextTheme_accent$() {
  return ButtonTextTheme.accent;
}

ButtonTextTheme _ButtonTextTheme_primary$() {
  return ButtonTextTheme.primary;
}

List<ButtonTextTheme> _ButtonTextTheme_values$() {
  return ButtonTextTheme.values;
}

ButtonBarLayoutBehavior _ButtonBarLayoutBehavior_constrained$() {
  return ButtonBarLayoutBehavior.constrained;
}

ButtonBarLayoutBehavior _ButtonBarLayoutBehavior_padded$() {
  return ButtonBarLayoutBehavior.padded;
}

List<ButtonBarLayoutBehavior> _ButtonBarLayoutBehavior_values$() {
  return ButtonBarLayoutBehavior.values;
}
