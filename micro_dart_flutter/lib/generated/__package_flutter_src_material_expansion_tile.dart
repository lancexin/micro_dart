// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/expansion_tile.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/expansion_tile_theme.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'package:flutter/src/material/list_tile_theme.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/expansion_tile.dart',
  {
    'ExpansionTileController.of': _ExpansionTileController_of$,
    'ExpansionTileController.maybeOf': _ExpansionTileController_maybeOf$,
  },
  {},
  {
    'ExpansionTileController': m.ClassMirror(
      'ExpansionTileController',
      {
        'isExpanded': _ExpansionTileController_isExpanded$,
        'expand': _ExpansionTileController_expand$,
        'collapse': _ExpansionTileController_collapse$,
      },
      {},
    ),
    'ExpansionTile': m.ClassMirror(
      'ExpansionTile',
      {
        'leading': _ExpansionTile_leading$,
        'title': _ExpansionTile_title$,
        'subtitle': _ExpansionTile_subtitle$,
        'onExpansionChanged': _ExpansionTile_onExpansionChanged$,
        'children': _ExpansionTile_children$,
        'backgroundColor': _ExpansionTile_backgroundColor$,
        'collapsedBackgroundColor': _ExpansionTile_collapsedBackgroundColor$,
        'trailing': _ExpansionTile_trailing$,
        'initiallyExpanded': _ExpansionTile_initiallyExpanded$,
        'maintainState': _ExpansionTile_maintainState$,
        'tilePadding': _ExpansionTile_tilePadding$,
        'expandedAlignment': _ExpansionTile_expandedAlignment$,
        'expandedCrossAxisAlignment':
            _ExpansionTile_expandedCrossAxisAlignment$,
        'childrenPadding': _ExpansionTile_childrenPadding$,
        'iconColor': _ExpansionTile_iconColor$,
        'collapsedIconColor': _ExpansionTile_collapsedIconColor$,
        'textColor': _ExpansionTile_textColor$,
        'collapsedTextColor': _ExpansionTile_collapsedTextColor$,
        'shape': _ExpansionTile_shape$,
        'collapsedShape': _ExpansionTile_collapsedShape$,
        'clipBehavior': _ExpansionTile_clipBehavior$,
        'controlAffinity': _ExpansionTile_controlAffinity$,
        'controller': _ExpansionTile_controller$,
        'createState': _ExpansionTile_createState$,
      },
      {},
    ),
  },
);
bool _ExpansionTileController_isExpanded$(ExpansionTileController target) {
  return target.isExpanded;
}

Function _ExpansionTileController_expand$(
  m.Scope scope,
  ExpansionTileController target,
) =>
    target.expand;
Function _ExpansionTileController_collapse$(
  m.Scope scope,
  ExpansionTileController target,
) =>
    target.collapse;
Function _ExpansionTileController_of$(m.Scope scope) =>
    ExpansionTileController.of;
Function _ExpansionTileController_maybeOf$(m.Scope scope) =>
    ExpansionTileController.maybeOf;
Widget? _ExpansionTile_leading$(ExpansionTile target) {
  return target.leading;
}

Widget _ExpansionTile_title$(ExpansionTile target) {
  return target.title;
}

Widget? _ExpansionTile_subtitle$(ExpansionTile target) {
  return target.subtitle;
}

void Function(bool)? _ExpansionTile_onExpansionChanged$(ExpansionTile target) {
  return target.onExpansionChanged;
}

List<Widget> _ExpansionTile_children$(ExpansionTile target) {
  return target.children;
}

Color? _ExpansionTile_backgroundColor$(ExpansionTile target) {
  return target.backgroundColor;
}

Color? _ExpansionTile_collapsedBackgroundColor$(ExpansionTile target) {
  return target.collapsedBackgroundColor;
}

Widget? _ExpansionTile_trailing$(ExpansionTile target) {
  return target.trailing;
}

bool _ExpansionTile_initiallyExpanded$(ExpansionTile target) {
  return target.initiallyExpanded;
}

bool _ExpansionTile_maintainState$(ExpansionTile target) {
  return target.maintainState;
}

EdgeInsetsGeometry? _ExpansionTile_tilePadding$(ExpansionTile target) {
  return target.tilePadding;
}

Alignment? _ExpansionTile_expandedAlignment$(ExpansionTile target) {
  return target.expandedAlignment;
}

CrossAxisAlignment? _ExpansionTile_expandedCrossAxisAlignment$(
    ExpansionTile target) {
  return target.expandedCrossAxisAlignment;
}

EdgeInsetsGeometry? _ExpansionTile_childrenPadding$(ExpansionTile target) {
  return target.childrenPadding;
}

Color? _ExpansionTile_iconColor$(ExpansionTile target) {
  return target.iconColor;
}

Color? _ExpansionTile_collapsedIconColor$(ExpansionTile target) {
  return target.collapsedIconColor;
}

Color? _ExpansionTile_textColor$(ExpansionTile target) {
  return target.textColor;
}

Color? _ExpansionTile_collapsedTextColor$(ExpansionTile target) {
  return target.collapsedTextColor;
}

ShapeBorder? _ExpansionTile_shape$(ExpansionTile target) {
  return target.shape;
}

ShapeBorder? _ExpansionTile_collapsedShape$(ExpansionTile target) {
  return target.collapsedShape;
}

Clip? _ExpansionTile_clipBehavior$(ExpansionTile target) {
  return target.clipBehavior;
}

ListTileControlAffinity? _ExpansionTile_controlAffinity$(ExpansionTile target) {
  return target.controlAffinity;
}

ExpansionTileController? _ExpansionTile_controller$(ExpansionTile target) {
  return target.controller;
}

Function _ExpansionTile_createState$(
  m.Scope scope,
  ExpansionTile target,
) =>
    target.createState;
