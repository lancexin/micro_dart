// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/expansion_tile.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/expansion_tile_theme.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'package:flutter/src/material/list_tile_theme.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/expansion_tile.dart',
  {
    'ExpansionTileController.': _ExpansionTileController__$,
    'ExpansionTileController.of': _ExpansionTileController_of$,
    'ExpansionTileController.maybeOf': _ExpansionTileController_maybeOf$,
    'ExpansionTile.': _ExpansionTile__$,
  },
  {},
  {
    'ExpansionTileController': m.ClassMirror(
      'ExpansionTileController',
      {
        '#as': ExpansionTileController_as$,
        '#is': ExpansionTileController_is$,
        'isExpanded': _ExpansionTileController_isExpanded$,
        'expand': _ExpansionTileController_expand$,
        'collapse': _ExpansionTileController_collapse$,
      },
      {},
    ),
    'ExpansionTile': m.ClassMirror(
      'ExpansionTile',
      {
        '#as': ExpansionTile_as$,
        '#is': ExpansionTile_is$,
        'leading': _ExpansionTile_leading$,
        'title': _ExpansionTile_title$,
        'subtitle': _ExpansionTile_subtitle$,
        'onExpansionChanged': _ExpansionTile_onExpansionChanged$,
        'children': _ExpansionTile_children$,
        'backgroundColor': _ExpansionTile_backgroundColor$,
        'collapsedBackgroundColor': _ExpansionTile_collapsedBackgroundColor$,
        'trailing': _ExpansionTile_trailing$,
        'initiallyExpanded': _ExpansionTile_initiallyExpanded$,
        'maintainState': _ExpansionTile_maintainState$,
        'tilePadding': _ExpansionTile_tilePadding$,
        'expandedAlignment': _ExpansionTile_expandedAlignment$,
        'expandedCrossAxisAlignment':
            _ExpansionTile_expandedCrossAxisAlignment$,
        'childrenPadding': _ExpansionTile_childrenPadding$,
        'iconColor': _ExpansionTile_iconColor$,
        'collapsedIconColor': _ExpansionTile_collapsedIconColor$,
        'textColor': _ExpansionTile_textColor$,
        'collapsedTextColor': _ExpansionTile_collapsedTextColor$,
        'shape': _ExpansionTile_shape$,
        'collapsedShape': _ExpansionTile_collapsedShape$,
        'clipBehavior': _ExpansionTile_clipBehavior$,
        'controlAffinity': _ExpansionTile_controlAffinity$,
        'controller': _ExpansionTile_controller$,
        'createState': _ExpansionTile_createState$,
      },
      {},
    ),
  },
);
Function ExpansionTileController_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ExpansionTileController;
Function ExpansionTileController_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ExpansionTileController;
Function _ExpansionTileController_isExpanded$(
  m.Scope scope$,
  ExpansionTileController target$,
) =>
    () {
      return target$.isExpanded;
    };
Function _ExpansionTileController__$(m.Scope scope$) => () {
      return ExpansionTileController();
    };
Function _ExpansionTileController_expand$(
  m.Scope scope$,
  ExpansionTileController target$,
) =>
    target$.expand;
Function _ExpansionTileController_collapse$(
  m.Scope scope$,
  ExpansionTileController target$,
) =>
    target$.collapse;
Function _ExpansionTileController_of$(m.Scope scope$) =>
    ExpansionTileController.of;
Function _ExpansionTileController_maybeOf$(m.Scope scope$) =>
    ExpansionTileController.maybeOf;
Function ExpansionTile_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ExpansionTile;
Function ExpansionTile_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ExpansionTile;
Function _ExpansionTile_leading$(
  m.Scope scope$,
  ExpansionTile target$,
) =>
    () {
      return target$.leading;
    };
Function _ExpansionTile_title$(
  m.Scope scope$,
  ExpansionTile target$,
) =>
    () {
      return target$.title;
    };
Function _ExpansionTile_subtitle$(
  m.Scope scope$,
  ExpansionTile target$,
) =>
    () {
      return target$.subtitle;
    };
Function _ExpansionTile_onExpansionChanged$(
  m.Scope scope$,
  ExpansionTile target$,
) =>
    () {
      return target$.onExpansionChanged;
    };
Function _ExpansionTile_children$(
  m.Scope scope$,
  ExpansionTile target$,
) =>
    () {
      return target$.children;
    };
Function _ExpansionTile_backgroundColor$(
  m.Scope scope$,
  ExpansionTile target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _ExpansionTile_collapsedBackgroundColor$(
  m.Scope scope$,
  ExpansionTile target$,
) =>
    () {
      return target$.collapsedBackgroundColor;
    };
Function _ExpansionTile_trailing$(
  m.Scope scope$,
  ExpansionTile target$,
) =>
    () {
      return target$.trailing;
    };
Function _ExpansionTile_initiallyExpanded$(
  m.Scope scope$,
  ExpansionTile target$,
) =>
    () {
      return target$.initiallyExpanded;
    };
Function _ExpansionTile_maintainState$(
  m.Scope scope$,
  ExpansionTile target$,
) =>
    () {
      return target$.maintainState;
    };
Function _ExpansionTile_tilePadding$(
  m.Scope scope$,
  ExpansionTile target$,
) =>
    () {
      return target$.tilePadding;
    };
Function _ExpansionTile_expandedAlignment$(
  m.Scope scope$,
  ExpansionTile target$,
) =>
    () {
      return target$.expandedAlignment;
    };
Function _ExpansionTile_expandedCrossAxisAlignment$(
  m.Scope scope$,
  ExpansionTile target$,
) =>
    () {
      return target$.expandedCrossAxisAlignment;
    };
Function _ExpansionTile_childrenPadding$(
  m.Scope scope$,
  ExpansionTile target$,
) =>
    () {
      return target$.childrenPadding;
    };
Function _ExpansionTile_iconColor$(
  m.Scope scope$,
  ExpansionTile target$,
) =>
    () {
      return target$.iconColor;
    };
Function _ExpansionTile_collapsedIconColor$(
  m.Scope scope$,
  ExpansionTile target$,
) =>
    () {
      return target$.collapsedIconColor;
    };
Function _ExpansionTile_textColor$(
  m.Scope scope$,
  ExpansionTile target$,
) =>
    () {
      return target$.textColor;
    };
Function _ExpansionTile_collapsedTextColor$(
  m.Scope scope$,
  ExpansionTile target$,
) =>
    () {
      return target$.collapsedTextColor;
    };
Function _ExpansionTile_shape$(
  m.Scope scope$,
  ExpansionTile target$,
) =>
    () {
      return target$.shape;
    };
Function _ExpansionTile_collapsedShape$(
  m.Scope scope$,
  ExpansionTile target$,
) =>
    () {
      return target$.collapsedShape;
    };
Function _ExpansionTile_clipBehavior$(
  m.Scope scope$,
  ExpansionTile target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _ExpansionTile_controlAffinity$(
  m.Scope scope$,
  ExpansionTile target$,
) =>
    () {
      return target$.controlAffinity;
    };
Function _ExpansionTile_controller$(
  m.Scope scope$,
  ExpansionTile target$,
) =>
    () {
      return target$.controller;
    };
Function _ExpansionTile__$(m.Scope scope$) => ({
      Key? key,
      Widget? leading,
      required Widget title,
      Widget? subtitle,
      m.FunctionPointer? onExpansionChanged,
      List? children,
      Widget? trailing,
      bool? initiallyExpanded,
      bool? maintainState,
      EdgeInsetsGeometry? tilePadding,
      CrossAxisAlignment? expandedCrossAxisAlignment,
      Alignment? expandedAlignment,
      EdgeInsetsGeometry? childrenPadding,
      Color? backgroundColor,
      Color? collapsedBackgroundColor,
      Color? textColor,
      Color? collapsedTextColor,
      Color? iconColor,
      Color? collapsedIconColor,
      ShapeBorder? shape,
      ShapeBorder? collapsedShape,
      Clip? clipBehavior,
      ListTileControlAffinity? controlAffinity,
      ExpansionTileController? controller,
    }) {
      void onExpansionChangedProxy(bool onExpansionChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onExpansionChanged!,
            [onExpansionChanged_value$],
            {},
          );
      return ExpansionTile(
        backgroundColor: backgroundColor,
        children: children == null ? const <Widget>[] : List.from(children),
        childrenPadding: childrenPadding,
        clipBehavior: clipBehavior,
        collapsedBackgroundColor: collapsedBackgroundColor,
        collapsedIconColor: collapsedIconColor,
        collapsedShape: collapsedShape,
        collapsedTextColor: collapsedTextColor,
        controlAffinity: controlAffinity,
        controller: controller,
        expandedAlignment: expandedAlignment,
        expandedCrossAxisAlignment: expandedCrossAxisAlignment,
        iconColor: iconColor,
        initiallyExpanded: initiallyExpanded ?? false,
        key: key,
        leading: leading,
        maintainState: maintainState ?? false,
        onExpansionChanged:
            onExpansionChanged == null ? null : onExpansionChangedProxy,
        shape: shape,
        subtitle: subtitle,
        textColor: textColor,
        tilePadding: tilePadding,
        title: title,
        trailing: trailing,
      );
    };
Function _ExpansionTile_createState$(
  m.Scope scope$,
  ExpansionTile target$,
) =>
    target$.createState;
