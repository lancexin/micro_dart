// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/scheduler/priority.dart';
import 'package:flutter/foundation.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/scheduler/priority.dart',
  {
    'Priority.idle': _Priority_idle$,
    'Priority.animation': _Priority_animation$,
    'Priority.touch': _Priority_touch$,
    'Priority.kMaxOffset': _Priority_kMaxOffset$,
  },
  {},
  {
    'Priority': m.ClassMirror(
      'Priority',
      {
        '#as': Priority_as$,
        '#is': Priority_is$,
        'value': _Priority_value$,
        '+': _Priority_plus$$,
        '-': _Priority_minus$$,
      },
      {},
    )
  },
);
Function Priority_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Priority;
Function Priority_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Priority;
Priority _Priority_idle$() {
  return Priority.idle;
}

Priority _Priority_animation$() {
  return Priority.animation;
}

Priority _Priority_touch$() {
  return Priority.touch;
}

int _Priority_kMaxOffset$() {
  return Priority.kMaxOffset;
}

Function _Priority_value$(
  m.Scope scope$,
  Priority target$,
) =>
    () {
      return target$.value;
    };
Function _Priority_plus$$(
  m.Scope scope$,
  Priority target$,
) =>
    (int other$) => target$ + other$;
Function _Priority_minus$$(
  m.Scope scope$,
  Priority target$,
) =>
    (int other$) => target$ - other$;
