// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/gestures/drag_details.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/gestures/velocity_tracker.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/gestures/drag_details.dart',
  {},
  {},
  {
    'DragDownDetails': m.ClassMirror(
      'DragDownDetails',
      {
        '#as': DragDownDetails_as$,
        '#is': DragDownDetails_is$,
        'globalPosition': _DragDownDetails_globalPosition$,
        'localPosition': _DragDownDetails_localPosition$,
        'toString': _DragDownDetails_toString$,
      },
      {},
    ),
    'DragStartDetails': m.ClassMirror(
      'DragStartDetails',
      {
        '#as': DragStartDetails_as$,
        '#is': DragStartDetails_is$,
        'sourceTimeStamp': _DragStartDetails_sourceTimeStamp$,
        'globalPosition': _DragStartDetails_globalPosition$,
        'localPosition': _DragStartDetails_localPosition$,
        'kind': _DragStartDetails_kind$,
        'toString': _DragStartDetails_toString$,
      },
      {},
    ),
    'DragUpdateDetails': m.ClassMirror(
      'DragUpdateDetails',
      {
        '#as': DragUpdateDetails_as$,
        '#is': DragUpdateDetails_is$,
        'sourceTimeStamp': _DragUpdateDetails_sourceTimeStamp$,
        'delta': _DragUpdateDetails_delta$,
        'primaryDelta': _DragUpdateDetails_primaryDelta$,
        'globalPosition': _DragUpdateDetails_globalPosition$,
        'localPosition': _DragUpdateDetails_localPosition$,
        'toString': _DragUpdateDetails_toString$,
      },
      {},
    ),
    'DragEndDetails': m.ClassMirror(
      'DragEndDetails',
      {
        '#as': DragEndDetails_as$,
        '#is': DragEndDetails_is$,
        'velocity': _DragEndDetails_velocity$,
        'primaryVelocity': _DragEndDetails_primaryVelocity$,
        'toString': _DragEndDetails_toString$,
      },
      {},
    ),
  },
);
Function DragDownDetails_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DragDownDetails;
Function DragDownDetails_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DragDownDetails;
Offset _DragDownDetails_globalPosition$(DragDownDetails target) {
  return target.globalPosition;
}

Offset _DragDownDetails_localPosition$(DragDownDetails target) {
  return target.localPosition;
}

Function _DragDownDetails_toString$(
  m.Scope scope,
  DragDownDetails target,
) =>
    target.toString;
Function DragStartDetails_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DragStartDetails;
Function DragStartDetails_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DragStartDetails;
Duration? _DragStartDetails_sourceTimeStamp$(DragStartDetails target) {
  return target.sourceTimeStamp;
}

Offset _DragStartDetails_globalPosition$(DragStartDetails target) {
  return target.globalPosition;
}

Offset _DragStartDetails_localPosition$(DragStartDetails target) {
  return target.localPosition;
}

PointerDeviceKind? _DragStartDetails_kind$(DragStartDetails target) {
  return target.kind;
}

Function _DragStartDetails_toString$(
  m.Scope scope,
  DragStartDetails target,
) =>
    target.toString;
Function DragUpdateDetails_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DragUpdateDetails;
Function DragUpdateDetails_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DragUpdateDetails;
Duration? _DragUpdateDetails_sourceTimeStamp$(DragUpdateDetails target) {
  return target.sourceTimeStamp;
}

Offset _DragUpdateDetails_delta$(DragUpdateDetails target) {
  return target.delta;
}

double? _DragUpdateDetails_primaryDelta$(DragUpdateDetails target) {
  return target.primaryDelta;
}

Offset _DragUpdateDetails_globalPosition$(DragUpdateDetails target) {
  return target.globalPosition;
}

Offset _DragUpdateDetails_localPosition$(DragUpdateDetails target) {
  return target.localPosition;
}

Function _DragUpdateDetails_toString$(
  m.Scope scope,
  DragUpdateDetails target,
) =>
    target.toString;
Function DragEndDetails_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DragEndDetails;
Function DragEndDetails_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DragEndDetails;
Velocity _DragEndDetails_velocity$(DragEndDetails target) {
  return target.velocity;
}

double? _DragEndDetails_primaryVelocity$(DragEndDetails target) {
  return target.primaryVelocity;
}

Function _DragEndDetails_toString$(
  m.Scope scope,
  DragEndDetails target,
) =>
    target.toString;
