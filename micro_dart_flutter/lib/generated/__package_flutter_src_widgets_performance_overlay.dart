// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/performance_overlay.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/performance_overlay.dart',
  {},
  {},
  {
    'PerformanceOverlay': m.ClassMirror(
      'PerformanceOverlay',
      {
        '#as': PerformanceOverlay_as$,
        '#is': PerformanceOverlay_is$,
        'optionsMask': _PerformanceOverlay_optionsMask$,
        'rasterizerThreshold': _PerformanceOverlay_rasterizerThreshold$,
        'checkerboardRasterCacheImages':
            _PerformanceOverlay_checkerboardRasterCacheImages$,
        'checkerboardOffscreenLayers':
            _PerformanceOverlay_checkerboardOffscreenLayers$,
        'createRenderObject': _PerformanceOverlay_createRenderObject$,
        'updateRenderObject': _PerformanceOverlay_updateRenderObject$,
      },
      {},
    )
  },
);
Function PerformanceOverlay_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as PerformanceOverlay;
Function PerformanceOverlay_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is PerformanceOverlay;
int _PerformanceOverlay_optionsMask$(PerformanceOverlay target) {
  return target.optionsMask;
}

int _PerformanceOverlay_rasterizerThreshold$(PerformanceOverlay target) {
  return target.rasterizerThreshold;
}

bool _PerformanceOverlay_checkerboardRasterCacheImages$(
    PerformanceOverlay target) {
  return target.checkerboardRasterCacheImages;
}

bool _PerformanceOverlay_checkerboardOffscreenLayers$(
    PerformanceOverlay target) {
  return target.checkerboardOffscreenLayers;
}

Function _PerformanceOverlay_createRenderObject$(
  m.Scope scope,
  PerformanceOverlay target,
) =>
    target.createRenderObject;
Function _PerformanceOverlay_updateRenderObject$(
  m.Scope scope,
  PerformanceOverlay target,
) =>
    target.updateRenderObject;
