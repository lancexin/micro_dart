// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/performance_overlay.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/performance_overlay.dart',
  {
    'PerformanceOverlay.': _PerformanceOverlay__$,
    'PerformanceOverlay.allEnabled': _PerformanceOverlay_allEnabled_$,
  },
  {},
  {
    'PerformanceOverlay': m.ClassMirror(
      'PerformanceOverlay',
      {
        '#as': PerformanceOverlay_as$,
        '#is': PerformanceOverlay_is$,
        'optionsMask': _PerformanceOverlay_optionsMask$,
        'rasterizerThreshold': _PerformanceOverlay_rasterizerThreshold$,
        'checkerboardRasterCacheImages':
            _PerformanceOverlay_checkerboardRasterCacheImages$,
        'checkerboardOffscreenLayers':
            _PerformanceOverlay_checkerboardOffscreenLayers$,
        'createRenderObject': _PerformanceOverlay_createRenderObject$,
        'updateRenderObject': _PerformanceOverlay_updateRenderObject$,
      },
      {},
    )
  },
);
Function PerformanceOverlay_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PerformanceOverlay;
Function PerformanceOverlay_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PerformanceOverlay;
Function _PerformanceOverlay_optionsMask$(
  m.Scope scope$,
  PerformanceOverlay target$,
) =>
    () {
      return target$.optionsMask;
    };
Function _PerformanceOverlay_rasterizerThreshold$(
  m.Scope scope$,
  PerformanceOverlay target$,
) =>
    () {
      return target$.rasterizerThreshold;
    };
Function _PerformanceOverlay_checkerboardRasterCacheImages$(
  m.Scope scope$,
  PerformanceOverlay target$,
) =>
    () {
      return target$.checkerboardRasterCacheImages;
    };
Function _PerformanceOverlay_checkerboardOffscreenLayers$(
  m.Scope scope$,
  PerformanceOverlay target$,
) =>
    () {
      return target$.checkerboardOffscreenLayers;
    };
Function _PerformanceOverlay__$(m.Scope scope$) => ({
      Key? key,
      int? optionsMask,
      int? rasterizerThreshold,
      bool? checkerboardRasterCacheImages,
      bool? checkerboardOffscreenLayers,
    }) {
      return PerformanceOverlay(
        checkerboardOffscreenLayers: checkerboardOffscreenLayers ?? false,
        checkerboardRasterCacheImages: checkerboardRasterCacheImages ?? false,
        key: key,
        optionsMask: optionsMask ?? 0,
        rasterizerThreshold: rasterizerThreshold ?? 0,
      );
    };
Function _PerformanceOverlay_allEnabled_$(m.Scope scope$) =>
    PerformanceOverlay.allEnabled;
Function _PerformanceOverlay_createRenderObject$(
  m.Scope scope$,
  PerformanceOverlay target$,
) =>
    target$.createRenderObject;
Function _PerformanceOverlay_updateRenderObject$(
  m.Scope scope$,
  PerformanceOverlay target$,
) =>
    target$.updateRenderObject;
