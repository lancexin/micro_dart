// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/undo_manager.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/undo_manager.dart',
  {
    'UndoManager.client': _UndoManager_client$,
    'UndoManager.setChannel': _UndoManager_setChannel$,
    'UndoManager.setUndoState': _UndoManager_setUndoState$,
    'UndoDirection.undo': _UndoDirection_undo$,
    'UndoDirection.redo': _UndoDirection_redo$,
    'UndoDirection.values': _UndoDirection_values$,
  },
  {'UndoManager.client': _UndoManager_client_set$},
  {
    'UndoManager': m.ClassMirror(
      'UndoManager',
      {},
      {},
    ),
    'UndoDirection': m.ClassMirror(
      'UndoDirection',
      {},
      {},
    ),
  },
);
void _UndoManager_client_set$(UndoManagerClient? other) {
  UndoManager.client = other;
}

UndoManagerClient? _UndoManager_client$() {
  return UndoManager.client;
}

Function _UndoManager_setChannel$(m.Scope scope) => UndoManager.setChannel;
Function _UndoManager_setUndoState$(m.Scope scope) => UndoManager.setUndoState;
UndoDirection _UndoDirection_undo$() {
  return UndoDirection.undo;
}

UndoDirection _UndoDirection_redo$() {
  return UndoDirection.redo;
}

List<UndoDirection> _UndoDirection_values$() {
  return UndoDirection.values;
}
