// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/chip.dart';
import 'dart:math';
import 'package:flutter/foundation.dart' show clampDouble;
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/chip_theme.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/material_state_mixin.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/material/tooltip.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/chip.dart',
  {
    'Chip.': _Chip__$,
    'RawChip.': _RawChip__$,
  },
  {},
  {
    'ChipAttributes': m.ClassMirror(
      'ChipAttributes',
      {
        '#as': ChipAttributes_as$,
        '#is': ChipAttributes_is$,
        'label': _ChipAttributes_label$,
        'avatar': _ChipAttributes_avatar$,
        'labelStyle': _ChipAttributes_labelStyle$,
        'side': _ChipAttributes_side$,
        'shape': _ChipAttributes_shape$,
        'clipBehavior': _ChipAttributes_clipBehavior$,
        'focusNode': _ChipAttributes_focusNode$,
        'autofocus': _ChipAttributes_autofocus$,
        'backgroundColor': _ChipAttributes_backgroundColor$,
        'padding': _ChipAttributes_padding$,
        'visualDensity': _ChipAttributes_visualDensity$,
        'labelPadding': _ChipAttributes_labelPadding$,
        'materialTapTargetSize': _ChipAttributes_materialTapTargetSize$,
        'elevation': _ChipAttributes_elevation$,
        'shadowColor': _ChipAttributes_shadowColor$,
        'surfaceTintColor': _ChipAttributes_surfaceTintColor$,
        'iconTheme': _ChipAttributes_iconTheme$,
      },
      {},
    ),
    'DeletableChipAttributes': m.ClassMirror(
      'DeletableChipAttributes',
      {
        '#as': DeletableChipAttributes_as$,
        '#is': DeletableChipAttributes_is$,
        'deleteIcon': _DeletableChipAttributes_deleteIcon$,
        'onDeleted': _DeletableChipAttributes_onDeleted$,
        'deleteIconColor': _DeletableChipAttributes_deleteIconColor$,
        'deleteButtonTooltipMessage':
            _DeletableChipAttributes_deleteButtonTooltipMessage$,
      },
      {},
    ),
    'CheckmarkableChipAttributes': m.ClassMirror(
      'CheckmarkableChipAttributes',
      {
        '#as': CheckmarkableChipAttributes_as$,
        '#is': CheckmarkableChipAttributes_is$,
        'showCheckmark': _CheckmarkableChipAttributes_showCheckmark$,
        'checkmarkColor': _CheckmarkableChipAttributes_checkmarkColor$,
      },
      {},
    ),
    'SelectableChipAttributes': m.ClassMirror(
      'SelectableChipAttributes',
      {
        '#as': SelectableChipAttributes_as$,
        '#is': SelectableChipAttributes_is$,
        'selected': _SelectableChipAttributes_selected$,
        'onSelected': _SelectableChipAttributes_onSelected$,
        'pressElevation': _SelectableChipAttributes_pressElevation$,
        'selectedColor': _SelectableChipAttributes_selectedColor$,
        'selectedShadowColor': _SelectableChipAttributes_selectedShadowColor$,
        'tooltip': _SelectableChipAttributes_tooltip$,
        'avatarBorder': _SelectableChipAttributes_avatarBorder$,
      },
      {},
    ),
    'DisabledChipAttributes': m.ClassMirror(
      'DisabledChipAttributes',
      {
        '#as': DisabledChipAttributes_as$,
        '#is': DisabledChipAttributes_is$,
        'isEnabled': _DisabledChipAttributes_isEnabled$,
        'disabledColor': _DisabledChipAttributes_disabledColor$,
      },
      {},
    ),
    'TappableChipAttributes': m.ClassMirror(
      'TappableChipAttributes',
      {
        '#as': TappableChipAttributes_as$,
        '#is': TappableChipAttributes_is$,
        'onPressed': _TappableChipAttributes_onPressed$,
        'pressElevation': _TappableChipAttributes_pressElevation$,
        'tooltip': _TappableChipAttributes_tooltip$,
      },
      {},
    ),
    'Chip': m.ClassMirror(
      'Chip',
      {
        '#as': Chip_as$,
        '#is': Chip_is$,
        'avatar': _Chip_avatar$,
        'label': _Chip_label$,
        'labelStyle': _Chip_labelStyle$,
        'labelPadding': _Chip_labelPadding$,
        'side': _Chip_side$,
        'shape': _Chip_shape$,
        'clipBehavior': _Chip_clipBehavior$,
        'focusNode': _Chip_focusNode$,
        'autofocus': _Chip_autofocus$,
        'backgroundColor': _Chip_backgroundColor$,
        'padding': _Chip_padding$,
        'visualDensity': _Chip_visualDensity$,
        'deleteIcon': _Chip_deleteIcon$,
        'onDeleted': _Chip_onDeleted$,
        'deleteIconColor': _Chip_deleteIconColor$,
        'deleteButtonTooltipMessage': _Chip_deleteButtonTooltipMessage$,
        'materialTapTargetSize': _Chip_materialTapTargetSize$,
        'elevation': _Chip_elevation$,
        'shadowColor': _Chip_shadowColor$,
        'surfaceTintColor': _Chip_surfaceTintColor$,
        'iconTheme': _Chip_iconTheme$,
        'useDeleteButtonTooltip': _Chip_useDeleteButtonTooltip$,
        'build': _Chip_build$,
      },
      {},
    ),
    'RawChip': m.ClassMirror(
      'RawChip',
      {
        '#as': RawChip_as$,
        '#is': RawChip_is$,
        'defaultProperties': _RawChip_defaultProperties$,
        'avatar': _RawChip_avatar$,
        'label': _RawChip_label$,
        'labelStyle': _RawChip_labelStyle$,
        'labelPadding': _RawChip_labelPadding$,
        'deleteIcon': _RawChip_deleteIcon$,
        'onDeleted': _RawChip_onDeleted$,
        'deleteIconColor': _RawChip_deleteIconColor$,
        'deleteButtonTooltipMessage': _RawChip_deleteButtonTooltipMessage$,
        'onSelected': _RawChip_onSelected$,
        'onPressed': _RawChip_onPressed$,
        'pressElevation': _RawChip_pressElevation$,
        'selected': _RawChip_selected$,
        'isEnabled': _RawChip_isEnabled$,
        'disabledColor': _RawChip_disabledColor$,
        'selectedColor': _RawChip_selectedColor$,
        'tooltip': _RawChip_tooltip$,
        'side': _RawChip_side$,
        'shape': _RawChip_shape$,
        'clipBehavior': _RawChip_clipBehavior$,
        'focusNode': _RawChip_focusNode$,
        'autofocus': _RawChip_autofocus$,
        'backgroundColor': _RawChip_backgroundColor$,
        'padding': _RawChip_padding$,
        'visualDensity': _RawChip_visualDensity$,
        'materialTapTargetSize': _RawChip_materialTapTargetSize$,
        'elevation': _RawChip_elevation$,
        'shadowColor': _RawChip_shadowColor$,
        'surfaceTintColor': _RawChip_surfaceTintColor$,
        'iconTheme': _RawChip_iconTheme$,
        'selectedShadowColor': _RawChip_selectedShadowColor$,
        'showCheckmark': _RawChip_showCheckmark$,
        'checkmarkColor': _RawChip_checkmarkColor$,
        'avatarBorder': _RawChip_avatarBorder$,
        'useDeleteButtonTooltip': _RawChip_useDeleteButtonTooltip$,
        'tapEnabled': _RawChip_tapEnabled$,
        'createState': _RawChip_createState$,
      },
      {},
    ),
  },
);
Function ChipAttributes_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ChipAttributes;
Function ChipAttributes_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ChipAttributes;
Function _ChipAttributes_label$(
  m.Scope scope$,
  ChipAttributes target$,
) =>
    () {
      return target$.label;
    };
Function _ChipAttributes_avatar$(
  m.Scope scope$,
  ChipAttributes target$,
) =>
    () {
      return target$.avatar;
    };
Function _ChipAttributes_labelStyle$(
  m.Scope scope$,
  ChipAttributes target$,
) =>
    () {
      return target$.labelStyle;
    };
Function _ChipAttributes_side$(
  m.Scope scope$,
  ChipAttributes target$,
) =>
    () {
      return target$.side;
    };
Function _ChipAttributes_shape$(
  m.Scope scope$,
  ChipAttributes target$,
) =>
    () {
      return target$.shape;
    };
Function _ChipAttributes_clipBehavior$(
  m.Scope scope$,
  ChipAttributes target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _ChipAttributes_focusNode$(
  m.Scope scope$,
  ChipAttributes target$,
) =>
    () {
      return target$.focusNode;
    };
Function _ChipAttributes_autofocus$(
  m.Scope scope$,
  ChipAttributes target$,
) =>
    () {
      return target$.autofocus;
    };
Function _ChipAttributes_backgroundColor$(
  m.Scope scope$,
  ChipAttributes target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _ChipAttributes_padding$(
  m.Scope scope$,
  ChipAttributes target$,
) =>
    () {
      return target$.padding;
    };
Function _ChipAttributes_visualDensity$(
  m.Scope scope$,
  ChipAttributes target$,
) =>
    () {
      return target$.visualDensity;
    };
Function _ChipAttributes_labelPadding$(
  m.Scope scope$,
  ChipAttributes target$,
) =>
    () {
      return target$.labelPadding;
    };
Function _ChipAttributes_materialTapTargetSize$(
  m.Scope scope$,
  ChipAttributes target$,
) =>
    () {
      return target$.materialTapTargetSize;
    };
Function _ChipAttributes_elevation$(
  m.Scope scope$,
  ChipAttributes target$,
) =>
    () {
      return target$.elevation;
    };
Function _ChipAttributes_shadowColor$(
  m.Scope scope$,
  ChipAttributes target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _ChipAttributes_surfaceTintColor$(
  m.Scope scope$,
  ChipAttributes target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _ChipAttributes_iconTheme$(
  m.Scope scope$,
  ChipAttributes target$,
) =>
    () {
      return target$.iconTheme;
    };
Function DeletableChipAttributes_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DeletableChipAttributes;
Function DeletableChipAttributes_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DeletableChipAttributes;
Function _DeletableChipAttributes_deleteIcon$(
  m.Scope scope$,
  DeletableChipAttributes target$,
) =>
    () {
      return target$.deleteIcon;
    };
Function _DeletableChipAttributes_onDeleted$(
  m.Scope scope$,
  DeletableChipAttributes target$,
) =>
    () {
      return target$.onDeleted;
    };
Function _DeletableChipAttributes_deleteIconColor$(
  m.Scope scope$,
  DeletableChipAttributes target$,
) =>
    () {
      return target$.deleteIconColor;
    };
Function _DeletableChipAttributes_deleteButtonTooltipMessage$(
  m.Scope scope$,
  DeletableChipAttributes target$,
) =>
    () {
      return target$.deleteButtonTooltipMessage;
    };
Function CheckmarkableChipAttributes_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CheckmarkableChipAttributes;
Function CheckmarkableChipAttributes_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CheckmarkableChipAttributes;
Function _CheckmarkableChipAttributes_showCheckmark$(
  m.Scope scope$,
  CheckmarkableChipAttributes target$,
) =>
    () {
      return target$.showCheckmark;
    };
Function _CheckmarkableChipAttributes_checkmarkColor$(
  m.Scope scope$,
  CheckmarkableChipAttributes target$,
) =>
    () {
      return target$.checkmarkColor;
    };
Function SelectableChipAttributes_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SelectableChipAttributes;
Function SelectableChipAttributes_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SelectableChipAttributes;
Function _SelectableChipAttributes_selected$(
  m.Scope scope$,
  SelectableChipAttributes target$,
) =>
    () {
      return target$.selected;
    };
Function _SelectableChipAttributes_onSelected$(
  m.Scope scope$,
  SelectableChipAttributes target$,
) =>
    () {
      return target$.onSelected;
    };
Function _SelectableChipAttributes_pressElevation$(
  m.Scope scope$,
  SelectableChipAttributes target$,
) =>
    () {
      return target$.pressElevation;
    };
Function _SelectableChipAttributes_selectedColor$(
  m.Scope scope$,
  SelectableChipAttributes target$,
) =>
    () {
      return target$.selectedColor;
    };
Function _SelectableChipAttributes_selectedShadowColor$(
  m.Scope scope$,
  SelectableChipAttributes target$,
) =>
    () {
      return target$.selectedShadowColor;
    };
Function _SelectableChipAttributes_tooltip$(
  m.Scope scope$,
  SelectableChipAttributes target$,
) =>
    () {
      return target$.tooltip;
    };
Function _SelectableChipAttributes_avatarBorder$(
  m.Scope scope$,
  SelectableChipAttributes target$,
) =>
    () {
      return target$.avatarBorder;
    };
Function DisabledChipAttributes_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DisabledChipAttributes;
Function DisabledChipAttributes_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DisabledChipAttributes;
Function _DisabledChipAttributes_isEnabled$(
  m.Scope scope$,
  DisabledChipAttributes target$,
) =>
    () {
      return target$.isEnabled;
    };
Function _DisabledChipAttributes_disabledColor$(
  m.Scope scope$,
  DisabledChipAttributes target$,
) =>
    () {
      return target$.disabledColor;
    };
Function TappableChipAttributes_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TappableChipAttributes;
Function TappableChipAttributes_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TappableChipAttributes;
Function _TappableChipAttributes_onPressed$(
  m.Scope scope$,
  TappableChipAttributes target$,
) =>
    () {
      return target$.onPressed;
    };
Function _TappableChipAttributes_pressElevation$(
  m.Scope scope$,
  TappableChipAttributes target$,
) =>
    () {
      return target$.pressElevation;
    };
Function _TappableChipAttributes_tooltip$(
  m.Scope scope$,
  TappableChipAttributes target$,
) =>
    () {
      return target$.tooltip;
    };
Function Chip_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Chip;
Function Chip_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Chip;
Function _Chip_avatar$(
  m.Scope scope$,
  Chip target$,
) =>
    () {
      return target$.avatar;
    };
Function _Chip_label$(
  m.Scope scope$,
  Chip target$,
) =>
    () {
      return target$.label;
    };
Function _Chip_labelStyle$(
  m.Scope scope$,
  Chip target$,
) =>
    () {
      return target$.labelStyle;
    };
Function _Chip_labelPadding$(
  m.Scope scope$,
  Chip target$,
) =>
    () {
      return target$.labelPadding;
    };
Function _Chip_side$(
  m.Scope scope$,
  Chip target$,
) =>
    () {
      return target$.side;
    };
Function _Chip_shape$(
  m.Scope scope$,
  Chip target$,
) =>
    () {
      return target$.shape;
    };
Function _Chip_clipBehavior$(
  m.Scope scope$,
  Chip target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _Chip_focusNode$(
  m.Scope scope$,
  Chip target$,
) =>
    () {
      return target$.focusNode;
    };
Function _Chip_autofocus$(
  m.Scope scope$,
  Chip target$,
) =>
    () {
      return target$.autofocus;
    };
Function _Chip_backgroundColor$(
  m.Scope scope$,
  Chip target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _Chip_padding$(
  m.Scope scope$,
  Chip target$,
) =>
    () {
      return target$.padding;
    };
Function _Chip_visualDensity$(
  m.Scope scope$,
  Chip target$,
) =>
    () {
      return target$.visualDensity;
    };
Function _Chip_deleteIcon$(
  m.Scope scope$,
  Chip target$,
) =>
    () {
      return target$.deleteIcon;
    };
Function _Chip_onDeleted$(
  m.Scope scope$,
  Chip target$,
) =>
    () {
      return target$.onDeleted;
    };
Function _Chip_deleteIconColor$(
  m.Scope scope$,
  Chip target$,
) =>
    () {
      return target$.deleteIconColor;
    };
Function _Chip_deleteButtonTooltipMessage$(
  m.Scope scope$,
  Chip target$,
) =>
    () {
      return target$.deleteButtonTooltipMessage;
    };
Function _Chip_materialTapTargetSize$(
  m.Scope scope$,
  Chip target$,
) =>
    () {
      return target$.materialTapTargetSize;
    };
Function _Chip_elevation$(
  m.Scope scope$,
  Chip target$,
) =>
    () {
      return target$.elevation;
    };
Function _Chip_shadowColor$(
  m.Scope scope$,
  Chip target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _Chip_surfaceTintColor$(
  m.Scope scope$,
  Chip target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _Chip_iconTheme$(
  m.Scope scope$,
  Chip target$,
) =>
    () {
      return target$.iconTheme;
    };
Function _Chip_useDeleteButtonTooltip$(
  m.Scope scope$,
  Chip target$,
) =>
    () {
      return target$.useDeleteButtonTooltip;
    };
Function _Chip__$(m.Scope scope$) => ({
      Key? key,
      Widget? avatar,
      required Widget label,
      TextStyle? labelStyle,
      EdgeInsetsGeometry? labelPadding,
      Widget? deleteIcon,
      m.FunctionPointer? onDeleted,
      Color? deleteIconColor,
      String? deleteButtonTooltipMessage,
      BorderSide? side,
      OutlinedBorder? shape,
      Clip? clipBehavior,
      FocusNode? focusNode,
      bool? autofocus,
      Color? backgroundColor,
      EdgeInsetsGeometry? padding,
      VisualDensity? visualDensity,
      MaterialTapTargetSize? materialTapTargetSize,
      double? elevation,
      Color? shadowColor,
      Color? surfaceTintColor,
      IconThemeData? iconTheme,
      bool? useDeleteButtonTooltip,
    }) {
      void onDeletedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onDeleted!,
            [],
            {},
          );
      return Chip(
        autofocus: autofocus ?? false,
        avatar: avatar,
        backgroundColor: backgroundColor,
        clipBehavior: clipBehavior ?? Clip.none,
        deleteButtonTooltipMessage: deleteButtonTooltipMessage,
        deleteIcon: deleteIcon,
        deleteIconColor: deleteIconColor,
        elevation: elevation,
        focusNode: focusNode,
        iconTheme: iconTheme,
        key: key,
        label: label,
        labelPadding: labelPadding,
        labelStyle: labelStyle,
        materialTapTargetSize: materialTapTargetSize,
        onDeleted: onDeleted == null ? null : onDeletedProxy,
        padding: padding,
        shadowColor: shadowColor,
        shape: shape,
        side: side,
        surfaceTintColor: surfaceTintColor,
        useDeleteButtonTooltip: useDeleteButtonTooltip ?? true,
        visualDensity: visualDensity,
      );
    };
Function _Chip_build$(
  m.Scope scope$,
  Chip target$,
) =>
    target$.build;
Function RawChip_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RawChip;
Function RawChip_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RawChip;
Function _RawChip_defaultProperties$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.defaultProperties;
    };
Function _RawChip_avatar$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.avatar;
    };
Function _RawChip_label$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.label;
    };
Function _RawChip_labelStyle$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.labelStyle;
    };
Function _RawChip_labelPadding$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.labelPadding;
    };
Function _RawChip_deleteIcon$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.deleteIcon;
    };
Function _RawChip_onDeleted$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.onDeleted;
    };
Function _RawChip_deleteIconColor$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.deleteIconColor;
    };
Function _RawChip_deleteButtonTooltipMessage$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.deleteButtonTooltipMessage;
    };
Function _RawChip_onSelected$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.onSelected;
    };
Function _RawChip_onPressed$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.onPressed;
    };
Function _RawChip_pressElevation$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.pressElevation;
    };
Function _RawChip_selected$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.selected;
    };
Function _RawChip_isEnabled$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.isEnabled;
    };
Function _RawChip_disabledColor$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.disabledColor;
    };
Function _RawChip_selectedColor$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.selectedColor;
    };
Function _RawChip_tooltip$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.tooltip;
    };
Function _RawChip_side$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.side;
    };
Function _RawChip_shape$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.shape;
    };
Function _RawChip_clipBehavior$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _RawChip_focusNode$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.focusNode;
    };
Function _RawChip_autofocus$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.autofocus;
    };
Function _RawChip_backgroundColor$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _RawChip_padding$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.padding;
    };
Function _RawChip_visualDensity$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.visualDensity;
    };
Function _RawChip_materialTapTargetSize$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.materialTapTargetSize;
    };
Function _RawChip_elevation$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.elevation;
    };
Function _RawChip_shadowColor$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _RawChip_surfaceTintColor$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _RawChip_iconTheme$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.iconTheme;
    };
Function _RawChip_selectedShadowColor$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.selectedShadowColor;
    };
Function _RawChip_showCheckmark$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.showCheckmark;
    };
Function _RawChip_checkmarkColor$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.checkmarkColor;
    };
Function _RawChip_avatarBorder$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.avatarBorder;
    };
Function _RawChip_useDeleteButtonTooltip$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.useDeleteButtonTooltip;
    };
Function _RawChip_tapEnabled$(
  m.Scope scope$,
  RawChip target$,
) =>
    () {
      return target$.tapEnabled;
    };
Function _RawChip__$(m.Scope scope$) => ({
      Key? key,
      ChipThemeData? defaultProperties,
      Widget? avatar,
      required Widget label,
      TextStyle? labelStyle,
      EdgeInsetsGeometry? padding,
      VisualDensity? visualDensity,
      EdgeInsetsGeometry? labelPadding,
      Widget? deleteIcon,
      m.FunctionPointer? onDeleted,
      Color? deleteIconColor,
      String? deleteButtonTooltipMessage,
      m.FunctionPointer? onPressed,
      m.FunctionPointer? onSelected,
      double? pressElevation,
      bool? tapEnabled,
      bool? selected,
      bool? isEnabled,
      Color? disabledColor,
      Color? selectedColor,
      String? tooltip,
      BorderSide? side,
      OutlinedBorder? shape,
      Clip? clipBehavior,
      FocusNode? focusNode,
      bool? autofocus,
      Color? backgroundColor,
      MaterialTapTargetSize? materialTapTargetSize,
      double? elevation,
      Color? shadowColor,
      Color? surfaceTintColor,
      IconThemeData? iconTheme,
      Color? selectedShadowColor,
      bool? showCheckmark,
      Color? checkmarkColor,
      ShapeBorder? avatarBorder,
      bool? useDeleteButtonTooltip,
    }) {
      void onDeletedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onDeleted!,
            [],
            {},
          );
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      void onSelectedProxy(bool onSelected_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSelected!,
            [onSelected_value$],
            {},
          );
      return RawChip(
        autofocus: autofocus ?? false,
        avatar: avatar,
        avatarBorder: avatarBorder ?? const CircleBorder(),
        backgroundColor: backgroundColor,
        checkmarkColor: checkmarkColor,
        clipBehavior: clipBehavior ?? Clip.none,
        defaultProperties: defaultProperties,
        deleteButtonTooltipMessage: deleteButtonTooltipMessage,
        deleteIcon: deleteIcon,
        deleteIconColor: deleteIconColor,
        disabledColor: disabledColor,
        elevation: elevation,
        focusNode: focusNode,
        iconTheme: iconTheme,
        isEnabled: isEnabled ?? true,
        key: key,
        label: label,
        labelPadding: labelPadding,
        labelStyle: labelStyle,
        materialTapTargetSize: materialTapTargetSize,
        onDeleted: onDeleted == null ? null : onDeletedProxy,
        onPressed: onPressed == null ? null : onPressedProxy,
        onSelected: onSelected == null ? null : onSelectedProxy,
        padding: padding,
        pressElevation: pressElevation,
        selected: selected ?? false,
        selectedColor: selectedColor,
        selectedShadowColor: selectedShadowColor,
        shadowColor: shadowColor,
        shape: shape,
        showCheckmark: showCheckmark ?? true,
        side: side,
        surfaceTintColor: surfaceTintColor,
        tapEnabled: tapEnabled ?? true,
        tooltip: tooltip,
        useDeleteButtonTooltip: useDeleteButtonTooltip ?? true,
        visualDensity: visualDensity,
      );
    };
Function _RawChip_createState$(
  m.Scope scope$,
  RawChip target$,
) =>
    target$.createState;
