// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/chip.dart';
import 'dart:math';
import 'package:flutter/foundation.dart' show clampDouble;
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/chip_theme.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/material_state_mixin.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/material/tooltip.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/chip.dart',
  {},
  {},
  {
    'ChipAttributes': m.ClassMirror(
      'ChipAttributes',
      {
        'label': _ChipAttributes_label$,
        'avatar': _ChipAttributes_avatar$,
        'labelStyle': _ChipAttributes_labelStyle$,
        'side': _ChipAttributes_side$,
        'shape': _ChipAttributes_shape$,
        'clipBehavior': _ChipAttributes_clipBehavior$,
        'focusNode': _ChipAttributes_focusNode$,
        'autofocus': _ChipAttributes_autofocus$,
        'backgroundColor': _ChipAttributes_backgroundColor$,
        'padding': _ChipAttributes_padding$,
        'visualDensity': _ChipAttributes_visualDensity$,
        'labelPadding': _ChipAttributes_labelPadding$,
        'materialTapTargetSize': _ChipAttributes_materialTapTargetSize$,
        'elevation': _ChipAttributes_elevation$,
        'shadowColor': _ChipAttributes_shadowColor$,
        'surfaceTintColor': _ChipAttributes_surfaceTintColor$,
        'iconTheme': _ChipAttributes_iconTheme$,
      },
      {},
    ),
    'DeletableChipAttributes': m.ClassMirror(
      'DeletableChipAttributes',
      {
        'deleteIcon': _DeletableChipAttributes_deleteIcon$,
        'onDeleted': _DeletableChipAttributes_onDeleted$,
        'deleteIconColor': _DeletableChipAttributes_deleteIconColor$,
        'deleteButtonTooltipMessage':
            _DeletableChipAttributes_deleteButtonTooltipMessage$,
      },
      {},
    ),
    'CheckmarkableChipAttributes': m.ClassMirror(
      'CheckmarkableChipAttributes',
      {
        'showCheckmark': _CheckmarkableChipAttributes_showCheckmark$,
        'checkmarkColor': _CheckmarkableChipAttributes_checkmarkColor$,
      },
      {},
    ),
    'SelectableChipAttributes': m.ClassMirror(
      'SelectableChipAttributes',
      {
        'selected': _SelectableChipAttributes_selected$,
        'onSelected': _SelectableChipAttributes_onSelected$,
        'pressElevation': _SelectableChipAttributes_pressElevation$,
        'selectedColor': _SelectableChipAttributes_selectedColor$,
        'selectedShadowColor': _SelectableChipAttributes_selectedShadowColor$,
        'tooltip': _SelectableChipAttributes_tooltip$,
        'avatarBorder': _SelectableChipAttributes_avatarBorder$,
      },
      {},
    ),
    'DisabledChipAttributes': m.ClassMirror(
      'DisabledChipAttributes',
      {
        'isEnabled': _DisabledChipAttributes_isEnabled$,
        'disabledColor': _DisabledChipAttributes_disabledColor$,
      },
      {},
    ),
    'TappableChipAttributes': m.ClassMirror(
      'TappableChipAttributes',
      {
        'onPressed': _TappableChipAttributes_onPressed$,
        'pressElevation': _TappableChipAttributes_pressElevation$,
        'tooltip': _TappableChipAttributes_tooltip$,
      },
      {},
    ),
    'Chip': m.ClassMirror(
      'Chip',
      {
        'avatar': _Chip_avatar$,
        'label': _Chip_label$,
        'labelStyle': _Chip_labelStyle$,
        'labelPadding': _Chip_labelPadding$,
        'side': _Chip_side$,
        'shape': _Chip_shape$,
        'clipBehavior': _Chip_clipBehavior$,
        'focusNode': _Chip_focusNode$,
        'autofocus': _Chip_autofocus$,
        'backgroundColor': _Chip_backgroundColor$,
        'padding': _Chip_padding$,
        'visualDensity': _Chip_visualDensity$,
        'deleteIcon': _Chip_deleteIcon$,
        'onDeleted': _Chip_onDeleted$,
        'deleteIconColor': _Chip_deleteIconColor$,
        'deleteButtonTooltipMessage': _Chip_deleteButtonTooltipMessage$,
        'materialTapTargetSize': _Chip_materialTapTargetSize$,
        'elevation': _Chip_elevation$,
        'shadowColor': _Chip_shadowColor$,
        'surfaceTintColor': _Chip_surfaceTintColor$,
        'iconTheme': _Chip_iconTheme$,
        'useDeleteButtonTooltip': _Chip_useDeleteButtonTooltip$,
        'build': _Chip_build$,
      },
      {},
    ),
    'RawChip': m.ClassMirror(
      'RawChip',
      {
        'defaultProperties': _RawChip_defaultProperties$,
        'avatar': _RawChip_avatar$,
        'label': _RawChip_label$,
        'labelStyle': _RawChip_labelStyle$,
        'labelPadding': _RawChip_labelPadding$,
        'deleteIcon': _RawChip_deleteIcon$,
        'onDeleted': _RawChip_onDeleted$,
        'deleteIconColor': _RawChip_deleteIconColor$,
        'deleteButtonTooltipMessage': _RawChip_deleteButtonTooltipMessage$,
        'onSelected': _RawChip_onSelected$,
        'onPressed': _RawChip_onPressed$,
        'pressElevation': _RawChip_pressElevation$,
        'selected': _RawChip_selected$,
        'isEnabled': _RawChip_isEnabled$,
        'disabledColor': _RawChip_disabledColor$,
        'selectedColor': _RawChip_selectedColor$,
        'tooltip': _RawChip_tooltip$,
        'side': _RawChip_side$,
        'shape': _RawChip_shape$,
        'clipBehavior': _RawChip_clipBehavior$,
        'focusNode': _RawChip_focusNode$,
        'autofocus': _RawChip_autofocus$,
        'backgroundColor': _RawChip_backgroundColor$,
        'padding': _RawChip_padding$,
        'visualDensity': _RawChip_visualDensity$,
        'materialTapTargetSize': _RawChip_materialTapTargetSize$,
        'elevation': _RawChip_elevation$,
        'shadowColor': _RawChip_shadowColor$,
        'surfaceTintColor': _RawChip_surfaceTintColor$,
        'iconTheme': _RawChip_iconTheme$,
        'selectedShadowColor': _RawChip_selectedShadowColor$,
        'showCheckmark': _RawChip_showCheckmark$,
        'checkmarkColor': _RawChip_checkmarkColor$,
        'avatarBorder': _RawChip_avatarBorder$,
        'useDeleteButtonTooltip': _RawChip_useDeleteButtonTooltip$,
        'tapEnabled': _RawChip_tapEnabled$,
        'createState': _RawChip_createState$,
      },
      {},
    ),
  },
);
Widget _ChipAttributes_label$(ChipAttributes target) {
  return target.label;
}

Widget? _ChipAttributes_avatar$(ChipAttributes target) {
  return target.avatar;
}

TextStyle? _ChipAttributes_labelStyle$(ChipAttributes target) {
  return target.labelStyle;
}

BorderSide? _ChipAttributes_side$(ChipAttributes target) {
  return target.side;
}

OutlinedBorder? _ChipAttributes_shape$(ChipAttributes target) {
  return target.shape;
}

Clip _ChipAttributes_clipBehavior$(ChipAttributes target) {
  return target.clipBehavior;
}

FocusNode? _ChipAttributes_focusNode$(ChipAttributes target) {
  return target.focusNode;
}

bool _ChipAttributes_autofocus$(ChipAttributes target) {
  return target.autofocus;
}

Color? _ChipAttributes_backgroundColor$(ChipAttributes target) {
  return target.backgroundColor;
}

EdgeInsetsGeometry? _ChipAttributes_padding$(ChipAttributes target) {
  return target.padding;
}

VisualDensity? _ChipAttributes_visualDensity$(ChipAttributes target) {
  return target.visualDensity;
}

EdgeInsetsGeometry? _ChipAttributes_labelPadding$(ChipAttributes target) {
  return target.labelPadding;
}

MaterialTapTargetSize? _ChipAttributes_materialTapTargetSize$(
    ChipAttributes target) {
  return target.materialTapTargetSize;
}

double? _ChipAttributes_elevation$(ChipAttributes target) {
  return target.elevation;
}

Color? _ChipAttributes_shadowColor$(ChipAttributes target) {
  return target.shadowColor;
}

Color? _ChipAttributes_surfaceTintColor$(ChipAttributes target) {
  return target.surfaceTintColor;
}

IconThemeData? _ChipAttributes_iconTheme$(ChipAttributes target) {
  return target.iconTheme;
}

Widget? _DeletableChipAttributes_deleteIcon$(DeletableChipAttributes target) {
  return target.deleteIcon;
}

void Function()? _DeletableChipAttributes_onDeleted$(
    DeletableChipAttributes target) {
  return target.onDeleted;
}

Color? _DeletableChipAttributes_deleteIconColor$(
    DeletableChipAttributes target) {
  return target.deleteIconColor;
}

String? _DeletableChipAttributes_deleteButtonTooltipMessage$(
    DeletableChipAttributes target) {
  return target.deleteButtonTooltipMessage;
}

bool? _CheckmarkableChipAttributes_showCheckmark$(
    CheckmarkableChipAttributes target) {
  return target.showCheckmark;
}

Color? _CheckmarkableChipAttributes_checkmarkColor$(
    CheckmarkableChipAttributes target) {
  return target.checkmarkColor;
}

bool _SelectableChipAttributes_selected$(SelectableChipAttributes target) {
  return target.selected;
}

void Function(bool)? _SelectableChipAttributes_onSelected$(
    SelectableChipAttributes target) {
  return target.onSelected;
}

double? _SelectableChipAttributes_pressElevation$(
    SelectableChipAttributes target) {
  return target.pressElevation;
}

Color? _SelectableChipAttributes_selectedColor$(
    SelectableChipAttributes target) {
  return target.selectedColor;
}

Color? _SelectableChipAttributes_selectedShadowColor$(
    SelectableChipAttributes target) {
  return target.selectedShadowColor;
}

String? _SelectableChipAttributes_tooltip$(SelectableChipAttributes target) {
  return target.tooltip;
}

ShapeBorder _SelectableChipAttributes_avatarBorder$(
    SelectableChipAttributes target) {
  return target.avatarBorder;
}

bool _DisabledChipAttributes_isEnabled$(DisabledChipAttributes target) {
  return target.isEnabled;
}

Color? _DisabledChipAttributes_disabledColor$(DisabledChipAttributes target) {
  return target.disabledColor;
}

void Function()? _TappableChipAttributes_onPressed$(
    TappableChipAttributes target) {
  return target.onPressed;
}

double? _TappableChipAttributes_pressElevation$(TappableChipAttributes target) {
  return target.pressElevation;
}

String? _TappableChipAttributes_tooltip$(TappableChipAttributes target) {
  return target.tooltip;
}

Widget? _Chip_avatar$(Chip target) {
  return target.avatar;
}

Widget _Chip_label$(Chip target) {
  return target.label;
}

TextStyle? _Chip_labelStyle$(Chip target) {
  return target.labelStyle;
}

EdgeInsetsGeometry? _Chip_labelPadding$(Chip target) {
  return target.labelPadding;
}

BorderSide? _Chip_side$(Chip target) {
  return target.side;
}

OutlinedBorder? _Chip_shape$(Chip target) {
  return target.shape;
}

Clip _Chip_clipBehavior$(Chip target) {
  return target.clipBehavior;
}

FocusNode? _Chip_focusNode$(Chip target) {
  return target.focusNode;
}

bool _Chip_autofocus$(Chip target) {
  return target.autofocus;
}

Color? _Chip_backgroundColor$(Chip target) {
  return target.backgroundColor;
}

EdgeInsetsGeometry? _Chip_padding$(Chip target) {
  return target.padding;
}

VisualDensity? _Chip_visualDensity$(Chip target) {
  return target.visualDensity;
}

Widget? _Chip_deleteIcon$(Chip target) {
  return target.deleteIcon;
}

void Function()? _Chip_onDeleted$(Chip target) {
  return target.onDeleted;
}

Color? _Chip_deleteIconColor$(Chip target) {
  return target.deleteIconColor;
}

String? _Chip_deleteButtonTooltipMessage$(Chip target) {
  return target.deleteButtonTooltipMessage;
}

MaterialTapTargetSize? _Chip_materialTapTargetSize$(Chip target) {
  return target.materialTapTargetSize;
}

double? _Chip_elevation$(Chip target) {
  return target.elevation;
}

Color? _Chip_shadowColor$(Chip target) {
  return target.shadowColor;
}

Color? _Chip_surfaceTintColor$(Chip target) {
  return target.surfaceTintColor;
}

IconThemeData? _Chip_iconTheme$(Chip target) {
  return target.iconTheme;
}

bool _Chip_useDeleteButtonTooltip$(Chip target) {
  return target.useDeleteButtonTooltip;
}

Function _Chip_build$(
  m.Scope scope,
  Chip target,
) =>
    target.build;
ChipThemeData? _RawChip_defaultProperties$(RawChip target) {
  return target.defaultProperties;
}

Widget? _RawChip_avatar$(RawChip target) {
  return target.avatar;
}

Widget _RawChip_label$(RawChip target) {
  return target.label;
}

TextStyle? _RawChip_labelStyle$(RawChip target) {
  return target.labelStyle;
}

EdgeInsetsGeometry? _RawChip_labelPadding$(RawChip target) {
  return target.labelPadding;
}

Widget _RawChip_deleteIcon$(RawChip target) {
  return target.deleteIcon;
}

void Function()? _RawChip_onDeleted$(RawChip target) {
  return target.onDeleted;
}

Color? _RawChip_deleteIconColor$(RawChip target) {
  return target.deleteIconColor;
}

String? _RawChip_deleteButtonTooltipMessage$(RawChip target) {
  return target.deleteButtonTooltipMessage;
}

void Function(bool)? _RawChip_onSelected$(RawChip target) {
  return target.onSelected;
}

void Function()? _RawChip_onPressed$(RawChip target) {
  return target.onPressed;
}

double? _RawChip_pressElevation$(RawChip target) {
  return target.pressElevation;
}

bool _RawChip_selected$(RawChip target) {
  return target.selected;
}

bool _RawChip_isEnabled$(RawChip target) {
  return target.isEnabled;
}

Color? _RawChip_disabledColor$(RawChip target) {
  return target.disabledColor;
}

Color? _RawChip_selectedColor$(RawChip target) {
  return target.selectedColor;
}

String? _RawChip_tooltip$(RawChip target) {
  return target.tooltip;
}

BorderSide? _RawChip_side$(RawChip target) {
  return target.side;
}

OutlinedBorder? _RawChip_shape$(RawChip target) {
  return target.shape;
}

Clip _RawChip_clipBehavior$(RawChip target) {
  return target.clipBehavior;
}

FocusNode? _RawChip_focusNode$(RawChip target) {
  return target.focusNode;
}

bool _RawChip_autofocus$(RawChip target) {
  return target.autofocus;
}

Color? _RawChip_backgroundColor$(RawChip target) {
  return target.backgroundColor;
}

EdgeInsetsGeometry? _RawChip_padding$(RawChip target) {
  return target.padding;
}

VisualDensity? _RawChip_visualDensity$(RawChip target) {
  return target.visualDensity;
}

MaterialTapTargetSize? _RawChip_materialTapTargetSize$(RawChip target) {
  return target.materialTapTargetSize;
}

double? _RawChip_elevation$(RawChip target) {
  return target.elevation;
}

Color? _RawChip_shadowColor$(RawChip target) {
  return target.shadowColor;
}

Color? _RawChip_surfaceTintColor$(RawChip target) {
  return target.surfaceTintColor;
}

IconThemeData? _RawChip_iconTheme$(RawChip target) {
  return target.iconTheme;
}

Color? _RawChip_selectedShadowColor$(RawChip target) {
  return target.selectedShadowColor;
}

bool? _RawChip_showCheckmark$(RawChip target) {
  return target.showCheckmark;
}

Color? _RawChip_checkmarkColor$(RawChip target) {
  return target.checkmarkColor;
}

ShapeBorder _RawChip_avatarBorder$(RawChip target) {
  return target.avatarBorder;
}

bool _RawChip_useDeleteButtonTooltip$(RawChip target) {
  return target.useDeleteButtonTooltip;
}

bool _RawChip_tapEnabled$(RawChip target) {
  return target.tapEnabled;
}

Function _RawChip_createState$(
  m.Scope scope,
  RawChip target,
) =>
    target.createState;
