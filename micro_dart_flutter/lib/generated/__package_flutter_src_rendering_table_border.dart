// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/table_border.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/painting.dart' hide Border;

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/table_border.dart',
  {
    'TableBorder.': _TableBorder__$,
    'TableBorder.all': _TableBorder_all_$,
    'TableBorder.symmetric': _TableBorder_symmetric_$,
    'TableBorder.lerp': _TableBorder_lerp$,
  },
  {},
  {
    'TableBorder': m.ClassMirror(
      'TableBorder',
      {
        '#as': TableBorder_as$,
        '#is': TableBorder_is$,
        'top': _TableBorder_top$,
        'right': _TableBorder_right$,
        'bottom': _TableBorder_bottom$,
        'left': _TableBorder_left$,
        'horizontalInside': _TableBorder_horizontalInside$,
        'verticalInside': _TableBorder_verticalInside$,
        'borderRadius': _TableBorder_borderRadius$,
        'dimensions': _TableBorder_dimensions$,
        'isUniform': _TableBorder_isUniform$,
        'hashCode': _TableBorder_hashCode$,
        'scale': _TableBorder_scale$,
        'paint': _TableBorder_paint$,
        '==': _TableBorder_eq$$,
        'toString': _TableBorder_toString$,
      },
      {},
    )
  },
);
Function TableBorder_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TableBorder;
Function TableBorder_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TableBorder;
Function _TableBorder_top$(
  m.Scope scope$,
  TableBorder target$,
) =>
    () {
      return target$.top;
    };
Function _TableBorder_right$(
  m.Scope scope$,
  TableBorder target$,
) =>
    () {
      return target$.right;
    };
Function _TableBorder_bottom$(
  m.Scope scope$,
  TableBorder target$,
) =>
    () {
      return target$.bottom;
    };
Function _TableBorder_left$(
  m.Scope scope$,
  TableBorder target$,
) =>
    () {
      return target$.left;
    };
Function _TableBorder_horizontalInside$(
  m.Scope scope$,
  TableBorder target$,
) =>
    () {
      return target$.horizontalInside;
    };
Function _TableBorder_verticalInside$(
  m.Scope scope$,
  TableBorder target$,
) =>
    () {
      return target$.verticalInside;
    };
Function _TableBorder_borderRadius$(
  m.Scope scope$,
  TableBorder target$,
) =>
    () {
      return target$.borderRadius;
    };
Function _TableBorder_dimensions$(
  m.Scope scope$,
  TableBorder target$,
) =>
    () {
      return target$.dimensions;
    };
Function _TableBorder_isUniform$(
  m.Scope scope$,
  TableBorder target$,
) =>
    () {
      return target$.isUniform;
    };
Function _TableBorder_hashCode$(
  m.Scope scope$,
  TableBorder target$,
) =>
    () {
      return target$.hashCode;
    };
Function _TableBorder__$(m.Scope scope$) => ({
      BorderSide? top,
      BorderSide? right,
      BorderSide? bottom,
      BorderSide? left,
      BorderSide? horizontalInside,
      BorderSide? verticalInside,
      BorderRadius? borderRadius,
    }) {
      return TableBorder(
        borderRadius: borderRadius ?? BorderRadius.zero,
        bottom: bottom ?? BorderSide.none,
        horizontalInside: horizontalInside ?? BorderSide.none,
        left: left ?? BorderSide.none,
        right: right ?? BorderSide.none,
        top: top ?? BorderSide.none,
        verticalInside: verticalInside ?? BorderSide.none,
      );
    };
Function _TableBorder_all_$(m.Scope scope$) => TableBorder.all;
Function _TableBorder_symmetric_$(m.Scope scope$) => TableBorder.symmetric;
Function _TableBorder_scale$(
  m.Scope scope$,
  TableBorder target$,
) =>
    target$.scale;
Function _TableBorder_lerp$(m.Scope scope$) => TableBorder.lerp;
Function _TableBorder_paint$(
  m.Scope scope$,
  TableBorder target$,
) =>
    target$.paint;
Function _TableBorder_eq$$(
  m.Scope scope$,
  TableBorder target$,
) =>
    (Object other$) => target$ == other$;
Function _TableBorder_toString$(
  m.Scope scope$,
  TableBorder target$,
) =>
    target$.toString;
