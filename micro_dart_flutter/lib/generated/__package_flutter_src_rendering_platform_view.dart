// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/platform_view.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/semantics.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/rendering/layer.dart';
import 'package:flutter/src/rendering/object.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/platform_view.dart',
  {
    'RenderAndroidView.': _RenderAndroidView__$,
    'RenderUiKitView.': _RenderUiKitView__$,
    'PlatformViewRenderBox.': _PlatformViewRenderBox__$,
    'PlatformViewHitTestBehavior.opaque': _PlatformViewHitTestBehavior_opaque$,
    'PlatformViewHitTestBehavior.translucent':
        _PlatformViewHitTestBehavior_translucent$,
    'PlatformViewHitTestBehavior.transparent':
        _PlatformViewHitTestBehavior_transparent$,
    'PlatformViewHitTestBehavior.values': _PlatformViewHitTestBehavior_values$,
  },
  {},
  {
    'RenderAndroidView': m.ClassMirror(
      'RenderAndroidView',
      {
        '#as': RenderAndroidView_as$,
        '#is': RenderAndroidView_is$,
        'controller': _RenderAndroidView_controller$,
        'clipBehavior': _RenderAndroidView_clipBehavior$,
        'sizedByParent': _RenderAndroidView_sizedByParent$,
        'alwaysNeedsCompositing': _RenderAndroidView_alwaysNeedsCompositing$,
        'isRepaintBoundary': _RenderAndroidView_isRepaintBoundary$,
        'computeDryLayout': _RenderAndroidView_computeDryLayout$,
        'performResize': _RenderAndroidView_performResize$,
        'paint': _RenderAndroidView_paint$,
        'dispose': _RenderAndroidView_dispose$,
        'describeSemanticsConfiguration':
            _RenderAndroidView_describeSemanticsConfiguration$,
      },
      {
        'controller': _RenderAndroidView_controller_set$,
        'clipBehavior': _RenderAndroidView_clipBehavior_set$,
      },
    ),
    'RenderUiKitView': m.ClassMirror(
      'RenderUiKitView',
      {
        '#as': RenderUiKitView_as$,
        '#is': RenderUiKitView_is$,
        'hitTestBehavior': _RenderUiKitView_hitTestBehavior$,
        'viewController': _RenderUiKitView_viewController$,
        'sizedByParent': _RenderUiKitView_sizedByParent$,
        'alwaysNeedsCompositing': _RenderUiKitView_alwaysNeedsCompositing$,
        'isRepaintBoundary': _RenderUiKitView_isRepaintBoundary$,
        'updateGestureRecognizers': _RenderUiKitView_updateGestureRecognizers$,
        'computeDryLayout': _RenderUiKitView_computeDryLayout$,
        'paint': _RenderUiKitView_paint$,
        'hitTest': _RenderUiKitView_hitTest$,
        'hitTestSelf': _RenderUiKitView_hitTestSelf$,
        'handleEvent': _RenderUiKitView_handleEvent$,
        'describeSemanticsConfiguration':
            _RenderUiKitView_describeSemanticsConfiguration$,
        'attach': _RenderUiKitView_attach$,
        'detach': _RenderUiKitView_detach$,
      },
      {
        'hitTestBehavior': _RenderUiKitView_hitTestBehavior_set$,
        'viewController': _RenderUiKitView_viewController_set$,
      },
    ),
    'PlatformViewRenderBox': m.ClassMirror(
      'PlatformViewRenderBox',
      {
        '#as': PlatformViewRenderBox_as$,
        '#is': PlatformViewRenderBox_is$,
        'controller': _PlatformViewRenderBox_controller$,
        'sizedByParent': _PlatformViewRenderBox_sizedByParent$,
        'alwaysNeedsCompositing':
            _PlatformViewRenderBox_alwaysNeedsCompositing$,
        'isRepaintBoundary': _PlatformViewRenderBox_isRepaintBoundary$,
        'updateGestureRecognizers':
            _PlatformViewRenderBox_updateGestureRecognizers$,
        'computeDryLayout': _PlatformViewRenderBox_computeDryLayout$,
        'paint': _PlatformViewRenderBox_paint$,
        'describeSemanticsConfiguration':
            _PlatformViewRenderBox_describeSemanticsConfiguration$,
      },
      {'controller': _PlatformViewRenderBox_controller_set$},
    ),
    'PlatformViewHitTestBehavior': m.ClassMirror(
      'PlatformViewHitTestBehavior',
      {},
      {},
    ),
  },
);
Function RenderAndroidView_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RenderAndroidView;
Function RenderAndroidView_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RenderAndroidView;
Function _RenderAndroidView_controller$(
  m.Scope scope$,
  RenderAndroidView target$,
) =>
    () {
      return target$.controller;
    };
void _RenderAndroidView_controller_set$(
  m.Scope scope$,
  RenderAndroidView target$,
) =>
    (dynamic other$) {
      target$.controller = other$;
    };
Function _RenderAndroidView_clipBehavior$(
  m.Scope scope$,
  RenderAndroidView target$,
) =>
    () {
      return target$.clipBehavior;
    };
void _RenderAndroidView_clipBehavior_set$(
  m.Scope scope$,
  RenderAndroidView target$,
) =>
    (dynamic other$) {
      target$.clipBehavior = other$;
    };
Function _RenderAndroidView_sizedByParent$(
  m.Scope scope$,
  RenderAndroidView target$,
) =>
    () {
      return target$.sizedByParent;
    };
Function _RenderAndroidView_alwaysNeedsCompositing$(
  m.Scope scope$,
  RenderAndroidView target$,
) =>
    () {
      return target$.alwaysNeedsCompositing;
    };
Function _RenderAndroidView_isRepaintBoundary$(
  m.Scope scope$,
  RenderAndroidView target$,
) =>
    () {
      return target$.isRepaintBoundary;
    };
Function _RenderAndroidView__$(m.Scope scope$) => ({
      required AndroidViewController viewController,
      required PlatformViewHitTestBehavior hitTestBehavior,
      required Set gestureRecognizers,
      Clip? clipBehavior,
    }) {
      return RenderAndroidView(
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        gestureRecognizers: Set.from(gestureRecognizers),
        hitTestBehavior: hitTestBehavior,
        viewController: viewController,
      );
    };
Function _RenderAndroidView_computeDryLayout$(
  m.Scope scope$,
  RenderAndroidView target$,
) =>
    target$.computeDryLayout;
Function _RenderAndroidView_performResize$(
  m.Scope scope$,
  RenderAndroidView target$,
) =>
    target$.performResize;
Function _RenderAndroidView_paint$(
  m.Scope scope$,
  RenderAndroidView target$,
) =>
    target$.paint;
Function _RenderAndroidView_dispose$(
  m.Scope scope$,
  RenderAndroidView target$,
) =>
    target$.dispose;
Function _RenderAndroidView_describeSemanticsConfiguration$(
  m.Scope scope$,
  RenderAndroidView target$,
) =>
    target$.describeSemanticsConfiguration;
Function RenderUiKitView_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RenderUiKitView;
Function RenderUiKitView_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RenderUiKitView;
Function _RenderUiKitView_hitTestBehavior$(
  m.Scope scope$,
  RenderUiKitView target$,
) =>
    () {
      return target$.hitTestBehavior;
    };
void _RenderUiKitView_hitTestBehavior_set$(
  m.Scope scope$,
  RenderUiKitView target$,
) =>
    (dynamic other$) {
      target$.hitTestBehavior = other$;
    };
Function _RenderUiKitView_viewController$(
  m.Scope scope$,
  RenderUiKitView target$,
) =>
    () {
      return target$.viewController;
    };
void _RenderUiKitView_viewController_set$(
  m.Scope scope$,
  RenderUiKitView target$,
) =>
    (dynamic other$) {
      target$.viewController = other$;
    };
Function _RenderUiKitView_sizedByParent$(
  m.Scope scope$,
  RenderUiKitView target$,
) =>
    () {
      return target$.sizedByParent;
    };
Function _RenderUiKitView_alwaysNeedsCompositing$(
  m.Scope scope$,
  RenderUiKitView target$,
) =>
    () {
      return target$.alwaysNeedsCompositing;
    };
Function _RenderUiKitView_isRepaintBoundary$(
  m.Scope scope$,
  RenderUiKitView target$,
) =>
    () {
      return target$.isRepaintBoundary;
    };
Function _RenderUiKitView__$(m.Scope scope$) => ({
      required UiKitViewController viewController,
      required PlatformViewHitTestBehavior hitTestBehavior,
      required Set gestureRecognizers,
    }) {
      return RenderUiKitView(
        gestureRecognizers: Set.from(gestureRecognizers),
        hitTestBehavior: hitTestBehavior,
        viewController: viewController,
      );
    };
Function _RenderUiKitView_updateGestureRecognizers$(
  m.Scope scope$,
  RenderUiKitView target$,
) =>
    target$.updateGestureRecognizers;
Function _RenderUiKitView_computeDryLayout$(
  m.Scope scope$,
  RenderUiKitView target$,
) =>
    target$.computeDryLayout;
Function _RenderUiKitView_paint$(
  m.Scope scope$,
  RenderUiKitView target$,
) =>
    target$.paint;
Function _RenderUiKitView_hitTest$(
  m.Scope scope$,
  RenderUiKitView target$,
) =>
    target$.hitTest;
Function _RenderUiKitView_hitTestSelf$(
  m.Scope scope$,
  RenderUiKitView target$,
) =>
    target$.hitTestSelf;
Function _RenderUiKitView_handleEvent$(
  m.Scope scope$,
  RenderUiKitView target$,
) =>
    target$.handleEvent;
Function _RenderUiKitView_describeSemanticsConfiguration$(
  m.Scope scope$,
  RenderUiKitView target$,
) =>
    target$.describeSemanticsConfiguration;
Function _RenderUiKitView_attach$(
  m.Scope scope$,
  RenderUiKitView target$,
) =>
    target$.attach;
Function _RenderUiKitView_detach$(
  m.Scope scope$,
  RenderUiKitView target$,
) =>
    target$.detach;
Function PlatformViewRenderBox_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PlatformViewRenderBox;
Function PlatformViewRenderBox_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PlatformViewRenderBox;
Function _PlatformViewRenderBox_controller$(
  m.Scope scope$,
  PlatformViewRenderBox target$,
) =>
    () {
      return target$.controller;
    };
void _PlatformViewRenderBox_controller_set$(
  m.Scope scope$,
  PlatformViewRenderBox target$,
) =>
    (dynamic other$) {
      target$.controller = other$;
    };
Function _PlatformViewRenderBox_sizedByParent$(
  m.Scope scope$,
  PlatformViewRenderBox target$,
) =>
    () {
      return target$.sizedByParent;
    };
Function _PlatformViewRenderBox_alwaysNeedsCompositing$(
  m.Scope scope$,
  PlatformViewRenderBox target$,
) =>
    () {
      return target$.alwaysNeedsCompositing;
    };
Function _PlatformViewRenderBox_isRepaintBoundary$(
  m.Scope scope$,
  PlatformViewRenderBox target$,
) =>
    () {
      return target$.isRepaintBoundary;
    };
Function _PlatformViewRenderBox__$(m.Scope scope$) => ({
      required PlatformViewController controller,
      required PlatformViewHitTestBehavior hitTestBehavior,
      required Set gestureRecognizers,
    }) {
      return PlatformViewRenderBox(
        controller: controller,
        gestureRecognizers: Set.from(gestureRecognizers),
        hitTestBehavior: hitTestBehavior,
      );
    };
Function _PlatformViewRenderBox_updateGestureRecognizers$(
  m.Scope scope$,
  PlatformViewRenderBox target$,
) =>
    target$.updateGestureRecognizers;
Function _PlatformViewRenderBox_computeDryLayout$(
  m.Scope scope$,
  PlatformViewRenderBox target$,
) =>
    target$.computeDryLayout;
Function _PlatformViewRenderBox_paint$(
  m.Scope scope$,
  PlatformViewRenderBox target$,
) =>
    target$.paint;
Function _PlatformViewRenderBox_describeSemanticsConfiguration$(
  m.Scope scope$,
  PlatformViewRenderBox target$,
) =>
    target$.describeSemanticsConfiguration;
PlatformViewHitTestBehavior _PlatformViewHitTestBehavior_opaque$() {
  return PlatformViewHitTestBehavior.opaque;
}

PlatformViewHitTestBehavior _PlatformViewHitTestBehavior_translucent$() {
  return PlatformViewHitTestBehavior.translucent;
}

PlatformViewHitTestBehavior _PlatformViewHitTestBehavior_transparent$() {
  return PlatformViewHitTestBehavior.transparent;
}

List<PlatformViewHitTestBehavior> _PlatformViewHitTestBehavior_values$() {
  return PlatformViewHitTestBehavior.values;
}
