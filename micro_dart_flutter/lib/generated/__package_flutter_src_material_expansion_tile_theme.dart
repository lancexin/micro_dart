// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/expansion_tile_theme.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/expansion_tile_theme.dart',
  {
    'ExpansionTileThemeData.': _ExpansionTileThemeData__$,
    'ExpansionTileThemeData.lerp': _ExpansionTileThemeData_lerp$,
    'ExpansionTileTheme.': _ExpansionTileTheme__$,
    'ExpansionTileTheme.of': _ExpansionTileTheme_of$,
  },
  {},
  {
    'ExpansionTileThemeData': m.ClassMirror(
      'ExpansionTileThemeData',
      {
        '#as': ExpansionTileThemeData_as$,
        '#is': ExpansionTileThemeData_is$,
        'backgroundColor': _ExpansionTileThemeData_backgroundColor$,
        'collapsedBackgroundColor':
            _ExpansionTileThemeData_collapsedBackgroundColor$,
        'tilePadding': _ExpansionTileThemeData_tilePadding$,
        'expandedAlignment': _ExpansionTileThemeData_expandedAlignment$,
        'childrenPadding': _ExpansionTileThemeData_childrenPadding$,
        'iconColor': _ExpansionTileThemeData_iconColor$,
        'collapsedIconColor': _ExpansionTileThemeData_collapsedIconColor$,
        'textColor': _ExpansionTileThemeData_textColor$,
        'collapsedTextColor': _ExpansionTileThemeData_collapsedTextColor$,
        'shape': _ExpansionTileThemeData_shape$,
        'collapsedShape': _ExpansionTileThemeData_collapsedShape$,
        'clipBehavior': _ExpansionTileThemeData_clipBehavior$,
        'hashCode': _ExpansionTileThemeData_hashCode$,
        'copyWith': _ExpansionTileThemeData_copyWith$,
        '==': _ExpansionTileThemeData_eq$$,
        'debugFillProperties': _ExpansionTileThemeData_debugFillProperties$,
      },
      {},
    ),
    'ExpansionTileTheme': m.ClassMirror(
      'ExpansionTileTheme',
      {
        '#as': ExpansionTileTheme_as$,
        '#is': ExpansionTileTheme_is$,
        'data': _ExpansionTileTheme_data$,
        'wrap': _ExpansionTileTheme_wrap$,
        'updateShouldNotify': _ExpansionTileTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function ExpansionTileThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ExpansionTileThemeData;
Function ExpansionTileThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ExpansionTileThemeData;
Function _ExpansionTileThemeData_backgroundColor$(
  m.Scope scope$,
  ExpansionTileThemeData target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _ExpansionTileThemeData_collapsedBackgroundColor$(
  m.Scope scope$,
  ExpansionTileThemeData target$,
) =>
    () {
      return target$.collapsedBackgroundColor;
    };
Function _ExpansionTileThemeData_tilePadding$(
  m.Scope scope$,
  ExpansionTileThemeData target$,
) =>
    () {
      return target$.tilePadding;
    };
Function _ExpansionTileThemeData_expandedAlignment$(
  m.Scope scope$,
  ExpansionTileThemeData target$,
) =>
    () {
      return target$.expandedAlignment;
    };
Function _ExpansionTileThemeData_childrenPadding$(
  m.Scope scope$,
  ExpansionTileThemeData target$,
) =>
    () {
      return target$.childrenPadding;
    };
Function _ExpansionTileThemeData_iconColor$(
  m.Scope scope$,
  ExpansionTileThemeData target$,
) =>
    () {
      return target$.iconColor;
    };
Function _ExpansionTileThemeData_collapsedIconColor$(
  m.Scope scope$,
  ExpansionTileThemeData target$,
) =>
    () {
      return target$.collapsedIconColor;
    };
Function _ExpansionTileThemeData_textColor$(
  m.Scope scope$,
  ExpansionTileThemeData target$,
) =>
    () {
      return target$.textColor;
    };
Function _ExpansionTileThemeData_collapsedTextColor$(
  m.Scope scope$,
  ExpansionTileThemeData target$,
) =>
    () {
      return target$.collapsedTextColor;
    };
Function _ExpansionTileThemeData_shape$(
  m.Scope scope$,
  ExpansionTileThemeData target$,
) =>
    () {
      return target$.shape;
    };
Function _ExpansionTileThemeData_collapsedShape$(
  m.Scope scope$,
  ExpansionTileThemeData target$,
) =>
    () {
      return target$.collapsedShape;
    };
Function _ExpansionTileThemeData_clipBehavior$(
  m.Scope scope$,
  ExpansionTileThemeData target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _ExpansionTileThemeData_hashCode$(
  m.Scope scope$,
  ExpansionTileThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _ExpansionTileThemeData__$(m.Scope scope$) => ({
      Color? backgroundColor,
      Color? collapsedBackgroundColor,
      EdgeInsetsGeometry? tilePadding,
      AlignmentGeometry? expandedAlignment,
      EdgeInsetsGeometry? childrenPadding,
      Color? iconColor,
      Color? collapsedIconColor,
      Color? textColor,
      Color? collapsedTextColor,
      ShapeBorder? shape,
      ShapeBorder? collapsedShape,
      Clip? clipBehavior,
    }) {
      return ExpansionTileThemeData(
        backgroundColor: backgroundColor,
        childrenPadding: childrenPadding,
        clipBehavior: clipBehavior,
        collapsedBackgroundColor: collapsedBackgroundColor,
        collapsedIconColor: collapsedIconColor,
        collapsedShape: collapsedShape,
        collapsedTextColor: collapsedTextColor,
        expandedAlignment: expandedAlignment,
        iconColor: iconColor,
        shape: shape,
        textColor: textColor,
        tilePadding: tilePadding,
      );
    };
Function _ExpansionTileThemeData_copyWith$(
  m.Scope scope$,
  ExpansionTileThemeData target$,
) =>
    target$.copyWith;
Function _ExpansionTileThemeData_lerp$(m.Scope scope$) =>
    ExpansionTileThemeData.lerp;
Function _ExpansionTileThemeData_eq$$(
  m.Scope scope$,
  ExpansionTileThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _ExpansionTileThemeData_debugFillProperties$(
  m.Scope scope$,
  ExpansionTileThemeData target$,
) =>
    target$.debugFillProperties;
Function ExpansionTileTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ExpansionTileTheme;
Function ExpansionTileTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ExpansionTileTheme;
Function _ExpansionTileTheme_data$(
  m.Scope scope$,
  ExpansionTileTheme target$,
) =>
    () {
      return target$.data;
    };
Function _ExpansionTileTheme__$(m.Scope scope$) => ({
      Key? key,
      required ExpansionTileThemeData data,
      required Widget child,
    }) {
      return ExpansionTileTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _ExpansionTileTheme_of$(m.Scope scope$) => ExpansionTileTheme.of;
Function _ExpansionTileTheme_wrap$(
  m.Scope scope$,
  ExpansionTileTheme target$,
) =>
    target$.wrap;
Function _ExpansionTileTheme_updateShouldNotify$(
  m.Scope scope$,
  ExpansionTileTheme target$,
) =>
    target$.updateShouldNotify;
