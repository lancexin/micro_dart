// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/expansion_tile_theme.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/expansion_tile_theme.dart',
  {
    'ExpansionTileThemeData.lerp': _ExpansionTileThemeData_lerp$,
    'ExpansionTileTheme.of': _ExpansionTileTheme_of$,
  },
  {},
  {
    'ExpansionTileThemeData': m.ClassMirror(
      'ExpansionTileThemeData',
      {
        '#as': ExpansionTileThemeData_as$,
        '#is': ExpansionTileThemeData_is$,
        'backgroundColor': _ExpansionTileThemeData_backgroundColor$,
        'collapsedBackgroundColor':
            _ExpansionTileThemeData_collapsedBackgroundColor$,
        'tilePadding': _ExpansionTileThemeData_tilePadding$,
        'expandedAlignment': _ExpansionTileThemeData_expandedAlignment$,
        'childrenPadding': _ExpansionTileThemeData_childrenPadding$,
        'iconColor': _ExpansionTileThemeData_iconColor$,
        'collapsedIconColor': _ExpansionTileThemeData_collapsedIconColor$,
        'textColor': _ExpansionTileThemeData_textColor$,
        'collapsedTextColor': _ExpansionTileThemeData_collapsedTextColor$,
        'shape': _ExpansionTileThemeData_shape$,
        'collapsedShape': _ExpansionTileThemeData_collapsedShape$,
        'clipBehavior': _ExpansionTileThemeData_clipBehavior$,
        'hashCode': _ExpansionTileThemeData_hashCode$,
        'copyWith': _ExpansionTileThemeData_copyWith$,
        '==': _ExpansionTileThemeData_eq$$,
        'debugFillProperties': _ExpansionTileThemeData_debugFillProperties$,
      },
      {},
    ),
    'ExpansionTileTheme': m.ClassMirror(
      'ExpansionTileTheme',
      {
        '#as': ExpansionTileTheme_as$,
        '#is': ExpansionTileTheme_is$,
        'data': _ExpansionTileTheme_data$,
        'wrap': _ExpansionTileTheme_wrap$,
        'updateShouldNotify': _ExpansionTileTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function ExpansionTileThemeData_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ExpansionTileThemeData;
Function ExpansionTileThemeData_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ExpansionTileThemeData;
Color? _ExpansionTileThemeData_backgroundColor$(ExpansionTileThemeData target) {
  return target.backgroundColor;
}

Color? _ExpansionTileThemeData_collapsedBackgroundColor$(
    ExpansionTileThemeData target) {
  return target.collapsedBackgroundColor;
}

EdgeInsetsGeometry? _ExpansionTileThemeData_tilePadding$(
    ExpansionTileThemeData target) {
  return target.tilePadding;
}

AlignmentGeometry? _ExpansionTileThemeData_expandedAlignment$(
    ExpansionTileThemeData target) {
  return target.expandedAlignment;
}

EdgeInsetsGeometry? _ExpansionTileThemeData_childrenPadding$(
    ExpansionTileThemeData target) {
  return target.childrenPadding;
}

Color? _ExpansionTileThemeData_iconColor$(ExpansionTileThemeData target) {
  return target.iconColor;
}

Color? _ExpansionTileThemeData_collapsedIconColor$(
    ExpansionTileThemeData target) {
  return target.collapsedIconColor;
}

Color? _ExpansionTileThemeData_textColor$(ExpansionTileThemeData target) {
  return target.textColor;
}

Color? _ExpansionTileThemeData_collapsedTextColor$(
    ExpansionTileThemeData target) {
  return target.collapsedTextColor;
}

ShapeBorder? _ExpansionTileThemeData_shape$(ExpansionTileThemeData target) {
  return target.shape;
}

ShapeBorder? _ExpansionTileThemeData_collapsedShape$(
    ExpansionTileThemeData target) {
  return target.collapsedShape;
}

Clip? _ExpansionTileThemeData_clipBehavior$(ExpansionTileThemeData target) {
  return target.clipBehavior;
}

int _ExpansionTileThemeData_hashCode$(ExpansionTileThemeData target) {
  return target.hashCode;
}

Function _ExpansionTileThemeData_copyWith$(
  m.Scope scope,
  ExpansionTileThemeData target,
) =>
    target.copyWith;
Function _ExpansionTileThemeData_lerp$(m.Scope scope) =>
    ExpansionTileThemeData.lerp;
Function _ExpansionTileThemeData_eq$$(
  m.Scope scope,
  ExpansionTileThemeData target,
) =>
    (Object other) => target == other;
Function _ExpansionTileThemeData_debugFillProperties$(
  m.Scope scope,
  ExpansionTileThemeData target,
) =>
    target.debugFillProperties;
Function ExpansionTileTheme_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ExpansionTileTheme;
Function ExpansionTileTheme_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ExpansionTileTheme;
ExpansionTileThemeData _ExpansionTileTheme_data$(ExpansionTileTheme target) {
  return target.data;
}

Function _ExpansionTileTheme_of$(m.Scope scope) => ExpansionTileTheme.of;
Function _ExpansionTileTheme_wrap$(
  m.Scope scope,
  ExpansionTileTheme target,
) =>
    target.wrap;
Function _ExpansionTileTheme_updateShouldNotify$(
  m.Scope scope,
  ExpansionTileTheme target,
) =>
    target.updateShouldNotify;
