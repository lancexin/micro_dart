// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/app.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/button.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/icons.dart';
import 'package:flutter/src/cupertino/interface_level.dart';
import 'package:flutter/src/cupertino/localizations.dart';
import 'package:flutter/src/cupertino/route.dart';
import 'package:flutter/src/cupertino/scrollbar.dart';
import 'package:flutter/src/cupertino/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/app.dart',
  {
    'CupertinoApp.createCupertinoHeroController':
        _CupertinoApp_createCupertinoHeroController$
  },
  {},
  {
    'CupertinoApp': m.ClassMirror(
      'CupertinoApp',
      {
        '#as': CupertinoApp_as$,
        '#is': CupertinoApp_is$,
        'navigatorKey': _CupertinoApp_navigatorKey$,
        'home': _CupertinoApp_home$,
        'theme': _CupertinoApp_theme$,
        'routes': _CupertinoApp_routes$,
        'initialRoute': _CupertinoApp_initialRoute$,
        'onGenerateRoute': _CupertinoApp_onGenerateRoute$,
        'onGenerateInitialRoutes': _CupertinoApp_onGenerateInitialRoutes$,
        'onUnknownRoute': _CupertinoApp_onUnknownRoute$,
        'navigatorObservers': _CupertinoApp_navigatorObservers$,
        'routeInformationProvider': _CupertinoApp_routeInformationProvider$,
        'routeInformationParser': _CupertinoApp_routeInformationParser$,
        'routerDelegate': _CupertinoApp_routerDelegate$,
        'backButtonDispatcher': _CupertinoApp_backButtonDispatcher$,
        'routerConfig': _CupertinoApp_routerConfig$,
        'builder': _CupertinoApp_builder$,
        'title': _CupertinoApp_title$,
        'onGenerateTitle': _CupertinoApp_onGenerateTitle$,
        'color': _CupertinoApp_color$,
        'locale': _CupertinoApp_locale$,
        'localizationsDelegates': _CupertinoApp_localizationsDelegates$,
        'localeListResolutionCallback':
            _CupertinoApp_localeListResolutionCallback$,
        'localeResolutionCallback': _CupertinoApp_localeResolutionCallback$,
        'supportedLocales': _CupertinoApp_supportedLocales$,
        'showPerformanceOverlay': _CupertinoApp_showPerformanceOverlay$,
        'checkerboardRasterCacheImages':
            _CupertinoApp_checkerboardRasterCacheImages$,
        'checkerboardOffscreenLayers':
            _CupertinoApp_checkerboardOffscreenLayers$,
        'showSemanticsDebugger': _CupertinoApp_showSemanticsDebugger$,
        'debugShowCheckedModeBanner': _CupertinoApp_debugShowCheckedModeBanner$,
        'shortcuts': _CupertinoApp_shortcuts$,
        'actions': _CupertinoApp_actions$,
        'restorationScopeId': _CupertinoApp_restorationScopeId$,
        'scrollBehavior': _CupertinoApp_scrollBehavior$,
        'useInheritedMediaQuery': _CupertinoApp_useInheritedMediaQuery$,
        'createState': _CupertinoApp_createState$,
      },
      {},
    ),
    'CupertinoScrollBehavior': m.ClassMirror(
      'CupertinoScrollBehavior',
      {
        '#as': CupertinoScrollBehavior_as$,
        '#is': CupertinoScrollBehavior_is$,
        'buildScrollbar': _CupertinoScrollBehavior_buildScrollbar$,
        'buildOverscrollIndicator':
            _CupertinoScrollBehavior_buildOverscrollIndicator$,
        'getScrollPhysics': _CupertinoScrollBehavior_getScrollPhysics$,
      },
      {},
    ),
  },
);
Function CupertinoApp_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CupertinoApp;
Function CupertinoApp_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CupertinoApp;
GlobalKey<NavigatorState>? _CupertinoApp_navigatorKey$(CupertinoApp target) {
  return target.navigatorKey;
}

Widget? _CupertinoApp_home$(CupertinoApp target) {
  return target.home;
}

CupertinoThemeData? _CupertinoApp_theme$(CupertinoApp target) {
  return target.theme;
}

Map<String, Widget Function(BuildContext)>? _CupertinoApp_routes$(
    CupertinoApp target) {
  return target.routes;
}

String? _CupertinoApp_initialRoute$(CupertinoApp target) {
  return target.initialRoute;
}

Route<dynamic>? Function(RouteSettings)? _CupertinoApp_onGenerateRoute$(
    CupertinoApp target) {
  return target.onGenerateRoute;
}

List<Route<dynamic>> Function(String)? _CupertinoApp_onGenerateInitialRoutes$(
    CupertinoApp target) {
  return target.onGenerateInitialRoutes;
}

Route<dynamic>? Function(RouteSettings)? _CupertinoApp_onUnknownRoute$(
    CupertinoApp target) {
  return target.onUnknownRoute;
}

List<NavigatorObserver>? _CupertinoApp_navigatorObservers$(
    CupertinoApp target) {
  return target.navigatorObservers;
}

RouteInformationProvider? _CupertinoApp_routeInformationProvider$(
    CupertinoApp target) {
  return target.routeInformationProvider;
}

RouteInformationParser<Object>? _CupertinoApp_routeInformationParser$(
    CupertinoApp target) {
  return target.routeInformationParser;
}

RouterDelegate<Object>? _CupertinoApp_routerDelegate$(CupertinoApp target) {
  return target.routerDelegate;
}

BackButtonDispatcher? _CupertinoApp_backButtonDispatcher$(CupertinoApp target) {
  return target.backButtonDispatcher;
}

RouterConfig<Object>? _CupertinoApp_routerConfig$(CupertinoApp target) {
  return target.routerConfig;
}

Widget Function(BuildContext, Widget?)? _CupertinoApp_builder$(
    CupertinoApp target) {
  return target.builder;
}

String _CupertinoApp_title$(CupertinoApp target) {
  return target.title;
}

String Function(BuildContext)? _CupertinoApp_onGenerateTitle$(
    CupertinoApp target) {
  return target.onGenerateTitle;
}

Color? _CupertinoApp_color$(CupertinoApp target) {
  return target.color;
}

Locale? _CupertinoApp_locale$(CupertinoApp target) {
  return target.locale;
}

Iterable<LocalizationsDelegate<dynamic>>? _CupertinoApp_localizationsDelegates$(
    CupertinoApp target) {
  return target.localizationsDelegates;
}

Locale? Function(List<Locale>?, Iterable<Locale>)?
    _CupertinoApp_localeListResolutionCallback$(CupertinoApp target) {
  return target.localeListResolutionCallback;
}

Locale? Function(Locale?, Iterable<Locale>)?
    _CupertinoApp_localeResolutionCallback$(CupertinoApp target) {
  return target.localeResolutionCallback;
}

Iterable<Locale> _CupertinoApp_supportedLocales$(CupertinoApp target) {
  return target.supportedLocales;
}

bool _CupertinoApp_showPerformanceOverlay$(CupertinoApp target) {
  return target.showPerformanceOverlay;
}

bool _CupertinoApp_checkerboardRasterCacheImages$(CupertinoApp target) {
  return target.checkerboardRasterCacheImages;
}

bool _CupertinoApp_checkerboardOffscreenLayers$(CupertinoApp target) {
  return target.checkerboardOffscreenLayers;
}

bool _CupertinoApp_showSemanticsDebugger$(CupertinoApp target) {
  return target.showSemanticsDebugger;
}

bool _CupertinoApp_debugShowCheckedModeBanner$(CupertinoApp target) {
  return target.debugShowCheckedModeBanner;
}

Map<ShortcutActivator, Intent>? _CupertinoApp_shortcuts$(CupertinoApp target) {
  return target.shortcuts;
}

Map<Type, Action<Intent>>? _CupertinoApp_actions$(CupertinoApp target) {
  return target.actions;
}

String? _CupertinoApp_restorationScopeId$(CupertinoApp target) {
  return target.restorationScopeId;
}

ScrollBehavior? _CupertinoApp_scrollBehavior$(CupertinoApp target) {
  return target.scrollBehavior;
}

bool _CupertinoApp_useInheritedMediaQuery$(CupertinoApp target) {
  return target.useInheritedMediaQuery;
}

Function _CupertinoApp_createState$(
  m.Scope scope,
  CupertinoApp target,
) =>
    target.createState;
Function _CupertinoApp_createCupertinoHeroController$(m.Scope scope) =>
    CupertinoApp.createCupertinoHeroController;
Function CupertinoScrollBehavior_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CupertinoScrollBehavior;
Function CupertinoScrollBehavior_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CupertinoScrollBehavior;
Function _CupertinoScrollBehavior_buildScrollbar$(
  m.Scope scope,
  CupertinoScrollBehavior target,
) =>
    target.buildScrollbar;
Function _CupertinoScrollBehavior_buildOverscrollIndicator$(
  m.Scope scope,
  CupertinoScrollBehavior target,
) =>
    target.buildOverscrollIndicator;
Function _CupertinoScrollBehavior_getScrollPhysics$(
  m.Scope scope,
  CupertinoScrollBehavior target,
) =>
    target.getScrollPhysics;
