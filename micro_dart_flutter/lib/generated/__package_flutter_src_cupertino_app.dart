// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/app.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/button.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/icons.dart';
import 'package:flutter/src/cupertino/interface_level.dart';
import 'package:flutter/src/cupertino/localizations.dart';
import 'package:flutter/src/cupertino/route.dart';
import 'package:flutter/src/cupertino/scrollbar.dart';
import 'package:flutter/src/cupertino/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/app.dart',
  {
    'CupertinoApp.': _CupertinoApp__$,
    'CupertinoApp.router': _CupertinoApp_router_$,
    'CupertinoApp.createCupertinoHeroController':
        _CupertinoApp_createCupertinoHeroController$,
    'CupertinoScrollBehavior.': _CupertinoScrollBehavior__$,
  },
  {},
  {
    'CupertinoApp': m.ClassMirror(
      'CupertinoApp',
      {
        '#as': CupertinoApp_as$,
        '#is': CupertinoApp_is$,
        'navigatorKey': _CupertinoApp_navigatorKey$,
        'home': _CupertinoApp_home$,
        'theme': _CupertinoApp_theme$,
        'routes': _CupertinoApp_routes$,
        'initialRoute': _CupertinoApp_initialRoute$,
        'onGenerateRoute': _CupertinoApp_onGenerateRoute$,
        'onGenerateInitialRoutes': _CupertinoApp_onGenerateInitialRoutes$,
        'onUnknownRoute': _CupertinoApp_onUnknownRoute$,
        'navigatorObservers': _CupertinoApp_navigatorObservers$,
        'routeInformationProvider': _CupertinoApp_routeInformationProvider$,
        'routeInformationParser': _CupertinoApp_routeInformationParser$,
        'routerDelegate': _CupertinoApp_routerDelegate$,
        'backButtonDispatcher': _CupertinoApp_backButtonDispatcher$,
        'routerConfig': _CupertinoApp_routerConfig$,
        'builder': _CupertinoApp_builder$,
        'title': _CupertinoApp_title$,
        'onGenerateTitle': _CupertinoApp_onGenerateTitle$,
        'color': _CupertinoApp_color$,
        'locale': _CupertinoApp_locale$,
        'localizationsDelegates': _CupertinoApp_localizationsDelegates$,
        'localeListResolutionCallback':
            _CupertinoApp_localeListResolutionCallback$,
        'localeResolutionCallback': _CupertinoApp_localeResolutionCallback$,
        'supportedLocales': _CupertinoApp_supportedLocales$,
        'showPerformanceOverlay': _CupertinoApp_showPerformanceOverlay$,
        'checkerboardRasterCacheImages':
            _CupertinoApp_checkerboardRasterCacheImages$,
        'checkerboardOffscreenLayers':
            _CupertinoApp_checkerboardOffscreenLayers$,
        'showSemanticsDebugger': _CupertinoApp_showSemanticsDebugger$,
        'debugShowCheckedModeBanner': _CupertinoApp_debugShowCheckedModeBanner$,
        'shortcuts': _CupertinoApp_shortcuts$,
        'actions': _CupertinoApp_actions$,
        'restorationScopeId': _CupertinoApp_restorationScopeId$,
        'scrollBehavior': _CupertinoApp_scrollBehavior$,
        'useInheritedMediaQuery': _CupertinoApp_useInheritedMediaQuery$,
        'createState': _CupertinoApp_createState$,
      },
      {},
    ),
    'CupertinoScrollBehavior': m.ClassMirror(
      'CupertinoScrollBehavior',
      {
        '#as': CupertinoScrollBehavior_as$,
        '#is': CupertinoScrollBehavior_is$,
        'buildScrollbar': _CupertinoScrollBehavior_buildScrollbar$,
        'buildOverscrollIndicator':
            _CupertinoScrollBehavior_buildOverscrollIndicator$,
        'getScrollPhysics': _CupertinoScrollBehavior_getScrollPhysics$,
      },
      {},
    ),
  },
);
Function CupertinoApp_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoApp;
Function CupertinoApp_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoApp;
Function _CupertinoApp_navigatorKey$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.navigatorKey;
    };
Function _CupertinoApp_home$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.home;
    };
Function _CupertinoApp_theme$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.theme;
    };
Function _CupertinoApp_routes$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.routes;
    };
Function _CupertinoApp_initialRoute$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.initialRoute;
    };
Function _CupertinoApp_onGenerateRoute$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.onGenerateRoute;
    };
Function _CupertinoApp_onGenerateInitialRoutes$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.onGenerateInitialRoutes;
    };
Function _CupertinoApp_onUnknownRoute$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.onUnknownRoute;
    };
Function _CupertinoApp_navigatorObservers$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.navigatorObservers;
    };
Function _CupertinoApp_routeInformationProvider$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.routeInformationProvider;
    };
Function _CupertinoApp_routeInformationParser$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.routeInformationParser;
    };
Function _CupertinoApp_routerDelegate$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.routerDelegate;
    };
Function _CupertinoApp_backButtonDispatcher$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.backButtonDispatcher;
    };
Function _CupertinoApp_routerConfig$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.routerConfig;
    };
Function _CupertinoApp_builder$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.builder;
    };
Function _CupertinoApp_title$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.title;
    };
Function _CupertinoApp_onGenerateTitle$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.onGenerateTitle;
    };
Function _CupertinoApp_color$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.color;
    };
Function _CupertinoApp_locale$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.locale;
    };
Function _CupertinoApp_localizationsDelegates$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.localizationsDelegates;
    };
Function _CupertinoApp_localeListResolutionCallback$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.localeListResolutionCallback;
    };
Function _CupertinoApp_localeResolutionCallback$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.localeResolutionCallback;
    };
Function _CupertinoApp_supportedLocales$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.supportedLocales;
    };
Function _CupertinoApp_showPerformanceOverlay$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.showPerformanceOverlay;
    };
Function _CupertinoApp_checkerboardRasterCacheImages$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.checkerboardRasterCacheImages;
    };
Function _CupertinoApp_checkerboardOffscreenLayers$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.checkerboardOffscreenLayers;
    };
Function _CupertinoApp_showSemanticsDebugger$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.showSemanticsDebugger;
    };
Function _CupertinoApp_debugShowCheckedModeBanner$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.debugShowCheckedModeBanner;
    };
Function _CupertinoApp_shortcuts$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.shortcuts;
    };
Function _CupertinoApp_actions$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.actions;
    };
Function _CupertinoApp_restorationScopeId$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.restorationScopeId;
    };
Function _CupertinoApp_scrollBehavior$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.scrollBehavior;
    };
Function _CupertinoApp_useInheritedMediaQuery$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    () {
      return target$.useInheritedMediaQuery;
    };
Function _CupertinoApp__$(m.Scope scope$) => ({
      Key? key,
      GlobalKey<NavigatorState>? navigatorKey,
      Widget? home,
      CupertinoThemeData? theme,
      Map? routes,
      String? initialRoute,
      m.FunctionPointer? onGenerateRoute,
      m.FunctionPointer? onGenerateInitialRoutes,
      m.FunctionPointer? onUnknownRoute,
      List? navigatorObservers,
      m.FunctionPointer? builder,
      String? title,
      m.FunctionPointer? onGenerateTitle,
      Color? color,
      Locale? locale,
      Iterable? localizationsDelegates,
      m.FunctionPointer? localeListResolutionCallback,
      m.FunctionPointer? localeResolutionCallback,
      Iterable? supportedLocales,
      bool? showPerformanceOverlay,
      bool? checkerboardRasterCacheImages,
      bool? checkerboardOffscreenLayers,
      bool? showSemanticsDebugger,
      bool? debugShowCheckedModeBanner,
      Map? shortcuts,
      Map? actions,
      String? restorationScopeId,
      ScrollBehavior? scrollBehavior,
      bool? useInheritedMediaQuery,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      Locale? localeListResolutionCallbackProxy(
        List? localeListResolutionCallback_locales$,
        Iterable localeListResolutionCallback_supportedLocales$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            localeListResolutionCallback!,
            [
              localeListResolutionCallback_locales$,
              localeListResolutionCallback_supportedLocales$,
            ],
            {},
          );
      Locale? localeResolutionCallbackProxy(
        Locale? localeResolutionCallback_locale$,
        Iterable localeResolutionCallback_supportedLocales$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            localeResolutionCallback!,
            [
              localeResolutionCallback_locale$,
              localeResolutionCallback_supportedLocales$,
            ],
            {},
          );
      List<Route<dynamic>> onGenerateInitialRoutesProxy(
              String onGenerateInitialRoutes_initialRoute$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onGenerateInitialRoutes!,
            [onGenerateInitialRoutes_initialRoute$],
            {},
          );
      Route<dynamic>? onGenerateRouteProxy(
              RouteSettings onGenerateRoute_settings$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onGenerateRoute!,
            [onGenerateRoute_settings$],
            {},
          );
      String onGenerateTitleProxy(BuildContext onGenerateTitle_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onGenerateTitle!,
            [onGenerateTitle_context$],
            {},
          );
      Route<dynamic>? onUnknownRouteProxy(
              RouteSettings onUnknownRoute_settings$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onUnknownRoute!,
            [onUnknownRoute_settings$],
            {},
          );
      return CupertinoApp(
        actions: actions == null ? null : Map.from(actions),
        builder: builder == null ? null : builderProxy,
        checkerboardOffscreenLayers: checkerboardOffscreenLayers ?? false,
        checkerboardRasterCacheImages: checkerboardRasterCacheImages ?? false,
        color: color,
        debugShowCheckedModeBanner: debugShowCheckedModeBanner ?? true,
        home: home,
        initialRoute: initialRoute,
        key: key,
        locale: locale,
        localeListResolutionCallback: localeListResolutionCallback == null
            ? null
            : localeListResolutionCallbackProxy,
        localeResolutionCallback: localeResolutionCallback == null
            ? null
            : localeResolutionCallbackProxy,
        localizationsDelegates: localizationsDelegates == null
            ? null
            : Iterable.castFrom(localizationsDelegates),
        navigatorKey: navigatorKey,
        navigatorObservers: navigatorObservers == null
            ? const <NavigatorObserver>[]
            : List.from(navigatorObservers),
        onGenerateInitialRoutes: onGenerateInitialRoutes == null
            ? null
            : onGenerateInitialRoutesProxy,
        onGenerateRoute: onGenerateRoute == null ? null : onGenerateRouteProxy,
        onGenerateTitle: onGenerateTitle == null ? null : onGenerateTitleProxy,
        onUnknownRoute: onUnknownRoute == null ? null : onUnknownRouteProxy,
        restorationScopeId: restorationScopeId,
        routes:
            routes == null ? const <String, WidgetBuilder>{} : Map.from(routes),
        scrollBehavior: scrollBehavior,
        shortcuts: shortcuts == null ? null : Map.from(shortcuts),
        showPerformanceOverlay: showPerformanceOverlay ?? false,
        showSemanticsDebugger: showSemanticsDebugger ?? false,
        supportedLocales: supportedLocales == null
            ? const <Locale>[Locale('en', 'US')]
            : Iterable.castFrom(supportedLocales),
        theme: theme,
        title: title ?? '',
        useInheritedMediaQuery: useInheritedMediaQuery ?? false,
      );
    };
Function _CupertinoApp_router_$(m.Scope scope$) => ({
      Key? key,
      RouteInformationProvider? routeInformationProvider,
      RouteInformationParser<Object>? routeInformationParser,
      RouterDelegate<Object>? routerDelegate,
      BackButtonDispatcher? backButtonDispatcher,
      RouterConfig<Object>? routerConfig,
      CupertinoThemeData? theme,
      m.FunctionPointer? builder,
      String? title,
      m.FunctionPointer? onGenerateTitle,
      Color? color,
      Locale? locale,
      Iterable? localizationsDelegates,
      m.FunctionPointer? localeListResolutionCallback,
      m.FunctionPointer? localeResolutionCallback,
      Iterable? supportedLocales,
      bool? showPerformanceOverlay,
      bool? checkerboardRasterCacheImages,
      bool? checkerboardOffscreenLayers,
      bool? showSemanticsDebugger,
      bool? debugShowCheckedModeBanner,
      Map? shortcuts,
      Map? actions,
      String? restorationScopeId,
      ScrollBehavior? scrollBehavior,
      bool? useInheritedMediaQuery,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      Locale? localeListResolutionCallbackProxy(
        List? localeListResolutionCallback_locales$,
        Iterable localeListResolutionCallback_supportedLocales$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            localeListResolutionCallback!,
            [
              localeListResolutionCallback_locales$,
              localeListResolutionCallback_supportedLocales$,
            ],
            {},
          );
      Locale? localeResolutionCallbackProxy(
        Locale? localeResolutionCallback_locale$,
        Iterable localeResolutionCallback_supportedLocales$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            localeResolutionCallback!,
            [
              localeResolutionCallback_locale$,
              localeResolutionCallback_supportedLocales$,
            ],
            {},
          );
      String onGenerateTitleProxy(BuildContext onGenerateTitle_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onGenerateTitle!,
            [onGenerateTitle_context$],
            {},
          );
      return CupertinoApp.router(
        actions: actions == null ? null : Map.from(actions),
        backButtonDispatcher: backButtonDispatcher,
        builder: builder == null ? null : builderProxy,
        checkerboardOffscreenLayers: checkerboardOffscreenLayers ?? false,
        checkerboardRasterCacheImages: checkerboardRasterCacheImages ?? false,
        color: color,
        debugShowCheckedModeBanner: debugShowCheckedModeBanner ?? true,
        key: key,
        locale: locale,
        localeListResolutionCallback: localeListResolutionCallback == null
            ? null
            : localeListResolutionCallbackProxy,
        localeResolutionCallback: localeResolutionCallback == null
            ? null
            : localeResolutionCallbackProxy,
        localizationsDelegates: localizationsDelegates == null
            ? null
            : Iterable.castFrom(localizationsDelegates),
        onGenerateTitle: onGenerateTitle == null ? null : onGenerateTitleProxy,
        restorationScopeId: restorationScopeId,
        routeInformationParser: routeInformationParser,
        routeInformationProvider: routeInformationProvider,
        routerConfig: routerConfig,
        routerDelegate: routerDelegate,
        scrollBehavior: scrollBehavior,
        shortcuts: shortcuts == null ? null : Map.from(shortcuts),
        showPerformanceOverlay: showPerformanceOverlay ?? false,
        showSemanticsDebugger: showSemanticsDebugger ?? false,
        supportedLocales: supportedLocales == null
            ? const <Locale>[Locale('en', 'US')]
            : Iterable.castFrom(supportedLocales),
        theme: theme,
        title: title ?? '',
        useInheritedMediaQuery: useInheritedMediaQuery ?? false,
      );
    };
Function _CupertinoApp_createState$(
  m.Scope scope$,
  CupertinoApp target$,
) =>
    target$.createState;
Function _CupertinoApp_createCupertinoHeroController$(m.Scope scope$) =>
    CupertinoApp.createCupertinoHeroController;
Function CupertinoScrollBehavior_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoScrollBehavior;
Function CupertinoScrollBehavior_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoScrollBehavior;
Function _CupertinoScrollBehavior__$(m.Scope scope$) => () {
      return CupertinoScrollBehavior();
    };
Function _CupertinoScrollBehavior_buildScrollbar$(
  m.Scope scope$,
  CupertinoScrollBehavior target$,
) =>
    target$.buildScrollbar;
Function _CupertinoScrollBehavior_buildOverscrollIndicator$(
  m.Scope scope$,
  CupertinoScrollBehavior target$,
) =>
    target$.buildOverscrollIndicator;
Function _CupertinoScrollBehavior_getScrollPhysics$(
  m.Scope scope$,
  CupertinoScrollBehavior target$,
) =>
    target$.getScrollPhysics;
