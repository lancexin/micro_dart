// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/scaffold.dart';
import 'dart:async';
import 'dart:collection';
import 'dart:math';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart' show DragStartBehavior;
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/app_bar.dart';
import 'package:flutter/src/material/banner.dart';
import 'package:flutter/src/material/banner_theme.dart';
import 'package:flutter/src/material/bottom_sheet.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/curves.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/divider.dart';
import 'package:flutter/src/material/drawer.dart';
import 'package:flutter/src/material/flexible_space_bar.dart';
import 'package:flutter/src/material/floating_action_button.dart';
import 'package:flutter/src/material/floating_action_button_location.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/snack_bar.dart';
import 'package:flutter/src/material/snack_bar_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/scaffold.dart',
  {
    'ScaffoldMessenger.of': _ScaffoldMessenger_of$,
    'ScaffoldMessenger.maybeOf': _ScaffoldMessenger_maybeOf$,
    'Scaffold.of': _Scaffold_of$,
    'Scaffold.maybeOf': _Scaffold_maybeOf$,
    'Scaffold.geometryOf': _Scaffold_geometryOf$,
    'Scaffold.hasDrawer': _Scaffold_hasDrawer$,
  },
  {},
  {
    'ScaffoldMessenger': m.ClassMirror(
      'ScaffoldMessenger',
      {
        'child': _ScaffoldMessenger_child$,
        'createState': _ScaffoldMessenger_createState$,
      },
      {},
    ),
    'ScaffoldMessengerState': m.ClassMirror(
      'ScaffoldMessengerState',
      {
        'didChangeDependencies': _ScaffoldMessengerState_didChangeDependencies$,
        'showSnackBar': _ScaffoldMessengerState_showSnackBar$,
        'removeCurrentSnackBar': _ScaffoldMessengerState_removeCurrentSnackBar$,
        'hideCurrentSnackBar': _ScaffoldMessengerState_hideCurrentSnackBar$,
        'clearSnackBars': _ScaffoldMessengerState_clearSnackBars$,
        'showMaterialBanner': _ScaffoldMessengerState_showMaterialBanner$,
        'removeCurrentMaterialBanner':
            _ScaffoldMessengerState_removeCurrentMaterialBanner$,
        'hideCurrentMaterialBanner':
            _ScaffoldMessengerState_hideCurrentMaterialBanner$,
        'clearMaterialBanners': _ScaffoldMessengerState_clearMaterialBanners$,
        'build': _ScaffoldMessengerState_build$,
        'dispose': _ScaffoldMessengerState_dispose$,
      },
      {},
    ),
    'ScaffoldPrelayoutGeometry': m.ClassMirror(
      'ScaffoldPrelayoutGeometry',
      {
        'floatingActionButtonSize':
            _ScaffoldPrelayoutGeometry_floatingActionButtonSize$,
        'bottomSheetSize': _ScaffoldPrelayoutGeometry_bottomSheetSize$,
        'contentBottom': _ScaffoldPrelayoutGeometry_contentBottom$,
        'contentTop': _ScaffoldPrelayoutGeometry_contentTop$,
        'minInsets': _ScaffoldPrelayoutGeometry_minInsets$,
        'minViewPadding': _ScaffoldPrelayoutGeometry_minViewPadding$,
        'scaffoldSize': _ScaffoldPrelayoutGeometry_scaffoldSize$,
        'snackBarSize': _ScaffoldPrelayoutGeometry_snackBarSize$,
        'materialBannerSize': _ScaffoldPrelayoutGeometry_materialBannerSize$,
        'textDirection': _ScaffoldPrelayoutGeometry_textDirection$,
      },
      {},
    ),
    'ScaffoldGeometry': m.ClassMirror(
      'ScaffoldGeometry',
      {
        'bottomNavigationBarTop': _ScaffoldGeometry_bottomNavigationBarTop$,
        'floatingActionButtonArea': _ScaffoldGeometry_floatingActionButtonArea$,
        'copyWith': _ScaffoldGeometry_copyWith$,
      },
      {},
    ),
    'Scaffold': m.ClassMirror(
      'Scaffold',
      {
        'extendBody': _Scaffold_extendBody$,
        'extendBodyBehindAppBar': _Scaffold_extendBodyBehindAppBar$,
        'appBar': _Scaffold_appBar$,
        'body': _Scaffold_body$,
        'floatingActionButton': _Scaffold_floatingActionButton$,
        'floatingActionButtonLocation': _Scaffold_floatingActionButtonLocation$,
        'floatingActionButtonAnimator': _Scaffold_floatingActionButtonAnimator$,
        'persistentFooterButtons': _Scaffold_persistentFooterButtons$,
        'persistentFooterAlignment': _Scaffold_persistentFooterAlignment$,
        'drawer': _Scaffold_drawer$,
        'onDrawerChanged': _Scaffold_onDrawerChanged$,
        'endDrawer': _Scaffold_endDrawer$,
        'onEndDrawerChanged': _Scaffold_onEndDrawerChanged$,
        'drawerScrimColor': _Scaffold_drawerScrimColor$,
        'backgroundColor': _Scaffold_backgroundColor$,
        'bottomNavigationBar': _Scaffold_bottomNavigationBar$,
        'bottomSheet': _Scaffold_bottomSheet$,
        'resizeToAvoidBottomInset': _Scaffold_resizeToAvoidBottomInset$,
        'primary': _Scaffold_primary$,
        'drawerDragStartBehavior': _Scaffold_drawerDragStartBehavior$,
        'drawerEdgeDragWidth': _Scaffold_drawerEdgeDragWidth$,
        'drawerEnableOpenDragGesture': _Scaffold_drawerEnableOpenDragGesture$,
        'endDrawerEnableOpenDragGesture':
            _Scaffold_endDrawerEnableOpenDragGesture$,
        'restorationId': _Scaffold_restorationId$,
        'createState': _Scaffold_createState$,
      },
      {},
    ),
    'ScaffoldState': m.ClassMirror(
      'ScaffoldState',
      {
        'restorationId': _ScaffoldState_restorationId$,
        'hasAppBar': _ScaffoldState_hasAppBar$,
        'hasDrawer': _ScaffoldState_hasDrawer$,
        'hasEndDrawer': _ScaffoldState_hasEndDrawer$,
        'hasFloatingActionButton': _ScaffoldState_hasFloatingActionButton$,
        'appBarMaxHeight': _ScaffoldState_appBarMaxHeight$,
        'isDrawerOpen': _ScaffoldState_isDrawerOpen$,
        'isEndDrawerOpen': _ScaffoldState_isEndDrawerOpen$,
        'restoreState': _ScaffoldState_restoreState$,
        'openDrawer': _ScaffoldState_openDrawer$,
        'openEndDrawer': _ScaffoldState_openEndDrawer$,
        'closeDrawer': _ScaffoldState_closeDrawer$,
        'closeEndDrawer': _ScaffoldState_closeEndDrawer$,
        'initState': _ScaffoldState_initState$,
        'didUpdateWidget': _ScaffoldState_didUpdateWidget$,
        'didChangeDependencies': _ScaffoldState_didChangeDependencies$,
        'dispose': _ScaffoldState_dispose$,
        'showBodyScrim': _ScaffoldState_showBodyScrim$,
        'build': _ScaffoldState_build$,
      },
      {},
    ),
    'ScaffoldFeatureController': m.ClassMirror(
      'ScaffoldFeatureController',
      {
        'close': _ScaffoldFeatureController_close$,
        'setState': _ScaffoldFeatureController_setState$,
        'closed': _ScaffoldFeatureController_closed$,
      },
      {},
    ),
    'PersistentBottomSheetController': m.ClassMirror(
      'PersistentBottomSheetController',
      {},
      {},
    ),
  },
);
Widget _ScaffoldMessenger_child$(ScaffoldMessenger target) {
  return target.child;
}

Function _ScaffoldMessenger_of$(m.Scope scope) => ScaffoldMessenger.of;
Function _ScaffoldMessenger_maybeOf$(m.Scope scope) =>
    ScaffoldMessenger.maybeOf;
Function _ScaffoldMessenger_createState$(
  m.Scope scope,
  ScaffoldMessenger target,
) =>
    target.createState;
Function _ScaffoldMessengerState_didChangeDependencies$(
  m.Scope scope,
  ScaffoldMessengerState target,
) =>
    target.didChangeDependencies;
Function _ScaffoldMessengerState_showSnackBar$(
  m.Scope scope,
  ScaffoldMessengerState target,
) =>
    target.showSnackBar;
Function _ScaffoldMessengerState_removeCurrentSnackBar$(
  m.Scope scope,
  ScaffoldMessengerState target,
) =>
    target.removeCurrentSnackBar;
Function _ScaffoldMessengerState_hideCurrentSnackBar$(
  m.Scope scope,
  ScaffoldMessengerState target,
) =>
    target.hideCurrentSnackBar;
Function _ScaffoldMessengerState_clearSnackBars$(
  m.Scope scope,
  ScaffoldMessengerState target,
) =>
    target.clearSnackBars;
Function _ScaffoldMessengerState_showMaterialBanner$(
  m.Scope scope,
  ScaffoldMessengerState target,
) =>
    target.showMaterialBanner;
Function _ScaffoldMessengerState_removeCurrentMaterialBanner$(
  m.Scope scope,
  ScaffoldMessengerState target,
) =>
    target.removeCurrentMaterialBanner;
Function _ScaffoldMessengerState_hideCurrentMaterialBanner$(
  m.Scope scope,
  ScaffoldMessengerState target,
) =>
    target.hideCurrentMaterialBanner;
Function _ScaffoldMessengerState_clearMaterialBanners$(
  m.Scope scope,
  ScaffoldMessengerState target,
) =>
    target.clearMaterialBanners;
Function _ScaffoldMessengerState_build$(
  m.Scope scope,
  ScaffoldMessengerState target,
) =>
    target.build;
Function _ScaffoldMessengerState_dispose$(
  m.Scope scope,
  ScaffoldMessengerState target,
) =>
    target.dispose;
Size _ScaffoldPrelayoutGeometry_floatingActionButtonSize$(
    ScaffoldPrelayoutGeometry target) {
  return target.floatingActionButtonSize;
}

Size _ScaffoldPrelayoutGeometry_bottomSheetSize$(
    ScaffoldPrelayoutGeometry target) {
  return target.bottomSheetSize;
}

double _ScaffoldPrelayoutGeometry_contentBottom$(
    ScaffoldPrelayoutGeometry target) {
  return target.contentBottom;
}

double _ScaffoldPrelayoutGeometry_contentTop$(
    ScaffoldPrelayoutGeometry target) {
  return target.contentTop;
}

EdgeInsets _ScaffoldPrelayoutGeometry_minInsets$(
    ScaffoldPrelayoutGeometry target) {
  return target.minInsets;
}

EdgeInsets _ScaffoldPrelayoutGeometry_minViewPadding$(
    ScaffoldPrelayoutGeometry target) {
  return target.minViewPadding;
}

Size _ScaffoldPrelayoutGeometry_scaffoldSize$(
    ScaffoldPrelayoutGeometry target) {
  return target.scaffoldSize;
}

Size _ScaffoldPrelayoutGeometry_snackBarSize$(
    ScaffoldPrelayoutGeometry target) {
  return target.snackBarSize;
}

Size _ScaffoldPrelayoutGeometry_materialBannerSize$(
    ScaffoldPrelayoutGeometry target) {
  return target.materialBannerSize;
}

TextDirection _ScaffoldPrelayoutGeometry_textDirection$(
    ScaffoldPrelayoutGeometry target) {
  return target.textDirection;
}

double? _ScaffoldGeometry_bottomNavigationBarTop$(ScaffoldGeometry target) {
  return target.bottomNavigationBarTop;
}

Rect? _ScaffoldGeometry_floatingActionButtonArea$(ScaffoldGeometry target) {
  return target.floatingActionButtonArea;
}

Function _ScaffoldGeometry_copyWith$(
  m.Scope scope,
  ScaffoldGeometry target,
) =>
    target.copyWith;
bool _Scaffold_extendBody$(Scaffold target) {
  return target.extendBody;
}

bool _Scaffold_extendBodyBehindAppBar$(Scaffold target) {
  return target.extendBodyBehindAppBar;
}

PreferredSizeWidget? _Scaffold_appBar$(Scaffold target) {
  return target.appBar;
}

Widget? _Scaffold_body$(Scaffold target) {
  return target.body;
}

Widget? _Scaffold_floatingActionButton$(Scaffold target) {
  return target.floatingActionButton;
}

FloatingActionButtonLocation? _Scaffold_floatingActionButtonLocation$(
    Scaffold target) {
  return target.floatingActionButtonLocation;
}

FloatingActionButtonAnimator? _Scaffold_floatingActionButtonAnimator$(
    Scaffold target) {
  return target.floatingActionButtonAnimator;
}

List<Widget>? _Scaffold_persistentFooterButtons$(Scaffold target) {
  return target.persistentFooterButtons;
}

AlignmentDirectional _Scaffold_persistentFooterAlignment$(Scaffold target) {
  return target.persistentFooterAlignment;
}

Widget? _Scaffold_drawer$(Scaffold target) {
  return target.drawer;
}

void Function(bool)? _Scaffold_onDrawerChanged$(Scaffold target) {
  return target.onDrawerChanged;
}

Widget? _Scaffold_endDrawer$(Scaffold target) {
  return target.endDrawer;
}

void Function(bool)? _Scaffold_onEndDrawerChanged$(Scaffold target) {
  return target.onEndDrawerChanged;
}

Color? _Scaffold_drawerScrimColor$(Scaffold target) {
  return target.drawerScrimColor;
}

Color? _Scaffold_backgroundColor$(Scaffold target) {
  return target.backgroundColor;
}

Widget? _Scaffold_bottomNavigationBar$(Scaffold target) {
  return target.bottomNavigationBar;
}

Widget? _Scaffold_bottomSheet$(Scaffold target) {
  return target.bottomSheet;
}

bool? _Scaffold_resizeToAvoidBottomInset$(Scaffold target) {
  return target.resizeToAvoidBottomInset;
}

bool _Scaffold_primary$(Scaffold target) {
  return target.primary;
}

DragStartBehavior _Scaffold_drawerDragStartBehavior$(Scaffold target) {
  return target.drawerDragStartBehavior;
}

double? _Scaffold_drawerEdgeDragWidth$(Scaffold target) {
  return target.drawerEdgeDragWidth;
}

bool _Scaffold_drawerEnableOpenDragGesture$(Scaffold target) {
  return target.drawerEnableOpenDragGesture;
}

bool _Scaffold_endDrawerEnableOpenDragGesture$(Scaffold target) {
  return target.endDrawerEnableOpenDragGesture;
}

String? _Scaffold_restorationId$(Scaffold target) {
  return target.restorationId;
}

Function _Scaffold_of$(m.Scope scope) => Scaffold.of;
Function _Scaffold_maybeOf$(m.Scope scope) => Scaffold.maybeOf;
Function _Scaffold_geometryOf$(m.Scope scope) => Scaffold.geometryOf;
Function _Scaffold_hasDrawer$(m.Scope scope) => Scaffold.hasDrawer;
Function _Scaffold_createState$(
  m.Scope scope,
  Scaffold target,
) =>
    target.createState;
String? _ScaffoldState_restorationId$(ScaffoldState target) {
  return target.restorationId;
}

bool _ScaffoldState_hasAppBar$(ScaffoldState target) {
  return target.hasAppBar;
}

bool _ScaffoldState_hasDrawer$(ScaffoldState target) {
  return target.hasDrawer;
}

bool _ScaffoldState_hasEndDrawer$(ScaffoldState target) {
  return target.hasEndDrawer;
}

bool _ScaffoldState_hasFloatingActionButton$(ScaffoldState target) {
  return target.hasFloatingActionButton;
}

double? _ScaffoldState_appBarMaxHeight$(ScaffoldState target) {
  return target.appBarMaxHeight;
}

bool _ScaffoldState_isDrawerOpen$(ScaffoldState target) {
  return target.isDrawerOpen;
}

bool _ScaffoldState_isEndDrawerOpen$(ScaffoldState target) {
  return target.isEndDrawerOpen;
}

Function _ScaffoldState_restoreState$(
  m.Scope scope,
  ScaffoldState target,
) =>
    target.restoreState;
Function _ScaffoldState_openDrawer$(
  m.Scope scope,
  ScaffoldState target,
) =>
    target.openDrawer;
Function _ScaffoldState_openEndDrawer$(
  m.Scope scope,
  ScaffoldState target,
) =>
    target.openEndDrawer;
Function _ScaffoldState_closeDrawer$(
  m.Scope scope,
  ScaffoldState target,
) =>
    target.closeDrawer;
Function _ScaffoldState_closeEndDrawer$(
  m.Scope scope,
  ScaffoldState target,
) =>
    target.closeEndDrawer;
Function _ScaffoldState_initState$(
  m.Scope scope,
  ScaffoldState target,
) =>
    target.initState;
Function _ScaffoldState_didUpdateWidget$(
  m.Scope scope,
  ScaffoldState target,
) =>
    target.didUpdateWidget;
Function _ScaffoldState_didChangeDependencies$(
  m.Scope scope,
  ScaffoldState target,
) =>
    target.didChangeDependencies;
Function _ScaffoldState_dispose$(
  m.Scope scope,
  ScaffoldState target,
) =>
    target.dispose;
Function _ScaffoldState_showBodyScrim$(
  m.Scope scope,
  ScaffoldState target,
) =>
    target.showBodyScrim;
Function _ScaffoldState_build$(
  m.Scope scope,
  ScaffoldState target,
) =>
    target.build;
void Function() _ScaffoldFeatureController_close$<T extends Widget, U>(
    ScaffoldFeatureController<T, U> target) {
  return target.close;
}

void Function(void Function())?
    _ScaffoldFeatureController_setState$<T extends Widget, U>(
        ScaffoldFeatureController<T, U> target) {
  return target.setState;
}

Future<U> _ScaffoldFeatureController_closed$<T extends Widget, U>(
    ScaffoldFeatureController<T, U> target) {
  return target.closed;
}
