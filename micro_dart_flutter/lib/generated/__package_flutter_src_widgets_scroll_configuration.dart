// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart' show LogicalKeyboardKey;
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/overscroll_indicator.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/scrollable.dart';
import 'package:flutter/src/widgets/scrollable_helpers.dart';
import 'package:flutter/src/widgets/scrollbar.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/scroll_configuration.dart',
  {
    'ScrollConfiguration.of': _ScrollConfiguration_of$,
    'AndroidOverscrollIndicator.stretch': _AndroidOverscrollIndicator_stretch$,
    'AndroidOverscrollIndicator.glow': _AndroidOverscrollIndicator_glow$,
    'AndroidOverscrollIndicator.values': _AndroidOverscrollIndicator_values$,
  },
  {},
  {
    'ScrollBehavior': m.ClassMirror(
      'ScrollBehavior',
      {
        'dragDevices': _ScrollBehavior_dragDevices$,
        'pointerAxisModifiers': _ScrollBehavior_pointerAxisModifiers$,
        'copyWith': _ScrollBehavior_copyWith$,
        'getPlatform': _ScrollBehavior_getPlatform$,
        'buildScrollbar': _ScrollBehavior_buildScrollbar$,
        'buildOverscrollIndicator': _ScrollBehavior_buildOverscrollIndicator$,
        'velocityTrackerBuilder': _ScrollBehavior_velocityTrackerBuilder$,
        'getScrollPhysics': _ScrollBehavior_getScrollPhysics$,
        'shouldNotify': _ScrollBehavior_shouldNotify$,
        'toString': _ScrollBehavior_toString$,
      },
      {},
    ),
    'ScrollConfiguration': m.ClassMirror(
      'ScrollConfiguration',
      {
        'behavior': _ScrollConfiguration_behavior$,
        'updateShouldNotify': _ScrollConfiguration_updateShouldNotify$,
        'debugFillProperties': _ScrollConfiguration_debugFillProperties$,
      },
      {},
    ),
    'AndroidOverscrollIndicator': m.ClassMirror(
      'AndroidOverscrollIndicator',
      {},
      {},
    ),
  },
);
Set<PointerDeviceKind> _ScrollBehavior_dragDevices$(ScrollBehavior target) {
  return target.dragDevices;
}

Set<LogicalKeyboardKey> _ScrollBehavior_pointerAxisModifiers$(
    ScrollBehavior target) {
  return target.pointerAxisModifiers;
}

Function _ScrollBehavior_copyWith$(
  m.Scope scope,
  ScrollBehavior target,
) =>
    target.copyWith;
Function _ScrollBehavior_getPlatform$(
  m.Scope scope,
  ScrollBehavior target,
) =>
    target.getPlatform;
Function _ScrollBehavior_buildScrollbar$(
  m.Scope scope,
  ScrollBehavior target,
) =>
    target.buildScrollbar;
Function _ScrollBehavior_buildOverscrollIndicator$(
  m.Scope scope,
  ScrollBehavior target,
) =>
    target.buildOverscrollIndicator;
Function _ScrollBehavior_velocityTrackerBuilder$(
  m.Scope scope,
  ScrollBehavior target,
) =>
    target.velocityTrackerBuilder;
Function _ScrollBehavior_getScrollPhysics$(
  m.Scope scope,
  ScrollBehavior target,
) =>
    target.getScrollPhysics;
Function _ScrollBehavior_shouldNotify$(
  m.Scope scope,
  ScrollBehavior target,
) =>
    target.shouldNotify;
Function _ScrollBehavior_toString$(
  m.Scope scope,
  ScrollBehavior target,
) =>
    target.toString;
ScrollBehavior _ScrollConfiguration_behavior$(ScrollConfiguration target) {
  return target.behavior;
}

Function _ScrollConfiguration_of$(m.Scope scope) => ScrollConfiguration.of;
Function _ScrollConfiguration_updateShouldNotify$(
  m.Scope scope,
  ScrollConfiguration target,
) =>
    target.updateShouldNotify;
Function _ScrollConfiguration_debugFillProperties$(
  m.Scope scope,
  ScrollConfiguration target,
) =>
    target.debugFillProperties;
AndroidOverscrollIndicator _AndroidOverscrollIndicator_stretch$() {
  return AndroidOverscrollIndicator.stretch;
}

AndroidOverscrollIndicator _AndroidOverscrollIndicator_glow$() {
  return AndroidOverscrollIndicator.glow;
}

List<AndroidOverscrollIndicator> _AndroidOverscrollIndicator_values$() {
  return AndroidOverscrollIndicator.values;
}
