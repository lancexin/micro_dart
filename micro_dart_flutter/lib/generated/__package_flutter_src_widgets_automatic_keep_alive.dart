// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/automatic_keep_alive.dart';
import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/notification_listener.dart';
import 'package:flutter/src/widgets/sliver.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/automatic_keep_alive.dart',
  {
    'AutomaticKeepAlive.': _AutomaticKeepAlive__$,
    'KeepAliveNotification.': _KeepAliveNotification__$,
    'KeepAliveHandle.': _KeepAliveHandle__$,
  },
  {},
  {
    'AutomaticKeepAlive': m.ClassMirror(
      'AutomaticKeepAlive',
      {
        '#as': AutomaticKeepAlive_as$,
        '#is': AutomaticKeepAlive_is$,
        'child': _AutomaticKeepAlive_child$,
        'createState': _AutomaticKeepAlive_createState$,
      },
      {},
    ),
    'KeepAliveNotification': m.ClassMirror(
      'KeepAliveNotification',
      {
        '#as': KeepAliveNotification_as$,
        '#is': KeepAliveNotification_is$,
        'handle': _KeepAliveNotification_handle$,
      },
      {},
    ),
    'KeepAliveHandle': m.ClassMirror(
      'KeepAliveHandle',
      {
        '#as': KeepAliveHandle_as$,
        '#is': KeepAliveHandle_is$,
        'dispose': _KeepAliveHandle_dispose$,
      },
      {},
    ),
  },
);
Function AutomaticKeepAlive_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AutomaticKeepAlive;
Function AutomaticKeepAlive_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AutomaticKeepAlive;
Function _AutomaticKeepAlive_child$(
  m.Scope scope$,
  AutomaticKeepAlive target$,
) =>
    () {
      return target$.child;
    };
Function _AutomaticKeepAlive__$(m.Scope scope$) => ({
      Key? key,
      required Widget child,
    }) {
      return AutomaticKeepAlive(
        child: child,
        key: key,
      );
    };
Function _AutomaticKeepAlive_createState$(
  m.Scope scope$,
  AutomaticKeepAlive target$,
) =>
    target$.createState;
Function KeepAliveNotification_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as KeepAliveNotification;
Function KeepAliveNotification_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is KeepAliveNotification;
Function _KeepAliveNotification_handle$(
  m.Scope scope$,
  KeepAliveNotification target$,
) =>
    () {
      return target$.handle;
    };
Function _KeepAliveNotification__$(m.Scope scope$) => (Listenable handle) {
      return KeepAliveNotification(handle);
    };
Function KeepAliveHandle_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as KeepAliveHandle;
Function KeepAliveHandle_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is KeepAliveHandle;
Function _KeepAliveHandle__$(m.Scope scope$) => () {
      return KeepAliveHandle();
    };
Function _KeepAliveHandle_dispose$(
  m.Scope scope$,
  KeepAliveHandle target$,
) =>
    target$.dispose;
