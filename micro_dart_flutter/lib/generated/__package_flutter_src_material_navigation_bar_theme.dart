// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/navigation_bar_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/navigation_bar.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/navigation_bar_theme.dart',
  {
    'NavigationBarThemeData.lerp': _NavigationBarThemeData_lerp$,
    'NavigationBarTheme.of': _NavigationBarTheme_of$,
  },
  {},
  {
    'NavigationBarThemeData': m.ClassMirror(
      'NavigationBarThemeData',
      {
        '#as': NavigationBarThemeData_as$,
        '#is': NavigationBarThemeData_is$,
        'height': _NavigationBarThemeData_height$,
        'backgroundColor': _NavigationBarThemeData_backgroundColor$,
        'elevation': _NavigationBarThemeData_elevation$,
        'shadowColor': _NavigationBarThemeData_shadowColor$,
        'surfaceTintColor': _NavigationBarThemeData_surfaceTintColor$,
        'indicatorColor': _NavigationBarThemeData_indicatorColor$,
        'indicatorShape': _NavigationBarThemeData_indicatorShape$,
        'labelTextStyle': _NavigationBarThemeData_labelTextStyle$,
        'iconTheme': _NavigationBarThemeData_iconTheme$,
        'labelBehavior': _NavigationBarThemeData_labelBehavior$,
        'hashCode': _NavigationBarThemeData_hashCode$,
        'copyWith': _NavigationBarThemeData_copyWith$,
        '==': _NavigationBarThemeData_eq$$,
        'debugFillProperties': _NavigationBarThemeData_debugFillProperties$,
      },
      {},
    ),
    'NavigationBarTheme': m.ClassMirror(
      'NavigationBarTheme',
      {
        '#as': NavigationBarTheme_as$,
        '#is': NavigationBarTheme_is$,
        'data': _NavigationBarTheme_data$,
        'wrap': _NavigationBarTheme_wrap$,
        'updateShouldNotify': _NavigationBarTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function NavigationBarThemeData_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as NavigationBarThemeData;
Function NavigationBarThemeData_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is NavigationBarThemeData;
double? _NavigationBarThemeData_height$(NavigationBarThemeData target) {
  return target.height;
}

Color? _NavigationBarThemeData_backgroundColor$(NavigationBarThemeData target) {
  return target.backgroundColor;
}

double? _NavigationBarThemeData_elevation$(NavigationBarThemeData target) {
  return target.elevation;
}

Color? _NavigationBarThemeData_shadowColor$(NavigationBarThemeData target) {
  return target.shadowColor;
}

Color? _NavigationBarThemeData_surfaceTintColor$(
    NavigationBarThemeData target) {
  return target.surfaceTintColor;
}

Color? _NavigationBarThemeData_indicatorColor$(NavigationBarThemeData target) {
  return target.indicatorColor;
}

ShapeBorder? _NavigationBarThemeData_indicatorShape$(
    NavigationBarThemeData target) {
  return target.indicatorShape;
}

MaterialStateProperty<TextStyle?>? _NavigationBarThemeData_labelTextStyle$(
    NavigationBarThemeData target) {
  return target.labelTextStyle;
}

MaterialStateProperty<IconThemeData?>? _NavigationBarThemeData_iconTheme$(
    NavigationBarThemeData target) {
  return target.iconTheme;
}

NavigationDestinationLabelBehavior? _NavigationBarThemeData_labelBehavior$(
    NavigationBarThemeData target) {
  return target.labelBehavior;
}

int _NavigationBarThemeData_hashCode$(NavigationBarThemeData target) {
  return target.hashCode;
}

Function _NavigationBarThemeData_copyWith$(
  m.Scope scope,
  NavigationBarThemeData target,
) =>
    target.copyWith;
Function _NavigationBarThemeData_lerp$(m.Scope scope) =>
    NavigationBarThemeData.lerp;
Function _NavigationBarThemeData_eq$$(
  m.Scope scope,
  NavigationBarThemeData target,
) =>
    (Object other) => target == other;
Function _NavigationBarThemeData_debugFillProperties$(
  m.Scope scope,
  NavigationBarThemeData target,
) =>
    target.debugFillProperties;
Function NavigationBarTheme_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as NavigationBarTheme;
Function NavigationBarTheme_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is NavigationBarTheme;
NavigationBarThemeData _NavigationBarTheme_data$(NavigationBarTheme target) {
  return target.data;
}

Function _NavigationBarTheme_of$(m.Scope scope) => NavigationBarTheme.of;
Function _NavigationBarTheme_wrap$(
  m.Scope scope,
  NavigationBarTheme target,
) =>
    target.wrap;
Function _NavigationBarTheme_updateShouldNotify$(
  m.Scope scope,
  NavigationBarTheme target,
) =>
    target.updateShouldNotify;
