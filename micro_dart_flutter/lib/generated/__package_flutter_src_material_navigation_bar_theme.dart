// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/navigation_bar_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/navigation_bar.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/navigation_bar_theme.dart',
  {
    'NavigationBarThemeData.': _NavigationBarThemeData__$,
    'NavigationBarThemeData.lerp': _NavigationBarThemeData_lerp$,
    'NavigationBarTheme.': _NavigationBarTheme__$,
    'NavigationBarTheme.of': _NavigationBarTheme_of$,
  },
  {},
  {
    'NavigationBarThemeData': m.ClassMirror(
      'NavigationBarThemeData',
      {
        '#as': NavigationBarThemeData_as$,
        '#is': NavigationBarThemeData_is$,
        'height': _NavigationBarThemeData_height$,
        'backgroundColor': _NavigationBarThemeData_backgroundColor$,
        'elevation': _NavigationBarThemeData_elevation$,
        'shadowColor': _NavigationBarThemeData_shadowColor$,
        'surfaceTintColor': _NavigationBarThemeData_surfaceTintColor$,
        'indicatorColor': _NavigationBarThemeData_indicatorColor$,
        'indicatorShape': _NavigationBarThemeData_indicatorShape$,
        'labelTextStyle': _NavigationBarThemeData_labelTextStyle$,
        'iconTheme': _NavigationBarThemeData_iconTheme$,
        'labelBehavior': _NavigationBarThemeData_labelBehavior$,
        'hashCode': _NavigationBarThemeData_hashCode$,
        'copyWith': _NavigationBarThemeData_copyWith$,
        '==': _NavigationBarThemeData_eq$$,
        'debugFillProperties': _NavigationBarThemeData_debugFillProperties$,
      },
      {},
    ),
    'NavigationBarTheme': m.ClassMirror(
      'NavigationBarTheme',
      {
        '#as': NavigationBarTheme_as$,
        '#is': NavigationBarTheme_is$,
        'data': _NavigationBarTheme_data$,
        'wrap': _NavigationBarTheme_wrap$,
        'updateShouldNotify': _NavigationBarTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function NavigationBarThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as NavigationBarThemeData;
Function NavigationBarThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is NavigationBarThemeData;
Function _NavigationBarThemeData_height$(
  m.Scope scope$,
  NavigationBarThemeData target$,
) =>
    () {
      return target$.height;
    };
Function _NavigationBarThemeData_backgroundColor$(
  m.Scope scope$,
  NavigationBarThemeData target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _NavigationBarThemeData_elevation$(
  m.Scope scope$,
  NavigationBarThemeData target$,
) =>
    () {
      return target$.elevation;
    };
Function _NavigationBarThemeData_shadowColor$(
  m.Scope scope$,
  NavigationBarThemeData target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _NavigationBarThemeData_surfaceTintColor$(
  m.Scope scope$,
  NavigationBarThemeData target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _NavigationBarThemeData_indicatorColor$(
  m.Scope scope$,
  NavigationBarThemeData target$,
) =>
    () {
      return target$.indicatorColor;
    };
Function _NavigationBarThemeData_indicatorShape$(
  m.Scope scope$,
  NavigationBarThemeData target$,
) =>
    () {
      return target$.indicatorShape;
    };
Function _NavigationBarThemeData_labelTextStyle$(
  m.Scope scope$,
  NavigationBarThemeData target$,
) =>
    () {
      return target$.labelTextStyle;
    };
Function _NavigationBarThemeData_iconTheme$(
  m.Scope scope$,
  NavigationBarThemeData target$,
) =>
    () {
      return target$.iconTheme;
    };
Function _NavigationBarThemeData_labelBehavior$(
  m.Scope scope$,
  NavigationBarThemeData target$,
) =>
    () {
      return target$.labelBehavior;
    };
Function _NavigationBarThemeData_hashCode$(
  m.Scope scope$,
  NavigationBarThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _NavigationBarThemeData__$(m.Scope scope$) => ({
      double? height,
      Color? backgroundColor,
      double? elevation,
      Color? shadowColor,
      Color? surfaceTintColor,
      Color? indicatorColor,
      ShapeBorder? indicatorShape,
      MaterialStateProperty<TextStyle>? labelTextStyle,
      MaterialStateProperty<IconThemeData>? iconTheme,
      NavigationDestinationLabelBehavior? labelBehavior,
    }) {
      return NavigationBarThemeData(
        backgroundColor: backgroundColor,
        elevation: elevation,
        height: height,
        iconTheme: iconTheme,
        indicatorColor: indicatorColor,
        indicatorShape: indicatorShape,
        labelBehavior: labelBehavior,
        labelTextStyle: labelTextStyle,
        shadowColor: shadowColor,
        surfaceTintColor: surfaceTintColor,
      );
    };
Function _NavigationBarThemeData_copyWith$(
  m.Scope scope$,
  NavigationBarThemeData target$,
) =>
    target$.copyWith;
Function _NavigationBarThemeData_lerp$(m.Scope scope$) =>
    NavigationBarThemeData.lerp;
Function _NavigationBarThemeData_eq$$(
  m.Scope scope$,
  NavigationBarThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _NavigationBarThemeData_debugFillProperties$(
  m.Scope scope$,
  NavigationBarThemeData target$,
) =>
    target$.debugFillProperties;
Function NavigationBarTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as NavigationBarTheme;
Function NavigationBarTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is NavigationBarTheme;
Function _NavigationBarTheme_data$(
  m.Scope scope$,
  NavigationBarTheme target$,
) =>
    () {
      return target$.data;
    };
Function _NavigationBarTheme__$(m.Scope scope$) => ({
      Key? key,
      required NavigationBarThemeData data,
      required Widget child,
    }) {
      return NavigationBarTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _NavigationBarTheme_of$(m.Scope scope$) => NavigationBarTheme.of;
Function _NavigationBarTheme_wrap$(
  m.Scope scope$,
  NavigationBarTheme target$,
) =>
    target$.wrap;
Function _NavigationBarTheme_updateShouldNotify$(
  m.Scope scope$,
  NavigationBarTheme target$,
) =>
    target$.updateShouldNotify;
