// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/primary_scroll_controller.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/primary_scroll_controller.dart',
  {
    'PrimaryScrollController.': _PrimaryScrollController__$,
    'PrimaryScrollController.none': _PrimaryScrollController_none_$,
    'PrimaryScrollController.shouldInherit':
        _PrimaryScrollController_shouldInherit$,
    'PrimaryScrollController.maybeOf': _PrimaryScrollController_maybeOf$,
    'PrimaryScrollController.of': _PrimaryScrollController_of$,
  },
  {},
  {
    'PrimaryScrollController': m.ClassMirror(
      'PrimaryScrollController',
      {
        '#as': PrimaryScrollController_as$,
        '#is': PrimaryScrollController_is$,
        'controller': _PrimaryScrollController_controller$,
        'scrollDirection': _PrimaryScrollController_scrollDirection$,
        'automaticallyInheritForPlatforms':
            _PrimaryScrollController_automaticallyInheritForPlatforms$,
        'updateShouldNotify': _PrimaryScrollController_updateShouldNotify$,
        'debugFillProperties': _PrimaryScrollController_debugFillProperties$,
      },
      {},
    )
  },
);
Function PrimaryScrollController_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PrimaryScrollController;
Function PrimaryScrollController_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PrimaryScrollController;
Function _PrimaryScrollController_controller$(
  m.Scope scope$,
  PrimaryScrollController target$,
) =>
    () {
      return target$.controller;
    };
Function _PrimaryScrollController_scrollDirection$(
  m.Scope scope$,
  PrimaryScrollController target$,
) =>
    () {
      return target$.scrollDirection;
    };
Function _PrimaryScrollController_automaticallyInheritForPlatforms$(
  m.Scope scope$,
  PrimaryScrollController target$,
) =>
    () {
      return target$.automaticallyInheritForPlatforms;
    };

const Set<TargetPlatform> _kMobilePlatforms = <TargetPlatform>{
  TargetPlatform.android,
  TargetPlatform.iOS,
  TargetPlatform.fuchsia,
};
Function _PrimaryScrollController__$(m.Scope scope$) => ({
      Key? key,
      required ScrollController controller,
      Set? automaticallyInheritForPlatforms,
      Axis? scrollDirection,
      required Widget child,
    }) {
      return PrimaryScrollController(
        automaticallyInheritForPlatforms:
            automaticallyInheritForPlatforms == null
                ? _kMobilePlatforms
                : Set.from(automaticallyInheritForPlatforms),
        child: child,
        controller: controller,
        key: key,
        scrollDirection: scrollDirection ?? Axis.vertical,
      );
    };
Function _PrimaryScrollController_none_$(m.Scope scope$) =>
    PrimaryScrollController.none;
Function _PrimaryScrollController_shouldInherit$(m.Scope scope$) =>
    PrimaryScrollController.shouldInherit;
Function _PrimaryScrollController_maybeOf$(m.Scope scope$) =>
    PrimaryScrollController.maybeOf;
Function _PrimaryScrollController_of$(m.Scope scope$) =>
    PrimaryScrollController.of;
Function _PrimaryScrollController_updateShouldNotify$(
  m.Scope scope$,
  PrimaryScrollController target$,
) =>
    target$.updateShouldNotify;
Function _PrimaryScrollController_debugFillProperties$(
  m.Scope scope$,
  PrimaryScrollController target$,
) =>
    target$.debugFillProperties;
