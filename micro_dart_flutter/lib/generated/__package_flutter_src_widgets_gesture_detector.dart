// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/gesture_detector.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/media_query.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/gesture_detector.dart',
  {},
  {},
  {
    'GestureRecognizerFactory': m.ClassMirror(
      'GestureRecognizerFactory',
      {
        '#as': GestureRecognizerFactory_as$,
        '#is': GestureRecognizerFactory_is$,
        'constructor': _GestureRecognizerFactory_constructor$,
        'initializer': _GestureRecognizerFactory_initializer$,
      },
      {},
    ),
    'GestureRecognizerFactoryWithHandlers': m.ClassMirror(
      'GestureRecognizerFactoryWithHandlers',
      {
        '#as': GestureRecognizerFactoryWithHandlers_as$,
        '#is': GestureRecognizerFactoryWithHandlers_is$,
        'constructor': _GestureRecognizerFactoryWithHandlers_constructor$,
        'initializer': _GestureRecognizerFactoryWithHandlers_initializer$,
      },
      {},
    ),
    'GestureDetector': m.ClassMirror(
      'GestureDetector',
      {
        '#as': GestureDetector_as$,
        '#is': GestureDetector_is$,
        'child': _GestureDetector_child$,
        'onTapDown': _GestureDetector_onTapDown$,
        'onTapUp': _GestureDetector_onTapUp$,
        'onTap': _GestureDetector_onTap$,
        'onTapCancel': _GestureDetector_onTapCancel$,
        'onSecondaryTap': _GestureDetector_onSecondaryTap$,
        'onSecondaryTapDown': _GestureDetector_onSecondaryTapDown$,
        'onSecondaryTapUp': _GestureDetector_onSecondaryTapUp$,
        'onSecondaryTapCancel': _GestureDetector_onSecondaryTapCancel$,
        'onTertiaryTapDown': _GestureDetector_onTertiaryTapDown$,
        'onTertiaryTapUp': _GestureDetector_onTertiaryTapUp$,
        'onTertiaryTapCancel': _GestureDetector_onTertiaryTapCancel$,
        'onDoubleTapDown': _GestureDetector_onDoubleTapDown$,
        'onDoubleTap': _GestureDetector_onDoubleTap$,
        'onDoubleTapCancel': _GestureDetector_onDoubleTapCancel$,
        'onLongPressDown': _GestureDetector_onLongPressDown$,
        'onLongPressCancel': _GestureDetector_onLongPressCancel$,
        'onLongPress': _GestureDetector_onLongPress$,
        'onLongPressStart': _GestureDetector_onLongPressStart$,
        'onLongPressMoveUpdate': _GestureDetector_onLongPressMoveUpdate$,
        'onLongPressUp': _GestureDetector_onLongPressUp$,
        'onLongPressEnd': _GestureDetector_onLongPressEnd$,
        'onSecondaryLongPressDown': _GestureDetector_onSecondaryLongPressDown$,
        'onSecondaryLongPressCancel':
            _GestureDetector_onSecondaryLongPressCancel$,
        'onSecondaryLongPress': _GestureDetector_onSecondaryLongPress$,
        'onSecondaryLongPressStart':
            _GestureDetector_onSecondaryLongPressStart$,
        'onSecondaryLongPressMoveUpdate':
            _GestureDetector_onSecondaryLongPressMoveUpdate$,
        'onSecondaryLongPressUp': _GestureDetector_onSecondaryLongPressUp$,
        'onSecondaryLongPressEnd': _GestureDetector_onSecondaryLongPressEnd$,
        'onTertiaryLongPressDown': _GestureDetector_onTertiaryLongPressDown$,
        'onTertiaryLongPressCancel':
            _GestureDetector_onTertiaryLongPressCancel$,
        'onTertiaryLongPress': _GestureDetector_onTertiaryLongPress$,
        'onTertiaryLongPressStart': _GestureDetector_onTertiaryLongPressStart$,
        'onTertiaryLongPressMoveUpdate':
            _GestureDetector_onTertiaryLongPressMoveUpdate$,
        'onTertiaryLongPressUp': _GestureDetector_onTertiaryLongPressUp$,
        'onTertiaryLongPressEnd': _GestureDetector_onTertiaryLongPressEnd$,
        'onVerticalDragDown': _GestureDetector_onVerticalDragDown$,
        'onVerticalDragStart': _GestureDetector_onVerticalDragStart$,
        'onVerticalDragUpdate': _GestureDetector_onVerticalDragUpdate$,
        'onVerticalDragEnd': _GestureDetector_onVerticalDragEnd$,
        'onVerticalDragCancel': _GestureDetector_onVerticalDragCancel$,
        'onHorizontalDragDown': _GestureDetector_onHorizontalDragDown$,
        'onHorizontalDragStart': _GestureDetector_onHorizontalDragStart$,
        'onHorizontalDragUpdate': _GestureDetector_onHorizontalDragUpdate$,
        'onHorizontalDragEnd': _GestureDetector_onHorizontalDragEnd$,
        'onHorizontalDragCancel': _GestureDetector_onHorizontalDragCancel$,
        'onPanDown': _GestureDetector_onPanDown$,
        'onPanStart': _GestureDetector_onPanStart$,
        'onPanUpdate': _GestureDetector_onPanUpdate$,
        'onPanEnd': _GestureDetector_onPanEnd$,
        'onPanCancel': _GestureDetector_onPanCancel$,
        'onScaleStart': _GestureDetector_onScaleStart$,
        'onScaleUpdate': _GestureDetector_onScaleUpdate$,
        'onScaleEnd': _GestureDetector_onScaleEnd$,
        'onForcePressStart': _GestureDetector_onForcePressStart$,
        'onForcePressPeak': _GestureDetector_onForcePressPeak$,
        'onForcePressUpdate': _GestureDetector_onForcePressUpdate$,
        'onForcePressEnd': _GestureDetector_onForcePressEnd$,
        'behavior': _GestureDetector_behavior$,
        'excludeFromSemantics': _GestureDetector_excludeFromSemantics$,
        'dragStartBehavior': _GestureDetector_dragStartBehavior$,
        'supportedDevices': _GestureDetector_supportedDevices$,
        'trackpadScrollCausesScale':
            _GestureDetector_trackpadScrollCausesScale$,
        'trackpadScrollToScaleFactor':
            _GestureDetector_trackpadScrollToScaleFactor$,
        'build': _GestureDetector_build$,
        'debugFillProperties': _GestureDetector_debugFillProperties$,
      },
      {},
    ),
    'RawGestureDetector': m.ClassMirror(
      'RawGestureDetector',
      {
        '#as': RawGestureDetector_as$,
        '#is': RawGestureDetector_is$,
        'child': _RawGestureDetector_child$,
        'gestures': _RawGestureDetector_gestures$,
        'behavior': _RawGestureDetector_behavior$,
        'excludeFromSemantics': _RawGestureDetector_excludeFromSemantics$,
        'semantics': _RawGestureDetector_semantics$,
        'createState': _RawGestureDetector_createState$,
      },
      {},
    ),
    'RawGestureDetectorState': m.ClassMirror(
      'RawGestureDetectorState',
      {
        '#as': RawGestureDetectorState_as$,
        '#is': RawGestureDetectorState_is$,
        'initState': _RawGestureDetectorState_initState$,
        'didUpdateWidget': _RawGestureDetectorState_didUpdateWidget$,
        'replaceGestureRecognizers':
            _RawGestureDetectorState_replaceGestureRecognizers$,
        'replaceSemanticsActions':
            _RawGestureDetectorState_replaceSemanticsActions$,
        'dispose': _RawGestureDetectorState_dispose$,
        'build': _RawGestureDetectorState_build$,
        'debugFillProperties': _RawGestureDetectorState_debugFillProperties$,
      },
      {},
    ),
    'SemanticsGestureDelegate': m.ClassMirror(
      'SemanticsGestureDelegate',
      {
        '#as': SemanticsGestureDelegate_as$,
        '#is': SemanticsGestureDelegate_is$,
        'assignSemantics': _SemanticsGestureDelegate_assignSemantics$,
        'toString': _SemanticsGestureDelegate_toString$,
      },
      {},
    ),
  },
);
Function GestureRecognizerFactory_as$<T extends GestureRecognizer>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as GestureRecognizerFactory<T>;
Function GestureRecognizerFactory_is$<T extends GestureRecognizer>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is GestureRecognizerFactory<T>;
Function _GestureRecognizerFactory_constructor$<T extends GestureRecognizer>(
  m.Scope scope,
  GestureRecognizerFactory<T> target,
) =>
    target.constructor;
Function _GestureRecognizerFactory_initializer$<T extends GestureRecognizer>(
  m.Scope scope,
  GestureRecognizerFactory<T> target,
) =>
    target.initializer;
Function GestureRecognizerFactoryWithHandlers_as$<T extends GestureRecognizer>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as GestureRecognizerFactoryWithHandlers<T>;
Function GestureRecognizerFactoryWithHandlers_is$<T extends GestureRecognizer>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is GestureRecognizerFactoryWithHandlers<T>;
Function _GestureRecognizerFactoryWithHandlers_constructor$<
        T extends GestureRecognizer>(
  m.Scope scope,
  GestureRecognizerFactoryWithHandlers<T> target,
) =>
    target.constructor;
Function _GestureRecognizerFactoryWithHandlers_initializer$<
        T extends GestureRecognizer>(
  m.Scope scope,
  GestureRecognizerFactoryWithHandlers<T> target,
) =>
    target.initializer;
Function GestureDetector_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as GestureDetector;
Function GestureDetector_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is GestureDetector;
Widget? _GestureDetector_child$(GestureDetector target) {
  return target.child;
}

void Function(TapDownDetails)? _GestureDetector_onTapDown$(
    GestureDetector target) {
  return target.onTapDown;
}

void Function(TapUpDetails)? _GestureDetector_onTapUp$(GestureDetector target) {
  return target.onTapUp;
}

void Function()? _GestureDetector_onTap$(GestureDetector target) {
  return target.onTap;
}

void Function()? _GestureDetector_onTapCancel$(GestureDetector target) {
  return target.onTapCancel;
}

void Function()? _GestureDetector_onSecondaryTap$(GestureDetector target) {
  return target.onSecondaryTap;
}

void Function(TapDownDetails)? _GestureDetector_onSecondaryTapDown$(
    GestureDetector target) {
  return target.onSecondaryTapDown;
}

void Function(TapUpDetails)? _GestureDetector_onSecondaryTapUp$(
    GestureDetector target) {
  return target.onSecondaryTapUp;
}

void Function()? _GestureDetector_onSecondaryTapCancel$(
    GestureDetector target) {
  return target.onSecondaryTapCancel;
}

void Function(TapDownDetails)? _GestureDetector_onTertiaryTapDown$(
    GestureDetector target) {
  return target.onTertiaryTapDown;
}

void Function(TapUpDetails)? _GestureDetector_onTertiaryTapUp$(
    GestureDetector target) {
  return target.onTertiaryTapUp;
}

void Function()? _GestureDetector_onTertiaryTapCancel$(GestureDetector target) {
  return target.onTertiaryTapCancel;
}

void Function(TapDownDetails)? _GestureDetector_onDoubleTapDown$(
    GestureDetector target) {
  return target.onDoubleTapDown;
}

void Function()? _GestureDetector_onDoubleTap$(GestureDetector target) {
  return target.onDoubleTap;
}

void Function()? _GestureDetector_onDoubleTapCancel$(GestureDetector target) {
  return target.onDoubleTapCancel;
}

void Function(LongPressDownDetails)? _GestureDetector_onLongPressDown$(
    GestureDetector target) {
  return target.onLongPressDown;
}

void Function()? _GestureDetector_onLongPressCancel$(GestureDetector target) {
  return target.onLongPressCancel;
}

void Function()? _GestureDetector_onLongPress$(GestureDetector target) {
  return target.onLongPress;
}

void Function(LongPressStartDetails)? _GestureDetector_onLongPressStart$(
    GestureDetector target) {
  return target.onLongPressStart;
}

void Function(LongPressMoveUpdateDetails)?
    _GestureDetector_onLongPressMoveUpdate$(GestureDetector target) {
  return target.onLongPressMoveUpdate;
}

void Function()? _GestureDetector_onLongPressUp$(GestureDetector target) {
  return target.onLongPressUp;
}

void Function(LongPressEndDetails)? _GestureDetector_onLongPressEnd$(
    GestureDetector target) {
  return target.onLongPressEnd;
}

void Function(LongPressDownDetails)? _GestureDetector_onSecondaryLongPressDown$(
    GestureDetector target) {
  return target.onSecondaryLongPressDown;
}

void Function()? _GestureDetector_onSecondaryLongPressCancel$(
    GestureDetector target) {
  return target.onSecondaryLongPressCancel;
}

void Function()? _GestureDetector_onSecondaryLongPress$(
    GestureDetector target) {
  return target.onSecondaryLongPress;
}

void Function(LongPressStartDetails)?
    _GestureDetector_onSecondaryLongPressStart$(GestureDetector target) {
  return target.onSecondaryLongPressStart;
}

void Function(LongPressMoveUpdateDetails)?
    _GestureDetector_onSecondaryLongPressMoveUpdate$(GestureDetector target) {
  return target.onSecondaryLongPressMoveUpdate;
}

void Function()? _GestureDetector_onSecondaryLongPressUp$(
    GestureDetector target) {
  return target.onSecondaryLongPressUp;
}

void Function(LongPressEndDetails)? _GestureDetector_onSecondaryLongPressEnd$(
    GestureDetector target) {
  return target.onSecondaryLongPressEnd;
}

void Function(LongPressDownDetails)? _GestureDetector_onTertiaryLongPressDown$(
    GestureDetector target) {
  return target.onTertiaryLongPressDown;
}

void Function()? _GestureDetector_onTertiaryLongPressCancel$(
    GestureDetector target) {
  return target.onTertiaryLongPressCancel;
}

void Function()? _GestureDetector_onTertiaryLongPress$(GestureDetector target) {
  return target.onTertiaryLongPress;
}

void Function(LongPressStartDetails)?
    _GestureDetector_onTertiaryLongPressStart$(GestureDetector target) {
  return target.onTertiaryLongPressStart;
}

void Function(LongPressMoveUpdateDetails)?
    _GestureDetector_onTertiaryLongPressMoveUpdate$(GestureDetector target) {
  return target.onTertiaryLongPressMoveUpdate;
}

void Function()? _GestureDetector_onTertiaryLongPressUp$(
    GestureDetector target) {
  return target.onTertiaryLongPressUp;
}

void Function(LongPressEndDetails)? _GestureDetector_onTertiaryLongPressEnd$(
    GestureDetector target) {
  return target.onTertiaryLongPressEnd;
}

void Function(DragDownDetails)? _GestureDetector_onVerticalDragDown$(
    GestureDetector target) {
  return target.onVerticalDragDown;
}

void Function(DragStartDetails)? _GestureDetector_onVerticalDragStart$(
    GestureDetector target) {
  return target.onVerticalDragStart;
}

void Function(DragUpdateDetails)? _GestureDetector_onVerticalDragUpdate$(
    GestureDetector target) {
  return target.onVerticalDragUpdate;
}

void Function(DragEndDetails)? _GestureDetector_onVerticalDragEnd$(
    GestureDetector target) {
  return target.onVerticalDragEnd;
}

void Function()? _GestureDetector_onVerticalDragCancel$(
    GestureDetector target) {
  return target.onVerticalDragCancel;
}

void Function(DragDownDetails)? _GestureDetector_onHorizontalDragDown$(
    GestureDetector target) {
  return target.onHorizontalDragDown;
}

void Function(DragStartDetails)? _GestureDetector_onHorizontalDragStart$(
    GestureDetector target) {
  return target.onHorizontalDragStart;
}

void Function(DragUpdateDetails)? _GestureDetector_onHorizontalDragUpdate$(
    GestureDetector target) {
  return target.onHorizontalDragUpdate;
}

void Function(DragEndDetails)? _GestureDetector_onHorizontalDragEnd$(
    GestureDetector target) {
  return target.onHorizontalDragEnd;
}

void Function()? _GestureDetector_onHorizontalDragCancel$(
    GestureDetector target) {
  return target.onHorizontalDragCancel;
}

void Function(DragDownDetails)? _GestureDetector_onPanDown$(
    GestureDetector target) {
  return target.onPanDown;
}

void Function(DragStartDetails)? _GestureDetector_onPanStart$(
    GestureDetector target) {
  return target.onPanStart;
}

void Function(DragUpdateDetails)? _GestureDetector_onPanUpdate$(
    GestureDetector target) {
  return target.onPanUpdate;
}

void Function(DragEndDetails)? _GestureDetector_onPanEnd$(
    GestureDetector target) {
  return target.onPanEnd;
}

void Function()? _GestureDetector_onPanCancel$(GestureDetector target) {
  return target.onPanCancel;
}

void Function(ScaleStartDetails)? _GestureDetector_onScaleStart$(
    GestureDetector target) {
  return target.onScaleStart;
}

void Function(ScaleUpdateDetails)? _GestureDetector_onScaleUpdate$(
    GestureDetector target) {
  return target.onScaleUpdate;
}

void Function(ScaleEndDetails)? _GestureDetector_onScaleEnd$(
    GestureDetector target) {
  return target.onScaleEnd;
}

void Function(ForcePressDetails)? _GestureDetector_onForcePressStart$(
    GestureDetector target) {
  return target.onForcePressStart;
}

void Function(ForcePressDetails)? _GestureDetector_onForcePressPeak$(
    GestureDetector target) {
  return target.onForcePressPeak;
}

void Function(ForcePressDetails)? _GestureDetector_onForcePressUpdate$(
    GestureDetector target) {
  return target.onForcePressUpdate;
}

void Function(ForcePressDetails)? _GestureDetector_onForcePressEnd$(
    GestureDetector target) {
  return target.onForcePressEnd;
}

HitTestBehavior? _GestureDetector_behavior$(GestureDetector target) {
  return target.behavior;
}

bool _GestureDetector_excludeFromSemantics$(GestureDetector target) {
  return target.excludeFromSemantics;
}

DragStartBehavior _GestureDetector_dragStartBehavior$(GestureDetector target) {
  return target.dragStartBehavior;
}

Set<PointerDeviceKind>? _GestureDetector_supportedDevices$(
    GestureDetector target) {
  return target.supportedDevices;
}

bool _GestureDetector_trackpadScrollCausesScale$(GestureDetector target) {
  return target.trackpadScrollCausesScale;
}

Offset _GestureDetector_trackpadScrollToScaleFactor$(GestureDetector target) {
  return target.trackpadScrollToScaleFactor;
}

Function _GestureDetector_build$(
  m.Scope scope,
  GestureDetector target,
) =>
    target.build;
Function _GestureDetector_debugFillProperties$(
  m.Scope scope,
  GestureDetector target,
) =>
    target.debugFillProperties;
Function RawGestureDetector_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RawGestureDetector;
Function RawGestureDetector_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RawGestureDetector;
Widget? _RawGestureDetector_child$(RawGestureDetector target) {
  return target.child;
}

Map<Type, GestureRecognizerFactory<GestureRecognizer>>
    _RawGestureDetector_gestures$(RawGestureDetector target) {
  return target.gestures;
}

HitTestBehavior? _RawGestureDetector_behavior$(RawGestureDetector target) {
  return target.behavior;
}

bool _RawGestureDetector_excludeFromSemantics$(RawGestureDetector target) {
  return target.excludeFromSemantics;
}

SemanticsGestureDelegate? _RawGestureDetector_semantics$(
    RawGestureDetector target) {
  return target.semantics;
}

Function _RawGestureDetector_createState$(
  m.Scope scope,
  RawGestureDetector target,
) =>
    target.createState;
Function RawGestureDetectorState_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RawGestureDetectorState;
Function RawGestureDetectorState_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RawGestureDetectorState;
Function _RawGestureDetectorState_initState$(
  m.Scope scope,
  RawGestureDetectorState target,
) =>
    target.initState;
Function _RawGestureDetectorState_didUpdateWidget$(
  m.Scope scope,
  RawGestureDetectorState target,
) =>
    target.didUpdateWidget;
Function _RawGestureDetectorState_replaceGestureRecognizers$(
  m.Scope scope,
  RawGestureDetectorState target,
) =>
    target.replaceGestureRecognizers;
Function _RawGestureDetectorState_replaceSemanticsActions$(
  m.Scope scope,
  RawGestureDetectorState target,
) =>
    target.replaceSemanticsActions;
Function _RawGestureDetectorState_dispose$(
  m.Scope scope,
  RawGestureDetectorState target,
) =>
    target.dispose;
Function _RawGestureDetectorState_build$(
  m.Scope scope,
  RawGestureDetectorState target,
) =>
    target.build;
Function _RawGestureDetectorState_debugFillProperties$(
  m.Scope scope,
  RawGestureDetectorState target,
) =>
    target.debugFillProperties;
Function SemanticsGestureDelegate_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SemanticsGestureDelegate;
Function SemanticsGestureDelegate_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SemanticsGestureDelegate;
Function _SemanticsGestureDelegate_assignSemantics$(
  m.Scope scope,
  SemanticsGestureDelegate target,
) =>
    target.assignSemantics;
Function _SemanticsGestureDelegate_toString$(
  m.Scope scope,
  SemanticsGestureDelegate target,
) =>
    target.toString;
