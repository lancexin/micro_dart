// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/gesture_detector.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/media_query.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/gesture_detector.dart',
  {
    'GestureRecognizerFactoryWithHandlers.':
        _GestureRecognizerFactoryWithHandlers__$,
    'GestureDetector.': _GestureDetector__$,
    'RawGestureDetector.': _RawGestureDetector__$,
    'RawGestureDetectorState.': _RawGestureDetectorState__$,
  },
  {},
  {
    'GestureRecognizerFactory': m.ClassMirror(
      'GestureRecognizerFactory',
      {
        '#as': GestureRecognizerFactory_as$,
        '#is': GestureRecognizerFactory_is$,
        'constructor': _GestureRecognizerFactory_constructor$,
        'initializer': _GestureRecognizerFactory_initializer$,
      },
      {},
    ),
    'GestureRecognizerFactoryWithHandlers': m.ClassMirror(
      'GestureRecognizerFactoryWithHandlers',
      {
        '#as': GestureRecognizerFactoryWithHandlers_as$,
        '#is': GestureRecognizerFactoryWithHandlers_is$,
        'constructor': _GestureRecognizerFactoryWithHandlers_constructor$,
        'initializer': _GestureRecognizerFactoryWithHandlers_initializer$,
      },
      {},
    ),
    'GestureDetector': m.ClassMirror(
      'GestureDetector',
      {
        '#as': GestureDetector_as$,
        '#is': GestureDetector_is$,
        'child': _GestureDetector_child$,
        'onTapDown': _GestureDetector_onTapDown$,
        'onTapUp': _GestureDetector_onTapUp$,
        'onTap': _GestureDetector_onTap$,
        'onTapCancel': _GestureDetector_onTapCancel$,
        'onSecondaryTap': _GestureDetector_onSecondaryTap$,
        'onSecondaryTapDown': _GestureDetector_onSecondaryTapDown$,
        'onSecondaryTapUp': _GestureDetector_onSecondaryTapUp$,
        'onSecondaryTapCancel': _GestureDetector_onSecondaryTapCancel$,
        'onTertiaryTapDown': _GestureDetector_onTertiaryTapDown$,
        'onTertiaryTapUp': _GestureDetector_onTertiaryTapUp$,
        'onTertiaryTapCancel': _GestureDetector_onTertiaryTapCancel$,
        'onDoubleTapDown': _GestureDetector_onDoubleTapDown$,
        'onDoubleTap': _GestureDetector_onDoubleTap$,
        'onDoubleTapCancel': _GestureDetector_onDoubleTapCancel$,
        'onLongPressDown': _GestureDetector_onLongPressDown$,
        'onLongPressCancel': _GestureDetector_onLongPressCancel$,
        'onLongPress': _GestureDetector_onLongPress$,
        'onLongPressStart': _GestureDetector_onLongPressStart$,
        'onLongPressMoveUpdate': _GestureDetector_onLongPressMoveUpdate$,
        'onLongPressUp': _GestureDetector_onLongPressUp$,
        'onLongPressEnd': _GestureDetector_onLongPressEnd$,
        'onSecondaryLongPressDown': _GestureDetector_onSecondaryLongPressDown$,
        'onSecondaryLongPressCancel':
            _GestureDetector_onSecondaryLongPressCancel$,
        'onSecondaryLongPress': _GestureDetector_onSecondaryLongPress$,
        'onSecondaryLongPressStart':
            _GestureDetector_onSecondaryLongPressStart$,
        'onSecondaryLongPressMoveUpdate':
            _GestureDetector_onSecondaryLongPressMoveUpdate$,
        'onSecondaryLongPressUp': _GestureDetector_onSecondaryLongPressUp$,
        'onSecondaryLongPressEnd': _GestureDetector_onSecondaryLongPressEnd$,
        'onTertiaryLongPressDown': _GestureDetector_onTertiaryLongPressDown$,
        'onTertiaryLongPressCancel':
            _GestureDetector_onTertiaryLongPressCancel$,
        'onTertiaryLongPress': _GestureDetector_onTertiaryLongPress$,
        'onTertiaryLongPressStart': _GestureDetector_onTertiaryLongPressStart$,
        'onTertiaryLongPressMoveUpdate':
            _GestureDetector_onTertiaryLongPressMoveUpdate$,
        'onTertiaryLongPressUp': _GestureDetector_onTertiaryLongPressUp$,
        'onTertiaryLongPressEnd': _GestureDetector_onTertiaryLongPressEnd$,
        'onVerticalDragDown': _GestureDetector_onVerticalDragDown$,
        'onVerticalDragStart': _GestureDetector_onVerticalDragStart$,
        'onVerticalDragUpdate': _GestureDetector_onVerticalDragUpdate$,
        'onVerticalDragEnd': _GestureDetector_onVerticalDragEnd$,
        'onVerticalDragCancel': _GestureDetector_onVerticalDragCancel$,
        'onHorizontalDragDown': _GestureDetector_onHorizontalDragDown$,
        'onHorizontalDragStart': _GestureDetector_onHorizontalDragStart$,
        'onHorizontalDragUpdate': _GestureDetector_onHorizontalDragUpdate$,
        'onHorizontalDragEnd': _GestureDetector_onHorizontalDragEnd$,
        'onHorizontalDragCancel': _GestureDetector_onHorizontalDragCancel$,
        'onPanDown': _GestureDetector_onPanDown$,
        'onPanStart': _GestureDetector_onPanStart$,
        'onPanUpdate': _GestureDetector_onPanUpdate$,
        'onPanEnd': _GestureDetector_onPanEnd$,
        'onPanCancel': _GestureDetector_onPanCancel$,
        'onScaleStart': _GestureDetector_onScaleStart$,
        'onScaleUpdate': _GestureDetector_onScaleUpdate$,
        'onScaleEnd': _GestureDetector_onScaleEnd$,
        'onForcePressStart': _GestureDetector_onForcePressStart$,
        'onForcePressPeak': _GestureDetector_onForcePressPeak$,
        'onForcePressUpdate': _GestureDetector_onForcePressUpdate$,
        'onForcePressEnd': _GestureDetector_onForcePressEnd$,
        'behavior': _GestureDetector_behavior$,
        'excludeFromSemantics': _GestureDetector_excludeFromSemantics$,
        'dragStartBehavior': _GestureDetector_dragStartBehavior$,
        'supportedDevices': _GestureDetector_supportedDevices$,
        'trackpadScrollCausesScale':
            _GestureDetector_trackpadScrollCausesScale$,
        'trackpadScrollToScaleFactor':
            _GestureDetector_trackpadScrollToScaleFactor$,
        'build': _GestureDetector_build$,
        'debugFillProperties': _GestureDetector_debugFillProperties$,
      },
      {},
    ),
    'RawGestureDetector': m.ClassMirror(
      'RawGestureDetector',
      {
        '#as': RawGestureDetector_as$,
        '#is': RawGestureDetector_is$,
        'child': _RawGestureDetector_child$,
        'gestures': _RawGestureDetector_gestures$,
        'behavior': _RawGestureDetector_behavior$,
        'excludeFromSemantics': _RawGestureDetector_excludeFromSemantics$,
        'semantics': _RawGestureDetector_semantics$,
        'createState': _RawGestureDetector_createState$,
      },
      {},
    ),
    'RawGestureDetectorState': m.ClassMirror(
      'RawGestureDetectorState',
      {
        '#as': RawGestureDetectorState_as$,
        '#is': RawGestureDetectorState_is$,
        'initState': _RawGestureDetectorState_initState$,
        'didUpdateWidget': _RawGestureDetectorState_didUpdateWidget$,
        'replaceGestureRecognizers':
            _RawGestureDetectorState_replaceGestureRecognizers$,
        'replaceSemanticsActions':
            _RawGestureDetectorState_replaceSemanticsActions$,
        'dispose': _RawGestureDetectorState_dispose$,
        'build': _RawGestureDetectorState_build$,
        'debugFillProperties': _RawGestureDetectorState_debugFillProperties$,
      },
      {},
    ),
    'SemanticsGestureDelegate': m.ClassMirror(
      'SemanticsGestureDelegate',
      {
        '#as': SemanticsGestureDelegate_as$,
        '#is': SemanticsGestureDelegate_is$,
        'assignSemantics': _SemanticsGestureDelegate_assignSemantics$,
        'toString': _SemanticsGestureDelegate_toString$,
      },
      {},
    ),
  },
);
Function GestureRecognizerFactory_as$<T extends GestureRecognizer>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as GestureRecognizerFactory<T>;
Function GestureRecognizerFactory_is$<T extends GestureRecognizer>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is GestureRecognizerFactory<T>;
Function _GestureRecognizerFactory_constructor$<T extends GestureRecognizer>(
  m.Scope scope$,
  GestureRecognizerFactory<T> target$,
) =>
    target$.constructor;
Function _GestureRecognizerFactory_initializer$<T extends GestureRecognizer>(
  m.Scope scope$,
  GestureRecognizerFactory<T> target$,
) =>
    target$.initializer;
Function GestureRecognizerFactoryWithHandlers_as$<T extends GestureRecognizer>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as GestureRecognizerFactoryWithHandlers<T>;
Function GestureRecognizerFactoryWithHandlers_is$<T extends GestureRecognizer>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is GestureRecognizerFactoryWithHandlers<T>;
Function _GestureRecognizerFactoryWithHandlers__$(m.Scope scope$) => (
      m.FunctionPointer _constructor,
      m.FunctionPointer _initializer,
    ) {
      GestureRecognizer _constructorProxy() =>
          scope$.engine.callFunctionPointer(
            scope$,
            _constructor,
            [],
            {},
          );
      void _initializerProxy(dynamic _initializer_instance$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            _initializer,
            [_initializer_instance$],
            {},
          );
      return GestureRecognizerFactoryWithHandlers(
        _constructorProxy,
        _initializerProxy,
      );
    };
Function _GestureRecognizerFactoryWithHandlers_constructor$<
        T extends GestureRecognizer>(
  m.Scope scope$,
  GestureRecognizerFactoryWithHandlers<T> target$,
) =>
    target$.constructor;
Function _GestureRecognizerFactoryWithHandlers_initializer$<
        T extends GestureRecognizer>(
  m.Scope scope$,
  GestureRecognizerFactoryWithHandlers<T> target$,
) =>
    target$.initializer;
Function GestureDetector_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as GestureDetector;
Function GestureDetector_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is GestureDetector;
Function _GestureDetector_child$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.child;
    };
Function _GestureDetector_onTapDown$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onTapDown;
    };
Function _GestureDetector_onTapUp$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onTapUp;
    };
Function _GestureDetector_onTap$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onTap;
    };
Function _GestureDetector_onTapCancel$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onTapCancel;
    };
Function _GestureDetector_onSecondaryTap$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onSecondaryTap;
    };
Function _GestureDetector_onSecondaryTapDown$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onSecondaryTapDown;
    };
Function _GestureDetector_onSecondaryTapUp$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onSecondaryTapUp;
    };
Function _GestureDetector_onSecondaryTapCancel$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onSecondaryTapCancel;
    };
Function _GestureDetector_onTertiaryTapDown$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onTertiaryTapDown;
    };
Function _GestureDetector_onTertiaryTapUp$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onTertiaryTapUp;
    };
Function _GestureDetector_onTertiaryTapCancel$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onTertiaryTapCancel;
    };
Function _GestureDetector_onDoubleTapDown$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onDoubleTapDown;
    };
Function _GestureDetector_onDoubleTap$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onDoubleTap;
    };
Function _GestureDetector_onDoubleTapCancel$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onDoubleTapCancel;
    };
Function _GestureDetector_onLongPressDown$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onLongPressDown;
    };
Function _GestureDetector_onLongPressCancel$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onLongPressCancel;
    };
Function _GestureDetector_onLongPress$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onLongPress;
    };
Function _GestureDetector_onLongPressStart$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onLongPressStart;
    };
Function _GestureDetector_onLongPressMoveUpdate$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onLongPressMoveUpdate;
    };
Function _GestureDetector_onLongPressUp$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onLongPressUp;
    };
Function _GestureDetector_onLongPressEnd$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onLongPressEnd;
    };
Function _GestureDetector_onSecondaryLongPressDown$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onSecondaryLongPressDown;
    };
Function _GestureDetector_onSecondaryLongPressCancel$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onSecondaryLongPressCancel;
    };
Function _GestureDetector_onSecondaryLongPress$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onSecondaryLongPress;
    };
Function _GestureDetector_onSecondaryLongPressStart$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onSecondaryLongPressStart;
    };
Function _GestureDetector_onSecondaryLongPressMoveUpdate$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onSecondaryLongPressMoveUpdate;
    };
Function _GestureDetector_onSecondaryLongPressUp$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onSecondaryLongPressUp;
    };
Function _GestureDetector_onSecondaryLongPressEnd$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onSecondaryLongPressEnd;
    };
Function _GestureDetector_onTertiaryLongPressDown$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onTertiaryLongPressDown;
    };
Function _GestureDetector_onTertiaryLongPressCancel$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onTertiaryLongPressCancel;
    };
Function _GestureDetector_onTertiaryLongPress$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onTertiaryLongPress;
    };
Function _GestureDetector_onTertiaryLongPressStart$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onTertiaryLongPressStart;
    };
Function _GestureDetector_onTertiaryLongPressMoveUpdate$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onTertiaryLongPressMoveUpdate;
    };
Function _GestureDetector_onTertiaryLongPressUp$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onTertiaryLongPressUp;
    };
Function _GestureDetector_onTertiaryLongPressEnd$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onTertiaryLongPressEnd;
    };
Function _GestureDetector_onVerticalDragDown$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onVerticalDragDown;
    };
Function _GestureDetector_onVerticalDragStart$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onVerticalDragStart;
    };
Function _GestureDetector_onVerticalDragUpdate$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onVerticalDragUpdate;
    };
Function _GestureDetector_onVerticalDragEnd$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onVerticalDragEnd;
    };
Function _GestureDetector_onVerticalDragCancel$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onVerticalDragCancel;
    };
Function _GestureDetector_onHorizontalDragDown$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onHorizontalDragDown;
    };
Function _GestureDetector_onHorizontalDragStart$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onHorizontalDragStart;
    };
Function _GestureDetector_onHorizontalDragUpdate$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onHorizontalDragUpdate;
    };
Function _GestureDetector_onHorizontalDragEnd$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onHorizontalDragEnd;
    };
Function _GestureDetector_onHorizontalDragCancel$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onHorizontalDragCancel;
    };
Function _GestureDetector_onPanDown$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onPanDown;
    };
Function _GestureDetector_onPanStart$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onPanStart;
    };
Function _GestureDetector_onPanUpdate$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onPanUpdate;
    };
Function _GestureDetector_onPanEnd$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onPanEnd;
    };
Function _GestureDetector_onPanCancel$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onPanCancel;
    };
Function _GestureDetector_onScaleStart$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onScaleStart;
    };
Function _GestureDetector_onScaleUpdate$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onScaleUpdate;
    };
Function _GestureDetector_onScaleEnd$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onScaleEnd;
    };
Function _GestureDetector_onForcePressStart$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onForcePressStart;
    };
Function _GestureDetector_onForcePressPeak$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onForcePressPeak;
    };
Function _GestureDetector_onForcePressUpdate$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onForcePressUpdate;
    };
Function _GestureDetector_onForcePressEnd$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.onForcePressEnd;
    };
Function _GestureDetector_behavior$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.behavior;
    };
Function _GestureDetector_excludeFromSemantics$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.excludeFromSemantics;
    };
Function _GestureDetector_dragStartBehavior$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.dragStartBehavior;
    };
Function _GestureDetector_supportedDevices$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.supportedDevices;
    };
Function _GestureDetector_trackpadScrollCausesScale$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.trackpadScrollCausesScale;
    };
Function _GestureDetector_trackpadScrollToScaleFactor$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    () {
      return target$.trackpadScrollToScaleFactor;
    };
Function _GestureDetector__$(m.Scope scope$) => ({
      Key? key,
      Widget? child,
      m.FunctionPointer? onTapDown,
      m.FunctionPointer? onTapUp,
      m.FunctionPointer? onTap,
      m.FunctionPointer? onTapCancel,
      m.FunctionPointer? onSecondaryTap,
      m.FunctionPointer? onSecondaryTapDown,
      m.FunctionPointer? onSecondaryTapUp,
      m.FunctionPointer? onSecondaryTapCancel,
      m.FunctionPointer? onTertiaryTapDown,
      m.FunctionPointer? onTertiaryTapUp,
      m.FunctionPointer? onTertiaryTapCancel,
      m.FunctionPointer? onDoubleTapDown,
      m.FunctionPointer? onDoubleTap,
      m.FunctionPointer? onDoubleTapCancel,
      m.FunctionPointer? onLongPressDown,
      m.FunctionPointer? onLongPressCancel,
      m.FunctionPointer? onLongPress,
      m.FunctionPointer? onLongPressStart,
      m.FunctionPointer? onLongPressMoveUpdate,
      m.FunctionPointer? onLongPressUp,
      m.FunctionPointer? onLongPressEnd,
      m.FunctionPointer? onSecondaryLongPressDown,
      m.FunctionPointer? onSecondaryLongPressCancel,
      m.FunctionPointer? onSecondaryLongPress,
      m.FunctionPointer? onSecondaryLongPressStart,
      m.FunctionPointer? onSecondaryLongPressMoveUpdate,
      m.FunctionPointer? onSecondaryLongPressUp,
      m.FunctionPointer? onSecondaryLongPressEnd,
      m.FunctionPointer? onTertiaryLongPressDown,
      m.FunctionPointer? onTertiaryLongPressCancel,
      m.FunctionPointer? onTertiaryLongPress,
      m.FunctionPointer? onTertiaryLongPressStart,
      m.FunctionPointer? onTertiaryLongPressMoveUpdate,
      m.FunctionPointer? onTertiaryLongPressUp,
      m.FunctionPointer? onTertiaryLongPressEnd,
      m.FunctionPointer? onVerticalDragDown,
      m.FunctionPointer? onVerticalDragStart,
      m.FunctionPointer? onVerticalDragUpdate,
      m.FunctionPointer? onVerticalDragEnd,
      m.FunctionPointer? onVerticalDragCancel,
      m.FunctionPointer? onHorizontalDragDown,
      m.FunctionPointer? onHorizontalDragStart,
      m.FunctionPointer? onHorizontalDragUpdate,
      m.FunctionPointer? onHorizontalDragEnd,
      m.FunctionPointer? onHorizontalDragCancel,
      m.FunctionPointer? onForcePressStart,
      m.FunctionPointer? onForcePressPeak,
      m.FunctionPointer? onForcePressUpdate,
      m.FunctionPointer? onForcePressEnd,
      m.FunctionPointer? onPanDown,
      m.FunctionPointer? onPanStart,
      m.FunctionPointer? onPanUpdate,
      m.FunctionPointer? onPanEnd,
      m.FunctionPointer? onPanCancel,
      m.FunctionPointer? onScaleStart,
      m.FunctionPointer? onScaleUpdate,
      m.FunctionPointer? onScaleEnd,
      HitTestBehavior? behavior,
      bool? excludeFromSemantics,
      DragStartBehavior? dragStartBehavior,
      bool? trackpadScrollCausesScale,
      Offset? trackpadScrollToScaleFactor,
      Set? supportedDevices,
    }) {
      void onDoubleTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onDoubleTap!,
            [],
            {},
          );
      void onDoubleTapCancelProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onDoubleTapCancel!,
            [],
            {},
          );
      void onDoubleTapDownProxy(TapDownDetails onDoubleTapDown_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onDoubleTapDown!,
            [onDoubleTapDown_details$],
            {},
          );
      void onForcePressEndProxy(ForcePressDetails onForcePressEnd_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onForcePressEnd!,
            [onForcePressEnd_details$],
            {},
          );
      void onForcePressPeakProxy(ForcePressDetails onForcePressPeak_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onForcePressPeak!,
            [onForcePressPeak_details$],
            {},
          );
      void onForcePressStartProxy(
              ForcePressDetails onForcePressStart_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onForcePressStart!,
            [onForcePressStart_details$],
            {},
          );
      void onForcePressUpdateProxy(
              ForcePressDetails onForcePressUpdate_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onForcePressUpdate!,
            [onForcePressUpdate_details$],
            {},
          );
      void onHorizontalDragCancelProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onHorizontalDragCancel!,
            [],
            {},
          );
      void onHorizontalDragDownProxy(
              DragDownDetails onHorizontalDragDown_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onHorizontalDragDown!,
            [onHorizontalDragDown_details$],
            {},
          );
      void onHorizontalDragEndProxy(
              DragEndDetails onHorizontalDragEnd_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onHorizontalDragEnd!,
            [onHorizontalDragEnd_details$],
            {},
          );
      void onHorizontalDragStartProxy(
              DragStartDetails onHorizontalDragStart_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onHorizontalDragStart!,
            [onHorizontalDragStart_details$],
            {},
          );
      void onHorizontalDragUpdateProxy(
              DragUpdateDetails onHorizontalDragUpdate_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onHorizontalDragUpdate!,
            [onHorizontalDragUpdate_details$],
            {},
          );
      void onLongPressProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onLongPress!,
            [],
            {},
          );
      void onLongPressCancelProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onLongPressCancel!,
            [],
            {},
          );
      void onLongPressDownProxy(
              LongPressDownDetails onLongPressDown_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onLongPressDown!,
            [onLongPressDown_details$],
            {},
          );
      void onLongPressEndProxy(LongPressEndDetails onLongPressEnd_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onLongPressEnd!,
            [onLongPressEnd_details$],
            {},
          );
      void onLongPressMoveUpdateProxy(
              LongPressMoveUpdateDetails onLongPressMoveUpdate_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onLongPressMoveUpdate!,
            [onLongPressMoveUpdate_details$],
            {},
          );
      void onLongPressStartProxy(
              LongPressStartDetails onLongPressStart_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onLongPressStart!,
            [onLongPressStart_details$],
            {},
          );
      void onLongPressUpProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onLongPressUp!,
            [],
            {},
          );
      void onPanCancelProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPanCancel!,
            [],
            {},
          );
      void onPanDownProxy(DragDownDetails onPanDown_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onPanDown!,
            [onPanDown_details$],
            {},
          );
      void onPanEndProxy(DragEndDetails onPanEnd_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onPanEnd!,
            [onPanEnd_details$],
            {},
          );
      void onPanStartProxy(DragStartDetails onPanStart_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onPanStart!,
            [onPanStart_details$],
            {},
          );
      void onPanUpdateProxy(DragUpdateDetails onPanUpdate_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onPanUpdate!,
            [onPanUpdate_details$],
            {},
          );
      void onScaleEndProxy(ScaleEndDetails onScaleEnd_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onScaleEnd!,
            [onScaleEnd_details$],
            {},
          );
      void onScaleStartProxy(ScaleStartDetails onScaleStart_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onScaleStart!,
            [onScaleStart_details$],
            {},
          );
      void onScaleUpdateProxy(ScaleUpdateDetails onScaleUpdate_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onScaleUpdate!,
            [onScaleUpdate_details$],
            {},
          );
      void onSecondaryLongPressProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onSecondaryLongPress!,
            [],
            {},
          );
      void onSecondaryLongPressCancelProxy() =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSecondaryLongPressCancel!,
            [],
            {},
          );
      void onSecondaryLongPressDownProxy(
              LongPressDownDetails onSecondaryLongPressDown_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSecondaryLongPressDown!,
            [onSecondaryLongPressDown_details$],
            {},
          );
      void onSecondaryLongPressEndProxy(
              LongPressEndDetails onSecondaryLongPressEnd_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSecondaryLongPressEnd!,
            [onSecondaryLongPressEnd_details$],
            {},
          );
      void onSecondaryLongPressMoveUpdateProxy(
              LongPressMoveUpdateDetails
                  onSecondaryLongPressMoveUpdate_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSecondaryLongPressMoveUpdate!,
            [onSecondaryLongPressMoveUpdate_details$],
            {},
          );
      void onSecondaryLongPressStartProxy(
              LongPressStartDetails onSecondaryLongPressStart_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSecondaryLongPressStart!,
            [onSecondaryLongPressStart_details$],
            {},
          );
      void onSecondaryLongPressUpProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onSecondaryLongPressUp!,
            [],
            {},
          );
      void onSecondaryTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onSecondaryTap!,
            [],
            {},
          );
      void onSecondaryTapCancelProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onSecondaryTapCancel!,
            [],
            {},
          );
      void onSecondaryTapDownProxy(
              TapDownDetails onSecondaryTapDown_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSecondaryTapDown!,
            [onSecondaryTapDown_details$],
            {},
          );
      void onSecondaryTapUpProxy(TapUpDetails onSecondaryTapUp_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSecondaryTapUp!,
            [onSecondaryTapUp_details$],
            {},
          );
      void onTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTap!,
            [],
            {},
          );
      void onTapCancelProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTapCancel!,
            [],
            {},
          );
      void onTapDownProxy(TapDownDetails onTapDown_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onTapDown!,
            [onTapDown_details$],
            {},
          );
      void onTapUpProxy(TapUpDetails onTapUp_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onTapUp!,
            [onTapUp_details$],
            {},
          );
      void onTertiaryLongPressProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTertiaryLongPress!,
            [],
            {},
          );
      void onTertiaryLongPressCancelProxy() =>
          scope$.engine.callFunctionPointer(
            scope$,
            onTertiaryLongPressCancel!,
            [],
            {},
          );
      void onTertiaryLongPressDownProxy(
              LongPressDownDetails onTertiaryLongPressDown_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onTertiaryLongPressDown!,
            [onTertiaryLongPressDown_details$],
            {},
          );
      void onTertiaryLongPressEndProxy(
              LongPressEndDetails onTertiaryLongPressEnd_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onTertiaryLongPressEnd!,
            [onTertiaryLongPressEnd_details$],
            {},
          );
      void onTertiaryLongPressMoveUpdateProxy(
              LongPressMoveUpdateDetails
                  onTertiaryLongPressMoveUpdate_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onTertiaryLongPressMoveUpdate!,
            [onTertiaryLongPressMoveUpdate_details$],
            {},
          );
      void onTertiaryLongPressStartProxy(
              LongPressStartDetails onTertiaryLongPressStart_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onTertiaryLongPressStart!,
            [onTertiaryLongPressStart_details$],
            {},
          );
      void onTertiaryLongPressUpProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTertiaryLongPressUp!,
            [],
            {},
          );
      void onTertiaryTapCancelProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTertiaryTapCancel!,
            [],
            {},
          );
      void onTertiaryTapDownProxy(TapDownDetails onTertiaryTapDown_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onTertiaryTapDown!,
            [onTertiaryTapDown_details$],
            {},
          );
      void onTertiaryTapUpProxy(TapUpDetails onTertiaryTapUp_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onTertiaryTapUp!,
            [onTertiaryTapUp_details$],
            {},
          );
      void onVerticalDragCancelProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onVerticalDragCancel!,
            [],
            {},
          );
      void onVerticalDragDownProxy(
              DragDownDetails onVerticalDragDown_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onVerticalDragDown!,
            [onVerticalDragDown_details$],
            {},
          );
      void onVerticalDragEndProxy(DragEndDetails onVerticalDragEnd_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onVerticalDragEnd!,
            [onVerticalDragEnd_details$],
            {},
          );
      void onVerticalDragStartProxy(
              DragStartDetails onVerticalDragStart_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onVerticalDragStart!,
            [onVerticalDragStart_details$],
            {},
          );
      void onVerticalDragUpdateProxy(
              DragUpdateDetails onVerticalDragUpdate_details$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onVerticalDragUpdate!,
            [onVerticalDragUpdate_details$],
            {},
          );
      return GestureDetector(
        behavior: behavior,
        child: child,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        excludeFromSemantics: excludeFromSemantics ?? false,
        key: key,
        onDoubleTap: onDoubleTap == null ? null : onDoubleTapProxy,
        onDoubleTapCancel:
            onDoubleTapCancel == null ? null : onDoubleTapCancelProxy,
        onDoubleTapDown: onDoubleTapDown == null ? null : onDoubleTapDownProxy,
        onForcePressEnd: onForcePressEnd == null ? null : onForcePressEndProxy,
        onForcePressPeak:
            onForcePressPeak == null ? null : onForcePressPeakProxy,
        onForcePressStart:
            onForcePressStart == null ? null : onForcePressStartProxy,
        onForcePressUpdate:
            onForcePressUpdate == null ? null : onForcePressUpdateProxy,
        onHorizontalDragCancel:
            onHorizontalDragCancel == null ? null : onHorizontalDragCancelProxy,
        onHorizontalDragDown:
            onHorizontalDragDown == null ? null : onHorizontalDragDownProxy,
        onHorizontalDragEnd:
            onHorizontalDragEnd == null ? null : onHorizontalDragEndProxy,
        onHorizontalDragStart:
            onHorizontalDragStart == null ? null : onHorizontalDragStartProxy,
        onHorizontalDragUpdate:
            onHorizontalDragUpdate == null ? null : onHorizontalDragUpdateProxy,
        onLongPress: onLongPress == null ? null : onLongPressProxy,
        onLongPressCancel:
            onLongPressCancel == null ? null : onLongPressCancelProxy,
        onLongPressDown: onLongPressDown == null ? null : onLongPressDownProxy,
        onLongPressEnd: onLongPressEnd == null ? null : onLongPressEndProxy,
        onLongPressMoveUpdate:
            onLongPressMoveUpdate == null ? null : onLongPressMoveUpdateProxy,
        onLongPressStart:
            onLongPressStart == null ? null : onLongPressStartProxy,
        onLongPressUp: onLongPressUp == null ? null : onLongPressUpProxy,
        onPanCancel: onPanCancel == null ? null : onPanCancelProxy,
        onPanDown: onPanDown == null ? null : onPanDownProxy,
        onPanEnd: onPanEnd == null ? null : onPanEndProxy,
        onPanStart: onPanStart == null ? null : onPanStartProxy,
        onPanUpdate: onPanUpdate == null ? null : onPanUpdateProxy,
        onScaleEnd: onScaleEnd == null ? null : onScaleEndProxy,
        onScaleStart: onScaleStart == null ? null : onScaleStartProxy,
        onScaleUpdate: onScaleUpdate == null ? null : onScaleUpdateProxy,
        onSecondaryLongPress:
            onSecondaryLongPress == null ? null : onSecondaryLongPressProxy,
        onSecondaryLongPressCancel: onSecondaryLongPressCancel == null
            ? null
            : onSecondaryLongPressCancelProxy,
        onSecondaryLongPressDown: onSecondaryLongPressDown == null
            ? null
            : onSecondaryLongPressDownProxy,
        onSecondaryLongPressEnd: onSecondaryLongPressEnd == null
            ? null
            : onSecondaryLongPressEndProxy,
        onSecondaryLongPressMoveUpdate: onSecondaryLongPressMoveUpdate == null
            ? null
            : onSecondaryLongPressMoveUpdateProxy,
        onSecondaryLongPressStart: onSecondaryLongPressStart == null
            ? null
            : onSecondaryLongPressStartProxy,
        onSecondaryLongPressUp:
            onSecondaryLongPressUp == null ? null : onSecondaryLongPressUpProxy,
        onSecondaryTap: onSecondaryTap == null ? null : onSecondaryTapProxy,
        onSecondaryTapCancel:
            onSecondaryTapCancel == null ? null : onSecondaryTapCancelProxy,
        onSecondaryTapDown:
            onSecondaryTapDown == null ? null : onSecondaryTapDownProxy,
        onSecondaryTapUp:
            onSecondaryTapUp == null ? null : onSecondaryTapUpProxy,
        onTap: onTap == null ? null : onTapProxy,
        onTapCancel: onTapCancel == null ? null : onTapCancelProxy,
        onTapDown: onTapDown == null ? null : onTapDownProxy,
        onTapUp: onTapUp == null ? null : onTapUpProxy,
        onTertiaryLongPress:
            onTertiaryLongPress == null ? null : onTertiaryLongPressProxy,
        onTertiaryLongPressCancel: onTertiaryLongPressCancel == null
            ? null
            : onTertiaryLongPressCancelProxy,
        onTertiaryLongPressDown: onTertiaryLongPressDown == null
            ? null
            : onTertiaryLongPressDownProxy,
        onTertiaryLongPressEnd:
            onTertiaryLongPressEnd == null ? null : onTertiaryLongPressEndProxy,
        onTertiaryLongPressMoveUpdate: onTertiaryLongPressMoveUpdate == null
            ? null
            : onTertiaryLongPressMoveUpdateProxy,
        onTertiaryLongPressStart: onTertiaryLongPressStart == null
            ? null
            : onTertiaryLongPressStartProxy,
        onTertiaryLongPressUp:
            onTertiaryLongPressUp == null ? null : onTertiaryLongPressUpProxy,
        onTertiaryTapCancel:
            onTertiaryTapCancel == null ? null : onTertiaryTapCancelProxy,
        onTertiaryTapDown:
            onTertiaryTapDown == null ? null : onTertiaryTapDownProxy,
        onTertiaryTapUp: onTertiaryTapUp == null ? null : onTertiaryTapUpProxy,
        onVerticalDragCancel:
            onVerticalDragCancel == null ? null : onVerticalDragCancelProxy,
        onVerticalDragDown:
            onVerticalDragDown == null ? null : onVerticalDragDownProxy,
        onVerticalDragEnd:
            onVerticalDragEnd == null ? null : onVerticalDragEndProxy,
        onVerticalDragStart:
            onVerticalDragStart == null ? null : onVerticalDragStartProxy,
        onVerticalDragUpdate:
            onVerticalDragUpdate == null ? null : onVerticalDragUpdateProxy,
        supportedDevices:
            supportedDevices == null ? null : Set.from(supportedDevices),
        trackpadScrollCausesScale: trackpadScrollCausesScale ?? false,
        trackpadScrollToScaleFactor:
            trackpadScrollToScaleFactor ?? kDefaultTrackpadScrollToScaleFactor,
      );
    };
Function _GestureDetector_build$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    target$.build;
Function _GestureDetector_debugFillProperties$(
  m.Scope scope$,
  GestureDetector target$,
) =>
    target$.debugFillProperties;
Function RawGestureDetector_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RawGestureDetector;
Function RawGestureDetector_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RawGestureDetector;
Function _RawGestureDetector_child$(
  m.Scope scope$,
  RawGestureDetector target$,
) =>
    () {
      return target$.child;
    };
Function _RawGestureDetector_gestures$(
  m.Scope scope$,
  RawGestureDetector target$,
) =>
    () {
      return target$.gestures;
    };
Function _RawGestureDetector_behavior$(
  m.Scope scope$,
  RawGestureDetector target$,
) =>
    () {
      return target$.behavior;
    };
Function _RawGestureDetector_excludeFromSemantics$(
  m.Scope scope$,
  RawGestureDetector target$,
) =>
    () {
      return target$.excludeFromSemantics;
    };
Function _RawGestureDetector_semantics$(
  m.Scope scope$,
  RawGestureDetector target$,
) =>
    () {
      return target$.semantics;
    };
Function _RawGestureDetector__$(m.Scope scope$) => ({
      Key? key,
      Widget? child,
      Map? gestures,
      HitTestBehavior? behavior,
      bool? excludeFromSemantics,
      SemanticsGestureDelegate? semantics,
    }) {
      return RawGestureDetector(
        behavior: behavior,
        child: child,
        excludeFromSemantics: excludeFromSemantics ?? false,
        gestures: gestures == null
            ? const <Type, GestureRecognizerFactory>{}
            : Map.from(gestures),
        key: key,
        semantics: semantics,
      );
    };
Function _RawGestureDetector_createState$(
  m.Scope scope$,
  RawGestureDetector target$,
) =>
    target$.createState;
Function RawGestureDetectorState_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RawGestureDetectorState;
Function RawGestureDetectorState_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RawGestureDetectorState;
Function _RawGestureDetectorState__$(m.Scope scope$) => () {
      return RawGestureDetectorState();
    };
Function _RawGestureDetectorState_initState$(
  m.Scope scope$,
  RawGestureDetectorState target$,
) =>
    target$.initState;
Function _RawGestureDetectorState_didUpdateWidget$(
  m.Scope scope$,
  RawGestureDetectorState target$,
) =>
    target$.didUpdateWidget;
Function _RawGestureDetectorState_replaceGestureRecognizers$(
  m.Scope scope$,
  RawGestureDetectorState target$,
) =>
    target$.replaceGestureRecognizers;
Function _RawGestureDetectorState_replaceSemanticsActions$(
  m.Scope scope$,
  RawGestureDetectorState target$,
) =>
    target$.replaceSemanticsActions;
Function _RawGestureDetectorState_dispose$(
  m.Scope scope$,
  RawGestureDetectorState target$,
) =>
    target$.dispose;
Function _RawGestureDetectorState_build$(
  m.Scope scope$,
  RawGestureDetectorState target$,
) =>
    target$.build;
Function _RawGestureDetectorState_debugFillProperties$(
  m.Scope scope$,
  RawGestureDetectorState target$,
) =>
    target$.debugFillProperties;
Function SemanticsGestureDelegate_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SemanticsGestureDelegate;
Function SemanticsGestureDelegate_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SemanticsGestureDelegate;
Function _SemanticsGestureDelegate_assignSemantics$(
  m.Scope scope$,
  SemanticsGestureDelegate target$,
) =>
    target$.assignSemantics;
Function _SemanticsGestureDelegate_toString$(
  m.Scope scope$,
  SemanticsGestureDelegate target$,
) =>
    target$.toString;
