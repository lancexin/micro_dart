// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/keyboard_listener.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/focus_scope.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/keyboard_listener.dart',
  {},
  {},
  {
    'KeyboardListener': m.ClassMirror(
      'KeyboardListener',
      {
        '#as': KeyboardListener_as$,
        '#is': KeyboardListener_is$,
        'focusNode': _KeyboardListener_focusNode$,
        'autofocus': _KeyboardListener_autofocus$,
        'includeSemantics': _KeyboardListener_includeSemantics$,
        'onKeyEvent': _KeyboardListener_onKeyEvent$,
        'child': _KeyboardListener_child$,
        'build': _KeyboardListener_build$,
        'debugFillProperties': _KeyboardListener_debugFillProperties$,
      },
      {},
    )
  },
);
Function KeyboardListener_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as KeyboardListener;
Function KeyboardListener_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is KeyboardListener;
FocusNode _KeyboardListener_focusNode$(KeyboardListener target) {
  return target.focusNode;
}

bool _KeyboardListener_autofocus$(KeyboardListener target) {
  return target.autofocus;
}

bool _KeyboardListener_includeSemantics$(KeyboardListener target) {
  return target.includeSemantics;
}

void Function(KeyEvent)? _KeyboardListener_onKeyEvent$(
    KeyboardListener target) {
  return target.onKeyEvent;
}

Widget _KeyboardListener_child$(KeyboardListener target) {
  return target.child;
}

Function _KeyboardListener_build$(
  m.Scope scope,
  KeyboardListener target,
) =>
    target.build;
Function _KeyboardListener_debugFillProperties$(
  m.Scope scope,
  KeyboardListener target,
) =>
    target.debugFillProperties;
