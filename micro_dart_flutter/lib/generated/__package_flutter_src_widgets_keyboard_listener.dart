// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/keyboard_listener.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/focus_scope.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/keyboard_listener.dart',
  {'KeyboardListener.': _KeyboardListener__$},
  {},
  {
    'KeyboardListener': m.ClassMirror(
      'KeyboardListener',
      {
        '#as': KeyboardListener_as$,
        '#is': KeyboardListener_is$,
        'focusNode': _KeyboardListener_focusNode$,
        'autofocus': _KeyboardListener_autofocus$,
        'includeSemantics': _KeyboardListener_includeSemantics$,
        'onKeyEvent': _KeyboardListener_onKeyEvent$,
        'child': _KeyboardListener_child$,
        'build': _KeyboardListener_build$,
        'debugFillProperties': _KeyboardListener_debugFillProperties$,
      },
      {},
    )
  },
);
Function KeyboardListener_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as KeyboardListener;
Function KeyboardListener_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is KeyboardListener;
Function _KeyboardListener_focusNode$(
  m.Scope scope$,
  KeyboardListener target$,
) =>
    () {
      return target$.focusNode;
    };
Function _KeyboardListener_autofocus$(
  m.Scope scope$,
  KeyboardListener target$,
) =>
    () {
      return target$.autofocus;
    };
Function _KeyboardListener_includeSemantics$(
  m.Scope scope$,
  KeyboardListener target$,
) =>
    () {
      return target$.includeSemantics;
    };
Function _KeyboardListener_onKeyEvent$(
  m.Scope scope$,
  KeyboardListener target$,
) =>
    () {
      return target$.onKeyEvent;
    };
Function _KeyboardListener_child$(
  m.Scope scope$,
  KeyboardListener target$,
) =>
    () {
      return target$.child;
    };
Function _KeyboardListener__$(m.Scope scope$) => ({
      Key? key,
      required FocusNode focusNode,
      bool? autofocus,
      bool? includeSemantics,
      m.FunctionPointer? onKeyEvent,
      required Widget child,
    }) {
      void onKeyEventProxy(KeyEvent onKeyEvent_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onKeyEvent!,
            [onKeyEvent_value$],
            {},
          );
      return KeyboardListener(
        autofocus: autofocus ?? false,
        child: child,
        focusNode: focusNode,
        includeSemantics: includeSemantics ?? true,
        key: key,
        onKeyEvent: onKeyEvent == null ? null : onKeyEventProxy,
      );
    };
Function _KeyboardListener_build$(
  m.Scope scope$,
  KeyboardListener target$,
) =>
    target$.build;
Function _KeyboardListener_debugFillProperties$(
  m.Scope scope$,
  KeyboardListener target$,
) =>
    target$.debugFillProperties;
