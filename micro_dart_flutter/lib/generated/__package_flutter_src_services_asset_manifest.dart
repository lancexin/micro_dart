// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/asset_manifest.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/services/asset_bundle.dart';
import 'package:flutter/src/services/message_codecs.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/asset_manifest.dart',
  {
    'AssetManifest.loadFromAssetBundle': _AssetManifest_loadFromAssetBundle$,
    'AssetMetadata.': _AssetMetadata__$,
  },
  {},
  {
    'AssetManifest': m.ClassMirror(
      'AssetManifest',
      {
        '#as': AssetManifest_as$,
        '#is': AssetManifest_is$,
        'listAssets': _AssetManifest_listAssets$,
        'getAssetVariants': _AssetManifest_getAssetVariants$,
      },
      {},
    ),
    'AssetMetadata': m.ClassMirror(
      'AssetMetadata',
      {
        '#as': AssetMetadata_as$,
        '#is': AssetMetadata_is$,
        'targetDevicePixelRatio': _AssetMetadata_targetDevicePixelRatio$,
        'key': _AssetMetadata_key$,
        'main': _AssetMetadata_main$,
      },
      {},
    ),
  },
);
Function AssetManifest_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AssetManifest;
Function AssetManifest_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AssetManifest;
Function _AssetManifest_loadFromAssetBundle$(m.Scope scope$) =>
    AssetManifest.loadFromAssetBundle;
Function _AssetManifest_listAssets$(
  m.Scope scope$,
  AssetManifest target$,
) =>
    target$.listAssets;
Function _AssetManifest_getAssetVariants$(
  m.Scope scope$,
  AssetManifest target$,
) =>
    target$.getAssetVariants;
Function AssetMetadata_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AssetMetadata;
Function AssetMetadata_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AssetMetadata;
Function _AssetMetadata_targetDevicePixelRatio$(
  m.Scope scope$,
  AssetMetadata target$,
) =>
    () {
      return target$.targetDevicePixelRatio;
    };
Function _AssetMetadata_key$(
  m.Scope scope$,
  AssetMetadata target$,
) =>
    () {
      return target$.key;
    };
Function _AssetMetadata_main$(
  m.Scope scope$,
  AssetMetadata target$,
) =>
    () {
      return target$.main;
    };
Function _AssetMetadata__$(m.Scope scope$) => ({
      required String key,
      required double? targetDevicePixelRatio,
      required bool main,
    }) {
      return AssetMetadata(
        key: key,
        main: main,
        targetDevicePixelRatio: targetDevicePixelRatio,
      );
    };
