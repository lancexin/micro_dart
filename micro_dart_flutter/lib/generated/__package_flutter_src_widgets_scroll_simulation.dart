// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/scroll_simulation.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/physics.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/scroll_simulation.dart',
  {
    'BouncingScrollSimulation.maxSpringTransferVelocity':
        _BouncingScrollSimulation_maxSpringTransferVelocity$
  },
  {},
  {
    'BouncingScrollSimulation': m.ClassMirror(
      'BouncingScrollSimulation',
      {
        'leadingExtent': _BouncingScrollSimulation_leadingExtent$,
        'trailingExtent': _BouncingScrollSimulation_trailingExtent$,
        'spring': _BouncingScrollSimulation_spring$,
        'x': _BouncingScrollSimulation_x$,
        'dx': _BouncingScrollSimulation_dx$,
        'isDone': _BouncingScrollSimulation_isDone$,
        'toString': _BouncingScrollSimulation_toString$,
      },
      {},
    ),
    'ClampingScrollSimulation': m.ClassMirror(
      'ClampingScrollSimulation',
      {
        'position': _ClampingScrollSimulation_position$,
        'velocity': _ClampingScrollSimulation_velocity$,
        'friction': _ClampingScrollSimulation_friction$,
        'x': _ClampingScrollSimulation_x$,
        'dx': _ClampingScrollSimulation_dx$,
        'isDone': _ClampingScrollSimulation_isDone$,
      },
      {},
    ),
  },
);
double _BouncingScrollSimulation_maxSpringTransferVelocity$() {
  return BouncingScrollSimulation.maxSpringTransferVelocity;
}

double _BouncingScrollSimulation_leadingExtent$(
    BouncingScrollSimulation target) {
  return target.leadingExtent;
}

double _BouncingScrollSimulation_trailingExtent$(
    BouncingScrollSimulation target) {
  return target.trailingExtent;
}

SpringDescription _BouncingScrollSimulation_spring$(
    BouncingScrollSimulation target) {
  return target.spring;
}

Function _BouncingScrollSimulation_x$(
  m.Scope scope,
  BouncingScrollSimulation target,
) =>
    target.x;
Function _BouncingScrollSimulation_dx$(
  m.Scope scope,
  BouncingScrollSimulation target,
) =>
    target.dx;
Function _BouncingScrollSimulation_isDone$(
  m.Scope scope,
  BouncingScrollSimulation target,
) =>
    target.isDone;
Function _BouncingScrollSimulation_toString$(
  m.Scope scope,
  BouncingScrollSimulation target,
) =>
    target.toString;
double _ClampingScrollSimulation_position$(ClampingScrollSimulation target) {
  return target.position;
}

double _ClampingScrollSimulation_velocity$(ClampingScrollSimulation target) {
  return target.velocity;
}

double _ClampingScrollSimulation_friction$(ClampingScrollSimulation target) {
  return target.friction;
}

Function _ClampingScrollSimulation_x$(
  m.Scope scope,
  ClampingScrollSimulation target,
) =>
    target.x;
Function _ClampingScrollSimulation_dx$(
  m.Scope scope,
  ClampingScrollSimulation target,
) =>
    target.dx;
Function _ClampingScrollSimulation_isDone$(
  m.Scope scope,
  ClampingScrollSimulation target,
) =>
    target.isDone;
