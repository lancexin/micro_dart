// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/slider.dart';
import 'dart:async';
import 'dart:math';
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/scheduler.dart' show timeDilation;
import 'package:flutter/services.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/slider_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/slider.dart',
  {},
  {},
  {
    'Slider': m.ClassMirror(
      'Slider',
      {
        'value': _Slider_value$,
        'secondaryTrackValue': _Slider_secondaryTrackValue$,
        'onChanged': _Slider_onChanged$,
        'onChangeStart': _Slider_onChangeStart$,
        'onChangeEnd': _Slider_onChangeEnd$,
        'min': _Slider_min$,
        'max': _Slider_max$,
        'divisions': _Slider_divisions$,
        'label': _Slider_label$,
        'activeColor': _Slider_activeColor$,
        'inactiveColor': _Slider_inactiveColor$,
        'secondaryActiveColor': _Slider_secondaryActiveColor$,
        'thumbColor': _Slider_thumbColor$,
        'overlayColor': _Slider_overlayColor$,
        'mouseCursor': _Slider_mouseCursor$,
        'semanticFormatterCallback': _Slider_semanticFormatterCallback$,
        'focusNode': _Slider_focusNode$,
        'autofocus': _Slider_autofocus$,
        'createState': _Slider_createState$,
        'debugFillProperties': _Slider_debugFillProperties$,
      },
      {},
    )
  },
);
double _Slider_value$(Slider target) {
  return target.value;
}

double? _Slider_secondaryTrackValue$(Slider target) {
  return target.secondaryTrackValue;
}

void Function(double)? _Slider_onChanged$(Slider target) {
  return target.onChanged;
}

void Function(double)? _Slider_onChangeStart$(Slider target) {
  return target.onChangeStart;
}

void Function(double)? _Slider_onChangeEnd$(Slider target) {
  return target.onChangeEnd;
}

double _Slider_min$(Slider target) {
  return target.min;
}

double _Slider_max$(Slider target) {
  return target.max;
}

int? _Slider_divisions$(Slider target) {
  return target.divisions;
}

String? _Slider_label$(Slider target) {
  return target.label;
}

Color? _Slider_activeColor$(Slider target) {
  return target.activeColor;
}

Color? _Slider_inactiveColor$(Slider target) {
  return target.inactiveColor;
}

Color? _Slider_secondaryActiveColor$(Slider target) {
  return target.secondaryActiveColor;
}

Color? _Slider_thumbColor$(Slider target) {
  return target.thumbColor;
}

MaterialStateProperty<Color?>? _Slider_overlayColor$(Slider target) {
  return target.overlayColor;
}

MouseCursor? _Slider_mouseCursor$(Slider target) {
  return target.mouseCursor;
}

String Function(double)? _Slider_semanticFormatterCallback$(Slider target) {
  return target.semanticFormatterCallback;
}

FocusNode? _Slider_focusNode$(Slider target) {
  return target.focusNode;
}

bool _Slider_autofocus$(Slider target) {
  return target.autofocus;
}

Function _Slider_createState$(
  m.Scope scope,
  Slider target,
) =>
    target.createState;
Function _Slider_debugFillProperties$(
  m.Scope scope,
  Slider target,
) =>
    target.debugFillProperties;
