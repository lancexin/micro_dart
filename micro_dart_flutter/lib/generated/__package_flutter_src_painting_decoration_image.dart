// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/decoration_image.dart';
import 'dart:developer';
import 'dart:math';
import 'dart:ui' show FlutterView, Image;
import 'package:flutter/foundation.dart';
import 'package:flutter/scheduler.dart';
import 'package:vector_math/vector_math_64.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/painting/binding.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/painting/box_fit.dart';
import 'package:flutter/src/painting/debug.dart';
import 'package:flutter/src/painting/image_provider.dart';
import 'package:flutter/src/painting/image_stream.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/decoration_image.dart',
  {
    'DecorationImage.': _DecorationImage__$,
//    'ImageTilingInfo.': _ImageTilingInfo__$,
    'ImageRepeat.repeat': _ImageRepeat_repeat$,
    'ImageRepeat.repeatX': _ImageRepeat_repeatX$,
    'ImageRepeat.repeatY': _ImageRepeat_repeatY$,
    'ImageRepeat.noRepeat': _ImageRepeat_noRepeat$,
    'ImageRepeat.values': _ImageRepeat_values$,
    'debugFlushLastFrameImageSizeInfo': _debugFlushLastFrameImageSizeInfo$,
    //  'createTilingInfo': _createTilingInfo$,
    'paintImage': _paintImage$,
  },
  {},
  {
    'DecorationImage': m.ClassMirror(
      'DecorationImage',
      {
        '#as': DecorationImage_as$,
        '#is': DecorationImage_is$,
        'image': _DecorationImage_image$,
        'onError': _DecorationImage_onError$,
        'colorFilter': _DecorationImage_colorFilter$,
        'fit': _DecorationImage_fit$,
        'alignment': _DecorationImage_alignment$,
        'centerSlice': _DecorationImage_centerSlice$,
        'repeat': _DecorationImage_repeat$,
        'matchTextDirection': _DecorationImage_matchTextDirection$,
        'scale': _DecorationImage_scale$,
        'opacity': _DecorationImage_opacity$,
        'filterQuality': _DecorationImage_filterQuality$,
        'invertColors': _DecorationImage_invertColors$,
        'isAntiAlias': _DecorationImage_isAntiAlias$,
        'hashCode': _DecorationImage_hashCode$,
        'createPainter': _DecorationImage_createPainter$,
        '==': _DecorationImage_eq$$,
        'toString': _DecorationImage_toString$,
      },
      {},
    ),
    'DecorationImagePainter': m.ClassMirror(
      'DecorationImagePainter',
      {
        '#as': DecorationImagePainter_as$,
        '#is': DecorationImagePainter_is$,
        'paint': _DecorationImagePainter_paint$,
        'dispose': _DecorationImagePainter_dispose$,
        'toString': _DecorationImagePainter_toString$,
      },
      {},
    ),
    // 'ImageTilingInfo': m.ClassMirror(
    //   'ImageTilingInfo',
    //   {
    //     '#as': ImageTilingInfo_as$,
    //     '#is': ImageTilingInfo_is$,
    //     'tmx': _ImageTilingInfo_tmx$,
    //     'tmy': _ImageTilingInfo_tmy$,
    //     'transform': _ImageTilingInfo_transform$,
    //     'toString': _ImageTilingInfo_toString$,
    //   },
    //   {},
    // ),
    'ImageRepeat': m.ClassMirror(
      'ImageRepeat',
      {},
      {},
    ),
  },
);
Function DecorationImage_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DecorationImage;
Function DecorationImage_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DecorationImage;
Function _DecorationImage_image$(
  m.Scope scope$,
  DecorationImage target$,
) =>
    () {
      return target$.image;
    };
Function _DecorationImage_onError$(
  m.Scope scope$,
  DecorationImage target$,
) =>
    () {
      return target$.onError;
    };
Function _DecorationImage_colorFilter$(
  m.Scope scope$,
  DecorationImage target$,
) =>
    () {
      return target$.colorFilter;
    };
Function _DecorationImage_fit$(
  m.Scope scope$,
  DecorationImage target$,
) =>
    () {
      return target$.fit;
    };
Function _DecorationImage_alignment$(
  m.Scope scope$,
  DecorationImage target$,
) =>
    () {
      return target$.alignment;
    };
Function _DecorationImage_centerSlice$(
  m.Scope scope$,
  DecorationImage target$,
) =>
    () {
      return target$.centerSlice;
    };
Function _DecorationImage_repeat$(
  m.Scope scope$,
  DecorationImage target$,
) =>
    () {
      return target$.repeat;
    };
Function _DecorationImage_matchTextDirection$(
  m.Scope scope$,
  DecorationImage target$,
) =>
    () {
      return target$.matchTextDirection;
    };
Function _DecorationImage_scale$(
  m.Scope scope$,
  DecorationImage target$,
) =>
    () {
      return target$.scale;
    };
Function _DecorationImage_opacity$(
  m.Scope scope$,
  DecorationImage target$,
) =>
    () {
      return target$.opacity;
    };
Function _DecorationImage_filterQuality$(
  m.Scope scope$,
  DecorationImage target$,
) =>
    () {
      return target$.filterQuality;
    };
Function _DecorationImage_invertColors$(
  m.Scope scope$,
  DecorationImage target$,
) =>
    () {
      return target$.invertColors;
    };
Function _DecorationImage_isAntiAlias$(
  m.Scope scope$,
  DecorationImage target$,
) =>
    () {
      return target$.isAntiAlias;
    };
Function _DecorationImage_hashCode$(
  m.Scope scope$,
  DecorationImage target$,
) =>
    () {
      return target$.hashCode;
    };
Function _DecorationImage__$(m.Scope scope$) => ({
      required ImageProvider<Object> image,
      m.FunctionPointer? onError,
      ColorFilter? colorFilter,
      BoxFit? fit,
      AlignmentGeometry? alignment,
      Rect? centerSlice,
      ImageRepeat? repeat,
      bool? matchTextDirection,
      double? scale,
      double? opacity,
      FilterQuality? filterQuality,
      bool? invertColors,
      bool? isAntiAlias,
    }) {
      void onErrorProxy(
        Object onError_exception$,
        StackTrace? onError_stackTrace$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onError!,
            [
              onError_exception$,
              onError_stackTrace$,
            ],
            {},
          );
      return DecorationImage(
        alignment: alignment ?? Alignment.center,
        centerSlice: centerSlice,
        colorFilter: colorFilter,
        filterQuality: filterQuality ?? FilterQuality.low,
        fit: fit,
        image: image,
        invertColors: invertColors ?? false,
        isAntiAlias: isAntiAlias ?? false,
        matchTextDirection: matchTextDirection ?? false,
        onError: onError == null ? null : onErrorProxy,
        opacity: opacity ?? 1.0,
        repeat: repeat ?? ImageRepeat.noRepeat,
        scale: scale ?? 1.0,
      );
    };
Function _DecorationImage_createPainter$(
  m.Scope scope$,
  DecorationImage target$,
) =>
    (m.FunctionPointer onChanged) {
      void onChangedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onChanged,
            [],
            {},
          );
      return target$.createPainter(onChangedProxy);
    };
Function _DecorationImage_eq$$(
  m.Scope scope$,
  DecorationImage target$,
) =>
    (Object other$) => target$ == other$;
Function _DecorationImage_toString$(
  m.Scope scope$,
  DecorationImage target$,
) =>
    target$.toString;
Function DecorationImagePainter_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DecorationImagePainter;
Function DecorationImagePainter_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DecorationImagePainter;
Function _DecorationImagePainter_paint$(
  m.Scope scope$,
  DecorationImagePainter target$,
) =>
    target$.paint;
Function _DecorationImagePainter_dispose$(
  m.Scope scope$,
  DecorationImagePainter target$,
) =>
    target$.dispose;
Function _DecorationImagePainter_toString$(
  m.Scope scope$,
  DecorationImagePainter target$,
) =>
    target$.toString;
// Function ImageTilingInfo_as$(
//   m.Scope scope$,
//   dynamic target$,
// ) =>
//     () => target$ as ImageTilingInfo;
// Function ImageTilingInfo_is$(
//   m.Scope scope$,
//   dynamic target$,
// ) =>
//     () => target$ is ImageTilingInfo;
// Function _ImageTilingInfo_tmx$(
//   m.Scope scope$,
//   ImageTilingInfo target$,
// ) =>
//     () {
//       return target$.tmx;
//     };
// Function _ImageTilingInfo_tmy$(
//   m.Scope scope$,
//   ImageTilingInfo target$,
// ) =>
//     () {
//       return target$.tmy;
//     };
// Function _ImageTilingInfo_transform$(
//   m.Scope scope$,
//   ImageTilingInfo target$,
// ) =>
//     () {
//       return target$.transform;
//     };
// Function _ImageTilingInfo__$(m.Scope scope$) => ({
//       required TileMode tmx,
//       required TileMode tmy,
//       required Matrix4 transform,
//     }) {
//       return ImageTilingInfo(
//         tmx: tmx,
//         tmy: tmy,
//         transform: transform,
//       );
//     };
// Function _ImageTilingInfo_toString$(
//   m.Scope scope$,
//   ImageTilingInfo target$,
// ) =>
//     target$.toString;
Function _ImageRepeat_repeat$(m.Scope scope$) => () => ImageRepeat.repeat;
Function _ImageRepeat_repeatX$(m.Scope scope$) => () => ImageRepeat.repeatX;
Function _ImageRepeat_repeatY$(m.Scope scope$) => () => ImageRepeat.repeatY;
Function _ImageRepeat_noRepeat$(m.Scope scope$) => () => ImageRepeat.noRepeat;
Function _ImageRepeat_values$(m.Scope scope$) => () => ImageRepeat.values;
Function _debugFlushLastFrameImageSizeInfo$(m.Scope scope$) =>
    debugFlushLastFrameImageSizeInfo;
// Function _createTilingInfo$(m.Scope scope$) => createTilingInfo;
Function _paintImage$(m.Scope scope$) => paintImage;
