// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/decoration_image.dart';
import 'dart:developer';
import 'dart:math';
import 'dart:ui' show FlutterView, Image;
import 'package:flutter/foundation.dart';
import 'package:flutter/scheduler.dart';
import 'package:vector_math/vector_math_64.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/painting/binding.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/painting/box_fit.dart';
import 'package:flutter/src/painting/debug.dart';
import 'package:flutter/src/painting/image_provider.dart';
import 'package:flutter/src/painting/image_stream.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/decoration_image.dart',
  {
    'DecorationImage.createPainter': _DecorationImage_createPainter$,
    'ImageRepeat.repeat': _ImageRepeat_repeat$,
    'ImageRepeat.repeatX': _ImageRepeat_repeatX$,
    'ImageRepeat.repeatY': _ImageRepeat_repeatY$,
    'ImageRepeat.noRepeat': _ImageRepeat_noRepeat$,
    'ImageRepeat.values': _ImageRepeat_values$,
    'debugFlushLastFrameImageSizeInfo': _debugFlushLastFrameImageSizeInfo$,
    'createTilingInfo': _createTilingInfo$,
    'paintImage': _paintImage$,
  },
  {},
  {
    'DecorationImage': m.ClassMirror(
      'DecorationImage',
      {
        '#as': DecorationImage_as$,
        '#is': DecorationImage_is$,
        'image': _DecorationImage_image$,
        'onError': _DecorationImage_onError$,
        'colorFilter': _DecorationImage_colorFilter$,
        'fit': _DecorationImage_fit$,
        'alignment': _DecorationImage_alignment$,
        'centerSlice': _DecorationImage_centerSlice$,
        'repeat': _DecorationImage_repeat$,
        'matchTextDirection': _DecorationImage_matchTextDirection$,
        'scale': _DecorationImage_scale$,
        'opacity': _DecorationImage_opacity$,
        'filterQuality': _DecorationImage_filterQuality$,
        'invertColors': _DecorationImage_invertColors$,
        'isAntiAlias': _DecorationImage_isAntiAlias$,
        'hashCode': _DecorationImage_hashCode$,
        '==': _DecorationImage_eq$$,
        'toString': _DecorationImage_toString$,
      },
      {},
    ),
    'DecorationImagePainter': m.ClassMirror(
      'DecorationImagePainter',
      {
        '#as': DecorationImagePainter_as$,
        '#is': DecorationImagePainter_is$,
        'paint': _DecorationImagePainter_paint$,
        'dispose': _DecorationImagePainter_dispose$,
        'toString': _DecorationImagePainter_toString$,
      },
      {},
    ),
    'ImageTilingInfo': m.ClassMirror(
      'ImageTilingInfo',
      {
        '#as': ImageTilingInfo_as$,
        '#is': ImageTilingInfo_is$,
        'tmx': _ImageTilingInfo_tmx$,
        'tmy': _ImageTilingInfo_tmy$,
        'transform': _ImageTilingInfo_transform$,
        'toString': _ImageTilingInfo_toString$,
      },
      {},
    ),
    'ImageRepeat': m.ClassMirror(
      'ImageRepeat',
      {},
      {},
    ),
  },
);
Function DecorationImage_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DecorationImage;
Function DecorationImage_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DecorationImage;
ImageProvider<Object> _DecorationImage_image$(DecorationImage target) {
  return target.image;
}

void Function(Object, StackTrace?)? _DecorationImage_onError$(
    DecorationImage target) {
  return target.onError;
}

ColorFilter? _DecorationImage_colorFilter$(DecorationImage target) {
  return target.colorFilter;
}

BoxFit? _DecorationImage_fit$(DecorationImage target) {
  return target.fit;
}

AlignmentGeometry _DecorationImage_alignment$(DecorationImage target) {
  return target.alignment;
}

Rect? _DecorationImage_centerSlice$(DecorationImage target) {
  return target.centerSlice;
}

ImageRepeat _DecorationImage_repeat$(DecorationImage target) {
  return target.repeat;
}

bool _DecorationImage_matchTextDirection$(DecorationImage target) {
  return target.matchTextDirection;
}

double _DecorationImage_scale$(DecorationImage target) {
  return target.scale;
}

double _DecorationImage_opacity$(DecorationImage target) {
  return target.opacity;
}

FilterQuality _DecorationImage_filterQuality$(DecorationImage target) {
  return target.filterQuality;
}

bool _DecorationImage_invertColors$(DecorationImage target) {
  return target.invertColors;
}

bool _DecorationImage_isAntiAlias$(DecorationImage target) {
  return target.isAntiAlias;
}

int _DecorationImage_hashCode$(DecorationImage target) {
  return target.hashCode;
}

Function _DecorationImage_createPainter$(
  m.Scope scope,
  DecorationImage target,
) =>
    (m.FunctionPointer onChanged) {
      void onChangedProxy() => scope.engine.callFunctionPointer(
            scope,
            onChanged,
            [],
            {},
          );
      return target.createPainter(onChangedProxy);
    };
Function _DecorationImage_eq$$(
  m.Scope scope,
  DecorationImage target,
) =>
    (Object other) => target == other;
Function _DecorationImage_toString$(
  m.Scope scope,
  DecorationImage target,
) =>
    target.toString;
Function DecorationImagePainter_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DecorationImagePainter;
Function DecorationImagePainter_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DecorationImagePainter;
Function _DecorationImagePainter_paint$(
  m.Scope scope,
  DecorationImagePainter target,
) =>
    target.paint;
Function _DecorationImagePainter_dispose$(
  m.Scope scope,
  DecorationImagePainter target,
) =>
    target.dispose;
Function _DecorationImagePainter_toString$(
  m.Scope scope,
  DecorationImagePainter target,
) =>
    target.toString;
Function ImageTilingInfo_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ImageTilingInfo;
Function ImageTilingInfo_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ImageTilingInfo;
TileMode _ImageTilingInfo_tmx$(ImageTilingInfo target) {
  return target.tmx;
}

TileMode _ImageTilingInfo_tmy$(ImageTilingInfo target) {
  return target.tmy;
}

Matrix4 _ImageTilingInfo_transform$(ImageTilingInfo target) {
  return target.transform;
}

Function _ImageTilingInfo_toString$(
  m.Scope scope,
  ImageTilingInfo target,
) =>
    target.toString;
ImageRepeat _ImageRepeat_repeat$() {
  return ImageRepeat.repeat;
}

ImageRepeat _ImageRepeat_repeatX$() {
  return ImageRepeat.repeatX;
}

ImageRepeat _ImageRepeat_repeatY$() {
  return ImageRepeat.repeatY;
}

ImageRepeat _ImageRepeat_noRepeat$() {
  return ImageRepeat.noRepeat;
}

List<ImageRepeat> _ImageRepeat_values$() {
  return ImageRepeat.values;
}

Function _debugFlushLastFrameImageSizeInfo$(m.Scope scope) =>
    debugFlushLastFrameImageSizeInfo;
Function _createTilingInfo$(m.Scope scope) => createTilingInfo;
Function _paintImage$(m.Scope scope) => paintImage;
