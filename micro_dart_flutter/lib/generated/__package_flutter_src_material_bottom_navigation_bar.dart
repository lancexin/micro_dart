// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/bottom_navigation_bar.dart';
import 'dart:collection' show Queue;
import 'dart:math';
import 'package:flutter/widgets.dart';
import 'package:vector_math/vector_math_64.dart' show Vector3;
import 'package:flutter/src/material/bottom_navigation_bar_theme.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/tooltip.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/bottom_navigation_bar.dart',
  {
    'BottomNavigationBarType.fixed': _BottomNavigationBarType_fixed$,
    'BottomNavigationBarType.shifting': _BottomNavigationBarType_shifting$,
    'BottomNavigationBarType.values': _BottomNavigationBarType_values$,
    'BottomNavigationBarLandscapeLayout.spread':
        _BottomNavigationBarLandscapeLayout_spread$,
    'BottomNavigationBarLandscapeLayout.centered':
        _BottomNavigationBarLandscapeLayout_centered$,
    'BottomNavigationBarLandscapeLayout.linear':
        _BottomNavigationBarLandscapeLayout_linear$,
    'BottomNavigationBarLandscapeLayout.values':
        _BottomNavigationBarLandscapeLayout_values$,
  },
  {},
  {
    'BottomNavigationBar': m.ClassMirror(
      'BottomNavigationBar',
      {
        '#as': BottomNavigationBar_as$,
        '#is': BottomNavigationBar_is$,
        'items': _BottomNavigationBar_items$,
        'onTap': _BottomNavigationBar_onTap$,
        'currentIndex': _BottomNavigationBar_currentIndex$,
        'elevation': _BottomNavigationBar_elevation$,
        'type': _BottomNavigationBar_type$,
        'backgroundColor': _BottomNavigationBar_backgroundColor$,
        'iconSize': _BottomNavigationBar_iconSize$,
        'selectedItemColor': _BottomNavigationBar_selectedItemColor$,
        'unselectedItemColor': _BottomNavigationBar_unselectedItemColor$,
        'selectedIconTheme': _BottomNavigationBar_selectedIconTheme$,
        'unselectedIconTheme': _BottomNavigationBar_unselectedIconTheme$,
        'selectedLabelStyle': _BottomNavigationBar_selectedLabelStyle$,
        'unselectedLabelStyle': _BottomNavigationBar_unselectedLabelStyle$,
        'selectedFontSize': _BottomNavigationBar_selectedFontSize$,
        'unselectedFontSize': _BottomNavigationBar_unselectedFontSize$,
        'showUnselectedLabels': _BottomNavigationBar_showUnselectedLabels$,
        'showSelectedLabels': _BottomNavigationBar_showSelectedLabels$,
        'mouseCursor': _BottomNavigationBar_mouseCursor$,
        'enableFeedback': _BottomNavigationBar_enableFeedback$,
        'landscapeLayout': _BottomNavigationBar_landscapeLayout$,
        'useLegacyColorScheme': _BottomNavigationBar_useLegacyColorScheme$,
        'fixedColor': _BottomNavigationBar_fixedColor$,
        'createState': _BottomNavigationBar_createState$,
      },
      {},
    ),
    'BottomNavigationBarType': m.ClassMirror(
      'BottomNavigationBarType',
      {},
      {},
    ),
    'BottomNavigationBarLandscapeLayout': m.ClassMirror(
      'BottomNavigationBarLandscapeLayout',
      {},
      {},
    ),
  },
);
Function BottomNavigationBar_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as BottomNavigationBar;
Function BottomNavigationBar_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is BottomNavigationBar;
List<BottomNavigationBarItem> _BottomNavigationBar_items$(
    BottomNavigationBar target) {
  return target.items;
}

void Function(int)? _BottomNavigationBar_onTap$(BottomNavigationBar target) {
  return target.onTap;
}

int _BottomNavigationBar_currentIndex$(BottomNavigationBar target) {
  return target.currentIndex;
}

double? _BottomNavigationBar_elevation$(BottomNavigationBar target) {
  return target.elevation;
}

BottomNavigationBarType? _BottomNavigationBar_type$(
    BottomNavigationBar target) {
  return target.type;
}

Color? _BottomNavigationBar_backgroundColor$(BottomNavigationBar target) {
  return target.backgroundColor;
}

double _BottomNavigationBar_iconSize$(BottomNavigationBar target) {
  return target.iconSize;
}

Color? _BottomNavigationBar_selectedItemColor$(BottomNavigationBar target) {
  return target.selectedItemColor;
}

Color? _BottomNavigationBar_unselectedItemColor$(BottomNavigationBar target) {
  return target.unselectedItemColor;
}

IconThemeData? _BottomNavigationBar_selectedIconTheme$(
    BottomNavigationBar target) {
  return target.selectedIconTheme;
}

IconThemeData? _BottomNavigationBar_unselectedIconTheme$(
    BottomNavigationBar target) {
  return target.unselectedIconTheme;
}

TextStyle? _BottomNavigationBar_selectedLabelStyle$(
    BottomNavigationBar target) {
  return target.selectedLabelStyle;
}

TextStyle? _BottomNavigationBar_unselectedLabelStyle$(
    BottomNavigationBar target) {
  return target.unselectedLabelStyle;
}

double _BottomNavigationBar_selectedFontSize$(BottomNavigationBar target) {
  return target.selectedFontSize;
}

double _BottomNavigationBar_unselectedFontSize$(BottomNavigationBar target) {
  return target.unselectedFontSize;
}

bool? _BottomNavigationBar_showUnselectedLabels$(BottomNavigationBar target) {
  return target.showUnselectedLabels;
}

bool? _BottomNavigationBar_showSelectedLabels$(BottomNavigationBar target) {
  return target.showSelectedLabels;
}

MouseCursor? _BottomNavigationBar_mouseCursor$(BottomNavigationBar target) {
  return target.mouseCursor;
}

bool? _BottomNavigationBar_enableFeedback$(BottomNavigationBar target) {
  return target.enableFeedback;
}

BottomNavigationBarLandscapeLayout? _BottomNavigationBar_landscapeLayout$(
    BottomNavigationBar target) {
  return target.landscapeLayout;
}

bool _BottomNavigationBar_useLegacyColorScheme$(BottomNavigationBar target) {
  return target.useLegacyColorScheme;
}

Color? _BottomNavigationBar_fixedColor$(BottomNavigationBar target) {
  return target.fixedColor;
}

Function _BottomNavigationBar_createState$(
  m.Scope scope,
  BottomNavigationBar target,
) =>
    target.createState;
BottomNavigationBarType _BottomNavigationBarType_fixed$() {
  return BottomNavigationBarType.fixed;
}

BottomNavigationBarType _BottomNavigationBarType_shifting$() {
  return BottomNavigationBarType.shifting;
}

List<BottomNavigationBarType> _BottomNavigationBarType_values$() {
  return BottomNavigationBarType.values;
}

BottomNavigationBarLandscapeLayout
    _BottomNavigationBarLandscapeLayout_spread$() {
  return BottomNavigationBarLandscapeLayout.spread;
}

BottomNavigationBarLandscapeLayout
    _BottomNavigationBarLandscapeLayout_centered$() {
  return BottomNavigationBarLandscapeLayout.centered;
}

BottomNavigationBarLandscapeLayout
    _BottomNavigationBarLandscapeLayout_linear$() {
  return BottomNavigationBarLandscapeLayout.linear;
}

List<BottomNavigationBarLandscapeLayout>
    _BottomNavigationBarLandscapeLayout_values$() {
  return BottomNavigationBarLandscapeLayout.values;
}
