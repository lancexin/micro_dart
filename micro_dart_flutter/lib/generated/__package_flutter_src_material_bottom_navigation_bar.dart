// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/bottom_navigation_bar.dart';
import 'dart:collection' show Queue;
import 'dart:math';
import 'package:flutter/widgets.dart';
import 'package:vector_math/vector_math_64.dart' show Vector3;
import 'package:flutter/src/material/bottom_navigation_bar_theme.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/tooltip.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/bottom_navigation_bar.dart',
  {
    'BottomNavigationBar.': _BottomNavigationBar__$,
    'BottomNavigationBarType.fixed': _BottomNavigationBarType_fixed$,
    'BottomNavigationBarType.shifting': _BottomNavigationBarType_shifting$,
    'BottomNavigationBarType.values': _BottomNavigationBarType_values$,
    'BottomNavigationBarLandscapeLayout.spread':
        _BottomNavigationBarLandscapeLayout_spread$,
    'BottomNavigationBarLandscapeLayout.centered':
        _BottomNavigationBarLandscapeLayout_centered$,
    'BottomNavigationBarLandscapeLayout.linear':
        _BottomNavigationBarLandscapeLayout_linear$,
    'BottomNavigationBarLandscapeLayout.values':
        _BottomNavigationBarLandscapeLayout_values$,
  },
  {},
  {
    'BottomNavigationBar': m.ClassMirror(
      'BottomNavigationBar',
      {
        '#as': BottomNavigationBar_as$,
        '#is': BottomNavigationBar_is$,
        'items': _BottomNavigationBar_items$,
        'onTap': _BottomNavigationBar_onTap$,
        'currentIndex': _BottomNavigationBar_currentIndex$,
        'elevation': _BottomNavigationBar_elevation$,
        'type': _BottomNavigationBar_type$,
        'backgroundColor': _BottomNavigationBar_backgroundColor$,
        'iconSize': _BottomNavigationBar_iconSize$,
        'selectedItemColor': _BottomNavigationBar_selectedItemColor$,
        'unselectedItemColor': _BottomNavigationBar_unselectedItemColor$,
        'selectedIconTheme': _BottomNavigationBar_selectedIconTheme$,
        'unselectedIconTheme': _BottomNavigationBar_unselectedIconTheme$,
        'selectedLabelStyle': _BottomNavigationBar_selectedLabelStyle$,
        'unselectedLabelStyle': _BottomNavigationBar_unselectedLabelStyle$,
        'selectedFontSize': _BottomNavigationBar_selectedFontSize$,
        'unselectedFontSize': _BottomNavigationBar_unselectedFontSize$,
        'showUnselectedLabels': _BottomNavigationBar_showUnselectedLabels$,
        'showSelectedLabels': _BottomNavigationBar_showSelectedLabels$,
        'mouseCursor': _BottomNavigationBar_mouseCursor$,
        'enableFeedback': _BottomNavigationBar_enableFeedback$,
        'landscapeLayout': _BottomNavigationBar_landscapeLayout$,
        'useLegacyColorScheme': _BottomNavigationBar_useLegacyColorScheme$,
        'fixedColor': _BottomNavigationBar_fixedColor$,
        'createState': _BottomNavigationBar_createState$,
      },
      {},
    ),
    'BottomNavigationBarType': m.ClassMirror(
      'BottomNavigationBarType',
      {},
      {},
    ),
    'BottomNavigationBarLandscapeLayout': m.ClassMirror(
      'BottomNavigationBarLandscapeLayout',
      {},
      {},
    ),
  },
);
Function BottomNavigationBar_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as BottomNavigationBar;
Function BottomNavigationBar_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is BottomNavigationBar;
Function _BottomNavigationBar_items$(
  m.Scope scope$,
  BottomNavigationBar target$,
) =>
    () {
      return target$.items;
    };
Function _BottomNavigationBar_onTap$(
  m.Scope scope$,
  BottomNavigationBar target$,
) =>
    () {
      return target$.onTap;
    };
Function _BottomNavigationBar_currentIndex$(
  m.Scope scope$,
  BottomNavigationBar target$,
) =>
    () {
      return target$.currentIndex;
    };
Function _BottomNavigationBar_elevation$(
  m.Scope scope$,
  BottomNavigationBar target$,
) =>
    () {
      return target$.elevation;
    };
Function _BottomNavigationBar_type$(
  m.Scope scope$,
  BottomNavigationBar target$,
) =>
    () {
      return target$.type;
    };
Function _BottomNavigationBar_backgroundColor$(
  m.Scope scope$,
  BottomNavigationBar target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _BottomNavigationBar_iconSize$(
  m.Scope scope$,
  BottomNavigationBar target$,
) =>
    () {
      return target$.iconSize;
    };
Function _BottomNavigationBar_selectedItemColor$(
  m.Scope scope$,
  BottomNavigationBar target$,
) =>
    () {
      return target$.selectedItemColor;
    };
Function _BottomNavigationBar_unselectedItemColor$(
  m.Scope scope$,
  BottomNavigationBar target$,
) =>
    () {
      return target$.unselectedItemColor;
    };
Function _BottomNavigationBar_selectedIconTheme$(
  m.Scope scope$,
  BottomNavigationBar target$,
) =>
    () {
      return target$.selectedIconTheme;
    };
Function _BottomNavigationBar_unselectedIconTheme$(
  m.Scope scope$,
  BottomNavigationBar target$,
) =>
    () {
      return target$.unselectedIconTheme;
    };
Function _BottomNavigationBar_selectedLabelStyle$(
  m.Scope scope$,
  BottomNavigationBar target$,
) =>
    () {
      return target$.selectedLabelStyle;
    };
Function _BottomNavigationBar_unselectedLabelStyle$(
  m.Scope scope$,
  BottomNavigationBar target$,
) =>
    () {
      return target$.unselectedLabelStyle;
    };
Function _BottomNavigationBar_selectedFontSize$(
  m.Scope scope$,
  BottomNavigationBar target$,
) =>
    () {
      return target$.selectedFontSize;
    };
Function _BottomNavigationBar_unselectedFontSize$(
  m.Scope scope$,
  BottomNavigationBar target$,
) =>
    () {
      return target$.unselectedFontSize;
    };
Function _BottomNavigationBar_showUnselectedLabels$(
  m.Scope scope$,
  BottomNavigationBar target$,
) =>
    () {
      return target$.showUnselectedLabels;
    };
Function _BottomNavigationBar_showSelectedLabels$(
  m.Scope scope$,
  BottomNavigationBar target$,
) =>
    () {
      return target$.showSelectedLabels;
    };
Function _BottomNavigationBar_mouseCursor$(
  m.Scope scope$,
  BottomNavigationBar target$,
) =>
    () {
      return target$.mouseCursor;
    };
Function _BottomNavigationBar_enableFeedback$(
  m.Scope scope$,
  BottomNavigationBar target$,
) =>
    () {
      return target$.enableFeedback;
    };
Function _BottomNavigationBar_landscapeLayout$(
  m.Scope scope$,
  BottomNavigationBar target$,
) =>
    () {
      return target$.landscapeLayout;
    };
Function _BottomNavigationBar_useLegacyColorScheme$(
  m.Scope scope$,
  BottomNavigationBar target$,
) =>
    () {
      return target$.useLegacyColorScheme;
    };
Function _BottomNavigationBar_fixedColor$(
  m.Scope scope$,
  BottomNavigationBar target$,
) =>
    () {
      return target$.fixedColor;
    };
Function _BottomNavigationBar__$(m.Scope scope$) => ({
      Key? key,
      required List items,
      m.FunctionPointer? onTap,
      int? currentIndex,
      double? elevation,
      BottomNavigationBarType? type,
      Color? fixedColor,
      Color? backgroundColor,
      double? iconSize,
      Color? selectedItemColor,
      Color? unselectedItemColor,
      IconThemeData? selectedIconTheme,
      IconThemeData? unselectedIconTheme,
      double? selectedFontSize,
      double? unselectedFontSize,
      TextStyle? selectedLabelStyle,
      TextStyle? unselectedLabelStyle,
      bool? showSelectedLabels,
      bool? showUnselectedLabels,
      MouseCursor? mouseCursor,
      bool? enableFeedback,
      BottomNavigationBarLandscapeLayout? landscapeLayout,
      bool? useLegacyColorScheme,
    }) {
      void onTapProxy(int onTap_value$) => scope$.engine.callFunctionPointer(
            scope$,
            onTap!,
            [onTap_value$],
            {},
          );
      return BottomNavigationBar(
        backgroundColor: backgroundColor,
        currentIndex: currentIndex ?? 0,
        elevation: elevation,
        enableFeedback: enableFeedback,
        fixedColor: fixedColor,
        iconSize: iconSize ?? 24.0,
        items: List.from(items),
        key: key,
        landscapeLayout: landscapeLayout,
        mouseCursor: mouseCursor,
        onTap: onTap == null ? null : onTapProxy,
        selectedFontSize: selectedFontSize ?? 14.0,
        selectedIconTheme: selectedIconTheme,
        selectedItemColor: selectedItemColor,
        selectedLabelStyle: selectedLabelStyle,
        showSelectedLabels: showSelectedLabels,
        showUnselectedLabels: showUnselectedLabels,
        type: type,
        unselectedFontSize: unselectedFontSize ?? 12.0,
        unselectedIconTheme: unselectedIconTheme,
        unselectedItemColor: unselectedItemColor,
        unselectedLabelStyle: unselectedLabelStyle,
        useLegacyColorScheme: useLegacyColorScheme ?? true,
      );
    };
Function _BottomNavigationBar_createState$(
  m.Scope scope$,
  BottomNavigationBar target$,
) =>
    target$.createState;
BottomNavigationBarType _BottomNavigationBarType_fixed$() {
  return BottomNavigationBarType.fixed;
}

BottomNavigationBarType _BottomNavigationBarType_shifting$() {
  return BottomNavigationBarType.shifting;
}

List<BottomNavigationBarType> _BottomNavigationBarType_values$() {
  return BottomNavigationBarType.values;
}

BottomNavigationBarLandscapeLayout
    _BottomNavigationBarLandscapeLayout_spread$() {
  return BottomNavigationBarLandscapeLayout.spread;
}

BottomNavigationBarLandscapeLayout
    _BottomNavigationBarLandscapeLayout_centered$() {
  return BottomNavigationBarLandscapeLayout.centered;
}

BottomNavigationBarLandscapeLayout
    _BottomNavigationBarLandscapeLayout_linear$() {
  return BottomNavigationBarLandscapeLayout.linear;
}

List<BottomNavigationBarLandscapeLayout>
    _BottomNavigationBarLandscapeLayout_values$() {
  return BottomNavigationBarLandscapeLayout.values;
}
