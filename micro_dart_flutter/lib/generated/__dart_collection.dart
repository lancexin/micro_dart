// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'dart:collection';
import 'dart:math' show Random;

const libraryMirror = m.LibraryMirror(
  'dart:collection',
  {
    'ListBase.listToString': _ListBase_listToString$,
    'MapBase.mapToString': _MapBase_mapToString$,
    'Queue.castFrom': _Queue_castFrom$,
    'SetBase.setToString': _SetBase_setToString$,
  },
  {},
  {
    'UnmodifiableListView': m.ClassMirror(
      'UnmodifiableListView',
      {
        'length': _UnmodifiableListView_length$,
        'cast': _UnmodifiableListView_cast$,
      },
      {},
    ),
    'HashMap': m.ClassMirror(
      'HashMap',
      {},
      {},
    ),
    'HashSet': m.ClassMirror(
      'HashSet',
      {'iterator': _HashSet_iterator$},
      {},
    ),
    'LinkedHashMap': m.ClassMirror(
      'LinkedHashMap',
      {},
      {},
    ),
    'LinkedHashSet': m.ClassMirror(
      'LinkedHashSet',
      {'iterator': _LinkedHashSet_iterator$},
      {},
    ),
    'LinkedList': m.ClassMirror(
      'LinkedList',
      {
        'iterator': _LinkedList_iterator$,
        'length': _LinkedList_length$,
        'first': _LinkedList_first$,
        'last': _LinkedList_last$,
        'single': _LinkedList_single$,
        'isEmpty': _LinkedList_isEmpty$,
        'addFirst': _LinkedList_addFirst$,
        'add': _LinkedList_add$,
        'addAll': _LinkedList_addAll$,
        'remove': _LinkedList_remove$,
        'contains': _LinkedList_contains$,
        'clear': _LinkedList_clear$,
      },
      {},
    ),
    'LinkedListEntry': m.ClassMirror(
      'LinkedListEntry',
      {
        'list': _LinkedListEntry_list$,
        'next': _LinkedListEntry_next$,
        'previous': _LinkedListEntry_previous$,
        'unlink': _LinkedListEntry_unlink$,
        'insertAfter': _LinkedListEntry_insertAfter$,
        'insertBefore': _LinkedListEntry_insertBefore$,
      },
      {},
    ),
    'ListBase': m.ClassMirror(
      'ListBase',
      {
        'iterator': _ListBase_iterator$,
        'isEmpty': _ListBase_isEmpty$,
        'isNotEmpty': _ListBase_isNotEmpty$,
        'first': _ListBase_first$,
        'last': _ListBase_last$,
        'single': _ListBase_single$,
        'reversed': _ListBase_reversed$,
        'elementAt': _ListBase_elementAt$,
        'followedBy': _ListBase_followedBy$,
        'contains': _ListBase_contains$,
        'join': _ListBase_join$,
        'whereType': _ListBase_whereType$,
        'skip': _ListBase_skip$,
        'take': _ListBase_take$,
        'toList': _ListBase_toList$,
        'toSet': _ListBase_toSet$,
        'add': _ListBase_add$,
        'addAll': _ListBase_addAll$,
        'remove': _ListBase_remove$,
        'clear': _ListBase_clear$,
        'cast': _ListBase_cast$,
        'removeLast': _ListBase_removeLast$,
        'shuffle': _ListBase_shuffle$,
        'asMap': _ListBase_asMap$,
        'sublist': _ListBase_sublist$,
        'getRange': _ListBase_getRange$,
        'removeRange': _ListBase_removeRange$,
        'fillRange': _ListBase_fillRange$,
        'setRange': _ListBase_setRange$,
        'replaceRange': _ListBase_replaceRange$,
        'indexOf': _ListBase_indexOf$,
        'lastIndexOf': _ListBase_lastIndexOf$,
        'insert': _ListBase_insert$,
        'removeAt': _ListBase_removeAt$,
        'insertAll': _ListBase_insertAll$,
        'setAll': _ListBase_setAll$,
        'toString': _ListBase_toString$,
      },
      {
        'first': _ListBase_first_set$,
        'last': _ListBase_last_set$,
      },
    ),
    'MapBase': m.ClassMirror(
      'MapBase',
      {
        'keys': _MapBase_keys$,
        'entries': _MapBase_entries$,
        'length': _MapBase_length$,
        'isEmpty': _MapBase_isEmpty$,
        'isNotEmpty': _MapBase_isNotEmpty$,
        'values': _MapBase_values$,
        'remove': _MapBase_remove$,
        'clear': _MapBase_clear$,
        'cast': _MapBase_cast$,
        'addAll': _MapBase_addAll$,
        'containsValue': _MapBase_containsValue$,
        'addEntries': _MapBase_addEntries$,
        'containsKey': _MapBase_containsKey$,
        'toString': _MapBase_toString$,
      },
      {},
    ),
    'UnmodifiableMapBase': m.ClassMirror(
      'UnmodifiableMapBase',
      {},
      {},
    ),
    'MapView': m.ClassMirror(
      'MapView',
      {
        'isEmpty': _MapView_isEmpty$,
        'isNotEmpty': _MapView_isNotEmpty$,
        'length': _MapView_length$,
        'keys': _MapView_keys$,
        'values': _MapView_values$,
        'entries': _MapView_entries$,
        'cast': _MapView_cast$,
        'addAll': _MapView_addAll$,
        'clear': _MapView_clear$,
        'containsKey': _MapView_containsKey$,
        'containsValue': _MapView_containsValue$,
        'remove': _MapView_remove$,
        'toString': _MapView_toString$,
        'addEntries': _MapView_addEntries$,
      },
      {},
    ),
    'UnmodifiableMapView': m.ClassMirror(
      'UnmodifiableMapView',
      {'cast': _UnmodifiableMapView_cast$},
      {},
    ),
    'Queue': m.ClassMirror(
      'Queue',
      {
        'cast': _Queue_cast$,
        'removeFirst': _Queue_removeFirst$,
        'removeLast': _Queue_removeLast$,
        'addFirst': _Queue_addFirst$,
        'addLast': _Queue_addLast$,
        'add': _Queue_add$,
        'remove': _Queue_remove$,
        'addAll': _Queue_addAll$,
        'clear': _Queue_clear$,
      },
      {},
    ),
    'DoubleLinkedQueue': m.ClassMirror(
      'DoubleLinkedQueue',
      {
        'length': _DoubleLinkedQueue_length$,
        'first': _DoubleLinkedQueue_first$,
        'last': _DoubleLinkedQueue_last$,
        'single': _DoubleLinkedQueue_single$,
        'isEmpty': _DoubleLinkedQueue_isEmpty$,
        'iterator': _DoubleLinkedQueue_iterator$,
        'cast': _DoubleLinkedQueue_cast$,
        'addLast': _DoubleLinkedQueue_addLast$,
        'addFirst': _DoubleLinkedQueue_addFirst$,
        'add': _DoubleLinkedQueue_add$,
        'addAll': _DoubleLinkedQueue_addAll$,
        'removeLast': _DoubleLinkedQueue_removeLast$,
        'removeFirst': _DoubleLinkedQueue_removeFirst$,
        'remove': _DoubleLinkedQueue_remove$,
        'firstEntry': _DoubleLinkedQueue_firstEntry$,
        'lastEntry': _DoubleLinkedQueue_lastEntry$,
        'clear': _DoubleLinkedQueue_clear$,
        'toString': _DoubleLinkedQueue_toString$,
      },
      {},
    ),
    'ListQueue': m.ClassMirror(
      'ListQueue',
      {
        'iterator': _ListQueue_iterator$,
        'isEmpty': _ListQueue_isEmpty$,
        'length': _ListQueue_length$,
        'first': _ListQueue_first$,
        'last': _ListQueue_last$,
        'single': _ListQueue_single$,
        'cast': _ListQueue_cast$,
        'elementAt': _ListQueue_elementAt$,
        'toList': _ListQueue_toList$,
        'add': _ListQueue_add$,
        'addAll': _ListQueue_addAll$,
        'remove': _ListQueue_remove$,
        'clear': _ListQueue_clear$,
        'toString': _ListQueue_toString$,
        'addLast': _ListQueue_addLast$,
        'addFirst': _ListQueue_addFirst$,
        'removeFirst': _ListQueue_removeFirst$,
        'removeLast': _ListQueue_removeLast$,
      },
      {},
    ),
    'SetBase': m.ClassMirror(
      'SetBase',
      {
        'iterator': _SetBase_iterator$,
        'length': _SetBase_length$,
        'isEmpty': _SetBase_isEmpty$,
        'isNotEmpty': _SetBase_isNotEmpty$,
        'single': _SetBase_single$,
        'first': _SetBase_first$,
        'last': _SetBase_last$,
        'add': _SetBase_add$,
        'contains': _SetBase_contains$,
        'lookup': _SetBase_lookup$,
        'remove': _SetBase_remove$,
        'toSet': _SetBase_toSet$,
        'cast': _SetBase_cast$,
        'followedBy': _SetBase_followedBy$,
        'whereType': _SetBase_whereType$,
        'clear': _SetBase_clear$,
        'addAll': _SetBase_addAll$,
        'removeAll': _SetBase_removeAll$,
        'retainAll': _SetBase_retainAll$,
        'containsAll': _SetBase_containsAll$,
        'union': _SetBase_union$,
        'intersection': _SetBase_intersection$,
        'difference': _SetBase_difference$,
        'toList': _SetBase_toList$,
        'toString': _SetBase_toString$,
        'join': _SetBase_join$,
        'take': _SetBase_take$,
        'skip': _SetBase_skip$,
        'elementAt': _SetBase_elementAt$,
      },
      {},
    ),
    'UnmodifiableSetView': m.ClassMirror(
      'UnmodifiableSetView',
      {
        'length': _UnmodifiableSetView_length$,
        'iterator': _UnmodifiableSetView_iterator$,
        'contains': _UnmodifiableSetView_contains$,
        'lookup': _UnmodifiableSetView_lookup$,
        'toSet': _UnmodifiableSetView_toSet$,
      },
      {},
    ),
    'SplayTreeMap': m.ClassMirror(
      'SplayTreeMap',
      {
        'isEmpty': _SplayTreeMap_isEmpty$,
        'isNotEmpty': _SplayTreeMap_isNotEmpty$,
        'length': _SplayTreeMap_length$,
        'keys': _SplayTreeMap_keys$,
        'values': _SplayTreeMap_values$,
        'entries': _SplayTreeMap_entries$,
        'remove': _SplayTreeMap_remove$,
        'addAll': _SplayTreeMap_addAll$,
        'clear': _SplayTreeMap_clear$,
        'containsKey': _SplayTreeMap_containsKey$,
        'containsValue': _SplayTreeMap_containsValue$,
        'firstKey': _SplayTreeMap_firstKey$,
        'lastKey': _SplayTreeMap_lastKey$,
        'lastKeyBefore': _SplayTreeMap_lastKeyBefore$,
        'firstKeyAfter': _SplayTreeMap_firstKeyAfter$,
      },
      {},
    ),
    'SplayTreeSet': m.ClassMirror(
      'SplayTreeSet',
      {
        'iterator': _SplayTreeSet_iterator$,
        'length': _SplayTreeSet_length$,
        'isEmpty': _SplayTreeSet_isEmpty$,
        'isNotEmpty': _SplayTreeSet_isNotEmpty$,
        'first': _SplayTreeSet_first$,
        'last': _SplayTreeSet_last$,
        'single': _SplayTreeSet_single$,
        'cast': _SplayTreeSet_cast$,
        'contains': _SplayTreeSet_contains$,
        'add': _SplayTreeSet_add$,
        'remove': _SplayTreeSet_remove$,
        'addAll': _SplayTreeSet_addAll$,
        'removeAll': _SplayTreeSet_removeAll$,
        'retainAll': _SplayTreeSet_retainAll$,
        'lookup': _SplayTreeSet_lookup$,
        'intersection': _SplayTreeSet_intersection$,
        'difference': _SplayTreeSet_difference$,
        'union': _SplayTreeSet_union$,
        'clear': _SplayTreeSet_clear$,
        'toSet': _SplayTreeSet_toSet$,
        'toString': _SplayTreeSet_toString$,
      },
      {},
    ),
  },
);
int _UnmodifiableListView_length$<E>(UnmodifiableListView<E> target) {
  return target.length;
}

Function _UnmodifiableListView_cast$<E, R>(
  m.Scope scope,
  UnmodifiableListView<E> target,
) =>
    target.cast<R>;
Iterator<E> _HashSet_iterator$<E>(HashSet<E> target) {
  return target.iterator;
}

Iterator<E> _LinkedHashSet_iterator$<E>(LinkedHashSet<E> target) {
  return target.iterator;
}

Iterator<E> _LinkedList_iterator$<E extends LinkedListEntry<E>>(
    LinkedList<E> target) {
  return target.iterator;
}

int _LinkedList_length$<E extends LinkedListEntry<E>>(LinkedList<E> target) {
  return target.length;
}

E _LinkedList_first$<E extends LinkedListEntry<E>>(LinkedList<E> target) {
  return target.first;
}

E _LinkedList_last$<E extends LinkedListEntry<E>>(LinkedList<E> target) {
  return target.last;
}

E _LinkedList_single$<E extends LinkedListEntry<E>>(LinkedList<E> target) {
  return target.single;
}

bool _LinkedList_isEmpty$<E extends LinkedListEntry<E>>(LinkedList<E> target) {
  return target.isEmpty;
}

Function _LinkedList_addFirst$<E extends LinkedListEntry<E>>(
  m.Scope scope,
  LinkedList<E> target,
) =>
    target.addFirst;
Function _LinkedList_add$<E extends LinkedListEntry<E>>(
  m.Scope scope,
  LinkedList<E> target,
) =>
    target.add;
Function _LinkedList_addAll$<E extends LinkedListEntry<E>>(
  m.Scope scope,
  LinkedList<E> target,
) =>
    target.addAll;
Function _LinkedList_remove$<E extends LinkedListEntry<E>>(
  m.Scope scope,
  LinkedList<E> target,
) =>
    target.remove;
Function _LinkedList_contains$<E extends LinkedListEntry<E>>(
  m.Scope scope,
  LinkedList<E> target,
) =>
    target.contains;
Function _LinkedList_clear$<E extends LinkedListEntry<E>>(
  m.Scope scope,
  LinkedList<E> target,
) =>
    target.clear;
LinkedList<E>? _LinkedListEntry_list$<E extends LinkedListEntry<E>>(
    LinkedListEntry<E> target) {
  return target.list;
}

E? _LinkedListEntry_next$<E extends LinkedListEntry<E>>(
    LinkedListEntry<E> target) {
  return target.next;
}

E? _LinkedListEntry_previous$<E extends LinkedListEntry<E>>(
    LinkedListEntry<E> target) {
  return target.previous;
}

Function _LinkedListEntry_unlink$<E extends LinkedListEntry<E>>(
  m.Scope scope,
  LinkedListEntry<E> target,
) =>
    target.unlink;
Function _LinkedListEntry_insertAfter$<E extends LinkedListEntry<E>>(
  m.Scope scope,
  LinkedListEntry<E> target,
) =>
    target.insertAfter;
Function _LinkedListEntry_insertBefore$<E extends LinkedListEntry<E>>(
  m.Scope scope,
  LinkedListEntry<E> target,
) =>
    target.insertBefore;
Iterator<E> _ListBase_iterator$<E>(ListBase<E> target) {
  return target.iterator;
}

bool _ListBase_isEmpty$<E>(ListBase<E> target) {
  return target.isEmpty;
}

bool _ListBase_isNotEmpty$<E>(ListBase<E> target) {
  return target.isNotEmpty;
}

E _ListBase_first$<E>(ListBase<E> target) {
  return target.first;
}

void _ListBase_first_set$<E>(
  ListBase<E> target,
  E other,
) {
  target.first = other;
}

E _ListBase_last$<E>(ListBase<E> target) {
  return target.last;
}

void _ListBase_last_set$<E>(
  ListBase<E> target,
  E other,
) {
  target.last = other;
}

E _ListBase_single$<E>(ListBase<E> target) {
  return target.single;
}

Iterable<E> _ListBase_reversed$<E>(ListBase<E> target) {
  return target.reversed;
}

Function _ListBase_elementAt$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.elementAt;
Function _ListBase_followedBy$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.followedBy;
Function _ListBase_contains$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.contains;
Function _ListBase_join$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.join;
Function _ListBase_whereType$<E, T>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.whereType<T>;
Function _ListBase_skip$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.skip;
Function _ListBase_take$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.take;
Function _ListBase_toList$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.toList;
Function _ListBase_toSet$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.toSet;
Function _ListBase_add$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.add;
Function _ListBase_addAll$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.addAll;
Function _ListBase_remove$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.remove;
Function _ListBase_clear$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.clear;
Function _ListBase_cast$<E, R>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.cast<R>;
Function _ListBase_removeLast$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.removeLast;
Function _ListBase_shuffle$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.shuffle;
Function _ListBase_asMap$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.asMap;
Function _ListBase_sublist$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.sublist;
Function _ListBase_getRange$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.getRange;
Function _ListBase_removeRange$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.removeRange;
Function _ListBase_fillRange$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.fillRange;
Function _ListBase_setRange$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.setRange;
Function _ListBase_replaceRange$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.replaceRange;
Function _ListBase_indexOf$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.indexOf;
Function _ListBase_lastIndexOf$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.lastIndexOf;
Function _ListBase_insert$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.insert;
Function _ListBase_removeAt$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.removeAt;
Function _ListBase_insertAll$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.insertAll;
Function _ListBase_setAll$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.setAll;
Function _ListBase_toString$<E>(
  m.Scope scope,
  ListBase<E> target,
) =>
    target.toString;
Function _ListBase_listToString$(m.Scope scope) => ListBase.listToString;
Iterable<K> _MapBase_keys$<K, V>(MapBase<K, V> target) {
  return target.keys;
}

Iterable<MapEntry<K, V>> _MapBase_entries$<K, V>(MapBase<K, V> target) {
  return target.entries;
}

int _MapBase_length$<K, V>(MapBase<K, V> target) {
  return target.length;
}

bool _MapBase_isEmpty$<K, V>(MapBase<K, V> target) {
  return target.isEmpty;
}

bool _MapBase_isNotEmpty$<K, V>(MapBase<K, V> target) {
  return target.isNotEmpty;
}

Iterable<V> _MapBase_values$<K, V>(MapBase<K, V> target) {
  return target.values;
}

Function _MapBase_remove$<K, V>(
  m.Scope scope,
  MapBase<K, V> target,
) =>
    target.remove;
Function _MapBase_clear$<K, V>(
  m.Scope scope,
  MapBase<K, V> target,
) =>
    target.clear;
Function _MapBase_cast$<K, V, RK, RV>(
  m.Scope scope,
  MapBase<K, V> target,
) =>
    target.cast<RK, RV>;
Function _MapBase_addAll$<K, V>(
  m.Scope scope,
  MapBase<K, V> target,
) =>
    target.addAll;
Function _MapBase_containsValue$<K, V>(
  m.Scope scope,
  MapBase<K, V> target,
) =>
    target.containsValue;
Function _MapBase_addEntries$<K, V>(
  m.Scope scope,
  MapBase<K, V> target,
) =>
    target.addEntries;
Function _MapBase_containsKey$<K, V>(
  m.Scope scope,
  MapBase<K, V> target,
) =>
    target.containsKey;
Function _MapBase_toString$<K, V>(
  m.Scope scope,
  MapBase<K, V> target,
) =>
    target.toString;
Function _MapBase_mapToString$(m.Scope scope) => MapBase.mapToString;
bool _MapView_isEmpty$<K, V>(MapView<K, V> target) {
  return target.isEmpty;
}

bool _MapView_isNotEmpty$<K, V>(MapView<K, V> target) {
  return target.isNotEmpty;
}

int _MapView_length$<K, V>(MapView<K, V> target) {
  return target.length;
}

Iterable<K> _MapView_keys$<K, V>(MapView<K, V> target) {
  return target.keys;
}

Iterable<V> _MapView_values$<K, V>(MapView<K, V> target) {
  return target.values;
}

Iterable<MapEntry<K, V>> _MapView_entries$<K, V>(MapView<K, V> target) {
  return target.entries;
}

Function _MapView_cast$<K, V, RK, RV>(
  m.Scope scope,
  MapView<K, V> target,
) =>
    target.cast<RK, RV>;
Function _MapView_addAll$<K, V>(
  m.Scope scope,
  MapView<K, V> target,
) =>
    target.addAll;
Function _MapView_clear$<K, V>(
  m.Scope scope,
  MapView<K, V> target,
) =>
    target.clear;
Function _MapView_containsKey$<K, V>(
  m.Scope scope,
  MapView<K, V> target,
) =>
    target.containsKey;
Function _MapView_containsValue$<K, V>(
  m.Scope scope,
  MapView<K, V> target,
) =>
    target.containsValue;
Function _MapView_remove$<K, V>(
  m.Scope scope,
  MapView<K, V> target,
) =>
    target.remove;
Function _MapView_toString$<K, V>(
  m.Scope scope,
  MapView<K, V> target,
) =>
    target.toString;
Function _MapView_addEntries$<K, V>(
  m.Scope scope,
  MapView<K, V> target,
) =>
    target.addEntries;
Function _UnmodifiableMapView_cast$<K, V, RK, RV>(
  m.Scope scope,
  UnmodifiableMapView<K, V> target,
) =>
    target.cast<RK, RV>;
Function _Queue_castFrom$<S, T>(m.Scope scope) => Queue.castFrom<S, T>;
Function _Queue_cast$<E, R>(
  m.Scope scope,
  Queue<E> target,
) =>
    target.cast<R>;
Function _Queue_removeFirst$<E>(
  m.Scope scope,
  Queue<E> target,
) =>
    target.removeFirst;
Function _Queue_removeLast$<E>(
  m.Scope scope,
  Queue<E> target,
) =>
    target.removeLast;
Function _Queue_addFirst$<E>(
  m.Scope scope,
  Queue<E> target,
) =>
    target.addFirst;
Function _Queue_addLast$<E>(
  m.Scope scope,
  Queue<E> target,
) =>
    target.addLast;
Function _Queue_add$<E>(
  m.Scope scope,
  Queue<E> target,
) =>
    target.add;
Function _Queue_remove$<E>(
  m.Scope scope,
  Queue<E> target,
) =>
    target.remove;
Function _Queue_addAll$<E>(
  m.Scope scope,
  Queue<E> target,
) =>
    target.addAll;
Function _Queue_clear$<E>(
  m.Scope scope,
  Queue<E> target,
) =>
    target.clear;
int _DoubleLinkedQueue_length$<E>(DoubleLinkedQueue<E> target) {
  return target.length;
}

E _DoubleLinkedQueue_first$<E>(DoubleLinkedQueue<E> target) {
  return target.first;
}

E _DoubleLinkedQueue_last$<E>(DoubleLinkedQueue<E> target) {
  return target.last;
}

E _DoubleLinkedQueue_single$<E>(DoubleLinkedQueue<E> target) {
  return target.single;
}

bool _DoubleLinkedQueue_isEmpty$<E>(DoubleLinkedQueue<E> target) {
  return target.isEmpty;
}

dynamic _DoubleLinkedQueue_iterator$<E>(DoubleLinkedQueue<E> target) {
  return target.iterator;
}

Function _DoubleLinkedQueue_cast$<E, R>(
  m.Scope scope,
  DoubleLinkedQueue<E> target,
) =>
    target.cast<R>;
Function _DoubleLinkedQueue_addLast$<E>(
  m.Scope scope,
  DoubleLinkedQueue<E> target,
) =>
    target.addLast;
Function _DoubleLinkedQueue_addFirst$<E>(
  m.Scope scope,
  DoubleLinkedQueue<E> target,
) =>
    target.addFirst;
Function _DoubleLinkedQueue_add$<E>(
  m.Scope scope,
  DoubleLinkedQueue<E> target,
) =>
    target.add;
Function _DoubleLinkedQueue_addAll$<E>(
  m.Scope scope,
  DoubleLinkedQueue<E> target,
) =>
    target.addAll;
Function _DoubleLinkedQueue_removeLast$<E>(
  m.Scope scope,
  DoubleLinkedQueue<E> target,
) =>
    target.removeLast;
Function _DoubleLinkedQueue_removeFirst$<E>(
  m.Scope scope,
  DoubleLinkedQueue<E> target,
) =>
    target.removeFirst;
Function _DoubleLinkedQueue_remove$<E>(
  m.Scope scope,
  DoubleLinkedQueue<E> target,
) =>
    target.remove;
Function _DoubleLinkedQueue_firstEntry$<E>(
  m.Scope scope,
  DoubleLinkedQueue<E> target,
) =>
    target.firstEntry;
Function _DoubleLinkedQueue_lastEntry$<E>(
  m.Scope scope,
  DoubleLinkedQueue<E> target,
) =>
    target.lastEntry;
Function _DoubleLinkedQueue_clear$<E>(
  m.Scope scope,
  DoubleLinkedQueue<E> target,
) =>
    target.clear;
Function _DoubleLinkedQueue_toString$<E>(
  m.Scope scope,
  DoubleLinkedQueue<E> target,
) =>
    target.toString;
Iterator<E> _ListQueue_iterator$<E>(ListQueue<E> target) {
  return target.iterator;
}

bool _ListQueue_isEmpty$<E>(ListQueue<E> target) {
  return target.isEmpty;
}

int _ListQueue_length$<E>(ListQueue<E> target) {
  return target.length;
}

E _ListQueue_first$<E>(ListQueue<E> target) {
  return target.first;
}

E _ListQueue_last$<E>(ListQueue<E> target) {
  return target.last;
}

E _ListQueue_single$<E>(ListQueue<E> target) {
  return target.single;
}

Function _ListQueue_cast$<E, R>(
  m.Scope scope,
  ListQueue<E> target,
) =>
    target.cast<R>;
Function _ListQueue_elementAt$<E>(
  m.Scope scope,
  ListQueue<E> target,
) =>
    target.elementAt;
Function _ListQueue_toList$<E>(
  m.Scope scope,
  ListQueue<E> target,
) =>
    target.toList;
Function _ListQueue_add$<E>(
  m.Scope scope,
  ListQueue<E> target,
) =>
    target.add;
Function _ListQueue_addAll$<E>(
  m.Scope scope,
  ListQueue<E> target,
) =>
    target.addAll;
Function _ListQueue_remove$<E>(
  m.Scope scope,
  ListQueue<E> target,
) =>
    target.remove;
Function _ListQueue_clear$<E>(
  m.Scope scope,
  ListQueue<E> target,
) =>
    target.clear;
Function _ListQueue_toString$<E>(
  m.Scope scope,
  ListQueue<E> target,
) =>
    target.toString;
Function _ListQueue_addLast$<E>(
  m.Scope scope,
  ListQueue<E> target,
) =>
    target.addLast;
Function _ListQueue_addFirst$<E>(
  m.Scope scope,
  ListQueue<E> target,
) =>
    target.addFirst;
Function _ListQueue_removeFirst$<E>(
  m.Scope scope,
  ListQueue<E> target,
) =>
    target.removeFirst;
Function _ListQueue_removeLast$<E>(
  m.Scope scope,
  ListQueue<E> target,
) =>
    target.removeLast;
Iterator<E> _SetBase_iterator$<E>(SetBase<E> target) {
  return target.iterator;
}

int _SetBase_length$<E>(SetBase<E> target) {
  return target.length;
}

bool _SetBase_isEmpty$<E>(SetBase<E> target) {
  return target.isEmpty;
}

bool _SetBase_isNotEmpty$<E>(SetBase<E> target) {
  return target.isNotEmpty;
}

E _SetBase_single$<E>(SetBase<E> target) {
  return target.single;
}

E _SetBase_first$<E>(SetBase<E> target) {
  return target.first;
}

E _SetBase_last$<E>(SetBase<E> target) {
  return target.last;
}

Function _SetBase_add$<E>(
  m.Scope scope,
  SetBase<E> target,
) =>
    target.add;
Function _SetBase_contains$<E>(
  m.Scope scope,
  SetBase<E> target,
) =>
    target.contains;
Function _SetBase_lookup$<E>(
  m.Scope scope,
  SetBase<E> target,
) =>
    target.lookup;
Function _SetBase_remove$<E>(
  m.Scope scope,
  SetBase<E> target,
) =>
    target.remove;
Function _SetBase_toSet$<E>(
  m.Scope scope,
  SetBase<E> target,
) =>
    target.toSet;
Function _SetBase_cast$<E, R>(
  m.Scope scope,
  SetBase<E> target,
) =>
    target.cast<R>;
Function _SetBase_followedBy$<E>(
  m.Scope scope,
  SetBase<E> target,
) =>
    target.followedBy;
Function _SetBase_whereType$<E, T>(
  m.Scope scope,
  SetBase<E> target,
) =>
    target.whereType<T>;
Function _SetBase_clear$<E>(
  m.Scope scope,
  SetBase<E> target,
) =>
    target.clear;
Function _SetBase_addAll$<E>(
  m.Scope scope,
  SetBase<E> target,
) =>
    target.addAll;
Function _SetBase_removeAll$<E>(
  m.Scope scope,
  SetBase<E> target,
) =>
    target.removeAll;
Function _SetBase_retainAll$<E>(
  m.Scope scope,
  SetBase<E> target,
) =>
    target.retainAll;
Function _SetBase_containsAll$<E>(
  m.Scope scope,
  SetBase<E> target,
) =>
    target.containsAll;
Function _SetBase_union$<E>(
  m.Scope scope,
  SetBase<E> target,
) =>
    target.union;
Function _SetBase_intersection$<E>(
  m.Scope scope,
  SetBase<E> target,
) =>
    target.intersection;
Function _SetBase_difference$<E>(
  m.Scope scope,
  SetBase<E> target,
) =>
    target.difference;
Function _SetBase_toList$<E>(
  m.Scope scope,
  SetBase<E> target,
) =>
    target.toList;
Function _SetBase_toString$<E>(
  m.Scope scope,
  SetBase<E> target,
) =>
    target.toString;
Function _SetBase_join$<E>(
  m.Scope scope,
  SetBase<E> target,
) =>
    target.join;
Function _SetBase_take$<E>(
  m.Scope scope,
  SetBase<E> target,
) =>
    target.take;
Function _SetBase_skip$<E>(
  m.Scope scope,
  SetBase<E> target,
) =>
    target.skip;
Function _SetBase_elementAt$<E>(
  m.Scope scope,
  SetBase<E> target,
) =>
    target.elementAt;
Function _SetBase_setToString$(m.Scope scope) => SetBase.setToString;
int _UnmodifiableSetView_length$<E>(UnmodifiableSetView<E> target) {
  return target.length;
}

Iterator<E> _UnmodifiableSetView_iterator$<E>(UnmodifiableSetView<E> target) {
  return target.iterator;
}

Function _UnmodifiableSetView_contains$<E>(
  m.Scope scope,
  UnmodifiableSetView<E> target,
) =>
    target.contains;
Function _UnmodifiableSetView_lookup$<E>(
  m.Scope scope,
  UnmodifiableSetView<E> target,
) =>
    target.lookup;
Function _UnmodifiableSetView_toSet$<E>(
  m.Scope scope,
  UnmodifiableSetView<E> target,
) =>
    target.toSet;
bool _SplayTreeMap_isEmpty$<K, V>(SplayTreeMap<K, V> target) {
  return target.isEmpty;
}

bool _SplayTreeMap_isNotEmpty$<K, V>(SplayTreeMap<K, V> target) {
  return target.isNotEmpty;
}

int _SplayTreeMap_length$<K, V>(SplayTreeMap<K, V> target) {
  return target.length;
}

Iterable<K> _SplayTreeMap_keys$<K, V>(SplayTreeMap<K, V> target) {
  return target.keys;
}

Iterable<V> _SplayTreeMap_values$<K, V>(SplayTreeMap<K, V> target) {
  return target.values;
}

Iterable<MapEntry<K, V>> _SplayTreeMap_entries$<K, V>(
    SplayTreeMap<K, V> target) {
  return target.entries;
}

Function _SplayTreeMap_remove$<K, V>(
  m.Scope scope,
  SplayTreeMap<K, V> target,
) =>
    target.remove;
Function _SplayTreeMap_addAll$<K, V>(
  m.Scope scope,
  SplayTreeMap<K, V> target,
) =>
    target.addAll;
Function _SplayTreeMap_clear$<K, V>(
  m.Scope scope,
  SplayTreeMap<K, V> target,
) =>
    target.clear;
Function _SplayTreeMap_containsKey$<K, V>(
  m.Scope scope,
  SplayTreeMap<K, V> target,
) =>
    target.containsKey;
Function _SplayTreeMap_containsValue$<K, V>(
  m.Scope scope,
  SplayTreeMap<K, V> target,
) =>
    target.containsValue;
Function _SplayTreeMap_firstKey$<K, V>(
  m.Scope scope,
  SplayTreeMap<K, V> target,
) =>
    target.firstKey;
Function _SplayTreeMap_lastKey$<K, V>(
  m.Scope scope,
  SplayTreeMap<K, V> target,
) =>
    target.lastKey;
Function _SplayTreeMap_lastKeyBefore$<K, V>(
  m.Scope scope,
  SplayTreeMap<K, V> target,
) =>
    target.lastKeyBefore;
Function _SplayTreeMap_firstKeyAfter$<K, V>(
  m.Scope scope,
  SplayTreeMap<K, V> target,
) =>
    target.firstKeyAfter;
Iterator<E> _SplayTreeSet_iterator$<E>(SplayTreeSet<E> target) {
  return target.iterator;
}

int _SplayTreeSet_length$<E>(SplayTreeSet<E> target) {
  return target.length;
}

bool _SplayTreeSet_isEmpty$<E>(SplayTreeSet<E> target) {
  return target.isEmpty;
}

bool _SplayTreeSet_isNotEmpty$<E>(SplayTreeSet<E> target) {
  return target.isNotEmpty;
}

E _SplayTreeSet_first$<E>(SplayTreeSet<E> target) {
  return target.first;
}

E _SplayTreeSet_last$<E>(SplayTreeSet<E> target) {
  return target.last;
}

E _SplayTreeSet_single$<E>(SplayTreeSet<E> target) {
  return target.single;
}

Function _SplayTreeSet_cast$<E, R>(
  m.Scope scope,
  SplayTreeSet<E> target,
) =>
    target.cast<R>;
Function _SplayTreeSet_contains$<E>(
  m.Scope scope,
  SplayTreeSet<E> target,
) =>
    target.contains;
Function _SplayTreeSet_add$<E>(
  m.Scope scope,
  SplayTreeSet<E> target,
) =>
    target.add;
Function _SplayTreeSet_remove$<E>(
  m.Scope scope,
  SplayTreeSet<E> target,
) =>
    target.remove;
Function _SplayTreeSet_addAll$<E>(
  m.Scope scope,
  SplayTreeSet<E> target,
) =>
    target.addAll;
Function _SplayTreeSet_removeAll$<E>(
  m.Scope scope,
  SplayTreeSet<E> target,
) =>
    target.removeAll;
Function _SplayTreeSet_retainAll$<E>(
  m.Scope scope,
  SplayTreeSet<E> target,
) =>
    target.retainAll;
Function _SplayTreeSet_lookup$<E>(
  m.Scope scope,
  SplayTreeSet<E> target,
) =>
    target.lookup;
Function _SplayTreeSet_intersection$<E>(
  m.Scope scope,
  SplayTreeSet<E> target,
) =>
    target.intersection;
Function _SplayTreeSet_difference$<E>(
  m.Scope scope,
  SplayTreeSet<E> target,
) =>
    target.difference;
Function _SplayTreeSet_union$<E>(
  m.Scope scope,
  SplayTreeSet<E> target,
) =>
    target.union;
Function _SplayTreeSet_clear$<E>(
  m.Scope scope,
  SplayTreeSet<E> target,
) =>
    target.clear;
Function _SplayTreeSet_toSet$<E>(
  m.Scope scope,
  SplayTreeSet<E> target,
) =>
    target.toSet;
Function _SplayTreeSet_toString$<E>(
  m.Scope scope,
  SplayTreeSet<E> target,
) =>
    target.toString;
