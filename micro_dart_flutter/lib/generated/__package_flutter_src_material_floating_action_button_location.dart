// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/floating_action_button_location.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/scaffold.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/floating_action_button_location.dart',
  {
    'kFloatingActionButtonMargin': _kFloatingActionButtonMargin$,
    'kFloatingActionButtonSegue': _kFloatingActionButtonSegue$,
    'kFloatingActionButtonTurnInterval': _kFloatingActionButtonTurnInterval$,
    'kMiniButtonOffsetAdjustment': _kMiniButtonOffsetAdjustment$,
    'FloatingActionButtonLocation.startTop':
        _FloatingActionButtonLocation_startTop$,
    'FloatingActionButtonLocation.miniStartTop':
        _FloatingActionButtonLocation_miniStartTop$,
    'FloatingActionButtonLocation.centerTop':
        _FloatingActionButtonLocation_centerTop$,
    'FloatingActionButtonLocation.miniCenterTop':
        _FloatingActionButtonLocation_miniCenterTop$,
    'FloatingActionButtonLocation.endTop':
        _FloatingActionButtonLocation_endTop$,
    'FloatingActionButtonLocation.miniEndTop':
        _FloatingActionButtonLocation_miniEndTop$,
    'FloatingActionButtonLocation.startFloat':
        _FloatingActionButtonLocation_startFloat$,
    'FloatingActionButtonLocation.miniStartFloat':
        _FloatingActionButtonLocation_miniStartFloat$,
    'FloatingActionButtonLocation.centerFloat':
        _FloatingActionButtonLocation_centerFloat$,
    'FloatingActionButtonLocation.miniCenterFloat':
        _FloatingActionButtonLocation_miniCenterFloat$,
    'FloatingActionButtonLocation.endFloat':
        _FloatingActionButtonLocation_endFloat$,
    'FloatingActionButtonLocation.miniEndFloat':
        _FloatingActionButtonLocation_miniEndFloat$,
    'FloatingActionButtonLocation.startDocked':
        _FloatingActionButtonLocation_startDocked$,
    'FloatingActionButtonLocation.miniStartDocked':
        _FloatingActionButtonLocation_miniStartDocked$,
    'FloatingActionButtonLocation.centerDocked':
        _FloatingActionButtonLocation_centerDocked$,
    'FloatingActionButtonLocation.miniCenterDocked':
        _FloatingActionButtonLocation_miniCenterDocked$,
    'FloatingActionButtonLocation.endDocked':
        _FloatingActionButtonLocation_endDocked$,
    'FloatingActionButtonLocation.miniEndDocked':
        _FloatingActionButtonLocation_miniEndDocked$,
    'FloatingActionButtonLocation.endContained':
        _FloatingActionButtonLocation_endContained$,
    'FloatingActionButtonAnimator.scaling':
        _FloatingActionButtonAnimator_scaling$,
  },
  {},
  {
    'FloatingActionButtonLocation': m.ClassMirror(
      'FloatingActionButtonLocation',
      {
        '#as': FloatingActionButtonLocation_as$,
        '#is': FloatingActionButtonLocation_is$,
        'getOffset': _FloatingActionButtonLocation_getOffset$,
        'toString': _FloatingActionButtonLocation_toString$,
      },
      {},
    ),
    'StandardFabLocation': m.ClassMirror(
      'StandardFabLocation',
      {
        '#as': StandardFabLocation_as$,
        '#is': StandardFabLocation_is$,
        'getOffsetX': _StandardFabLocation_getOffsetX$,
        'getOffsetY': _StandardFabLocation_getOffsetY$,
        'isMini': _StandardFabLocation_isMini$,
        'getOffset': _StandardFabLocation_getOffset$,
      },
      {},
    ),
    'FloatingActionButtonAnimator': m.ClassMirror(
      'FloatingActionButtonAnimator',
      {
        '#as': FloatingActionButtonAnimator_as$,
        '#is': FloatingActionButtonAnimator_is$,
        'getOffset': _FloatingActionButtonAnimator_getOffset$,
        'getScaleAnimation': _FloatingActionButtonAnimator_getScaleAnimation$,
        'getRotationAnimation':
            _FloatingActionButtonAnimator_getRotationAnimation$,
        'getAnimationRestart':
            _FloatingActionButtonAnimator_getAnimationRestart$,
        'toString': _FloatingActionButtonAnimator_toString$,
      },
      {},
    ),
  },
);
double _kFloatingActionButtonMargin$() {
  return kFloatingActionButtonMargin;
}

Duration _kFloatingActionButtonSegue$() {
  return kFloatingActionButtonSegue;
}

double _kFloatingActionButtonTurnInterval$() {
  return kFloatingActionButtonTurnInterval;
}

double _kMiniButtonOffsetAdjustment$() {
  return kMiniButtonOffsetAdjustment;
}

Function FloatingActionButtonLocation_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as FloatingActionButtonLocation;
Function FloatingActionButtonLocation_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is FloatingActionButtonLocation;
FloatingActionButtonLocation _FloatingActionButtonLocation_startTop$() {
  return FloatingActionButtonLocation.startTop;
}

FloatingActionButtonLocation _FloatingActionButtonLocation_miniStartTop$() {
  return FloatingActionButtonLocation.miniStartTop;
}

FloatingActionButtonLocation _FloatingActionButtonLocation_centerTop$() {
  return FloatingActionButtonLocation.centerTop;
}

FloatingActionButtonLocation _FloatingActionButtonLocation_miniCenterTop$() {
  return FloatingActionButtonLocation.miniCenterTop;
}

FloatingActionButtonLocation _FloatingActionButtonLocation_endTop$() {
  return FloatingActionButtonLocation.endTop;
}

FloatingActionButtonLocation _FloatingActionButtonLocation_miniEndTop$() {
  return FloatingActionButtonLocation.miniEndTop;
}

FloatingActionButtonLocation _FloatingActionButtonLocation_startFloat$() {
  return FloatingActionButtonLocation.startFloat;
}

FloatingActionButtonLocation _FloatingActionButtonLocation_miniStartFloat$() {
  return FloatingActionButtonLocation.miniStartFloat;
}

FloatingActionButtonLocation _FloatingActionButtonLocation_centerFloat$() {
  return FloatingActionButtonLocation.centerFloat;
}

FloatingActionButtonLocation _FloatingActionButtonLocation_miniCenterFloat$() {
  return FloatingActionButtonLocation.miniCenterFloat;
}

FloatingActionButtonLocation _FloatingActionButtonLocation_endFloat$() {
  return FloatingActionButtonLocation.endFloat;
}

FloatingActionButtonLocation _FloatingActionButtonLocation_miniEndFloat$() {
  return FloatingActionButtonLocation.miniEndFloat;
}

FloatingActionButtonLocation _FloatingActionButtonLocation_startDocked$() {
  return FloatingActionButtonLocation.startDocked;
}

FloatingActionButtonLocation _FloatingActionButtonLocation_miniStartDocked$() {
  return FloatingActionButtonLocation.miniStartDocked;
}

FloatingActionButtonLocation _FloatingActionButtonLocation_centerDocked$() {
  return FloatingActionButtonLocation.centerDocked;
}

FloatingActionButtonLocation _FloatingActionButtonLocation_miniCenterDocked$() {
  return FloatingActionButtonLocation.miniCenterDocked;
}

FloatingActionButtonLocation _FloatingActionButtonLocation_endDocked$() {
  return FloatingActionButtonLocation.endDocked;
}

FloatingActionButtonLocation _FloatingActionButtonLocation_miniEndDocked$() {
  return FloatingActionButtonLocation.miniEndDocked;
}

FloatingActionButtonLocation _FloatingActionButtonLocation_endContained$() {
  return FloatingActionButtonLocation.endContained;
}

Function _FloatingActionButtonLocation_getOffset$(
  m.Scope scope,
  FloatingActionButtonLocation target,
) =>
    target.getOffset;
Function _FloatingActionButtonLocation_toString$(
  m.Scope scope,
  FloatingActionButtonLocation target,
) =>
    target.toString;
Function StandardFabLocation_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as StandardFabLocation;
Function StandardFabLocation_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is StandardFabLocation;
Function _StandardFabLocation_getOffsetX$(
  m.Scope scope,
  StandardFabLocation target,
) =>
    target.getOffsetX;
Function _StandardFabLocation_getOffsetY$(
  m.Scope scope,
  StandardFabLocation target,
) =>
    target.getOffsetY;
Function _StandardFabLocation_isMini$(
  m.Scope scope,
  StandardFabLocation target,
) =>
    target.isMini;
Function _StandardFabLocation_getOffset$(
  m.Scope scope,
  StandardFabLocation target,
) =>
    target.getOffset;
Function FloatingActionButtonAnimator_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as FloatingActionButtonAnimator;
Function FloatingActionButtonAnimator_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is FloatingActionButtonAnimator;
FloatingActionButtonAnimator _FloatingActionButtonAnimator_scaling$() {
  return FloatingActionButtonAnimator.scaling;
}

Function _FloatingActionButtonAnimator_getOffset$(
  m.Scope scope,
  FloatingActionButtonAnimator target,
) =>
    target.getOffset;
Function _FloatingActionButtonAnimator_getScaleAnimation$(
  m.Scope scope,
  FloatingActionButtonAnimator target,
) =>
    target.getScaleAnimation;
Function _FloatingActionButtonAnimator_getRotationAnimation$(
  m.Scope scope,
  FloatingActionButtonAnimator target,
) =>
    target.getRotationAnimation;
Function _FloatingActionButtonAnimator_getAnimationRestart$(
  m.Scope scope,
  FloatingActionButtonAnimator target,
) =>
    target.getAnimationRestart;
Function _FloatingActionButtonAnimator_toString$(
  m.Scope scope,
  FloatingActionButtonAnimator target,
) =>
    target.toString;
