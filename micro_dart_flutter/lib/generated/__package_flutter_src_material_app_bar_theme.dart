// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/app_bar_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/app_bar_theme.dart',
  {
    'AppBarTheme.of': _AppBarTheme_of$,
    'AppBarTheme.lerp': _AppBarTheme_lerp$,
  },
  {},
  {
    'AppBarTheme': m.ClassMirror(
      'AppBarTheme',
      {
        'backgroundColor': _AppBarTheme_backgroundColor$,
        'foregroundColor': _AppBarTheme_foregroundColor$,
        'elevation': _AppBarTheme_elevation$,
        'scrolledUnderElevation': _AppBarTheme_scrolledUnderElevation$,
        'shadowColor': _AppBarTheme_shadowColor$,
        'surfaceTintColor': _AppBarTheme_surfaceTintColor$,
        'shape': _AppBarTheme_shape$,
        'iconTheme': _AppBarTheme_iconTheme$,
        'actionsIconTheme': _AppBarTheme_actionsIconTheme$,
        'centerTitle': _AppBarTheme_centerTitle$,
        'titleSpacing': _AppBarTheme_titleSpacing$,
        'toolbarHeight': _AppBarTheme_toolbarHeight$,
        'toolbarTextStyle': _AppBarTheme_toolbarTextStyle$,
        'titleTextStyle': _AppBarTheme_titleTextStyle$,
        'systemOverlayStyle': _AppBarTheme_systemOverlayStyle$,
        'hashCode': _AppBarTheme_hashCode$,
        'copyWith': _AppBarTheme_copyWith$,
        'debugFillProperties': _AppBarTheme_debugFillProperties$,
      },
      {},
    )
  },
);
Color? _AppBarTheme_backgroundColor$(AppBarTheme target) {
  return target.backgroundColor;
}

Color? _AppBarTheme_foregroundColor$(AppBarTheme target) {
  return target.foregroundColor;
}

double? _AppBarTheme_elevation$(AppBarTheme target) {
  return target.elevation;
}

double? _AppBarTheme_scrolledUnderElevation$(AppBarTheme target) {
  return target.scrolledUnderElevation;
}

Color? _AppBarTheme_shadowColor$(AppBarTheme target) {
  return target.shadowColor;
}

Color? _AppBarTheme_surfaceTintColor$(AppBarTheme target) {
  return target.surfaceTintColor;
}

ShapeBorder? _AppBarTheme_shape$(AppBarTheme target) {
  return target.shape;
}

IconThemeData? _AppBarTheme_iconTheme$(AppBarTheme target) {
  return target.iconTheme;
}

IconThemeData? _AppBarTheme_actionsIconTheme$(AppBarTheme target) {
  return target.actionsIconTheme;
}

bool? _AppBarTheme_centerTitle$(AppBarTheme target) {
  return target.centerTitle;
}

double? _AppBarTheme_titleSpacing$(AppBarTheme target) {
  return target.titleSpacing;
}

double? _AppBarTheme_toolbarHeight$(AppBarTheme target) {
  return target.toolbarHeight;
}

TextStyle? _AppBarTheme_toolbarTextStyle$(AppBarTheme target) {
  return target.toolbarTextStyle;
}

TextStyle? _AppBarTheme_titleTextStyle$(AppBarTheme target) {
  return target.titleTextStyle;
}

SystemUiOverlayStyle? _AppBarTheme_systemOverlayStyle$(AppBarTheme target) {
  return target.systemOverlayStyle;
}

int _AppBarTheme_hashCode$(AppBarTheme target) {
  return target.hashCode;
}

Function _AppBarTheme_copyWith$(
  m.Scope scope,
  AppBarTheme target,
) =>
    target.copyWith;
Function _AppBarTheme_of$(m.Scope scope) => AppBarTheme.of;
Function _AppBarTheme_lerp$(m.Scope scope) => AppBarTheme.lerp;
Function _AppBarTheme_debugFillProperties$(
  m.Scope scope,
  AppBarTheme target,
) =>
    target.debugFillProperties;
