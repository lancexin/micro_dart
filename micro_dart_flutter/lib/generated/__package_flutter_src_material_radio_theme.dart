// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/radio_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/radio_theme.dart',
  {
    'RadioThemeData.lerp': _RadioThemeData_lerp$,
    'RadioTheme.of': _RadioTheme_of$,
  },
  {},
  {
    'RadioThemeData': m.ClassMirror(
      'RadioThemeData',
      {
        '#as': RadioThemeData_as$,
        '#is': RadioThemeData_is$,
        'mouseCursor': _RadioThemeData_mouseCursor$,
        'fillColor': _RadioThemeData_fillColor$,
        'overlayColor': _RadioThemeData_overlayColor$,
        'splashRadius': _RadioThemeData_splashRadius$,
        'materialTapTargetSize': _RadioThemeData_materialTapTargetSize$,
        'visualDensity': _RadioThemeData_visualDensity$,
        'hashCode': _RadioThemeData_hashCode$,
        'copyWith': _RadioThemeData_copyWith$,
        '==': _RadioThemeData_eq$$,
        'debugFillProperties': _RadioThemeData_debugFillProperties$,
      },
      {},
    ),
    'RadioTheme': m.ClassMirror(
      'RadioTheme',
      {
        '#as': RadioTheme_as$,
        '#is': RadioTheme_is$,
        'data': _RadioTheme_data$,
        'updateShouldNotify': _RadioTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function RadioThemeData_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RadioThemeData;
Function RadioThemeData_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RadioThemeData;
MaterialStateProperty<MouseCursor?>? _RadioThemeData_mouseCursor$(
    RadioThemeData target) {
  return target.mouseCursor;
}

MaterialStateProperty<Color?>? _RadioThemeData_fillColor$(
    RadioThemeData target) {
  return target.fillColor;
}

MaterialStateProperty<Color?>? _RadioThemeData_overlayColor$(
    RadioThemeData target) {
  return target.overlayColor;
}

double? _RadioThemeData_splashRadius$(RadioThemeData target) {
  return target.splashRadius;
}

MaterialTapTargetSize? _RadioThemeData_materialTapTargetSize$(
    RadioThemeData target) {
  return target.materialTapTargetSize;
}

VisualDensity? _RadioThemeData_visualDensity$(RadioThemeData target) {
  return target.visualDensity;
}

int _RadioThemeData_hashCode$(RadioThemeData target) {
  return target.hashCode;
}

Function _RadioThemeData_copyWith$(
  m.Scope scope,
  RadioThemeData target,
) =>
    target.copyWith;
Function _RadioThemeData_lerp$(m.Scope scope) => RadioThemeData.lerp;
Function _RadioThemeData_eq$$(
  m.Scope scope,
  RadioThemeData target,
) =>
    (Object other) => target == other;
Function _RadioThemeData_debugFillProperties$(
  m.Scope scope,
  RadioThemeData target,
) =>
    target.debugFillProperties;
Function RadioTheme_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RadioTheme;
Function RadioTheme_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RadioTheme;
RadioThemeData _RadioTheme_data$(RadioTheme target) {
  return target.data;
}

Function _RadioTheme_of$(m.Scope scope) => RadioTheme.of;
Function _RadioTheme_updateShouldNotify$(
  m.Scope scope,
  RadioTheme target,
) =>
    target.updateShouldNotify;
