// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/data_table_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/data_table_theme.dart',
  {
    'DataTableThemeData.lerp': _DataTableThemeData_lerp$,
    'DataTableTheme.of': _DataTableTheme_of$,
  },
  {},
  {
    'DataTableThemeData': m.ClassMirror(
      'DataTableThemeData',
      {
        '#as': DataTableThemeData_as$,
        '#is': DataTableThemeData_is$,
        'decoration': _DataTableThemeData_decoration$,
        'dataRowColor': _DataTableThemeData_dataRowColor$,
        'dataRowMinHeight': _DataTableThemeData_dataRowMinHeight$,
        'dataRowMaxHeight': _DataTableThemeData_dataRowMaxHeight$,
        'dataTextStyle': _DataTableThemeData_dataTextStyle$,
        'headingRowColor': _DataTableThemeData_headingRowColor$,
        'headingRowHeight': _DataTableThemeData_headingRowHeight$,
        'headingTextStyle': _DataTableThemeData_headingTextStyle$,
        'horizontalMargin': _DataTableThemeData_horizontalMargin$,
        'columnSpacing': _DataTableThemeData_columnSpacing$,
        'dividerThickness': _DataTableThemeData_dividerThickness$,
        'checkboxHorizontalMargin':
            _DataTableThemeData_checkboxHorizontalMargin$,
        'headingCellCursor': _DataTableThemeData_headingCellCursor$,
        'dataRowCursor': _DataTableThemeData_dataRowCursor$,
        'hashCode': _DataTableThemeData_hashCode$,
        'copyWith': _DataTableThemeData_copyWith$,
        '==': _DataTableThemeData_eq$$,
        'debugFillProperties': _DataTableThemeData_debugFillProperties$,
      },
      {},
    ),
    'DataTableTheme': m.ClassMirror(
      'DataTableTheme',
      {
        '#as': DataTableTheme_as$,
        '#is': DataTableTheme_is$,
        'data': _DataTableTheme_data$,
        'updateShouldNotify': _DataTableTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function DataTableThemeData_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DataTableThemeData;
Function DataTableThemeData_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DataTableThemeData;
Decoration? _DataTableThemeData_decoration$(DataTableThemeData target) {
  return target.decoration;
}

MaterialStateProperty<Color?>? _DataTableThemeData_dataRowColor$(
    DataTableThemeData target) {
  return target.dataRowColor;
}

double? _DataTableThemeData_dataRowMinHeight$(DataTableThemeData target) {
  return target.dataRowMinHeight;
}

double? _DataTableThemeData_dataRowMaxHeight$(DataTableThemeData target) {
  return target.dataRowMaxHeight;
}

TextStyle? _DataTableThemeData_dataTextStyle$(DataTableThemeData target) {
  return target.dataTextStyle;
}

MaterialStateProperty<Color?>? _DataTableThemeData_headingRowColor$(
    DataTableThemeData target) {
  return target.headingRowColor;
}

double? _DataTableThemeData_headingRowHeight$(DataTableThemeData target) {
  return target.headingRowHeight;
}

TextStyle? _DataTableThemeData_headingTextStyle$(DataTableThemeData target) {
  return target.headingTextStyle;
}

double? _DataTableThemeData_horizontalMargin$(DataTableThemeData target) {
  return target.horizontalMargin;
}

double? _DataTableThemeData_columnSpacing$(DataTableThemeData target) {
  return target.columnSpacing;
}

double? _DataTableThemeData_dividerThickness$(DataTableThemeData target) {
  return target.dividerThickness;
}

double? _DataTableThemeData_checkboxHorizontalMargin$(
    DataTableThemeData target) {
  return target.checkboxHorizontalMargin;
}

MaterialStateProperty<MouseCursor?>? _DataTableThemeData_headingCellCursor$(
    DataTableThemeData target) {
  return target.headingCellCursor;
}

MaterialStateProperty<MouseCursor?>? _DataTableThemeData_dataRowCursor$(
    DataTableThemeData target) {
  return target.dataRowCursor;
}

int _DataTableThemeData_hashCode$(DataTableThemeData target) {
  return target.hashCode;
}

Function _DataTableThemeData_copyWith$(
  m.Scope scope,
  DataTableThemeData target,
) =>
    target.copyWith;
Function _DataTableThemeData_lerp$(m.Scope scope) => DataTableThemeData.lerp;
Function _DataTableThemeData_eq$$(
  m.Scope scope,
  DataTableThemeData target,
) =>
    (Object other) => target == other;
Function _DataTableThemeData_debugFillProperties$(
  m.Scope scope,
  DataTableThemeData target,
) =>
    target.debugFillProperties;
Function DataTableTheme_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DataTableTheme;
Function DataTableTheme_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DataTableTheme;
DataTableThemeData _DataTableTheme_data$(DataTableTheme target) {
  return target.data;
}

Function _DataTableTheme_of$(m.Scope scope) => DataTableTheme.of;
Function _DataTableTheme_updateShouldNotify$(
  m.Scope scope,
  DataTableTheme target,
) =>
    target.updateShouldNotify;
