// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/segmented_button.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/segmented_button_theme.dart';
import 'package:flutter/src/material/text_button.dart';
import 'package:flutter/src/material/text_button_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/segmented_button.dart',
  {},
  {},
  {
    'ButtonSegment': m.ClassMirror(
      'ButtonSegment',
      {
        '#as': ButtonSegment_as$,
        '#is': ButtonSegment_is$,
        'value': _ButtonSegment_value$,
        'icon': _ButtonSegment_icon$,
        'label': _ButtonSegment_label$,
        'enabled': _ButtonSegment_enabled$,
      },
      {},
    ),
    'SegmentedButton': m.ClassMirror(
      'SegmentedButton',
      {
        '#as': SegmentedButton_as$,
        '#is': SegmentedButton_is$,
        'segments': _SegmentedButton_segments$,
        'selected': _SegmentedButton_selected$,
        'onSelectionChanged': _SegmentedButton_onSelectionChanged$,
        'multiSelectionEnabled': _SegmentedButton_multiSelectionEnabled$,
        'emptySelectionAllowed': _SegmentedButton_emptySelectionAllowed$,
        'style': _SegmentedButton_style$,
        'showSelectedIcon': _SegmentedButton_showSelectedIcon$,
        'selectedIcon': _SegmentedButton_selectedIcon$,
        'build': _SegmentedButton_build$,
      },
      {},
    ),
  },
);
Function ButtonSegment_as$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ButtonSegment<T>;
Function ButtonSegment_is$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ButtonSegment<T>;
T _ButtonSegment_value$<T>(ButtonSegment<T> target) {
  return target.value;
}

Widget? _ButtonSegment_icon$<T>(ButtonSegment<T> target) {
  return target.icon;
}

Widget? _ButtonSegment_label$<T>(ButtonSegment<T> target) {
  return target.label;
}

bool _ButtonSegment_enabled$<T>(ButtonSegment<T> target) {
  return target.enabled;
}

Function SegmentedButton_as$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SegmentedButton<T>;
Function SegmentedButton_is$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SegmentedButton<T>;
List<ButtonSegment<T>> _SegmentedButton_segments$<T>(
    SegmentedButton<T> target) {
  return target.segments;
}

Set<T> _SegmentedButton_selected$<T>(SegmentedButton<T> target) {
  return target.selected;
}

void Function(Set<T>)? _SegmentedButton_onSelectionChanged$<T>(
    SegmentedButton<T> target) {
  return target.onSelectionChanged;
}

bool _SegmentedButton_multiSelectionEnabled$<T>(SegmentedButton<T> target) {
  return target.multiSelectionEnabled;
}

bool _SegmentedButton_emptySelectionAllowed$<T>(SegmentedButton<T> target) {
  return target.emptySelectionAllowed;
}

ButtonStyle? _SegmentedButton_style$<T>(SegmentedButton<T> target) {
  return target.style;
}

bool _SegmentedButton_showSelectedIcon$<T>(SegmentedButton<T> target) {
  return target.showSelectedIcon;
}

Widget? _SegmentedButton_selectedIcon$<T>(SegmentedButton<T> target) {
  return target.selectedIcon;
}

Function _SegmentedButton_build$<T>(
  m.Scope scope,
  SegmentedButton<T> target,
) =>
    target.build;
