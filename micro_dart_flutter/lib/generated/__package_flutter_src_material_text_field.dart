// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/text_field.dart';
import 'dart:ui' show BoxHeightStyle, BoxWidthStyle;
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/material/adaptive_text_selection_toolbar.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/desktop_text_selection.dart';
import 'package:flutter/src/material/feedback.dart';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/material/magnifier.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/selectable_text.dart'
    show iOSHorizontalOffset;
import 'package:flutter/src/material/spell_check_suggestions_toolbar.dart';
import 'package:flutter/src/material/text_selection.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/text_field.dart',
  {
    'TextField.noMaxLength': _TextField_noMaxLength$,
    'TextField.materialMisspelledTextStyle':
        _TextField_materialMisspelledTextStyle$,
    'TextField.defaultSpellCheckSuggestionsToolbarBuilder':
        _TextField_defaultSpellCheckSuggestionsToolbarBuilder$,
    'TextField.inferAndroidSpellCheckConfiguration':
        _TextField_inferAndroidSpellCheckConfiguration$,
  },
  {},
  {
    'TextField': m.ClassMirror(
      'TextField',
      {
        'magnifierConfiguration': _TextField_magnifierConfiguration$,
        'controller': _TextField_controller$,
        'focusNode': _TextField_focusNode$,
        'decoration': _TextField_decoration$,
        'keyboardType': _TextField_keyboardType$,
        'textInputAction': _TextField_textInputAction$,
        'textCapitalization': _TextField_textCapitalization$,
        'style': _TextField_style$,
        'strutStyle': _TextField_strutStyle$,
        'textAlign': _TextField_textAlign$,
        'textAlignVertical': _TextField_textAlignVertical$,
        'textDirection': _TextField_textDirection$,
        'autofocus': _TextField_autofocus$,
        'obscuringCharacter': _TextField_obscuringCharacter$,
        'obscureText': _TextField_obscureText$,
        'autocorrect': _TextField_autocorrect$,
        'smartDashesType': _TextField_smartDashesType$,
        'smartQuotesType': _TextField_smartQuotesType$,
        'enableSuggestions': _TextField_enableSuggestions$,
        'maxLines': _TextField_maxLines$,
        'minLines': _TextField_minLines$,
        'expands': _TextField_expands$,
        'readOnly': _TextField_readOnly$,
        'toolbarOptions': _TextField_toolbarOptions$,
        'showCursor': _TextField_showCursor$,
        'maxLength': _TextField_maxLength$,
        'maxLengthEnforcement': _TextField_maxLengthEnforcement$,
        'onChanged': _TextField_onChanged$,
        'onEditingComplete': _TextField_onEditingComplete$,
        'onSubmitted': _TextField_onSubmitted$,
        'onAppPrivateCommand': _TextField_onAppPrivateCommand$,
        'inputFormatters': _TextField_inputFormatters$,
        'enabled': _TextField_enabled$,
        'cursorWidth': _TextField_cursorWidth$,
        'cursorHeight': _TextField_cursorHeight$,
        'cursorRadius': _TextField_cursorRadius$,
        'cursorOpacityAnimates': _TextField_cursorOpacityAnimates$,
        'cursorColor': _TextField_cursorColor$,
        'selectionHeightStyle': _TextField_selectionHeightStyle$,
        'selectionWidthStyle': _TextField_selectionWidthStyle$,
        'keyboardAppearance': _TextField_keyboardAppearance$,
        'scrollPadding': _TextField_scrollPadding$,
        'enableInteractiveSelection': _TextField_enableInteractiveSelection$,
        'selectionControls': _TextField_selectionControls$,
        'dragStartBehavior': _TextField_dragStartBehavior$,
        'onTap': _TextField_onTap$,
        'onTapOutside': _TextField_onTapOutside$,
        'mouseCursor': _TextField_mouseCursor$,
        'buildCounter': _TextField_buildCounter$,
        'scrollPhysics': _TextField_scrollPhysics$,
        'scrollController': _TextField_scrollController$,
        'autofillHints': _TextField_autofillHints$,
        'clipBehavior': _TextField_clipBehavior$,
        'restorationId': _TextField_restorationId$,
        'scribbleEnabled': _TextField_scribbleEnabled$,
        'enableIMEPersonalizedLearning':
            _TextField_enableIMEPersonalizedLearning$,
        'contentInsertionConfiguration':
            _TextField_contentInsertionConfiguration$,
        'contextMenuBuilder': _TextField_contextMenuBuilder$,
        'canRequestFocus': _TextField_canRequestFocus$,
        'undoController': _TextField_undoController$,
        'spellCheckConfiguration': _TextField_spellCheckConfiguration$,
        'selectionEnabled': _TextField_selectionEnabled$,
        'createState': _TextField_createState$,
        'debugFillProperties': _TextField_debugFillProperties$,
      },
      {},
    )
  },
);
TextMagnifierConfiguration? _TextField_magnifierConfiguration$(
    TextField target) {
  return target.magnifierConfiguration;
}

TextEditingController? _TextField_controller$(TextField target) {
  return target.controller;
}

FocusNode? _TextField_focusNode$(TextField target) {
  return target.focusNode;
}

InputDecoration? _TextField_decoration$(TextField target) {
  return target.decoration;
}

TextInputType _TextField_keyboardType$(TextField target) {
  return target.keyboardType;
}

TextInputAction? _TextField_textInputAction$(TextField target) {
  return target.textInputAction;
}

TextCapitalization _TextField_textCapitalization$(TextField target) {
  return target.textCapitalization;
}

TextStyle? _TextField_style$(TextField target) {
  return target.style;
}

StrutStyle? _TextField_strutStyle$(TextField target) {
  return target.strutStyle;
}

TextAlign _TextField_textAlign$(TextField target) {
  return target.textAlign;
}

TextAlignVertical? _TextField_textAlignVertical$(TextField target) {
  return target.textAlignVertical;
}

TextDirection? _TextField_textDirection$(TextField target) {
  return target.textDirection;
}

bool _TextField_autofocus$(TextField target) {
  return target.autofocus;
}

String _TextField_obscuringCharacter$(TextField target) {
  return target.obscuringCharacter;
}

bool _TextField_obscureText$(TextField target) {
  return target.obscureText;
}

bool _TextField_autocorrect$(TextField target) {
  return target.autocorrect;
}

SmartDashesType _TextField_smartDashesType$(TextField target) {
  return target.smartDashesType;
}

SmartQuotesType _TextField_smartQuotesType$(TextField target) {
  return target.smartQuotesType;
}

bool _TextField_enableSuggestions$(TextField target) {
  return target.enableSuggestions;
}

int? _TextField_maxLines$(TextField target) {
  return target.maxLines;
}

int? _TextField_minLines$(TextField target) {
  return target.minLines;
}

bool _TextField_expands$(TextField target) {
  return target.expands;
}

bool _TextField_readOnly$(TextField target) {
  return target.readOnly;
}

ToolbarOptions? _TextField_toolbarOptions$(TextField target) {
  return target.toolbarOptions;
}

bool? _TextField_showCursor$(TextField target) {
  return target.showCursor;
}

int _TextField_noMaxLength$() {
  return TextField.noMaxLength;
}

int? _TextField_maxLength$(TextField target) {
  return target.maxLength;
}

MaxLengthEnforcement? _TextField_maxLengthEnforcement$(TextField target) {
  return target.maxLengthEnforcement;
}

void Function(String)? _TextField_onChanged$(TextField target) {
  return target.onChanged;
}

void Function()? _TextField_onEditingComplete$(TextField target) {
  return target.onEditingComplete;
}

void Function(String)? _TextField_onSubmitted$(TextField target) {
  return target.onSubmitted;
}

void Function(String, Map<String, dynamic>)? _TextField_onAppPrivateCommand$(
    TextField target) {
  return target.onAppPrivateCommand;
}

List<TextInputFormatter>? _TextField_inputFormatters$(TextField target) {
  return target.inputFormatters;
}

bool? _TextField_enabled$(TextField target) {
  return target.enabled;
}

double _TextField_cursorWidth$(TextField target) {
  return target.cursorWidth;
}

double? _TextField_cursorHeight$(TextField target) {
  return target.cursorHeight;
}

Radius? _TextField_cursorRadius$(TextField target) {
  return target.cursorRadius;
}

bool? _TextField_cursorOpacityAnimates$(TextField target) {
  return target.cursorOpacityAnimates;
}

Color? _TextField_cursorColor$(TextField target) {
  return target.cursorColor;
}

BoxHeightStyle _TextField_selectionHeightStyle$(TextField target) {
  return target.selectionHeightStyle;
}

BoxWidthStyle _TextField_selectionWidthStyle$(TextField target) {
  return target.selectionWidthStyle;
}

Brightness? _TextField_keyboardAppearance$(TextField target) {
  return target.keyboardAppearance;
}

EdgeInsets _TextField_scrollPadding$(TextField target) {
  return target.scrollPadding;
}

bool _TextField_enableInteractiveSelection$(TextField target) {
  return target.enableInteractiveSelection;
}

TextSelectionControls? _TextField_selectionControls$(TextField target) {
  return target.selectionControls;
}

DragStartBehavior _TextField_dragStartBehavior$(TextField target) {
  return target.dragStartBehavior;
}

void Function()? _TextField_onTap$(TextField target) {
  return target.onTap;
}

void Function(PointerDownEvent)? _TextField_onTapOutside$(TextField target) {
  return target.onTapOutside;
}

MouseCursor? _TextField_mouseCursor$(TextField target) {
  return target.mouseCursor;
}

Widget? Function(BuildContext,
    {required int currentLength,
    required bool isFocused,
    required int? maxLength})? _TextField_buildCounter$(TextField target) {
  return target.buildCounter;
}

ScrollPhysics? _TextField_scrollPhysics$(TextField target) {
  return target.scrollPhysics;
}

ScrollController? _TextField_scrollController$(TextField target) {
  return target.scrollController;
}

Iterable<String>? _TextField_autofillHints$(TextField target) {
  return target.autofillHints;
}

Clip _TextField_clipBehavior$(TextField target) {
  return target.clipBehavior;
}

String? _TextField_restorationId$(TextField target) {
  return target.restorationId;
}

bool _TextField_scribbleEnabled$(TextField target) {
  return target.scribbleEnabled;
}

bool _TextField_enableIMEPersonalizedLearning$(TextField target) {
  return target.enableIMEPersonalizedLearning;
}

ContentInsertionConfiguration? _TextField_contentInsertionConfiguration$(
    TextField target) {
  return target.contentInsertionConfiguration;
}

Widget Function(BuildContext, EditableTextState)?
    _TextField_contextMenuBuilder$(TextField target) {
  return target.contextMenuBuilder;
}

bool _TextField_canRequestFocus$(TextField target) {
  return target.canRequestFocus;
}

UndoHistoryController? _TextField_undoController$(TextField target) {
  return target.undoController;
}

SpellCheckConfiguration? _TextField_spellCheckConfiguration$(TextField target) {
  return target.spellCheckConfiguration;
}

TextStyle _TextField_materialMisspelledTextStyle$() {
  return TextField.materialMisspelledTextStyle;
}

bool _TextField_selectionEnabled$(TextField target) {
  return target.selectionEnabled;
}

Function _TextField_defaultSpellCheckSuggestionsToolbarBuilder$(
        m.Scope scope) =>
    TextField.defaultSpellCheckSuggestionsToolbarBuilder;
Function _TextField_inferAndroidSpellCheckConfiguration$(m.Scope scope) =>
    TextField.inferAndroidSpellCheckConfiguration;
Function _TextField_createState$(
  m.Scope scope,
  TextField target,
) =>
    target.createState;
Function _TextField_debugFillProperties$(
  m.Scope scope,
  TextField target,
) =>
    target.debugFillProperties;
