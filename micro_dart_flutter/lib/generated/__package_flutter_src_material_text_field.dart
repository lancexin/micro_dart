// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/text_field.dart';
import 'dart:ui' show BoxHeightStyle, BoxWidthStyle;
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/material/adaptive_text_selection_toolbar.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/desktop_text_selection.dart';
import 'package:flutter/src/material/feedback.dart';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/material/magnifier.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/selectable_text.dart'
    show iOSHorizontalOffset;
import 'package:flutter/src/material/spell_check_suggestions_toolbar.dart';
import 'package:flutter/src/material/text_selection.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/text_field.dart',
  {
    'TextField.noMaxLength': _TextField_noMaxLength$,
    'TextField.materialMisspelledTextStyle':
        _TextField_materialMisspelledTextStyle$,
    'TextField.': _TextField__$,
    'TextField.defaultSpellCheckSuggestionsToolbarBuilder':
        _TextField_defaultSpellCheckSuggestionsToolbarBuilder$,
    'TextField.inferAndroidSpellCheckConfiguration':
        _TextField_inferAndroidSpellCheckConfiguration$,
  },
  {},
  {
    'TextField': m.ClassMirror(
      'TextField',
      {
        '#as': TextField_as$,
        '#is': TextField_is$,
        'magnifierConfiguration': _TextField_magnifierConfiguration$,
        'controller': _TextField_controller$,
        'focusNode': _TextField_focusNode$,
        'decoration': _TextField_decoration$,
        'keyboardType': _TextField_keyboardType$,
        'textInputAction': _TextField_textInputAction$,
        'textCapitalization': _TextField_textCapitalization$,
        'style': _TextField_style$,
        'strutStyle': _TextField_strutStyle$,
        'textAlign': _TextField_textAlign$,
        'textAlignVertical': _TextField_textAlignVertical$,
        'textDirection': _TextField_textDirection$,
        'autofocus': _TextField_autofocus$,
        'obscuringCharacter': _TextField_obscuringCharacter$,
        'obscureText': _TextField_obscureText$,
        'autocorrect': _TextField_autocorrect$,
        'smartDashesType': _TextField_smartDashesType$,
        'smartQuotesType': _TextField_smartQuotesType$,
        'enableSuggestions': _TextField_enableSuggestions$,
        'maxLines': _TextField_maxLines$,
        'minLines': _TextField_minLines$,
        'expands': _TextField_expands$,
        'readOnly': _TextField_readOnly$,
        'toolbarOptions': _TextField_toolbarOptions$,
        'showCursor': _TextField_showCursor$,
        'maxLength': _TextField_maxLength$,
        'maxLengthEnforcement': _TextField_maxLengthEnforcement$,
        'onChanged': _TextField_onChanged$,
        'onEditingComplete': _TextField_onEditingComplete$,
        'onSubmitted': _TextField_onSubmitted$,
        'onAppPrivateCommand': _TextField_onAppPrivateCommand$,
        'inputFormatters': _TextField_inputFormatters$,
        'enabled': _TextField_enabled$,
        'cursorWidth': _TextField_cursorWidth$,
        'cursorHeight': _TextField_cursorHeight$,
        'cursorRadius': _TextField_cursorRadius$,
        'cursorOpacityAnimates': _TextField_cursorOpacityAnimates$,
        'cursorColor': _TextField_cursorColor$,
        'selectionHeightStyle': _TextField_selectionHeightStyle$,
        'selectionWidthStyle': _TextField_selectionWidthStyle$,
        'keyboardAppearance': _TextField_keyboardAppearance$,
        'scrollPadding': _TextField_scrollPadding$,
        'enableInteractiveSelection': _TextField_enableInteractiveSelection$,
        'selectionControls': _TextField_selectionControls$,
        'dragStartBehavior': _TextField_dragStartBehavior$,
        'onTap': _TextField_onTap$,
        'onTapOutside': _TextField_onTapOutside$,
        'mouseCursor': _TextField_mouseCursor$,
        'buildCounter': _TextField_buildCounter$,
        'scrollPhysics': _TextField_scrollPhysics$,
        'scrollController': _TextField_scrollController$,
        'autofillHints': _TextField_autofillHints$,
        'clipBehavior': _TextField_clipBehavior$,
        'restorationId': _TextField_restorationId$,
        'scribbleEnabled': _TextField_scribbleEnabled$,
        'enableIMEPersonalizedLearning':
            _TextField_enableIMEPersonalizedLearning$,
        'contentInsertionConfiguration':
            _TextField_contentInsertionConfiguration$,
        'contextMenuBuilder': _TextField_contextMenuBuilder$,
        'canRequestFocus': _TextField_canRequestFocus$,
        'undoController': _TextField_undoController$,
        'spellCheckConfiguration': _TextField_spellCheckConfiguration$,
        'selectionEnabled': _TextField_selectionEnabled$,
        'createState': _TextField_createState$,
        'debugFillProperties': _TextField_debugFillProperties$,
      },
      {},
    )
  },
);
Function TextField_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextField;
Function TextField_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextField;
Function _TextField_magnifierConfiguration$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.magnifierConfiguration;
    };
Function _TextField_controller$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.controller;
    };
Function _TextField_focusNode$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.focusNode;
    };
Function _TextField_decoration$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.decoration;
    };
Function _TextField_keyboardType$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.keyboardType;
    };
Function _TextField_textInputAction$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.textInputAction;
    };
Function _TextField_textCapitalization$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.textCapitalization;
    };
Function _TextField_style$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.style;
    };
Function _TextField_strutStyle$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.strutStyle;
    };
Function _TextField_textAlign$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.textAlign;
    };
Function _TextField_textAlignVertical$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.textAlignVertical;
    };
Function _TextField_textDirection$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.textDirection;
    };
Function _TextField_autofocus$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.autofocus;
    };
Function _TextField_obscuringCharacter$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.obscuringCharacter;
    };
Function _TextField_obscureText$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.obscureText;
    };
Function _TextField_autocorrect$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.autocorrect;
    };
Function _TextField_smartDashesType$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.smartDashesType;
    };
Function _TextField_smartQuotesType$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.smartQuotesType;
    };
Function _TextField_enableSuggestions$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.enableSuggestions;
    };
Function _TextField_maxLines$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.maxLines;
    };
Function _TextField_minLines$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.minLines;
    };
Function _TextField_expands$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.expands;
    };
Function _TextField_readOnly$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.readOnly;
    };
Function _TextField_toolbarOptions$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.toolbarOptions;
    };
Function _TextField_showCursor$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.showCursor;
    };
Function _TextField_noMaxLength$(m.Scope scope$) => () => TextField.noMaxLength;
Function _TextField_maxLength$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.maxLength;
    };
Function _TextField_maxLengthEnforcement$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.maxLengthEnforcement;
    };
Function _TextField_onChanged$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.onChanged;
    };
Function _TextField_onEditingComplete$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.onEditingComplete;
    };
Function _TextField_onSubmitted$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.onSubmitted;
    };
Function _TextField_onAppPrivateCommand$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.onAppPrivateCommand;
    };
Function _TextField_inputFormatters$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.inputFormatters;
    };
Function _TextField_enabled$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.enabled;
    };
Function _TextField_cursorWidth$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.cursorWidth;
    };
Function _TextField_cursorHeight$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.cursorHeight;
    };
Function _TextField_cursorRadius$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.cursorRadius;
    };
Function _TextField_cursorOpacityAnimates$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.cursorOpacityAnimates;
    };
Function _TextField_cursorColor$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.cursorColor;
    };
Function _TextField_selectionHeightStyle$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.selectionHeightStyle;
    };
Function _TextField_selectionWidthStyle$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.selectionWidthStyle;
    };
Function _TextField_keyboardAppearance$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.keyboardAppearance;
    };
Function _TextField_scrollPadding$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.scrollPadding;
    };
Function _TextField_enableInteractiveSelection$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.enableInteractiveSelection;
    };
Function _TextField_selectionControls$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.selectionControls;
    };
Function _TextField_dragStartBehavior$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.dragStartBehavior;
    };
Function _TextField_onTap$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.onTap;
    };
Function _TextField_onTapOutside$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.onTapOutside;
    };
Function _TextField_mouseCursor$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.mouseCursor;
    };
Function _TextField_buildCounter$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.buildCounter;
    };
Function _TextField_scrollPhysics$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.scrollPhysics;
    };
Function _TextField_scrollController$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.scrollController;
    };
Function _TextField_autofillHints$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.autofillHints;
    };
Function _TextField_clipBehavior$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _TextField_restorationId$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.restorationId;
    };
Function _TextField_scribbleEnabled$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.scribbleEnabled;
    };
Function _TextField_enableIMEPersonalizedLearning$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.enableIMEPersonalizedLearning;
    };
Function _TextField_contentInsertionConfiguration$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.contentInsertionConfiguration;
    };
Function _TextField_contextMenuBuilder$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.contextMenuBuilder;
    };
Function _TextField_canRequestFocus$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.canRequestFocus;
    };
Function _TextField_undoController$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.undoController;
    };
Function _TextField_spellCheckConfiguration$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.spellCheckConfiguration;
    };
Function _TextField_materialMisspelledTextStyle$(m.Scope scope$) =>
    () => TextField.materialMisspelledTextStyle;
Function _TextField_selectionEnabled$(
  m.Scope scope$,
  TextField target$,
) =>
    () {
      return target$.selectionEnabled;
    };
Function _TextField__$(m.Scope scope$) => ({
      Key? key,
      TextEditingController? controller,
      FocusNode? focusNode,
      UndoHistoryController? undoController,
      InputDecoration? decoration,
      TextInputType? keyboardType,
      TextInputAction? textInputAction,
      TextCapitalization? textCapitalization,
      TextStyle? style,
      StrutStyle? strutStyle,
      TextAlign? textAlign,
      TextAlignVertical? textAlignVertical,
      TextDirection? textDirection,
      bool? readOnly,
      ToolbarOptions? toolbarOptions,
      bool? showCursor,
      bool? autofocus,
      String? obscuringCharacter,
      bool? obscureText,
      bool? autocorrect,
      SmartDashesType? smartDashesType,
      SmartQuotesType? smartQuotesType,
      bool? enableSuggestions,
      int? maxLines,
      int? minLines,
      bool? expands,
      int? maxLength,
      MaxLengthEnforcement? maxLengthEnforcement,
      m.FunctionPointer? onChanged,
      m.FunctionPointer? onEditingComplete,
      m.FunctionPointer? onSubmitted,
      m.FunctionPointer? onAppPrivateCommand,
      List? inputFormatters,
      bool? enabled,
      double? cursorWidth,
      double? cursorHeight,
      Radius? cursorRadius,
      bool? cursorOpacityAnimates,
      Color? cursorColor,
      BoxHeightStyle? selectionHeightStyle,
      BoxWidthStyle? selectionWidthStyle,
      Brightness? keyboardAppearance,
      EdgeInsets? scrollPadding,
      DragStartBehavior? dragStartBehavior,
      bool? enableInteractiveSelection,
      TextSelectionControls? selectionControls,
      m.FunctionPointer? onTap,
      m.FunctionPointer? onTapOutside,
      MouseCursor? mouseCursor,
      m.FunctionPointer? buildCounter,
      ScrollController? scrollController,
      ScrollPhysics? scrollPhysics,
      Iterable? autofillHints,
      ContentInsertionConfiguration? contentInsertionConfiguration,
      Clip? clipBehavior,
      String? restorationId,
      bool? scribbleEnabled,
      bool? enableIMEPersonalizedLearning,
      m.FunctionPointer? contextMenuBuilder,
      bool? canRequestFocus,
      SpellCheckConfiguration? spellCheckConfiguration,
      TextMagnifierConfiguration? magnifierConfiguration,
    }) {
      Widget? buildCounterProxy(
        BuildContext buildCounter_context$, {
        required int currentLength,
        required bool isFocused,
        required int? maxLength,
      }) =>
          scope$.engine.callFunctionPointer(
            scope$,
            buildCounter!,
            [buildCounter_context$],
            {
              'currentLength': currentLength,
              'isFocused': isFocused,
              'maxLength': maxLength,
            },
          );
      Widget contextMenuBuilderProxy(
        BuildContext contextMenuBuilder_context$,
        EditableTextState contextMenuBuilder_editableTextState$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            contextMenuBuilder!,
            [
              contextMenuBuilder_context$,
              contextMenuBuilder_editableTextState$,
            ],
            {},
          );
      void onAppPrivateCommandProxy(
        String onAppPrivateCommand_$p0$,
        Map onAppPrivateCommand_$p1$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onAppPrivateCommand!,
            [
              onAppPrivateCommand_$p0$,
              onAppPrivateCommand_$p1$,
            ],
            {},
          );
      void onChangedProxy(String onChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChanged!,
            [onChanged_value$],
            {},
          );
      void onEditingCompleteProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onEditingComplete!,
            [],
            {},
          );
      void onSubmittedProxy(String onSubmitted_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSubmitted!,
            [onSubmitted_value$],
            {},
          );
      void onTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTap!,
            [],
            {},
          );
      void onTapOutsideProxy(PointerDownEvent onTapOutside_event$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onTapOutside!,
            [onTapOutside_event$],
            {},
          );
      return TextField(
        autocorrect: autocorrect ?? true,
        autofillHints: autofillHints == null
            ? const <String>[]
            : Iterable.castFrom(autofillHints),
        autofocus: autofocus ?? false,
        buildCounter: buildCounter == null ? null : buildCounterProxy,
        canRequestFocus: canRequestFocus ?? true,
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        contentInsertionConfiguration: contentInsertionConfiguration,
        contextMenuBuilder: contextMenuBuilder == null
            ? (BuildContext context, EditableTextState editableTextState) {
                return AdaptiveTextSelectionToolbar.editableText(
                  editableTextState: editableTextState,
                );
              }
            : contextMenuBuilderProxy,
        controller: controller,
        cursorColor: cursorColor,
        cursorHeight: cursorHeight,
        cursorOpacityAnimates: cursorOpacityAnimates,
        cursorRadius: cursorRadius,
        cursorWidth: cursorWidth ?? 2.0,
        decoration: decoration ?? const InputDecoration(),
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        enableIMEPersonalizedLearning: enableIMEPersonalizedLearning ?? true,
        enableInteractiveSelection: enableInteractiveSelection,
        enableSuggestions: enableSuggestions ?? true,
        enabled: enabled,
        expands: expands ?? false,
        focusNode: focusNode,
        inputFormatters:
            inputFormatters == null ? null : List.from(inputFormatters),
        key: key,
        keyboardAppearance: keyboardAppearance,
        keyboardType: keyboardType,
        magnifierConfiguration: magnifierConfiguration,
        maxLength: maxLength,
        maxLengthEnforcement: maxLengthEnforcement,
        maxLines: maxLines ?? 1,
        minLines: minLines,
        mouseCursor: mouseCursor,
        obscureText: obscureText ?? false,
        obscuringCharacter: obscuringCharacter ?? '•',
        onAppPrivateCommand:
            onAppPrivateCommand == null ? null : onAppPrivateCommandProxy,
        onChanged: onChanged == null ? null : onChangedProxy,
        onEditingComplete:
            onEditingComplete == null ? null : onEditingCompleteProxy,
        onSubmitted: onSubmitted == null ? null : onSubmittedProxy,
        onTap: onTap == null ? null : onTapProxy,
        onTapOutside: onTapOutside == null ? null : onTapOutsideProxy,
        readOnly: readOnly ?? false,
        restorationId: restorationId,
        scribbleEnabled: scribbleEnabled ?? true,
        scrollController: scrollController,
        scrollPadding: scrollPadding ?? const EdgeInsets.all(20.0),
        scrollPhysics: scrollPhysics,
        selectionControls: selectionControls,
        selectionHeightStyle: selectionHeightStyle ?? BoxHeightStyle.tight,
        selectionWidthStyle: selectionWidthStyle ?? BoxWidthStyle.tight,
        showCursor: showCursor,
        smartDashesType: smartDashesType,
        smartQuotesType: smartQuotesType,
        spellCheckConfiguration: spellCheckConfiguration,
        strutStyle: strutStyle,
        style: style,
        textAlign: textAlign ?? TextAlign.start,
        textAlignVertical: textAlignVertical,
        textCapitalization: textCapitalization ?? TextCapitalization.none,
        textDirection: textDirection,
        textInputAction: textInputAction,
        toolbarOptions: toolbarOptions,
        undoController: undoController,
      );
    };
Function _TextField_defaultSpellCheckSuggestionsToolbarBuilder$(
        m.Scope scope$) =>
    TextField.defaultSpellCheckSuggestionsToolbarBuilder;
Function _TextField_inferAndroidSpellCheckConfiguration$(m.Scope scope$) =>
    TextField.inferAndroidSpellCheckConfiguration;
Function _TextField_createState$(
  m.Scope scope$,
  TextField target$,
) =>
    target$.createState;
Function _TextField_debugFillProperties$(
  m.Scope scope$,
  TextField target$,
) =>
    target$.debugFillProperties;
