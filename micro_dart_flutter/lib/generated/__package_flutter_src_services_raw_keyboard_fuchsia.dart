// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/raw_keyboard_fuchsia.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/services/keyboard_maps.g.dart';
import 'package:flutter/src/services/raw_keyboard.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/raw_keyboard_fuchsia.dart',
  {
    'RawKeyEventDataFuchsia.modifierNone':
        _RawKeyEventDataFuchsia_modifierNone$,
    'RawKeyEventDataFuchsia.modifierCapsLock':
        _RawKeyEventDataFuchsia_modifierCapsLock$,
    'RawKeyEventDataFuchsia.modifierLeftShift':
        _RawKeyEventDataFuchsia_modifierLeftShift$,
    'RawKeyEventDataFuchsia.modifierRightShift':
        _RawKeyEventDataFuchsia_modifierRightShift$,
    'RawKeyEventDataFuchsia.modifierShift':
        _RawKeyEventDataFuchsia_modifierShift$,
    'RawKeyEventDataFuchsia.modifierLeftControl':
        _RawKeyEventDataFuchsia_modifierLeftControl$,
    'RawKeyEventDataFuchsia.modifierRightControl':
        _RawKeyEventDataFuchsia_modifierRightControl$,
    'RawKeyEventDataFuchsia.modifierControl':
        _RawKeyEventDataFuchsia_modifierControl$,
    'RawKeyEventDataFuchsia.modifierLeftAlt':
        _RawKeyEventDataFuchsia_modifierLeftAlt$,
    'RawKeyEventDataFuchsia.modifierRightAlt':
        _RawKeyEventDataFuchsia_modifierRightAlt$,
    'RawKeyEventDataFuchsia.modifierAlt': _RawKeyEventDataFuchsia_modifierAlt$,
    'RawKeyEventDataFuchsia.modifierLeftMeta':
        _RawKeyEventDataFuchsia_modifierLeftMeta$,
    'RawKeyEventDataFuchsia.modifierRightMeta':
        _RawKeyEventDataFuchsia_modifierRightMeta$,
    'RawKeyEventDataFuchsia.modifierMeta':
        _RawKeyEventDataFuchsia_modifierMeta$,
    'RawKeyEventDataFuchsia.': _RawKeyEventDataFuchsia__$,
  },
  {},
  {
    'RawKeyEventDataFuchsia': m.ClassMirror(
      'RawKeyEventDataFuchsia',
      {
        '#as': RawKeyEventDataFuchsia_as$,
        '#is': RawKeyEventDataFuchsia_is$,
        'hidUsage': _RawKeyEventDataFuchsia_hidUsage$,
        'codePoint': _RawKeyEventDataFuchsia_codePoint$,
        'modifiers': _RawKeyEventDataFuchsia_modifiers$,
        'keyLabel': _RawKeyEventDataFuchsia_keyLabel$,
        'logicalKey': _RawKeyEventDataFuchsia_logicalKey$,
        'physicalKey': _RawKeyEventDataFuchsia_physicalKey$,
        'hashCode': _RawKeyEventDataFuchsia_hashCode$,
        'isModifierPressed': _RawKeyEventDataFuchsia_isModifierPressed$,
        'getModifierSide': _RawKeyEventDataFuchsia_getModifierSide$,
        'debugFillProperties': _RawKeyEventDataFuchsia_debugFillProperties$,
        '==': _RawKeyEventDataFuchsia_eq$$,
      },
      {},
    )
  },
);
Function RawKeyEventDataFuchsia_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RawKeyEventDataFuchsia;
Function RawKeyEventDataFuchsia_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RawKeyEventDataFuchsia;
Function _RawKeyEventDataFuchsia_hidUsage$(
  m.Scope scope$,
  RawKeyEventDataFuchsia target$,
) =>
    () {
      return target$.hidUsage;
    };
Function _RawKeyEventDataFuchsia_codePoint$(
  m.Scope scope$,
  RawKeyEventDataFuchsia target$,
) =>
    () {
      return target$.codePoint;
    };
Function _RawKeyEventDataFuchsia_modifiers$(
  m.Scope scope$,
  RawKeyEventDataFuchsia target$,
) =>
    () {
      return target$.modifiers;
    };
int _RawKeyEventDataFuchsia_modifierNone$() {
  return RawKeyEventDataFuchsia.modifierNone;
}

int _RawKeyEventDataFuchsia_modifierCapsLock$() {
  return RawKeyEventDataFuchsia.modifierCapsLock;
}

int _RawKeyEventDataFuchsia_modifierLeftShift$() {
  return RawKeyEventDataFuchsia.modifierLeftShift;
}

int _RawKeyEventDataFuchsia_modifierRightShift$() {
  return RawKeyEventDataFuchsia.modifierRightShift;
}

int _RawKeyEventDataFuchsia_modifierShift$() {
  return RawKeyEventDataFuchsia.modifierShift;
}

int _RawKeyEventDataFuchsia_modifierLeftControl$() {
  return RawKeyEventDataFuchsia.modifierLeftControl;
}

int _RawKeyEventDataFuchsia_modifierRightControl$() {
  return RawKeyEventDataFuchsia.modifierRightControl;
}

int _RawKeyEventDataFuchsia_modifierControl$() {
  return RawKeyEventDataFuchsia.modifierControl;
}

int _RawKeyEventDataFuchsia_modifierLeftAlt$() {
  return RawKeyEventDataFuchsia.modifierLeftAlt;
}

int _RawKeyEventDataFuchsia_modifierRightAlt$() {
  return RawKeyEventDataFuchsia.modifierRightAlt;
}

int _RawKeyEventDataFuchsia_modifierAlt$() {
  return RawKeyEventDataFuchsia.modifierAlt;
}

int _RawKeyEventDataFuchsia_modifierLeftMeta$() {
  return RawKeyEventDataFuchsia.modifierLeftMeta;
}

int _RawKeyEventDataFuchsia_modifierRightMeta$() {
  return RawKeyEventDataFuchsia.modifierRightMeta;
}

int _RawKeyEventDataFuchsia_modifierMeta$() {
  return RawKeyEventDataFuchsia.modifierMeta;
}

Function _RawKeyEventDataFuchsia_keyLabel$(
  m.Scope scope$,
  RawKeyEventDataFuchsia target$,
) =>
    () {
      return target$.keyLabel;
    };
Function _RawKeyEventDataFuchsia_logicalKey$(
  m.Scope scope$,
  RawKeyEventDataFuchsia target$,
) =>
    () {
      return target$.logicalKey;
    };
Function _RawKeyEventDataFuchsia_physicalKey$(
  m.Scope scope$,
  RawKeyEventDataFuchsia target$,
) =>
    () {
      return target$.physicalKey;
    };
Function _RawKeyEventDataFuchsia_hashCode$(
  m.Scope scope$,
  RawKeyEventDataFuchsia target$,
) =>
    () {
      return target$.hashCode;
    };
Function _RawKeyEventDataFuchsia__$(m.Scope scope$) => ({
      int? hidUsage,
      int? codePoint,
      int? modifiers,
    }) {
      return RawKeyEventDataFuchsia(
        codePoint: codePoint ?? 0,
        hidUsage: hidUsage ?? 0,
        modifiers: modifiers ?? 0,
      );
    };
Function _RawKeyEventDataFuchsia_isModifierPressed$(
  m.Scope scope$,
  RawKeyEventDataFuchsia target$,
) =>
    target$.isModifierPressed;
Function _RawKeyEventDataFuchsia_getModifierSide$(
  m.Scope scope$,
  RawKeyEventDataFuchsia target$,
) =>
    target$.getModifierSide;
Function _RawKeyEventDataFuchsia_debugFillProperties$(
  m.Scope scope$,
  RawKeyEventDataFuchsia target$,
) =>
    target$.debugFillProperties;
Function _RawKeyEventDataFuchsia_eq$$(
  m.Scope scope$,
  RawKeyEventDataFuchsia target$,
) =>
    (Object other$) => target$ == other$;
