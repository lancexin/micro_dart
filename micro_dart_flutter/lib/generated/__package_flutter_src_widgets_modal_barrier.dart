// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/modal_barrier.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/gesture_detector.dart';
import 'package:flutter/src/widgets/navigator.dart';
import 'package:flutter/src/widgets/transitions.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/modal_barrier.dart',
  {
    'ModalBarrier.': _ModalBarrier__$,
    'AnimatedModalBarrier.': _AnimatedModalBarrier__$,
  },
  {},
  {
    'ModalBarrier': m.ClassMirror(
      'ModalBarrier',
      {
        '#as': ModalBarrier_as$,
        '#is': ModalBarrier_is$,
        'color': _ModalBarrier_color$,
        'dismissible': _ModalBarrier_dismissible$,
        'onDismiss': _ModalBarrier_onDismiss$,
        'barrierSemanticsDismissible':
            _ModalBarrier_barrierSemanticsDismissible$,
        'semanticsLabel': _ModalBarrier_semanticsLabel$,
        'clipDetailsNotifier': _ModalBarrier_clipDetailsNotifier$,
        'semanticsOnTapHint': _ModalBarrier_semanticsOnTapHint$,
        'build': _ModalBarrier_build$,
      },
      {},
    ),
    'AnimatedModalBarrier': m.ClassMirror(
      'AnimatedModalBarrier',
      {
        '#as': AnimatedModalBarrier_as$,
        '#is': AnimatedModalBarrier_is$,
        'dismissible': _AnimatedModalBarrier_dismissible$,
        'semanticsLabel': _AnimatedModalBarrier_semanticsLabel$,
        'barrierSemanticsDismissible':
            _AnimatedModalBarrier_barrierSemanticsDismissible$,
        'onDismiss': _AnimatedModalBarrier_onDismiss$,
        'clipDetailsNotifier': _AnimatedModalBarrier_clipDetailsNotifier$,
        'semanticsOnTapHint': _AnimatedModalBarrier_semanticsOnTapHint$,
        'color': _AnimatedModalBarrier_color$,
        'build': _AnimatedModalBarrier_build$,
      },
      {},
    ),
  },
);
Function ModalBarrier_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ModalBarrier;
Function ModalBarrier_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ModalBarrier;
Function _ModalBarrier_color$(
  m.Scope scope$,
  ModalBarrier target$,
) =>
    () {
      return target$.color;
    };
Function _ModalBarrier_dismissible$(
  m.Scope scope$,
  ModalBarrier target$,
) =>
    () {
      return target$.dismissible;
    };
Function _ModalBarrier_onDismiss$(
  m.Scope scope$,
  ModalBarrier target$,
) =>
    () {
      return target$.onDismiss;
    };
Function _ModalBarrier_barrierSemanticsDismissible$(
  m.Scope scope$,
  ModalBarrier target$,
) =>
    () {
      return target$.barrierSemanticsDismissible;
    };
Function _ModalBarrier_semanticsLabel$(
  m.Scope scope$,
  ModalBarrier target$,
) =>
    () {
      return target$.semanticsLabel;
    };
Function _ModalBarrier_clipDetailsNotifier$(
  m.Scope scope$,
  ModalBarrier target$,
) =>
    () {
      return target$.clipDetailsNotifier;
    };
Function _ModalBarrier_semanticsOnTapHint$(
  m.Scope scope$,
  ModalBarrier target$,
) =>
    () {
      return target$.semanticsOnTapHint;
    };
Function _ModalBarrier__$(m.Scope scope$) => ({
      Key? key,
      Color? color,
      bool? dismissible,
      m.FunctionPointer? onDismiss,
      String? semanticsLabel,
      bool? barrierSemanticsDismissible,
      ValueNotifier<EdgeInsets>? clipDetailsNotifier,
      String? semanticsOnTapHint,
    }) {
      void onDismissProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onDismiss!,
            [],
            {},
          );
      return ModalBarrier(
        barrierSemanticsDismissible: barrierSemanticsDismissible ?? true,
        clipDetailsNotifier: clipDetailsNotifier,
        color: color,
        dismissible: dismissible ?? true,
        key: key,
        onDismiss: onDismiss == null ? null : onDismissProxy,
        semanticsLabel: semanticsLabel,
        semanticsOnTapHint: semanticsOnTapHint,
      );
    };
Function _ModalBarrier_build$(
  m.Scope scope$,
  ModalBarrier target$,
) =>
    target$.build;
Function AnimatedModalBarrier_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AnimatedModalBarrier;
Function AnimatedModalBarrier_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AnimatedModalBarrier;
Function _AnimatedModalBarrier_dismissible$(
  m.Scope scope$,
  AnimatedModalBarrier target$,
) =>
    () {
      return target$.dismissible;
    };
Function _AnimatedModalBarrier_semanticsLabel$(
  m.Scope scope$,
  AnimatedModalBarrier target$,
) =>
    () {
      return target$.semanticsLabel;
    };
Function _AnimatedModalBarrier_barrierSemanticsDismissible$(
  m.Scope scope$,
  AnimatedModalBarrier target$,
) =>
    () {
      return target$.barrierSemanticsDismissible;
    };
Function _AnimatedModalBarrier_onDismiss$(
  m.Scope scope$,
  AnimatedModalBarrier target$,
) =>
    () {
      return target$.onDismiss;
    };
Function _AnimatedModalBarrier_clipDetailsNotifier$(
  m.Scope scope$,
  AnimatedModalBarrier target$,
) =>
    () {
      return target$.clipDetailsNotifier;
    };
Function _AnimatedModalBarrier_semanticsOnTapHint$(
  m.Scope scope$,
  AnimatedModalBarrier target$,
) =>
    () {
      return target$.semanticsOnTapHint;
    };
Function _AnimatedModalBarrier_color$(
  m.Scope scope$,
  AnimatedModalBarrier target$,
) =>
    () {
      return target$.color;
    };
Function _AnimatedModalBarrier__$(m.Scope scope$) => ({
      Key? key,
      required Animation<Color> color,
      bool? dismissible,
      String? semanticsLabel,
      bool? barrierSemanticsDismissible,
      m.FunctionPointer? onDismiss,
      ValueNotifier<EdgeInsets>? clipDetailsNotifier,
      String? semanticsOnTapHint,
    }) {
      void onDismissProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onDismiss!,
            [],
            {},
          );
      return AnimatedModalBarrier(
        barrierSemanticsDismissible: barrierSemanticsDismissible,
        clipDetailsNotifier: clipDetailsNotifier,
        color: color,
        dismissible: dismissible ?? true,
        key: key,
        onDismiss: onDismiss == null ? null : onDismissProxy,
        semanticsLabel: semanticsLabel,
        semanticsOnTapHint: semanticsOnTapHint,
      );
    };
Function _AnimatedModalBarrier_build$(
  m.Scope scope$,
  AnimatedModalBarrier target$,
) =>
    target$.build;
