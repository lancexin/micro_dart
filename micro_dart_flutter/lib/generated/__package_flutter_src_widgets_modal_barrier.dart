// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/modal_barrier.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/gesture_detector.dart';
import 'package:flutter/src/widgets/navigator.dart';
import 'package:flutter/src/widgets/transitions.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/modal_barrier.dart',
  {},
  {},
  {
    'ModalBarrier': m.ClassMirror(
      'ModalBarrier',
      {
        '#as': ModalBarrier_as$,
        '#is': ModalBarrier_is$,
        'color': _ModalBarrier_color$,
        'dismissible': _ModalBarrier_dismissible$,
        'onDismiss': _ModalBarrier_onDismiss$,
        'barrierSemanticsDismissible':
            _ModalBarrier_barrierSemanticsDismissible$,
        'semanticsLabel': _ModalBarrier_semanticsLabel$,
        'clipDetailsNotifier': _ModalBarrier_clipDetailsNotifier$,
        'semanticsOnTapHint': _ModalBarrier_semanticsOnTapHint$,
        'build': _ModalBarrier_build$,
      },
      {},
    ),
    'AnimatedModalBarrier': m.ClassMirror(
      'AnimatedModalBarrier',
      {
        '#as': AnimatedModalBarrier_as$,
        '#is': AnimatedModalBarrier_is$,
        'dismissible': _AnimatedModalBarrier_dismissible$,
        'semanticsLabel': _AnimatedModalBarrier_semanticsLabel$,
        'barrierSemanticsDismissible':
            _AnimatedModalBarrier_barrierSemanticsDismissible$,
        'onDismiss': _AnimatedModalBarrier_onDismiss$,
        'clipDetailsNotifier': _AnimatedModalBarrier_clipDetailsNotifier$,
        'semanticsOnTapHint': _AnimatedModalBarrier_semanticsOnTapHint$,
        'color': _AnimatedModalBarrier_color$,
        'build': _AnimatedModalBarrier_build$,
      },
      {},
    ),
  },
);
Function ModalBarrier_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ModalBarrier;
Function ModalBarrier_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ModalBarrier;
Color? _ModalBarrier_color$(ModalBarrier target) {
  return target.color;
}

bool _ModalBarrier_dismissible$(ModalBarrier target) {
  return target.dismissible;
}

void Function()? _ModalBarrier_onDismiss$(ModalBarrier target) {
  return target.onDismiss;
}

bool? _ModalBarrier_barrierSemanticsDismissible$(ModalBarrier target) {
  return target.barrierSemanticsDismissible;
}

String? _ModalBarrier_semanticsLabel$(ModalBarrier target) {
  return target.semanticsLabel;
}

ValueNotifier<EdgeInsets>? _ModalBarrier_clipDetailsNotifier$(
    ModalBarrier target) {
  return target.clipDetailsNotifier;
}

String? _ModalBarrier_semanticsOnTapHint$(ModalBarrier target) {
  return target.semanticsOnTapHint;
}

Function _ModalBarrier_build$(
  m.Scope scope,
  ModalBarrier target,
) =>
    target.build;
Function AnimatedModalBarrier_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AnimatedModalBarrier;
Function AnimatedModalBarrier_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AnimatedModalBarrier;
bool _AnimatedModalBarrier_dismissible$(AnimatedModalBarrier target) {
  return target.dismissible;
}

String? _AnimatedModalBarrier_semanticsLabel$(AnimatedModalBarrier target) {
  return target.semanticsLabel;
}

bool? _AnimatedModalBarrier_barrierSemanticsDismissible$(
    AnimatedModalBarrier target) {
  return target.barrierSemanticsDismissible;
}

void Function()? _AnimatedModalBarrier_onDismiss$(AnimatedModalBarrier target) {
  return target.onDismiss;
}

ValueNotifier<EdgeInsets>? _AnimatedModalBarrier_clipDetailsNotifier$(
    AnimatedModalBarrier target) {
  return target.clipDetailsNotifier;
}

String? _AnimatedModalBarrier_semanticsOnTapHint$(AnimatedModalBarrier target) {
  return target.semanticsOnTapHint;
}

Animation<Color?> _AnimatedModalBarrier_color$(AnimatedModalBarrier target) {
  return target.color;
}

Function _AnimatedModalBarrier_build$(
  m.Scope scope,
  AnimatedModalBarrier target,
) =>
    target.build;
