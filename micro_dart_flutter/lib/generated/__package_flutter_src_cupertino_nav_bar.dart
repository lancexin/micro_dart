// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/nav_bar.dart';
import 'dart:math';
import 'dart:ui' show ImageFilter;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/button.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/constants.dart';
import 'package:flutter/src/cupertino/icons.dart';
import 'package:flutter/src/cupertino/page_scaffold.dart';
import 'package:flutter/src/cupertino/route.dart';
import 'package:flutter/src/cupertino/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/nav_bar.dart',
  {
    'CupertinoNavigationBar.': _CupertinoNavigationBar__$,
    'CupertinoSliverNavigationBar.': _CupertinoSliverNavigationBar__$,
    'CupertinoNavigationBarBackButton.': _CupertinoNavigationBarBackButton__$,
  },
  {},
  {
    'CupertinoNavigationBar': m.ClassMirror(
      'CupertinoNavigationBar',
      {
        '#as': CupertinoNavigationBar_as$,
        '#is': CupertinoNavigationBar_is$,
        'leading': _CupertinoNavigationBar_leading$,
        'automaticallyImplyLeading':
            _CupertinoNavigationBar_automaticallyImplyLeading$,
        'automaticallyImplyMiddle':
            _CupertinoNavigationBar_automaticallyImplyMiddle$,
        'previousPageTitle': _CupertinoNavigationBar_previousPageTitle$,
        'middle': _CupertinoNavigationBar_middle$,
        'trailing': _CupertinoNavigationBar_trailing$,
        'backgroundColor': _CupertinoNavigationBar_backgroundColor$,
        'brightness': _CupertinoNavigationBar_brightness$,
        'padding': _CupertinoNavigationBar_padding$,
        'border': _CupertinoNavigationBar_border$,
        'transitionBetweenRoutes':
            _CupertinoNavigationBar_transitionBetweenRoutes$,
        'heroTag': _CupertinoNavigationBar_heroTag$,
        'preferredSize': _CupertinoNavigationBar_preferredSize$,
        'shouldFullyObstruct': _CupertinoNavigationBar_shouldFullyObstruct$,
        'createState': _CupertinoNavigationBar_createState$,
      },
      {},
    ),
    'CupertinoSliverNavigationBar': m.ClassMirror(
      'CupertinoSliverNavigationBar',
      {
        '#as': CupertinoSliverNavigationBar_as$,
        '#is': CupertinoSliverNavigationBar_is$,
        'largeTitle': _CupertinoSliverNavigationBar_largeTitle$,
        'leading': _CupertinoSliverNavigationBar_leading$,
        'automaticallyImplyLeading':
            _CupertinoSliverNavigationBar_automaticallyImplyLeading$,
        'automaticallyImplyTitle':
            _CupertinoSliverNavigationBar_automaticallyImplyTitle$,
        'alwaysShowMiddle': _CupertinoSliverNavigationBar_alwaysShowMiddle$,
        'previousPageTitle': _CupertinoSliverNavigationBar_previousPageTitle$,
        'middle': _CupertinoSliverNavigationBar_middle$,
        'trailing': _CupertinoSliverNavigationBar_trailing$,
        'backgroundColor': _CupertinoSliverNavigationBar_backgroundColor$,
        'brightness': _CupertinoSliverNavigationBar_brightness$,
        'padding': _CupertinoSliverNavigationBar_padding$,
        'border': _CupertinoSliverNavigationBar_border$,
        'transitionBetweenRoutes':
            _CupertinoSliverNavigationBar_transitionBetweenRoutes$,
        'heroTag': _CupertinoSliverNavigationBar_heroTag$,
        'stretch': _CupertinoSliverNavigationBar_stretch$,
        'opaque': _CupertinoSliverNavigationBar_opaque$,
        'createState': _CupertinoSliverNavigationBar_createState$,
      },
      {},
    ),
    'CupertinoNavigationBarBackButton': m.ClassMirror(
      'CupertinoNavigationBarBackButton',
      {
        '#as': CupertinoNavigationBarBackButton_as$,
        '#is': CupertinoNavigationBarBackButton_is$,
        'color': _CupertinoNavigationBarBackButton_color$,
        'previousPageTitle':
            _CupertinoNavigationBarBackButton_previousPageTitle$,
        'onPressed': _CupertinoNavigationBarBackButton_onPressed$,
        'build': _CupertinoNavigationBarBackButton_build$,
      },
      {},
    ),
  },
);
Function CupertinoNavigationBar_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoNavigationBar;
Function CupertinoNavigationBar_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoNavigationBar;
Function _CupertinoNavigationBar_leading$(
  m.Scope scope$,
  CupertinoNavigationBar target$,
) =>
    () {
      return target$.leading;
    };
Function _CupertinoNavigationBar_automaticallyImplyLeading$(
  m.Scope scope$,
  CupertinoNavigationBar target$,
) =>
    () {
      return target$.automaticallyImplyLeading;
    };
Function _CupertinoNavigationBar_automaticallyImplyMiddle$(
  m.Scope scope$,
  CupertinoNavigationBar target$,
) =>
    () {
      return target$.automaticallyImplyMiddle;
    };
Function _CupertinoNavigationBar_previousPageTitle$(
  m.Scope scope$,
  CupertinoNavigationBar target$,
) =>
    () {
      return target$.previousPageTitle;
    };
Function _CupertinoNavigationBar_middle$(
  m.Scope scope$,
  CupertinoNavigationBar target$,
) =>
    () {
      return target$.middle;
    };
Function _CupertinoNavigationBar_trailing$(
  m.Scope scope$,
  CupertinoNavigationBar target$,
) =>
    () {
      return target$.trailing;
    };
Function _CupertinoNavigationBar_backgroundColor$(
  m.Scope scope$,
  CupertinoNavigationBar target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _CupertinoNavigationBar_brightness$(
  m.Scope scope$,
  CupertinoNavigationBar target$,
) =>
    () {
      return target$.brightness;
    };
Function _CupertinoNavigationBar_padding$(
  m.Scope scope$,
  CupertinoNavigationBar target$,
) =>
    () {
      return target$.padding;
    };
Function _CupertinoNavigationBar_border$(
  m.Scope scope$,
  CupertinoNavigationBar target$,
) =>
    () {
      return target$.border;
    };
Function _CupertinoNavigationBar_transitionBetweenRoutes$(
  m.Scope scope$,
  CupertinoNavigationBar target$,
) =>
    () {
      return target$.transitionBetweenRoutes;
    };
Function _CupertinoNavigationBar_heroTag$(
  m.Scope scope$,
  CupertinoNavigationBar target$,
) =>
    () {
      return target$.heroTag;
    };
Function _CupertinoNavigationBar_preferredSize$(
  m.Scope scope$,
  CupertinoNavigationBar target$,
) =>
    () {
      return target$.preferredSize;
    };

// There's a single tag for all instances of navigation bars because they can
// all transition between each other (per Navigator) via Hero transitions.
const _HeroTag _defaultHeroTag = _HeroTag(null);

@immutable
class _HeroTag {
  const _HeroTag(this.navigator);

  final NavigatorState? navigator;

  // Let the Hero tag be described in tree dumps.
  @override
  String toString() =>
      'Default Hero tag for Cupertino navigation bars with navigator $navigator';

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other.runtimeType != runtimeType) {
      return false;
    }
    return other is _HeroTag && other.navigator == navigator;
  }

  @override
  int get hashCode => identityHashCode(navigator);
}

Function _CupertinoNavigationBar__$(m.Scope scope$) => ({
      Key? key,
      Widget? leading,
      bool? automaticallyImplyLeading,
      bool? automaticallyImplyMiddle,
      String? previousPageTitle,
      Widget? middle,
      Widget? trailing,
      Border? border,
      Color? backgroundColor,
      Brightness? brightness,
      EdgeInsetsDirectional? padding,
      bool? transitionBetweenRoutes,
      Object? heroTag,
    }) {
      return CupertinoNavigationBar(
        automaticallyImplyLeading: automaticallyImplyLeading ?? true,
        automaticallyImplyMiddle: automaticallyImplyMiddle ?? true,
        backgroundColor: backgroundColor,
        border: border ??
            const Border(
              bottom: BorderSide(
                color: Color(0x4D000000),
                width: 0.0,
              ),
            ),
        brightness: brightness,
        heroTag: heroTag ?? _defaultHeroTag,
        key: key,
        leading: leading,
        middle: middle,
        padding: padding,
        previousPageTitle: previousPageTitle,
        trailing: trailing,
        transitionBetweenRoutes: transitionBetweenRoutes ?? true,
      );
    };
Function _CupertinoNavigationBar_shouldFullyObstruct$(
  m.Scope scope$,
  CupertinoNavigationBar target$,
) =>
    target$.shouldFullyObstruct;
Function _CupertinoNavigationBar_createState$(
  m.Scope scope$,
  CupertinoNavigationBar target$,
) =>
    target$.createState;
Function CupertinoSliverNavigationBar_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoSliverNavigationBar;
Function CupertinoSliverNavigationBar_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoSliverNavigationBar;
Function _CupertinoSliverNavigationBar_largeTitle$(
  m.Scope scope$,
  CupertinoSliverNavigationBar target$,
) =>
    () {
      return target$.largeTitle;
    };
Function _CupertinoSliverNavigationBar_leading$(
  m.Scope scope$,
  CupertinoSliverNavigationBar target$,
) =>
    () {
      return target$.leading;
    };
Function _CupertinoSliverNavigationBar_automaticallyImplyLeading$(
  m.Scope scope$,
  CupertinoSliverNavigationBar target$,
) =>
    () {
      return target$.automaticallyImplyLeading;
    };
Function _CupertinoSliverNavigationBar_automaticallyImplyTitle$(
  m.Scope scope$,
  CupertinoSliverNavigationBar target$,
) =>
    () {
      return target$.automaticallyImplyTitle;
    };
Function _CupertinoSliverNavigationBar_alwaysShowMiddle$(
  m.Scope scope$,
  CupertinoSliverNavigationBar target$,
) =>
    () {
      return target$.alwaysShowMiddle;
    };
Function _CupertinoSliverNavigationBar_previousPageTitle$(
  m.Scope scope$,
  CupertinoSliverNavigationBar target$,
) =>
    () {
      return target$.previousPageTitle;
    };
Function _CupertinoSliverNavigationBar_middle$(
  m.Scope scope$,
  CupertinoSliverNavigationBar target$,
) =>
    () {
      return target$.middle;
    };
Function _CupertinoSliverNavigationBar_trailing$(
  m.Scope scope$,
  CupertinoSliverNavigationBar target$,
) =>
    () {
      return target$.trailing;
    };
Function _CupertinoSliverNavigationBar_backgroundColor$(
  m.Scope scope$,
  CupertinoSliverNavigationBar target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _CupertinoSliverNavigationBar_brightness$(
  m.Scope scope$,
  CupertinoSliverNavigationBar target$,
) =>
    () {
      return target$.brightness;
    };
Function _CupertinoSliverNavigationBar_padding$(
  m.Scope scope$,
  CupertinoSliverNavigationBar target$,
) =>
    () {
      return target$.padding;
    };
Function _CupertinoSliverNavigationBar_border$(
  m.Scope scope$,
  CupertinoSliverNavigationBar target$,
) =>
    () {
      return target$.border;
    };
Function _CupertinoSliverNavigationBar_transitionBetweenRoutes$(
  m.Scope scope$,
  CupertinoSliverNavigationBar target$,
) =>
    () {
      return target$.transitionBetweenRoutes;
    };
Function _CupertinoSliverNavigationBar_heroTag$(
  m.Scope scope$,
  CupertinoSliverNavigationBar target$,
) =>
    () {
      return target$.heroTag;
    };
Function _CupertinoSliverNavigationBar_stretch$(
  m.Scope scope$,
  CupertinoSliverNavigationBar target$,
) =>
    () {
      return target$.stretch;
    };
Function _CupertinoSliverNavigationBar_opaque$(
  m.Scope scope$,
  CupertinoSliverNavigationBar target$,
) =>
    () {
      return target$.opaque;
    };
Function _CupertinoSliverNavigationBar__$(m.Scope scope$) => ({
      Key? key,
      Widget? largeTitle,
      Widget? leading,
      bool? automaticallyImplyLeading,
      bool? automaticallyImplyTitle,
      bool? alwaysShowMiddle,
      String? previousPageTitle,
      Widget? middle,
      Widget? trailing,
      Border? border,
      Color? backgroundColor,
      Brightness? brightness,
      EdgeInsetsDirectional? padding,
      bool? transitionBetweenRoutes,
      Object? heroTag,
      bool? stretch,
    }) {
      return CupertinoSliverNavigationBar(
        alwaysShowMiddle: alwaysShowMiddle ?? true,
        automaticallyImplyLeading: automaticallyImplyLeading ?? true,
        automaticallyImplyTitle: automaticallyImplyTitle ?? true,
        backgroundColor: backgroundColor,
        border: border ??
            const Border(
              bottom: BorderSide(
                color: Color(0x4D000000),
                width: 0.0,
              ),
            ),
        brightness: brightness,
        heroTag: heroTag ?? _defaultHeroTag,
        key: key,
        largeTitle: largeTitle,
        leading: leading,
        middle: middle,
        padding: padding,
        previousPageTitle: previousPageTitle,
        stretch: stretch ?? false,
        trailing: trailing,
        transitionBetweenRoutes: transitionBetweenRoutes ?? true,
      );
    };
Function _CupertinoSliverNavigationBar_createState$(
  m.Scope scope$,
  CupertinoSliverNavigationBar target$,
) =>
    target$.createState;
Function CupertinoNavigationBarBackButton_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoNavigationBarBackButton;
Function CupertinoNavigationBarBackButton_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoNavigationBarBackButton;
Function _CupertinoNavigationBarBackButton_color$(
  m.Scope scope$,
  CupertinoNavigationBarBackButton target$,
) =>
    () {
      return target$.color;
    };
Function _CupertinoNavigationBarBackButton_previousPageTitle$(
  m.Scope scope$,
  CupertinoNavigationBarBackButton target$,
) =>
    () {
      return target$.previousPageTitle;
    };
Function _CupertinoNavigationBarBackButton_onPressed$(
  m.Scope scope$,
  CupertinoNavigationBarBackButton target$,
) =>
    () {
      return target$.onPressed;
    };
Function _CupertinoNavigationBarBackButton__$(m.Scope scope$) => ({
      Key? key,
      Color? color,
      String? previousPageTitle,
      m.FunctionPointer? onPressed,
    }) {
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return CupertinoNavigationBarBackButton(
        color: color,
        key: key,
        onPressed: onPressed == null ? null : onPressedProxy,
        previousPageTitle: previousPageTitle,
      );
    };
Function _CupertinoNavigationBarBackButton_build$(
  m.Scope scope$,
  CupertinoNavigationBarBackButton target$,
) =>
    target$.build;
