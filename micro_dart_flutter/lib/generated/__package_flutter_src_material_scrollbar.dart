// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/scrollbar.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/scrollbar_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/scrollbar.dart',
  {},
  {},
  {
    'Scrollbar': m.ClassMirror(
      'Scrollbar',
      {
        '#as': Scrollbar_as$,
        '#is': Scrollbar_is$,
        'child': _Scrollbar_child$,
        'controller': _Scrollbar_controller$,
        'thumbVisibility': _Scrollbar_thumbVisibility$,
        'isAlwaysShown': _Scrollbar_isAlwaysShown$,
        'trackVisibility': _Scrollbar_trackVisibility$,
        'showTrackOnHover': _Scrollbar_showTrackOnHover$,
        'hoverThickness': _Scrollbar_hoverThickness$,
        'thickness': _Scrollbar_thickness$,
        'radius': _Scrollbar_radius$,
        'interactive': _Scrollbar_interactive$,
        'notificationPredicate': _Scrollbar_notificationPredicate$,
        'scrollbarOrientation': _Scrollbar_scrollbarOrientation$,
        'build': _Scrollbar_build$,
      },
      {},
    )
  },
);
Function Scrollbar_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Scrollbar;
Function Scrollbar_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Scrollbar;
Widget _Scrollbar_child$(Scrollbar target) {
  return target.child;
}

ScrollController? _Scrollbar_controller$(Scrollbar target) {
  return target.controller;
}

bool? _Scrollbar_thumbVisibility$(Scrollbar target) {
  return target.thumbVisibility;
}

bool? _Scrollbar_isAlwaysShown$(Scrollbar target) {
  return target.isAlwaysShown;
}

bool? _Scrollbar_trackVisibility$(Scrollbar target) {
  return target.trackVisibility;
}

bool? _Scrollbar_showTrackOnHover$(Scrollbar target) {
  return target.showTrackOnHover;
}

double? _Scrollbar_hoverThickness$(Scrollbar target) {
  return target.hoverThickness;
}

double? _Scrollbar_thickness$(Scrollbar target) {
  return target.thickness;
}

Radius? _Scrollbar_radius$(Scrollbar target) {
  return target.radius;
}

bool? _Scrollbar_interactive$(Scrollbar target) {
  return target.interactive;
}

bool Function(ScrollNotification)? _Scrollbar_notificationPredicate$(
    Scrollbar target) {
  return target.notificationPredicate;
}

ScrollbarOrientation? _Scrollbar_scrollbarOrientation$(Scrollbar target) {
  return target.scrollbarOrientation;
}

Function _Scrollbar_build$(
  m.Scope scope,
  Scrollbar target,
) =>
    target.build;
