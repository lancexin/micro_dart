// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/scrollbar.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/scrollbar_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/scrollbar.dart',
  {'Scrollbar.': _Scrollbar__$},
  {},
  {
    'Scrollbar': m.ClassMirror(
      'Scrollbar',
      {
        '#as': Scrollbar_as$,
        '#is': Scrollbar_is$,
        'child': _Scrollbar_child$,
        'controller': _Scrollbar_controller$,
        'thumbVisibility': _Scrollbar_thumbVisibility$,
        //    'isAlwaysShown': _Scrollbar_isAlwaysShown$,
        'trackVisibility': _Scrollbar_trackVisibility$,
        'showTrackOnHover': _Scrollbar_showTrackOnHover$,
        //   'hoverThickness': _Scrollbar_hoverThickness$,
        'thickness': _Scrollbar_thickness$,
        'radius': _Scrollbar_radius$,
        'interactive': _Scrollbar_interactive$,
        'notificationPredicate': _Scrollbar_notificationPredicate$,
        'scrollbarOrientation': _Scrollbar_scrollbarOrientation$,
        'build': _Scrollbar_build$,
      },
      {},
    )
  },
);
Function Scrollbar_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Scrollbar;
Function Scrollbar_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Scrollbar;
Function _Scrollbar_child$(
  m.Scope scope$,
  Scrollbar target$,
) =>
    () {
      return target$.child;
    };
Function _Scrollbar_controller$(
  m.Scope scope$,
  Scrollbar target$,
) =>
    () {
      return target$.controller;
    };
Function _Scrollbar_thumbVisibility$(
  m.Scope scope$,
  Scrollbar target$,
) =>
    () {
      return target$.thumbVisibility;
    };
// Function _Scrollbar_isAlwaysShown$(
//   m.Scope scope$,
//   Scrollbar target$,
// ) =>
//     () {
//       return target$.isAlwaysShown;
//     };
Function _Scrollbar_trackVisibility$(
  m.Scope scope$,
  Scrollbar target$,
) =>
    () {
      return target$.trackVisibility;
    };
Function _Scrollbar_showTrackOnHover$(
  m.Scope scope$,
  Scrollbar target$,
) =>
    () {
      return target$.showTrackOnHover;
    };
// Function _Scrollbar_hoverThickness$(
//   m.Scope scope$,
//   Scrollbar target$,
// ) =>
//     () {
//       return target$.hoverThickness;
//     };
Function _Scrollbar_thickness$(
  m.Scope scope$,
  Scrollbar target$,
) =>
    () {
      return target$.thickness;
    };
Function _Scrollbar_radius$(
  m.Scope scope$,
  Scrollbar target$,
) =>
    () {
      return target$.radius;
    };
Function _Scrollbar_interactive$(
  m.Scope scope$,
  Scrollbar target$,
) =>
    () {
      return target$.interactive;
    };
Function _Scrollbar_notificationPredicate$(
  m.Scope scope$,
  Scrollbar target$,
) =>
    () {
      return target$.notificationPredicate;
    };
Function _Scrollbar_scrollbarOrientation$(
  m.Scope scope$,
  Scrollbar target$,
) =>
    () {
      return target$.scrollbarOrientation;
    };
Function _Scrollbar__$(m.Scope scope$) => ({
      Key? key,
      required Widget child,
      ScrollController? controller,
      bool? thumbVisibility,
      bool? trackVisibility,
      double? thickness,
      Radius? radius,
      m.FunctionPointer? notificationPredicate,
      bool? interactive,
      ScrollbarOrientation? scrollbarOrientation,
      bool? isAlwaysShown,
      bool? showTrackOnHover,
      double? hoverThickness,
    }) {
      bool notificationPredicateProxy(
              ScrollNotification notificationPredicate_notification$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            notificationPredicate!,
            [notificationPredicate_notification$],
            {},
          );
      return Scrollbar(
        child: child,
        controller: controller,
        //  hoverThickness: hoverThickness,
        interactive: interactive,
        //  isAlwaysShown: isAlwaysShown,
        key: key,
        notificationPredicate:
            notificationPredicate == null ? null : notificationPredicateProxy,
        radius: radius,
        scrollbarOrientation: scrollbarOrientation,
        showTrackOnHover: showTrackOnHover,
        thickness: thickness,
        thumbVisibility: thumbVisibility,
        trackVisibility: trackVisibility,
      );
    };
Function _Scrollbar_build$(
  m.Scope scope$,
  Scrollbar target$,
) =>
    target$.build;
