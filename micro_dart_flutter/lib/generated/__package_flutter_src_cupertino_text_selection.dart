// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/text_selection.dart';
import 'dart:math';
import 'package:flutter/foundation.dart' show clampDouble;
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/localizations.dart';
import 'package:flutter/src/cupertino/text_selection_toolbar.dart';
import 'package:flutter/src/cupertino/text_selection_toolbar_button.dart';
import 'package:flutter/src/cupertino/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/text_selection.dart',
  {
    'cupertinoTextSelectionHandleControls':
        _cupertinoTextSelectionHandleControls$,
    'cupertinoTextSelectionControls': _cupertinoTextSelectionControls$,
    'CupertinoTextSelectionControls.': _CupertinoTextSelectionControls__$,
    'CupertinoTextSelectionControls.buildHandle':
        _CupertinoTextSelectionControls_buildHandle$,
  },
  {},
  {
    'CupertinoTextSelectionControls': m.ClassMirror(
      'CupertinoTextSelectionControls',
      {
        '#as': CupertinoTextSelectionControls_as$,
        '#is': CupertinoTextSelectionControls_is$,
        'getHandleSize': _CupertinoTextSelectionControls_getHandleSize$,
        'getHandleAnchor': _CupertinoTextSelectionControls_getHandleAnchor$,
      },
      {},
    )
  },
);
TextSelectionControls _cupertinoTextSelectionHandleControls$() {
  return cupertinoTextSelectionHandleControls;
}

TextSelectionControls _cupertinoTextSelectionControls$() {
  return cupertinoTextSelectionControls;
}

Function CupertinoTextSelectionControls_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoTextSelectionControls;
Function CupertinoTextSelectionControls_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoTextSelectionControls;
Function _CupertinoTextSelectionControls__$(m.Scope scope$) => () {
      return CupertinoTextSelectionControls();
    };
Function _CupertinoTextSelectionControls_getHandleSize$(
  m.Scope scope$,
  CupertinoTextSelectionControls target$,
) =>
    target$.getHandleSize;
Function _CupertinoTextSelectionControls_buildHandle$(
  m.Scope scope$,
  CupertinoTextSelectionControls target$,
) =>
    (
      BuildContext context,
      TextSelectionHandleType type,
      double textLineHeight, [
      m.FunctionPointer? onTap,
    ]) {
      if (onTap == null) {
        return target$.buildHandle(
          context,
          type,
          textLineHeight,
        );
      }
      void onTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTap!,
            [],
            {},
          );
      return target$.buildHandle(
        context,
        type,
        textLineHeight,
        onTap == null ? null : onTapProxy,
      );
    };
Function _CupertinoTextSelectionControls_getHandleAnchor$(
  m.Scope scope$,
  CupertinoTextSelectionControls target$,
) =>
    target$.getHandleAnchor;
