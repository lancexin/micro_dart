// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/list_tile.dart';
import 'dart:math';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/divider.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icon_button_theme.dart';
import 'package:flutter/src/material/ink_decoration.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/list_tile_theme.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/list_tile.dart',
  {
    'ListTile.divideTiles': _ListTile_divideTiles$,
    'ListTileStyle.list': _ListTileStyle_list$,
    'ListTileStyle.drawer': _ListTileStyle_drawer$,
    'ListTileStyle.values': _ListTileStyle_values$,
    'ListTileControlAffinity.leading': _ListTileControlAffinity_leading$,
    'ListTileControlAffinity.trailing': _ListTileControlAffinity_trailing$,
    'ListTileControlAffinity.platform': _ListTileControlAffinity_platform$,
    'ListTileControlAffinity.values': _ListTileControlAffinity_values$,
    'ListTileTitleAlignment.threeLine': _ListTileTitleAlignment_threeLine$,
    'ListTileTitleAlignment.titleHeight': _ListTileTitleAlignment_titleHeight$,
    'ListTileTitleAlignment.top': _ListTileTitleAlignment_top$,
    'ListTileTitleAlignment.center': _ListTileTitleAlignment_center$,
    'ListTileTitleAlignment.bottom': _ListTileTitleAlignment_bottom$,
    'ListTileTitleAlignment.values': _ListTileTitleAlignment_values$,
  },
  {},
  {
    'ListTile': m.ClassMirror(
      'ListTile',
      {
        '#as': ListTile_as$,
        '#is': ListTile_is$,
        'leading': _ListTile_leading$,
        'title': _ListTile_title$,
        'subtitle': _ListTile_subtitle$,
        'trailing': _ListTile_trailing$,
        'isThreeLine': _ListTile_isThreeLine$,
        'dense': _ListTile_dense$,
        'visualDensity': _ListTile_visualDensity$,
        'shape': _ListTile_shape$,
        'selectedColor': _ListTile_selectedColor$,
        'iconColor': _ListTile_iconColor$,
        'textColor': _ListTile_textColor$,
        'titleTextStyle': _ListTile_titleTextStyle$,
        'subtitleTextStyle': _ListTile_subtitleTextStyle$,
        'leadingAndTrailingTextStyle': _ListTile_leadingAndTrailingTextStyle$,
        'style': _ListTile_style$,
        'contentPadding': _ListTile_contentPadding$,
        'enabled': _ListTile_enabled$,
        'onTap': _ListTile_onTap$,
        'onLongPress': _ListTile_onLongPress$,
        'onFocusChange': _ListTile_onFocusChange$,
        'mouseCursor': _ListTile_mouseCursor$,
        'selected': _ListTile_selected$,
        'focusColor': _ListTile_focusColor$,
        'hoverColor': _ListTile_hoverColor$,
        'splashColor': _ListTile_splashColor$,
        'focusNode': _ListTile_focusNode$,
        'autofocus': _ListTile_autofocus$,
        'tileColor': _ListTile_tileColor$,
        'selectedTileColor': _ListTile_selectedTileColor$,
        'enableFeedback': _ListTile_enableFeedback$,
        'horizontalTitleGap': _ListTile_horizontalTitleGap$,
        'minVerticalPadding': _ListTile_minVerticalPadding$,
        'minLeadingWidth': _ListTile_minLeadingWidth$,
        'titleAlignment': _ListTile_titleAlignment$,
        'build': _ListTile_build$,
        'debugFillProperties': _ListTile_debugFillProperties$,
      },
      {},
    ),
    'ListTileStyle': m.ClassMirror(
      'ListTileStyle',
      {},
      {},
    ),
    'ListTileControlAffinity': m.ClassMirror(
      'ListTileControlAffinity',
      {},
      {},
    ),
    'ListTileTitleAlignment': m.ClassMirror(
      'ListTileTitleAlignment',
      {},
      {},
    ),
  },
);
Function ListTile_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ListTile;
Function ListTile_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ListTile;
Widget? _ListTile_leading$(ListTile target) {
  return target.leading;
}

Widget? _ListTile_title$(ListTile target) {
  return target.title;
}

Widget? _ListTile_subtitle$(ListTile target) {
  return target.subtitle;
}

Widget? _ListTile_trailing$(ListTile target) {
  return target.trailing;
}

bool _ListTile_isThreeLine$(ListTile target) {
  return target.isThreeLine;
}

bool? _ListTile_dense$(ListTile target) {
  return target.dense;
}

VisualDensity? _ListTile_visualDensity$(ListTile target) {
  return target.visualDensity;
}

ShapeBorder? _ListTile_shape$(ListTile target) {
  return target.shape;
}

Color? _ListTile_selectedColor$(ListTile target) {
  return target.selectedColor;
}

Color? _ListTile_iconColor$(ListTile target) {
  return target.iconColor;
}

Color? _ListTile_textColor$(ListTile target) {
  return target.textColor;
}

TextStyle? _ListTile_titleTextStyle$(ListTile target) {
  return target.titleTextStyle;
}

TextStyle? _ListTile_subtitleTextStyle$(ListTile target) {
  return target.subtitleTextStyle;
}

TextStyle? _ListTile_leadingAndTrailingTextStyle$(ListTile target) {
  return target.leadingAndTrailingTextStyle;
}

ListTileStyle? _ListTile_style$(ListTile target) {
  return target.style;
}

EdgeInsetsGeometry? _ListTile_contentPadding$(ListTile target) {
  return target.contentPadding;
}

bool _ListTile_enabled$(ListTile target) {
  return target.enabled;
}

void Function()? _ListTile_onTap$(ListTile target) {
  return target.onTap;
}

void Function()? _ListTile_onLongPress$(ListTile target) {
  return target.onLongPress;
}

void Function(bool)? _ListTile_onFocusChange$(ListTile target) {
  return target.onFocusChange;
}

MouseCursor? _ListTile_mouseCursor$(ListTile target) {
  return target.mouseCursor;
}

bool _ListTile_selected$(ListTile target) {
  return target.selected;
}

Color? _ListTile_focusColor$(ListTile target) {
  return target.focusColor;
}

Color? _ListTile_hoverColor$(ListTile target) {
  return target.hoverColor;
}

Color? _ListTile_splashColor$(ListTile target) {
  return target.splashColor;
}

FocusNode? _ListTile_focusNode$(ListTile target) {
  return target.focusNode;
}

bool _ListTile_autofocus$(ListTile target) {
  return target.autofocus;
}

Color? _ListTile_tileColor$(ListTile target) {
  return target.tileColor;
}

Color? _ListTile_selectedTileColor$(ListTile target) {
  return target.selectedTileColor;
}

bool? _ListTile_enableFeedback$(ListTile target) {
  return target.enableFeedback;
}

double? _ListTile_horizontalTitleGap$(ListTile target) {
  return target.horizontalTitleGap;
}

double? _ListTile_minVerticalPadding$(ListTile target) {
  return target.minVerticalPadding;
}

double? _ListTile_minLeadingWidth$(ListTile target) {
  return target.minLeadingWidth;
}

ListTileTitleAlignment? _ListTile_titleAlignment$(ListTile target) {
  return target.titleAlignment;
}

Function _ListTile_divideTiles$(m.Scope scope) => ListTile.divideTiles;
Function _ListTile_build$(
  m.Scope scope,
  ListTile target,
) =>
    target.build;
Function _ListTile_debugFillProperties$(
  m.Scope scope,
  ListTile target,
) =>
    target.debugFillProperties;
ListTileStyle _ListTileStyle_list$() {
  return ListTileStyle.list;
}

ListTileStyle _ListTileStyle_drawer$() {
  return ListTileStyle.drawer;
}

List<ListTileStyle> _ListTileStyle_values$() {
  return ListTileStyle.values;
}

ListTileControlAffinity _ListTileControlAffinity_leading$() {
  return ListTileControlAffinity.leading;
}

ListTileControlAffinity _ListTileControlAffinity_trailing$() {
  return ListTileControlAffinity.trailing;
}

ListTileControlAffinity _ListTileControlAffinity_platform$() {
  return ListTileControlAffinity.platform;
}

List<ListTileControlAffinity> _ListTileControlAffinity_values$() {
  return ListTileControlAffinity.values;
}

ListTileTitleAlignment _ListTileTitleAlignment_threeLine$() {
  return ListTileTitleAlignment.threeLine;
}

ListTileTitleAlignment _ListTileTitleAlignment_titleHeight$() {
  return ListTileTitleAlignment.titleHeight;
}

ListTileTitleAlignment _ListTileTitleAlignment_top$() {
  return ListTileTitleAlignment.top;
}

ListTileTitleAlignment _ListTileTitleAlignment_center$() {
  return ListTileTitleAlignment.center;
}

ListTileTitleAlignment _ListTileTitleAlignment_bottom$() {
  return ListTileTitleAlignment.bottom;
}

List<ListTileTitleAlignment> _ListTileTitleAlignment_values$() {
  return ListTileTitleAlignment.values;
}
