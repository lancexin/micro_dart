// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/list_tile.dart';
import 'dart:math';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/divider.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icon_button_theme.dart';
import 'package:flutter/src/material/ink_decoration.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/list_tile_theme.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/list_tile.dart',
  {
    'ListTile.': _ListTile__$,
    'ListTile.divideTiles': _ListTile_divideTiles$,
    'ListTileStyle.list': _ListTileStyle_list$,
    'ListTileStyle.drawer': _ListTileStyle_drawer$,
    'ListTileStyle.values': _ListTileStyle_values$,
    'ListTileControlAffinity.leading': _ListTileControlAffinity_leading$,
    'ListTileControlAffinity.trailing': _ListTileControlAffinity_trailing$,
    'ListTileControlAffinity.platform': _ListTileControlAffinity_platform$,
    'ListTileControlAffinity.values': _ListTileControlAffinity_values$,
    'ListTileTitleAlignment.threeLine': _ListTileTitleAlignment_threeLine$,
    'ListTileTitleAlignment.titleHeight': _ListTileTitleAlignment_titleHeight$,
    'ListTileTitleAlignment.top': _ListTileTitleAlignment_top$,
    'ListTileTitleAlignment.center': _ListTileTitleAlignment_center$,
    'ListTileTitleAlignment.bottom': _ListTileTitleAlignment_bottom$,
    'ListTileTitleAlignment.values': _ListTileTitleAlignment_values$,
  },
  {},
  {
    'ListTile': m.ClassMirror(
      'ListTile',
      {
        '#as': ListTile_as$,
        '#is': ListTile_is$,
        'leading': _ListTile_leading$,
        'title': _ListTile_title$,
        'subtitle': _ListTile_subtitle$,
        'trailing': _ListTile_trailing$,
        'isThreeLine': _ListTile_isThreeLine$,
        'dense': _ListTile_dense$,
        'visualDensity': _ListTile_visualDensity$,
        'shape': _ListTile_shape$,
        'selectedColor': _ListTile_selectedColor$,
        'iconColor': _ListTile_iconColor$,
        'textColor': _ListTile_textColor$,
        'titleTextStyle': _ListTile_titleTextStyle$,
        'subtitleTextStyle': _ListTile_subtitleTextStyle$,
        'leadingAndTrailingTextStyle': _ListTile_leadingAndTrailingTextStyle$,
        'style': _ListTile_style$,
        'contentPadding': _ListTile_contentPadding$,
        'enabled': _ListTile_enabled$,
        'onTap': _ListTile_onTap$,
        'onLongPress': _ListTile_onLongPress$,
        'onFocusChange': _ListTile_onFocusChange$,
        'mouseCursor': _ListTile_mouseCursor$,
        'selected': _ListTile_selected$,
        'focusColor': _ListTile_focusColor$,
        'hoverColor': _ListTile_hoverColor$,
        'splashColor': _ListTile_splashColor$,
        'focusNode': _ListTile_focusNode$,
        'autofocus': _ListTile_autofocus$,
        'tileColor': _ListTile_tileColor$,
        'selectedTileColor': _ListTile_selectedTileColor$,
        'enableFeedback': _ListTile_enableFeedback$,
        'horizontalTitleGap': _ListTile_horizontalTitleGap$,
        'minVerticalPadding': _ListTile_minVerticalPadding$,
        'minLeadingWidth': _ListTile_minLeadingWidth$,
        'titleAlignment': _ListTile_titleAlignment$,
        'build': _ListTile_build$,
        'debugFillProperties': _ListTile_debugFillProperties$,
      },
      {},
    ),
    'ListTileStyle': m.ClassMirror(
      'ListTileStyle',
      {},
      {},
    ),
    'ListTileControlAffinity': m.ClassMirror(
      'ListTileControlAffinity',
      {},
      {},
    ),
    'ListTileTitleAlignment': m.ClassMirror(
      'ListTileTitleAlignment',
      {},
      {},
    ),
  },
);
Function ListTile_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ListTile;
Function ListTile_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ListTile;
Function _ListTile_leading$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.leading;
    };
Function _ListTile_title$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.title;
    };
Function _ListTile_subtitle$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.subtitle;
    };
Function _ListTile_trailing$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.trailing;
    };
Function _ListTile_isThreeLine$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.isThreeLine;
    };
Function _ListTile_dense$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.dense;
    };
Function _ListTile_visualDensity$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.visualDensity;
    };
Function _ListTile_shape$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.shape;
    };
Function _ListTile_selectedColor$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.selectedColor;
    };
Function _ListTile_iconColor$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.iconColor;
    };
Function _ListTile_textColor$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.textColor;
    };
Function _ListTile_titleTextStyle$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.titleTextStyle;
    };
Function _ListTile_subtitleTextStyle$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.subtitleTextStyle;
    };
Function _ListTile_leadingAndTrailingTextStyle$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.leadingAndTrailingTextStyle;
    };
Function _ListTile_style$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.style;
    };
Function _ListTile_contentPadding$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.contentPadding;
    };
Function _ListTile_enabled$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.enabled;
    };
Function _ListTile_onTap$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.onTap;
    };
Function _ListTile_onLongPress$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.onLongPress;
    };
Function _ListTile_onFocusChange$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.onFocusChange;
    };
Function _ListTile_mouseCursor$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.mouseCursor;
    };
Function _ListTile_selected$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.selected;
    };
Function _ListTile_focusColor$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.focusColor;
    };
Function _ListTile_hoverColor$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.hoverColor;
    };
Function _ListTile_splashColor$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.splashColor;
    };
Function _ListTile_focusNode$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.focusNode;
    };
Function _ListTile_autofocus$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.autofocus;
    };
Function _ListTile_tileColor$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.tileColor;
    };
Function _ListTile_selectedTileColor$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.selectedTileColor;
    };
Function _ListTile_enableFeedback$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.enableFeedback;
    };
Function _ListTile_horizontalTitleGap$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.horizontalTitleGap;
    };
Function _ListTile_minVerticalPadding$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.minVerticalPadding;
    };
Function _ListTile_minLeadingWidth$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.minLeadingWidth;
    };
Function _ListTile_titleAlignment$(
  m.Scope scope$,
  ListTile target$,
) =>
    () {
      return target$.titleAlignment;
    };
Function _ListTile__$(m.Scope scope$) => ({
      Key? key,
      Widget? leading,
      Widget? title,
      Widget? subtitle,
      Widget? trailing,
      bool? isThreeLine,
      bool? dense,
      VisualDensity? visualDensity,
      ShapeBorder? shape,
      ListTileStyle? style,
      Color? selectedColor,
      Color? iconColor,
      Color? textColor,
      TextStyle? titleTextStyle,
      TextStyle? subtitleTextStyle,
      TextStyle? leadingAndTrailingTextStyle,
      EdgeInsetsGeometry? contentPadding,
      bool? enabled,
      m.FunctionPointer? onTap,
      m.FunctionPointer? onLongPress,
      m.FunctionPointer? onFocusChange,
      MouseCursor? mouseCursor,
      bool? selected,
      Color? focusColor,
      Color? hoverColor,
      Color? splashColor,
      FocusNode? focusNode,
      bool? autofocus,
      Color? tileColor,
      Color? selectedTileColor,
      bool? enableFeedback,
      double? horizontalTitleGap,
      double? minVerticalPadding,
      double? minLeadingWidth,
      ListTileTitleAlignment? titleAlignment,
    }) {
      void onFocusChangeProxy(bool onFocusChange_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onFocusChange!,
            [onFocusChange_value$],
            {},
          );
      void onLongPressProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onLongPress!,
            [],
            {},
          );
      void onTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTap!,
            [],
            {},
          );
      return ListTile(
        autofocus: autofocus ?? false,
        contentPadding: contentPadding,
        dense: dense,
        enableFeedback: enableFeedback,
        enabled: enabled ?? true,
        focusColor: focusColor,
        focusNode: focusNode,
        horizontalTitleGap: horizontalTitleGap,
        hoverColor: hoverColor,
        iconColor: iconColor,
        isThreeLine: isThreeLine ?? false,
        key: key,
        leading: leading,
        leadingAndTrailingTextStyle: leadingAndTrailingTextStyle,
        minLeadingWidth: minLeadingWidth,
        minVerticalPadding: minVerticalPadding,
        mouseCursor: mouseCursor,
        onFocusChange: onFocusChange == null ? null : onFocusChangeProxy,
        onLongPress: onLongPress == null ? null : onLongPressProxy,
        onTap: onTap == null ? null : onTapProxy,
        selected: selected ?? false,
        selectedColor: selectedColor,
        selectedTileColor: selectedTileColor,
        shape: shape,
        splashColor: splashColor,
        style: style,
        subtitle: subtitle,
        subtitleTextStyle: subtitleTextStyle,
        textColor: textColor,
        tileColor: tileColor,
        title: title,
        titleAlignment: titleAlignment,
        titleTextStyle: titleTextStyle,
        trailing: trailing,
        visualDensity: visualDensity,
      );
    };
Function _ListTile_divideTiles$(m.Scope scope$) => ListTile.divideTiles;
Function _ListTile_build$(
  m.Scope scope$,
  ListTile target$,
) =>
    target$.build;
Function _ListTile_debugFillProperties$(
  m.Scope scope$,
  ListTile target$,
) =>
    target$.debugFillProperties;
ListTileStyle _ListTileStyle_list$() {
  return ListTileStyle.list;
}

ListTileStyle _ListTileStyle_drawer$() {
  return ListTileStyle.drawer;
}

List<ListTileStyle> _ListTileStyle_values$() {
  return ListTileStyle.values;
}

ListTileControlAffinity _ListTileControlAffinity_leading$() {
  return ListTileControlAffinity.leading;
}

ListTileControlAffinity _ListTileControlAffinity_trailing$() {
  return ListTileControlAffinity.trailing;
}

ListTileControlAffinity _ListTileControlAffinity_platform$() {
  return ListTileControlAffinity.platform;
}

List<ListTileControlAffinity> _ListTileControlAffinity_values$() {
  return ListTileControlAffinity.values;
}

ListTileTitleAlignment _ListTileTitleAlignment_threeLine$() {
  return ListTileTitleAlignment.threeLine;
}

ListTileTitleAlignment _ListTileTitleAlignment_titleHeight$() {
  return ListTileTitleAlignment.titleHeight;
}

ListTileTitleAlignment _ListTileTitleAlignment_top$() {
  return ListTileTitleAlignment.top;
}

ListTileTitleAlignment _ListTileTitleAlignment_center$() {
  return ListTileTitleAlignment.center;
}

ListTileTitleAlignment _ListTileTitleAlignment_bottom$() {
  return ListTileTitleAlignment.bottom;
}

List<ListTileTitleAlignment> _ListTileTitleAlignment_values$() {
  return ListTileTitleAlignment.values;
}
