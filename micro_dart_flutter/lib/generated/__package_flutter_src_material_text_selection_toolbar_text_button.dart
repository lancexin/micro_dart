// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/text_selection_toolbar_text_button.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/text_button.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/text_selection_toolbar_text_button.dart',
  {
    'TextSelectionToolbarTextButton.': _TextSelectionToolbarTextButton__$,
    'TextSelectionToolbarTextButton.getPadding':
        _TextSelectionToolbarTextButton_getPadding$,
    'TextSelectionToolbarTextButton.copyWith':
        _TextSelectionToolbarTextButton_copyWith$,
  },
  {},
  {
    'TextSelectionToolbarTextButton': m.ClassMirror(
      'TextSelectionToolbarTextButton',
      {
        '#as': TextSelectionToolbarTextButton_as$,
        '#is': TextSelectionToolbarTextButton_is$,
        'child': _TextSelectionToolbarTextButton_child$,
        'onPressed': _TextSelectionToolbarTextButton_onPressed$,
        'padding': _TextSelectionToolbarTextButton_padding$,
        'alignment': _TextSelectionToolbarTextButton_alignment$,
        'build': _TextSelectionToolbarTextButton_build$,
      },
      {},
    )
  },
);
Function TextSelectionToolbarTextButton_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextSelectionToolbarTextButton;
Function TextSelectionToolbarTextButton_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextSelectionToolbarTextButton;
Function _TextSelectionToolbarTextButton_child$(
  m.Scope scope$,
  TextSelectionToolbarTextButton target$,
) =>
    () {
      return target$.child;
    };
Function _TextSelectionToolbarTextButton_onPressed$(
  m.Scope scope$,
  TextSelectionToolbarTextButton target$,
) =>
    () {
      return target$.onPressed;
    };
Function _TextSelectionToolbarTextButton_padding$(
  m.Scope scope$,
  TextSelectionToolbarTextButton target$,
) =>
    () {
      return target$.padding;
    };
Function _TextSelectionToolbarTextButton_alignment$(
  m.Scope scope$,
  TextSelectionToolbarTextButton target$,
) =>
    () {
      return target$.alignment;
    };
Function _TextSelectionToolbarTextButton__$(m.Scope scope$) => ({
      Key? key,
      required Widget child,
      required EdgeInsets padding,
      m.FunctionPointer? onPressed,
      AlignmentGeometry? alignment,
    }) {
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return TextSelectionToolbarTextButton(
        alignment: alignment,
        child: child,
        key: key,
        onPressed: onPressed == null ? null : onPressedProxy,
        padding: padding,
      );
    };
Function _TextSelectionToolbarTextButton_getPadding$(m.Scope scope$) =>
    TextSelectionToolbarTextButton.getPadding;
Function _TextSelectionToolbarTextButton_copyWith$(
  m.Scope scope$,
  TextSelectionToolbarTextButton target$,
) =>
    ({
      Widget? child,
      m.FunctionPointer? onPressed,
      EdgeInsets? padding,
      AlignmentGeometry? alignment,
    }) {
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return target$.copyWith(
        alignment: alignment,
        child: child,
        onPressed: onPressed == null ? null : onPressedProxy,
        padding: padding,
      );
    };
Function _TextSelectionToolbarTextButton_build$(
  m.Scope scope$,
  TextSelectionToolbarTextButton target$,
) =>
    target$.build;
