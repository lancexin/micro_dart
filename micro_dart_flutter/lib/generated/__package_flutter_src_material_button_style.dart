// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/button_style.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/button_style.dart',
  {'ButtonStyle.lerp': _ButtonStyle_lerp$},
  {},
  {
    'ButtonStyle': m.ClassMirror(
      'ButtonStyle',
      {
        '#as': ButtonStyle_as$,
        '#is': ButtonStyle_is$,
        'textStyle': _ButtonStyle_textStyle$,
        'backgroundColor': _ButtonStyle_backgroundColor$,
        'foregroundColor': _ButtonStyle_foregroundColor$,
        'overlayColor': _ButtonStyle_overlayColor$,
        'shadowColor': _ButtonStyle_shadowColor$,
        'surfaceTintColor': _ButtonStyle_surfaceTintColor$,
        'elevation': _ButtonStyle_elevation$,
        'padding': _ButtonStyle_padding$,
        'minimumSize': _ButtonStyle_minimumSize$,
        'fixedSize': _ButtonStyle_fixedSize$,
        'maximumSize': _ButtonStyle_maximumSize$,
        'iconColor': _ButtonStyle_iconColor$,
        'iconSize': _ButtonStyle_iconSize$,
        'side': _ButtonStyle_side$,
        'shape': _ButtonStyle_shape$,
        'mouseCursor': _ButtonStyle_mouseCursor$,
        'visualDensity': _ButtonStyle_visualDensity$,
        'tapTargetSize': _ButtonStyle_tapTargetSize$,
        'animationDuration': _ButtonStyle_animationDuration$,
        'enableFeedback': _ButtonStyle_enableFeedback$,
        'alignment': _ButtonStyle_alignment$,
        'splashFactory': _ButtonStyle_splashFactory$,
        'hashCode': _ButtonStyle_hashCode$,
        'copyWith': _ButtonStyle_copyWith$,
        'merge': _ButtonStyle_merge$,
        '==': _ButtonStyle_eq$$,
        'debugFillProperties': _ButtonStyle_debugFillProperties$,
      },
      {},
    )
  },
);
Function ButtonStyle_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ButtonStyle;
Function ButtonStyle_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ButtonStyle;
MaterialStateProperty<TextStyle?>? _ButtonStyle_textStyle$(ButtonStyle target) {
  return target.textStyle;
}

MaterialStateProperty<Color?>? _ButtonStyle_backgroundColor$(
    ButtonStyle target) {
  return target.backgroundColor;
}

MaterialStateProperty<Color?>? _ButtonStyle_foregroundColor$(
    ButtonStyle target) {
  return target.foregroundColor;
}

MaterialStateProperty<Color?>? _ButtonStyle_overlayColor$(ButtonStyle target) {
  return target.overlayColor;
}

MaterialStateProperty<Color?>? _ButtonStyle_shadowColor$(ButtonStyle target) {
  return target.shadowColor;
}

MaterialStateProperty<Color?>? _ButtonStyle_surfaceTintColor$(
    ButtonStyle target) {
  return target.surfaceTintColor;
}

MaterialStateProperty<double?>? _ButtonStyle_elevation$(ButtonStyle target) {
  return target.elevation;
}

MaterialStateProperty<EdgeInsetsGeometry?>? _ButtonStyle_padding$(
    ButtonStyle target) {
  return target.padding;
}

MaterialStateProperty<Size?>? _ButtonStyle_minimumSize$(ButtonStyle target) {
  return target.minimumSize;
}

MaterialStateProperty<Size?>? _ButtonStyle_fixedSize$(ButtonStyle target) {
  return target.fixedSize;
}

MaterialStateProperty<Size?>? _ButtonStyle_maximumSize$(ButtonStyle target) {
  return target.maximumSize;
}

MaterialStateProperty<Color?>? _ButtonStyle_iconColor$(ButtonStyle target) {
  return target.iconColor;
}

MaterialStateProperty<double?>? _ButtonStyle_iconSize$(ButtonStyle target) {
  return target.iconSize;
}

MaterialStateProperty<BorderSide?>? _ButtonStyle_side$(ButtonStyle target) {
  return target.side;
}

MaterialStateProperty<OutlinedBorder?>? _ButtonStyle_shape$(
    ButtonStyle target) {
  return target.shape;
}

MaterialStateProperty<MouseCursor?>? _ButtonStyle_mouseCursor$(
    ButtonStyle target) {
  return target.mouseCursor;
}

VisualDensity? _ButtonStyle_visualDensity$(ButtonStyle target) {
  return target.visualDensity;
}

MaterialTapTargetSize? _ButtonStyle_tapTargetSize$(ButtonStyle target) {
  return target.tapTargetSize;
}

Duration? _ButtonStyle_animationDuration$(ButtonStyle target) {
  return target.animationDuration;
}

bool? _ButtonStyle_enableFeedback$(ButtonStyle target) {
  return target.enableFeedback;
}

AlignmentGeometry? _ButtonStyle_alignment$(ButtonStyle target) {
  return target.alignment;
}

InteractiveInkFeatureFactory? _ButtonStyle_splashFactory$(ButtonStyle target) {
  return target.splashFactory;
}

int _ButtonStyle_hashCode$(ButtonStyle target) {
  return target.hashCode;
}

Function _ButtonStyle_copyWith$(
  m.Scope scope,
  ButtonStyle target,
) =>
    target.copyWith;
Function _ButtonStyle_merge$(
  m.Scope scope,
  ButtonStyle target,
) =>
    target.merge;
Function _ButtonStyle_eq$$(
  m.Scope scope,
  ButtonStyle target,
) =>
    (Object other) => target == other;
Function _ButtonStyle_debugFillProperties$(
  m.Scope scope,
  ButtonStyle target,
) =>
    target.debugFillProperties;
Function _ButtonStyle_lerp$(m.Scope scope) => ButtonStyle.lerp;
