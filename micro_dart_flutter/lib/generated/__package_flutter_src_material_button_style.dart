// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/button_style.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/button_style.dart',
  {
    'ButtonStyle.': _ButtonStyle__$,
    'ButtonStyle.lerp': _ButtonStyle_lerp$,
  },
  {},
  {
    'ButtonStyle': m.ClassMirror(
      'ButtonStyle',
      {
        '#as': ButtonStyle_as$,
        '#is': ButtonStyle_is$,
        'textStyle': _ButtonStyle_textStyle$,
        'backgroundColor': _ButtonStyle_backgroundColor$,
        'foregroundColor': _ButtonStyle_foregroundColor$,
        'overlayColor': _ButtonStyle_overlayColor$,
        'shadowColor': _ButtonStyle_shadowColor$,
        'surfaceTintColor': _ButtonStyle_surfaceTintColor$,
        'elevation': _ButtonStyle_elevation$,
        'padding': _ButtonStyle_padding$,
        'minimumSize': _ButtonStyle_minimumSize$,
        'fixedSize': _ButtonStyle_fixedSize$,
        'maximumSize': _ButtonStyle_maximumSize$,
        'iconColor': _ButtonStyle_iconColor$,
        'iconSize': _ButtonStyle_iconSize$,
        'side': _ButtonStyle_side$,
        'shape': _ButtonStyle_shape$,
        'mouseCursor': _ButtonStyle_mouseCursor$,
        'visualDensity': _ButtonStyle_visualDensity$,
        'tapTargetSize': _ButtonStyle_tapTargetSize$,
        'animationDuration': _ButtonStyle_animationDuration$,
        'enableFeedback': _ButtonStyle_enableFeedback$,
        'alignment': _ButtonStyle_alignment$,
        'splashFactory': _ButtonStyle_splashFactory$,
        'hashCode': _ButtonStyle_hashCode$,
        'copyWith': _ButtonStyle_copyWith$,
        'merge': _ButtonStyle_merge$,
        '==': _ButtonStyle_eq$$,
        'debugFillProperties': _ButtonStyle_debugFillProperties$,
      },
      {},
    )
  },
);
Function ButtonStyle_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ButtonStyle;
Function ButtonStyle_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ButtonStyle;
Function _ButtonStyle_textStyle$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    () {
      return target$.textStyle;
    };
Function _ButtonStyle_backgroundColor$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _ButtonStyle_foregroundColor$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    () {
      return target$.foregroundColor;
    };
Function _ButtonStyle_overlayColor$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    () {
      return target$.overlayColor;
    };
Function _ButtonStyle_shadowColor$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _ButtonStyle_surfaceTintColor$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _ButtonStyle_elevation$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    () {
      return target$.elevation;
    };
Function _ButtonStyle_padding$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    () {
      return target$.padding;
    };
Function _ButtonStyle_minimumSize$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    () {
      return target$.minimumSize;
    };
Function _ButtonStyle_fixedSize$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    () {
      return target$.fixedSize;
    };
Function _ButtonStyle_maximumSize$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    () {
      return target$.maximumSize;
    };
Function _ButtonStyle_iconColor$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    () {
      return target$.iconColor;
    };
Function _ButtonStyle_iconSize$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    () {
      return target$.iconSize;
    };
Function _ButtonStyle_side$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    () {
      return target$.side;
    };
Function _ButtonStyle_shape$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    () {
      return target$.shape;
    };
Function _ButtonStyle_mouseCursor$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    () {
      return target$.mouseCursor;
    };
Function _ButtonStyle_visualDensity$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    () {
      return target$.visualDensity;
    };
Function _ButtonStyle_tapTargetSize$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    () {
      return target$.tapTargetSize;
    };
Function _ButtonStyle_animationDuration$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    () {
      return target$.animationDuration;
    };
Function _ButtonStyle_enableFeedback$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    () {
      return target$.enableFeedback;
    };
Function _ButtonStyle_alignment$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    () {
      return target$.alignment;
    };
Function _ButtonStyle_splashFactory$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    () {
      return target$.splashFactory;
    };
Function _ButtonStyle_hashCode$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    () {
      return target$.hashCode;
    };
Function _ButtonStyle__$(m.Scope scope$) => ({
      MaterialStateProperty<TextStyle>? textStyle,
      MaterialStateProperty<Color>? backgroundColor,
      MaterialStateProperty<Color>? foregroundColor,
      MaterialStateProperty<Color>? overlayColor,
      MaterialStateProperty<Color>? shadowColor,
      MaterialStateProperty<Color>? surfaceTintColor,
      MaterialStateProperty<double>? elevation,
      MaterialStateProperty<EdgeInsetsGeometry>? padding,
      MaterialStateProperty<Size>? minimumSize,
      MaterialStateProperty<Size>? fixedSize,
      MaterialStateProperty<Size>? maximumSize,
      MaterialStateProperty<Color>? iconColor,
      MaterialStateProperty<double>? iconSize,
      MaterialStateProperty<BorderSide>? side,
      MaterialStateProperty<OutlinedBorder>? shape,
      MaterialStateProperty<MouseCursor>? mouseCursor,
      VisualDensity? visualDensity,
      MaterialTapTargetSize? tapTargetSize,
      Duration? animationDuration,
      bool? enableFeedback,
      AlignmentGeometry? alignment,
      InteractiveInkFeatureFactory? splashFactory,
    }) {
      return ButtonStyle(
        alignment: alignment,
        animationDuration: animationDuration,
        backgroundColor: backgroundColor,
        elevation: elevation,
        enableFeedback: enableFeedback,
        fixedSize: fixedSize,
        foregroundColor: foregroundColor,
        iconColor: iconColor,
        iconSize: iconSize,
        maximumSize: maximumSize,
        minimumSize: minimumSize,
        mouseCursor: mouseCursor,
        overlayColor: overlayColor,
        padding: padding,
        shadowColor: shadowColor,
        shape: shape,
        side: side,
        splashFactory: splashFactory,
        surfaceTintColor: surfaceTintColor,
        tapTargetSize: tapTargetSize,
        textStyle: textStyle,
        visualDensity: visualDensity,
      );
    };
Function _ButtonStyle_copyWith$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    target$.copyWith;
Function _ButtonStyle_merge$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    target$.merge;
Function _ButtonStyle_eq$$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    (Object other$) => target$ == other$;
Function _ButtonStyle_debugFillProperties$(
  m.Scope scope$,
  ButtonStyle target$,
) =>
    target$.debugFillProperties;
Function _ButtonStyle_lerp$(m.Scope scope$) => ButtonStyle.lerp;
