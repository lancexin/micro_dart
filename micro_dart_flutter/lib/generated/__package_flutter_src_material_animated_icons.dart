// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/animated_icons.dart';
import 'dart:math' show pi;
import 'dart:ui' show Canvas, Paint, Path;
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart' show clampDouble;
import 'package:flutter/widgets.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/animated_icons.dart',
  {
    'AnimatedIcon.': _AnimatedIcon__$,
    'AnimatedIcons.add_event': _AnimatedIcons_add_event$,
    'AnimatedIcons.arrow_menu': _AnimatedIcons_arrow_menu$,
    'AnimatedIcons.close_menu': _AnimatedIcons_close_menu$,
    'AnimatedIcons.ellipsis_search': _AnimatedIcons_ellipsis_search$,
    'AnimatedIcons.event_add': _AnimatedIcons_event_add$,
    'AnimatedIcons.home_menu': _AnimatedIcons_home_menu$,
    'AnimatedIcons.list_view': _AnimatedIcons_list_view$,
    'AnimatedIcons.menu_arrow': _AnimatedIcons_menu_arrow$,
    'AnimatedIcons.menu_close': _AnimatedIcons_menu_close$,
    'AnimatedIcons.menu_home': _AnimatedIcons_menu_home$,
    'AnimatedIcons.pause_play': _AnimatedIcons_pause_play$,
    'AnimatedIcons.play_pause': _AnimatedIcons_play_pause$,
    'AnimatedIcons.search_ellipsis': _AnimatedIcons_search_ellipsis$,
    'AnimatedIcons.view_list': _AnimatedIcons_view_list$,
  },
  {},
  {
    'AnimatedIcon': m.ClassMirror(
      'AnimatedIcon',
      {
        '#as': AnimatedIcon_as$,
        '#is': AnimatedIcon_is$,
        'progress': _AnimatedIcon_progress$,
        'color': _AnimatedIcon_color$,
        'size': _AnimatedIcon_size$,
        'icon': _AnimatedIcon_icon$,
        'semanticLabel': _AnimatedIcon_semanticLabel$,
        'textDirection': _AnimatedIcon_textDirection$,
        'build': _AnimatedIcon_build$,
      },
      {},
    ),
    'AnimatedIcons': m.ClassMirror(
      'AnimatedIcons',
      {
        '#as': AnimatedIcons_as$,
        '#is': AnimatedIcons_is$,
      },
      {},
    ),
    'AnimatedIconData': m.ClassMirror(
      'AnimatedIconData',
      {
        '#as': AnimatedIconData_as$,
        '#is': AnimatedIconData_is$,
        'matchTextDirection': _AnimatedIconData_matchTextDirection$,
      },
      {},
    ),
  },
);
Function AnimatedIcon_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AnimatedIcon;
Function AnimatedIcon_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AnimatedIcon;
Function _AnimatedIcon_progress$(
  m.Scope scope$,
  AnimatedIcon target$,
) =>
    () {
      return target$.progress;
    };
Function _AnimatedIcon_color$(
  m.Scope scope$,
  AnimatedIcon target$,
) =>
    () {
      return target$.color;
    };
Function _AnimatedIcon_size$(
  m.Scope scope$,
  AnimatedIcon target$,
) =>
    () {
      return target$.size;
    };
Function _AnimatedIcon_icon$(
  m.Scope scope$,
  AnimatedIcon target$,
) =>
    () {
      return target$.icon;
    };
Function _AnimatedIcon_semanticLabel$(
  m.Scope scope$,
  AnimatedIcon target$,
) =>
    () {
      return target$.semanticLabel;
    };
Function _AnimatedIcon_textDirection$(
  m.Scope scope$,
  AnimatedIcon target$,
) =>
    () {
      return target$.textDirection;
    };
Function _AnimatedIcon__$(m.Scope scope$) => ({
      Key? key,
      required AnimatedIconData icon,
      required Animation<double> progress,
      Color? color,
      double? size,
      String? semanticLabel,
      TextDirection? textDirection,
    }) {
      return AnimatedIcon(
        color: color,
        icon: icon,
        key: key,
        progress: progress,
        semanticLabel: semanticLabel,
        size: size,
        textDirection: textDirection,
      );
    };
Function _AnimatedIcon_build$(
  m.Scope scope$,
  AnimatedIcon target$,
) =>
    target$.build;
Function AnimatedIcons_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AnimatedIcons;
Function AnimatedIcons_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AnimatedIcons;
Function _AnimatedIcons_add_event$(m.Scope scope$) =>
    () => AnimatedIcons.add_event;
Function _AnimatedIcons_arrow_menu$(m.Scope scope$) =>
    () => AnimatedIcons.arrow_menu;
Function _AnimatedIcons_close_menu$(m.Scope scope$) =>
    () => AnimatedIcons.close_menu;
Function _AnimatedIcons_ellipsis_search$(m.Scope scope$) =>
    () => AnimatedIcons.ellipsis_search;
Function _AnimatedIcons_event_add$(m.Scope scope$) =>
    () => AnimatedIcons.event_add;
Function _AnimatedIcons_home_menu$(m.Scope scope$) =>
    () => AnimatedIcons.home_menu;
Function _AnimatedIcons_list_view$(m.Scope scope$) =>
    () => AnimatedIcons.list_view;
Function _AnimatedIcons_menu_arrow$(m.Scope scope$) =>
    () => AnimatedIcons.menu_arrow;
Function _AnimatedIcons_menu_close$(m.Scope scope$) =>
    () => AnimatedIcons.menu_close;
Function _AnimatedIcons_menu_home$(m.Scope scope$) =>
    () => AnimatedIcons.menu_home;
Function _AnimatedIcons_pause_play$(m.Scope scope$) =>
    () => AnimatedIcons.pause_play;
Function _AnimatedIcons_play_pause$(m.Scope scope$) =>
    () => AnimatedIcons.play_pause;
Function _AnimatedIcons_search_ellipsis$(m.Scope scope$) =>
    () => AnimatedIcons.search_ellipsis;
Function _AnimatedIcons_view_list$(m.Scope scope$) =>
    () => AnimatedIcons.view_list;
Function AnimatedIconData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AnimatedIconData;
Function AnimatedIconData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AnimatedIconData;
Function _AnimatedIconData_matchTextDirection$(
  m.Scope scope$,
  AnimatedIconData target$,
) =>
    () {
      return target$.matchTextDirection;
    };
