// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/radio_list_tile.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'package:flutter/src/material/list_tile_theme.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/radio.dart';
import 'package:flutter/src/material/radio_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/radio_list_tile.dart',
  {},
  {},
  {
    'RadioListTile': m.ClassMirror(
      'RadioListTile',
      {
        'value': _RadioListTile_value$,
        'groupValue': _RadioListTile_groupValue$,
        'onChanged': _RadioListTile_onChanged$,
        'mouseCursor': _RadioListTile_mouseCursor$,
        'toggleable': _RadioListTile_toggleable$,
        'activeColor': _RadioListTile_activeColor$,
        'fillColor': _RadioListTile_fillColor$,
        'materialTapTargetSize': _RadioListTile_materialTapTargetSize$,
        'hoverColor': _RadioListTile_hoverColor$,
        'overlayColor': _RadioListTile_overlayColor$,
        'splashRadius': _RadioListTile_splashRadius$,
        'title': _RadioListTile_title$,
        'subtitle': _RadioListTile_subtitle$,
        'secondary': _RadioListTile_secondary$,
        'isThreeLine': _RadioListTile_isThreeLine$,
        'dense': _RadioListTile_dense$,
        'selected': _RadioListTile_selected$,
        'controlAffinity': _RadioListTile_controlAffinity$,
        'autofocus': _RadioListTile_autofocus$,
        'contentPadding': _RadioListTile_contentPadding$,
        'shape': _RadioListTile_shape$,
        'tileColor': _RadioListTile_tileColor$,
        'selectedTileColor': _RadioListTile_selectedTileColor$,
        'visualDensity': _RadioListTile_visualDensity$,
        'focusNode': _RadioListTile_focusNode$,
        'onFocusChange': _RadioListTile_onFocusChange$,
        'enableFeedback': _RadioListTile_enableFeedback$,
        'checked': _RadioListTile_checked$,
        'build': _RadioListTile_build$,
      },
      {},
    )
  },
);
T _RadioListTile_value$<T>(RadioListTile<T> target) {
  return target.value;
}

T? _RadioListTile_groupValue$<T>(RadioListTile<T> target) {
  return target.groupValue;
}

void Function(T?)? _RadioListTile_onChanged$<T>(RadioListTile<T> target) {
  return target.onChanged;
}

MouseCursor? _RadioListTile_mouseCursor$<T>(RadioListTile<T> target) {
  return target.mouseCursor;
}

bool _RadioListTile_toggleable$<T>(RadioListTile<T> target) {
  return target.toggleable;
}

Color? _RadioListTile_activeColor$<T>(RadioListTile<T> target) {
  return target.activeColor;
}

MaterialStateProperty<Color?>? _RadioListTile_fillColor$<T>(
    RadioListTile<T> target) {
  return target.fillColor;
}

MaterialTapTargetSize? _RadioListTile_materialTapTargetSize$<T>(
    RadioListTile<T> target) {
  return target.materialTapTargetSize;
}

Color? _RadioListTile_hoverColor$<T>(RadioListTile<T> target) {
  return target.hoverColor;
}

MaterialStateProperty<Color?>? _RadioListTile_overlayColor$<T>(
    RadioListTile<T> target) {
  return target.overlayColor;
}

double? _RadioListTile_splashRadius$<T>(RadioListTile<T> target) {
  return target.splashRadius;
}

Widget? _RadioListTile_title$<T>(RadioListTile<T> target) {
  return target.title;
}

Widget? _RadioListTile_subtitle$<T>(RadioListTile<T> target) {
  return target.subtitle;
}

Widget? _RadioListTile_secondary$<T>(RadioListTile<T> target) {
  return target.secondary;
}

bool _RadioListTile_isThreeLine$<T>(RadioListTile<T> target) {
  return target.isThreeLine;
}

bool? _RadioListTile_dense$<T>(RadioListTile<T> target) {
  return target.dense;
}

bool _RadioListTile_selected$<T>(RadioListTile<T> target) {
  return target.selected;
}

ListTileControlAffinity _RadioListTile_controlAffinity$<T>(
    RadioListTile<T> target) {
  return target.controlAffinity;
}

bool _RadioListTile_autofocus$<T>(RadioListTile<T> target) {
  return target.autofocus;
}

EdgeInsetsGeometry? _RadioListTile_contentPadding$<T>(RadioListTile<T> target) {
  return target.contentPadding;
}

ShapeBorder? _RadioListTile_shape$<T>(RadioListTile<T> target) {
  return target.shape;
}

Color? _RadioListTile_tileColor$<T>(RadioListTile<T> target) {
  return target.tileColor;
}

Color? _RadioListTile_selectedTileColor$<T>(RadioListTile<T> target) {
  return target.selectedTileColor;
}

VisualDensity? _RadioListTile_visualDensity$<T>(RadioListTile<T> target) {
  return target.visualDensity;
}

FocusNode? _RadioListTile_focusNode$<T>(RadioListTile<T> target) {
  return target.focusNode;
}

void Function(bool)? _RadioListTile_onFocusChange$<T>(RadioListTile<T> target) {
  return target.onFocusChange;
}

bool? _RadioListTile_enableFeedback$<T>(RadioListTile<T> target) {
  return target.enableFeedback;
}

bool _RadioListTile_checked$<T>(RadioListTile<T> target) {
  return target.checked;
}

Function _RadioListTile_build$<T>(
  m.Scope scope,
  RadioListTile<T> target,
) =>
    target.build;
