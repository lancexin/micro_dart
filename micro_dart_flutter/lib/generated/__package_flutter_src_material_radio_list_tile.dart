// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/radio_list_tile.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'package:flutter/src/material/list_tile_theme.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/radio.dart';
import 'package:flutter/src/material/radio_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/radio_list_tile.dart',
  {
    'RadioListTile.': _RadioListTile__$,
    'RadioListTile.adaptive': _RadioListTile_adaptive_$,
  },
  {},
  {
    'RadioListTile': m.ClassMirror(
      'RadioListTile',
      {
        '#as': RadioListTile_as$,
        '#is': RadioListTile_is$,
        'value': _RadioListTile_value$,
        'groupValue': _RadioListTile_groupValue$,
        'onChanged': _RadioListTile_onChanged$,
        'mouseCursor': _RadioListTile_mouseCursor$,
        'toggleable': _RadioListTile_toggleable$,
        'activeColor': _RadioListTile_activeColor$,
        'fillColor': _RadioListTile_fillColor$,
        'materialTapTargetSize': _RadioListTile_materialTapTargetSize$,
        'hoverColor': _RadioListTile_hoverColor$,
        'overlayColor': _RadioListTile_overlayColor$,
        'splashRadius': _RadioListTile_splashRadius$,
        'title': _RadioListTile_title$,
        'subtitle': _RadioListTile_subtitle$,
        'secondary': _RadioListTile_secondary$,
        'isThreeLine': _RadioListTile_isThreeLine$,
        'dense': _RadioListTile_dense$,
        'selected': _RadioListTile_selected$,
        'controlAffinity': _RadioListTile_controlAffinity$,
        'autofocus': _RadioListTile_autofocus$,
        'contentPadding': _RadioListTile_contentPadding$,
        'shape': _RadioListTile_shape$,
        'tileColor': _RadioListTile_tileColor$,
        'selectedTileColor': _RadioListTile_selectedTileColor$,
        'visualDensity': _RadioListTile_visualDensity$,
        'focusNode': _RadioListTile_focusNode$,
        'onFocusChange': _RadioListTile_onFocusChange$,
        'enableFeedback': _RadioListTile_enableFeedback$,
        'checked': _RadioListTile_checked$,
        'build': _RadioListTile_build$,
      },
      {},
    )
  },
);
Function RadioListTile_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RadioListTile<T>;
Function RadioListTile_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RadioListTile<T>;
Function _RadioListTile_value$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.value;
    };
Function _RadioListTile_groupValue$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.groupValue;
    };
Function _RadioListTile_onChanged$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.onChanged;
    };
Function _RadioListTile_mouseCursor$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.mouseCursor;
    };
Function _RadioListTile_toggleable$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.toggleable;
    };
Function _RadioListTile_activeColor$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.activeColor;
    };
Function _RadioListTile_fillColor$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.fillColor;
    };
Function _RadioListTile_materialTapTargetSize$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.materialTapTargetSize;
    };
Function _RadioListTile_hoverColor$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.hoverColor;
    };
Function _RadioListTile_overlayColor$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.overlayColor;
    };
Function _RadioListTile_splashRadius$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.splashRadius;
    };
Function _RadioListTile_title$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.title;
    };
Function _RadioListTile_subtitle$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.subtitle;
    };
Function _RadioListTile_secondary$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.secondary;
    };
Function _RadioListTile_isThreeLine$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.isThreeLine;
    };
Function _RadioListTile_dense$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.dense;
    };
Function _RadioListTile_selected$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.selected;
    };
Function _RadioListTile_controlAffinity$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.controlAffinity;
    };
Function _RadioListTile_autofocus$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.autofocus;
    };
Function _RadioListTile_contentPadding$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.contentPadding;
    };
Function _RadioListTile_shape$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.shape;
    };
Function _RadioListTile_tileColor$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.tileColor;
    };
Function _RadioListTile_selectedTileColor$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.selectedTileColor;
    };
Function _RadioListTile_visualDensity$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.visualDensity;
    };
Function _RadioListTile_focusNode$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.focusNode;
    };
Function _RadioListTile_onFocusChange$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.onFocusChange;
    };
Function _RadioListTile_enableFeedback$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.enableFeedback;
    };
Function _RadioListTile_checked$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    () {
      return target$.checked;
    };
Function _RadioListTile__$(m.Scope scope$) => ({
      Key? key,
      required dynamic value,
      required dynamic groupValue,
      required m.FunctionPointer? onChanged,
      MouseCursor? mouseCursor,
      bool? toggleable,
      Color? activeColor,
      MaterialStateProperty<Color>? fillColor,
      Color? hoverColor,
      MaterialStateProperty<Color>? overlayColor,
      double? splashRadius,
      MaterialTapTargetSize? materialTapTargetSize,
      Widget? title,
      Widget? subtitle,
      bool? isThreeLine,
      bool? dense,
      Widget? secondary,
      bool? selected,
      ListTileControlAffinity? controlAffinity,
      bool? autofocus,
      EdgeInsetsGeometry? contentPadding,
      ShapeBorder? shape,
      Color? tileColor,
      Color? selectedTileColor,
      VisualDensity? visualDensity,
      FocusNode? focusNode,
      m.FunctionPointer? onFocusChange,
      bool? enableFeedback,
    }) {
      void onChangedProxy(dynamic onChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChanged!,
            [onChanged_value$],
            {},
          );
      void onFocusChangeProxy(bool onFocusChange_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onFocusChange!,
            [onFocusChange_value$],
            {},
          );
      return RadioListTile(
        activeColor: activeColor,
        autofocus: autofocus ?? false,
        contentPadding: contentPadding,
        controlAffinity: controlAffinity ?? ListTileControlAffinity.platform,
        dense: dense,
        enableFeedback: enableFeedback,
        fillColor: fillColor,
        focusNode: focusNode,
        groupValue: groupValue,
        hoverColor: hoverColor,
        isThreeLine: isThreeLine ?? false,
        key: key,
        materialTapTargetSize: materialTapTargetSize,
        mouseCursor: mouseCursor,
        onChanged: onChanged == null ? null : onChangedProxy,
        onFocusChange: onFocusChange == null ? null : onFocusChangeProxy,
        overlayColor: overlayColor,
        secondary: secondary,
        selected: selected ?? false,
        selectedTileColor: selectedTileColor,
        shape: shape,
        splashRadius: splashRadius,
        subtitle: subtitle,
        tileColor: tileColor,
        title: title,
        toggleable: toggleable ?? false,
        value: value,
        visualDensity: visualDensity,
      );
    };
Function _RadioListTile_adaptive_$(m.Scope scope$) => ({
      Key? key,
      required dynamic value,
      required dynamic groupValue,
      required m.FunctionPointer? onChanged,
      MouseCursor? mouseCursor,
      bool? toggleable,
      Color? activeColor,
      MaterialStateProperty<Color>? fillColor,
      Color? hoverColor,
      MaterialStateProperty<Color>? overlayColor,
      double? splashRadius,
      MaterialTapTargetSize? materialTapTargetSize,
      Widget? title,
      Widget? subtitle,
      bool? isThreeLine,
      bool? dense,
      Widget? secondary,
      bool? selected,
      ListTileControlAffinity? controlAffinity,
      bool? autofocus,
      EdgeInsetsGeometry? contentPadding,
      ShapeBorder? shape,
      Color? tileColor,
      Color? selectedTileColor,
      VisualDensity? visualDensity,
      FocusNode? focusNode,
      m.FunctionPointer? onFocusChange,
      bool? enableFeedback,
    }) {
      void onChangedProxy(dynamic onChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChanged!,
            [onChanged_value$],
            {},
          );
      void onFocusChangeProxy(bool onFocusChange_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onFocusChange!,
            [onFocusChange_value$],
            {},
          );
      return RadioListTile.adaptive(
        activeColor: activeColor,
        autofocus: autofocus ?? false,
        contentPadding: contentPadding,
        controlAffinity: controlAffinity ?? ListTileControlAffinity.platform,
        dense: dense,
        enableFeedback: enableFeedback,
        fillColor: fillColor,
        focusNode: focusNode,
        groupValue: groupValue,
        hoverColor: hoverColor,
        isThreeLine: isThreeLine ?? false,
        key: key,
        materialTapTargetSize: materialTapTargetSize,
        mouseCursor: mouseCursor,
        onChanged: onChanged == null ? null : onChangedProxy,
        onFocusChange: onFocusChange == null ? null : onFocusChangeProxy,
        overlayColor: overlayColor,
        secondary: secondary,
        selected: selected ?? false,
        selectedTileColor: selectedTileColor,
        shape: shape,
        splashRadius: splashRadius,
        subtitle: subtitle,
        tileColor: tileColor,
        title: title,
        toggleable: toggleable ?? false,
        value: value,
        visualDensity: visualDensity,
      );
    };
Function _RadioListTile_build$<T>(
  m.Scope scope$,
  RadioListTile<T> target$,
) =>
    target$.build;
