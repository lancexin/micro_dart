// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/list_wheel_viewport.dart';
import 'dart:math';
import 'package:flutter/animation.dart';
import 'package:vector_math/vector_math_64.dart' show Matrix4;
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/rendering/layer.dart';
import 'package:flutter/src/rendering/object.dart';
import 'package:flutter/src/rendering/proxy_box.dart';
import 'package:flutter/src/rendering/viewport.dart';
import 'package:flutter/src/rendering/viewport_offset.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/list_wheel_viewport.dart',
  {
    'RenderListWheelViewport.defaultDiameterRatio':
        _RenderListWheelViewport_defaultDiameterRatio$,
    'RenderListWheelViewport.defaultPerspective':
        _RenderListWheelViewport_defaultPerspective$,
    'RenderListWheelViewport.diameterRatioZeroMessage':
        _RenderListWheelViewport_diameterRatioZeroMessage$,
    'RenderListWheelViewport.perspectiveTooHighMessage':
        _RenderListWheelViewport_perspectiveTooHighMessage$,
    'RenderListWheelViewport.clipBehaviorAndRenderChildrenOutsideViewportConflict':
        _RenderListWheelViewport_clipBehaviorAndRenderChildrenOutsideViewportConflict$,
  },
  {},
  {
    'ListWheelChildManager': m.ClassMirror(
      'ListWheelChildManager',
      {
        '#as': ListWheelChildManager_as$,
        '#is': ListWheelChildManager_is$,
        'childCount': _ListWheelChildManager_childCount$,
        'childExistsAt': _ListWheelChildManager_childExistsAt$,
        'createChild': _ListWheelChildManager_createChild$,
        'removeChild': _ListWheelChildManager_removeChild$,
      },
      {},
    ),
    'ListWheelParentData': m.ClassMirror(
      'ListWheelParentData',
      {
        '#as': ListWheelParentData_as$,
        '#is': ListWheelParentData_is$,
        'index': _ListWheelParentData_index$,
        'transform': _ListWheelParentData_transform$,
      },
      {
        'index': _ListWheelParentData_index_set$,
        'transform': _ListWheelParentData_transform_set$,
      },
    ),
    'RenderListWheelViewport': m.ClassMirror(
      'RenderListWheelViewport',
      {
        '#as': RenderListWheelViewport_as$,
        '#is': RenderListWheelViewport_is$,
        'childManager': _RenderListWheelViewport_childManager$,
        'offset': _RenderListWheelViewport_offset$,
        'diameterRatio': _RenderListWheelViewport_diameterRatio$,
        'perspective': _RenderListWheelViewport_perspective$,
        'offAxisFraction': _RenderListWheelViewport_offAxisFraction$,
        'useMagnifier': _RenderListWheelViewport_useMagnifier$,
        'magnification': _RenderListWheelViewport_magnification$,
        'overAndUnderCenterOpacity':
            _RenderListWheelViewport_overAndUnderCenterOpacity$,
        'itemExtent': _RenderListWheelViewport_itemExtent$,
        'squeeze': _RenderListWheelViewport_squeeze$,
        'renderChildrenOutsideViewport':
            _RenderListWheelViewport_renderChildrenOutsideViewport$,
        'clipBehavior': _RenderListWheelViewport_clipBehavior$,
        'isRepaintBoundary': _RenderListWheelViewport_isRepaintBoundary$,
        'sizedByParent': _RenderListWheelViewport_sizedByParent$,
        'setupParentData': _RenderListWheelViewport_setupParentData$,
        'attach': _RenderListWheelViewport_attach$,
        'detach': _RenderListWheelViewport_detach$,
        'computeMinIntrinsicWidth':
            _RenderListWheelViewport_computeMinIntrinsicWidth$,
        'computeMaxIntrinsicWidth':
            _RenderListWheelViewport_computeMaxIntrinsicWidth$,
        'computeMinIntrinsicHeight':
            _RenderListWheelViewport_computeMinIntrinsicHeight$,
        'computeMaxIntrinsicHeight':
            _RenderListWheelViewport_computeMaxIntrinsicHeight$,
        'computeDryLayout': _RenderListWheelViewport_computeDryLayout$,
        'indexOf': _RenderListWheelViewport_indexOf$,
        'scrollOffsetToIndex': _RenderListWheelViewport_scrollOffsetToIndex$,
        'indexToScrollOffset': _RenderListWheelViewport_indexToScrollOffset$,
        'performLayout': _RenderListWheelViewport_performLayout$,
        'paint': _RenderListWheelViewport_paint$,
        'dispose': _RenderListWheelViewport_dispose$,
        'applyPaintTransform': _RenderListWheelViewport_applyPaintTransform$,
        'describeApproximatePaintClip':
            _RenderListWheelViewport_describeApproximatePaintClip$,
        'hitTestChildren': _RenderListWheelViewport_hitTestChildren$,
        'getOffsetToReveal': _RenderListWheelViewport_getOffsetToReveal$,
        'showOnScreen': _RenderListWheelViewport_showOnScreen$,
      },
      {
        'offset': _RenderListWheelViewport_offset_set$,
        'diameterRatio': _RenderListWheelViewport_diameterRatio_set$,
        'perspective': _RenderListWheelViewport_perspective_set$,
        'offAxisFraction': _RenderListWheelViewport_offAxisFraction_set$,
        'useMagnifier': _RenderListWheelViewport_useMagnifier_set$,
        'magnification': _RenderListWheelViewport_magnification_set$,
        'overAndUnderCenterOpacity':
            _RenderListWheelViewport_overAndUnderCenterOpacity_set$,
        'itemExtent': _RenderListWheelViewport_itemExtent_set$,
        'squeeze': _RenderListWheelViewport_squeeze_set$,
        'renderChildrenOutsideViewport':
            _RenderListWheelViewport_renderChildrenOutsideViewport_set$,
        'clipBehavior': _RenderListWheelViewport_clipBehavior_set$,
      },
    ),
  },
);
Function ListWheelChildManager_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ListWheelChildManager;
Function ListWheelChildManager_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ListWheelChildManager;
int? _ListWheelChildManager_childCount$(ListWheelChildManager target) {
  return target.childCount;
}

Function _ListWheelChildManager_childExistsAt$(
  m.Scope scope,
  ListWheelChildManager target,
) =>
    target.childExistsAt;
Function _ListWheelChildManager_createChild$(
  m.Scope scope,
  ListWheelChildManager target,
) =>
    target.createChild;
Function _ListWheelChildManager_removeChild$(
  m.Scope scope,
  ListWheelChildManager target,
) =>
    target.removeChild;
Function ListWheelParentData_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ListWheelParentData;
Function ListWheelParentData_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ListWheelParentData;
int? _ListWheelParentData_index$(ListWheelParentData target) {
  return target.index;
}

void _ListWheelParentData_index_set$(
  ListWheelParentData target,
  int? other,
) {
  target.index = other;
}

Matrix4? _ListWheelParentData_transform$(ListWheelParentData target) {
  return target.transform;
}

void _ListWheelParentData_transform_set$(
  ListWheelParentData target,
  Matrix4? other,
) {
  target.transform = other;
}

Function RenderListWheelViewport_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderListWheelViewport;
Function RenderListWheelViewport_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderListWheelViewport;
double _RenderListWheelViewport_defaultDiameterRatio$() {
  return RenderListWheelViewport.defaultDiameterRatio;
}

double _RenderListWheelViewport_defaultPerspective$() {
  return RenderListWheelViewport.defaultPerspective;
}

String _RenderListWheelViewport_diameterRatioZeroMessage$() {
  return RenderListWheelViewport.diameterRatioZeroMessage;
}

String _RenderListWheelViewport_perspectiveTooHighMessage$() {
  return RenderListWheelViewport.perspectiveTooHighMessage;
}

String
    _RenderListWheelViewport_clipBehaviorAndRenderChildrenOutsideViewportConflict$() {
  return RenderListWheelViewport
      .clipBehaviorAndRenderChildrenOutsideViewportConflict;
}

ListWheelChildManager _RenderListWheelViewport_childManager$(
    RenderListWheelViewport target) {
  return target.childManager;
}

ViewportOffset _RenderListWheelViewport_offset$(
    RenderListWheelViewport target) {
  return target.offset;
}

void _RenderListWheelViewport_offset_set$(
  RenderListWheelViewport target,
  ViewportOffset other,
) {
  target.offset = other;
}

double _RenderListWheelViewport_diameterRatio$(RenderListWheelViewport target) {
  return target.diameterRatio;
}

void _RenderListWheelViewport_diameterRatio_set$(
  RenderListWheelViewport target,
  double other,
) {
  target.diameterRatio = other;
}

double _RenderListWheelViewport_perspective$(RenderListWheelViewport target) {
  return target.perspective;
}

void _RenderListWheelViewport_perspective_set$(
  RenderListWheelViewport target,
  double other,
) {
  target.perspective = other;
}

double _RenderListWheelViewport_offAxisFraction$(
    RenderListWheelViewport target) {
  return target.offAxisFraction;
}

void _RenderListWheelViewport_offAxisFraction_set$(
  RenderListWheelViewport target,
  double other,
) {
  target.offAxisFraction = other;
}

bool _RenderListWheelViewport_useMagnifier$(RenderListWheelViewport target) {
  return target.useMagnifier;
}

void _RenderListWheelViewport_useMagnifier_set$(
  RenderListWheelViewport target,
  bool other,
) {
  target.useMagnifier = other;
}

double _RenderListWheelViewport_magnification$(RenderListWheelViewport target) {
  return target.magnification;
}

void _RenderListWheelViewport_magnification_set$(
  RenderListWheelViewport target,
  double other,
) {
  target.magnification = other;
}

double _RenderListWheelViewport_overAndUnderCenterOpacity$(
    RenderListWheelViewport target) {
  return target.overAndUnderCenterOpacity;
}

void _RenderListWheelViewport_overAndUnderCenterOpacity_set$(
  RenderListWheelViewport target,
  double other,
) {
  target.overAndUnderCenterOpacity = other;
}

double _RenderListWheelViewport_itemExtent$(RenderListWheelViewport target) {
  return target.itemExtent;
}

void _RenderListWheelViewport_itemExtent_set$(
  RenderListWheelViewport target,
  double other,
) {
  target.itemExtent = other;
}

double _RenderListWheelViewport_squeeze$(RenderListWheelViewport target) {
  return target.squeeze;
}

void _RenderListWheelViewport_squeeze_set$(
  RenderListWheelViewport target,
  double other,
) {
  target.squeeze = other;
}

bool _RenderListWheelViewport_renderChildrenOutsideViewport$(
    RenderListWheelViewport target) {
  return target.renderChildrenOutsideViewport;
}

void _RenderListWheelViewport_renderChildrenOutsideViewport_set$(
  RenderListWheelViewport target,
  bool other,
) {
  target.renderChildrenOutsideViewport = other;
}

Clip _RenderListWheelViewport_clipBehavior$(RenderListWheelViewport target) {
  return target.clipBehavior;
}

void _RenderListWheelViewport_clipBehavior_set$(
  RenderListWheelViewport target,
  Clip other,
) {
  target.clipBehavior = other;
}

bool _RenderListWheelViewport_isRepaintBoundary$(
    RenderListWheelViewport target) {
  return target.isRepaintBoundary;
}

bool _RenderListWheelViewport_sizedByParent$(RenderListWheelViewport target) {
  return target.sizedByParent;
}

Function _RenderListWheelViewport_setupParentData$(
  m.Scope scope,
  RenderListWheelViewport target,
) =>
    target.setupParentData;
Function _RenderListWheelViewport_attach$(
  m.Scope scope,
  RenderListWheelViewport target,
) =>
    target.attach;
Function _RenderListWheelViewport_detach$(
  m.Scope scope,
  RenderListWheelViewport target,
) =>
    target.detach;
Function _RenderListWheelViewport_computeMinIntrinsicWidth$(
  m.Scope scope,
  RenderListWheelViewport target,
) =>
    target.computeMinIntrinsicWidth;
Function _RenderListWheelViewport_computeMaxIntrinsicWidth$(
  m.Scope scope,
  RenderListWheelViewport target,
) =>
    target.computeMaxIntrinsicWidth;
Function _RenderListWheelViewport_computeMinIntrinsicHeight$(
  m.Scope scope,
  RenderListWheelViewport target,
) =>
    target.computeMinIntrinsicHeight;
Function _RenderListWheelViewport_computeMaxIntrinsicHeight$(
  m.Scope scope,
  RenderListWheelViewport target,
) =>
    target.computeMaxIntrinsicHeight;
Function _RenderListWheelViewport_computeDryLayout$(
  m.Scope scope,
  RenderListWheelViewport target,
) =>
    target.computeDryLayout;
Function _RenderListWheelViewport_indexOf$(
  m.Scope scope,
  RenderListWheelViewport target,
) =>
    target.indexOf;
Function _RenderListWheelViewport_scrollOffsetToIndex$(
  m.Scope scope,
  RenderListWheelViewport target,
) =>
    target.scrollOffsetToIndex;
Function _RenderListWheelViewport_indexToScrollOffset$(
  m.Scope scope,
  RenderListWheelViewport target,
) =>
    target.indexToScrollOffset;
Function _RenderListWheelViewport_performLayout$(
  m.Scope scope,
  RenderListWheelViewport target,
) =>
    target.performLayout;
Function _RenderListWheelViewport_paint$(
  m.Scope scope,
  RenderListWheelViewport target,
) =>
    target.paint;
Function _RenderListWheelViewport_dispose$(
  m.Scope scope,
  RenderListWheelViewport target,
) =>
    target.dispose;
Function _RenderListWheelViewport_applyPaintTransform$(
  m.Scope scope,
  RenderListWheelViewport target,
) =>
    target.applyPaintTransform;
Function _RenderListWheelViewport_describeApproximatePaintClip$(
  m.Scope scope,
  RenderListWheelViewport target,
) =>
    target.describeApproximatePaintClip;
Function _RenderListWheelViewport_hitTestChildren$(
  m.Scope scope,
  RenderListWheelViewport target,
) =>
    target.hitTestChildren;
Function _RenderListWheelViewport_getOffsetToReveal$(
  m.Scope scope,
  RenderListWheelViewport target,
) =>
    target.getOffsetToReveal;
Function _RenderListWheelViewport_showOnScreen$(
  m.Scope scope,
  RenderListWheelViewport target,
) =>
    target.showOnScreen;
