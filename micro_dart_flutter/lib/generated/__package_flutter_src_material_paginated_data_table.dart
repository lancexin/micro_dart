// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/paginated_data_table.dart';
import 'dart:math';
import 'package:flutter/gestures.dart' show DragStartBehavior;
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/card.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/data_table.dart';
import 'package:flutter/src/material/data_table_source.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/dropdown.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/ink_decoration.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/progress_indicator.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/paginated_data_table.dart',
  {
    'PaginatedDataTable.defaultRowsPerPage':
        _PaginatedDataTable_defaultRowsPerPage$,
    'PaginatedDataTable.': _PaginatedDataTable__$,
    'PaginatedDataTableState.': _PaginatedDataTableState__$,
  },
  {},
  {
    'PaginatedDataTable': m.ClassMirror(
      'PaginatedDataTable',
      {
        '#as': PaginatedDataTable_as$,
        '#is': PaginatedDataTable_is$,
        'header': _PaginatedDataTable_header$,
        'actions': _PaginatedDataTable_actions$,
        'columns': _PaginatedDataTable_columns$,
        'sortColumnIndex': _PaginatedDataTable_sortColumnIndex$,
        'sortAscending': _PaginatedDataTable_sortAscending$,
        'onSelectAll': _PaginatedDataTable_onSelectAll$,
        'dataRowMinHeight': _PaginatedDataTable_dataRowMinHeight$,
        'dataRowMaxHeight': _PaginatedDataTable_dataRowMaxHeight$,
        'headingRowHeight': _PaginatedDataTable_headingRowHeight$,
        'horizontalMargin': _PaginatedDataTable_horizontalMargin$,
        'columnSpacing': _PaginatedDataTable_columnSpacing$,
        'showCheckboxColumn': _PaginatedDataTable_showCheckboxColumn$,
        'showFirstLastButtons': _PaginatedDataTable_showFirstLastButtons$,
        'initialFirstRowIndex': _PaginatedDataTable_initialFirstRowIndex$,
        'onPageChanged': _PaginatedDataTable_onPageChanged$,
        'rowsPerPage': _PaginatedDataTable_rowsPerPage$,
        'availableRowsPerPage': _PaginatedDataTable_availableRowsPerPage$,
        'onRowsPerPageChanged': _PaginatedDataTable_onRowsPerPageChanged$,
        'source': _PaginatedDataTable_source$,
        'dragStartBehavior': _PaginatedDataTable_dragStartBehavior$,
        'checkboxHorizontalMargin':
            _PaginatedDataTable_checkboxHorizontalMargin$,
        'arrowHeadColor': _PaginatedDataTable_arrowHeadColor$,
        'controller': _PaginatedDataTable_controller$,
        'primary': _PaginatedDataTable_primary$,
        'createState': _PaginatedDataTable_createState$,
      },
      {},
    ),
    'PaginatedDataTableState': m.ClassMirror(
      'PaginatedDataTableState',
      {
        '#as': PaginatedDataTableState_as$,
        '#is': PaginatedDataTableState_is$,
        'initState': _PaginatedDataTableState_initState$,
        'didUpdateWidget': _PaginatedDataTableState_didUpdateWidget$,
        'dispose': _PaginatedDataTableState_dispose$,
        'pageTo': _PaginatedDataTableState_pageTo$,
        'build': _PaginatedDataTableState_build$,
      },
      {},
    ),
  },
);
Function PaginatedDataTable_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PaginatedDataTable;
Function PaginatedDataTable_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PaginatedDataTable;
Function _PaginatedDataTable_header$(
  m.Scope scope$,
  PaginatedDataTable target$,
) =>
    () {
      return target$.header;
    };
Function _PaginatedDataTable_actions$(
  m.Scope scope$,
  PaginatedDataTable target$,
) =>
    () {
      return target$.actions;
    };
Function _PaginatedDataTable_columns$(
  m.Scope scope$,
  PaginatedDataTable target$,
) =>
    () {
      return target$.columns;
    };
Function _PaginatedDataTable_sortColumnIndex$(
  m.Scope scope$,
  PaginatedDataTable target$,
) =>
    () {
      return target$.sortColumnIndex;
    };
Function _PaginatedDataTable_sortAscending$(
  m.Scope scope$,
  PaginatedDataTable target$,
) =>
    () {
      return target$.sortAscending;
    };
Function _PaginatedDataTable_onSelectAll$(
  m.Scope scope$,
  PaginatedDataTable target$,
) =>
    () {
      return target$.onSelectAll;
    };
Function _PaginatedDataTable_dataRowMinHeight$(
  m.Scope scope$,
  PaginatedDataTable target$,
) =>
    () {
      return target$.dataRowMinHeight;
    };
Function _PaginatedDataTable_dataRowMaxHeight$(
  m.Scope scope$,
  PaginatedDataTable target$,
) =>
    () {
      return target$.dataRowMaxHeight;
    };
Function _PaginatedDataTable_headingRowHeight$(
  m.Scope scope$,
  PaginatedDataTable target$,
) =>
    () {
      return target$.headingRowHeight;
    };
Function _PaginatedDataTable_horizontalMargin$(
  m.Scope scope$,
  PaginatedDataTable target$,
) =>
    () {
      return target$.horizontalMargin;
    };
Function _PaginatedDataTable_columnSpacing$(
  m.Scope scope$,
  PaginatedDataTable target$,
) =>
    () {
      return target$.columnSpacing;
    };
Function _PaginatedDataTable_showCheckboxColumn$(
  m.Scope scope$,
  PaginatedDataTable target$,
) =>
    () {
      return target$.showCheckboxColumn;
    };
Function _PaginatedDataTable_showFirstLastButtons$(
  m.Scope scope$,
  PaginatedDataTable target$,
) =>
    () {
      return target$.showFirstLastButtons;
    };
Function _PaginatedDataTable_initialFirstRowIndex$(
  m.Scope scope$,
  PaginatedDataTable target$,
) =>
    () {
      return target$.initialFirstRowIndex;
    };
Function _PaginatedDataTable_onPageChanged$(
  m.Scope scope$,
  PaginatedDataTable target$,
) =>
    () {
      return target$.onPageChanged;
    };
Function _PaginatedDataTable_rowsPerPage$(
  m.Scope scope$,
  PaginatedDataTable target$,
) =>
    () {
      return target$.rowsPerPage;
    };
Function _PaginatedDataTable_defaultRowsPerPage$(m.Scope scope$) =>
    () => PaginatedDataTable.defaultRowsPerPage;
Function _PaginatedDataTable_availableRowsPerPage$(
  m.Scope scope$,
  PaginatedDataTable target$,
) =>
    () {
      return target$.availableRowsPerPage;
    };
Function _PaginatedDataTable_onRowsPerPageChanged$(
  m.Scope scope$,
  PaginatedDataTable target$,
) =>
    () {
      return target$.onRowsPerPageChanged;
    };
Function _PaginatedDataTable_source$(
  m.Scope scope$,
  PaginatedDataTable target$,
) =>
    () {
      return target$.source;
    };
Function _PaginatedDataTable_dragStartBehavior$(
  m.Scope scope$,
  PaginatedDataTable target$,
) =>
    () {
      return target$.dragStartBehavior;
    };
Function _PaginatedDataTable_checkboxHorizontalMargin$(
  m.Scope scope$,
  PaginatedDataTable target$,
) =>
    () {
      return target$.checkboxHorizontalMargin;
    };
Function _PaginatedDataTable_arrowHeadColor$(
  m.Scope scope$,
  PaginatedDataTable target$,
) =>
    () {
      return target$.arrowHeadColor;
    };
Function _PaginatedDataTable_controller$(
  m.Scope scope$,
  PaginatedDataTable target$,
) =>
    () {
      return target$.controller;
    };
Function _PaginatedDataTable_primary$(
  m.Scope scope$,
  PaginatedDataTable target$,
) =>
    () {
      return target$.primary;
    };
Function _PaginatedDataTable__$(m.Scope scope$) => ({
      Key? key,
      Widget? header,
      List? actions,
      required List columns,
      int? sortColumnIndex,
      bool? sortAscending,
      m.FunctionPointer? onSelectAll,
      double? dataRowHeight,
      double? dataRowMinHeight,
      double? dataRowMaxHeight,
      double? headingRowHeight,
      double? horizontalMargin,
      double? columnSpacing,
      bool? showCheckboxColumn,
      bool? showFirstLastButtons,
      int? initialFirstRowIndex,
      m.FunctionPointer? onPageChanged,
      int? rowsPerPage,
      List? availableRowsPerPage,
      m.FunctionPointer? onRowsPerPageChanged,
      DragStartBehavior? dragStartBehavior,
      Color? arrowHeadColor,
      required DataTableSource source,
      double? checkboxHorizontalMargin,
      ScrollController? controller,
      bool? primary,
    }) {
      void onPageChangedProxy(int onPageChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onPageChanged!,
            [onPageChanged_value$],
            {},
          );
      void onRowsPerPageChangedProxy(int? onRowsPerPageChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onRowsPerPageChanged!,
            [onRowsPerPageChanged_value$],
            {},
          );
      void onSelectAllProxy(bool? onSelectAll_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSelectAll!,
            [onSelectAll_value$],
            {},
          );
      return PaginatedDataTable(
        actions: actions == null ? null : List.from(actions),
        arrowHeadColor: arrowHeadColor,
        availableRowsPerPage: availableRowsPerPage == null
            ? const <int>[
                PaginatedDataTable.defaultRowsPerPage,
                PaginatedDataTable.defaultRowsPerPage * 2,
                PaginatedDataTable.defaultRowsPerPage * 5,
                PaginatedDataTable.defaultRowsPerPage * 10
              ]
            : List.from(availableRowsPerPage),
        checkboxHorizontalMargin: checkboxHorizontalMargin,
        columnSpacing: columnSpacing ?? 56.0,
        columns: List.from(columns),
        controller: controller,
        dataRowHeight: dataRowHeight,
        dataRowMaxHeight: dataRowMaxHeight,
        dataRowMinHeight: dataRowMinHeight,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        header: header,
        headingRowHeight: headingRowHeight ?? 56.0,
        horizontalMargin: horizontalMargin ?? 24.0,
        initialFirstRowIndex: initialFirstRowIndex ?? 0,
        key: key,
        onPageChanged: onPageChanged == null ? null : onPageChangedProxy,
        onRowsPerPageChanged:
            onRowsPerPageChanged == null ? null : onRowsPerPageChangedProxy,
        onSelectAll: onSelectAll == null ? null : onSelectAllProxy,
        primary: primary,
        rowsPerPage: rowsPerPage ?? PaginatedDataTable.defaultRowsPerPage,
        showCheckboxColumn: showCheckboxColumn ?? true,
        showFirstLastButtons: showFirstLastButtons ?? false,
        sortAscending: sortAscending ?? true,
        sortColumnIndex: sortColumnIndex,
        source: source,
      );
    };
Function _PaginatedDataTable_createState$(
  m.Scope scope$,
  PaginatedDataTable target$,
) =>
    target$.createState;
Function PaginatedDataTableState_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PaginatedDataTableState;
Function PaginatedDataTableState_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PaginatedDataTableState;
Function _PaginatedDataTableState__$(m.Scope scope$) => () {
      return PaginatedDataTableState();
    };
Function _PaginatedDataTableState_initState$(
  m.Scope scope$,
  PaginatedDataTableState target$,
) =>
    target$.initState;
Function _PaginatedDataTableState_didUpdateWidget$(
  m.Scope scope$,
  PaginatedDataTableState target$,
) =>
    target$.didUpdateWidget;
Function _PaginatedDataTableState_dispose$(
  m.Scope scope$,
  PaginatedDataTableState target$,
) =>
    target$.dispose;
Function _PaginatedDataTableState_pageTo$(
  m.Scope scope$,
  PaginatedDataTableState target$,
) =>
    target$.pageTo;
Function _PaginatedDataTableState_build$(
  m.Scope scope$,
  PaginatedDataTableState target$,
) =>
    target$.build;
