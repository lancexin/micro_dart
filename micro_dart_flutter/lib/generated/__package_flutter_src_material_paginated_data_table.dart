// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/paginated_data_table.dart';
import 'dart:math';
import 'package:flutter/gestures.dart' show DragStartBehavior;
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/card.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/data_table.dart';
import 'package:flutter/src/material/data_table_source.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/dropdown.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/ink_decoration.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/progress_indicator.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/paginated_data_table.dart',
  {
    'PaginatedDataTable.defaultRowsPerPage':
        _PaginatedDataTable_defaultRowsPerPage$
  },
  {},
  {
    'PaginatedDataTable': m.ClassMirror(
      'PaginatedDataTable',
      {
        'header': _PaginatedDataTable_header$,
        'actions': _PaginatedDataTable_actions$,
        'columns': _PaginatedDataTable_columns$,
        'sortColumnIndex': _PaginatedDataTable_sortColumnIndex$,
        'sortAscending': _PaginatedDataTable_sortAscending$,
        'onSelectAll': _PaginatedDataTable_onSelectAll$,
        'dataRowMinHeight': _PaginatedDataTable_dataRowMinHeight$,
        'dataRowMaxHeight': _PaginatedDataTable_dataRowMaxHeight$,
        'headingRowHeight': _PaginatedDataTable_headingRowHeight$,
        'horizontalMargin': _PaginatedDataTable_horizontalMargin$,
        'columnSpacing': _PaginatedDataTable_columnSpacing$,
        'showCheckboxColumn': _PaginatedDataTable_showCheckboxColumn$,
        'showFirstLastButtons': _PaginatedDataTable_showFirstLastButtons$,
        'initialFirstRowIndex': _PaginatedDataTable_initialFirstRowIndex$,
        'onPageChanged': _PaginatedDataTable_onPageChanged$,
        'rowsPerPage': _PaginatedDataTable_rowsPerPage$,
        'availableRowsPerPage': _PaginatedDataTable_availableRowsPerPage$,
        'onRowsPerPageChanged': _PaginatedDataTable_onRowsPerPageChanged$,
        'source': _PaginatedDataTable_source$,
        'dragStartBehavior': _PaginatedDataTable_dragStartBehavior$,
        'checkboxHorizontalMargin':
            _PaginatedDataTable_checkboxHorizontalMargin$,
        'arrowHeadColor': _PaginatedDataTable_arrowHeadColor$,
        'controller': _PaginatedDataTable_controller$,
        'primary': _PaginatedDataTable_primary$,
        'createState': _PaginatedDataTable_createState$,
      },
      {},
    ),
    'PaginatedDataTableState': m.ClassMirror(
      'PaginatedDataTableState',
      {
        'initState': _PaginatedDataTableState_initState$,
        'didUpdateWidget': _PaginatedDataTableState_didUpdateWidget$,
        'dispose': _PaginatedDataTableState_dispose$,
        'pageTo': _PaginatedDataTableState_pageTo$,
        'build': _PaginatedDataTableState_build$,
      },
      {},
    ),
  },
);
Widget? _PaginatedDataTable_header$(PaginatedDataTable target) {
  return target.header;
}

List<Widget>? _PaginatedDataTable_actions$(PaginatedDataTable target) {
  return target.actions;
}

List<DataColumn> _PaginatedDataTable_columns$(PaginatedDataTable target) {
  return target.columns;
}

int? _PaginatedDataTable_sortColumnIndex$(PaginatedDataTable target) {
  return target.sortColumnIndex;
}

bool _PaginatedDataTable_sortAscending$(PaginatedDataTable target) {
  return target.sortAscending;
}

void Function(bool?)? _PaginatedDataTable_onSelectAll$(
    PaginatedDataTable target) {
  return target.onSelectAll;
}

double _PaginatedDataTable_dataRowMinHeight$(PaginatedDataTable target) {
  return target.dataRowMinHeight;
}

double _PaginatedDataTable_dataRowMaxHeight$(PaginatedDataTable target) {
  return target.dataRowMaxHeight;
}

double _PaginatedDataTable_headingRowHeight$(PaginatedDataTable target) {
  return target.headingRowHeight;
}

double _PaginatedDataTable_horizontalMargin$(PaginatedDataTable target) {
  return target.horizontalMargin;
}

double _PaginatedDataTable_columnSpacing$(PaginatedDataTable target) {
  return target.columnSpacing;
}

bool _PaginatedDataTable_showCheckboxColumn$(PaginatedDataTable target) {
  return target.showCheckboxColumn;
}

bool _PaginatedDataTable_showFirstLastButtons$(PaginatedDataTable target) {
  return target.showFirstLastButtons;
}

int? _PaginatedDataTable_initialFirstRowIndex$(PaginatedDataTable target) {
  return target.initialFirstRowIndex;
}

void Function(int)? _PaginatedDataTable_onPageChanged$(
    PaginatedDataTable target) {
  return target.onPageChanged;
}

int _PaginatedDataTable_rowsPerPage$(PaginatedDataTable target) {
  return target.rowsPerPage;
}

int _PaginatedDataTable_defaultRowsPerPage$() {
  return PaginatedDataTable.defaultRowsPerPage;
}

List<int> _PaginatedDataTable_availableRowsPerPage$(PaginatedDataTable target) {
  return target.availableRowsPerPage;
}

void Function(int?)? _PaginatedDataTable_onRowsPerPageChanged$(
    PaginatedDataTable target) {
  return target.onRowsPerPageChanged;
}

DataTableSource _PaginatedDataTable_source$(PaginatedDataTable target) {
  return target.source;
}

DragStartBehavior _PaginatedDataTable_dragStartBehavior$(
    PaginatedDataTable target) {
  return target.dragStartBehavior;
}

double? _PaginatedDataTable_checkboxHorizontalMargin$(
    PaginatedDataTable target) {
  return target.checkboxHorizontalMargin;
}

Color? _PaginatedDataTable_arrowHeadColor$(PaginatedDataTable target) {
  return target.arrowHeadColor;
}

ScrollController? _PaginatedDataTable_controller$(PaginatedDataTable target) {
  return target.controller;
}

bool? _PaginatedDataTable_primary$(PaginatedDataTable target) {
  return target.primary;
}

Function _PaginatedDataTable_createState$(
  m.Scope scope,
  PaginatedDataTable target,
) =>
    target.createState;
Function _PaginatedDataTableState_initState$(
  m.Scope scope,
  PaginatedDataTableState target,
) =>
    target.initState;
Function _PaginatedDataTableState_didUpdateWidget$(
  m.Scope scope,
  PaginatedDataTableState target,
) =>
    target.didUpdateWidget;
Function _PaginatedDataTableState_dispose$(
  m.Scope scope,
  PaginatedDataTableState target,
) =>
    target.dispose;
Function _PaginatedDataTableState_pageTo$(
  m.Scope scope,
  PaginatedDataTableState target,
) =>
    target.pageTo;
Function _PaginatedDataTableState_build$(
  m.Scope scope,
  PaginatedDataTableState target,
) =>
    target.build;
