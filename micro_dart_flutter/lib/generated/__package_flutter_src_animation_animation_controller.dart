// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/animation/animation_controller.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/physics.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/semantics.dart';
import 'package:flutter/src/animation/animation.dart';
import 'package:flutter/src/animation/curves.dart';
import 'package:flutter/src/animation/listener_helpers.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/animation/animation_controller.dart',
  {
    'AnimationBehavior.normal': _AnimationBehavior_normal$,
    'AnimationBehavior.preserve': _AnimationBehavior_preserve$,
    'AnimationBehavior.values': _AnimationBehavior_values$,
  },
  {},
  {
    'AnimationController': m.ClassMirror(
      'AnimationController',
      {
        'lowerBound': _AnimationController_lowerBound$,
        'upperBound': _AnimationController_upperBound$,
        'debugLabel': _AnimationController_debugLabel$,
        'animationBehavior': _AnimationController_animationBehavior$,
        'duration': _AnimationController_duration$,
        'reverseDuration': _AnimationController_reverseDuration$,
        'view': _AnimationController_view$,
        'value': _AnimationController_value$,
        'velocity': _AnimationController_velocity$,
        'lastElapsedDuration': _AnimationController_lastElapsedDuration$,
        'isAnimating': _AnimationController_isAnimating$,
        'status': _AnimationController_status$,
        'resync': _AnimationController_resync$,
        'reset': _AnimationController_reset$,
        'forward': _AnimationController_forward$,
        'reverse': _AnimationController_reverse$,
        'animateTo': _AnimationController_animateTo$,
        'animateBack': _AnimationController_animateBack$,
        'repeat': _AnimationController_repeat$,
        'fling': _AnimationController_fling$,
        'animateWith': _AnimationController_animateWith$,
        'stop': _AnimationController_stop$,
        'dispose': _AnimationController_dispose$,
        'toStringDetails': _AnimationController_toStringDetails$,
      },
      {
        'duration': _AnimationController_duration_set$,
        'reverseDuration': _AnimationController_reverseDuration_set$,
        'value': _AnimationController_value_set$,
      },
    ),
    'AnimationBehavior': m.ClassMirror(
      'AnimationBehavior',
      {},
      {},
    ),
  },
);
double _AnimationController_lowerBound$(AnimationController target) {
  return target.lowerBound;
}

double _AnimationController_upperBound$(AnimationController target) {
  return target.upperBound;
}

String? _AnimationController_debugLabel$(AnimationController target) {
  return target.debugLabel;
}

AnimationBehavior _AnimationController_animationBehavior$(
    AnimationController target) {
  return target.animationBehavior;
}

Duration? _AnimationController_duration$(AnimationController target) {
  return target.duration;
}

void _AnimationController_duration_set$(
  AnimationController target,
  Duration? other,
) {
  target.duration = other;
}

Duration? _AnimationController_reverseDuration$(AnimationController target) {
  return target.reverseDuration;
}

void _AnimationController_reverseDuration_set$(
  AnimationController target,
  Duration? other,
) {
  target.reverseDuration = other;
}

Animation<double> _AnimationController_view$(AnimationController target) {
  return target.view;
}

double _AnimationController_value$(AnimationController target) {
  return target.value;
}

void _AnimationController_value_set$(
  AnimationController target,
  double other,
) {
  target.value = other;
}

double _AnimationController_velocity$(AnimationController target) {
  return target.velocity;
}

Duration? _AnimationController_lastElapsedDuration$(
    AnimationController target) {
  return target.lastElapsedDuration;
}

bool _AnimationController_isAnimating$(AnimationController target) {
  return target.isAnimating;
}

AnimationStatus _AnimationController_status$(AnimationController target) {
  return target.status;
}

Function _AnimationController_resync$(
  m.Scope scope,
  AnimationController target,
) =>
    target.resync;
Function _AnimationController_reset$(
  m.Scope scope,
  AnimationController target,
) =>
    target.reset;
Function _AnimationController_forward$(
  m.Scope scope,
  AnimationController target,
) =>
    target.forward;
Function _AnimationController_reverse$(
  m.Scope scope,
  AnimationController target,
) =>
    target.reverse;
Function _AnimationController_animateTo$(
  m.Scope scope,
  AnimationController target,
) =>
    target.animateTo;
Function _AnimationController_animateBack$(
  m.Scope scope,
  AnimationController target,
) =>
    target.animateBack;
Function _AnimationController_repeat$(
  m.Scope scope,
  AnimationController target,
) =>
    target.repeat;
Function _AnimationController_fling$(
  m.Scope scope,
  AnimationController target,
) =>
    target.fling;
Function _AnimationController_animateWith$(
  m.Scope scope,
  AnimationController target,
) =>
    target.animateWith;
Function _AnimationController_stop$(
  m.Scope scope,
  AnimationController target,
) =>
    target.stop;
Function _AnimationController_dispose$(
  m.Scope scope,
  AnimationController target,
) =>
    target.dispose;
Function _AnimationController_toStringDetails$(
  m.Scope scope,
  AnimationController target,
) =>
    target.toStringDetails;
AnimationBehavior _AnimationBehavior_normal$() {
  return AnimationBehavior.normal;
}

AnimationBehavior _AnimationBehavior_preserve$() {
  return AnimationBehavior.preserve;
}

List<AnimationBehavior> _AnimationBehavior_values$() {
  return AnimationBehavior.values;
}
