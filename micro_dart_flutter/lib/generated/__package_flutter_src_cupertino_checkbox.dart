// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/checkbox.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/constants.dart';
import 'package:flutter/src/cupertino/toggleable.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/checkbox.dart',
  {'CupertinoCheckbox.width': _CupertinoCheckbox_width$},
  {},
  {
    'CupertinoCheckbox': m.ClassMirror(
      'CupertinoCheckbox',
      {
        'value': _CupertinoCheckbox_value$,
        'onChanged': _CupertinoCheckbox_onChanged$,
        'activeColor': _CupertinoCheckbox_activeColor$,
        'inactiveColor': _CupertinoCheckbox_inactiveColor$,
        'checkColor': _CupertinoCheckbox_checkColor$,
        'tristate': _CupertinoCheckbox_tristate$,
        'focusColor': _CupertinoCheckbox_focusColor$,
        'focusNode': _CupertinoCheckbox_focusNode$,
        'autofocus': _CupertinoCheckbox_autofocus$,
        'side': _CupertinoCheckbox_side$,
        'shape': _CupertinoCheckbox_shape$,
        'createState': _CupertinoCheckbox_createState$,
      },
      {},
    )
  },
);
bool? _CupertinoCheckbox_value$(CupertinoCheckbox target) {
  return target.value;
}

void Function(bool?)? _CupertinoCheckbox_onChanged$(CupertinoCheckbox target) {
  return target.onChanged;
}

Color? _CupertinoCheckbox_activeColor$(CupertinoCheckbox target) {
  return target.activeColor;
}

Color? _CupertinoCheckbox_inactiveColor$(CupertinoCheckbox target) {
  return target.inactiveColor;
}

Color? _CupertinoCheckbox_checkColor$(CupertinoCheckbox target) {
  return target.checkColor;
}

bool _CupertinoCheckbox_tristate$(CupertinoCheckbox target) {
  return target.tristate;
}

Color? _CupertinoCheckbox_focusColor$(CupertinoCheckbox target) {
  return target.focusColor;
}

FocusNode? _CupertinoCheckbox_focusNode$(CupertinoCheckbox target) {
  return target.focusNode;
}

bool _CupertinoCheckbox_autofocus$(CupertinoCheckbox target) {
  return target.autofocus;
}

BorderSide? _CupertinoCheckbox_side$(CupertinoCheckbox target) {
  return target.side;
}

OutlinedBorder? _CupertinoCheckbox_shape$(CupertinoCheckbox target) {
  return target.shape;
}

double _CupertinoCheckbox_width$() {
  return CupertinoCheckbox.width;
}

Function _CupertinoCheckbox_createState$(
  m.Scope scope,
  CupertinoCheckbox target,
) =>
    target.createState;
