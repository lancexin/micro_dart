// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/page_scaffold.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/page_scaffold.dart',
  {},
  {},
  {
    'CupertinoPageScaffold': m.ClassMirror(
      'CupertinoPageScaffold',
      {
        '#as': CupertinoPageScaffold_as$,
        '#is': CupertinoPageScaffold_is$,
        'navigationBar': _CupertinoPageScaffold_navigationBar$,
        'child': _CupertinoPageScaffold_child$,
        'backgroundColor': _CupertinoPageScaffold_backgroundColor$,
        'resizeToAvoidBottomInset':
            _CupertinoPageScaffold_resizeToAvoidBottomInset$,
        'createState': _CupertinoPageScaffold_createState$,
      },
      {},
    ),
    'ObstructingPreferredSizeWidget': m.ClassMirror(
      'ObstructingPreferredSizeWidget',
      {
        '#as': ObstructingPreferredSizeWidget_as$,
        '#is': ObstructingPreferredSizeWidget_is$,
        'shouldFullyObstruct':
            _ObstructingPreferredSizeWidget_shouldFullyObstruct$,
      },
      {},
    ),
  },
);
Function CupertinoPageScaffold_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CupertinoPageScaffold;
Function CupertinoPageScaffold_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CupertinoPageScaffold;
ObstructingPreferredSizeWidget? _CupertinoPageScaffold_navigationBar$(
    CupertinoPageScaffold target) {
  return target.navigationBar;
}

Widget _CupertinoPageScaffold_child$(CupertinoPageScaffold target) {
  return target.child;
}

Color? _CupertinoPageScaffold_backgroundColor$(CupertinoPageScaffold target) {
  return target.backgroundColor;
}

bool _CupertinoPageScaffold_resizeToAvoidBottomInset$(
    CupertinoPageScaffold target) {
  return target.resizeToAvoidBottomInset;
}

Function _CupertinoPageScaffold_createState$(
  m.Scope scope,
  CupertinoPageScaffold target,
) =>
    target.createState;
Function ObstructingPreferredSizeWidget_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ObstructingPreferredSizeWidget;
Function ObstructingPreferredSizeWidget_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ObstructingPreferredSizeWidget;
Function _ObstructingPreferredSizeWidget_shouldFullyObstruct$(
  m.Scope scope,
  ObstructingPreferredSizeWidget target,
) =>
    target.shouldFullyObstruct;
