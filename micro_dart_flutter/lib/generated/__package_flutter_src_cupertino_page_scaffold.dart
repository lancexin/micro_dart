// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/page_scaffold.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/page_scaffold.dart',
  {'CupertinoPageScaffold.': _CupertinoPageScaffold__$},
  {},
  {
    'CupertinoPageScaffold': m.ClassMirror(
      'CupertinoPageScaffold',
      {
        '#as': CupertinoPageScaffold_as$,
        '#is': CupertinoPageScaffold_is$,
        'navigationBar': _CupertinoPageScaffold_navigationBar$,
        'child': _CupertinoPageScaffold_child$,
        'backgroundColor': _CupertinoPageScaffold_backgroundColor$,
        'resizeToAvoidBottomInset':
            _CupertinoPageScaffold_resizeToAvoidBottomInset$,
        'createState': _CupertinoPageScaffold_createState$,
      },
      {},
    ),
    'ObstructingPreferredSizeWidget': m.ClassMirror(
      'ObstructingPreferredSizeWidget',
      {
        '#as': ObstructingPreferredSizeWidget_as$,
        '#is': ObstructingPreferredSizeWidget_is$,
        'shouldFullyObstruct':
            _ObstructingPreferredSizeWidget_shouldFullyObstruct$,
      },
      {},
    ),
  },
);
Function CupertinoPageScaffold_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoPageScaffold;
Function CupertinoPageScaffold_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoPageScaffold;
Function _CupertinoPageScaffold_navigationBar$(
  m.Scope scope$,
  CupertinoPageScaffold target$,
) =>
    () {
      return target$.navigationBar;
    };
Function _CupertinoPageScaffold_child$(
  m.Scope scope$,
  CupertinoPageScaffold target$,
) =>
    () {
      return target$.child;
    };
Function _CupertinoPageScaffold_backgroundColor$(
  m.Scope scope$,
  CupertinoPageScaffold target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _CupertinoPageScaffold_resizeToAvoidBottomInset$(
  m.Scope scope$,
  CupertinoPageScaffold target$,
) =>
    () {
      return target$.resizeToAvoidBottomInset;
    };
Function _CupertinoPageScaffold__$(m.Scope scope$) => ({
      Key? key,
      ObstructingPreferredSizeWidget? navigationBar,
      Color? backgroundColor,
      bool? resizeToAvoidBottomInset,
      required Widget child,
    }) {
      return CupertinoPageScaffold(
        backgroundColor: backgroundColor,
        child: child,
        key: key,
        navigationBar: navigationBar,
        resizeToAvoidBottomInset: resizeToAvoidBottomInset ?? true,
      );
    };
Function _CupertinoPageScaffold_createState$(
  m.Scope scope$,
  CupertinoPageScaffold target$,
) =>
    target$.createState;
Function ObstructingPreferredSizeWidget_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ObstructingPreferredSizeWidget;
Function ObstructingPreferredSizeWidget_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ObstructingPreferredSizeWidget;
Function _ObstructingPreferredSizeWidget_shouldFullyObstruct$(
  m.Scope scope$,
  ObstructingPreferredSizeWidget target$,
) =>
    target$.shouldFullyObstruct;
