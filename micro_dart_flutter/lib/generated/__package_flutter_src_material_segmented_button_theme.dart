// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/segmented_button_theme.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/segmented_button_theme.dart',
  {
    'SegmentedButtonThemeData.lerp': _SegmentedButtonThemeData_lerp$,
    'SegmentedButtonTheme.of': _SegmentedButtonTheme_of$,
    'SegmentedButtonTheme.maybeOf': _SegmentedButtonTheme_maybeOf$,
  },
  {},
  {
    'SegmentedButtonThemeData': m.ClassMirror(
      'SegmentedButtonThemeData',
      {
        'style': _SegmentedButtonThemeData_style$,
        'selectedIcon': _SegmentedButtonThemeData_selectedIcon$,
        'hashCode': _SegmentedButtonThemeData_hashCode$,
        'copyWith': _SegmentedButtonThemeData_copyWith$,
        'debugFillProperties': _SegmentedButtonThemeData_debugFillProperties$,
      },
      {},
    ),
    'SegmentedButtonTheme': m.ClassMirror(
      'SegmentedButtonTheme',
      {
        'data': _SegmentedButtonTheme_data$,
        'wrap': _SegmentedButtonTheme_wrap$,
        'updateShouldNotify': _SegmentedButtonTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
ButtonStyle? _SegmentedButtonThemeData_style$(SegmentedButtonThemeData target) {
  return target.style;
}

Widget? _SegmentedButtonThemeData_selectedIcon$(
    SegmentedButtonThemeData target) {
  return target.selectedIcon;
}

int _SegmentedButtonThemeData_hashCode$(SegmentedButtonThemeData target) {
  return target.hashCode;
}

Function _SegmentedButtonThemeData_copyWith$(
  m.Scope scope,
  SegmentedButtonThemeData target,
) =>
    target.copyWith;
Function _SegmentedButtonThemeData_lerp$(m.Scope scope) =>
    SegmentedButtonThemeData.lerp;
Function _SegmentedButtonThemeData_debugFillProperties$(
  m.Scope scope,
  SegmentedButtonThemeData target,
) =>
    target.debugFillProperties;
SegmentedButtonThemeData _SegmentedButtonTheme_data$(
    SegmentedButtonTheme target) {
  return target.data;
}

Function _SegmentedButtonTheme_of$(m.Scope scope) => SegmentedButtonTheme.of;
Function _SegmentedButtonTheme_maybeOf$(m.Scope scope) =>
    SegmentedButtonTheme.maybeOf;
Function _SegmentedButtonTheme_wrap$(
  m.Scope scope,
  SegmentedButtonTheme target,
) =>
    target.wrap;
Function _SegmentedButtonTheme_updateShouldNotify$(
  m.Scope scope,
  SegmentedButtonTheme target,
) =>
    target.updateShouldNotify;
