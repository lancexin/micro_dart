// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/container.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/image.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/container.dart',
  {},
  {},
  {
    'DecoratedBox': m.ClassMirror(
      'DecoratedBox',
      {
        'decoration': _DecoratedBox_decoration$,
        'position': _DecoratedBox_position$,
        'createRenderObject': _DecoratedBox_createRenderObject$,
        'updateRenderObject': _DecoratedBox_updateRenderObject$,
        'debugFillProperties': _DecoratedBox_debugFillProperties$,
      },
      {},
    ),
    'Container': m.ClassMirror(
      'Container',
      {
        'child': _Container_child$,
        'alignment': _Container_alignment$,
        'padding': _Container_padding$,
        'color': _Container_color$,
        'decoration': _Container_decoration$,
        'foregroundDecoration': _Container_foregroundDecoration$,
        'constraints': _Container_constraints$,
        'margin': _Container_margin$,
        'transform': _Container_transform$,
        'transformAlignment': _Container_transformAlignment$,
        'clipBehavior': _Container_clipBehavior$,
        'build': _Container_build$,
        'debugFillProperties': _Container_debugFillProperties$,
      },
      {},
    ),
  },
);
Decoration _DecoratedBox_decoration$(DecoratedBox target) {
  return target.decoration;
}

DecorationPosition _DecoratedBox_position$(DecoratedBox target) {
  return target.position;
}

Function _DecoratedBox_createRenderObject$(
  m.Scope scope,
  DecoratedBox target,
) =>
    target.createRenderObject;
Function _DecoratedBox_updateRenderObject$(
  m.Scope scope,
  DecoratedBox target,
) =>
    target.updateRenderObject;
Function _DecoratedBox_debugFillProperties$(
  m.Scope scope,
  DecoratedBox target,
) =>
    target.debugFillProperties;
Widget? _Container_child$(Container target) {
  return target.child;
}

AlignmentGeometry? _Container_alignment$(Container target) {
  return target.alignment;
}

EdgeInsetsGeometry? _Container_padding$(Container target) {
  return target.padding;
}

Color? _Container_color$(Container target) {
  return target.color;
}

Decoration? _Container_decoration$(Container target) {
  return target.decoration;
}

Decoration? _Container_foregroundDecoration$(Container target) {
  return target.foregroundDecoration;
}

BoxConstraints? _Container_constraints$(Container target) {
  return target.constraints;
}

EdgeInsetsGeometry? _Container_margin$(Container target) {
  return target.margin;
}

Matrix4? _Container_transform$(Container target) {
  return target.transform;
}

AlignmentGeometry? _Container_transformAlignment$(Container target) {
  return target.transformAlignment;
}

Clip _Container_clipBehavior$(Container target) {
  return target.clipBehavior;
}

Function _Container_build$(
  m.Scope scope,
  Container target,
) =>
    target.build;
Function _Container_debugFillProperties$(
  m.Scope scope,
  Container target,
) =>
    target.debugFillProperties;
