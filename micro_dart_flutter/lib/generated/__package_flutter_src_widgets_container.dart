// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/container.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/image.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/container.dart',
  {
    'DecoratedBox.': _DecoratedBox__$,
    'Container.': _Container__$,
  },
  {},
  {
    'DecoratedBox': m.ClassMirror(
      'DecoratedBox',
      {
        '#as': DecoratedBox_as$,
        '#is': DecoratedBox_is$,
        'decoration': _DecoratedBox_decoration$,
        'position': _DecoratedBox_position$,
        'createRenderObject': _DecoratedBox_createRenderObject$,
        'updateRenderObject': _DecoratedBox_updateRenderObject$,
        'debugFillProperties': _DecoratedBox_debugFillProperties$,
      },
      {},
    ),
    'Container': m.ClassMirror(
      'Container',
      {
        '#as': Container_as$,
        '#is': Container_is$,
        'child': _Container_child$,
        'alignment': _Container_alignment$,
        'padding': _Container_padding$,
        'color': _Container_color$,
        'decoration': _Container_decoration$,
        'foregroundDecoration': _Container_foregroundDecoration$,
        'constraints': _Container_constraints$,
        'margin': _Container_margin$,
        'transform': _Container_transform$,
        'transformAlignment': _Container_transformAlignment$,
        'clipBehavior': _Container_clipBehavior$,
        'build': _Container_build$,
        'debugFillProperties': _Container_debugFillProperties$,
      },
      {},
    ),
  },
);
Function DecoratedBox_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DecoratedBox;
Function DecoratedBox_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DecoratedBox;
Function _DecoratedBox_decoration$(
  m.Scope scope$,
  DecoratedBox target$,
) =>
    () {
      return target$.decoration;
    };
Function _DecoratedBox_position$(
  m.Scope scope$,
  DecoratedBox target$,
) =>
    () {
      return target$.position;
    };
Function _DecoratedBox__$(m.Scope scope$) => ({
      Key? key,
      required Decoration decoration,
      DecorationPosition? position,
      Widget? child,
    }) {
      return DecoratedBox(
        child: child,
        decoration: decoration,
        key: key,
        position: position ?? DecorationPosition.background,
      );
    };
Function _DecoratedBox_createRenderObject$(
  m.Scope scope$,
  DecoratedBox target$,
) =>
    target$.createRenderObject;
Function _DecoratedBox_updateRenderObject$(
  m.Scope scope$,
  DecoratedBox target$,
) =>
    target$.updateRenderObject;
Function _DecoratedBox_debugFillProperties$(
  m.Scope scope$,
  DecoratedBox target$,
) =>
    target$.debugFillProperties;
Function Container_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Container;
Function Container_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Container;
Function _Container_child$(
  m.Scope scope$,
  Container target$,
) =>
    () {
      return target$.child;
    };
Function _Container_alignment$(
  m.Scope scope$,
  Container target$,
) =>
    () {
      return target$.alignment;
    };
Function _Container_padding$(
  m.Scope scope$,
  Container target$,
) =>
    () {
      return target$.padding;
    };
Function _Container_color$(
  m.Scope scope$,
  Container target$,
) =>
    () {
      return target$.color;
    };
Function _Container_decoration$(
  m.Scope scope$,
  Container target$,
) =>
    () {
      return target$.decoration;
    };
Function _Container_foregroundDecoration$(
  m.Scope scope$,
  Container target$,
) =>
    () {
      return target$.foregroundDecoration;
    };
Function _Container_constraints$(
  m.Scope scope$,
  Container target$,
) =>
    () {
      return target$.constraints;
    };
Function _Container_margin$(
  m.Scope scope$,
  Container target$,
) =>
    () {
      return target$.margin;
    };
Function _Container_transform$(
  m.Scope scope$,
  Container target$,
) =>
    () {
      return target$.transform;
    };
Function _Container_transformAlignment$(
  m.Scope scope$,
  Container target$,
) =>
    () {
      return target$.transformAlignment;
    };
Function _Container_clipBehavior$(
  m.Scope scope$,
  Container target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _Container__$(m.Scope scope$) => ({
      Key? key,
      AlignmentGeometry? alignment,
      EdgeInsetsGeometry? padding,
      Color? color,
      Decoration? decoration,
      Decoration? foregroundDecoration,
      double? width,
      double? height,
      BoxConstraints? constraints,
      EdgeInsetsGeometry? margin,
      Matrix4? transform,
      AlignmentGeometry? transformAlignment,
      Widget? child,
      Clip? clipBehavior,
    }) {
      return Container(
        alignment: alignment,
        child: child,
        clipBehavior: clipBehavior ?? Clip.none,
        color: color,
        constraints: constraints,
        decoration: decoration,
        foregroundDecoration: foregroundDecoration,
        height: height,
        key: key,
        margin: margin,
        padding: padding,
        transform: transform,
        transformAlignment: transformAlignment,
        width: width,
      );
    };
Function _Container_build$(
  m.Scope scope$,
  Container target$,
) =>
    target$.build;
Function _Container_debugFillProperties$(
  m.Scope scope$,
  Container target$,
) =>
    target$.debugFillProperties;
