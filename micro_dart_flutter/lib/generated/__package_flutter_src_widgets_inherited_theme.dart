// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/inherited_theme.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/inherited_theme.dart',
  {
    'InheritedTheme.captureAll': _InheritedTheme_captureAll$,
    'InheritedTheme.capture': _InheritedTheme_capture$,
  },
  {},
  {
    'InheritedTheme': m.ClassMirror(
      'InheritedTheme',
      {
        '#as': InheritedTheme_as$,
        '#is': InheritedTheme_is$,
        'wrap': _InheritedTheme_wrap$,
      },
      {},
    ),
    'CapturedThemes': m.ClassMirror(
      'CapturedThemes',
      {
        '#as': CapturedThemes_as$,
        '#is': CapturedThemes_is$,
        'wrap': _CapturedThemes_wrap$,
      },
      {},
    ),
  },
);
Function InheritedTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as InheritedTheme;
Function InheritedTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is InheritedTheme;
Function _InheritedTheme_wrap$(
  m.Scope scope$,
  InheritedTheme target$,
) =>
    target$.wrap;
Function _InheritedTheme_captureAll$(m.Scope scope$) =>
    InheritedTheme.captureAll;
Function _InheritedTheme_capture$(m.Scope scope$) => InheritedTheme.capture;
Function CapturedThemes_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CapturedThemes;
Function CapturedThemes_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CapturedThemes;
Function _CapturedThemes_wrap$(
  m.Scope scope$,
  CapturedThemes target$,
) =>
    target$.wrap;
