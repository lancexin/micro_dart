// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/physics/gravity_simulation.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/physics/simulation.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/physics/gravity_simulation.dart',
  {'GravitySimulation.': _GravitySimulation__$},
  {},
  {
    'GravitySimulation': m.ClassMirror(
      'GravitySimulation',
      {
        '#as': GravitySimulation_as$,
        '#is': GravitySimulation_is$,
        'x': _GravitySimulation_x$,
        'dx': _GravitySimulation_dx$,
        'isDone': _GravitySimulation_isDone$,
        'toString': _GravitySimulation_toString$,
      },
      {},
    )
  },
);
Function GravitySimulation_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as GravitySimulation;
Function GravitySimulation_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is GravitySimulation;
Function _GravitySimulation__$(m.Scope scope$) => (
      double acceleration,
      double distance,
      double endDistance,
      double velocity,
    ) {
      return GravitySimulation(
        acceleration,
        distance,
        endDistance,
        velocity,
      );
    };
Function _GravitySimulation_x$(
  m.Scope scope$,
  GravitySimulation target$,
) =>
    target$.x;
Function _GravitySimulation_dx$(
  m.Scope scope$,
  GravitySimulation target$,
) =>
    target$.dx;
Function _GravitySimulation_isDone$(
  m.Scope scope$,
  GravitySimulation target$,
) =>
    target$.isDone;
Function _GravitySimulation_toString$(
  m.Scope scope$,
  GravitySimulation target$,
) =>
    target$.toString;
