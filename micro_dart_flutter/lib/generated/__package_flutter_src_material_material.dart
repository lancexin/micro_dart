// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/material.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/elevation_overlay.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/material.dart',
  {
    'kMaterialEdges': _kMaterialEdges$,
    'Material.defaultSplashRadius': _Material_defaultSplashRadius$,
    'Material.': _Material__$,
    'Material.maybeOf': _Material_maybeOf$,
    'Material.of': _Material_of$,
    'ShapeBorderTween.': _ShapeBorderTween__$,
    'MaterialType.canvas': _MaterialType_canvas$,
    'MaterialType.card': _MaterialType_card$,
    'MaterialType.circle': _MaterialType_circle$,
    'MaterialType.button': _MaterialType_button$,
    'MaterialType.transparency': _MaterialType_transparency$,
    'MaterialType.values': _MaterialType_values$,
  },
  {},
  {
    'MaterialInkController': m.ClassMirror(
      'MaterialInkController',
      {
        '#as': MaterialInkController_as$,
        '#is': MaterialInkController_is$,
        'color': _MaterialInkController_color$,
        'vsync': _MaterialInkController_vsync$,
        'addInkFeature': _MaterialInkController_addInkFeature$,
        'markNeedsPaint': _MaterialInkController_markNeedsPaint$,
      },
      {},
    ),
    'Material': m.ClassMirror(
      'Material',
      {
        '#as': Material_as$,
        '#is': Material_is$,
        'child': _Material_child$,
        'type': _Material_type$,
        'elevation': _Material_elevation$,
        'color': _Material_color$,
        'shadowColor': _Material_shadowColor$,
        'surfaceTintColor': _Material_surfaceTintColor$,
        'textStyle': _Material_textStyle$,
        'shape': _Material_shape$,
        'borderOnForeground': _Material_borderOnForeground$,
        'clipBehavior': _Material_clipBehavior$,
        'animationDuration': _Material_animationDuration$,
        'borderRadius': _Material_borderRadius$,
        'createState': _Material_createState$,
        'debugFillProperties': _Material_debugFillProperties$,
      },
      {},
    ),
    'InkFeature': m.ClassMirror(
      'InkFeature',
      {
        '#as': InkFeature_as$,
        '#is': InkFeature_is$,
        'referenceBox': _InkFeature_referenceBox$,
        'onRemoved': _InkFeature_onRemoved$,
        'controller': _InkFeature_controller$,
        'dispose': _InkFeature_dispose$,
        'paintFeature': _InkFeature_paintFeature$,
        'toString': _InkFeature_toString$,
      },
      {},
    ),
    'ShapeBorderTween': m.ClassMirror(
      'ShapeBorderTween',
      {
        '#as': ShapeBorderTween_as$,
        '#is': ShapeBorderTween_is$,
        'lerp': _ShapeBorderTween_lerp$,
      },
      {},
    ),
    'MaterialType': m.ClassMirror(
      'MaterialType',
      {},
      {},
    ),
  },
);
Function _kMaterialEdges$(m.Scope scope$) => () => kMaterialEdges;
Function MaterialInkController_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MaterialInkController;
Function MaterialInkController_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MaterialInkController;
Function _MaterialInkController_color$(
  m.Scope scope$,
  MaterialInkController target$,
) =>
    () {
      return target$.color;
    };
Function _MaterialInkController_vsync$(
  m.Scope scope$,
  MaterialInkController target$,
) =>
    () {
      return target$.vsync;
    };
Function _MaterialInkController_addInkFeature$(
  m.Scope scope$,
  MaterialInkController target$,
) =>
    target$.addInkFeature;
Function _MaterialInkController_markNeedsPaint$(
  m.Scope scope$,
  MaterialInkController target$,
) =>
    target$.markNeedsPaint;
Function Material_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Material;
Function Material_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Material;
Function _Material_child$(
  m.Scope scope$,
  Material target$,
) =>
    () {
      return target$.child;
    };
Function _Material_type$(
  m.Scope scope$,
  Material target$,
) =>
    () {
      return target$.type;
    };
Function _Material_elevation$(
  m.Scope scope$,
  Material target$,
) =>
    () {
      return target$.elevation;
    };
Function _Material_color$(
  m.Scope scope$,
  Material target$,
) =>
    () {
      return target$.color;
    };
Function _Material_shadowColor$(
  m.Scope scope$,
  Material target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _Material_surfaceTintColor$(
  m.Scope scope$,
  Material target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _Material_textStyle$(
  m.Scope scope$,
  Material target$,
) =>
    () {
      return target$.textStyle;
    };
Function _Material_shape$(
  m.Scope scope$,
  Material target$,
) =>
    () {
      return target$.shape;
    };
Function _Material_borderOnForeground$(
  m.Scope scope$,
  Material target$,
) =>
    () {
      return target$.borderOnForeground;
    };
Function _Material_clipBehavior$(
  m.Scope scope$,
  Material target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _Material_animationDuration$(
  m.Scope scope$,
  Material target$,
) =>
    () {
      return target$.animationDuration;
    };
Function _Material_borderRadius$(
  m.Scope scope$,
  Material target$,
) =>
    () {
      return target$.borderRadius;
    };
Function _Material_defaultSplashRadius$(m.Scope scope$) =>
    () => Material.defaultSplashRadius;
Function _Material__$(m.Scope scope$) => ({
      Key? key,
      MaterialType? type,
      double? elevation,
      Color? color,
      Color? shadowColor,
      Color? surfaceTintColor,
      TextStyle? textStyle,
      BorderRadiusGeometry? borderRadius,
      ShapeBorder? shape,
      bool? borderOnForeground,
      Clip? clipBehavior,
      Duration? animationDuration,
      Widget? child,
    }) {
      return Material(
        animationDuration: animationDuration ?? kThemeChangeDuration,
        borderOnForeground: borderOnForeground ?? true,
        borderRadius: borderRadius,
        child: child,
        clipBehavior: clipBehavior ?? Clip.none,
        color: color,
        elevation: elevation ?? 0.0,
        key: key,
        shadowColor: shadowColor,
        shape: shape,
        surfaceTintColor: surfaceTintColor,
        textStyle: textStyle,
        type: type ?? MaterialType.canvas,
      );
    };
Function _Material_maybeOf$(m.Scope scope$) => Material.maybeOf;
Function _Material_of$(m.Scope scope$) => Material.of;
Function _Material_createState$(
  m.Scope scope$,
  Material target$,
) =>
    target$.createState;
Function _Material_debugFillProperties$(
  m.Scope scope$,
  Material target$,
) =>
    target$.debugFillProperties;
Function InkFeature_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as InkFeature;
Function InkFeature_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is InkFeature;
Function _InkFeature_referenceBox$(
  m.Scope scope$,
  InkFeature target$,
) =>
    () {
      return target$.referenceBox;
    };
Function _InkFeature_onRemoved$(
  m.Scope scope$,
  InkFeature target$,
) =>
    () {
      return target$.onRemoved;
    };
Function _InkFeature_controller$(
  m.Scope scope$,
  InkFeature target$,
) =>
    () {
      return target$.controller;
    };
Function _InkFeature_dispose$(
  m.Scope scope$,
  InkFeature target$,
) =>
    target$.dispose;
Function _InkFeature_paintFeature$(
  m.Scope scope$,
  InkFeature target$,
) =>
    target$.paintFeature;
Function _InkFeature_toString$(
  m.Scope scope$,
  InkFeature target$,
) =>
    target$.toString;
Function ShapeBorderTween_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ShapeBorderTween;
Function ShapeBorderTween_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ShapeBorderTween;
Function _ShapeBorderTween__$(m.Scope scope$) => ({
      ShapeBorder? begin,
      ShapeBorder? end,
    }) {
      return ShapeBorderTween(
        begin: begin,
        end: end,
      );
    };
Function _ShapeBorderTween_lerp$(
  m.Scope scope$,
  ShapeBorderTween target$,
) =>
    target$.lerp;
Function _MaterialType_canvas$(m.Scope scope$) => () => MaterialType.canvas;
Function _MaterialType_card$(m.Scope scope$) => () => MaterialType.card;
Function _MaterialType_circle$(m.Scope scope$) => () => MaterialType.circle;
Function _MaterialType_button$(m.Scope scope$) => () => MaterialType.button;
Function _MaterialType_transparency$(m.Scope scope$) =>
    () => MaterialType.transparency;
Function _MaterialType_values$(m.Scope scope$) => () => MaterialType.values;
