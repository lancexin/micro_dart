// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/material.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/elevation_overlay.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/material.dart',
  {
    'kMaterialEdges': _kMaterialEdges$,
    'Material.defaultSplashRadius': _Material_defaultSplashRadius$,
    'Material.maybeOf': _Material_maybeOf$,
    'Material.of': _Material_of$,
    'MaterialType.canvas': _MaterialType_canvas$,
    'MaterialType.card': _MaterialType_card$,
    'MaterialType.circle': _MaterialType_circle$,
    'MaterialType.button': _MaterialType_button$,
    'MaterialType.transparency': _MaterialType_transparency$,
    'MaterialType.values': _MaterialType_values$,
  },
  {},
  {
    'MaterialInkController': m.ClassMirror(
      'MaterialInkController',
      {
        'color': _MaterialInkController_color$,
        'vsync': _MaterialInkController_vsync$,
        'addInkFeature': _MaterialInkController_addInkFeature$,
        'markNeedsPaint': _MaterialInkController_markNeedsPaint$,
      },
      {},
    ),
    'Material': m.ClassMirror(
      'Material',
      {
        'child': _Material_child$,
        'type': _Material_type$,
        'elevation': _Material_elevation$,
        'color': _Material_color$,
        'shadowColor': _Material_shadowColor$,
        'surfaceTintColor': _Material_surfaceTintColor$,
        'textStyle': _Material_textStyle$,
        'shape': _Material_shape$,
        'borderOnForeground': _Material_borderOnForeground$,
        'clipBehavior': _Material_clipBehavior$,
        'animationDuration': _Material_animationDuration$,
        'borderRadius': _Material_borderRadius$,
        'createState': _Material_createState$,
        'debugFillProperties': _Material_debugFillProperties$,
      },
      {},
    ),
    'InkFeature': m.ClassMirror(
      'InkFeature',
      {
        'referenceBox': _InkFeature_referenceBox$,
        'onRemoved': _InkFeature_onRemoved$,
        'controller': _InkFeature_controller$,
        'dispose': _InkFeature_dispose$,
        'paintFeature': _InkFeature_paintFeature$,
        'toString': _InkFeature_toString$,
      },
      {},
    ),
    'ShapeBorderTween': m.ClassMirror(
      'ShapeBorderTween',
      {'lerp': _ShapeBorderTween_lerp$},
      {},
    ),
    'MaterialType': m.ClassMirror(
      'MaterialType',
      {},
      {},
    ),
  },
);
Map<MaterialType, BorderRadius?> _kMaterialEdges$() {
  return kMaterialEdges;
}

Color? _MaterialInkController_color$(MaterialInkController target) {
  return target.color;
}

TickerProvider _MaterialInkController_vsync$(MaterialInkController target) {
  return target.vsync;
}

Function _MaterialInkController_addInkFeature$(
  m.Scope scope,
  MaterialInkController target,
) =>
    target.addInkFeature;
Function _MaterialInkController_markNeedsPaint$(
  m.Scope scope,
  MaterialInkController target,
) =>
    target.markNeedsPaint;
Widget? _Material_child$(Material target) {
  return target.child;
}

MaterialType _Material_type$(Material target) {
  return target.type;
}

double _Material_elevation$(Material target) {
  return target.elevation;
}

Color? _Material_color$(Material target) {
  return target.color;
}

Color? _Material_shadowColor$(Material target) {
  return target.shadowColor;
}

Color? _Material_surfaceTintColor$(Material target) {
  return target.surfaceTintColor;
}

TextStyle? _Material_textStyle$(Material target) {
  return target.textStyle;
}

ShapeBorder? _Material_shape$(Material target) {
  return target.shape;
}

bool _Material_borderOnForeground$(Material target) {
  return target.borderOnForeground;
}

Clip _Material_clipBehavior$(Material target) {
  return target.clipBehavior;
}

Duration _Material_animationDuration$(Material target) {
  return target.animationDuration;
}

BorderRadiusGeometry? _Material_borderRadius$(Material target) {
  return target.borderRadius;
}

double _Material_defaultSplashRadius$() {
  return Material.defaultSplashRadius;
}

Function _Material_maybeOf$(m.Scope scope) => Material.maybeOf;
Function _Material_of$(m.Scope scope) => Material.of;
Function _Material_createState$(
  m.Scope scope,
  Material target,
) =>
    target.createState;
Function _Material_debugFillProperties$(
  m.Scope scope,
  Material target,
) =>
    target.debugFillProperties;
RenderBox _InkFeature_referenceBox$(InkFeature target) {
  return target.referenceBox;
}

void Function()? _InkFeature_onRemoved$(InkFeature target) {
  return target.onRemoved;
}

MaterialInkController _InkFeature_controller$(InkFeature target) {
  return target.controller;
}

Function _InkFeature_dispose$(
  m.Scope scope,
  InkFeature target,
) =>
    target.dispose;
Function _InkFeature_paintFeature$(
  m.Scope scope,
  InkFeature target,
) =>
    target.paintFeature;
Function _InkFeature_toString$(
  m.Scope scope,
  InkFeature target,
) =>
    target.toString;
Function _ShapeBorderTween_lerp$(
  m.Scope scope,
  ShapeBorderTween target,
) =>
    target.lerp;
MaterialType _MaterialType_canvas$() {
  return MaterialType.canvas;
}

MaterialType _MaterialType_card$() {
  return MaterialType.card;
}

MaterialType _MaterialType_circle$() {
  return MaterialType.circle;
}

MaterialType _MaterialType_button$() {
  return MaterialType.button;
}

MaterialType _MaterialType_transparency$() {
  return MaterialType.transparency;
}

List<MaterialType> _MaterialType_values$() {
  return MaterialType.values;
}
