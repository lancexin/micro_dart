// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/platform_views.dart';
import 'dart:async';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/src/services/message_codec.dart';
import 'package:flutter/src/services/system_channels.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/platform_views.dart',
  {
    'platformViewsRegistry': _platformViewsRegistry$,
    'AndroidPointerProperties.kToolTypeUnknown':
        _AndroidPointerProperties_kToolTypeUnknown$,
    'AndroidPointerProperties.kToolTypeFinger':
        _AndroidPointerProperties_kToolTypeFinger$,
    'AndroidPointerProperties.kToolTypeStylus':
        _AndroidPointerProperties_kToolTypeStylus$,
    'AndroidPointerProperties.kToolTypeMouse':
        _AndroidPointerProperties_kToolTypeMouse$,
    'AndroidPointerProperties.kToolTypeEraser':
        _AndroidPointerProperties_kToolTypeEraser$,
    'AndroidPointerProperties.': _AndroidPointerProperties__$,
    'AndroidPointerCoords.': _AndroidPointerCoords__$,
    'AndroidMotionEvent.': _AndroidMotionEvent__$,
    'AndroidViewController.kActionDown': _AndroidViewController_kActionDown$,
    'AndroidViewController.kActionUp': _AndroidViewController_kActionUp$,
    'AndroidViewController.kActionMove': _AndroidViewController_kActionMove$,
    'AndroidViewController.kActionCancel':
        _AndroidViewController_kActionCancel$,
    'AndroidViewController.kActionPointerDown':
        _AndroidViewController_kActionPointerDown$,
    'AndroidViewController.kActionPointerUp':
        _AndroidViewController_kActionPointerUp$,
    'AndroidViewController.kAndroidLayoutDirectionLtr':
        _AndroidViewController_kAndroidLayoutDirectionLtr$,
    'AndroidViewController.kAndroidLayoutDirectionRtl':
        _AndroidViewController_kAndroidLayoutDirectionRtl$,
    'AndroidViewController.pointerAction':
        _AndroidViewController_pointerAction$,
  },
  {},
  {
    'PlatformViewsRegistry': m.ClassMirror(
      'PlatformViewsRegistry',
      {
        '#as': PlatformViewsRegistry_as$,
        '#is': PlatformViewsRegistry_is$,
        'getNextPlatformViewId': _PlatformViewsRegistry_getNextPlatformViewId$,
      },
      {},
    ),
    'PlatformViewsService': m.ClassMirror(
      'PlatformViewsService',
      {
        '#as': PlatformViewsService_as$,
        '#is': PlatformViewsService_is$,
        'initAndroidView': _PlatformViewsService_initAndroidView$,
        'initSurfaceAndroidView': _PlatformViewsService_initSurfaceAndroidView$,
        'initExpensiveAndroidView':
            _PlatformViewsService_initExpensiveAndroidView$,
        'initUiKitView': _PlatformViewsService_initUiKitView$,
      },
      {},
    ),
    'AndroidPointerProperties': m.ClassMirror(
      'AndroidPointerProperties',
      {
        '#as': AndroidPointerProperties_as$,
        '#is': AndroidPointerProperties_is$,
        'id': _AndroidPointerProperties_id$,
        'toolType': _AndroidPointerProperties_toolType$,
        'toString': _AndroidPointerProperties_toString$,
      },
      {},
    ),
    'AndroidPointerCoords': m.ClassMirror(
      'AndroidPointerCoords',
      {
        '#as': AndroidPointerCoords_as$,
        '#is': AndroidPointerCoords_is$,
        'orientation': _AndroidPointerCoords_orientation$,
        'pressure': _AndroidPointerCoords_pressure$,
        'size': _AndroidPointerCoords_size$,
        'toolMajor': _AndroidPointerCoords_toolMajor$,
        'toolMinor': _AndroidPointerCoords_toolMinor$,
        'touchMajor': _AndroidPointerCoords_touchMajor$,
        'touchMinor': _AndroidPointerCoords_touchMinor$,
        'x': _AndroidPointerCoords_x$,
        'y': _AndroidPointerCoords_y$,
        'toString': _AndroidPointerCoords_toString$,
      },
      {},
    ),
    'AndroidMotionEvent': m.ClassMirror(
      'AndroidMotionEvent',
      {
        '#as': AndroidMotionEvent_as$,
        '#is': AndroidMotionEvent_is$,
        'downTime': _AndroidMotionEvent_downTime$,
        'eventTime': _AndroidMotionEvent_eventTime$,
        'action': _AndroidMotionEvent_action$,
        'pointerCount': _AndroidMotionEvent_pointerCount$,
        'pointerProperties': _AndroidMotionEvent_pointerProperties$,
        'pointerCoords': _AndroidMotionEvent_pointerCoords$,
        'metaState': _AndroidMotionEvent_metaState$,
        'buttonState': _AndroidMotionEvent_buttonState$,
        'xPrecision': _AndroidMotionEvent_xPrecision$,
        'yPrecision': _AndroidMotionEvent_yPrecision$,
        'deviceId': _AndroidMotionEvent_deviceId$,
        'edgeFlags': _AndroidMotionEvent_edgeFlags$,
        'source': _AndroidMotionEvent_source$,
        'flags': _AndroidMotionEvent_flags$,
        'motionEventId': _AndroidMotionEvent_motionEventId$,
        'toString': _AndroidMotionEvent_toString$,
      },
      {},
    ),
    'AndroidViewController': m.ClassMirror(
      'AndroidViewController',
      {
        '#as': AndroidViewController_as$,
        '#is': AndroidViewController_is$,
        'viewId': _AndroidViewController_viewId$,
        'awaitingCreation': _AndroidViewController_awaitingCreation$,
        'textureId': _AndroidViewController_textureId$,
        'requiresViewComposition':
            _AndroidViewController_requiresViewComposition$,
        'pointTransformer': _AndroidViewController_pointTransformer$,
        'isCreated': _AndroidViewController_isCreated$,
        'createdCallbacks': _AndroidViewController_createdCallbacks$,
        'create': _AndroidViewController_create$,
        'setSize': _AndroidViewController_setSize$,
        'setOffset': _AndroidViewController_setOffset$,
        'sendMotionEvent': _AndroidViewController_sendMotionEvent$,
        'addOnPlatformViewCreatedListener':
            _AndroidViewController_addOnPlatformViewCreatedListener$,
        'removeOnPlatformViewCreatedListener':
            _AndroidViewController_removeOnPlatformViewCreatedListener$,
        'setLayoutDirection': _AndroidViewController_setLayoutDirection$,
        'dispatchPointerEvent': _AndroidViewController_dispatchPointerEvent$,
        'clearFocus': _AndroidViewController_clearFocus$,
        'dispose': _AndroidViewController_dispose$,
      },
      {'pointTransformer': _AndroidViewController_pointTransformer_set$},
    ),
    'SurfaceAndroidViewController': m.ClassMirror(
      'SurfaceAndroidViewController',
      {
        '#as': SurfaceAndroidViewController_as$,
        '#is': SurfaceAndroidViewController_is$,
        'textureId': _SurfaceAndroidViewController_textureId$,
        'requiresViewComposition':
            _SurfaceAndroidViewController_requiresViewComposition$,
        'setOffset': _SurfaceAndroidViewController_setOffset$,
      },
      {},
    ),
    'ExpensiveAndroidViewController': m.ClassMirror(
      'ExpensiveAndroidViewController',
      {
        '#as': ExpensiveAndroidViewController_as$,
        '#is': ExpensiveAndroidViewController_is$,
        'textureId': _ExpensiveAndroidViewController_textureId$,
        'requiresViewComposition':
            _ExpensiveAndroidViewController_requiresViewComposition$,
        'setOffset': _ExpensiveAndroidViewController_setOffset$,
      },
      {},
    ),
    'TextureAndroidViewController': m.ClassMirror(
      'TextureAndroidViewController',
      {
        '#as': TextureAndroidViewController_as$,
        '#is': TextureAndroidViewController_is$,
        'textureId': _TextureAndroidViewController_textureId$,
        'requiresViewComposition':
            _TextureAndroidViewController_requiresViewComposition$,
        'setOffset': _TextureAndroidViewController_setOffset$,
      },
      {},
    ),
    'UiKitViewController': m.ClassMirror(
      'UiKitViewController',
      {
        '#as': UiKitViewController_as$,
        '#is': UiKitViewController_is$,
        'id': _UiKitViewController_id$,
        'setLayoutDirection': _UiKitViewController_setLayoutDirection$,
        'acceptGesture': _UiKitViewController_acceptGesture$,
        'rejectGesture': _UiKitViewController_rejectGesture$,
        'dispose': _UiKitViewController_dispose$,
      },
      {},
    ),
    'PlatformViewController': m.ClassMirror(
      'PlatformViewController',
      {
        '#as': PlatformViewController_as$,
        '#is': PlatformViewController_is$,
        'viewId': _PlatformViewController_viewId$,
        'awaitingCreation': _PlatformViewController_awaitingCreation$,
        'dispatchPointerEvent': _PlatformViewController_dispatchPointerEvent$,
        'create': _PlatformViewController_create$,
        'dispose': _PlatformViewController_dispose$,
        'clearFocus': _PlatformViewController_clearFocus$,
      },
      {},
    ),
  },
);
Function _platformViewsRegistry$(m.Scope scope$) => () => platformViewsRegistry;
Function PlatformViewsRegistry_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PlatformViewsRegistry;
Function PlatformViewsRegistry_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PlatformViewsRegistry;
Function _PlatformViewsRegistry_getNextPlatformViewId$(
  m.Scope scope$,
  PlatformViewsRegistry target$,
) =>
    target$.getNextPlatformViewId;
Function PlatformViewsService_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PlatformViewsService;
Function PlatformViewsService_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PlatformViewsService;
Function _PlatformViewsService_initAndroidView$(m.Scope scope$) => ({
      required int id,
      required String viewType,
      required TextDirection layoutDirection,
      dynamic? creationParams,
      MessageCodec<dynamic>? creationParamsCodec,
      m.FunctionPointer? onFocus,
    }) {
      void onFocusProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onFocus!,
            [],
            {},
          );
      return PlatformViewsService.initAndroidView(
        creationParams: creationParams,
        creationParamsCodec: creationParamsCodec,
        id: id,
        layoutDirection: layoutDirection,
        onFocus: onFocus == null ? null : onFocusProxy,
        viewType: viewType,
      );
    };
Function _PlatformViewsService_initSurfaceAndroidView$(m.Scope scope$) => ({
      required int id,
      required String viewType,
      required TextDirection layoutDirection,
      dynamic? creationParams,
      MessageCodec<dynamic>? creationParamsCodec,
      m.FunctionPointer? onFocus,
    }) {
      void onFocusProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onFocus!,
            [],
            {},
          );
      return PlatformViewsService.initSurfaceAndroidView(
        creationParams: creationParams,
        creationParamsCodec: creationParamsCodec,
        id: id,
        layoutDirection: layoutDirection,
        onFocus: onFocus == null ? null : onFocusProxy,
        viewType: viewType,
      );
    };
Function _PlatformViewsService_initExpensiveAndroidView$(m.Scope scope$) => ({
      required int id,
      required String viewType,
      required TextDirection layoutDirection,
      dynamic? creationParams,
      MessageCodec<dynamic>? creationParamsCodec,
      m.FunctionPointer? onFocus,
    }) {
      void onFocusProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onFocus!,
            [],
            {},
          );
      return PlatformViewsService.initExpensiveAndroidView(
        creationParams: creationParams,
        creationParamsCodec: creationParamsCodec,
        id: id,
        layoutDirection: layoutDirection,
        onFocus: onFocus == null ? null : onFocusProxy,
        viewType: viewType,
      );
    };
Function _PlatformViewsService_initUiKitView$(m.Scope scope$) => ({
      required int id,
      required String viewType,
      required TextDirection layoutDirection,
      dynamic? creationParams,
      MessageCodec<dynamic>? creationParamsCodec,
      m.FunctionPointer? onFocus,
    }) {
      void onFocusProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onFocus!,
            [],
            {},
          );
      return PlatformViewsService.initUiKitView(
        creationParams: creationParams,
        creationParamsCodec: creationParamsCodec,
        id: id,
        layoutDirection: layoutDirection,
        onFocus: onFocus == null ? null : onFocusProxy,
        viewType: viewType,
      );
    };
Function AndroidPointerProperties_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AndroidPointerProperties;
Function AndroidPointerProperties_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AndroidPointerProperties;
Function _AndroidPointerProperties_id$(
  m.Scope scope$,
  AndroidPointerProperties target$,
) =>
    () {
      return target$.id;
    };
Function _AndroidPointerProperties_toolType$(
  m.Scope scope$,
  AndroidPointerProperties target$,
) =>
    () {
      return target$.toolType;
    };
Function _AndroidPointerProperties_kToolTypeUnknown$(m.Scope scope$) =>
    () => AndroidPointerProperties.kToolTypeUnknown;
Function _AndroidPointerProperties_kToolTypeFinger$(m.Scope scope$) =>
    () => AndroidPointerProperties.kToolTypeFinger;
Function _AndroidPointerProperties_kToolTypeStylus$(m.Scope scope$) =>
    () => AndroidPointerProperties.kToolTypeStylus;
Function _AndroidPointerProperties_kToolTypeMouse$(m.Scope scope$) =>
    () => AndroidPointerProperties.kToolTypeMouse;
Function _AndroidPointerProperties_kToolTypeEraser$(m.Scope scope$) =>
    () => AndroidPointerProperties.kToolTypeEraser;
Function _AndroidPointerProperties__$(m.Scope scope$) => ({
      required int id,
      required int toolType,
    }) {
      return AndroidPointerProperties(
        id: id,
        toolType: toolType,
      );
    };
Function _AndroidPointerProperties_toString$(
  m.Scope scope$,
  AndroidPointerProperties target$,
) =>
    target$.toString;
Function AndroidPointerCoords_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AndroidPointerCoords;
Function AndroidPointerCoords_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AndroidPointerCoords;
Function _AndroidPointerCoords_orientation$(
  m.Scope scope$,
  AndroidPointerCoords target$,
) =>
    () {
      return target$.orientation;
    };
Function _AndroidPointerCoords_pressure$(
  m.Scope scope$,
  AndroidPointerCoords target$,
) =>
    () {
      return target$.pressure;
    };
Function _AndroidPointerCoords_size$(
  m.Scope scope$,
  AndroidPointerCoords target$,
) =>
    () {
      return target$.size;
    };
Function _AndroidPointerCoords_toolMajor$(
  m.Scope scope$,
  AndroidPointerCoords target$,
) =>
    () {
      return target$.toolMajor;
    };
Function _AndroidPointerCoords_toolMinor$(
  m.Scope scope$,
  AndroidPointerCoords target$,
) =>
    () {
      return target$.toolMinor;
    };
Function _AndroidPointerCoords_touchMajor$(
  m.Scope scope$,
  AndroidPointerCoords target$,
) =>
    () {
      return target$.touchMajor;
    };
Function _AndroidPointerCoords_touchMinor$(
  m.Scope scope$,
  AndroidPointerCoords target$,
) =>
    () {
      return target$.touchMinor;
    };
Function _AndroidPointerCoords_x$(
  m.Scope scope$,
  AndroidPointerCoords target$,
) =>
    () {
      return target$.x;
    };
Function _AndroidPointerCoords_y$(
  m.Scope scope$,
  AndroidPointerCoords target$,
) =>
    () {
      return target$.y;
    };
Function _AndroidPointerCoords__$(m.Scope scope$) => ({
      required double orientation,
      required double pressure,
      required double size,
      required double toolMajor,
      required double toolMinor,
      required double touchMajor,
      required double touchMinor,
      required double x,
      required double y,
    }) {
      return AndroidPointerCoords(
        orientation: orientation,
        pressure: pressure,
        size: size,
        toolMajor: toolMajor,
        toolMinor: toolMinor,
        touchMajor: touchMajor,
        touchMinor: touchMinor,
        x: x,
        y: y,
      );
    };
Function _AndroidPointerCoords_toString$(
  m.Scope scope$,
  AndroidPointerCoords target$,
) =>
    target$.toString;
Function AndroidMotionEvent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AndroidMotionEvent;
Function AndroidMotionEvent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AndroidMotionEvent;
Function _AndroidMotionEvent_downTime$(
  m.Scope scope$,
  AndroidMotionEvent target$,
) =>
    () {
      return target$.downTime;
    };
Function _AndroidMotionEvent_eventTime$(
  m.Scope scope$,
  AndroidMotionEvent target$,
) =>
    () {
      return target$.eventTime;
    };
Function _AndroidMotionEvent_action$(
  m.Scope scope$,
  AndroidMotionEvent target$,
) =>
    () {
      return target$.action;
    };
Function _AndroidMotionEvent_pointerCount$(
  m.Scope scope$,
  AndroidMotionEvent target$,
) =>
    () {
      return target$.pointerCount;
    };
Function _AndroidMotionEvent_pointerProperties$(
  m.Scope scope$,
  AndroidMotionEvent target$,
) =>
    () {
      return target$.pointerProperties;
    };
Function _AndroidMotionEvent_pointerCoords$(
  m.Scope scope$,
  AndroidMotionEvent target$,
) =>
    () {
      return target$.pointerCoords;
    };
Function _AndroidMotionEvent_metaState$(
  m.Scope scope$,
  AndroidMotionEvent target$,
) =>
    () {
      return target$.metaState;
    };
Function _AndroidMotionEvent_buttonState$(
  m.Scope scope$,
  AndroidMotionEvent target$,
) =>
    () {
      return target$.buttonState;
    };
Function _AndroidMotionEvent_xPrecision$(
  m.Scope scope$,
  AndroidMotionEvent target$,
) =>
    () {
      return target$.xPrecision;
    };
Function _AndroidMotionEvent_yPrecision$(
  m.Scope scope$,
  AndroidMotionEvent target$,
) =>
    () {
      return target$.yPrecision;
    };
Function _AndroidMotionEvent_deviceId$(
  m.Scope scope$,
  AndroidMotionEvent target$,
) =>
    () {
      return target$.deviceId;
    };
Function _AndroidMotionEvent_edgeFlags$(
  m.Scope scope$,
  AndroidMotionEvent target$,
) =>
    () {
      return target$.edgeFlags;
    };
Function _AndroidMotionEvent_source$(
  m.Scope scope$,
  AndroidMotionEvent target$,
) =>
    () {
      return target$.source;
    };
Function _AndroidMotionEvent_flags$(
  m.Scope scope$,
  AndroidMotionEvent target$,
) =>
    () {
      return target$.flags;
    };
Function _AndroidMotionEvent_motionEventId$(
  m.Scope scope$,
  AndroidMotionEvent target$,
) =>
    () {
      return target$.motionEventId;
    };
Function _AndroidMotionEvent__$(m.Scope scope$) => ({
      required int downTime,
      required int eventTime,
      required int action,
      required int pointerCount,
      required List pointerProperties,
      required List pointerCoords,
      required int metaState,
      required int buttonState,
      required double xPrecision,
      required double yPrecision,
      required int deviceId,
      required int edgeFlags,
      required int source,
      required int flags,
      required int motionEventId,
    }) {
      return AndroidMotionEvent(
        action: action,
        buttonState: buttonState,
        deviceId: deviceId,
        downTime: downTime,
        edgeFlags: edgeFlags,
        eventTime: eventTime,
        flags: flags,
        metaState: metaState,
        motionEventId: motionEventId,
        pointerCoords: List.from(pointerCoords),
        pointerCount: pointerCount,
        pointerProperties: List.from(pointerProperties),
        source: source,
        xPrecision: xPrecision,
        yPrecision: yPrecision,
      );
    };
Function _AndroidMotionEvent_toString$(
  m.Scope scope$,
  AndroidMotionEvent target$,
) =>
    target$.toString;
Function AndroidViewController_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AndroidViewController;
Function AndroidViewController_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AndroidViewController;
Function _AndroidViewController_kActionDown$(m.Scope scope$) =>
    () => AndroidViewController.kActionDown;
Function _AndroidViewController_kActionUp$(m.Scope scope$) =>
    () => AndroidViewController.kActionUp;
Function _AndroidViewController_kActionMove$(m.Scope scope$) =>
    () => AndroidViewController.kActionMove;
Function _AndroidViewController_kActionCancel$(m.Scope scope$) =>
    () => AndroidViewController.kActionCancel;
Function _AndroidViewController_kActionPointerDown$(m.Scope scope$) =>
    () => AndroidViewController.kActionPointerDown;
Function _AndroidViewController_kActionPointerUp$(m.Scope scope$) =>
    () => AndroidViewController.kActionPointerUp;
Function _AndroidViewController_kAndroidLayoutDirectionLtr$(m.Scope scope$) =>
    () => AndroidViewController.kAndroidLayoutDirectionLtr;
Function _AndroidViewController_kAndroidLayoutDirectionRtl$(m.Scope scope$) =>
    () => AndroidViewController.kAndroidLayoutDirectionRtl;
Function _AndroidViewController_viewId$(
  m.Scope scope$,
  AndroidViewController target$,
) =>
    () {
      return target$.viewId;
    };
Function _AndroidViewController_awaitingCreation$(
  m.Scope scope$,
  AndroidViewController target$,
) =>
    () {
      return target$.awaitingCreation;
    };
Function _AndroidViewController_textureId$(
  m.Scope scope$,
  AndroidViewController target$,
) =>
    () {
      return target$.textureId;
    };
Function _AndroidViewController_requiresViewComposition$(
  m.Scope scope$,
  AndroidViewController target$,
) =>
    () {
      return target$.requiresViewComposition;
    };
Function _AndroidViewController_pointTransformer$(
  m.Scope scope$,
  AndroidViewController target$,
) =>
    () {
      return target$.pointTransformer;
    };
Function _AndroidViewController_pointTransformer_set$(
  m.Scope scope$,
  AndroidViewController target$,
) =>
    (m.FunctionPointer transformer) {
      Offset transformerProxy(Offset transformer_position$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            transformer,
            [transformer_position$],
            {},
          );
      target$.pointTransformer = (transformerProxy);
    };
Function _AndroidViewController_isCreated$(
  m.Scope scope$,
  AndroidViewController target$,
) =>
    () {
      return target$.isCreated;
    };
Function _AndroidViewController_createdCallbacks$(
  m.Scope scope$,
  AndroidViewController target$,
) =>
    () {
      return target$.createdCallbacks;
    };
Function _AndroidViewController_pointerAction$(m.Scope scope$) =>
    AndroidViewController.pointerAction;
Function _AndroidViewController_create$(
  m.Scope scope$,
  AndroidViewController target$,
) =>
    target$.create;
Function _AndroidViewController_setSize$(
  m.Scope scope$,
  AndroidViewController target$,
) =>
    target$.setSize;
Function _AndroidViewController_setOffset$(
  m.Scope scope$,
  AndroidViewController target$,
) =>
    target$.setOffset;
Function _AndroidViewController_sendMotionEvent$(
  m.Scope scope$,
  AndroidViewController target$,
) =>
    target$.sendMotionEvent;
Function _AndroidViewController_addOnPlatformViewCreatedListener$(
  m.Scope scope$,
  AndroidViewController target$,
) =>
    (m.FunctionPointer listener) {
      void listenerProxy(int listener_id$) => scope$.engine.callFunctionPointer(
            scope$,
            listener,
            [listener_id$],
            {},
          );
      target$.addOnPlatformViewCreatedListener(listenerProxy);
    };
Function _AndroidViewController_removeOnPlatformViewCreatedListener$(
  m.Scope scope$,
  AndroidViewController target$,
) =>
    (m.FunctionPointer listener) {
      void listenerProxy(int listener_id$) => scope$.engine.callFunctionPointer(
            scope$,
            listener,
            [listener_id$],
            {},
          );
      target$.removeOnPlatformViewCreatedListener(listenerProxy);
    };
Function _AndroidViewController_setLayoutDirection$(
  m.Scope scope$,
  AndroidViewController target$,
) =>
    target$.setLayoutDirection;
Function _AndroidViewController_dispatchPointerEvent$(
  m.Scope scope$,
  AndroidViewController target$,
) =>
    target$.dispatchPointerEvent;
Function _AndroidViewController_clearFocus$(
  m.Scope scope$,
  AndroidViewController target$,
) =>
    target$.clearFocus;
Function _AndroidViewController_dispose$(
  m.Scope scope$,
  AndroidViewController target$,
) =>
    target$.dispose;
Function SurfaceAndroidViewController_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SurfaceAndroidViewController;
Function SurfaceAndroidViewController_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SurfaceAndroidViewController;
Function _SurfaceAndroidViewController_textureId$(
  m.Scope scope$,
  SurfaceAndroidViewController target$,
) =>
    () {
      return target$.textureId;
    };
Function _SurfaceAndroidViewController_requiresViewComposition$(
  m.Scope scope$,
  SurfaceAndroidViewController target$,
) =>
    () {
      return target$.requiresViewComposition;
    };
Function _SurfaceAndroidViewController_setOffset$(
  m.Scope scope$,
  SurfaceAndroidViewController target$,
) =>
    target$.setOffset;
Function ExpensiveAndroidViewController_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ExpensiveAndroidViewController;
Function ExpensiveAndroidViewController_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ExpensiveAndroidViewController;
Function _ExpensiveAndroidViewController_textureId$(
  m.Scope scope$,
  ExpensiveAndroidViewController target$,
) =>
    () {
      return target$.textureId;
    };
Function _ExpensiveAndroidViewController_requiresViewComposition$(
  m.Scope scope$,
  ExpensiveAndroidViewController target$,
) =>
    () {
      return target$.requiresViewComposition;
    };
Function _ExpensiveAndroidViewController_setOffset$(
  m.Scope scope$,
  ExpensiveAndroidViewController target$,
) =>
    target$.setOffset;
Function TextureAndroidViewController_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextureAndroidViewController;
Function TextureAndroidViewController_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextureAndroidViewController;
Function _TextureAndroidViewController_textureId$(
  m.Scope scope$,
  TextureAndroidViewController target$,
) =>
    () {
      return target$.textureId;
    };
Function _TextureAndroidViewController_requiresViewComposition$(
  m.Scope scope$,
  TextureAndroidViewController target$,
) =>
    () {
      return target$.requiresViewComposition;
    };
Function _TextureAndroidViewController_setOffset$(
  m.Scope scope$,
  TextureAndroidViewController target$,
) =>
    target$.setOffset;
Function UiKitViewController_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as UiKitViewController;
Function UiKitViewController_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is UiKitViewController;
Function _UiKitViewController_id$(
  m.Scope scope$,
  UiKitViewController target$,
) =>
    () {
      return target$.id;
    };
Function _UiKitViewController_setLayoutDirection$(
  m.Scope scope$,
  UiKitViewController target$,
) =>
    target$.setLayoutDirection;
Function _UiKitViewController_acceptGesture$(
  m.Scope scope$,
  UiKitViewController target$,
) =>
    target$.acceptGesture;
Function _UiKitViewController_rejectGesture$(
  m.Scope scope$,
  UiKitViewController target$,
) =>
    target$.rejectGesture;
Function _UiKitViewController_dispose$(
  m.Scope scope$,
  UiKitViewController target$,
) =>
    target$.dispose;
Function PlatformViewController_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PlatformViewController;
Function PlatformViewController_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PlatformViewController;
Function _PlatformViewController_viewId$(
  m.Scope scope$,
  PlatformViewController target$,
) =>
    () {
      return target$.viewId;
    };
Function _PlatformViewController_awaitingCreation$(
  m.Scope scope$,
  PlatformViewController target$,
) =>
    () {
      return target$.awaitingCreation;
    };
Function _PlatformViewController_dispatchPointerEvent$(
  m.Scope scope$,
  PlatformViewController target$,
) =>
    target$.dispatchPointerEvent;
Function _PlatformViewController_create$(
  m.Scope scope$,
  PlatformViewController target$,
) =>
    target$.create;
Function _PlatformViewController_dispose$(
  m.Scope scope$,
  PlatformViewController target$,
) =>
    target$.dispose;
Function _PlatformViewController_clearFocus$(
  m.Scope scope$,
  PlatformViewController target$,
) =>
    target$.clearFocus;
