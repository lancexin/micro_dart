// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/platform_views.dart';
import 'dart:async';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/src/services/message_codec.dart';
import 'package:flutter/src/services/system_channels.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/platform_views.dart',
  {
    'platformViewsRegistry': _platformViewsRegistry$,
    'AndroidPointerProperties.kToolTypeUnknown':
        _AndroidPointerProperties_kToolTypeUnknown$,
    'AndroidPointerProperties.kToolTypeFinger':
        _AndroidPointerProperties_kToolTypeFinger$,
    'AndroidPointerProperties.kToolTypeStylus':
        _AndroidPointerProperties_kToolTypeStylus$,
    'AndroidPointerProperties.kToolTypeMouse':
        _AndroidPointerProperties_kToolTypeMouse$,
    'AndroidPointerProperties.kToolTypeEraser':
        _AndroidPointerProperties_kToolTypeEraser$,
    'AndroidViewController.kActionDown': _AndroidViewController_kActionDown$,
    'AndroidViewController.kActionUp': _AndroidViewController_kActionUp$,
    'AndroidViewController.kActionMove': _AndroidViewController_kActionMove$,
    'AndroidViewController.kActionCancel':
        _AndroidViewController_kActionCancel$,
    'AndroidViewController.kActionPointerDown':
        _AndroidViewController_kActionPointerDown$,
    'AndroidViewController.kActionPointerUp':
        _AndroidViewController_kActionPointerUp$,
    'AndroidViewController.kAndroidLayoutDirectionLtr':
        _AndroidViewController_kAndroidLayoutDirectionLtr$,
    'AndroidViewController.kAndroidLayoutDirectionRtl':
        _AndroidViewController_kAndroidLayoutDirectionRtl$,
    'AndroidViewController.pointerAction':
        _AndroidViewController_pointerAction$,
  },
  {},
  {
    'PlatformViewsRegistry': m.ClassMirror(
      'PlatformViewsRegistry',
      {'getNextPlatformViewId': _PlatformViewsRegistry_getNextPlatformViewId$},
      {},
    ),
    'PlatformViewsService': m.ClassMirror(
      'PlatformViewsService',
      {},
      {},
    ),
    'AndroidPointerProperties': m.ClassMirror(
      'AndroidPointerProperties',
      {
        'id': _AndroidPointerProperties_id$,
        'toolType': _AndroidPointerProperties_toolType$,
        'toString': _AndroidPointerProperties_toString$,
      },
      {},
    ),
    'AndroidPointerCoords': m.ClassMirror(
      'AndroidPointerCoords',
      {
        'orientation': _AndroidPointerCoords_orientation$,
        'pressure': _AndroidPointerCoords_pressure$,
        'size': _AndroidPointerCoords_size$,
        'toolMajor': _AndroidPointerCoords_toolMajor$,
        'toolMinor': _AndroidPointerCoords_toolMinor$,
        'touchMajor': _AndroidPointerCoords_touchMajor$,
        'touchMinor': _AndroidPointerCoords_touchMinor$,
        'x': _AndroidPointerCoords_x$,
        'y': _AndroidPointerCoords_y$,
        'toString': _AndroidPointerCoords_toString$,
      },
      {},
    ),
    'AndroidMotionEvent': m.ClassMirror(
      'AndroidMotionEvent',
      {
        'downTime': _AndroidMotionEvent_downTime$,
        'eventTime': _AndroidMotionEvent_eventTime$,
        'action': _AndroidMotionEvent_action$,
        'pointerCount': _AndroidMotionEvent_pointerCount$,
        'pointerProperties': _AndroidMotionEvent_pointerProperties$,
        'pointerCoords': _AndroidMotionEvent_pointerCoords$,
        'metaState': _AndroidMotionEvent_metaState$,
        'buttonState': _AndroidMotionEvent_buttonState$,
        'xPrecision': _AndroidMotionEvent_xPrecision$,
        'yPrecision': _AndroidMotionEvent_yPrecision$,
        'deviceId': _AndroidMotionEvent_deviceId$,
        'edgeFlags': _AndroidMotionEvent_edgeFlags$,
        'source': _AndroidMotionEvent_source$,
        'flags': _AndroidMotionEvent_flags$,
        'motionEventId': _AndroidMotionEvent_motionEventId$,
        'toString': _AndroidMotionEvent_toString$,
      },
      {},
    ),
    'AndroidViewController': m.ClassMirror(
      'AndroidViewController',
      {
        'viewId': _AndroidViewController_viewId$,
        'awaitingCreation': _AndroidViewController_awaitingCreation$,
        'textureId': _AndroidViewController_textureId$,
        'requiresViewComposition':
            _AndroidViewController_requiresViewComposition$,
        'pointTransformer': _AndroidViewController_pointTransformer$,
        'isCreated': _AndroidViewController_isCreated$,
        'createdCallbacks': _AndroidViewController_createdCallbacks$,
        'create': _AndroidViewController_create$,
        'setSize': _AndroidViewController_setSize$,
        'setOffset': _AndroidViewController_setOffset$,
        'sendMotionEvent': _AndroidViewController_sendMotionEvent$,
        'setLayoutDirection': _AndroidViewController_setLayoutDirection$,
        'dispatchPointerEvent': _AndroidViewController_dispatchPointerEvent$,
        'clearFocus': _AndroidViewController_clearFocus$,
        'dispose': _AndroidViewController_dispose$,
      },
      {'pointTransformer': _AndroidViewController_pointTransformer_set$},
    ),
    'SurfaceAndroidViewController': m.ClassMirror(
      'SurfaceAndroidViewController',
      {
        'textureId': _SurfaceAndroidViewController_textureId$,
        'requiresViewComposition':
            _SurfaceAndroidViewController_requiresViewComposition$,
        'setOffset': _SurfaceAndroidViewController_setOffset$,
      },
      {},
    ),
    'ExpensiveAndroidViewController': m.ClassMirror(
      'ExpensiveAndroidViewController',
      {
        'textureId': _ExpensiveAndroidViewController_textureId$,
        'requiresViewComposition':
            _ExpensiveAndroidViewController_requiresViewComposition$,
        'setOffset': _ExpensiveAndroidViewController_setOffset$,
      },
      {},
    ),
    'TextureAndroidViewController': m.ClassMirror(
      'TextureAndroidViewController',
      {
        'textureId': _TextureAndroidViewController_textureId$,
        'requiresViewComposition':
            _TextureAndroidViewController_requiresViewComposition$,
        'setOffset': _TextureAndroidViewController_setOffset$,
      },
      {},
    ),
    'UiKitViewController': m.ClassMirror(
      'UiKitViewController',
      {
        'id': _UiKitViewController_id$,
        'setLayoutDirection': _UiKitViewController_setLayoutDirection$,
        'acceptGesture': _UiKitViewController_acceptGesture$,
        'rejectGesture': _UiKitViewController_rejectGesture$,
        'dispose': _UiKitViewController_dispose$,
      },
      {},
    ),
    'PlatformViewController': m.ClassMirror(
      'PlatformViewController',
      {
        'viewId': _PlatformViewController_viewId$,
        'awaitingCreation': _PlatformViewController_awaitingCreation$,
        'dispatchPointerEvent': _PlatformViewController_dispatchPointerEvent$,
        'create': _PlatformViewController_create$,
        'dispose': _PlatformViewController_dispose$,
        'clearFocus': _PlatformViewController_clearFocus$,
      },
      {},
    ),
  },
);
PlatformViewsRegistry _platformViewsRegistry$() {
  return platformViewsRegistry;
}

Function _PlatformViewsRegistry_getNextPlatformViewId$(
  m.Scope scope,
  PlatformViewsRegistry target,
) =>
    target.getNextPlatformViewId;
int _AndroidPointerProperties_id$(AndroidPointerProperties target) {
  return target.id;
}

int _AndroidPointerProperties_toolType$(AndroidPointerProperties target) {
  return target.toolType;
}

int _AndroidPointerProperties_kToolTypeUnknown$() {
  return AndroidPointerProperties.kToolTypeUnknown;
}

int _AndroidPointerProperties_kToolTypeFinger$() {
  return AndroidPointerProperties.kToolTypeFinger;
}

int _AndroidPointerProperties_kToolTypeStylus$() {
  return AndroidPointerProperties.kToolTypeStylus;
}

int _AndroidPointerProperties_kToolTypeMouse$() {
  return AndroidPointerProperties.kToolTypeMouse;
}

int _AndroidPointerProperties_kToolTypeEraser$() {
  return AndroidPointerProperties.kToolTypeEraser;
}

Function _AndroidPointerProperties_toString$(
  m.Scope scope,
  AndroidPointerProperties target,
) =>
    target.toString;
double _AndroidPointerCoords_orientation$(AndroidPointerCoords target) {
  return target.orientation;
}

double _AndroidPointerCoords_pressure$(AndroidPointerCoords target) {
  return target.pressure;
}

double _AndroidPointerCoords_size$(AndroidPointerCoords target) {
  return target.size;
}

double _AndroidPointerCoords_toolMajor$(AndroidPointerCoords target) {
  return target.toolMajor;
}

double _AndroidPointerCoords_toolMinor$(AndroidPointerCoords target) {
  return target.toolMinor;
}

double _AndroidPointerCoords_touchMajor$(AndroidPointerCoords target) {
  return target.touchMajor;
}

double _AndroidPointerCoords_touchMinor$(AndroidPointerCoords target) {
  return target.touchMinor;
}

double _AndroidPointerCoords_x$(AndroidPointerCoords target) {
  return target.x;
}

double _AndroidPointerCoords_y$(AndroidPointerCoords target) {
  return target.y;
}

Function _AndroidPointerCoords_toString$(
  m.Scope scope,
  AndroidPointerCoords target,
) =>
    target.toString;
int _AndroidMotionEvent_downTime$(AndroidMotionEvent target) {
  return target.downTime;
}

int _AndroidMotionEvent_eventTime$(AndroidMotionEvent target) {
  return target.eventTime;
}

int _AndroidMotionEvent_action$(AndroidMotionEvent target) {
  return target.action;
}

int _AndroidMotionEvent_pointerCount$(AndroidMotionEvent target) {
  return target.pointerCount;
}

List<AndroidPointerProperties> _AndroidMotionEvent_pointerProperties$(
    AndroidMotionEvent target) {
  return target.pointerProperties;
}

List<AndroidPointerCoords> _AndroidMotionEvent_pointerCoords$(
    AndroidMotionEvent target) {
  return target.pointerCoords;
}

int _AndroidMotionEvent_metaState$(AndroidMotionEvent target) {
  return target.metaState;
}

int _AndroidMotionEvent_buttonState$(AndroidMotionEvent target) {
  return target.buttonState;
}

double _AndroidMotionEvent_xPrecision$(AndroidMotionEvent target) {
  return target.xPrecision;
}

double _AndroidMotionEvent_yPrecision$(AndroidMotionEvent target) {
  return target.yPrecision;
}

int _AndroidMotionEvent_deviceId$(AndroidMotionEvent target) {
  return target.deviceId;
}

int _AndroidMotionEvent_edgeFlags$(AndroidMotionEvent target) {
  return target.edgeFlags;
}

int _AndroidMotionEvent_source$(AndroidMotionEvent target) {
  return target.source;
}

int _AndroidMotionEvent_flags$(AndroidMotionEvent target) {
  return target.flags;
}

int _AndroidMotionEvent_motionEventId$(AndroidMotionEvent target) {
  return target.motionEventId;
}

Function _AndroidMotionEvent_toString$(
  m.Scope scope,
  AndroidMotionEvent target,
) =>
    target.toString;
int _AndroidViewController_kActionDown$() {
  return AndroidViewController.kActionDown;
}

int _AndroidViewController_kActionUp$() {
  return AndroidViewController.kActionUp;
}

int _AndroidViewController_kActionMove$() {
  return AndroidViewController.kActionMove;
}

int _AndroidViewController_kActionCancel$() {
  return AndroidViewController.kActionCancel;
}

int _AndroidViewController_kActionPointerDown$() {
  return AndroidViewController.kActionPointerDown;
}

int _AndroidViewController_kActionPointerUp$() {
  return AndroidViewController.kActionPointerUp;
}

int _AndroidViewController_kAndroidLayoutDirectionLtr$() {
  return AndroidViewController.kAndroidLayoutDirectionLtr;
}

int _AndroidViewController_kAndroidLayoutDirectionRtl$() {
  return AndroidViewController.kAndroidLayoutDirectionRtl;
}

int _AndroidViewController_viewId$(AndroidViewController target) {
  return target.viewId;
}

bool _AndroidViewController_awaitingCreation$(AndroidViewController target) {
  return target.awaitingCreation;
}

int? _AndroidViewController_textureId$(AndroidViewController target) {
  return target.textureId;
}

bool _AndroidViewController_requiresViewComposition$(
    AndroidViewController target) {
  return target.requiresViewComposition;
}

Offset Function(Offset) _AndroidViewController_pointTransformer$(
    AndroidViewController target) {
  return target.pointTransformer;
}

Function _AndroidViewController_pointTransformer_set$(
  m.Scope scope,
  AndroidViewController target,
) =>
    (m.FunctionPointer transformer) {
      Offset transformerProxy(Offset transformer_position) =>
          scope.engine.callFunctionPointer(
            scope,
            transformer,
            [transformer_position],
            {},
          );
      target.pointTransformer = (transformerProxy);
    };
bool _AndroidViewController_isCreated$(AndroidViewController target) {
  return target.isCreated;
}

List<void Function(int)> _AndroidViewController_createdCallbacks$(
    AndroidViewController target) {
  return target.createdCallbacks;
}

Function _AndroidViewController_pointerAction$(m.Scope scope) =>
    AndroidViewController.pointerAction;
Function _AndroidViewController_create$(
  m.Scope scope,
  AndroidViewController target,
) =>
    target.create;
Function _AndroidViewController_setSize$(
  m.Scope scope,
  AndroidViewController target,
) =>
    target.setSize;
Function _AndroidViewController_setOffset$(
  m.Scope scope,
  AndroidViewController target,
) =>
    target.setOffset;
Function _AndroidViewController_sendMotionEvent$(
  m.Scope scope,
  AndroidViewController target,
) =>
    target.sendMotionEvent;
Function _AndroidViewController_setLayoutDirection$(
  m.Scope scope,
  AndroidViewController target,
) =>
    target.setLayoutDirection;
Function _AndroidViewController_dispatchPointerEvent$(
  m.Scope scope,
  AndroidViewController target,
) =>
    target.dispatchPointerEvent;
Function _AndroidViewController_clearFocus$(
  m.Scope scope,
  AndroidViewController target,
) =>
    target.clearFocus;
Function _AndroidViewController_dispose$(
  m.Scope scope,
  AndroidViewController target,
) =>
    target.dispose;
int? _SurfaceAndroidViewController_textureId$(
    SurfaceAndroidViewController target) {
  return target.textureId;
}

bool _SurfaceAndroidViewController_requiresViewComposition$(
    SurfaceAndroidViewController target) {
  return target.requiresViewComposition;
}

Function _SurfaceAndroidViewController_setOffset$(
  m.Scope scope,
  SurfaceAndroidViewController target,
) =>
    target.setOffset;
int? _ExpensiveAndroidViewController_textureId$(
    ExpensiveAndroidViewController target) {
  return target.textureId;
}

bool _ExpensiveAndroidViewController_requiresViewComposition$(
    ExpensiveAndroidViewController target) {
  return target.requiresViewComposition;
}

Function _ExpensiveAndroidViewController_setOffset$(
  m.Scope scope,
  ExpensiveAndroidViewController target,
) =>
    target.setOffset;
int? _TextureAndroidViewController_textureId$(
    TextureAndroidViewController target) {
  return target.textureId;
}

bool _TextureAndroidViewController_requiresViewComposition$(
    TextureAndroidViewController target) {
  return target.requiresViewComposition;
}

Function _TextureAndroidViewController_setOffset$(
  m.Scope scope,
  TextureAndroidViewController target,
) =>
    target.setOffset;
int _UiKitViewController_id$(UiKitViewController target) {
  return target.id;
}

Function _UiKitViewController_setLayoutDirection$(
  m.Scope scope,
  UiKitViewController target,
) =>
    target.setLayoutDirection;
Function _UiKitViewController_acceptGesture$(
  m.Scope scope,
  UiKitViewController target,
) =>
    target.acceptGesture;
Function _UiKitViewController_rejectGesture$(
  m.Scope scope,
  UiKitViewController target,
) =>
    target.rejectGesture;
Function _UiKitViewController_dispose$(
  m.Scope scope,
  UiKitViewController target,
) =>
    target.dispose;
int _PlatformViewController_viewId$(PlatformViewController target) {
  return target.viewId;
}

bool _PlatformViewController_awaitingCreation$(PlatformViewController target) {
  return target.awaitingCreation;
}

Function _PlatformViewController_dispatchPointerEvent$(
  m.Scope scope,
  PlatformViewController target,
) =>
    target.dispatchPointerEvent;
Function _PlatformViewController_create$(
  m.Scope scope,
  PlatformViewController target,
) =>
    target.create;
Function _PlatformViewController_dispose$(
  m.Scope scope,
  PlatformViewController target,
) =>
    target.dispose;
Function _PlatformViewController_clearFocus$(
  m.Scope scope,
  PlatformViewController target,
) =>
    target.clearFocus;
