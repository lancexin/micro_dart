// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/edge_insets.dart';
import 'dart:ui' show ViewPadding, lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/src/painting/basic_types.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/edge_insets.dart',
  {
    'EdgeInsetsGeometry.infinity': _EdgeInsetsGeometry_infinity$,
    'EdgeInsetsGeometry.lerp': _EdgeInsetsGeometry_lerp$,
    'EdgeInsets.zero': _EdgeInsets_zero$,
    'EdgeInsets.lerp': _EdgeInsets_lerp$,
    'EdgeInsetsDirectional.zero': _EdgeInsetsDirectional_zero$,
    'EdgeInsetsDirectional.lerp': _EdgeInsetsDirectional_lerp$,
  },
  {},
  {
    'EdgeInsetsGeometry': m.ClassMirror(
      'EdgeInsetsGeometry',
      {
        'isNonNegative': _EdgeInsetsGeometry_isNonNegative$,
        'horizontal': _EdgeInsetsGeometry_horizontal$,
        'vertical': _EdgeInsetsGeometry_vertical$,
        'collapsedSize': _EdgeInsetsGeometry_collapsedSize$,
        'flipped': _EdgeInsetsGeometry_flipped$,
        'hashCode': _EdgeInsetsGeometry_hashCode$,
        'along': _EdgeInsetsGeometry_along$,
        'inflateSize': _EdgeInsetsGeometry_inflateSize$,
        'deflateSize': _EdgeInsetsGeometry_deflateSize$,
        'subtract': _EdgeInsetsGeometry_subtract$,
        'add': _EdgeInsetsGeometry_add$,
        'clamp': _EdgeInsetsGeometry_clamp$,
        'resolve': _EdgeInsetsGeometry_resolve$,
        'toString': _EdgeInsetsGeometry_toString$,
      },
      {},
    ),
    'EdgeInsets': m.ClassMirror(
      'EdgeInsets',
      {
        'left': _EdgeInsets_left$,
        'top': _EdgeInsets_top$,
        'right': _EdgeInsets_right$,
        'bottom': _EdgeInsets_bottom$,
        'topLeft': _EdgeInsets_topLeft$,
        'topRight': _EdgeInsets_topRight$,
        'bottomLeft': _EdgeInsets_bottomLeft$,
        'bottomRight': _EdgeInsets_bottomRight$,
        'flipped': _EdgeInsets_flipped$,
        'inflateRect': _EdgeInsets_inflateRect$,
        'deflateRect': _EdgeInsets_deflateRect$,
        'subtract': _EdgeInsets_subtract$,
        'add': _EdgeInsets_add$,
        'clamp': _EdgeInsets_clamp$,
        'resolve': _EdgeInsets_resolve$,
        'copyWith': _EdgeInsets_copyWith$,
      },
      {},
    ),
    'EdgeInsetsDirectional': m.ClassMirror(
      'EdgeInsetsDirectional',
      {
        'start': _EdgeInsetsDirectional_start$,
        'top': _EdgeInsetsDirectional_top$,
        'end': _EdgeInsetsDirectional_end$,
        'bottom': _EdgeInsetsDirectional_bottom$,
        'isNonNegative': _EdgeInsetsDirectional_isNonNegative$,
        'flipped': _EdgeInsetsDirectional_flipped$,
        'subtract': _EdgeInsetsDirectional_subtract$,
        'add': _EdgeInsetsDirectional_add$,
        'resolve': _EdgeInsetsDirectional_resolve$,
      },
      {},
    ),
  },
);
EdgeInsetsGeometry _EdgeInsetsGeometry_infinity$() {
  return EdgeInsetsGeometry.infinity;
}

bool _EdgeInsetsGeometry_isNonNegative$(EdgeInsetsGeometry target) {
  return target.isNonNegative;
}

double _EdgeInsetsGeometry_horizontal$(EdgeInsetsGeometry target) {
  return target.horizontal;
}

double _EdgeInsetsGeometry_vertical$(EdgeInsetsGeometry target) {
  return target.vertical;
}

Size _EdgeInsetsGeometry_collapsedSize$(EdgeInsetsGeometry target) {
  return target.collapsedSize;
}

EdgeInsetsGeometry _EdgeInsetsGeometry_flipped$(EdgeInsetsGeometry target) {
  return target.flipped;
}

int _EdgeInsetsGeometry_hashCode$(EdgeInsetsGeometry target) {
  return target.hashCode;
}

Function _EdgeInsetsGeometry_along$(
  m.Scope scope,
  EdgeInsetsGeometry target,
) =>
    target.along;
Function _EdgeInsetsGeometry_inflateSize$(
  m.Scope scope,
  EdgeInsetsGeometry target,
) =>
    target.inflateSize;
Function _EdgeInsetsGeometry_deflateSize$(
  m.Scope scope,
  EdgeInsetsGeometry target,
) =>
    target.deflateSize;
Function _EdgeInsetsGeometry_subtract$(
  m.Scope scope,
  EdgeInsetsGeometry target,
) =>
    target.subtract;
Function _EdgeInsetsGeometry_add$(
  m.Scope scope,
  EdgeInsetsGeometry target,
) =>
    target.add;
Function _EdgeInsetsGeometry_clamp$(
  m.Scope scope,
  EdgeInsetsGeometry target,
) =>
    target.clamp;
Function _EdgeInsetsGeometry_lerp$(m.Scope scope) => EdgeInsetsGeometry.lerp;
Function _EdgeInsetsGeometry_resolve$(
  m.Scope scope,
  EdgeInsetsGeometry target,
) =>
    target.resolve;
Function _EdgeInsetsGeometry_toString$(
  m.Scope scope,
  EdgeInsetsGeometry target,
) =>
    target.toString;
EdgeInsets _EdgeInsets_zero$() {
  return EdgeInsets.zero;
}

double _EdgeInsets_left$(EdgeInsets target) {
  return target.left;
}

double _EdgeInsets_top$(EdgeInsets target) {
  return target.top;
}

double _EdgeInsets_right$(EdgeInsets target) {
  return target.right;
}

double _EdgeInsets_bottom$(EdgeInsets target) {
  return target.bottom;
}

Offset _EdgeInsets_topLeft$(EdgeInsets target) {
  return target.topLeft;
}

Offset _EdgeInsets_topRight$(EdgeInsets target) {
  return target.topRight;
}

Offset _EdgeInsets_bottomLeft$(EdgeInsets target) {
  return target.bottomLeft;
}

Offset _EdgeInsets_bottomRight$(EdgeInsets target) {
  return target.bottomRight;
}

EdgeInsets _EdgeInsets_flipped$(EdgeInsets target) {
  return target.flipped;
}

Function _EdgeInsets_inflateRect$(
  m.Scope scope,
  EdgeInsets target,
) =>
    target.inflateRect;
Function _EdgeInsets_deflateRect$(
  m.Scope scope,
  EdgeInsets target,
) =>
    target.deflateRect;
Function _EdgeInsets_subtract$(
  m.Scope scope,
  EdgeInsets target,
) =>
    target.subtract;
Function _EdgeInsets_add$(
  m.Scope scope,
  EdgeInsets target,
) =>
    target.add;
Function _EdgeInsets_clamp$(
  m.Scope scope,
  EdgeInsets target,
) =>
    target.clamp;
Function _EdgeInsets_lerp$(m.Scope scope) => EdgeInsets.lerp;
Function _EdgeInsets_resolve$(
  m.Scope scope,
  EdgeInsets target,
) =>
    target.resolve;
Function _EdgeInsets_copyWith$(
  m.Scope scope,
  EdgeInsets target,
) =>
    target.copyWith;
EdgeInsetsDirectional _EdgeInsetsDirectional_zero$() {
  return EdgeInsetsDirectional.zero;
}

double _EdgeInsetsDirectional_start$(EdgeInsetsDirectional target) {
  return target.start;
}

double _EdgeInsetsDirectional_top$(EdgeInsetsDirectional target) {
  return target.top;
}

double _EdgeInsetsDirectional_end$(EdgeInsetsDirectional target) {
  return target.end;
}

double _EdgeInsetsDirectional_bottom$(EdgeInsetsDirectional target) {
  return target.bottom;
}

bool _EdgeInsetsDirectional_isNonNegative$(EdgeInsetsDirectional target) {
  return target.isNonNegative;
}

EdgeInsetsDirectional _EdgeInsetsDirectional_flipped$(
    EdgeInsetsDirectional target) {
  return target.flipped;
}

Function _EdgeInsetsDirectional_subtract$(
  m.Scope scope,
  EdgeInsetsDirectional target,
) =>
    target.subtract;
Function _EdgeInsetsDirectional_add$(
  m.Scope scope,
  EdgeInsetsDirectional target,
) =>
    target.add;
Function _EdgeInsetsDirectional_lerp$(m.Scope scope) =>
    EdgeInsetsDirectional.lerp;
Function _EdgeInsetsDirectional_resolve$(
  m.Scope scope,
  EdgeInsetsDirectional target,
) =>
    target.resolve;
