// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/edge_insets.dart';
import 'dart:ui' show ViewPadding, lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/src/painting/basic_types.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/edge_insets.dart',
  {
    'EdgeInsetsGeometry.infinity': _EdgeInsetsGeometry_infinity$,
    'EdgeInsetsGeometry.lerp': _EdgeInsetsGeometry_lerp$,
    'EdgeInsets.zero': _EdgeInsets_zero$,
    'EdgeInsets.fromLTRB': _EdgeInsets_fromLTRB_$,
    'EdgeInsets.all': _EdgeInsets_all_$,
    'EdgeInsets.only': _EdgeInsets_only_$,
    'EdgeInsets.symmetric': _EdgeInsets_symmetric_$,
    'EdgeInsets.fromViewPadding': _EdgeInsets_fromViewPadding_$,
    'EdgeInsets.lerp': _EdgeInsets_lerp$,
    'EdgeInsetsDirectional.zero': _EdgeInsetsDirectional_zero$,
    'EdgeInsetsDirectional.fromSTEB': _EdgeInsetsDirectional_fromSTEB_$,
    'EdgeInsetsDirectional.only': _EdgeInsetsDirectional_only_$,
    'EdgeInsetsDirectional.symmetric': _EdgeInsetsDirectional_symmetric_$,
    'EdgeInsetsDirectional.all': _EdgeInsetsDirectional_all_$,
    'EdgeInsetsDirectional.lerp': _EdgeInsetsDirectional_lerp$,
  },
  {},
  {
    'EdgeInsetsGeometry': m.ClassMirror(
      'EdgeInsetsGeometry',
      {
        '#as': EdgeInsetsGeometry_as$,
        '#is': EdgeInsetsGeometry_is$,
        'isNonNegative': _EdgeInsetsGeometry_isNonNegative$,
        'horizontal': _EdgeInsetsGeometry_horizontal$,
        'vertical': _EdgeInsetsGeometry_vertical$,
        'collapsedSize': _EdgeInsetsGeometry_collapsedSize$,
        'flipped': _EdgeInsetsGeometry_flipped$,
        'hashCode': _EdgeInsetsGeometry_hashCode$,
        'along': _EdgeInsetsGeometry_along$,
        'inflateSize': _EdgeInsetsGeometry_inflateSize$,
        'deflateSize': _EdgeInsetsGeometry_deflateSize$,
        'subtract': _EdgeInsetsGeometry_subtract$,
        'add': _EdgeInsetsGeometry_add$,
        'clamp': _EdgeInsetsGeometry_clamp$,
        'unary-': _EdgeInsetsGeometry_unary_minus$$,
        '*': _EdgeInsetsGeometry_times$$,
        '/': _EdgeInsetsGeometry_over$$,
        '~/': _EdgeInsetsGeometry_division$$,
        '%': _EdgeInsetsGeometry_surplus$$,
        'resolve': _EdgeInsetsGeometry_resolve$,
        'toString': _EdgeInsetsGeometry_toString$,
        '==': _EdgeInsetsGeometry_eq$$,
      },
      {},
    ),
    'EdgeInsets': m.ClassMirror(
      'EdgeInsets',
      {
        '#as': EdgeInsets_as$,
        '#is': EdgeInsets_is$,
        'left': _EdgeInsets_left$,
        'top': _EdgeInsets_top$,
        'right': _EdgeInsets_right$,
        'bottom': _EdgeInsets_bottom$,
        'topLeft': _EdgeInsets_topLeft$,
        'topRight': _EdgeInsets_topRight$,
        'bottomLeft': _EdgeInsets_bottomLeft$,
        'bottomRight': _EdgeInsets_bottomRight$,
        'flipped': _EdgeInsets_flipped$,
        'inflateRect': _EdgeInsets_inflateRect$,
        'deflateRect': _EdgeInsets_deflateRect$,
        'subtract': _EdgeInsets_subtract$,
        'add': _EdgeInsets_add$,
        'clamp': _EdgeInsets_clamp$,
        '-': _EdgeInsets_minus$$,
        '+': _EdgeInsets_plus$$,
        'unary-': _EdgeInsets_unary_minus$$,
        '*': _EdgeInsets_times$$,
        '/': _EdgeInsets_over$$,
        '~/': _EdgeInsets_division$$,
        '%': _EdgeInsets_surplus$$,
        'resolve': _EdgeInsets_resolve$,
        'copyWith': _EdgeInsets_copyWith$,
      },
      {},
    ),
    'EdgeInsetsDirectional': m.ClassMirror(
      'EdgeInsetsDirectional',
      {
        '#as': EdgeInsetsDirectional_as$,
        '#is': EdgeInsetsDirectional_is$,
        'start': _EdgeInsetsDirectional_start$,
        'top': _EdgeInsetsDirectional_top$,
        'end': _EdgeInsetsDirectional_end$,
        'bottom': _EdgeInsetsDirectional_bottom$,
        'isNonNegative': _EdgeInsetsDirectional_isNonNegative$,
        'flipped': _EdgeInsetsDirectional_flipped$,
        'subtract': _EdgeInsetsDirectional_subtract$,
        'add': _EdgeInsetsDirectional_add$,
        '-': _EdgeInsetsDirectional_minus$$,
        '+': _EdgeInsetsDirectional_plus$$,
        'unary-': _EdgeInsetsDirectional_unary_minus$$,
        '*': _EdgeInsetsDirectional_times$$,
        '/': _EdgeInsetsDirectional_over$$,
        '~/': _EdgeInsetsDirectional_division$$,
        '%': _EdgeInsetsDirectional_surplus$$,
        'resolve': _EdgeInsetsDirectional_resolve$,
      },
      {},
    ),
  },
);
Function EdgeInsetsGeometry_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as EdgeInsetsGeometry;
Function EdgeInsetsGeometry_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is EdgeInsetsGeometry;
Function _EdgeInsetsGeometry_infinity$(m.Scope scope$) =>
    () => EdgeInsetsGeometry.infinity;
Function _EdgeInsetsGeometry_isNonNegative$(
  m.Scope scope$,
  EdgeInsetsGeometry target$,
) =>
    () {
      return target$.isNonNegative;
    };
Function _EdgeInsetsGeometry_horizontal$(
  m.Scope scope$,
  EdgeInsetsGeometry target$,
) =>
    () {
      return target$.horizontal;
    };
Function _EdgeInsetsGeometry_vertical$(
  m.Scope scope$,
  EdgeInsetsGeometry target$,
) =>
    () {
      return target$.vertical;
    };
Function _EdgeInsetsGeometry_collapsedSize$(
  m.Scope scope$,
  EdgeInsetsGeometry target$,
) =>
    () {
      return target$.collapsedSize;
    };
Function _EdgeInsetsGeometry_flipped$(
  m.Scope scope$,
  EdgeInsetsGeometry target$,
) =>
    () {
      return target$.flipped;
    };
Function _EdgeInsetsGeometry_hashCode$(
  m.Scope scope$,
  EdgeInsetsGeometry target$,
) =>
    () {
      return target$.hashCode;
    };
Function _EdgeInsetsGeometry_along$(
  m.Scope scope$,
  EdgeInsetsGeometry target$,
) =>
    target$.along;
Function _EdgeInsetsGeometry_inflateSize$(
  m.Scope scope$,
  EdgeInsetsGeometry target$,
) =>
    target$.inflateSize;
Function _EdgeInsetsGeometry_deflateSize$(
  m.Scope scope$,
  EdgeInsetsGeometry target$,
) =>
    target$.deflateSize;
Function _EdgeInsetsGeometry_subtract$(
  m.Scope scope$,
  EdgeInsetsGeometry target$,
) =>
    target$.subtract;
Function _EdgeInsetsGeometry_add$(
  m.Scope scope$,
  EdgeInsetsGeometry target$,
) =>
    target$.add;
Function _EdgeInsetsGeometry_clamp$(
  m.Scope scope$,
  EdgeInsetsGeometry target$,
) =>
    target$.clamp;
Function _EdgeInsetsGeometry_unary_minus$$(
  m.Scope scope$,
  EdgeInsetsGeometry target$,
) =>
    () => -target$;
Function _EdgeInsetsGeometry_times$$(
  m.Scope scope$,
  EdgeInsetsGeometry target$,
) =>
    (double other$) => target$ * other$;
Function _EdgeInsetsGeometry_over$$(
  m.Scope scope$,
  EdgeInsetsGeometry target$,
) =>
    (double other$) => target$ / other$;
Function _EdgeInsetsGeometry_division$$(
  m.Scope scope$,
  EdgeInsetsGeometry target$,
) =>
    (double other$) => target$ ~/ other$;
Function _EdgeInsetsGeometry_surplus$$(
  m.Scope scope$,
  EdgeInsetsGeometry target$,
) =>
    (double other$) => target$ % other$;
Function _EdgeInsetsGeometry_lerp$(m.Scope scope$) => EdgeInsetsGeometry.lerp;
Function _EdgeInsetsGeometry_resolve$(
  m.Scope scope$,
  EdgeInsetsGeometry target$,
) =>
    target$.resolve;
Function _EdgeInsetsGeometry_toString$(
  m.Scope scope$,
  EdgeInsetsGeometry target$,
) =>
    target$.toString;
Function _EdgeInsetsGeometry_eq$$(
  m.Scope scope$,
  EdgeInsetsGeometry target$,
) =>
    (Object other$) => target$ == other$;
Function EdgeInsets_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as EdgeInsets;
Function EdgeInsets_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is EdgeInsets;
Function _EdgeInsets_zero$(m.Scope scope$) => () => EdgeInsets.zero;
Function _EdgeInsets_left$(
  m.Scope scope$,
  EdgeInsets target$,
) =>
    () {
      return target$.left;
    };
Function _EdgeInsets_top$(
  m.Scope scope$,
  EdgeInsets target$,
) =>
    () {
      return target$.top;
    };
Function _EdgeInsets_right$(
  m.Scope scope$,
  EdgeInsets target$,
) =>
    () {
      return target$.right;
    };
Function _EdgeInsets_bottom$(
  m.Scope scope$,
  EdgeInsets target$,
) =>
    () {
      return target$.bottom;
    };
Function _EdgeInsets_topLeft$(
  m.Scope scope$,
  EdgeInsets target$,
) =>
    () {
      return target$.topLeft;
    };
Function _EdgeInsets_topRight$(
  m.Scope scope$,
  EdgeInsets target$,
) =>
    () {
      return target$.topRight;
    };
Function _EdgeInsets_bottomLeft$(
  m.Scope scope$,
  EdgeInsets target$,
) =>
    () {
      return target$.bottomLeft;
    };
Function _EdgeInsets_bottomRight$(
  m.Scope scope$,
  EdgeInsets target$,
) =>
    () {
      return target$.bottomRight;
    };
Function _EdgeInsets_flipped$(
  m.Scope scope$,
  EdgeInsets target$,
) =>
    () {
      return target$.flipped;
    };
Function _EdgeInsets_fromLTRB_$(m.Scope scope$) => EdgeInsets.fromLTRB;
Function _EdgeInsets_all_$(m.Scope scope$) => EdgeInsets.all;
Function _EdgeInsets_only_$(m.Scope scope$) => EdgeInsets.only;
Function _EdgeInsets_symmetric_$(m.Scope scope$) => EdgeInsets.symmetric;
Function _EdgeInsets_fromViewPadding_$(m.Scope scope$) =>
    EdgeInsets.fromViewPadding;
Function _EdgeInsets_inflateRect$(
  m.Scope scope$,
  EdgeInsets target$,
) =>
    target$.inflateRect;
Function _EdgeInsets_deflateRect$(
  m.Scope scope$,
  EdgeInsets target$,
) =>
    target$.deflateRect;
Function _EdgeInsets_subtract$(
  m.Scope scope$,
  EdgeInsets target$,
) =>
    target$.subtract;
Function _EdgeInsets_add$(
  m.Scope scope$,
  EdgeInsets target$,
) =>
    target$.add;
Function _EdgeInsets_clamp$(
  m.Scope scope$,
  EdgeInsets target$,
) =>
    target$.clamp;
Function _EdgeInsets_minus$$(
  m.Scope scope$,
  EdgeInsets target$,
) =>
    (EdgeInsets other$) => target$ - other$;
Function _EdgeInsets_plus$$(
  m.Scope scope$,
  EdgeInsets target$,
) =>
    (EdgeInsets other$) => target$ + other$;
Function _EdgeInsets_unary_minus$$(
  m.Scope scope$,
  EdgeInsets target$,
) =>
    () => -target$;
Function _EdgeInsets_times$$(
  m.Scope scope$,
  EdgeInsets target$,
) =>
    (double other$) => target$ * other$;
Function _EdgeInsets_over$$(
  m.Scope scope$,
  EdgeInsets target$,
) =>
    (double other$) => target$ / other$;
Function _EdgeInsets_division$$(
  m.Scope scope$,
  EdgeInsets target$,
) =>
    (double other$) => target$ ~/ other$;
Function _EdgeInsets_surplus$$(
  m.Scope scope$,
  EdgeInsets target$,
) =>
    (double other$) => target$ % other$;
Function _EdgeInsets_lerp$(m.Scope scope$) => EdgeInsets.lerp;
Function _EdgeInsets_resolve$(
  m.Scope scope$,
  EdgeInsets target$,
) =>
    target$.resolve;
Function _EdgeInsets_copyWith$(
  m.Scope scope$,
  EdgeInsets target$,
) =>
    target$.copyWith;
Function EdgeInsetsDirectional_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as EdgeInsetsDirectional;
Function EdgeInsetsDirectional_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is EdgeInsetsDirectional;
Function _EdgeInsetsDirectional_zero$(m.Scope scope$) =>
    () => EdgeInsetsDirectional.zero;
Function _EdgeInsetsDirectional_start$(
  m.Scope scope$,
  EdgeInsetsDirectional target$,
) =>
    () {
      return target$.start;
    };
Function _EdgeInsetsDirectional_top$(
  m.Scope scope$,
  EdgeInsetsDirectional target$,
) =>
    () {
      return target$.top;
    };
Function _EdgeInsetsDirectional_end$(
  m.Scope scope$,
  EdgeInsetsDirectional target$,
) =>
    () {
      return target$.end;
    };
Function _EdgeInsetsDirectional_bottom$(
  m.Scope scope$,
  EdgeInsetsDirectional target$,
) =>
    () {
      return target$.bottom;
    };
Function _EdgeInsetsDirectional_isNonNegative$(
  m.Scope scope$,
  EdgeInsetsDirectional target$,
) =>
    () {
      return target$.isNonNegative;
    };
Function _EdgeInsetsDirectional_flipped$(
  m.Scope scope$,
  EdgeInsetsDirectional target$,
) =>
    () {
      return target$.flipped;
    };
Function _EdgeInsetsDirectional_fromSTEB_$(m.Scope scope$) =>
    EdgeInsetsDirectional.fromSTEB;
Function _EdgeInsetsDirectional_only_$(m.Scope scope$) =>
    EdgeInsetsDirectional.only;
Function _EdgeInsetsDirectional_symmetric_$(m.Scope scope$) =>
    EdgeInsetsDirectional.symmetric;
Function _EdgeInsetsDirectional_all_$(m.Scope scope$) =>
    EdgeInsetsDirectional.all;
Function _EdgeInsetsDirectional_subtract$(
  m.Scope scope$,
  EdgeInsetsDirectional target$,
) =>
    target$.subtract;
Function _EdgeInsetsDirectional_add$(
  m.Scope scope$,
  EdgeInsetsDirectional target$,
) =>
    target$.add;
Function _EdgeInsetsDirectional_minus$$(
  m.Scope scope$,
  EdgeInsetsDirectional target$,
) =>
    (EdgeInsetsDirectional other$) => target$ - other$;
Function _EdgeInsetsDirectional_plus$$(
  m.Scope scope$,
  EdgeInsetsDirectional target$,
) =>
    (EdgeInsetsDirectional other$) => target$ + other$;
Function _EdgeInsetsDirectional_unary_minus$$(
  m.Scope scope$,
  EdgeInsetsDirectional target$,
) =>
    () => -target$;
Function _EdgeInsetsDirectional_times$$(
  m.Scope scope$,
  EdgeInsetsDirectional target$,
) =>
    (double other$) => target$ * other$;
Function _EdgeInsetsDirectional_over$$(
  m.Scope scope$,
  EdgeInsetsDirectional target$,
) =>
    (double other$) => target$ / other$;
Function _EdgeInsetsDirectional_division$$(
  m.Scope scope$,
  EdgeInsetsDirectional target$,
) =>
    (double other$) => target$ ~/ other$;
Function _EdgeInsetsDirectional_surplus$$(
  m.Scope scope$,
  EdgeInsetsDirectional target$,
) =>
    (double other$) => target$ % other$;
Function _EdgeInsetsDirectional_lerp$(m.Scope scope$) =>
    EdgeInsetsDirectional.lerp;
Function _EdgeInsetsDirectional_resolve$(
  m.Scope scope$,
  EdgeInsetsDirectional target$,
) =>
    target$.resolve;
