// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/menu_theme.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/menu_anchor.dart';
import 'package:flutter/src/material/menu_style.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/menu_theme.dart',
  {
    'MenuThemeData.': _MenuThemeData__$,
    'MenuThemeData.lerp': _MenuThemeData_lerp$,
    'MenuTheme.': _MenuTheme__$,
    'MenuTheme.of': _MenuTheme_of$,
  },
  {},
  {
    'MenuThemeData': m.ClassMirror(
      'MenuThemeData',
      {
        '#as': MenuThemeData_as$,
        '#is': MenuThemeData_is$,
        'style': _MenuThemeData_style$,
        'hashCode': _MenuThemeData_hashCode$,
        '==': _MenuThemeData_eq$$,
        'debugFillProperties': _MenuThemeData_debugFillProperties$,
      },
      {},
    ),
    'MenuTheme': m.ClassMirror(
      'MenuTheme',
      {
        '#as': MenuTheme_as$,
        '#is': MenuTheme_is$,
        'data': _MenuTheme_data$,
        'wrap': _MenuTheme_wrap$,
        'updateShouldNotify': _MenuTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function MenuThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MenuThemeData;
Function MenuThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MenuThemeData;
Function _MenuThemeData_style$(
  m.Scope scope$,
  MenuThemeData target$,
) =>
    () {
      return target$.style;
    };
Function _MenuThemeData_hashCode$(
  m.Scope scope$,
  MenuThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _MenuThemeData__$(m.Scope scope$) => ({MenuStyle? style}) {
      return MenuThemeData(style: style);
    };
Function _MenuThemeData_lerp$(m.Scope scope$) => MenuThemeData.lerp;
Function _MenuThemeData_eq$$(
  m.Scope scope$,
  MenuThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _MenuThemeData_debugFillProperties$(
  m.Scope scope$,
  MenuThemeData target$,
) =>
    target$.debugFillProperties;
Function MenuTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MenuTheme;
Function MenuTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MenuTheme;
Function _MenuTheme_data$(
  m.Scope scope$,
  MenuTheme target$,
) =>
    () {
      return target$.data;
    };
Function _MenuTheme__$(m.Scope scope$) => ({
      Key? key,
      required MenuThemeData data,
      required Widget child,
    }) {
      return MenuTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _MenuTheme_of$(m.Scope scope$) => MenuTheme.of;
Function _MenuTheme_wrap$(
  m.Scope scope$,
  MenuTheme target$,
) =>
    target$.wrap;
Function _MenuTheme_updateShouldNotify$(
  m.Scope scope$,
  MenuTheme target$,
) =>
    target$.updateShouldNotify;
