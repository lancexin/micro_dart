// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/selection_area.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/material/adaptive_text_selection_toolbar.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/desktop_text_selection.dart';
import 'package:flutter/src/material/magnifier.dart';
import 'package:flutter/src/material/text_selection.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/selection_area.dart',
  {'SelectionArea.': _SelectionArea__$},
  {},
  {
    'SelectionArea': m.ClassMirror(
      'SelectionArea',
      {
        '#as': SelectionArea_as$,
        '#is': SelectionArea_is$,
        'magnifierConfiguration': _SelectionArea_magnifierConfiguration$,
        'focusNode': _SelectionArea_focusNode$,
        'selectionControls': _SelectionArea_selectionControls$,
        'contextMenuBuilder': _SelectionArea_contextMenuBuilder$,
        'onSelectionChanged': _SelectionArea_onSelectionChanged$,
        'child': _SelectionArea_child$,
        'createState': _SelectionArea_createState$,
      },
      {},
    )
  },
);
Function SelectionArea_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SelectionArea;
Function SelectionArea_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SelectionArea;
Function _SelectionArea_magnifierConfiguration$(
  m.Scope scope$,
  SelectionArea target$,
) =>
    () {
      return target$.magnifierConfiguration;
    };
Function _SelectionArea_focusNode$(
  m.Scope scope$,
  SelectionArea target$,
) =>
    () {
      return target$.focusNode;
    };
Function _SelectionArea_selectionControls$(
  m.Scope scope$,
  SelectionArea target$,
) =>
    () {
      return target$.selectionControls;
    };
Function _SelectionArea_contextMenuBuilder$(
  m.Scope scope$,
  SelectionArea target$,
) =>
    () {
      return target$.contextMenuBuilder;
    };
Function _SelectionArea_onSelectionChanged$(
  m.Scope scope$,
  SelectionArea target$,
) =>
    () {
      return target$.onSelectionChanged;
    };
Function _SelectionArea_child$(
  m.Scope scope$,
  SelectionArea target$,
) =>
    () {
      return target$.child;
    };
Function _SelectionArea__$(m.Scope scope$) => ({
      Key? key,
      FocusNode? focusNode,
      TextSelectionControls? selectionControls,
      m.FunctionPointer? contextMenuBuilder,
      TextMagnifierConfiguration? magnifierConfiguration,
      m.FunctionPointer? onSelectionChanged,
      required Widget child,
    }) {
      Widget contextMenuBuilderProxy(
        BuildContext contextMenuBuilder_context$,
        SelectableRegionState contextMenuBuilder_selectableRegionState$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            contextMenuBuilder!,
            [
              contextMenuBuilder_context$,
              contextMenuBuilder_selectableRegionState$,
            ],
            {},
          );
      void onSelectionChangedProxy(
              SelectedContent? onSelectionChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSelectionChanged!,
            [onSelectionChanged_value$],
            {},
          );
      return SelectionArea(
        child: child,
        contextMenuBuilder: contextMenuBuilder == null
            ? (BuildContext context,
                SelectableRegionState selectableRegionState) {
                return AdaptiveTextSelectionToolbar.selectableRegion(
                  selectableRegionState: selectableRegionState,
                );
              }
            : contextMenuBuilderProxy,
        focusNode: focusNode,
        key: key,
        magnifierConfiguration: magnifierConfiguration,
        onSelectionChanged:
            onSelectionChanged == null ? null : onSelectionChangedProxy,
        selectionControls: selectionControls,
      );
    };
Function _SelectionArea_createState$(
  m.Scope scope$,
  SelectionArea target$,
) =>
    target$.createState;
