// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/selection_area.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/material/adaptive_text_selection_toolbar.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/desktop_text_selection.dart';
import 'package:flutter/src/material/magnifier.dart';
import 'package:flutter/src/material/text_selection.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/selection_area.dart',
  {},
  {},
  {
    'SelectionArea': m.ClassMirror(
      'SelectionArea',
      {
        '#as': SelectionArea_as$,
        '#is': SelectionArea_is$,
        'magnifierConfiguration': _SelectionArea_magnifierConfiguration$,
        'focusNode': _SelectionArea_focusNode$,
        'selectionControls': _SelectionArea_selectionControls$,
        'contextMenuBuilder': _SelectionArea_contextMenuBuilder$,
        'onSelectionChanged': _SelectionArea_onSelectionChanged$,
        'child': _SelectionArea_child$,
        'createState': _SelectionArea_createState$,
      },
      {},
    )
  },
);
Function SelectionArea_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SelectionArea;
Function SelectionArea_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SelectionArea;
TextMagnifierConfiguration? _SelectionArea_magnifierConfiguration$(
    SelectionArea target) {
  return target.magnifierConfiguration;
}

FocusNode? _SelectionArea_focusNode$(SelectionArea target) {
  return target.focusNode;
}

TextSelectionControls? _SelectionArea_selectionControls$(SelectionArea target) {
  return target.selectionControls;
}

Widget Function(BuildContext, SelectableRegionState)?
    _SelectionArea_contextMenuBuilder$(SelectionArea target) {
  return target.contextMenuBuilder;
}

void Function(SelectedContent?)? _SelectionArea_onSelectionChanged$(
    SelectionArea target) {
  return target.onSelectionChanged;
}

Widget _SelectionArea_child$(SelectionArea target) {
  return target.child;
}

Function _SelectionArea_createState$(
  m.Scope scope,
  SelectionArea target,
) =>
    target.createState;
