// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/animation/curves.dart';
import 'dart:math';
import 'dart:ui';
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/animation/curves.dart',
  {
    'CatmullRomCurve.validateControlPoints':
        _CatmullRomCurve_validateControlPoints$,
    'Curves.linear': _Curves_linear$,
    'Curves.decelerate': _Curves_decelerate$,
    'Curves.fastLinearToSlowEaseIn': _Curves_fastLinearToSlowEaseIn$,
    'Curves.fastEaseInToSlowEaseOut': _Curves_fastEaseInToSlowEaseOut$,
    'Curves.ease': _Curves_ease$,
    'Curves.easeIn': _Curves_easeIn$,
    'Curves.easeInToLinear': _Curves_easeInToLinear$,
    'Curves.easeInSine': _Curves_easeInSine$,
    'Curves.easeInQuad': _Curves_easeInQuad$,
    'Curves.easeInCubic': _Curves_easeInCubic$,
    'Curves.easeInQuart': _Curves_easeInQuart$,
    'Curves.easeInQuint': _Curves_easeInQuint$,
    'Curves.easeInExpo': _Curves_easeInExpo$,
    'Curves.easeInCirc': _Curves_easeInCirc$,
    'Curves.easeInBack': _Curves_easeInBack$,
    'Curves.easeOut': _Curves_easeOut$,
    'Curves.linearToEaseOut': _Curves_linearToEaseOut$,
    'Curves.easeOutSine': _Curves_easeOutSine$,
    'Curves.easeOutQuad': _Curves_easeOutQuad$,
    'Curves.easeOutCubic': _Curves_easeOutCubic$,
    'Curves.easeOutQuart': _Curves_easeOutQuart$,
    'Curves.easeOutQuint': _Curves_easeOutQuint$,
    'Curves.easeOutExpo': _Curves_easeOutExpo$,
    'Curves.easeOutCirc': _Curves_easeOutCirc$,
    'Curves.easeOutBack': _Curves_easeOutBack$,
    'Curves.easeInOut': _Curves_easeInOut$,
    'Curves.easeInOutSine': _Curves_easeInOutSine$,
    'Curves.easeInOutQuad': _Curves_easeInOutQuad$,
    'Curves.easeInOutCubic': _Curves_easeInOutCubic$,
    'Curves.easeInOutCubicEmphasized': _Curves_easeInOutCubicEmphasized$,
    'Curves.easeInOutQuart': _Curves_easeInOutQuart$,
    'Curves.easeInOutQuint': _Curves_easeInOutQuint$,
    'Curves.easeInOutExpo': _Curves_easeInOutExpo$,
    'Curves.easeInOutCirc': _Curves_easeInOutCirc$,
    'Curves.easeInOutBack': _Curves_easeInOutBack$,
    'Curves.fastOutSlowIn': _Curves_fastOutSlowIn$,
    'Curves.slowMiddle': _Curves_slowMiddle$,
    'Curves.bounceIn': _Curves_bounceIn$,
    'Curves.bounceOut': _Curves_bounceOut$,
    'Curves.bounceInOut': _Curves_bounceInOut$,
    'Curves.elasticIn': _Curves_elasticIn$,
    'Curves.elasticOut': _Curves_elasticOut$,
    'Curves.elasticInOut': _Curves_elasticInOut$,
  },
  {},
  {
    'ParametricCurve': m.ClassMirror(
      'ParametricCurve',
      {
        '#as': ParametricCurve_as$,
        '#is': ParametricCurve_is$,
        'transform': _ParametricCurve_transform$,
        'transformInternal': _ParametricCurve_transformInternal$,
        'toString': _ParametricCurve_toString$,
      },
      {},
    ),
    'Curve': m.ClassMirror(
      'Curve',
      {
        '#as': Curve_as$,
        '#is': Curve_is$,
        'flipped': _Curve_flipped$,
        'transform': _Curve_transform$,
      },
      {},
    ),
    'SawTooth': m.ClassMirror(
      'SawTooth',
      {
        '#as': SawTooth_as$,
        '#is': SawTooth_is$,
        'count': _SawTooth_count$,
        'transformInternal': _SawTooth_transformInternal$,
        'toString': _SawTooth_toString$,
      },
      {},
    ),
    'Interval': m.ClassMirror(
      'Interval',
      {
        '#as': Interval_as$,
        '#is': Interval_is$,
        'begin': _Interval_begin$,
        'end': _Interval_end$,
        'curve': _Interval_curve$,
        'transformInternal': _Interval_transformInternal$,
        'toString': _Interval_toString$,
      },
      {},
    ),
    'Threshold': m.ClassMirror(
      'Threshold',
      {
        '#as': Threshold_as$,
        '#is': Threshold_is$,
        'threshold': _Threshold_threshold$,
        'transformInternal': _Threshold_transformInternal$,
      },
      {},
    ),
    'Cubic': m.ClassMirror(
      'Cubic',
      {
        '#as': Cubic_as$,
        '#is': Cubic_is$,
        'a': _Cubic_a$,
        'b': _Cubic_b$,
        'c': _Cubic_c$,
        'd': _Cubic_d$,
        'transformInternal': _Cubic_transformInternal$,
        'toString': _Cubic_toString$,
      },
      {},
    ),
    'ThreePointCubic': m.ClassMirror(
      'ThreePointCubic',
      {
        '#as': ThreePointCubic_as$,
        '#is': ThreePointCubic_is$,
        'a1': _ThreePointCubic_a1$,
        'b1': _ThreePointCubic_b1$,
        'midpoint': _ThreePointCubic_midpoint$,
        'a2': _ThreePointCubic_a2$,
        'b2': _ThreePointCubic_b2$,
        'transformInternal': _ThreePointCubic_transformInternal$,
        'toString': _ThreePointCubic_toString$,
      },
      {},
    ),
    'Curve2D': m.ClassMirror(
      'Curve2D',
      {
        '#as': Curve2D_as$,
        '#is': Curve2D_is$,
        'samplingSeed': _Curve2D_samplingSeed$,
        'generateSamples': _Curve2D_generateSamples$,
        'findInverse': _Curve2D_findInverse$,
      },
      {},
    ),
    'Curve2DSample': m.ClassMirror(
      'Curve2DSample',
      {
        '#as': Curve2DSample_as$,
        '#is': Curve2DSample_is$,
        't': _Curve2DSample_t$,
        'value': _Curve2DSample_value$,
        'toString': _Curve2DSample_toString$,
      },
      {},
    ),
    'CatmullRomSpline': m.ClassMirror(
      'CatmullRomSpline',
      {
        '#as': CatmullRomSpline_as$,
        '#is': CatmullRomSpline_is$,
        'samplingSeed': _CatmullRomSpline_samplingSeed$,
        'transformInternal': _CatmullRomSpline_transformInternal$,
      },
      {},
    ),
    'CatmullRomCurve': m.ClassMirror(
      'CatmullRomCurve',
      {
        '#as': CatmullRomCurve_as$,
        '#is': CatmullRomCurve_is$,
        'controlPoints': _CatmullRomCurve_controlPoints$,
        'tension': _CatmullRomCurve_tension$,
        'transformInternal': _CatmullRomCurve_transformInternal$,
      },
      {},
    ),
    'FlippedCurve': m.ClassMirror(
      'FlippedCurve',
      {
        '#as': FlippedCurve_as$,
        '#is': FlippedCurve_is$,
        'curve': _FlippedCurve_curve$,
        'transformInternal': _FlippedCurve_transformInternal$,
        'toString': _FlippedCurve_toString$,
      },
      {},
    ),
    'ElasticInCurve': m.ClassMirror(
      'ElasticInCurve',
      {
        '#as': ElasticInCurve_as$,
        '#is': ElasticInCurve_is$,
        'period': _ElasticInCurve_period$,
        'transformInternal': _ElasticInCurve_transformInternal$,
        'toString': _ElasticInCurve_toString$,
      },
      {},
    ),
    'ElasticOutCurve': m.ClassMirror(
      'ElasticOutCurve',
      {
        '#as': ElasticOutCurve_as$,
        '#is': ElasticOutCurve_is$,
        'period': _ElasticOutCurve_period$,
        'transformInternal': _ElasticOutCurve_transformInternal$,
        'toString': _ElasticOutCurve_toString$,
      },
      {},
    ),
    'ElasticInOutCurve': m.ClassMirror(
      'ElasticInOutCurve',
      {
        '#as': ElasticInOutCurve_as$,
        '#is': ElasticInOutCurve_is$,
        'period': _ElasticInOutCurve_period$,
        'transformInternal': _ElasticInOutCurve_transformInternal$,
        'toString': _ElasticInOutCurve_toString$,
      },
      {},
    ),
    'Curves': m.ClassMirror(
      'Curves',
      {
        '#as': Curves_as$,
        '#is': Curves_is$,
      },
      {},
    ),
  },
);
Function ParametricCurve_as$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ParametricCurve<T>;
Function ParametricCurve_is$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ParametricCurve<T>;
Function _ParametricCurve_transform$<T>(
  m.Scope scope,
  ParametricCurve<T> target,
) =>
    target.transform;
Function _ParametricCurve_transformInternal$<T>(
  m.Scope scope,
  ParametricCurve<T> target,
) =>
    target.transformInternal;
Function _ParametricCurve_toString$<T>(
  m.Scope scope,
  ParametricCurve<T> target,
) =>
    target.toString;
Function Curve_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Curve;
Function Curve_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Curve;
Curve _Curve_flipped$(Curve target) {
  return target.flipped;
}

Function _Curve_transform$(
  m.Scope scope,
  Curve target,
) =>
    target.transform;
Function SawTooth_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SawTooth;
Function SawTooth_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SawTooth;
int _SawTooth_count$(SawTooth target) {
  return target.count;
}

Function _SawTooth_transformInternal$(
  m.Scope scope,
  SawTooth target,
) =>
    target.transformInternal;
Function _SawTooth_toString$(
  m.Scope scope,
  SawTooth target,
) =>
    target.toString;
Function Interval_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Interval;
Function Interval_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Interval;
double _Interval_begin$(Interval target) {
  return target.begin;
}

double _Interval_end$(Interval target) {
  return target.end;
}

Curve _Interval_curve$(Interval target) {
  return target.curve;
}

Function _Interval_transformInternal$(
  m.Scope scope,
  Interval target,
) =>
    target.transformInternal;
Function _Interval_toString$(
  m.Scope scope,
  Interval target,
) =>
    target.toString;
Function Threshold_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Threshold;
Function Threshold_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Threshold;
double _Threshold_threshold$(Threshold target) {
  return target.threshold;
}

Function _Threshold_transformInternal$(
  m.Scope scope,
  Threshold target,
) =>
    target.transformInternal;
Function Cubic_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Cubic;
Function Cubic_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Cubic;
double _Cubic_a$(Cubic target) {
  return target.a;
}

double _Cubic_b$(Cubic target) {
  return target.b;
}

double _Cubic_c$(Cubic target) {
  return target.c;
}

double _Cubic_d$(Cubic target) {
  return target.d;
}

Function _Cubic_transformInternal$(
  m.Scope scope,
  Cubic target,
) =>
    target.transformInternal;
Function _Cubic_toString$(
  m.Scope scope,
  Cubic target,
) =>
    target.toString;
Function ThreePointCubic_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ThreePointCubic;
Function ThreePointCubic_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ThreePointCubic;
Offset _ThreePointCubic_a1$(ThreePointCubic target) {
  return target.a1;
}

Offset _ThreePointCubic_b1$(ThreePointCubic target) {
  return target.b1;
}

Offset _ThreePointCubic_midpoint$(ThreePointCubic target) {
  return target.midpoint;
}

Offset _ThreePointCubic_a2$(ThreePointCubic target) {
  return target.a2;
}

Offset _ThreePointCubic_b2$(ThreePointCubic target) {
  return target.b2;
}

Function _ThreePointCubic_transformInternal$(
  m.Scope scope,
  ThreePointCubic target,
) =>
    target.transformInternal;
Function _ThreePointCubic_toString$(
  m.Scope scope,
  ThreePointCubic target,
) =>
    target.toString;
Function Curve2D_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Curve2D;
Function Curve2D_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Curve2D;
int _Curve2D_samplingSeed$(Curve2D target) {
  return target.samplingSeed;
}

Function _Curve2D_generateSamples$(
  m.Scope scope,
  Curve2D target,
) =>
    target.generateSamples;
Function _Curve2D_findInverse$(
  m.Scope scope,
  Curve2D target,
) =>
    target.findInverse;
Function Curve2DSample_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Curve2DSample;
Function Curve2DSample_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Curve2DSample;
double _Curve2DSample_t$(Curve2DSample target) {
  return target.t;
}

Offset _Curve2DSample_value$(Curve2DSample target) {
  return target.value;
}

Function _Curve2DSample_toString$(
  m.Scope scope,
  Curve2DSample target,
) =>
    target.toString;
Function CatmullRomSpline_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CatmullRomSpline;
Function CatmullRomSpline_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CatmullRomSpline;
int _CatmullRomSpline_samplingSeed$(CatmullRomSpline target) {
  return target.samplingSeed;
}

Function _CatmullRomSpline_transformInternal$(
  m.Scope scope,
  CatmullRomSpline target,
) =>
    target.transformInternal;
Function CatmullRomCurve_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CatmullRomCurve;
Function CatmullRomCurve_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CatmullRomCurve;
List<Offset> _CatmullRomCurve_controlPoints$(CatmullRomCurve target) {
  return target.controlPoints;
}

double _CatmullRomCurve_tension$(CatmullRomCurve target) {
  return target.tension;
}

Function _CatmullRomCurve_validateControlPoints$(m.Scope scope) =>
    CatmullRomCurve.validateControlPoints;
Function _CatmullRomCurve_transformInternal$(
  m.Scope scope,
  CatmullRomCurve target,
) =>
    target.transformInternal;
Function FlippedCurve_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as FlippedCurve;
Function FlippedCurve_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is FlippedCurve;
Curve _FlippedCurve_curve$(FlippedCurve target) {
  return target.curve;
}

Function _FlippedCurve_transformInternal$(
  m.Scope scope,
  FlippedCurve target,
) =>
    target.transformInternal;
Function _FlippedCurve_toString$(
  m.Scope scope,
  FlippedCurve target,
) =>
    target.toString;
Function ElasticInCurve_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ElasticInCurve;
Function ElasticInCurve_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ElasticInCurve;
double _ElasticInCurve_period$(ElasticInCurve target) {
  return target.period;
}

Function _ElasticInCurve_transformInternal$(
  m.Scope scope,
  ElasticInCurve target,
) =>
    target.transformInternal;
Function _ElasticInCurve_toString$(
  m.Scope scope,
  ElasticInCurve target,
) =>
    target.toString;
Function ElasticOutCurve_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ElasticOutCurve;
Function ElasticOutCurve_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ElasticOutCurve;
double _ElasticOutCurve_period$(ElasticOutCurve target) {
  return target.period;
}

Function _ElasticOutCurve_transformInternal$(
  m.Scope scope,
  ElasticOutCurve target,
) =>
    target.transformInternal;
Function _ElasticOutCurve_toString$(
  m.Scope scope,
  ElasticOutCurve target,
) =>
    target.toString;
Function ElasticInOutCurve_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ElasticInOutCurve;
Function ElasticInOutCurve_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ElasticInOutCurve;
double _ElasticInOutCurve_period$(ElasticInOutCurve target) {
  return target.period;
}

Function _ElasticInOutCurve_transformInternal$(
  m.Scope scope,
  ElasticInOutCurve target,
) =>
    target.transformInternal;
Function _ElasticInOutCurve_toString$(
  m.Scope scope,
  ElasticInOutCurve target,
) =>
    target.toString;
Function Curves_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Curves;
Function Curves_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Curves;
Curve _Curves_linear$() {
  return Curves.linear;
}

Curve _Curves_decelerate$() {
  return Curves.decelerate;
}

Cubic _Curves_fastLinearToSlowEaseIn$() {
  return Curves.fastLinearToSlowEaseIn;
}

ThreePointCubic _Curves_fastEaseInToSlowEaseOut$() {
  return Curves.fastEaseInToSlowEaseOut;
}

Cubic _Curves_ease$() {
  return Curves.ease;
}

Cubic _Curves_easeIn$() {
  return Curves.easeIn;
}

Cubic _Curves_easeInToLinear$() {
  return Curves.easeInToLinear;
}

Cubic _Curves_easeInSine$() {
  return Curves.easeInSine;
}

Cubic _Curves_easeInQuad$() {
  return Curves.easeInQuad;
}

Cubic _Curves_easeInCubic$() {
  return Curves.easeInCubic;
}

Cubic _Curves_easeInQuart$() {
  return Curves.easeInQuart;
}

Cubic _Curves_easeInQuint$() {
  return Curves.easeInQuint;
}

Cubic _Curves_easeInExpo$() {
  return Curves.easeInExpo;
}

Cubic _Curves_easeInCirc$() {
  return Curves.easeInCirc;
}

Cubic _Curves_easeInBack$() {
  return Curves.easeInBack;
}

Cubic _Curves_easeOut$() {
  return Curves.easeOut;
}

Cubic _Curves_linearToEaseOut$() {
  return Curves.linearToEaseOut;
}

Cubic _Curves_easeOutSine$() {
  return Curves.easeOutSine;
}

Cubic _Curves_easeOutQuad$() {
  return Curves.easeOutQuad;
}

Cubic _Curves_easeOutCubic$() {
  return Curves.easeOutCubic;
}

Cubic _Curves_easeOutQuart$() {
  return Curves.easeOutQuart;
}

Cubic _Curves_easeOutQuint$() {
  return Curves.easeOutQuint;
}

Cubic _Curves_easeOutExpo$() {
  return Curves.easeOutExpo;
}

Cubic _Curves_easeOutCirc$() {
  return Curves.easeOutCirc;
}

Cubic _Curves_easeOutBack$() {
  return Curves.easeOutBack;
}

Cubic _Curves_easeInOut$() {
  return Curves.easeInOut;
}

Cubic _Curves_easeInOutSine$() {
  return Curves.easeInOutSine;
}

Cubic _Curves_easeInOutQuad$() {
  return Curves.easeInOutQuad;
}

Cubic _Curves_easeInOutCubic$() {
  return Curves.easeInOutCubic;
}

ThreePointCubic _Curves_easeInOutCubicEmphasized$() {
  return Curves.easeInOutCubicEmphasized;
}

Cubic _Curves_easeInOutQuart$() {
  return Curves.easeInOutQuart;
}

Cubic _Curves_easeInOutQuint$() {
  return Curves.easeInOutQuint;
}

Cubic _Curves_easeInOutExpo$() {
  return Curves.easeInOutExpo;
}

Cubic _Curves_easeInOutCirc$() {
  return Curves.easeInOutCirc;
}

Cubic _Curves_easeInOutBack$() {
  return Curves.easeInOutBack;
}

Cubic _Curves_fastOutSlowIn$() {
  return Curves.fastOutSlowIn;
}

Cubic _Curves_slowMiddle$() {
  return Curves.slowMiddle;
}

Curve _Curves_bounceIn$() {
  return Curves.bounceIn;
}

Curve _Curves_bounceOut$() {
  return Curves.bounceOut;
}

Curve _Curves_bounceInOut$() {
  return Curves.bounceInOut;
}

ElasticInCurve _Curves_elasticIn$() {
  return Curves.elasticIn;
}

ElasticOutCurve _Curves_elasticOut$() {
  return Curves.elasticOut;
}

ElasticInOutCurve _Curves_elasticInOut$() {
  return Curves.elasticInOut;
}
