// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/animation/curves.dart';
import 'dart:math';
import 'dart:ui';
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/animation/curves.dart',
  {
    'SawTooth.': _SawTooth__$,
    'Interval.': _Interval__$,
    'Threshold.': _Threshold__$,
    'Cubic.': _Cubic__$,
    'ThreePointCubic.': _ThreePointCubic__$,
    'Curve2DSample.': _Curve2DSample__$,
    'CatmullRomSpline.': _CatmullRomSpline__$,
    'CatmullRomSpline.precompute': _CatmullRomSpline_precompute_$,
    'CatmullRomCurve.': _CatmullRomCurve__$,
    'CatmullRomCurve.precompute': _CatmullRomCurve_precompute_$,
    'CatmullRomCurve.validateControlPoints':
        _CatmullRomCurve_validateControlPoints$,
    'FlippedCurve.': _FlippedCurve__$,
    'ElasticInCurve.': _ElasticInCurve__$,
    'ElasticOutCurve.': _ElasticOutCurve__$,
    'ElasticInOutCurve.': _ElasticInOutCurve__$,
    'Curves.linear': _Curves_linear$,
    'Curves.decelerate': _Curves_decelerate$,
    'Curves.fastLinearToSlowEaseIn': _Curves_fastLinearToSlowEaseIn$,
    'Curves.fastEaseInToSlowEaseOut': _Curves_fastEaseInToSlowEaseOut$,
    'Curves.ease': _Curves_ease$,
    'Curves.easeIn': _Curves_easeIn$,
    'Curves.easeInToLinear': _Curves_easeInToLinear$,
    'Curves.easeInSine': _Curves_easeInSine$,
    'Curves.easeInQuad': _Curves_easeInQuad$,
    'Curves.easeInCubic': _Curves_easeInCubic$,
    'Curves.easeInQuart': _Curves_easeInQuart$,
    'Curves.easeInQuint': _Curves_easeInQuint$,
    'Curves.easeInExpo': _Curves_easeInExpo$,
    'Curves.easeInCirc': _Curves_easeInCirc$,
    'Curves.easeInBack': _Curves_easeInBack$,
    'Curves.easeOut': _Curves_easeOut$,
    'Curves.linearToEaseOut': _Curves_linearToEaseOut$,
    'Curves.easeOutSine': _Curves_easeOutSine$,
    'Curves.easeOutQuad': _Curves_easeOutQuad$,
    'Curves.easeOutCubic': _Curves_easeOutCubic$,
    'Curves.easeOutQuart': _Curves_easeOutQuart$,
    'Curves.easeOutQuint': _Curves_easeOutQuint$,
    'Curves.easeOutExpo': _Curves_easeOutExpo$,
    'Curves.easeOutCirc': _Curves_easeOutCirc$,
    'Curves.easeOutBack': _Curves_easeOutBack$,
    'Curves.easeInOut': _Curves_easeInOut$,
    'Curves.easeInOutSine': _Curves_easeInOutSine$,
    'Curves.easeInOutQuad': _Curves_easeInOutQuad$,
    'Curves.easeInOutCubic': _Curves_easeInOutCubic$,
    'Curves.easeInOutCubicEmphasized': _Curves_easeInOutCubicEmphasized$,
    'Curves.easeInOutQuart': _Curves_easeInOutQuart$,
    'Curves.easeInOutQuint': _Curves_easeInOutQuint$,
    'Curves.easeInOutExpo': _Curves_easeInOutExpo$,
    'Curves.easeInOutCirc': _Curves_easeInOutCirc$,
    'Curves.easeInOutBack': _Curves_easeInOutBack$,
    'Curves.fastOutSlowIn': _Curves_fastOutSlowIn$,
    'Curves.slowMiddle': _Curves_slowMiddle$,
    'Curves.bounceIn': _Curves_bounceIn$,
    'Curves.bounceOut': _Curves_bounceOut$,
    'Curves.bounceInOut': _Curves_bounceInOut$,
    'Curves.elasticIn': _Curves_elasticIn$,
    'Curves.elasticOut': _Curves_elasticOut$,
    'Curves.elasticInOut': _Curves_elasticInOut$,
  },
  {},
  {
    'ParametricCurve': m.ClassMirror(
      'ParametricCurve',
      {
        '#as': ParametricCurve_as$,
        '#is': ParametricCurve_is$,
        'transform': _ParametricCurve_transform$,
        'transformInternal': _ParametricCurve_transformInternal$,
        'toString': _ParametricCurve_toString$,
      },
      {},
    ),
    'Curve': m.ClassMirror(
      'Curve',
      {
        '#as': Curve_as$,
        '#is': Curve_is$,
        'flipped': _Curve_flipped$,
        'transform': _Curve_transform$,
      },
      {},
    ),
    'SawTooth': m.ClassMirror(
      'SawTooth',
      {
        '#as': SawTooth_as$,
        '#is': SawTooth_is$,
        'count': _SawTooth_count$,
        'transformInternal': _SawTooth_transformInternal$,
        'toString': _SawTooth_toString$,
      },
      {},
    ),
    'Interval': m.ClassMirror(
      'Interval',
      {
        '#as': Interval_as$,
        '#is': Interval_is$,
        'begin': _Interval_begin$,
        'end': _Interval_end$,
        'curve': _Interval_curve$,
        'transformInternal': _Interval_transformInternal$,
        'toString': _Interval_toString$,
      },
      {},
    ),
    'Threshold': m.ClassMirror(
      'Threshold',
      {
        '#as': Threshold_as$,
        '#is': Threshold_is$,
        'threshold': _Threshold_threshold$,
        'transformInternal': _Threshold_transformInternal$,
      },
      {},
    ),
    'Cubic': m.ClassMirror(
      'Cubic',
      {
        '#as': Cubic_as$,
        '#is': Cubic_is$,
        'a': _Cubic_a$,
        'b': _Cubic_b$,
        'c': _Cubic_c$,
        'd': _Cubic_d$,
        'transformInternal': _Cubic_transformInternal$,
        'toString': _Cubic_toString$,
      },
      {},
    ),
    'ThreePointCubic': m.ClassMirror(
      'ThreePointCubic',
      {
        '#as': ThreePointCubic_as$,
        '#is': ThreePointCubic_is$,
        'a1': _ThreePointCubic_a1$,
        'b1': _ThreePointCubic_b1$,
        'midpoint': _ThreePointCubic_midpoint$,
        'a2': _ThreePointCubic_a2$,
        'b2': _ThreePointCubic_b2$,
        'transformInternal': _ThreePointCubic_transformInternal$,
        'toString': _ThreePointCubic_toString$,
      },
      {},
    ),
    'Curve2D': m.ClassMirror(
      'Curve2D',
      {
        '#as': Curve2D_as$,
        '#is': Curve2D_is$,
        'samplingSeed': _Curve2D_samplingSeed$,
        'generateSamples': _Curve2D_generateSamples$,
        'findInverse': _Curve2D_findInverse$,
      },
      {},
    ),
    'Curve2DSample': m.ClassMirror(
      'Curve2DSample',
      {
        '#as': Curve2DSample_as$,
        '#is': Curve2DSample_is$,
        't': _Curve2DSample_t$,
        'value': _Curve2DSample_value$,
        'toString': _Curve2DSample_toString$,
      },
      {},
    ),
    'CatmullRomSpline': m.ClassMirror(
      'CatmullRomSpline',
      {
        '#as': CatmullRomSpline_as$,
        '#is': CatmullRomSpline_is$,
        'samplingSeed': _CatmullRomSpline_samplingSeed$,
        'transformInternal': _CatmullRomSpline_transformInternal$,
      },
      {},
    ),
    'CatmullRomCurve': m.ClassMirror(
      'CatmullRomCurve',
      {
        '#as': CatmullRomCurve_as$,
        '#is': CatmullRomCurve_is$,
        'controlPoints': _CatmullRomCurve_controlPoints$,
        'tension': _CatmullRomCurve_tension$,
        'transformInternal': _CatmullRomCurve_transformInternal$,
      },
      {},
    ),
    'FlippedCurve': m.ClassMirror(
      'FlippedCurve',
      {
        '#as': FlippedCurve_as$,
        '#is': FlippedCurve_is$,
        'curve': _FlippedCurve_curve$,
        'transformInternal': _FlippedCurve_transformInternal$,
        'toString': _FlippedCurve_toString$,
      },
      {},
    ),
    'ElasticInCurve': m.ClassMirror(
      'ElasticInCurve',
      {
        '#as': ElasticInCurve_as$,
        '#is': ElasticInCurve_is$,
        'period': _ElasticInCurve_period$,
        'transformInternal': _ElasticInCurve_transformInternal$,
        'toString': _ElasticInCurve_toString$,
      },
      {},
    ),
    'ElasticOutCurve': m.ClassMirror(
      'ElasticOutCurve',
      {
        '#as': ElasticOutCurve_as$,
        '#is': ElasticOutCurve_is$,
        'period': _ElasticOutCurve_period$,
        'transformInternal': _ElasticOutCurve_transformInternal$,
        'toString': _ElasticOutCurve_toString$,
      },
      {},
    ),
    'ElasticInOutCurve': m.ClassMirror(
      'ElasticInOutCurve',
      {
        '#as': ElasticInOutCurve_as$,
        '#is': ElasticInOutCurve_is$,
        'period': _ElasticInOutCurve_period$,
        'transformInternal': _ElasticInOutCurve_transformInternal$,
        'toString': _ElasticInOutCurve_toString$,
      },
      {},
    ),
    'Curves': m.ClassMirror(
      'Curves',
      {
        '#as': Curves_as$,
        '#is': Curves_is$,
      },
      {},
    ),
  },
);
Function ParametricCurve_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ParametricCurve<T>;
Function ParametricCurve_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ParametricCurve<T>;
Function _ParametricCurve_transform$<T>(
  m.Scope scope$,
  ParametricCurve<T> target$,
) =>
    target$.transform;
Function _ParametricCurve_transformInternal$<T>(
  m.Scope scope$,
  ParametricCurve<T> target$,
) =>
    target$.transformInternal;
Function _ParametricCurve_toString$<T>(
  m.Scope scope$,
  ParametricCurve<T> target$,
) =>
    target$.toString;
Function Curve_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Curve;
Function Curve_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Curve;
Function _Curve_flipped$(
  m.Scope scope$,
  Curve target$,
) =>
    () {
      return target$.flipped;
    };
Function _Curve_transform$(
  m.Scope scope$,
  Curve target$,
) =>
    target$.transform;
Function SawTooth_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SawTooth;
Function SawTooth_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SawTooth;
Function _SawTooth_count$(
  m.Scope scope$,
  SawTooth target$,
) =>
    () {
      return target$.count;
    };
Function _SawTooth__$(m.Scope scope$) => (int count) {
      return SawTooth(count);
    };
Function _SawTooth_transformInternal$(
  m.Scope scope$,
  SawTooth target$,
) =>
    target$.transformInternal;
Function _SawTooth_toString$(
  m.Scope scope$,
  SawTooth target$,
) =>
    target$.toString;
Function Interval_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Interval;
Function Interval_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Interval;
Function _Interval_begin$(
  m.Scope scope$,
  Interval target$,
) =>
    () {
      return target$.begin;
    };
Function _Interval_end$(
  m.Scope scope$,
  Interval target$,
) =>
    () {
      return target$.end;
    };
Function _Interval_curve$(
  m.Scope scope$,
  Interval target$,
) =>
    () {
      return target$.curve;
    };
Function _Interval__$(m.Scope scope$) => (
      double begin,
      double end, {
      Curve? curve,
    }) {
      return Interval(
        begin,
        end,
        curve: curve ?? Curves.linear,
      );
    };
Function _Interval_transformInternal$(
  m.Scope scope$,
  Interval target$,
) =>
    target$.transformInternal;
Function _Interval_toString$(
  m.Scope scope$,
  Interval target$,
) =>
    target$.toString;
Function Threshold_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Threshold;
Function Threshold_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Threshold;
Function _Threshold_threshold$(
  m.Scope scope$,
  Threshold target$,
) =>
    () {
      return target$.threshold;
    };
Function _Threshold__$(m.Scope scope$) => (double threshold) {
      return Threshold(threshold);
    };
Function _Threshold_transformInternal$(
  m.Scope scope$,
  Threshold target$,
) =>
    target$.transformInternal;
Function Cubic_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Cubic;
Function Cubic_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Cubic;
Function _Cubic_a$(
  m.Scope scope$,
  Cubic target$,
) =>
    () {
      return target$.a;
    };
Function _Cubic_b$(
  m.Scope scope$,
  Cubic target$,
) =>
    () {
      return target$.b;
    };
Function _Cubic_c$(
  m.Scope scope$,
  Cubic target$,
) =>
    () {
      return target$.c;
    };
Function _Cubic_d$(
  m.Scope scope$,
  Cubic target$,
) =>
    () {
      return target$.d;
    };
Function _Cubic__$(m.Scope scope$) => (
      double a,
      double b,
      double c,
      double d,
    ) {
      return Cubic(
        a,
        b,
        c,
        d,
      );
    };
Function _Cubic_transformInternal$(
  m.Scope scope$,
  Cubic target$,
) =>
    target$.transformInternal;
Function _Cubic_toString$(
  m.Scope scope$,
  Cubic target$,
) =>
    target$.toString;
Function ThreePointCubic_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ThreePointCubic;
Function ThreePointCubic_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ThreePointCubic;
Function _ThreePointCubic_a1$(
  m.Scope scope$,
  ThreePointCubic target$,
) =>
    () {
      return target$.a1;
    };
Function _ThreePointCubic_b1$(
  m.Scope scope$,
  ThreePointCubic target$,
) =>
    () {
      return target$.b1;
    };
Function _ThreePointCubic_midpoint$(
  m.Scope scope$,
  ThreePointCubic target$,
) =>
    () {
      return target$.midpoint;
    };
Function _ThreePointCubic_a2$(
  m.Scope scope$,
  ThreePointCubic target$,
) =>
    () {
      return target$.a2;
    };
Function _ThreePointCubic_b2$(
  m.Scope scope$,
  ThreePointCubic target$,
) =>
    () {
      return target$.b2;
    };
Function _ThreePointCubic__$(m.Scope scope$) => (
      Offset a1,
      Offset b1,
      Offset midpoint,
      Offset a2,
      Offset b2,
    ) {
      return ThreePointCubic(
        a1,
        b1,
        midpoint,
        a2,
        b2,
      );
    };
Function _ThreePointCubic_transformInternal$(
  m.Scope scope$,
  ThreePointCubic target$,
) =>
    target$.transformInternal;
Function _ThreePointCubic_toString$(
  m.Scope scope$,
  ThreePointCubic target$,
) =>
    target$.toString;
Function Curve2D_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Curve2D;
Function Curve2D_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Curve2D;
Function _Curve2D_samplingSeed$(
  m.Scope scope$,
  Curve2D target$,
) =>
    () {
      return target$.samplingSeed;
    };
Function _Curve2D_generateSamples$(
  m.Scope scope$,
  Curve2D target$,
) =>
    target$.generateSamples;
Function _Curve2D_findInverse$(
  m.Scope scope$,
  Curve2D target$,
) =>
    target$.findInverse;
Function Curve2DSample_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Curve2DSample;
Function Curve2DSample_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Curve2DSample;
Function _Curve2DSample_t$(
  m.Scope scope$,
  Curve2DSample target$,
) =>
    () {
      return target$.t;
    };
Function _Curve2DSample_value$(
  m.Scope scope$,
  Curve2DSample target$,
) =>
    () {
      return target$.value;
    };
Function _Curve2DSample__$(m.Scope scope$) => (
      double t,
      Offset value,
    ) {
      return Curve2DSample(
        t,
        value,
      );
    };
Function _Curve2DSample_toString$(
  m.Scope scope$,
  Curve2DSample target$,
) =>
    target$.toString;
Function CatmullRomSpline_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CatmullRomSpline;
Function CatmullRomSpline_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CatmullRomSpline;
Function _CatmullRomSpline_samplingSeed$(
  m.Scope scope$,
  CatmullRomSpline target$,
) =>
    () {
      return target$.samplingSeed;
    };
Function _CatmullRomSpline__$(m.Scope scope$) => (
      List controlPoints, {
      double? tension,
      Offset? startHandle,
      Offset? endHandle,
    }) {
      return CatmullRomSpline(
        List.from(controlPoints),
        endHandle: endHandle,
        startHandle: startHandle,
        tension: tension ?? 0.0,
      );
    };
Function _CatmullRomSpline_precompute_$(m.Scope scope$) =>
    CatmullRomSpline.precompute;
Function _CatmullRomSpline_transformInternal$(
  m.Scope scope$,
  CatmullRomSpline target$,
) =>
    target$.transformInternal;
Function CatmullRomCurve_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CatmullRomCurve;
Function CatmullRomCurve_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CatmullRomCurve;
Function _CatmullRomCurve_controlPoints$(
  m.Scope scope$,
  CatmullRomCurve target$,
) =>
    () {
      return target$.controlPoints;
    };
Function _CatmullRomCurve_tension$(
  m.Scope scope$,
  CatmullRomCurve target$,
) =>
    () {
      return target$.tension;
    };
Function _CatmullRomCurve__$(m.Scope scope$) => (
      List controlPoints, {
      double? tension,
    }) {
      return CatmullRomCurve(
        List.from(controlPoints),
        tension: tension ?? 0.0,
      );
    };
Function _CatmullRomCurve_precompute_$(m.Scope scope$) =>
    CatmullRomCurve.precompute;
Function _CatmullRomCurve_validateControlPoints$(m.Scope scope$) =>
    CatmullRomCurve.validateControlPoints;
Function _CatmullRomCurve_transformInternal$(
  m.Scope scope$,
  CatmullRomCurve target$,
) =>
    target$.transformInternal;
Function FlippedCurve_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FlippedCurve;
Function FlippedCurve_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FlippedCurve;
Function _FlippedCurve_curve$(
  m.Scope scope$,
  FlippedCurve target$,
) =>
    () {
      return target$.curve;
    };
Function _FlippedCurve__$(m.Scope scope$) => (Curve curve) {
      return FlippedCurve(curve);
    };
Function _FlippedCurve_transformInternal$(
  m.Scope scope$,
  FlippedCurve target$,
) =>
    target$.transformInternal;
Function _FlippedCurve_toString$(
  m.Scope scope$,
  FlippedCurve target$,
) =>
    target$.toString;
Function ElasticInCurve_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ElasticInCurve;
Function ElasticInCurve_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ElasticInCurve;
Function _ElasticInCurve_period$(
  m.Scope scope$,
  ElasticInCurve target$,
) =>
    () {
      return target$.period;
    };
Function _ElasticInCurve__$(m.Scope scope$) => ([double? period]) {
      if (period == null) {
        return ElasticInCurve();
      }
      return ElasticInCurve(period!);
    };
Function _ElasticInCurve_transformInternal$(
  m.Scope scope$,
  ElasticInCurve target$,
) =>
    target$.transformInternal;
Function _ElasticInCurve_toString$(
  m.Scope scope$,
  ElasticInCurve target$,
) =>
    target$.toString;
Function ElasticOutCurve_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ElasticOutCurve;
Function ElasticOutCurve_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ElasticOutCurve;
Function _ElasticOutCurve_period$(
  m.Scope scope$,
  ElasticOutCurve target$,
) =>
    () {
      return target$.period;
    };
Function _ElasticOutCurve__$(m.Scope scope$) => ([double? period]) {
      if (period == null) {
        return ElasticOutCurve();
      }
      return ElasticOutCurve(period!);
    };
Function _ElasticOutCurve_transformInternal$(
  m.Scope scope$,
  ElasticOutCurve target$,
) =>
    target$.transformInternal;
Function _ElasticOutCurve_toString$(
  m.Scope scope$,
  ElasticOutCurve target$,
) =>
    target$.toString;
Function ElasticInOutCurve_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ElasticInOutCurve;
Function ElasticInOutCurve_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ElasticInOutCurve;
Function _ElasticInOutCurve_period$(
  m.Scope scope$,
  ElasticInOutCurve target$,
) =>
    () {
      return target$.period;
    };
Function _ElasticInOutCurve__$(m.Scope scope$) => ([double? period]) {
      if (period == null) {
        return ElasticInOutCurve();
      }
      return ElasticInOutCurve(period!);
    };
Function _ElasticInOutCurve_transformInternal$(
  m.Scope scope$,
  ElasticInOutCurve target$,
) =>
    target$.transformInternal;
Function _ElasticInOutCurve_toString$(
  m.Scope scope$,
  ElasticInOutCurve target$,
) =>
    target$.toString;
Function Curves_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Curves;
Function Curves_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Curves;
Function _Curves_linear$(m.Scope scope$) => () => Curves.linear;
Function _Curves_decelerate$(m.Scope scope$) => () => Curves.decelerate;
Function _Curves_fastLinearToSlowEaseIn$(m.Scope scope$) =>
    () => Curves.fastLinearToSlowEaseIn;
Function _Curves_fastEaseInToSlowEaseOut$(m.Scope scope$) =>
    () => Curves.fastEaseInToSlowEaseOut;
Function _Curves_ease$(m.Scope scope$) => () => Curves.ease;
Function _Curves_easeIn$(m.Scope scope$) => () => Curves.easeIn;
Function _Curves_easeInToLinear$(m.Scope scope$) => () => Curves.easeInToLinear;
Function _Curves_easeInSine$(m.Scope scope$) => () => Curves.easeInSine;
Function _Curves_easeInQuad$(m.Scope scope$) => () => Curves.easeInQuad;
Function _Curves_easeInCubic$(m.Scope scope$) => () => Curves.easeInCubic;
Function _Curves_easeInQuart$(m.Scope scope$) => () => Curves.easeInQuart;
Function _Curves_easeInQuint$(m.Scope scope$) => () => Curves.easeInQuint;
Function _Curves_easeInExpo$(m.Scope scope$) => () => Curves.easeInExpo;
Function _Curves_easeInCirc$(m.Scope scope$) => () => Curves.easeInCirc;
Function _Curves_easeInBack$(m.Scope scope$) => () => Curves.easeInBack;
Function _Curves_easeOut$(m.Scope scope$) => () => Curves.easeOut;
Function _Curves_linearToEaseOut$(m.Scope scope$) =>
    () => Curves.linearToEaseOut;
Function _Curves_easeOutSine$(m.Scope scope$) => () => Curves.easeOutSine;
Function _Curves_easeOutQuad$(m.Scope scope$) => () => Curves.easeOutQuad;
Function _Curves_easeOutCubic$(m.Scope scope$) => () => Curves.easeOutCubic;
Function _Curves_easeOutQuart$(m.Scope scope$) => () => Curves.easeOutQuart;
Function _Curves_easeOutQuint$(m.Scope scope$) => () => Curves.easeOutQuint;
Function _Curves_easeOutExpo$(m.Scope scope$) => () => Curves.easeOutExpo;
Function _Curves_easeOutCirc$(m.Scope scope$) => () => Curves.easeOutCirc;
Function _Curves_easeOutBack$(m.Scope scope$) => () => Curves.easeOutBack;
Function _Curves_easeInOut$(m.Scope scope$) => () => Curves.easeInOut;
Function _Curves_easeInOutSine$(m.Scope scope$) => () => Curves.easeInOutSine;
Function _Curves_easeInOutQuad$(m.Scope scope$) => () => Curves.easeInOutQuad;
Function _Curves_easeInOutCubic$(m.Scope scope$) => () => Curves.easeInOutCubic;
Function _Curves_easeInOutCubicEmphasized$(m.Scope scope$) =>
    () => Curves.easeInOutCubicEmphasized;
Function _Curves_easeInOutQuart$(m.Scope scope$) => () => Curves.easeInOutQuart;
Function _Curves_easeInOutQuint$(m.Scope scope$) => () => Curves.easeInOutQuint;
Function _Curves_easeInOutExpo$(m.Scope scope$) => () => Curves.easeInOutExpo;
Function _Curves_easeInOutCirc$(m.Scope scope$) => () => Curves.easeInOutCirc;
Function _Curves_easeInOutBack$(m.Scope scope$) => () => Curves.easeInOutBack;
Function _Curves_fastOutSlowIn$(m.Scope scope$) => () => Curves.fastOutSlowIn;
Function _Curves_slowMiddle$(m.Scope scope$) => () => Curves.slowMiddle;
Function _Curves_bounceIn$(m.Scope scope$) => () => Curves.bounceIn;
Function _Curves_bounceOut$(m.Scope scope$) => () => Curves.bounceOut;
Function _Curves_bounceInOut$(m.Scope scope$) => () => Curves.bounceInOut;
Function _Curves_elasticIn$(m.Scope scope$) => () => Curves.elasticIn;
Function _Curves_elasticOut$(m.Scope scope$) => () => Curves.elasticOut;
Function _Curves_elasticInOut$(m.Scope scope$) => () => Curves.elasticInOut;
