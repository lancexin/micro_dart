// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/context_menu_button_item.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/context_menu_button_item.dart',
  {
    'ContextMenuButtonItem.': _ContextMenuButtonItem__$,
    'ContextMenuButtonItem.copyWith': _ContextMenuButtonItem_copyWith$,
    'ContextMenuButtonType.cut': _ContextMenuButtonType_cut$,
    'ContextMenuButtonType.copy': _ContextMenuButtonType_copy$,
    'ContextMenuButtonType.paste': _ContextMenuButtonType_paste$,
    'ContextMenuButtonType.selectAll': _ContextMenuButtonType_selectAll$,
    'ContextMenuButtonType.delete': _ContextMenuButtonType_delete$,
    'ContextMenuButtonType.custom': _ContextMenuButtonType_custom$,
    'ContextMenuButtonType.values': _ContextMenuButtonType_values$,
  },
  {},
  {
    'ContextMenuButtonItem': m.ClassMirror(
      'ContextMenuButtonItem',
      {
        '#as': ContextMenuButtonItem_as$,
        '#is': ContextMenuButtonItem_is$,
        'onPressed': _ContextMenuButtonItem_onPressed$,
        'type': _ContextMenuButtonItem_type$,
        'label': _ContextMenuButtonItem_label$,
        'hashCode': _ContextMenuButtonItem_hashCode$,
        '==': _ContextMenuButtonItem_eq$$,
        'toString': _ContextMenuButtonItem_toString$,
      },
      {},
    ),
    'ContextMenuButtonType': m.ClassMirror(
      'ContextMenuButtonType',
      {},
      {},
    ),
  },
);
Function ContextMenuButtonItem_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ContextMenuButtonItem;
Function ContextMenuButtonItem_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ContextMenuButtonItem;
Function _ContextMenuButtonItem_onPressed$(
  m.Scope scope$,
  ContextMenuButtonItem target$,
) =>
    () {
      return target$.onPressed;
    };
Function _ContextMenuButtonItem_type$(
  m.Scope scope$,
  ContextMenuButtonItem target$,
) =>
    () {
      return target$.type;
    };
Function _ContextMenuButtonItem_label$(
  m.Scope scope$,
  ContextMenuButtonItem target$,
) =>
    () {
      return target$.label;
    };
Function _ContextMenuButtonItem_hashCode$(
  m.Scope scope$,
  ContextMenuButtonItem target$,
) =>
    () {
      return target$.hashCode;
    };
Function _ContextMenuButtonItem__$(m.Scope scope$) => ({
      required m.FunctionPointer onPressed,
      ContextMenuButtonType? type,
      String? label,
    }) {
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed,
            [],
            {},
          );
      return ContextMenuButtonItem(
        label: label,
        onPressed: onPressedProxy,
        type: type ?? ContextMenuButtonType.custom,
      );
    };
Function _ContextMenuButtonItem_copyWith$(
  m.Scope scope$,
  ContextMenuButtonItem target$,
) =>
    ({
      m.FunctionPointer? onPressed,
      ContextMenuButtonType? type,
      String? label,
    }) {
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return target$.copyWith(
        label: label,
        onPressed: onPressed == null ? null : onPressedProxy,
        type: type,
      );
    };
Function _ContextMenuButtonItem_eq$$(
  m.Scope scope$,
  ContextMenuButtonItem target$,
) =>
    (Object other$) => target$ == other$;
Function _ContextMenuButtonItem_toString$(
  m.Scope scope$,
  ContextMenuButtonItem target$,
) =>
    target$.toString;
ContextMenuButtonType _ContextMenuButtonType_cut$() {
  return ContextMenuButtonType.cut;
}

ContextMenuButtonType _ContextMenuButtonType_copy$() {
  return ContextMenuButtonType.copy;
}

ContextMenuButtonType _ContextMenuButtonType_paste$() {
  return ContextMenuButtonType.paste;
}

ContextMenuButtonType _ContextMenuButtonType_selectAll$() {
  return ContextMenuButtonType.selectAll;
}

ContextMenuButtonType _ContextMenuButtonType_delete$() {
  return ContextMenuButtonType.delete;
}

ContextMenuButtonType _ContextMenuButtonType_custom$() {
  return ContextMenuButtonType.custom;
}

List<ContextMenuButtonType> _ContextMenuButtonType_values$() {
  return ContextMenuButtonType.values;
}
