// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/foundation/licenses.dart';
import 'dart:async';
import 'package:meta/meta.dart' show visibleForTesting;

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/foundation/licenses.dart',
  {
    'LicenseParagraph.centeredIndent': _LicenseParagraph_centeredIndent$,
    'LicenseRegistry.licenses': _LicenseRegistry_licenses$,
    'LicenseRegistry.addLicense': _LicenseRegistry_addLicense$,
    'LicenseRegistry.reset': _LicenseRegistry_reset$,
  },
  {},
  {
    'LicenseParagraph': m.ClassMirror(
      'LicenseParagraph',
      {
        '#as': LicenseParagraph_as$,
        '#is': LicenseParagraph_is$,
        'text': _LicenseParagraph_text$,
        'indent': _LicenseParagraph_indent$,
      },
      {},
    ),
    'LicenseEntry': m.ClassMirror(
      'LicenseEntry',
      {
        '#as': LicenseEntry_as$,
        '#is': LicenseEntry_is$,
        'packages': _LicenseEntry_packages$,
        'paragraphs': _LicenseEntry_paragraphs$,
      },
      {},
    ),
    'LicenseEntryWithLineBreaks': m.ClassMirror(
      'LicenseEntryWithLineBreaks',
      {
        '#as': LicenseEntryWithLineBreaks_as$,
        '#is': LicenseEntryWithLineBreaks_is$,
        'packages': _LicenseEntryWithLineBreaks_packages$,
        'text': _LicenseEntryWithLineBreaks_text$,
        'paragraphs': _LicenseEntryWithLineBreaks_paragraphs$,
      },
      {},
    ),
    'LicenseRegistry': m.ClassMirror(
      'LicenseRegistry',
      {
        '#as': LicenseRegistry_as$,
        '#is': LicenseRegistry_is$,
      },
      {},
    ),
  },
);
Function LicenseParagraph_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as LicenseParagraph;
Function LicenseParagraph_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is LicenseParagraph;
String _LicenseParagraph_text$(LicenseParagraph target) {
  return target.text;
}

int _LicenseParagraph_indent$(LicenseParagraph target) {
  return target.indent;
}

int _LicenseParagraph_centeredIndent$() {
  return LicenseParagraph.centeredIndent;
}

Function LicenseEntry_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as LicenseEntry;
Function LicenseEntry_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is LicenseEntry;
Iterable<String> _LicenseEntry_packages$(LicenseEntry target) {
  return target.packages;
}

Iterable<LicenseParagraph> _LicenseEntry_paragraphs$(LicenseEntry target) {
  return target.paragraphs;
}

Function LicenseEntryWithLineBreaks_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as LicenseEntryWithLineBreaks;
Function LicenseEntryWithLineBreaks_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is LicenseEntryWithLineBreaks;
List<String> _LicenseEntryWithLineBreaks_packages$(
    LicenseEntryWithLineBreaks target) {
  return target.packages;
}

String _LicenseEntryWithLineBreaks_text$(LicenseEntryWithLineBreaks target) {
  return target.text;
}

Iterable<LicenseParagraph> _LicenseEntryWithLineBreaks_paragraphs$(
    LicenseEntryWithLineBreaks target) {
  return target.paragraphs;
}

Function LicenseRegistry_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as LicenseRegistry;
Function LicenseRegistry_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is LicenseRegistry;
Stream<LicenseEntry> _LicenseRegistry_licenses$() {
  return LicenseRegistry.licenses;
}

Function _LicenseRegistry_addLicense$(m.Scope scope) =>
    (m.FunctionPointer collector) {
      Stream<LicenseEntry> collectorProxy() => scope.engine.callFunctionPointer(
            scope,
            collector,
            [],
            {},
          );
      LicenseRegistry.addLicense(collectorProxy);
    };
Function _LicenseRegistry_reset$(m.Scope scope) => LicenseRegistry.reset;
