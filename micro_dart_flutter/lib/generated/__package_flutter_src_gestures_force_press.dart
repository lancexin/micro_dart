// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/gestures/force_press.dart';
import 'package:flutter/foundation.dart' show clampDouble;
import 'package:flutter/src/gestures/events.dart';
import 'package:flutter/src/gestures/recognizer.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/gestures/force_press.dart',
  {},
  {},
  {
    'ForcePressDetails': m.ClassMirror(
      'ForcePressDetails',
      {
        '#as': ForcePressDetails_as$,
        '#is': ForcePressDetails_is$,
        'globalPosition': _ForcePressDetails_globalPosition$,
        'localPosition': _ForcePressDetails_localPosition$,
        'pressure': _ForcePressDetails_pressure$,
      },
      {},
    ),
    'ForcePressGestureRecognizer': m.ClassMirror(
      'ForcePressGestureRecognizer',
      {
        '#as': ForcePressGestureRecognizer_as$,
        '#is': ForcePressGestureRecognizer_is$,
        'onStart': _ForcePressGestureRecognizer_onStart$,
        'onUpdate': _ForcePressGestureRecognizer_onUpdate$,
        'onPeak': _ForcePressGestureRecognizer_onPeak$,
        'onEnd': _ForcePressGestureRecognizer_onEnd$,
        'startPressure': _ForcePressGestureRecognizer_startPressure$,
        'peakPressure': _ForcePressGestureRecognizer_peakPressure$,
        'interpolation': _ForcePressGestureRecognizer_interpolation$,
        'debugDescription': _ForcePressGestureRecognizer_debugDescription$,
        'addAllowedPointer': _ForcePressGestureRecognizer_addAllowedPointer$,
        'handleEvent': _ForcePressGestureRecognizer_handleEvent$,
        'acceptGesture': _ForcePressGestureRecognizer_acceptGesture$,
        'didStopTrackingLastPointer':
            _ForcePressGestureRecognizer_didStopTrackingLastPointer$,
        'rejectGesture': _ForcePressGestureRecognizer_rejectGesture$,
      },
      {
        'onStart': _ForcePressGestureRecognizer_onStart_set$,
        'onUpdate': _ForcePressGestureRecognizer_onUpdate_set$,
        'onPeak': _ForcePressGestureRecognizer_onPeak_set$,
        'onEnd': _ForcePressGestureRecognizer_onEnd_set$,
      },
    ),
  },
);
Function ForcePressDetails_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ForcePressDetails;
Function ForcePressDetails_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ForcePressDetails;
Offset _ForcePressDetails_globalPosition$(ForcePressDetails target) {
  return target.globalPosition;
}

Offset _ForcePressDetails_localPosition$(ForcePressDetails target) {
  return target.localPosition;
}

double _ForcePressDetails_pressure$(ForcePressDetails target) {
  return target.pressure;
}

Function ForcePressGestureRecognizer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ForcePressGestureRecognizer;
Function ForcePressGestureRecognizer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ForcePressGestureRecognizer;
void Function(ForcePressDetails)? _ForcePressGestureRecognizer_onStart$(
    ForcePressGestureRecognizer target) {
  return target.onStart;
}

Function _ForcePressGestureRecognizer_onStart_set$(
  m.Scope scope,
  ForcePressGestureRecognizer target,
) =>
    (m.FunctionPointer? _onStart) {
      void _onStartProxy(ForcePressDetails _onStart_details) =>
          scope.engine.callFunctionPointer(
            scope,
            _onStart!,
            [_onStart_details],
            {},
          );
      target.onStart = (_onStart == null ? null : _onStartProxy);
    };
void Function(ForcePressDetails)? _ForcePressGestureRecognizer_onUpdate$(
    ForcePressGestureRecognizer target) {
  return target.onUpdate;
}

Function _ForcePressGestureRecognizer_onUpdate_set$(
  m.Scope scope,
  ForcePressGestureRecognizer target,
) =>
    (m.FunctionPointer? _onUpdate) {
      void _onUpdateProxy(ForcePressDetails _onUpdate_details) =>
          scope.engine.callFunctionPointer(
            scope,
            _onUpdate!,
            [_onUpdate_details],
            {},
          );
      target.onUpdate = (_onUpdate == null ? null : _onUpdateProxy);
    };
void Function(ForcePressDetails)? _ForcePressGestureRecognizer_onPeak$(
    ForcePressGestureRecognizer target) {
  return target.onPeak;
}

Function _ForcePressGestureRecognizer_onPeak_set$(
  m.Scope scope,
  ForcePressGestureRecognizer target,
) =>
    (m.FunctionPointer? _onPeak) {
      void _onPeakProxy(ForcePressDetails _onPeak_details) =>
          scope.engine.callFunctionPointer(
            scope,
            _onPeak!,
            [_onPeak_details],
            {},
          );
      target.onPeak = (_onPeak == null ? null : _onPeakProxy);
    };
void Function(ForcePressDetails)? _ForcePressGestureRecognizer_onEnd$(
    ForcePressGestureRecognizer target) {
  return target.onEnd;
}

Function _ForcePressGestureRecognizer_onEnd_set$(
  m.Scope scope,
  ForcePressGestureRecognizer target,
) =>
    (m.FunctionPointer? _onEnd) {
      void _onEndProxy(ForcePressDetails _onEnd_details) =>
          scope.engine.callFunctionPointer(
            scope,
            _onEnd!,
            [_onEnd_details],
            {},
          );
      target.onEnd = (_onEnd == null ? null : _onEndProxy);
    };
double _ForcePressGestureRecognizer_startPressure$(
    ForcePressGestureRecognizer target) {
  return target.startPressure;
}

double _ForcePressGestureRecognizer_peakPressure$(
    ForcePressGestureRecognizer target) {
  return target.peakPressure;
}

double Function(double, double, double)
    _ForcePressGestureRecognizer_interpolation$(
        ForcePressGestureRecognizer target) {
  return target.interpolation;
}

String _ForcePressGestureRecognizer_debugDescription$(
    ForcePressGestureRecognizer target) {
  return target.debugDescription;
}

Function _ForcePressGestureRecognizer_addAllowedPointer$(
  m.Scope scope,
  ForcePressGestureRecognizer target,
) =>
    target.addAllowedPointer;
Function _ForcePressGestureRecognizer_handleEvent$(
  m.Scope scope,
  ForcePressGestureRecognizer target,
) =>
    target.handleEvent;
Function _ForcePressGestureRecognizer_acceptGesture$(
  m.Scope scope,
  ForcePressGestureRecognizer target,
) =>
    target.acceptGesture;
Function _ForcePressGestureRecognizer_didStopTrackingLastPointer$(
  m.Scope scope,
  ForcePressGestureRecognizer target,
) =>
    target.didStopTrackingLastPointer;
Function _ForcePressGestureRecognizer_rejectGesture$(
  m.Scope scope,
  ForcePressGestureRecognizer target,
) =>
    target.rejectGesture;
