// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/radio.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/toggleable.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/radio.dart',
  {},
  {},
  {
    'CupertinoRadio': m.ClassMirror(
      'CupertinoRadio',
      {
        'value': _CupertinoRadio_value$,
        'groupValue': _CupertinoRadio_groupValue$,
        'onChanged': _CupertinoRadio_onChanged$,
        'toggleable': _CupertinoRadio_toggleable$,
        'activeColor': _CupertinoRadio_activeColor$,
        'inactiveColor': _CupertinoRadio_inactiveColor$,
        'fillColor': _CupertinoRadio_fillColor$,
        'focusColor': _CupertinoRadio_focusColor$,
        'focusNode': _CupertinoRadio_focusNode$,
        'autofocus': _CupertinoRadio_autofocus$,
        'createState': _CupertinoRadio_createState$,
      },
      {},
    )
  },
);
T _CupertinoRadio_value$<T>(CupertinoRadio<T> target) {
  return target.value;
}

T? _CupertinoRadio_groupValue$<T>(CupertinoRadio<T> target) {
  return target.groupValue;
}

void Function(T?)? _CupertinoRadio_onChanged$<T>(CupertinoRadio<T> target) {
  return target.onChanged;
}

bool _CupertinoRadio_toggleable$<T>(CupertinoRadio<T> target) {
  return target.toggleable;
}

Color? _CupertinoRadio_activeColor$<T>(CupertinoRadio<T> target) {
  return target.activeColor;
}

Color? _CupertinoRadio_inactiveColor$<T>(CupertinoRadio<T> target) {
  return target.inactiveColor;
}

Color? _CupertinoRadio_fillColor$<T>(CupertinoRadio<T> target) {
  return target.fillColor;
}

Color? _CupertinoRadio_focusColor$<T>(CupertinoRadio<T> target) {
  return target.focusColor;
}

FocusNode? _CupertinoRadio_focusNode$<T>(CupertinoRadio<T> target) {
  return target.focusNode;
}

bool _CupertinoRadio_autofocus$<T>(CupertinoRadio<T> target) {
  return target.autofocus;
}

Function _CupertinoRadio_createState$<T>(
  m.Scope scope,
  CupertinoRadio<T> target,
) =>
    target.createState;
