// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/placeholder_span.dart';
import 'dart:ui' show PlaceholderAlignment;
import 'package:flutter/foundation.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/painting/inline_span.dart';
import 'package:flutter/src/painting/text_painter.dart';
import 'package:flutter/src/painting/text_span.dart';
import 'package:flutter/src/painting/text_style.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/placeholder_span.dart',
  {
    'PlaceholderSpan.placeholderCodeUnit': _PlaceholderSpan_placeholderCodeUnit$
  },
  {},
  {
    'PlaceholderSpan': m.ClassMirror(
      'PlaceholderSpan',
      {
        '#as': PlaceholderSpan_as$,
        '#is': PlaceholderSpan_is$,
        'alignment': _PlaceholderSpan_alignment$,
        'baseline': _PlaceholderSpan_baseline$,
        'computeToPlainText': _PlaceholderSpan_computeToPlainText$,
        'computeSemanticsInformation':
            _PlaceholderSpan_computeSemanticsInformation$,
        'describeSemantics': _PlaceholderSpan_describeSemantics$,
        'debugFillProperties': _PlaceholderSpan_debugFillProperties$,
      },
      {},
    )
  },
);
Function PlaceholderSpan_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PlaceholderSpan;
Function PlaceholderSpan_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PlaceholderSpan;
int _PlaceholderSpan_placeholderCodeUnit$() {
  return PlaceholderSpan.placeholderCodeUnit;
}

Function _PlaceholderSpan_alignment$(
  m.Scope scope$,
  PlaceholderSpan target$,
) =>
    () {
      return target$.alignment;
    };
Function _PlaceholderSpan_baseline$(
  m.Scope scope$,
  PlaceholderSpan target$,
) =>
    () {
      return target$.baseline;
    };
Function _PlaceholderSpan_computeToPlainText$(
  m.Scope scope$,
  PlaceholderSpan target$,
) =>
    target$.computeToPlainText;
Function _PlaceholderSpan_computeSemanticsInformation$(
  m.Scope scope$,
  PlaceholderSpan target$,
) =>
    target$.computeSemanticsInformation;
Function _PlaceholderSpan_describeSemantics$(
  m.Scope scope$,
  PlaceholderSpan target$,
) =>
    target$.describeSemantics;
Function _PlaceholderSpan_debugFillProperties$(
  m.Scope scope$,
  PlaceholderSpan target$,
) =>
    target$.debugFillProperties;
