// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/refresh.dart';
import 'dart:math';
import 'package:flutter/foundation.dart' show clampDouble;
import 'package:flutter/rendering.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/activity_indicator.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/refresh.dart',
  {
    'CupertinoSliverRefreshControl.state':
        _CupertinoSliverRefreshControl_state$,
    'CupertinoSliverRefreshControl.buildRefreshIndicator':
        _CupertinoSliverRefreshControl_buildRefreshIndicator$,
    'RefreshIndicatorMode.inactive': _RefreshIndicatorMode_inactive$,
    'RefreshIndicatorMode.drag': _RefreshIndicatorMode_drag$,
    'RefreshIndicatorMode.armed': _RefreshIndicatorMode_armed$,
    'RefreshIndicatorMode.refresh': _RefreshIndicatorMode_refresh$,
    'RefreshIndicatorMode.done': _RefreshIndicatorMode_done$,
    'RefreshIndicatorMode.values': _RefreshIndicatorMode_values$,
  },
  {},
  {
    'CupertinoSliverRefreshControl': m.ClassMirror(
      'CupertinoSliverRefreshControl',
      {
        '#as': CupertinoSliverRefreshControl_as$,
        '#is': CupertinoSliverRefreshControl_is$,
        'refreshTriggerPullDistance':
            _CupertinoSliverRefreshControl_refreshTriggerPullDistance$,
        'refreshIndicatorExtent':
            _CupertinoSliverRefreshControl_refreshIndicatorExtent$,
        'builder': _CupertinoSliverRefreshControl_builder$,
        'onRefresh': _CupertinoSliverRefreshControl_onRefresh$,
        'createState': _CupertinoSliverRefreshControl_createState$,
      },
      {},
    ),
    'RefreshIndicatorMode': m.ClassMirror(
      'RefreshIndicatorMode',
      {},
      {},
    ),
  },
);
Function CupertinoSliverRefreshControl_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CupertinoSliverRefreshControl;
Function CupertinoSliverRefreshControl_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CupertinoSliverRefreshControl;
double _CupertinoSliverRefreshControl_refreshTriggerPullDistance$(
    CupertinoSliverRefreshControl target) {
  return target.refreshTriggerPullDistance;
}

double _CupertinoSliverRefreshControl_refreshIndicatorExtent$(
    CupertinoSliverRefreshControl target) {
  return target.refreshIndicatorExtent;
}

Widget Function(BuildContext, RefreshIndicatorMode, double, double, double)?
    _CupertinoSliverRefreshControl_builder$(
        CupertinoSliverRefreshControl target) {
  return target.builder;
}

Future<void> Function()? _CupertinoSliverRefreshControl_onRefresh$(
    CupertinoSliverRefreshControl target) {
  return target.onRefresh;
}

Function _CupertinoSliverRefreshControl_state$(m.Scope scope) =>
    CupertinoSliverRefreshControl.state;
Function _CupertinoSliverRefreshControl_buildRefreshIndicator$(m.Scope scope) =>
    CupertinoSliverRefreshControl.buildRefreshIndicator;
Function _CupertinoSliverRefreshControl_createState$(
  m.Scope scope,
  CupertinoSliverRefreshControl target,
) =>
    target.createState;
RefreshIndicatorMode _RefreshIndicatorMode_inactive$() {
  return RefreshIndicatorMode.inactive;
}

RefreshIndicatorMode _RefreshIndicatorMode_drag$() {
  return RefreshIndicatorMode.drag;
}

RefreshIndicatorMode _RefreshIndicatorMode_armed$() {
  return RefreshIndicatorMode.armed;
}

RefreshIndicatorMode _RefreshIndicatorMode_refresh$() {
  return RefreshIndicatorMode.refresh;
}

RefreshIndicatorMode _RefreshIndicatorMode_done$() {
  return RefreshIndicatorMode.done;
}

List<RefreshIndicatorMode> _RefreshIndicatorMode_values$() {
  return RefreshIndicatorMode.values;
}
