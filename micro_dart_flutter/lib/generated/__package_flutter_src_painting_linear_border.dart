// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/linear_border.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/painting/edge_insets.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/linear_border.dart',
  {
    'LinearBorderEdge.lerp': _LinearBorderEdge_lerp$,
    'LinearBorder.none': _LinearBorder_none$,
  },
  {},
  {
    'LinearBorderEdge': m.ClassMirror(
      'LinearBorderEdge',
      {
        'size': _LinearBorderEdge_size$,
        'alignment': _LinearBorderEdge_alignment$,
        'hashCode': _LinearBorderEdge_hashCode$,
        'toString': _LinearBorderEdge_toString$,
      },
      {},
    ),
    'LinearBorder': m.ClassMirror(
      'LinearBorder',
      {
        'start': _LinearBorder_start$,
        'end': _LinearBorder_end$,
        'top': _LinearBorder_top$,
        'bottom': _LinearBorder_bottom$,
        'dimensions': _LinearBorder_dimensions$,
        'hashCode': _LinearBorder_hashCode$,
        'scale': _LinearBorder_scale$,
        'lerpFrom': _LinearBorder_lerpFrom$,
        'lerpTo': _LinearBorder_lerpTo$,
        'copyWith': _LinearBorder_copyWith$,
        'getInnerPath': _LinearBorder_getInnerPath$,
        'getOuterPath': _LinearBorder_getOuterPath$,
        'paint': _LinearBorder_paint$,
        'toString': _LinearBorder_toString$,
      },
      {},
    ),
  },
);
double _LinearBorderEdge_size$(LinearBorderEdge target) {
  return target.size;
}

double _LinearBorderEdge_alignment$(LinearBorderEdge target) {
  return target.alignment;
}

int _LinearBorderEdge_hashCode$(LinearBorderEdge target) {
  return target.hashCode;
}

Function _LinearBorderEdge_lerp$(m.Scope scope) => LinearBorderEdge.lerp;
Function _LinearBorderEdge_toString$(
  m.Scope scope,
  LinearBorderEdge target,
) =>
    target.toString;
LinearBorder _LinearBorder_none$() {
  return LinearBorder.none;
}

LinearBorderEdge? _LinearBorder_start$(LinearBorder target) {
  return target.start;
}

LinearBorderEdge? _LinearBorder_end$(LinearBorder target) {
  return target.end;
}

LinearBorderEdge? _LinearBorder_top$(LinearBorder target) {
  return target.top;
}

LinearBorderEdge? _LinearBorder_bottom$(LinearBorder target) {
  return target.bottom;
}

EdgeInsetsGeometry _LinearBorder_dimensions$(LinearBorder target) {
  return target.dimensions;
}

int _LinearBorder_hashCode$(LinearBorder target) {
  return target.hashCode;
}

Function _LinearBorder_scale$(
  m.Scope scope,
  LinearBorder target,
) =>
    target.scale;
Function _LinearBorder_lerpFrom$(
  m.Scope scope,
  LinearBorder target,
) =>
    target.lerpFrom;
Function _LinearBorder_lerpTo$(
  m.Scope scope,
  LinearBorder target,
) =>
    target.lerpTo;
Function _LinearBorder_copyWith$(
  m.Scope scope,
  LinearBorder target,
) =>
    target.copyWith;
Function _LinearBorder_getInnerPath$(
  m.Scope scope,
  LinearBorder target,
) =>
    target.getInnerPath;
Function _LinearBorder_getOuterPath$(
  m.Scope scope,
  LinearBorder target,
) =>
    target.getOuterPath;
Function _LinearBorder_paint$(
  m.Scope scope,
  LinearBorder target,
) =>
    target.paint;
Function _LinearBorder_toString$(
  m.Scope scope,
  LinearBorder target,
) =>
    target.toString;
