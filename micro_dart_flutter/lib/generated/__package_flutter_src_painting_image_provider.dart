// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/image_provider.dart';
import 'dart:async';
import 'dart:io';
import 'dart:math';
import 'dart:ui';
import 'dart:ui' show Locale, Size, TextDirection;
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/painting/binding.dart';
import 'package:flutter/src/painting/image_cache.dart';
import 'package:flutter/src/painting/image_stream.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/image_provider.dart',
  {
    'ImageConfiguration.empty': _ImageConfiguration_empty$,
    'ResizeImage.resizeIfNeeded': _ResizeImage_resizeIfNeeded$,
    'ResizeImagePolicy.exact': _ResizeImagePolicy_exact$,
    'ResizeImagePolicy.fit': _ResizeImagePolicy_fit$,
    'ResizeImagePolicy.values': _ResizeImagePolicy_values$,
  },
  {},
  {
    'ImageConfiguration': m.ClassMirror(
      'ImageConfiguration',
      {
        'bundle': _ImageConfiguration_bundle$,
        'devicePixelRatio': _ImageConfiguration_devicePixelRatio$,
        'locale': _ImageConfiguration_locale$,
        'textDirection': _ImageConfiguration_textDirection$,
        'size': _ImageConfiguration_size$,
        'platform': _ImageConfiguration_platform$,
        'hashCode': _ImageConfiguration_hashCode$,
        'copyWith': _ImageConfiguration_copyWith$,
        'toString': _ImageConfiguration_toString$,
      },
      {},
    ),
    'ImageProvider': m.ClassMirror(
      'ImageProvider',
      {
        'resolve': _ImageProvider_resolve$,
        'createStream': _ImageProvider_createStream$,
        'evict': _ImageProvider_evict$,
        'obtainKey': _ImageProvider_obtainKey$,
        'toString': _ImageProvider_toString$,
      },
      {},
    ),
    'AssetBundleImageKey': m.ClassMirror(
      'AssetBundleImageKey',
      {
        'bundle': _AssetBundleImageKey_bundle$,
        'name': _AssetBundleImageKey_name$,
        'scale': _AssetBundleImageKey_scale$,
        'hashCode': _AssetBundleImageKey_hashCode$,
        'toString': _AssetBundleImageKey_toString$,
      },
      {},
    ),
    'AssetBundleImageProvider': m.ClassMirror(
      'AssetBundleImageProvider',
      {},
      {},
    ),
    'ResizeImageKey': m.ClassMirror(
      'ResizeImageKey',
      {'hashCode': _ResizeImageKey_hashCode$},
      {},
    ),
    'ResizeImage': m.ClassMirror(
      'ResizeImage',
      {
        'imageProvider': _ResizeImage_imageProvider$,
        'width': _ResizeImage_width$,
        'height': _ResizeImage_height$,
        'policy': _ResizeImage_policy$,
        'allowUpscaling': _ResizeImage_allowUpscaling$,
        'obtainKey': _ResizeImage_obtainKey$,
      },
      {},
    ),
    'NetworkImage': m.ClassMirror(
      'NetworkImage',
      {
        'url': _NetworkImage_url$,
        'scale': _NetworkImage_scale$,
        'headers': _NetworkImage_headers$,
      },
      {},
    ),
    'FileImage': m.ClassMirror(
      'FileImage',
      {
        'file': _FileImage_file$,
        'scale': _FileImage_scale$,
        'hashCode': _FileImage_hashCode$,
        'obtainKey': _FileImage_obtainKey$,
        'toString': _FileImage_toString$,
      },
      {},
    ),
    'MemoryImage': m.ClassMirror(
      'MemoryImage',
      {
        'bytes': _MemoryImage_bytes$,
        'scale': _MemoryImage_scale$,
        'hashCode': _MemoryImage_hashCode$,
        'obtainKey': _MemoryImage_obtainKey$,
        'toString': _MemoryImage_toString$,
      },
      {},
    ),
    'ExactAssetImage': m.ClassMirror(
      'ExactAssetImage',
      {
        'assetName': _ExactAssetImage_assetName$,
        'scale': _ExactAssetImage_scale$,
        'bundle': _ExactAssetImage_bundle$,
        'package': _ExactAssetImage_package$,
        'keyName': _ExactAssetImage_keyName$,
        'hashCode': _ExactAssetImage_hashCode$,
        'obtainKey': _ExactAssetImage_obtainKey$,
        'toString': _ExactAssetImage_toString$,
      },
      {},
    ),
    'NetworkImageLoadException': m.ClassMirror(
      'NetworkImageLoadException',
      {
        'statusCode': _NetworkImageLoadException_statusCode$,
        'uri': _NetworkImageLoadException_uri$,
        'toString': _NetworkImageLoadException_toString$,
      },
      {},
    ),
    'ResizeImagePolicy': m.ClassMirror(
      'ResizeImagePolicy',
      {},
      {},
    ),
  },
);
AssetBundle? _ImageConfiguration_bundle$(ImageConfiguration target) {
  return target.bundle;
}

double? _ImageConfiguration_devicePixelRatio$(ImageConfiguration target) {
  return target.devicePixelRatio;
}

Locale? _ImageConfiguration_locale$(ImageConfiguration target) {
  return target.locale;
}

TextDirection? _ImageConfiguration_textDirection$(ImageConfiguration target) {
  return target.textDirection;
}

Size? _ImageConfiguration_size$(ImageConfiguration target) {
  return target.size;
}

TargetPlatform? _ImageConfiguration_platform$(ImageConfiguration target) {
  return target.platform;
}

ImageConfiguration _ImageConfiguration_empty$() {
  return ImageConfiguration.empty;
}

int _ImageConfiguration_hashCode$(ImageConfiguration target) {
  return target.hashCode;
}

Function _ImageConfiguration_copyWith$(
  m.Scope scope,
  ImageConfiguration target,
) =>
    target.copyWith;
Function _ImageConfiguration_toString$(
  m.Scope scope,
  ImageConfiguration target,
) =>
    target.toString;
Function _ImageProvider_resolve$<T extends Object>(
  m.Scope scope,
  ImageProvider<T> target,
) =>
    target.resolve;
Function _ImageProvider_createStream$<T extends Object>(
  m.Scope scope,
  ImageProvider<T> target,
) =>
    target.createStream;
Function _ImageProvider_evict$<T extends Object>(
  m.Scope scope,
  ImageProvider<T> target,
) =>
    target.evict;
Function _ImageProvider_obtainKey$<T extends Object>(
  m.Scope scope,
  ImageProvider<T> target,
) =>
    target.obtainKey;
Function _ImageProvider_toString$<T extends Object>(
  m.Scope scope,
  ImageProvider<T> target,
) =>
    target.toString;
AssetBundle _AssetBundleImageKey_bundle$(AssetBundleImageKey target) {
  return target.bundle;
}

String _AssetBundleImageKey_name$(AssetBundleImageKey target) {
  return target.name;
}

double _AssetBundleImageKey_scale$(AssetBundleImageKey target) {
  return target.scale;
}

int _AssetBundleImageKey_hashCode$(AssetBundleImageKey target) {
  return target.hashCode;
}

Function _AssetBundleImageKey_toString$(
  m.Scope scope,
  AssetBundleImageKey target,
) =>
    target.toString;
int _ResizeImageKey_hashCode$(ResizeImageKey target) {
  return target.hashCode;
}

ImageProvider<Object> _ResizeImage_imageProvider$(ResizeImage target) {
  return target.imageProvider;
}

int? _ResizeImage_width$(ResizeImage target) {
  return target.width;
}

int? _ResizeImage_height$(ResizeImage target) {
  return target.height;
}

ResizeImagePolicy _ResizeImage_policy$(ResizeImage target) {
  return target.policy;
}

bool _ResizeImage_allowUpscaling$(ResizeImage target) {
  return target.allowUpscaling;
}

Function _ResizeImage_resizeIfNeeded$(m.Scope scope) =>
    ResizeImage.resizeIfNeeded;
Function _ResizeImage_obtainKey$(
  m.Scope scope,
  ResizeImage target,
) =>
    target.obtainKey;
String _NetworkImage_url$(NetworkImage target) {
  return target.url;
}

double _NetworkImage_scale$(NetworkImage target) {
  return target.scale;
}

Map<String, String>? _NetworkImage_headers$(NetworkImage target) {
  return target.headers;
}

File _FileImage_file$(FileImage target) {
  return target.file;
}

double _FileImage_scale$(FileImage target) {
  return target.scale;
}

int _FileImage_hashCode$(FileImage target) {
  return target.hashCode;
}

Function _FileImage_obtainKey$(
  m.Scope scope,
  FileImage target,
) =>
    target.obtainKey;
Function _FileImage_toString$(
  m.Scope scope,
  FileImage target,
) =>
    target.toString;
Uint8List _MemoryImage_bytes$(MemoryImage target) {
  return target.bytes;
}

double _MemoryImage_scale$(MemoryImage target) {
  return target.scale;
}

int _MemoryImage_hashCode$(MemoryImage target) {
  return target.hashCode;
}

Function _MemoryImage_obtainKey$(
  m.Scope scope,
  MemoryImage target,
) =>
    target.obtainKey;
Function _MemoryImage_toString$(
  m.Scope scope,
  MemoryImage target,
) =>
    target.toString;
String _ExactAssetImage_assetName$(ExactAssetImage target) {
  return target.assetName;
}

double _ExactAssetImage_scale$(ExactAssetImage target) {
  return target.scale;
}

AssetBundle? _ExactAssetImage_bundle$(ExactAssetImage target) {
  return target.bundle;
}

String? _ExactAssetImage_package$(ExactAssetImage target) {
  return target.package;
}

String _ExactAssetImage_keyName$(ExactAssetImage target) {
  return target.keyName;
}

int _ExactAssetImage_hashCode$(ExactAssetImage target) {
  return target.hashCode;
}

Function _ExactAssetImage_obtainKey$(
  m.Scope scope,
  ExactAssetImage target,
) =>
    target.obtainKey;
Function _ExactAssetImage_toString$(
  m.Scope scope,
  ExactAssetImage target,
) =>
    target.toString;
int _NetworkImageLoadException_statusCode$(NetworkImageLoadException target) {
  return target.statusCode;
}

Uri _NetworkImageLoadException_uri$(NetworkImageLoadException target) {
  return target.uri;
}

Function _NetworkImageLoadException_toString$(
  m.Scope scope,
  NetworkImageLoadException target,
) =>
    target.toString;
ResizeImagePolicy _ResizeImagePolicy_exact$() {
  return ResizeImagePolicy.exact;
}

ResizeImagePolicy _ResizeImagePolicy_fit$() {
  return ResizeImagePolicy.fit;
}

List<ResizeImagePolicy> _ResizeImagePolicy_values$() {
  return ResizeImagePolicy.values;
}
