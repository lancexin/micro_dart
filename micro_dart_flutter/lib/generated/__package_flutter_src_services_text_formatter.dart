// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/text_formatter.dart';
import 'dart:math';
import 'package:characters/characters.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/services/text_input.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/text_formatter.dart',
  {
    'TextInputFormatter.withFunction': _TextInputFormatter_withFunction$,
    'FilteringTextInputFormatter.singleLineFormatter':
        _FilteringTextInputFormatter_singleLineFormatter$,
    'FilteringTextInputFormatter.digitsOnly':
        _FilteringTextInputFormatter_digitsOnly$,
    'FilteringTextInputFormatter.': _FilteringTextInputFormatter__$,
    'FilteringTextInputFormatter.allow': _FilteringTextInputFormatter_allow_$,
    'FilteringTextInputFormatter.deny': _FilteringTextInputFormatter_deny_$,
    'LengthLimitingTextInputFormatter.': _LengthLimitingTextInputFormatter__$,
    'LengthLimitingTextInputFormatter.getDefaultMaxLengthEnforcement':
        _LengthLimitingTextInputFormatter_getDefaultMaxLengthEnforcement$,
    'LengthLimitingTextInputFormatter.truncate':
        _LengthLimitingTextInputFormatter_truncate$,
    'MaxLengthEnforcement.none': _MaxLengthEnforcement_none$,
    'MaxLengthEnforcement.enforced': _MaxLengthEnforcement_enforced$,
    'MaxLengthEnforcement.truncateAfterCompositionEnds':
        _MaxLengthEnforcement_truncateAfterCompositionEnds$,
    'MaxLengthEnforcement.values': _MaxLengthEnforcement_values$,
  },
  {},
  {
    'TextInputFormatter': m.ClassMirror(
      'TextInputFormatter',
      {
        '#as': TextInputFormatter_as$,
        '#is': TextInputFormatter_is$,
        'formatEditUpdate': _TextInputFormatter_formatEditUpdate$,
      },
      {},
    ),
    'FilteringTextInputFormatter': m.ClassMirror(
      'FilteringTextInputFormatter',
      {
        '#as': FilteringTextInputFormatter_as$,
        '#is': FilteringTextInputFormatter_is$,
        'filterPattern': _FilteringTextInputFormatter_filterPattern$,
        'allow': _FilteringTextInputFormatter_allow$,
        'replacementString': _FilteringTextInputFormatter_replacementString$,
        'formatEditUpdate': _FilteringTextInputFormatter_formatEditUpdate$,
      },
      {},
    ),
    'LengthLimitingTextInputFormatter': m.ClassMirror(
      'LengthLimitingTextInputFormatter',
      {
        '#as': LengthLimitingTextInputFormatter_as$,
        '#is': LengthLimitingTextInputFormatter_is$,
        'maxLength': _LengthLimitingTextInputFormatter_maxLength$,
        'maxLengthEnforcement':
            _LengthLimitingTextInputFormatter_maxLengthEnforcement$,
        'formatEditUpdate': _LengthLimitingTextInputFormatter_formatEditUpdate$,
      },
      {},
    ),
    'MaxLengthEnforcement': m.ClassMirror(
      'MaxLengthEnforcement',
      {},
      {},
    ),
  },
);
Function TextInputFormatter_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextInputFormatter;
Function TextInputFormatter_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextInputFormatter;
Function _TextInputFormatter_formatEditUpdate$(
  m.Scope scope$,
  TextInputFormatter target$,
) =>
    target$.formatEditUpdate;
Function _TextInputFormatter_withFunction$(m.Scope scope$) =>
    (m.FunctionPointer formatFunction) {
      TextEditingValue formatFunctionProxy(
        TextEditingValue formatFunction_oldValue$,
        TextEditingValue formatFunction_newValue$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            formatFunction,
            [
              formatFunction_oldValue$,
              formatFunction_newValue$,
            ],
            {},
          );
      return TextInputFormatter.withFunction(formatFunctionProxy);
    };
Function FilteringTextInputFormatter_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FilteringTextInputFormatter;
Function FilteringTextInputFormatter_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FilteringTextInputFormatter;
Function _FilteringTextInputFormatter_filterPattern$(
  m.Scope scope$,
  FilteringTextInputFormatter target$,
) =>
    () {
      return target$.filterPattern;
    };
Function _FilteringTextInputFormatter_allow$(
  m.Scope scope$,
  FilteringTextInputFormatter target$,
) =>
    () {
      return target$.allow;
    };
Function _FilteringTextInputFormatter_replacementString$(
  m.Scope scope$,
  FilteringTextInputFormatter target$,
) =>
    () {
      return target$.replacementString;
    };
TextInputFormatter _FilteringTextInputFormatter_singleLineFormatter$() {
  return FilteringTextInputFormatter.singleLineFormatter;
}

TextInputFormatter _FilteringTextInputFormatter_digitsOnly$() {
  return FilteringTextInputFormatter.digitsOnly;
}

Function _FilteringTextInputFormatter__$(m.Scope scope$) => (
      Pattern filterPattern, {
      required bool allow,
      String? replacementString,
    }) {
      return FilteringTextInputFormatter(
        filterPattern,
        allow: allow,
        replacementString: replacementString ?? '',
      );
    };
Function _FilteringTextInputFormatter_allow_$(m.Scope scope$) =>
    FilteringTextInputFormatter.allow;
Function _FilteringTextInputFormatter_deny_$(m.Scope scope$) =>
    FilteringTextInputFormatter.deny;
Function _FilteringTextInputFormatter_formatEditUpdate$(
  m.Scope scope$,
  FilteringTextInputFormatter target$,
) =>
    target$.formatEditUpdate;
Function LengthLimitingTextInputFormatter_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as LengthLimitingTextInputFormatter;
Function LengthLimitingTextInputFormatter_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is LengthLimitingTextInputFormatter;
Function _LengthLimitingTextInputFormatter_maxLength$(
  m.Scope scope$,
  LengthLimitingTextInputFormatter target$,
) =>
    () {
      return target$.maxLength;
    };
Function _LengthLimitingTextInputFormatter_maxLengthEnforcement$(
  m.Scope scope$,
  LengthLimitingTextInputFormatter target$,
) =>
    () {
      return target$.maxLengthEnforcement;
    };
Function _LengthLimitingTextInputFormatter__$(m.Scope scope$) => (
      int? maxLength, {
      MaxLengthEnforcement? maxLengthEnforcement,
    }) {
      return LengthLimitingTextInputFormatter(
        maxLength,
        maxLengthEnforcement: maxLengthEnforcement,
      );
    };
Function _LengthLimitingTextInputFormatter_getDefaultMaxLengthEnforcement$(
        m.Scope scope$) =>
    LengthLimitingTextInputFormatter.getDefaultMaxLengthEnforcement;
Function _LengthLimitingTextInputFormatter_truncate$(m.Scope scope$) =>
    LengthLimitingTextInputFormatter.truncate;
Function _LengthLimitingTextInputFormatter_formatEditUpdate$(
  m.Scope scope$,
  LengthLimitingTextInputFormatter target$,
) =>
    target$.formatEditUpdate;
MaxLengthEnforcement _MaxLengthEnforcement_none$() {
  return MaxLengthEnforcement.none;
}

MaxLengthEnforcement _MaxLengthEnforcement_enforced$() {
  return MaxLengthEnforcement.enforced;
}

MaxLengthEnforcement _MaxLengthEnforcement_truncateAfterCompositionEnds$() {
  return MaxLengthEnforcement.truncateAfterCompositionEnds;
}

List<MaxLengthEnforcement> _MaxLengthEnforcement_values$() {
  return MaxLengthEnforcement.values;
}
