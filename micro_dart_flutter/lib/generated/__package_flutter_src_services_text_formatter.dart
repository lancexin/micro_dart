// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/text_formatter.dart';
import 'dart:math';
import 'package:characters/characters.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/services/text_input.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/text_formatter.dart',
  {
    'FilteringTextInputFormatter.singleLineFormatter':
        _FilteringTextInputFormatter_singleLineFormatter$,
    'FilteringTextInputFormatter.digitsOnly':
        _FilteringTextInputFormatter_digitsOnly$,
    'LengthLimitingTextInputFormatter.getDefaultMaxLengthEnforcement':
        _LengthLimitingTextInputFormatter_getDefaultMaxLengthEnforcement$,
    'LengthLimitingTextInputFormatter.truncate':
        _LengthLimitingTextInputFormatter_truncate$,
    'MaxLengthEnforcement.none': _MaxLengthEnforcement_none$,
    'MaxLengthEnforcement.enforced': _MaxLengthEnforcement_enforced$,
    'MaxLengthEnforcement.truncateAfterCompositionEnds':
        _MaxLengthEnforcement_truncateAfterCompositionEnds$,
    'MaxLengthEnforcement.values': _MaxLengthEnforcement_values$,
  },
  {},
  {
    'TextInputFormatter': m.ClassMirror(
      'TextInputFormatter',
      {'formatEditUpdate': _TextInputFormatter_formatEditUpdate$},
      {},
    ),
    'FilteringTextInputFormatter': m.ClassMirror(
      'FilteringTextInputFormatter',
      {
        'filterPattern': _FilteringTextInputFormatter_filterPattern$,
        'allow': _FilteringTextInputFormatter_allow$,
        'replacementString': _FilteringTextInputFormatter_replacementString$,
        'formatEditUpdate': _FilteringTextInputFormatter_formatEditUpdate$,
      },
      {},
    ),
    'LengthLimitingTextInputFormatter': m.ClassMirror(
      'LengthLimitingTextInputFormatter',
      {
        'maxLength': _LengthLimitingTextInputFormatter_maxLength$,
        'maxLengthEnforcement':
            _LengthLimitingTextInputFormatter_maxLengthEnforcement$,
        'formatEditUpdate': _LengthLimitingTextInputFormatter_formatEditUpdate$,
      },
      {},
    ),
    'MaxLengthEnforcement': m.ClassMirror(
      'MaxLengthEnforcement',
      {},
      {},
    ),
  },
);
Function _TextInputFormatter_formatEditUpdate$(
  m.Scope scope,
  TextInputFormatter target,
) =>
    target.formatEditUpdate;
Pattern _FilteringTextInputFormatter_filterPattern$(
    FilteringTextInputFormatter target) {
  return target.filterPattern;
}

bool _FilteringTextInputFormatter_allow$(FilteringTextInputFormatter target) {
  return target.allow;
}

String _FilteringTextInputFormatter_replacementString$(
    FilteringTextInputFormatter target) {
  return target.replacementString;
}

TextInputFormatter _FilteringTextInputFormatter_singleLineFormatter$() {
  return FilteringTextInputFormatter.singleLineFormatter;
}

TextInputFormatter _FilteringTextInputFormatter_digitsOnly$() {
  return FilteringTextInputFormatter.digitsOnly;
}

Function _FilteringTextInputFormatter_formatEditUpdate$(
  m.Scope scope,
  FilteringTextInputFormatter target,
) =>
    target.formatEditUpdate;
int? _LengthLimitingTextInputFormatter_maxLength$(
    LengthLimitingTextInputFormatter target) {
  return target.maxLength;
}

MaxLengthEnforcement? _LengthLimitingTextInputFormatter_maxLengthEnforcement$(
    LengthLimitingTextInputFormatter target) {
  return target.maxLengthEnforcement;
}

Function _LengthLimitingTextInputFormatter_getDefaultMaxLengthEnforcement$(
        m.Scope scope) =>
    LengthLimitingTextInputFormatter.getDefaultMaxLengthEnforcement;
Function _LengthLimitingTextInputFormatter_truncate$(m.Scope scope) =>
    LengthLimitingTextInputFormatter.truncate;
Function _LengthLimitingTextInputFormatter_formatEditUpdate$(
  m.Scope scope,
  LengthLimitingTextInputFormatter target,
) =>
    target.formatEditUpdate;
MaxLengthEnforcement _MaxLengthEnforcement_none$() {
  return MaxLengthEnforcement.none;
}

MaxLengthEnforcement _MaxLengthEnforcement_enforced$() {
  return MaxLengthEnforcement.enforced;
}

MaxLengthEnforcement _MaxLengthEnforcement_truncateAfterCompositionEnds$() {
  return MaxLengthEnforcement.truncateAfterCompositionEnds;
}

List<MaxLengthEnforcement> _MaxLengthEnforcement_values$() {
  return MaxLengthEnforcement.values;
}
