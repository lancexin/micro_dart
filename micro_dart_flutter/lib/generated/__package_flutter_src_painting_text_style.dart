// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/text_style.dart';
import 'dart:ui'
    show
        FontFeature,
        FontVariation,
        ParagraphStyle,
        Shadow,
        StrutStyle,
        TextHeightBehavior,
        TextLeadingDistribution,
        TextStyle,
        lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/painting/colors.dart';
import 'package:flutter/src/painting/strut_style.dart';
import 'package:flutter/src/painting/text_painter.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/text_style.dart',
  {'TextStyle.lerp': _TextStyle_lerp$},
  {},
  {
    'TextStyle': m.ClassMirror(
      'TextStyle',
      {
        'inherit': _TextStyle_inherit$,
        'color': _TextStyle_color$,
        'backgroundColor': _TextStyle_backgroundColor$,
        'fontFamily': _TextStyle_fontFamily$,
        'fontSize': _TextStyle_fontSize$,
        'fontWeight': _TextStyle_fontWeight$,
        'fontStyle': _TextStyle_fontStyle$,
        'letterSpacing': _TextStyle_letterSpacing$,
        'wordSpacing': _TextStyle_wordSpacing$,
        'textBaseline': _TextStyle_textBaseline$,
        'height': _TextStyle_height$,
        'leadingDistribution': _TextStyle_leadingDistribution$,
        'locale': _TextStyle_locale$,
        'foreground': _TextStyle_foreground$,
        'background': _TextStyle_background$,
        'decoration': _TextStyle_decoration$,
        'decorationColor': _TextStyle_decorationColor$,
        'decorationStyle': _TextStyle_decorationStyle$,
        'decorationThickness': _TextStyle_decorationThickness$,
        'debugLabel': _TextStyle_debugLabel$,
        'shadows': _TextStyle_shadows$,
        'fontFeatures': _TextStyle_fontFeatures$,
        'fontVariations': _TextStyle_fontVariations$,
        'overflow': _TextStyle_overflow$,
        'fontFamilyFallback': _TextStyle_fontFamilyFallback$,
        'hashCode': _TextStyle_hashCode$,
        'copyWith': _TextStyle_copyWith$,
        'apply': _TextStyle_apply$,
        'merge': _TextStyle_merge$,
        'getTextStyle': _TextStyle_getTextStyle$,
        'getParagraphStyle': _TextStyle_getParagraphStyle$,
        'compareTo': _TextStyle_compareTo$,
        'toStringShort': _TextStyle_toStringShort$,
        'debugFillProperties': _TextStyle_debugFillProperties$,
      },
      {},
    )
  },
);
bool _TextStyle_inherit$(TextStyle target) {
  return target.inherit;
}

Color? _TextStyle_color$(TextStyle target) {
  return target.color;
}

Color? _TextStyle_backgroundColor$(TextStyle target) {
  return target.backgroundColor;
}

String? _TextStyle_fontFamily$(TextStyle target) {
  return target.fontFamily;
}

double? _TextStyle_fontSize$(TextStyle target) {
  return target.fontSize;
}

FontWeight? _TextStyle_fontWeight$(TextStyle target) {
  return target.fontWeight;
}

FontStyle? _TextStyle_fontStyle$(TextStyle target) {
  return target.fontStyle;
}

double? _TextStyle_letterSpacing$(TextStyle target) {
  return target.letterSpacing;
}

double? _TextStyle_wordSpacing$(TextStyle target) {
  return target.wordSpacing;
}

TextBaseline? _TextStyle_textBaseline$(TextStyle target) {
  return target.textBaseline;
}

double? _TextStyle_height$(TextStyle target) {
  return target.height;
}

TextLeadingDistribution? _TextStyle_leadingDistribution$(TextStyle target) {
  return target.leadingDistribution;
}

Locale? _TextStyle_locale$(TextStyle target) {
  return target.locale;
}

Paint? _TextStyle_foreground$(TextStyle target) {
  return target.foreground;
}

Paint? _TextStyle_background$(TextStyle target) {
  return target.background;
}

TextDecoration? _TextStyle_decoration$(TextStyle target) {
  return target.decoration;
}

Color? _TextStyle_decorationColor$(TextStyle target) {
  return target.decorationColor;
}

TextDecorationStyle? _TextStyle_decorationStyle$(TextStyle target) {
  return target.decorationStyle;
}

double? _TextStyle_decorationThickness$(TextStyle target) {
  return target.decorationThickness;
}

String? _TextStyle_debugLabel$(TextStyle target) {
  return target.debugLabel;
}

List<Shadow>? _TextStyle_shadows$(TextStyle target) {
  return target.shadows;
}

List<FontFeature>? _TextStyle_fontFeatures$(TextStyle target) {
  return target.fontFeatures;
}

List<FontVariation>? _TextStyle_fontVariations$(TextStyle target) {
  return target.fontVariations;
}

TextOverflow? _TextStyle_overflow$(TextStyle target) {
  return target.overflow;
}

List<String>? _TextStyle_fontFamilyFallback$(TextStyle target) {
  return target.fontFamilyFallback;
}

int _TextStyle_hashCode$(TextStyle target) {
  return target.hashCode;
}

Function _TextStyle_copyWith$(
  m.Scope scope,
  TextStyle target,
) =>
    target.copyWith;
Function _TextStyle_apply$(
  m.Scope scope,
  TextStyle target,
) =>
    target.apply;
Function _TextStyle_merge$(
  m.Scope scope,
  TextStyle target,
) =>
    target.merge;
Function _TextStyle_lerp$(m.Scope scope) => TextStyle.lerp;
Function _TextStyle_getTextStyle$(
  m.Scope scope,
  TextStyle target,
) =>
    target.getTextStyle;
Function _TextStyle_getParagraphStyle$(
  m.Scope scope,
  TextStyle target,
) =>
    target.getParagraphStyle;
Function _TextStyle_compareTo$(
  m.Scope scope,
  TextStyle target,
) =>
    target.compareTo;
Function _TextStyle_toStringShort$(
  m.Scope scope,
  TextStyle target,
) =>
    target.toStringShort;
Function _TextStyle_debugFillProperties$(
  m.Scope scope,
  TextStyle target,
) =>
    target.debugFillProperties;
