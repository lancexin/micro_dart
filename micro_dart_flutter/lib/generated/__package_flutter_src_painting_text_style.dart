// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/text_style.dart';
import 'dart:ui'
    show
        FontFeature,
        FontVariation,
        ParagraphStyle,
        Shadow,
        StrutStyle,
        TextHeightBehavior,
        TextLeadingDistribution,
        TextStyle,
        lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/painting/colors.dart';
import 'package:flutter/src/painting/strut_style.dart';
import 'package:flutter/src/painting/text_painter.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/text_style.dart',
  {
    'TextStyle.': _TextStyle__$,
    'TextStyle.lerp': _TextStyle_lerp$,
  },
  {},
  {
    'TextStyle': m.ClassMirror(
      'TextStyle',
      {
        '#as': TextStyle_as$,
        '#is': TextStyle_is$,
        'inherit': _TextStyle_inherit$,
        'color': _TextStyle_color$,
        'backgroundColor': _TextStyle_backgroundColor$,
        'fontFamily': _TextStyle_fontFamily$,
        'fontSize': _TextStyle_fontSize$,
        'fontWeight': _TextStyle_fontWeight$,
        'fontStyle': _TextStyle_fontStyle$,
        'letterSpacing': _TextStyle_letterSpacing$,
        'wordSpacing': _TextStyle_wordSpacing$,
        'textBaseline': _TextStyle_textBaseline$,
        'height': _TextStyle_height$,
        'leadingDistribution': _TextStyle_leadingDistribution$,
        'locale': _TextStyle_locale$,
        'foreground': _TextStyle_foreground$,
        'background': _TextStyle_background$,
        'decoration': _TextStyle_decoration$,
        'decorationColor': _TextStyle_decorationColor$,
        'decorationStyle': _TextStyle_decorationStyle$,
        'decorationThickness': _TextStyle_decorationThickness$,
        'debugLabel': _TextStyle_debugLabel$,
        'shadows': _TextStyle_shadows$,
        'fontFeatures': _TextStyle_fontFeatures$,
        'fontVariations': _TextStyle_fontVariations$,
        'overflow': _TextStyle_overflow$,
        'fontFamilyFallback': _TextStyle_fontFamilyFallback$,
        'hashCode': _TextStyle_hashCode$,
        'copyWith': _TextStyle_copyWith$,
        'apply': _TextStyle_apply$,
        'merge': _TextStyle_merge$,
        'getTextStyle': _TextStyle_getTextStyle$,
        'getParagraphStyle': _TextStyle_getParagraphStyle$,
        'compareTo': _TextStyle_compareTo$,
        '==': _TextStyle_eq$$,
        'toStringShort': _TextStyle_toStringShort$,
        'debugFillProperties': _TextStyle_debugFillProperties$,
      },
      {},
    )
  },
);
Function TextStyle_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextStyle;
Function TextStyle_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextStyle;
Function _TextStyle_inherit$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.inherit;
    };
Function _TextStyle_color$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.color;
    };
Function _TextStyle_backgroundColor$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _TextStyle_fontFamily$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.fontFamily;
    };
Function _TextStyle_fontSize$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.fontSize;
    };
Function _TextStyle_fontWeight$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.fontWeight;
    };
Function _TextStyle_fontStyle$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.fontStyle;
    };
Function _TextStyle_letterSpacing$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.letterSpacing;
    };
Function _TextStyle_wordSpacing$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.wordSpacing;
    };
Function _TextStyle_textBaseline$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.textBaseline;
    };
Function _TextStyle_height$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.height;
    };
Function _TextStyle_leadingDistribution$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.leadingDistribution;
    };
Function _TextStyle_locale$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.locale;
    };
Function _TextStyle_foreground$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.foreground;
    };
Function _TextStyle_background$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.background;
    };
Function _TextStyle_decoration$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.decoration;
    };
Function _TextStyle_decorationColor$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.decorationColor;
    };
Function _TextStyle_decorationStyle$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.decorationStyle;
    };
Function _TextStyle_decorationThickness$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.decorationThickness;
    };
Function _TextStyle_debugLabel$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.debugLabel;
    };
Function _TextStyle_shadows$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.shadows;
    };
Function _TextStyle_fontFeatures$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.fontFeatures;
    };
Function _TextStyle_fontVariations$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.fontVariations;
    };
Function _TextStyle_overflow$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.overflow;
    };
Function _TextStyle_fontFamilyFallback$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.fontFamilyFallback;
    };
Function _TextStyle_hashCode$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.hashCode;
    };
Function _TextStyle__$(m.Scope scope$) => ({
      bool? inherit,
      Color? color,
      Color? backgroundColor,
      double? fontSize,
      FontWeight? fontWeight,
      FontStyle? fontStyle,
      double? letterSpacing,
      double? wordSpacing,
      TextBaseline? textBaseline,
      double? height,
      TextLeadingDistribution? leadingDistribution,
      Locale? locale,
      Paint? foreground,
      Paint? background,
      List? shadows,
      List? fontFeatures,
      List? fontVariations,
      TextDecoration? decoration,
      Color? decorationColor,
      TextDecorationStyle? decorationStyle,
      double? decorationThickness,
      String? debugLabel,
      String? fontFamily,
      List? fontFamilyFallback,
      String? package,
      TextOverflow? overflow,
    }) {
      return TextStyle(
        background: background,
        backgroundColor: backgroundColor,
        color: color,
        debugLabel: debugLabel,
        decoration: decoration,
        decorationColor: decorationColor,
        decorationStyle: decorationStyle,
        decorationThickness: decorationThickness,
        fontFamily: fontFamily,
        fontFamilyFallback:
            fontFamilyFallback == null ? null : List.from(fontFamilyFallback),
        fontFeatures: fontFeatures == null ? null : List.from(fontFeatures),
        fontSize: fontSize,
        fontStyle: fontStyle,
        fontVariations:
            fontVariations == null ? null : List.from(fontVariations),
        fontWeight: fontWeight,
        foreground: foreground,
        height: height,
        inherit: inherit ?? true,
        leadingDistribution: leadingDistribution,
        letterSpacing: letterSpacing,
        locale: locale,
        overflow: overflow,
        package: package,
        shadows: shadows == null ? null : List.from(shadows),
        textBaseline: textBaseline,
        wordSpacing: wordSpacing,
      );
    };
Function _TextStyle_copyWith$(
  m.Scope scope$,
  TextStyle target$,
) =>
    target$.copyWith;
Function _TextStyle_apply$(
  m.Scope scope$,
  TextStyle target$,
) =>
    target$.apply;
Function _TextStyle_merge$(
  m.Scope scope$,
  TextStyle target$,
) =>
    target$.merge;
Function _TextStyle_lerp$(m.Scope scope$) => TextStyle.lerp;
Function _TextStyle_getTextStyle$(
  m.Scope scope$,
  TextStyle target$,
) =>
    target$.getTextStyle;
Function _TextStyle_getParagraphStyle$(
  m.Scope scope$,
  TextStyle target$,
) =>
    target$.getParagraphStyle;
Function _TextStyle_compareTo$(
  m.Scope scope$,
  TextStyle target$,
) =>
    target$.compareTo;
Function _TextStyle_eq$$(
  m.Scope scope$,
  TextStyle target$,
) =>
    (Object other$) => target$ == other$;
Function _TextStyle_toStringShort$(
  m.Scope scope$,
  TextStyle target$,
) =>
    target$.toStringShort;
Function _TextStyle_debugFillProperties$(
  m.Scope scope$,
  TextStyle target$,
) =>
    target$.debugFillProperties;
