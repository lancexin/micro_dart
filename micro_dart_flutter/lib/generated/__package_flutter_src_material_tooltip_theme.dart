// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/tooltip_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/tooltip_theme.dart',
  {
    'TooltipThemeData.': _TooltipThemeData__$,
    'TooltipThemeData.lerp': _TooltipThemeData_lerp$,
    'TooltipTheme.': _TooltipTheme__$,
    'TooltipTheme.of': _TooltipTheme_of$,
    'TooltipTriggerMode.manual': _TooltipTriggerMode_manual$,
    'TooltipTriggerMode.longPress': _TooltipTriggerMode_longPress$,
    'TooltipTriggerMode.tap': _TooltipTriggerMode_tap$,
    'TooltipTriggerMode.values': _TooltipTriggerMode_values$,
  },
  {},
  {
    'TooltipThemeData': m.ClassMirror(
      'TooltipThemeData',
      {
        '#as': TooltipThemeData_as$,
        '#is': TooltipThemeData_is$,
        'height': _TooltipThemeData_height$,
        'padding': _TooltipThemeData_padding$,
        'margin': _TooltipThemeData_margin$,
        'verticalOffset': _TooltipThemeData_verticalOffset$,
        'preferBelow': _TooltipThemeData_preferBelow$,
        'excludeFromSemantics': _TooltipThemeData_excludeFromSemantics$,
        'decoration': _TooltipThemeData_decoration$,
        'textStyle': _TooltipThemeData_textStyle$,
        'textAlign': _TooltipThemeData_textAlign$,
        'waitDuration': _TooltipThemeData_waitDuration$,
        'showDuration': _TooltipThemeData_showDuration$,
        'triggerMode': _TooltipThemeData_triggerMode$,
        'enableFeedback': _TooltipThemeData_enableFeedback$,
        'hashCode': _TooltipThemeData_hashCode$,
        'copyWith': _TooltipThemeData_copyWith$,
        '==': _TooltipThemeData_eq$$,
        'debugFillProperties': _TooltipThemeData_debugFillProperties$,
      },
      {},
    ),
    'TooltipTheme': m.ClassMirror(
      'TooltipTheme',
      {
        '#as': TooltipTheme_as$,
        '#is': TooltipTheme_is$,
        'data': _TooltipTheme_data$,
        'wrap': _TooltipTheme_wrap$,
        'updateShouldNotify': _TooltipTheme_updateShouldNotify$,
      },
      {},
    ),
    'TooltipTriggerMode': m.ClassMirror(
      'TooltipTriggerMode',
      {},
      {},
    ),
  },
);
Function TooltipThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TooltipThemeData;
Function TooltipThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TooltipThemeData;
Function _TooltipThemeData_height$(
  m.Scope scope$,
  TooltipThemeData target$,
) =>
    () {
      return target$.height;
    };
Function _TooltipThemeData_padding$(
  m.Scope scope$,
  TooltipThemeData target$,
) =>
    () {
      return target$.padding;
    };
Function _TooltipThemeData_margin$(
  m.Scope scope$,
  TooltipThemeData target$,
) =>
    () {
      return target$.margin;
    };
Function _TooltipThemeData_verticalOffset$(
  m.Scope scope$,
  TooltipThemeData target$,
) =>
    () {
      return target$.verticalOffset;
    };
Function _TooltipThemeData_preferBelow$(
  m.Scope scope$,
  TooltipThemeData target$,
) =>
    () {
      return target$.preferBelow;
    };
Function _TooltipThemeData_excludeFromSemantics$(
  m.Scope scope$,
  TooltipThemeData target$,
) =>
    () {
      return target$.excludeFromSemantics;
    };
Function _TooltipThemeData_decoration$(
  m.Scope scope$,
  TooltipThemeData target$,
) =>
    () {
      return target$.decoration;
    };
Function _TooltipThemeData_textStyle$(
  m.Scope scope$,
  TooltipThemeData target$,
) =>
    () {
      return target$.textStyle;
    };
Function _TooltipThemeData_textAlign$(
  m.Scope scope$,
  TooltipThemeData target$,
) =>
    () {
      return target$.textAlign;
    };
Function _TooltipThemeData_waitDuration$(
  m.Scope scope$,
  TooltipThemeData target$,
) =>
    () {
      return target$.waitDuration;
    };
Function _TooltipThemeData_showDuration$(
  m.Scope scope$,
  TooltipThemeData target$,
) =>
    () {
      return target$.showDuration;
    };
Function _TooltipThemeData_triggerMode$(
  m.Scope scope$,
  TooltipThemeData target$,
) =>
    () {
      return target$.triggerMode;
    };
Function _TooltipThemeData_enableFeedback$(
  m.Scope scope$,
  TooltipThemeData target$,
) =>
    () {
      return target$.enableFeedback;
    };
Function _TooltipThemeData_hashCode$(
  m.Scope scope$,
  TooltipThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _TooltipThemeData__$(m.Scope scope$) => ({
      double? height,
      EdgeInsetsGeometry? padding,
      EdgeInsetsGeometry? margin,
      double? verticalOffset,
      bool? preferBelow,
      bool? excludeFromSemantics,
      Decoration? decoration,
      TextStyle? textStyle,
      TextAlign? textAlign,
      Duration? waitDuration,
      Duration? showDuration,
      TooltipTriggerMode? triggerMode,
      bool? enableFeedback,
    }) {
      return TooltipThemeData(
        decoration: decoration,
        enableFeedback: enableFeedback,
        excludeFromSemantics: excludeFromSemantics,
        height: height,
        margin: margin,
        padding: padding,
        preferBelow: preferBelow,
        showDuration: showDuration,
        textAlign: textAlign,
        textStyle: textStyle,
        triggerMode: triggerMode,
        verticalOffset: verticalOffset,
        waitDuration: waitDuration,
      );
    };
Function _TooltipThemeData_copyWith$(
  m.Scope scope$,
  TooltipThemeData target$,
) =>
    target$.copyWith;
Function _TooltipThemeData_lerp$(m.Scope scope$) => TooltipThemeData.lerp;
Function _TooltipThemeData_eq$$(
  m.Scope scope$,
  TooltipThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _TooltipThemeData_debugFillProperties$(
  m.Scope scope$,
  TooltipThemeData target$,
) =>
    target$.debugFillProperties;
Function TooltipTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TooltipTheme;
Function TooltipTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TooltipTheme;
Function _TooltipTheme_data$(
  m.Scope scope$,
  TooltipTheme target$,
) =>
    () {
      return target$.data;
    };
Function _TooltipTheme__$(m.Scope scope$) => ({
      Key? key,
      required TooltipThemeData data,
      required Widget child,
    }) {
      return TooltipTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _TooltipTheme_of$(m.Scope scope$) => TooltipTheme.of;
Function _TooltipTheme_wrap$(
  m.Scope scope$,
  TooltipTheme target$,
) =>
    target$.wrap;
Function _TooltipTheme_updateShouldNotify$(
  m.Scope scope$,
  TooltipTheme target$,
) =>
    target$.updateShouldNotify;
Function _TooltipTriggerMode_manual$(m.Scope scope$) =>
    () => TooltipTriggerMode.manual;
Function _TooltipTriggerMode_longPress$(m.Scope scope$) =>
    () => TooltipTriggerMode.longPress;
Function _TooltipTriggerMode_tap$(m.Scope scope$) =>
    () => TooltipTriggerMode.tap;
Function _TooltipTriggerMode_values$(m.Scope scope$) =>
    () => TooltipTriggerMode.values;
