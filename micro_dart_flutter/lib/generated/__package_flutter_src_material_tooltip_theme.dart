// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/tooltip_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/tooltip_theme.dart',
  {
    'TooltipThemeData.lerp': _TooltipThemeData_lerp$,
    'TooltipTheme.of': _TooltipTheme_of$,
    'TooltipTriggerMode.manual': _TooltipTriggerMode_manual$,
    'TooltipTriggerMode.longPress': _TooltipTriggerMode_longPress$,
    'TooltipTriggerMode.tap': _TooltipTriggerMode_tap$,
    'TooltipTriggerMode.values': _TooltipTriggerMode_values$,
  },
  {},
  {
    'TooltipThemeData': m.ClassMirror(
      'TooltipThemeData',
      {
        '#as': TooltipThemeData_as$,
        '#is': TooltipThemeData_is$,
        'height': _TooltipThemeData_height$,
        'padding': _TooltipThemeData_padding$,
        'margin': _TooltipThemeData_margin$,
        'verticalOffset': _TooltipThemeData_verticalOffset$,
        'preferBelow': _TooltipThemeData_preferBelow$,
        'excludeFromSemantics': _TooltipThemeData_excludeFromSemantics$,
        'decoration': _TooltipThemeData_decoration$,
        'textStyle': _TooltipThemeData_textStyle$,
        'textAlign': _TooltipThemeData_textAlign$,
        'waitDuration': _TooltipThemeData_waitDuration$,
        'showDuration': _TooltipThemeData_showDuration$,
        'triggerMode': _TooltipThemeData_triggerMode$,
        'enableFeedback': _TooltipThemeData_enableFeedback$,
        'hashCode': _TooltipThemeData_hashCode$,
        'copyWith': _TooltipThemeData_copyWith$,
        '==': _TooltipThemeData_eq$$,
        'debugFillProperties': _TooltipThemeData_debugFillProperties$,
      },
      {},
    ),
    'TooltipTheme': m.ClassMirror(
      'TooltipTheme',
      {
        '#as': TooltipTheme_as$,
        '#is': TooltipTheme_is$,
        'data': _TooltipTheme_data$,
        'wrap': _TooltipTheme_wrap$,
        'updateShouldNotify': _TooltipTheme_updateShouldNotify$,
      },
      {},
    ),
    'TooltipTriggerMode': m.ClassMirror(
      'TooltipTriggerMode',
      {},
      {},
    ),
  },
);
Function TooltipThemeData_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as TooltipThemeData;
Function TooltipThemeData_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is TooltipThemeData;
double? _TooltipThemeData_height$(TooltipThemeData target) {
  return target.height;
}

EdgeInsetsGeometry? _TooltipThemeData_padding$(TooltipThemeData target) {
  return target.padding;
}

EdgeInsetsGeometry? _TooltipThemeData_margin$(TooltipThemeData target) {
  return target.margin;
}

double? _TooltipThemeData_verticalOffset$(TooltipThemeData target) {
  return target.verticalOffset;
}

bool? _TooltipThemeData_preferBelow$(TooltipThemeData target) {
  return target.preferBelow;
}

bool? _TooltipThemeData_excludeFromSemantics$(TooltipThemeData target) {
  return target.excludeFromSemantics;
}

Decoration? _TooltipThemeData_decoration$(TooltipThemeData target) {
  return target.decoration;
}

TextStyle? _TooltipThemeData_textStyle$(TooltipThemeData target) {
  return target.textStyle;
}

TextAlign? _TooltipThemeData_textAlign$(TooltipThemeData target) {
  return target.textAlign;
}

Duration? _TooltipThemeData_waitDuration$(TooltipThemeData target) {
  return target.waitDuration;
}

Duration? _TooltipThemeData_showDuration$(TooltipThemeData target) {
  return target.showDuration;
}

TooltipTriggerMode? _TooltipThemeData_triggerMode$(TooltipThemeData target) {
  return target.triggerMode;
}

bool? _TooltipThemeData_enableFeedback$(TooltipThemeData target) {
  return target.enableFeedback;
}

int _TooltipThemeData_hashCode$(TooltipThemeData target) {
  return target.hashCode;
}

Function _TooltipThemeData_copyWith$(
  m.Scope scope,
  TooltipThemeData target,
) =>
    target.copyWith;
Function _TooltipThemeData_lerp$(m.Scope scope) => TooltipThemeData.lerp;
Function _TooltipThemeData_eq$$(
  m.Scope scope,
  TooltipThemeData target,
) =>
    (Object other) => target == other;
Function _TooltipThemeData_debugFillProperties$(
  m.Scope scope,
  TooltipThemeData target,
) =>
    target.debugFillProperties;
Function TooltipTheme_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as TooltipTheme;
Function TooltipTheme_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is TooltipTheme;
TooltipThemeData _TooltipTheme_data$(TooltipTheme target) {
  return target.data;
}

Function _TooltipTheme_of$(m.Scope scope) => TooltipTheme.of;
Function _TooltipTheme_wrap$(
  m.Scope scope,
  TooltipTheme target,
) =>
    target.wrap;
Function _TooltipTheme_updateShouldNotify$(
  m.Scope scope,
  TooltipTheme target,
) =>
    target.updateShouldNotify;
TooltipTriggerMode _TooltipTriggerMode_manual$() {
  return TooltipTriggerMode.manual;
}

TooltipTriggerMode _TooltipTriggerMode_longPress$() {
  return TooltipTriggerMode.longPress;
}

TooltipTriggerMode _TooltipTriggerMode_tap$() {
  return TooltipTriggerMode.tap;
}

List<TooltipTriggerMode> _TooltipTriggerMode_values$() {
  return TooltipTriggerMode.values;
}
