// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/gestures/scale.dart';
import 'dart:math';
import 'package:flutter/src/gestures/constants.dart';
import 'package:flutter/src/gestures/events.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/src/gestures/velocity_tracker.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/gestures/scale.dart',
  {
    'kDefaultMouseScrollToScaleFactor': _kDefaultMouseScrollToScaleFactor$,
    'kDefaultTrackpadScrollToScaleFactor':
        _kDefaultTrackpadScrollToScaleFactor$,
  },
  {},
  {
    'ScaleStartDetails': m.ClassMirror(
      'ScaleStartDetails',
      {
        '#as': ScaleStartDetails_as$,
        '#is': ScaleStartDetails_is$,
        'focalPoint': _ScaleStartDetails_focalPoint$,
        'localFocalPoint': _ScaleStartDetails_localFocalPoint$,
        'pointerCount': _ScaleStartDetails_pointerCount$,
        'toString': _ScaleStartDetails_toString$,
      },
      {},
    ),
    'ScaleUpdateDetails': m.ClassMirror(
      'ScaleUpdateDetails',
      {
        '#as': ScaleUpdateDetails_as$,
        '#is': ScaleUpdateDetails_is$,
        'focalPointDelta': _ScaleUpdateDetails_focalPointDelta$,
        'focalPoint': _ScaleUpdateDetails_focalPoint$,
        'localFocalPoint': _ScaleUpdateDetails_localFocalPoint$,
        'scale': _ScaleUpdateDetails_scale$,
        'horizontalScale': _ScaleUpdateDetails_horizontalScale$,
        'verticalScale': _ScaleUpdateDetails_verticalScale$,
        'rotation': _ScaleUpdateDetails_rotation$,
        'pointerCount': _ScaleUpdateDetails_pointerCount$,
        'toString': _ScaleUpdateDetails_toString$,
      },
      {},
    ),
    'ScaleEndDetails': m.ClassMirror(
      'ScaleEndDetails',
      {
        '#as': ScaleEndDetails_as$,
        '#is': ScaleEndDetails_is$,
        'velocity': _ScaleEndDetails_velocity$,
        'scaleVelocity': _ScaleEndDetails_scaleVelocity$,
        'pointerCount': _ScaleEndDetails_pointerCount$,
        'toString': _ScaleEndDetails_toString$,
      },
      {},
    ),
    'ScaleGestureRecognizer': m.ClassMirror(
      'ScaleGestureRecognizer',
      {
        '#as': ScaleGestureRecognizer_as$,
        '#is': ScaleGestureRecognizer_is$,
        'dragStartBehavior': _ScaleGestureRecognizer_dragStartBehavior$,
        'onStart': _ScaleGestureRecognizer_onStart$,
        'onUpdate': _ScaleGestureRecognizer_onUpdate$,
        'onEnd': _ScaleGestureRecognizer_onEnd$,
        'trackpadScrollCausesScale':
            _ScaleGestureRecognizer_trackpadScrollCausesScale$,
        'trackpadScrollToScaleFactor':
            _ScaleGestureRecognizer_trackpadScrollToScaleFactor$,
        'debugDescription': _ScaleGestureRecognizer_debugDescription$,
        'addAllowedPointer': _ScaleGestureRecognizer_addAllowedPointer$,
        'isPointerPanZoomAllowed':
            _ScaleGestureRecognizer_isPointerPanZoomAllowed$,
        'addAllowedPointerPanZoom':
            _ScaleGestureRecognizer_addAllowedPointerPanZoom$,
        'handleEvent': _ScaleGestureRecognizer_handleEvent$,
        'acceptGesture': _ScaleGestureRecognizer_acceptGesture$,
        'rejectGesture': _ScaleGestureRecognizer_rejectGesture$,
        'didStopTrackingLastPointer':
            _ScaleGestureRecognizer_didStopTrackingLastPointer$,
        'dispose': _ScaleGestureRecognizer_dispose$,
      },
      {
        'dragStartBehavior': _ScaleGestureRecognizer_dragStartBehavior_set$,
        'onStart': _ScaleGestureRecognizer_onStart_set$,
        'onUpdate': _ScaleGestureRecognizer_onUpdate_set$,
        'onEnd': _ScaleGestureRecognizer_onEnd_set$,
        'trackpadScrollCausesScale':
            _ScaleGestureRecognizer_trackpadScrollCausesScale_set$,
        'trackpadScrollToScaleFactor':
            _ScaleGestureRecognizer_trackpadScrollToScaleFactor_set$,
      },
    ),
  },
);
double _kDefaultMouseScrollToScaleFactor$() {
  return kDefaultMouseScrollToScaleFactor;
}

Offset _kDefaultTrackpadScrollToScaleFactor$() {
  return kDefaultTrackpadScrollToScaleFactor;
}

Function ScaleStartDetails_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ScaleStartDetails;
Function ScaleStartDetails_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ScaleStartDetails;
Offset _ScaleStartDetails_focalPoint$(ScaleStartDetails target) {
  return target.focalPoint;
}

Offset _ScaleStartDetails_localFocalPoint$(ScaleStartDetails target) {
  return target.localFocalPoint;
}

int _ScaleStartDetails_pointerCount$(ScaleStartDetails target) {
  return target.pointerCount;
}

Function _ScaleStartDetails_toString$(
  m.Scope scope,
  ScaleStartDetails target,
) =>
    target.toString;
Function ScaleUpdateDetails_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ScaleUpdateDetails;
Function ScaleUpdateDetails_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ScaleUpdateDetails;
Offset _ScaleUpdateDetails_focalPointDelta$(ScaleUpdateDetails target) {
  return target.focalPointDelta;
}

Offset _ScaleUpdateDetails_focalPoint$(ScaleUpdateDetails target) {
  return target.focalPoint;
}

Offset _ScaleUpdateDetails_localFocalPoint$(ScaleUpdateDetails target) {
  return target.localFocalPoint;
}

double _ScaleUpdateDetails_scale$(ScaleUpdateDetails target) {
  return target.scale;
}

double _ScaleUpdateDetails_horizontalScale$(ScaleUpdateDetails target) {
  return target.horizontalScale;
}

double _ScaleUpdateDetails_verticalScale$(ScaleUpdateDetails target) {
  return target.verticalScale;
}

double _ScaleUpdateDetails_rotation$(ScaleUpdateDetails target) {
  return target.rotation;
}

int _ScaleUpdateDetails_pointerCount$(ScaleUpdateDetails target) {
  return target.pointerCount;
}

Function _ScaleUpdateDetails_toString$(
  m.Scope scope,
  ScaleUpdateDetails target,
) =>
    target.toString;
Function ScaleEndDetails_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ScaleEndDetails;
Function ScaleEndDetails_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ScaleEndDetails;
Velocity _ScaleEndDetails_velocity$(ScaleEndDetails target) {
  return target.velocity;
}

double _ScaleEndDetails_scaleVelocity$(ScaleEndDetails target) {
  return target.scaleVelocity;
}

int _ScaleEndDetails_pointerCount$(ScaleEndDetails target) {
  return target.pointerCount;
}

Function _ScaleEndDetails_toString$(
  m.Scope scope,
  ScaleEndDetails target,
) =>
    target.toString;
Function ScaleGestureRecognizer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ScaleGestureRecognizer;
Function ScaleGestureRecognizer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ScaleGestureRecognizer;
DragStartBehavior _ScaleGestureRecognizer_dragStartBehavior$(
    ScaleGestureRecognizer target) {
  return target.dragStartBehavior;
}

void _ScaleGestureRecognizer_dragStartBehavior_set$(
  ScaleGestureRecognizer target,
  DragStartBehavior other,
) {
  target.dragStartBehavior = other;
}

void Function(ScaleStartDetails)? _ScaleGestureRecognizer_onStart$(
    ScaleGestureRecognizer target) {
  return target.onStart;
}

Function _ScaleGestureRecognizer_onStart_set$(
  m.Scope scope,
  ScaleGestureRecognizer target,
) =>
    (m.FunctionPointer? _onStart) {
      void _onStartProxy(ScaleStartDetails _onStart_details) =>
          scope.engine.callFunctionPointer(
            scope,
            _onStart!,
            [_onStart_details],
            {},
          );
      target.onStart = (_onStart == null ? null : _onStartProxy);
    };
void Function(ScaleUpdateDetails)? _ScaleGestureRecognizer_onUpdate$(
    ScaleGestureRecognizer target) {
  return target.onUpdate;
}

Function _ScaleGestureRecognizer_onUpdate_set$(
  m.Scope scope,
  ScaleGestureRecognizer target,
) =>
    (m.FunctionPointer? _onUpdate) {
      void _onUpdateProxy(ScaleUpdateDetails _onUpdate_details) =>
          scope.engine.callFunctionPointer(
            scope,
            _onUpdate!,
            [_onUpdate_details],
            {},
          );
      target.onUpdate = (_onUpdate == null ? null : _onUpdateProxy);
    };
void Function(ScaleEndDetails)? _ScaleGestureRecognizer_onEnd$(
    ScaleGestureRecognizer target) {
  return target.onEnd;
}

Function _ScaleGestureRecognizer_onEnd_set$(
  m.Scope scope,
  ScaleGestureRecognizer target,
) =>
    (m.FunctionPointer? _onEnd) {
      void _onEndProxy(ScaleEndDetails _onEnd_details) =>
          scope.engine.callFunctionPointer(
            scope,
            _onEnd!,
            [_onEnd_details],
            {},
          );
      target.onEnd = (_onEnd == null ? null : _onEndProxy);
    };
bool _ScaleGestureRecognizer_trackpadScrollCausesScale$(
    ScaleGestureRecognizer target) {
  return target.trackpadScrollCausesScale;
}

void _ScaleGestureRecognizer_trackpadScrollCausesScale_set$(
  ScaleGestureRecognizer target,
  bool other,
) {
  target.trackpadScrollCausesScale = other;
}

Offset _ScaleGestureRecognizer_trackpadScrollToScaleFactor$(
    ScaleGestureRecognizer target) {
  return target.trackpadScrollToScaleFactor;
}

void _ScaleGestureRecognizer_trackpadScrollToScaleFactor_set$(
  ScaleGestureRecognizer target,
  Offset other,
) {
  target.trackpadScrollToScaleFactor = other;
}

String _ScaleGestureRecognizer_debugDescription$(
    ScaleGestureRecognizer target) {
  return target.debugDescription;
}

Function _ScaleGestureRecognizer_addAllowedPointer$(
  m.Scope scope,
  ScaleGestureRecognizer target,
) =>
    target.addAllowedPointer;
Function _ScaleGestureRecognizer_isPointerPanZoomAllowed$(
  m.Scope scope,
  ScaleGestureRecognizer target,
) =>
    target.isPointerPanZoomAllowed;
Function _ScaleGestureRecognizer_addAllowedPointerPanZoom$(
  m.Scope scope,
  ScaleGestureRecognizer target,
) =>
    target.addAllowedPointerPanZoom;
Function _ScaleGestureRecognizer_handleEvent$(
  m.Scope scope,
  ScaleGestureRecognizer target,
) =>
    target.handleEvent;
Function _ScaleGestureRecognizer_acceptGesture$(
  m.Scope scope,
  ScaleGestureRecognizer target,
) =>
    target.acceptGesture;
Function _ScaleGestureRecognizer_rejectGesture$(
  m.Scope scope,
  ScaleGestureRecognizer target,
) =>
    target.rejectGesture;
Function _ScaleGestureRecognizer_didStopTrackingLastPointer$(
  m.Scope scope,
  ScaleGestureRecognizer target,
) =>
    target.didStopTrackingLastPointer;
Function _ScaleGestureRecognizer_dispose$(
  m.Scope scope,
  ScaleGestureRecognizer target,
) =>
    target.dispose;
