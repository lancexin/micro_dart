// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/layout_builder.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/layout_builder.dart',
  {'LayoutBuilder.': _LayoutBuilder__$},
  {},
  {
    'ConstrainedLayoutBuilder': m.ClassMirror(
      'ConstrainedLayoutBuilder',
      {
        '#as': ConstrainedLayoutBuilder_as$,
        '#is': ConstrainedLayoutBuilder_is$,
        'builder': _ConstrainedLayoutBuilder_builder$,
        'createElement': _ConstrainedLayoutBuilder_createElement$,
      },
      {},
    ),
    'LayoutBuilder': m.ClassMirror(
      'LayoutBuilder',
      {
        '#as': LayoutBuilder_as$,
        '#is': LayoutBuilder_is$,
        'createRenderObject': _LayoutBuilder_createRenderObject$,
      },
      {},
    ),
  },
);
Function ConstrainedLayoutBuilder_as$<ConstraintType extends Constraints>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ConstrainedLayoutBuilder<ConstraintType>;
Function ConstrainedLayoutBuilder_is$<ConstraintType extends Constraints>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ConstrainedLayoutBuilder<ConstraintType>;
Function _ConstrainedLayoutBuilder_builder$<ConstraintType extends Constraints>(
  m.Scope scope$,
  ConstrainedLayoutBuilder<ConstraintType> target$,
) =>
    () {
      return target$.builder;
    };
Function _ConstrainedLayoutBuilder_createElement$<
        ConstraintType extends Constraints>(
  m.Scope scope$,
  ConstrainedLayoutBuilder<ConstraintType> target$,
) =>
    target$.createElement;
Function LayoutBuilder_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as LayoutBuilder;
Function LayoutBuilder_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is LayoutBuilder;
Function _LayoutBuilder__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer builder,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        BoxConstraints builder_constraints$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [
              builder_context$,
              builder_constraints$,
            ],
            {},
          );
      return LayoutBuilder(
        builder: builderProxy,
        key: key,
      );
    };
Function _LayoutBuilder_createRenderObject$(
  m.Scope scope$,
  LayoutBuilder target$,
) =>
    target$.createRenderObject;
