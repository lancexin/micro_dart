// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/overlay.dart';
import 'dart:collection';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/lookup_boundary.dart';
import 'package:flutter/src/widgets/ticker_provider.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/overlay.dart',
  {
    'OverlayEntry.': _OverlayEntry__$,
    'OverlayEntry.addListener': _OverlayEntry_addListener$,
    'OverlayEntry.removeListener': _OverlayEntry_removeListener$,
    'Overlay.': _Overlay__$,
    'Overlay.of': _Overlay_of$,
    'Overlay.maybeOf': _Overlay_maybeOf$,
    'OverlayState.': _OverlayState__$,
    'OverlayPortalController.': _OverlayPortalController__$,
    'OverlayPortal.': _OverlayPortal__$,
    'OverlayPortal.targetsRootOverlay': _OverlayPortal_targetsRootOverlay_$,
  },
  {},
  {
    'OverlayEntry': m.ClassMirror(
      'OverlayEntry',
      {
        '#as': OverlayEntry_as$,
        '#is': OverlayEntry_is$,
        'builder': _OverlayEntry_builder$,
        'opaque': _OverlayEntry_opaque$,
        'maintainState': _OverlayEntry_maintainState$,
        'mounted': _OverlayEntry_mounted$,
        'remove': _OverlayEntry_remove$,
        'markNeedsBuild': _OverlayEntry_markNeedsBuild$,
        'dispose': _OverlayEntry_dispose$,
        'toString': _OverlayEntry_toString$,
      },
      {
        'opaque': _OverlayEntry_opaque_set$,
        'maintainState': _OverlayEntry_maintainState_set$,
      },
    ),
    'Overlay': m.ClassMirror(
      'Overlay',
      {
        '#as': Overlay_as$,
        '#is': Overlay_is$,
        'initialEntries': _Overlay_initialEntries$,
        'clipBehavior': _Overlay_clipBehavior$,
        'createState': _Overlay_createState$,
      },
      {},
    ),
    'OverlayState': m.ClassMirror(
      'OverlayState',
      {
        '#as': OverlayState_as$,
        '#is': OverlayState_is$,
        'initState': _OverlayState_initState$,
        'insert': _OverlayState_insert$,
        'insertAll': _OverlayState_insertAll$,
        'rearrange': _OverlayState_rearrange$,
        'debugIsVisible': _OverlayState_debugIsVisible$,
        'build': _OverlayState_build$,
        'debugFillProperties': _OverlayState_debugFillProperties$,
      },
      {},
    ),
    'OverlayPortalController': m.ClassMirror(
      'OverlayPortalController',
      {
        '#as': OverlayPortalController_as$,
        '#is': OverlayPortalController_is$,
        'isShowing': _OverlayPortalController_isShowing$,
        'show': _OverlayPortalController_show$,
        'hide': _OverlayPortalController_hide$,
        'toggle': _OverlayPortalController_toggle$,
        'toString': _OverlayPortalController_toString$,
      },
      {},
    ),
    'OverlayPortal': m.ClassMirror(
      'OverlayPortal',
      {
        '#as': OverlayPortal_as$,
        '#is': OverlayPortal_is$,
        'controller': _OverlayPortal_controller$,
        'overlayChildBuilder': _OverlayPortal_overlayChildBuilder$,
        'child': _OverlayPortal_child$,
        'createState': _OverlayPortal_createState$,
      },
      {},
    ),
  },
);
Function OverlayEntry_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as OverlayEntry;
Function OverlayEntry_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is OverlayEntry;
Function _OverlayEntry_builder$(
  m.Scope scope$,
  OverlayEntry target$,
) =>
    () {
      return target$.builder;
    };
Function _OverlayEntry_opaque$(
  m.Scope scope$,
  OverlayEntry target$,
) =>
    () {
      return target$.opaque;
    };
void _OverlayEntry_opaque_set$(
  m.Scope scope$,
  OverlayEntry target$,
) =>
    (dynamic other$) {
      target$.opaque = other$;
    };
Function _OverlayEntry_maintainState$(
  m.Scope scope$,
  OverlayEntry target$,
) =>
    () {
      return target$.maintainState;
    };
void _OverlayEntry_maintainState_set$(
  m.Scope scope$,
  OverlayEntry target$,
) =>
    (dynamic other$) {
      target$.maintainState = other$;
    };
Function _OverlayEntry_mounted$(
  m.Scope scope$,
  OverlayEntry target$,
) =>
    () {
      return target$.mounted;
    };
Function _OverlayEntry__$(m.Scope scope$) => ({
      required m.FunctionPointer builder,
      bool? opaque,
      bool? maintainState,
    }) {
      Widget builderProxy(BuildContext builder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [builder_context$],
            {},
          );
      return OverlayEntry(
        builder: builderProxy,
        maintainState: maintainState ?? false,
        opaque: opaque ?? false,
      );
    };
Function _OverlayEntry_addListener$(
  m.Scope scope$,
  OverlayEntry target$,
) =>
    (m.FunctionPointer listener) {
      void listenerProxy() => scope$.engine.callFunctionPointer(
            scope$,
            listener,
            [],
            {},
          );
      target$.addListener(listenerProxy);
    };
Function _OverlayEntry_removeListener$(
  m.Scope scope$,
  OverlayEntry target$,
) =>
    (m.FunctionPointer listener) {
      void listenerProxy() => scope$.engine.callFunctionPointer(
            scope$,
            listener,
            [],
            {},
          );
      target$.removeListener(listenerProxy);
    };
Function _OverlayEntry_remove$(
  m.Scope scope$,
  OverlayEntry target$,
) =>
    target$.remove;
Function _OverlayEntry_markNeedsBuild$(
  m.Scope scope$,
  OverlayEntry target$,
) =>
    target$.markNeedsBuild;
Function _OverlayEntry_dispose$(
  m.Scope scope$,
  OverlayEntry target$,
) =>
    target$.dispose;
Function _OverlayEntry_toString$(
  m.Scope scope$,
  OverlayEntry target$,
) =>
    target$.toString;
Function Overlay_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Overlay;
Function Overlay_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Overlay;
Function _Overlay_initialEntries$(
  m.Scope scope$,
  Overlay target$,
) =>
    () {
      return target$.initialEntries;
    };
Function _Overlay_clipBehavior$(
  m.Scope scope$,
  Overlay target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _Overlay__$(m.Scope scope$) => ({
      Key? key,
      List? initialEntries,
      Clip? clipBehavior,
    }) {
      return Overlay(
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        initialEntries: initialEntries == null
            ? const <OverlayEntry>[]
            : List.from(initialEntries),
        key: key,
      );
    };
Function _Overlay_of$(m.Scope scope$) => Overlay.of;
Function _Overlay_maybeOf$(m.Scope scope$) => Overlay.maybeOf;
Function _Overlay_createState$(
  m.Scope scope$,
  Overlay target$,
) =>
    target$.createState;
Function OverlayState_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as OverlayState;
Function OverlayState_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is OverlayState;
Function _OverlayState__$(m.Scope scope$) => () {
      return OverlayState();
    };
Function _OverlayState_initState$(
  m.Scope scope$,
  OverlayState target$,
) =>
    target$.initState;
Function _OverlayState_insert$(
  m.Scope scope$,
  OverlayState target$,
) =>
    target$.insert;
Function _OverlayState_insertAll$(
  m.Scope scope$,
  OverlayState target$,
) =>
    target$.insertAll;
Function _OverlayState_rearrange$(
  m.Scope scope$,
  OverlayState target$,
) =>
    target$.rearrange;
Function _OverlayState_debugIsVisible$(
  m.Scope scope$,
  OverlayState target$,
) =>
    target$.debugIsVisible;
Function _OverlayState_build$(
  m.Scope scope$,
  OverlayState target$,
) =>
    target$.build;
Function _OverlayState_debugFillProperties$(
  m.Scope scope$,
  OverlayState target$,
) =>
    target$.debugFillProperties;
Function OverlayPortalController_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as OverlayPortalController;
Function OverlayPortalController_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is OverlayPortalController;
Function _OverlayPortalController_isShowing$(
  m.Scope scope$,
  OverlayPortalController target$,
) =>
    () {
      return target$.isShowing;
    };
Function _OverlayPortalController__$(m.Scope scope$) => ({String? debugLabel}) {
      return OverlayPortalController(debugLabel: debugLabel);
    };
Function _OverlayPortalController_show$(
  m.Scope scope$,
  OverlayPortalController target$,
) =>
    target$.show;
Function _OverlayPortalController_hide$(
  m.Scope scope$,
  OverlayPortalController target$,
) =>
    target$.hide;
Function _OverlayPortalController_toggle$(
  m.Scope scope$,
  OverlayPortalController target$,
) =>
    target$.toggle;
Function _OverlayPortalController_toString$(
  m.Scope scope$,
  OverlayPortalController target$,
) =>
    target$.toString;
Function OverlayPortal_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as OverlayPortal;
Function OverlayPortal_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is OverlayPortal;
Function _OverlayPortal_controller$(
  m.Scope scope$,
  OverlayPortal target$,
) =>
    () {
      return target$.controller;
    };
Function _OverlayPortal_overlayChildBuilder$(
  m.Scope scope$,
  OverlayPortal target$,
) =>
    () {
      return target$.overlayChildBuilder;
    };
Function _OverlayPortal_child$(
  m.Scope scope$,
  OverlayPortal target$,
) =>
    () {
      return target$.child;
    };
Function _OverlayPortal__$(m.Scope scope$) => ({
      Key? key,
      required OverlayPortalController controller,
      required m.FunctionPointer overlayChildBuilder,
      Widget? child,
    }) {
      Widget overlayChildBuilderProxy(
              BuildContext overlayChildBuilder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            overlayChildBuilder,
            [overlayChildBuilder_context$],
            {},
          );
      return OverlayPortal(
        child: child,
        controller: controller,
        key: key,
        overlayChildBuilder: overlayChildBuilderProxy,
      );
    };
Function _OverlayPortal_targetsRootOverlay_$(m.Scope scope$) => ({
      Key? key,
      required OverlayPortalController controller,
      required m.FunctionPointer overlayChildBuilder,
      Widget? child,
    }) {
      Widget overlayChildBuilderProxy(
              BuildContext overlayChildBuilder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            overlayChildBuilder,
            [overlayChildBuilder_context$],
            {},
          );
      return OverlayPortal.targetsRootOverlay(
        child: child,
        controller: controller,
        key: key,
        overlayChildBuilder: overlayChildBuilderProxy,
      );
    };
Function _OverlayPortal_createState$(
  m.Scope scope$,
  OverlayPortal target$,
) =>
    target$.createState;
