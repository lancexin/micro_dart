// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/choice_chip.dart';
import 'package:flutter/foundation.dart' show clampDouble;
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/chip.dart';
import 'package:flutter/src/material/chip_theme.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/choice_chip.dart',
  {'ChoiceChip.': _ChoiceChip__$},
  {},
  {
    'ChoiceChip': m.ClassMirror(
      'ChoiceChip',
      {
        '#as': ChoiceChip_as$,
        '#is': ChoiceChip_is$,
        'avatar': _ChoiceChip_avatar$,
        'label': _ChoiceChip_label$,
        'labelStyle': _ChoiceChip_labelStyle$,
        'labelPadding': _ChoiceChip_labelPadding$,
        'onSelected': _ChoiceChip_onSelected$,
        'pressElevation': _ChoiceChip_pressElevation$,
        'selected': _ChoiceChip_selected$,
        'disabledColor': _ChoiceChip_disabledColor$,
        'selectedColor': _ChoiceChip_selectedColor$,
        'tooltip': _ChoiceChip_tooltip$,
        'side': _ChoiceChip_side$,
        'shape': _ChoiceChip_shape$,
        'clipBehavior': _ChoiceChip_clipBehavior$,
        'focusNode': _ChoiceChip_focusNode$,
        'autofocus': _ChoiceChip_autofocus$,
        'backgroundColor': _ChoiceChip_backgroundColor$,
        'padding': _ChoiceChip_padding$,
        'visualDensity': _ChoiceChip_visualDensity$,
        'materialTapTargetSize': _ChoiceChip_materialTapTargetSize$,
        'elevation': _ChoiceChip_elevation$,
        'shadowColor': _ChoiceChip_shadowColor$,
        'surfaceTintColor': _ChoiceChip_surfaceTintColor$,
        'selectedShadowColor': _ChoiceChip_selectedShadowColor$,
        'avatarBorder': _ChoiceChip_avatarBorder$,
        'iconTheme': _ChoiceChip_iconTheme$,
        'isEnabled': _ChoiceChip_isEnabled$,
        'build': _ChoiceChip_build$,
      },
      {},
    )
  },
);
Function ChoiceChip_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ChoiceChip;
Function ChoiceChip_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ChoiceChip;
Function _ChoiceChip_avatar$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.avatar;
    };
Function _ChoiceChip_label$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.label;
    };
Function _ChoiceChip_labelStyle$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.labelStyle;
    };
Function _ChoiceChip_labelPadding$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.labelPadding;
    };
Function _ChoiceChip_onSelected$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.onSelected;
    };
Function _ChoiceChip_pressElevation$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.pressElevation;
    };
Function _ChoiceChip_selected$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.selected;
    };
Function _ChoiceChip_disabledColor$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.disabledColor;
    };
Function _ChoiceChip_selectedColor$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.selectedColor;
    };
Function _ChoiceChip_tooltip$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.tooltip;
    };
Function _ChoiceChip_side$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.side;
    };
Function _ChoiceChip_shape$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.shape;
    };
Function _ChoiceChip_clipBehavior$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _ChoiceChip_focusNode$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.focusNode;
    };
Function _ChoiceChip_autofocus$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.autofocus;
    };
Function _ChoiceChip_backgroundColor$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _ChoiceChip_padding$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.padding;
    };
Function _ChoiceChip_visualDensity$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.visualDensity;
    };
Function _ChoiceChip_materialTapTargetSize$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.materialTapTargetSize;
    };
Function _ChoiceChip_elevation$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.elevation;
    };
Function _ChoiceChip_shadowColor$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _ChoiceChip_surfaceTintColor$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _ChoiceChip_selectedShadowColor$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.selectedShadowColor;
    };
Function _ChoiceChip_avatarBorder$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.avatarBorder;
    };
Function _ChoiceChip_iconTheme$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.iconTheme;
    };
Function _ChoiceChip_isEnabled$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    () {
      return target$.isEnabled;
    };
Function _ChoiceChip__$(m.Scope scope$) => ({
      Key? key,
      Widget? avatar,
      required Widget label,
      TextStyle? labelStyle,
      EdgeInsetsGeometry? labelPadding,
      m.FunctionPointer? onSelected,
      double? pressElevation,
      required bool selected,
      Color? selectedColor,
      Color? disabledColor,
      String? tooltip,
      BorderSide? side,
      OutlinedBorder? shape,
      Clip? clipBehavior,
      FocusNode? focusNode,
      bool? autofocus,
      Color? backgroundColor,
      EdgeInsetsGeometry? padding,
      VisualDensity? visualDensity,
      MaterialTapTargetSize? materialTapTargetSize,
      double? elevation,
      Color? shadowColor,
      Color? surfaceTintColor,
      IconThemeData? iconTheme,
      Color? selectedShadowColor,
      ShapeBorder? avatarBorder,
    }) {
      void onSelectedProxy(bool onSelected_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSelected!,
            [onSelected_value$],
            {},
          );
      return ChoiceChip(
        autofocus: autofocus ?? false,
        avatar: avatar,
        avatarBorder: avatarBorder ?? const CircleBorder(),
        backgroundColor: backgroundColor,
        clipBehavior: clipBehavior ?? Clip.none,
        disabledColor: disabledColor,
        elevation: elevation,
        focusNode: focusNode,
        iconTheme: iconTheme,
        key: key,
        label: label,
        labelPadding: labelPadding,
        labelStyle: labelStyle,
        materialTapTargetSize: materialTapTargetSize,
        onSelected: onSelected == null ? null : onSelectedProxy,
        padding: padding,
        pressElevation: pressElevation,
        selected: selected,
        selectedColor: selectedColor,
        selectedShadowColor: selectedShadowColor,
        shadowColor: shadowColor,
        shape: shape,
        side: side,
        surfaceTintColor: surfaceTintColor,
        tooltip: tooltip,
        visualDensity: visualDensity,
      );
    };
Function _ChoiceChip_build$(
  m.Scope scope$,
  ChoiceChip target$,
) =>
    target$.build;
