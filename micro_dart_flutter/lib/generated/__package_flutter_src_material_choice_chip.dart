// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/choice_chip.dart';
import 'package:flutter/foundation.dart' show clampDouble;
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/chip.dart';
import 'package:flutter/src/material/chip_theme.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/choice_chip.dart',
  {},
  {},
  {
    'ChoiceChip': m.ClassMirror(
      'ChoiceChip',
      {
        '#as': ChoiceChip_as$,
        '#is': ChoiceChip_is$,
        'avatar': _ChoiceChip_avatar$,
        'label': _ChoiceChip_label$,
        'labelStyle': _ChoiceChip_labelStyle$,
        'labelPadding': _ChoiceChip_labelPadding$,
        'onSelected': _ChoiceChip_onSelected$,
        'pressElevation': _ChoiceChip_pressElevation$,
        'selected': _ChoiceChip_selected$,
        'disabledColor': _ChoiceChip_disabledColor$,
        'selectedColor': _ChoiceChip_selectedColor$,
        'tooltip': _ChoiceChip_tooltip$,
        'side': _ChoiceChip_side$,
        'shape': _ChoiceChip_shape$,
        'clipBehavior': _ChoiceChip_clipBehavior$,
        'focusNode': _ChoiceChip_focusNode$,
        'autofocus': _ChoiceChip_autofocus$,
        'backgroundColor': _ChoiceChip_backgroundColor$,
        'padding': _ChoiceChip_padding$,
        'visualDensity': _ChoiceChip_visualDensity$,
        'materialTapTargetSize': _ChoiceChip_materialTapTargetSize$,
        'elevation': _ChoiceChip_elevation$,
        'shadowColor': _ChoiceChip_shadowColor$,
        'surfaceTintColor': _ChoiceChip_surfaceTintColor$,
        'selectedShadowColor': _ChoiceChip_selectedShadowColor$,
        'avatarBorder': _ChoiceChip_avatarBorder$,
        'iconTheme': _ChoiceChip_iconTheme$,
        'isEnabled': _ChoiceChip_isEnabled$,
        'build': _ChoiceChip_build$,
      },
      {},
    )
  },
);
Function ChoiceChip_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ChoiceChip;
Function ChoiceChip_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ChoiceChip;
Widget? _ChoiceChip_avatar$(ChoiceChip target) {
  return target.avatar;
}

Widget _ChoiceChip_label$(ChoiceChip target) {
  return target.label;
}

TextStyle? _ChoiceChip_labelStyle$(ChoiceChip target) {
  return target.labelStyle;
}

EdgeInsetsGeometry? _ChoiceChip_labelPadding$(ChoiceChip target) {
  return target.labelPadding;
}

void Function(bool)? _ChoiceChip_onSelected$(ChoiceChip target) {
  return target.onSelected;
}

double? _ChoiceChip_pressElevation$(ChoiceChip target) {
  return target.pressElevation;
}

bool _ChoiceChip_selected$(ChoiceChip target) {
  return target.selected;
}

Color? _ChoiceChip_disabledColor$(ChoiceChip target) {
  return target.disabledColor;
}

Color? _ChoiceChip_selectedColor$(ChoiceChip target) {
  return target.selectedColor;
}

String? _ChoiceChip_tooltip$(ChoiceChip target) {
  return target.tooltip;
}

BorderSide? _ChoiceChip_side$(ChoiceChip target) {
  return target.side;
}

OutlinedBorder? _ChoiceChip_shape$(ChoiceChip target) {
  return target.shape;
}

Clip _ChoiceChip_clipBehavior$(ChoiceChip target) {
  return target.clipBehavior;
}

FocusNode? _ChoiceChip_focusNode$(ChoiceChip target) {
  return target.focusNode;
}

bool _ChoiceChip_autofocus$(ChoiceChip target) {
  return target.autofocus;
}

Color? _ChoiceChip_backgroundColor$(ChoiceChip target) {
  return target.backgroundColor;
}

EdgeInsetsGeometry? _ChoiceChip_padding$(ChoiceChip target) {
  return target.padding;
}

VisualDensity? _ChoiceChip_visualDensity$(ChoiceChip target) {
  return target.visualDensity;
}

MaterialTapTargetSize? _ChoiceChip_materialTapTargetSize$(ChoiceChip target) {
  return target.materialTapTargetSize;
}

double? _ChoiceChip_elevation$(ChoiceChip target) {
  return target.elevation;
}

Color? _ChoiceChip_shadowColor$(ChoiceChip target) {
  return target.shadowColor;
}

Color? _ChoiceChip_surfaceTintColor$(ChoiceChip target) {
  return target.surfaceTintColor;
}

Color? _ChoiceChip_selectedShadowColor$(ChoiceChip target) {
  return target.selectedShadowColor;
}

ShapeBorder _ChoiceChip_avatarBorder$(ChoiceChip target) {
  return target.avatarBorder;
}

IconThemeData? _ChoiceChip_iconTheme$(ChoiceChip target) {
  return target.iconTheme;
}

bool _ChoiceChip_isEnabled$(ChoiceChip target) {
  return target.isEnabled;
}

Function _ChoiceChip_build$(
  m.Scope scope,
  ChoiceChip target,
) =>
    target.build;
