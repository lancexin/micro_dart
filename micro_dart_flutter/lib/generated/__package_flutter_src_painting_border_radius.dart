// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/border_radius.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/painting/basic_types.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/border_radius.dart',
  {
    'BorderRadiusGeometry.lerp': _BorderRadiusGeometry_lerp$,
    'BorderRadius.zero': _BorderRadius_zero$,
    'BorderRadius.lerp': _BorderRadius_lerp$,
    'BorderRadiusDirectional.zero': _BorderRadiusDirectional_zero$,
    'BorderRadiusDirectional.lerp': _BorderRadiusDirectional_lerp$,
  },
  {},
  {
    'BorderRadiusGeometry': m.ClassMirror(
      'BorderRadiusGeometry',
      {
        'hashCode': _BorderRadiusGeometry_hashCode$,
        'subtract': _BorderRadiusGeometry_subtract$,
        'add': _BorderRadiusGeometry_add$,
        'resolve': _BorderRadiusGeometry_resolve$,
        'toString': _BorderRadiusGeometry_toString$,
      },
      {},
    ),
    'BorderRadius': m.ClassMirror(
      'BorderRadius',
      {
        'topLeft': _BorderRadius_topLeft$,
        'topRight': _BorderRadius_topRight$,
        'bottomLeft': _BorderRadius_bottomLeft$,
        'bottomRight': _BorderRadius_bottomRight$,
        'copyWith': _BorderRadius_copyWith$,
        'toRRect': _BorderRadius_toRRect$,
        'subtract': _BorderRadius_subtract$,
        'add': _BorderRadius_add$,
        'resolve': _BorderRadius_resolve$,
      },
      {},
    ),
    'BorderRadiusDirectional': m.ClassMirror(
      'BorderRadiusDirectional',
      {
        'topStart': _BorderRadiusDirectional_topStart$,
        'topEnd': _BorderRadiusDirectional_topEnd$,
        'bottomStart': _BorderRadiusDirectional_bottomStart$,
        'bottomEnd': _BorderRadiusDirectional_bottomEnd$,
        'subtract': _BorderRadiusDirectional_subtract$,
        'add': _BorderRadiusDirectional_add$,
        'resolve': _BorderRadiusDirectional_resolve$,
      },
      {},
    ),
  },
);
int _BorderRadiusGeometry_hashCode$(BorderRadiusGeometry target) {
  return target.hashCode;
}

Function _BorderRadiusGeometry_subtract$(
  m.Scope scope,
  BorderRadiusGeometry target,
) =>
    target.subtract;
Function _BorderRadiusGeometry_add$(
  m.Scope scope,
  BorderRadiusGeometry target,
) =>
    target.add;
Function _BorderRadiusGeometry_lerp$(m.Scope scope) =>
    BorderRadiusGeometry.lerp;
Function _BorderRadiusGeometry_resolve$(
  m.Scope scope,
  BorderRadiusGeometry target,
) =>
    target.resolve;
Function _BorderRadiusGeometry_toString$(
  m.Scope scope,
  BorderRadiusGeometry target,
) =>
    target.toString;
BorderRadius _BorderRadius_zero$() {
  return BorderRadius.zero;
}

Radius _BorderRadius_topLeft$(BorderRadius target) {
  return target.topLeft;
}

Radius _BorderRadius_topRight$(BorderRadius target) {
  return target.topRight;
}

Radius _BorderRadius_bottomLeft$(BorderRadius target) {
  return target.bottomLeft;
}

Radius _BorderRadius_bottomRight$(BorderRadius target) {
  return target.bottomRight;
}

Function _BorderRadius_copyWith$(
  m.Scope scope,
  BorderRadius target,
) =>
    target.copyWith;
Function _BorderRadius_toRRect$(
  m.Scope scope,
  BorderRadius target,
) =>
    target.toRRect;
Function _BorderRadius_subtract$(
  m.Scope scope,
  BorderRadius target,
) =>
    target.subtract;
Function _BorderRadius_add$(
  m.Scope scope,
  BorderRadius target,
) =>
    target.add;
Function _BorderRadius_lerp$(m.Scope scope) => BorderRadius.lerp;
Function _BorderRadius_resolve$(
  m.Scope scope,
  BorderRadius target,
) =>
    target.resolve;
BorderRadiusDirectional _BorderRadiusDirectional_zero$() {
  return BorderRadiusDirectional.zero;
}

Radius _BorderRadiusDirectional_topStart$(BorderRadiusDirectional target) {
  return target.topStart;
}

Radius _BorderRadiusDirectional_topEnd$(BorderRadiusDirectional target) {
  return target.topEnd;
}

Radius _BorderRadiusDirectional_bottomStart$(BorderRadiusDirectional target) {
  return target.bottomStart;
}

Radius _BorderRadiusDirectional_bottomEnd$(BorderRadiusDirectional target) {
  return target.bottomEnd;
}

Function _BorderRadiusDirectional_subtract$(
  m.Scope scope,
  BorderRadiusDirectional target,
) =>
    target.subtract;
Function _BorderRadiusDirectional_add$(
  m.Scope scope,
  BorderRadiusDirectional target,
) =>
    target.add;
Function _BorderRadiusDirectional_lerp$(m.Scope scope) =>
    BorderRadiusDirectional.lerp;
Function _BorderRadiusDirectional_resolve$(
  m.Scope scope,
  BorderRadiusDirectional target,
) =>
    target.resolve;
