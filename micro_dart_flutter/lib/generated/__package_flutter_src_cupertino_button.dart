// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/button.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/constants.dart';
import 'package:flutter/src/cupertino/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/button.dart',
  {},
  {},
  {
    'CupertinoButton': m.ClassMirror(
      'CupertinoButton',
      {
        'child': _CupertinoButton_child$,
        'padding': _CupertinoButton_padding$,
        'color': _CupertinoButton_color$,
        'disabledColor': _CupertinoButton_disabledColor$,
        'onPressed': _CupertinoButton_onPressed$,
        'minSize': _CupertinoButton_minSize$,
        'pressedOpacity': _CupertinoButton_pressedOpacity$,
        'borderRadius': _CupertinoButton_borderRadius$,
        'alignment': _CupertinoButton_alignment$,
        'enabled': _CupertinoButton_enabled$,
        'createState': _CupertinoButton_createState$,
        'debugFillProperties': _CupertinoButton_debugFillProperties$,
      },
      {},
    )
  },
);
Widget _CupertinoButton_child$(CupertinoButton target) {
  return target.child;
}

EdgeInsetsGeometry? _CupertinoButton_padding$(CupertinoButton target) {
  return target.padding;
}

Color? _CupertinoButton_color$(CupertinoButton target) {
  return target.color;
}

Color _CupertinoButton_disabledColor$(CupertinoButton target) {
  return target.disabledColor;
}

void Function()? _CupertinoButton_onPressed$(CupertinoButton target) {
  return target.onPressed;
}

double? _CupertinoButton_minSize$(CupertinoButton target) {
  return target.minSize;
}

double? _CupertinoButton_pressedOpacity$(CupertinoButton target) {
  return target.pressedOpacity;
}

BorderRadius? _CupertinoButton_borderRadius$(CupertinoButton target) {
  return target.borderRadius;
}

AlignmentGeometry _CupertinoButton_alignment$(CupertinoButton target) {
  return target.alignment;
}

bool _CupertinoButton_enabled$(CupertinoButton target) {
  return target.enabled;
}

Function _CupertinoButton_createState$(
  m.Scope scope,
  CupertinoButton target,
) =>
    target.createState;
Function _CupertinoButton_debugFillProperties$(
  m.Scope scope,
  CupertinoButton target,
) =>
    target.debugFillProperties;
