// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/button.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/constants.dart';
import 'package:flutter/src/cupertino/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/button.dart',
  {
    'CupertinoButton.': _CupertinoButton__$,
    'CupertinoButton.filled': _CupertinoButton_filled_$,
  },
  {},
  {
    'CupertinoButton': m.ClassMirror(
      'CupertinoButton',
      {
        '#as': CupertinoButton_as$,
        '#is': CupertinoButton_is$,
        'child': _CupertinoButton_child$,
        'padding': _CupertinoButton_padding$,
        'color': _CupertinoButton_color$,
        'disabledColor': _CupertinoButton_disabledColor$,
        'onPressed': _CupertinoButton_onPressed$,
        'minSize': _CupertinoButton_minSize$,
        'pressedOpacity': _CupertinoButton_pressedOpacity$,
        'borderRadius': _CupertinoButton_borderRadius$,
        'alignment': _CupertinoButton_alignment$,
        'enabled': _CupertinoButton_enabled$,
        'createState': _CupertinoButton_createState$,
        'debugFillProperties': _CupertinoButton_debugFillProperties$,
      },
      {},
    )
  },
);
Function CupertinoButton_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoButton;
Function CupertinoButton_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoButton;
Function _CupertinoButton_child$(
  m.Scope scope$,
  CupertinoButton target$,
) =>
    () {
      return target$.child;
    };
Function _CupertinoButton_padding$(
  m.Scope scope$,
  CupertinoButton target$,
) =>
    () {
      return target$.padding;
    };
Function _CupertinoButton_color$(
  m.Scope scope$,
  CupertinoButton target$,
) =>
    () {
      return target$.color;
    };
Function _CupertinoButton_disabledColor$(
  m.Scope scope$,
  CupertinoButton target$,
) =>
    () {
      return target$.disabledColor;
    };
Function _CupertinoButton_onPressed$(
  m.Scope scope$,
  CupertinoButton target$,
) =>
    () {
      return target$.onPressed;
    };
Function _CupertinoButton_minSize$(
  m.Scope scope$,
  CupertinoButton target$,
) =>
    () {
      return target$.minSize;
    };
Function _CupertinoButton_pressedOpacity$(
  m.Scope scope$,
  CupertinoButton target$,
) =>
    () {
      return target$.pressedOpacity;
    };
Function _CupertinoButton_borderRadius$(
  m.Scope scope$,
  CupertinoButton target$,
) =>
    () {
      return target$.borderRadius;
    };
Function _CupertinoButton_alignment$(
  m.Scope scope$,
  CupertinoButton target$,
) =>
    () {
      return target$.alignment;
    };
Function _CupertinoButton_enabled$(
  m.Scope scope$,
  CupertinoButton target$,
) =>
    () {
      return target$.enabled;
    };
Function _CupertinoButton__$(m.Scope scope$) => ({
      Key? key,
      required Widget child,
      EdgeInsetsGeometry? padding,
      Color? color,
      Color? disabledColor,
      double? minSize,
      double? pressedOpacity,
      BorderRadius? borderRadius,
      AlignmentGeometry? alignment,
      required m.FunctionPointer? onPressed,
    }) {
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return CupertinoButton(
        alignment: alignment ?? Alignment.center,
        borderRadius:
            borderRadius ?? const BorderRadius.all(Radius.circular(8.0)),
        child: child,
        color: color,
        disabledColor: disabledColor ?? CupertinoColors.quaternarySystemFill,
        key: key,
        minSize: minSize ?? kMinInteractiveDimensionCupertino,
        onPressed: onPressed == null ? null : onPressedProxy,
        padding: padding,
        pressedOpacity: pressedOpacity ?? 0.4,
      );
    };
Function _CupertinoButton_filled_$(m.Scope scope$) => ({
      Key? key,
      required Widget child,
      EdgeInsetsGeometry? padding,
      Color? disabledColor,
      double? minSize,
      double? pressedOpacity,
      BorderRadius? borderRadius,
      AlignmentGeometry? alignment,
      required m.FunctionPointer? onPressed,
    }) {
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return CupertinoButton.filled(
        alignment: alignment ?? Alignment.center,
        borderRadius:
            borderRadius ?? const BorderRadius.all(Radius.circular(8.0)),
        child: child,
        disabledColor: disabledColor ?? CupertinoColors.quaternarySystemFill,
        key: key,
        minSize: minSize ?? kMinInteractiveDimensionCupertino,
        onPressed: onPressed == null ? null : onPressedProxy,
        padding: padding,
        pressedOpacity: pressedOpacity ?? 0.4,
      );
    };
Function _CupertinoButton_createState$(
  m.Scope scope$,
  CupertinoButton target$,
) =>
    target$.createState;
Function _CupertinoButton_debugFillProperties$(
  m.Scope scope$,
  CupertinoButton target$,
) =>
    target$.debugFillProperties;
