// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/page.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/src/material/page_transitions_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/page.dart',
  {
    'MaterialPageRoute.': _MaterialPageRoute__$,
    'MaterialPage.': _MaterialPage__$,
  },
  {},
  {
    'MaterialPageRoute': m.ClassMirror(
      'MaterialPageRoute',
      {
        '#as': MaterialPageRoute_as$,
        '#is': MaterialPageRoute_is$,
        'builder': _MaterialPageRoute_builder$,
        'maintainState': _MaterialPageRoute_maintainState$,
        'debugLabel': _MaterialPageRoute_debugLabel$,
        'buildContent': _MaterialPageRoute_buildContent$,
      },
      {},
    ),
    'MaterialPage': m.ClassMirror(
      'MaterialPage',
      {
        '#as': MaterialPage_as$,
        '#is': MaterialPage_is$,
        'child': _MaterialPage_child$,
        'maintainState': _MaterialPage_maintainState$,
        'fullscreenDialog': _MaterialPage_fullscreenDialog$,
        'allowSnapshotting': _MaterialPage_allowSnapshotting$,
        'createRoute': _MaterialPage_createRoute$,
      },
      {},
    ),
  },
);
Function MaterialPageRoute_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MaterialPageRoute<T>;
Function MaterialPageRoute_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MaterialPageRoute<T>;
Function _MaterialPageRoute_builder$<T>(
  m.Scope scope$,
  MaterialPageRoute<T> target$,
) =>
    () {
      return target$.builder;
    };
Function _MaterialPageRoute_maintainState$<T>(
  m.Scope scope$,
  MaterialPageRoute<T> target$,
) =>
    () {
      return target$.maintainState;
    };
Function _MaterialPageRoute_debugLabel$<T>(
  m.Scope scope$,
  MaterialPageRoute<T> target$,
) =>
    () {
      return target$.debugLabel;
    };
Function _MaterialPageRoute__$(m.Scope scope$) => ({
      required m.FunctionPointer builder,
      RouteSettings? settings,
      bool? maintainState,
      bool? fullscreenDialog,
      bool? allowSnapshotting,
    }) {
      Widget builderProxy(BuildContext builder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [builder_context$],
            {},
          );
      return MaterialPageRoute(
        allowSnapshotting: allowSnapshotting ?? true,
        builder: builderProxy,
        fullscreenDialog: fullscreenDialog ?? false,
        maintainState: maintainState ?? true,
        settings: settings,
      );
    };
Function _MaterialPageRoute_buildContent$<T>(
  m.Scope scope$,
  MaterialPageRoute<T> target$,
) =>
    target$.buildContent;
Function MaterialPage_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MaterialPage<T>;
Function MaterialPage_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MaterialPage<T>;
Function _MaterialPage_child$<T>(
  m.Scope scope$,
  MaterialPage<T> target$,
) =>
    () {
      return target$.child;
    };
Function _MaterialPage_maintainState$<T>(
  m.Scope scope$,
  MaterialPage<T> target$,
) =>
    () {
      return target$.maintainState;
    };
Function _MaterialPage_fullscreenDialog$<T>(
  m.Scope scope$,
  MaterialPage<T> target$,
) =>
    () {
      return target$.fullscreenDialog;
    };
Function _MaterialPage_allowSnapshotting$<T>(
  m.Scope scope$,
  MaterialPage<T> target$,
) =>
    () {
      return target$.allowSnapshotting;
    };
Function _MaterialPage__$(m.Scope scope$) => ({
      required Widget child,
      bool? maintainState,
      bool? fullscreenDialog,
      bool? allowSnapshotting,
      LocalKey? key,
      String? name,
      Object? arguments,
      String? restorationId,
    }) {
      return MaterialPage(
        allowSnapshotting: allowSnapshotting ?? true,
        arguments: arguments,
        child: child,
        fullscreenDialog: fullscreenDialog ?? false,
        key: key,
        maintainState: maintainState ?? true,
        name: name,
        restorationId: restorationId,
      );
    };
Function _MaterialPage_createRoute$<T>(
  m.Scope scope$,
  MaterialPage<T> target$,
) =>
    target$.createRoute;
