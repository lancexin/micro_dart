// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/page.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/src/material/page_transitions_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/page.dart',
  {},
  {},
  {
    'MaterialPageRoute': m.ClassMirror(
      'MaterialPageRoute',
      {
        '#as': MaterialPageRoute_as$,
        '#is': MaterialPageRoute_is$,
        'builder': _MaterialPageRoute_builder$,
        'maintainState': _MaterialPageRoute_maintainState$,
        'debugLabel': _MaterialPageRoute_debugLabel$,
        'buildContent': _MaterialPageRoute_buildContent$,
      },
      {},
    ),
    'MaterialPage': m.ClassMirror(
      'MaterialPage',
      {
        '#as': MaterialPage_as$,
        '#is': MaterialPage_is$,
        'child': _MaterialPage_child$,
        'maintainState': _MaterialPage_maintainState$,
        'fullscreenDialog': _MaterialPage_fullscreenDialog$,
        'allowSnapshotting': _MaterialPage_allowSnapshotting$,
        'createRoute': _MaterialPage_createRoute$,
      },
      {},
    ),
  },
);
Function MaterialPageRoute_as$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as MaterialPageRoute<T>;
Function MaterialPageRoute_is$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is MaterialPageRoute<T>;
Widget Function(BuildContext) _MaterialPageRoute_builder$<T>(
    MaterialPageRoute<T> target) {
  return target.builder;
}

bool _MaterialPageRoute_maintainState$<T>(MaterialPageRoute<T> target) {
  return target.maintainState;
}

String _MaterialPageRoute_debugLabel$<T>(MaterialPageRoute<T> target) {
  return target.debugLabel;
}

Function _MaterialPageRoute_buildContent$<T>(
  m.Scope scope,
  MaterialPageRoute<T> target,
) =>
    target.buildContent;
Function MaterialPage_as$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as MaterialPage<T>;
Function MaterialPage_is$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is MaterialPage<T>;
Widget _MaterialPage_child$<T>(MaterialPage<T> target) {
  return target.child;
}

bool _MaterialPage_maintainState$<T>(MaterialPage<T> target) {
  return target.maintainState;
}

bool _MaterialPage_fullscreenDialog$<T>(MaterialPage<T> target) {
  return target.fullscreenDialog;
}

bool _MaterialPage_allowSnapshotting$<T>(MaterialPage<T> target) {
  return target.allowSnapshotting;
}

Function _MaterialPage_createRoute$<T>(
  m.Scope scope,
  MaterialPage<T> target,
) =>
    target.createRoute;
