// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/text_form_field.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/adaptive_text_selection_toolbar.dart';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/material/text_field.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/text_form_field.dart',
  {'TextFormField.': _TextFormField__$},
  {},
  {
    'TextFormField': m.ClassMirror(
      'TextFormField',
      {
        '#as': TextFormField_as$,
        '#is': TextFormField_is$,
        'controller': _TextFormField_controller$,
        'createState': _TextFormField_createState$,
      },
      {},
    )
  },
);
Function TextFormField_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextFormField;
Function TextFormField_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextFormField;
Function _TextFormField_controller$(
  m.Scope scope$,
  TextFormField target$,
) =>
    () {
      return target$.controller;
    };
Function _TextFormField__$(m.Scope scope$) => ({
      Key? key,
      TextEditingController? controller,
      String? initialValue,
      FocusNode? focusNode,
      InputDecoration? decoration,
      TextInputType? keyboardType,
      TextCapitalization? textCapitalization,
      TextInputAction? textInputAction,
      TextStyle? style,
      StrutStyle? strutStyle,
      TextDirection? textDirection,
      TextAlign? textAlign,
      TextAlignVertical? textAlignVertical,
      bool? autofocus,
      bool? readOnly,
      ToolbarOptions? toolbarOptions,
      bool? showCursor,
      String? obscuringCharacter,
      bool? obscureText,
      bool? autocorrect,
      SmartDashesType? smartDashesType,
      SmartQuotesType? smartQuotesType,
      bool? enableSuggestions,
      MaxLengthEnforcement? maxLengthEnforcement,
      int? maxLines,
      int? minLines,
      bool? expands,
      int? maxLength,
      m.FunctionPointer? onChanged,
      m.FunctionPointer? onTap,
      m.FunctionPointer? onTapOutside,
      m.FunctionPointer? onEditingComplete,
      m.FunctionPointer? onFieldSubmitted,
      m.FunctionPointer? onSaved,
      m.FunctionPointer? validator,
      List? inputFormatters,
      bool? enabled,
      double? cursorWidth,
      double? cursorHeight,
      Radius? cursorRadius,
      Color? cursorColor,
      Brightness? keyboardAppearance,
      EdgeInsets? scrollPadding,
      bool? enableInteractiveSelection,
      TextSelectionControls? selectionControls,
      m.FunctionPointer? buildCounter,
      ScrollPhysics? scrollPhysics,
      Iterable? autofillHints,
      AutovalidateMode? autovalidateMode,
      ScrollController? scrollController,
      String? restorationId,
      bool? enableIMEPersonalizedLearning,
      MouseCursor? mouseCursor,
      m.FunctionPointer? contextMenuBuilder,
      SpellCheckConfiguration? spellCheckConfiguration,
      TextMagnifierConfiguration? magnifierConfiguration,
    }) {
      Widget? buildCounterProxy(
        BuildContext buildCounter_context$, {
        required int currentLength,
        required bool isFocused,
        required int? maxLength,
      }) =>
          scope$.engine.callFunctionPointer(
            scope$,
            buildCounter!,
            [buildCounter_context$],
            {
              'currentLength': currentLength,
              'isFocused': isFocused,
              'maxLength': maxLength,
            },
          );
      Widget contextMenuBuilderProxy(
        BuildContext contextMenuBuilder_context$,
        EditableTextState contextMenuBuilder_editableTextState$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            contextMenuBuilder!,
            [
              contextMenuBuilder_context$,
              contextMenuBuilder_editableTextState$,
            ],
            {},
          );
      void onChangedProxy(String onChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChanged!,
            [onChanged_value$],
            {},
          );
      void onEditingCompleteProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onEditingComplete!,
            [],
            {},
          );
      void onFieldSubmittedProxy(String onFieldSubmitted_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onFieldSubmitted!,
            [onFieldSubmitted_value$],
            {},
          );
      void onSavedProxy(String? onSaved_newValue$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSaved!,
            [onSaved_newValue$],
            {},
          );
      void onTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTap!,
            [],
            {},
          );
      void onTapOutsideProxy(PointerDownEvent onTapOutside_event$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onTapOutside!,
            [onTapOutside_event$],
            {},
          );
      String? validatorProxy(String? validator_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            validator!,
            [validator_value$],
            {},
          );
      return TextFormField(
        autocorrect: autocorrect ?? true,
        autofillHints:
            autofillHints == null ? null : Iterable.castFrom(autofillHints),
        autofocus: autofocus ?? false,
        autovalidateMode: autovalidateMode,
        buildCounter: buildCounter == null ? null : buildCounterProxy,
        contextMenuBuilder: contextMenuBuilder == null
            ? (BuildContext context, EditableTextState editableTextState) {
                return AdaptiveTextSelectionToolbar.editableText(
                  editableTextState: editableTextState,
                );
              }
            : contextMenuBuilderProxy,
        controller: controller,
        cursorColor: cursorColor,
        cursorHeight: cursorHeight,
        cursorRadius: cursorRadius,
        cursorWidth: cursorWidth ?? 2.0,
        decoration: decoration ?? const InputDecoration(),
        enableIMEPersonalizedLearning: enableIMEPersonalizedLearning ?? true,
        enableInteractiveSelection: enableInteractiveSelection,
        enableSuggestions: enableSuggestions ?? true,
        enabled: enabled,
        expands: expands ?? false,
        focusNode: focusNode,
        initialValue: initialValue,
        inputFormatters:
            inputFormatters == null ? null : List.from(inputFormatters),
        key: key,
        keyboardAppearance: keyboardAppearance,
        keyboardType: keyboardType,
        magnifierConfiguration: magnifierConfiguration,
        maxLength: maxLength,
        maxLengthEnforcement: maxLengthEnforcement,
        maxLines: maxLines ?? 1,
        minLines: minLines,
        mouseCursor: mouseCursor,
        obscureText: obscureText ?? false,
        obscuringCharacter: obscuringCharacter ?? 'â€¢',
        onChanged: onChanged == null ? null : onChangedProxy,
        onEditingComplete:
            onEditingComplete == null ? null : onEditingCompleteProxy,
        onFieldSubmitted:
            onFieldSubmitted == null ? null : onFieldSubmittedProxy,
        onSaved: onSaved == null ? null : onSavedProxy,
        onTap: onTap == null ? null : onTapProxy,
        onTapOutside: onTapOutside == null ? null : onTapOutsideProxy,
        readOnly: readOnly ?? false,
        restorationId: restorationId,
        scrollController: scrollController,
        scrollPadding: scrollPadding ?? const EdgeInsets.all(20.0),
        scrollPhysics: scrollPhysics,
        selectionControls: selectionControls,
        showCursor: showCursor,
        smartDashesType: smartDashesType,
        smartQuotesType: smartQuotesType,
        spellCheckConfiguration: spellCheckConfiguration,
        strutStyle: strutStyle,
        style: style,
        textAlign: textAlign ?? TextAlign.start,
        textAlignVertical: textAlignVertical,
        textCapitalization: textCapitalization ?? TextCapitalization.none,
        textDirection: textDirection,
        textInputAction: textInputAction,
        toolbarOptions: toolbarOptions,
        validator: validator == null ? null : validatorProxy,
      );
    };
Function _TextFormField_createState$(
  m.Scope scope$,
  TextFormField target$,
) =>
    target$.createState;
