// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/toggleable.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/toggleable.dart',
  {},
  {},
  {
    'ToggleablePainter': m.ClassMirror(
      'ToggleablePainter',
      {
        '#as': ToggleablePainter_as$,
        '#is': ToggleablePainter_is$,
        'activeColor': _ToggleablePainter_activeColor$,
        'inactiveColor': _ToggleablePainter_inactiveColor$,
        'focusColor': _ToggleablePainter_focusColor$,
        'downPosition': _ToggleablePainter_downPosition$,
        'isFocused': _ToggleablePainter_isFocused$,
        'isActive': _ToggleablePainter_isActive$,
        'semanticsBuilder': _ToggleablePainter_semanticsBuilder$,
        'shouldRepaint': _ToggleablePainter_shouldRepaint$,
        'hitTest': _ToggleablePainter_hitTest$,
        'shouldRebuildSemantics': _ToggleablePainter_shouldRebuildSemantics$,
        'toString': _ToggleablePainter_toString$,
      },
      {
        'activeColor': _ToggleablePainter_activeColor_set$,
        'inactiveColor': _ToggleablePainter_inactiveColor_set$,
        'focusColor': _ToggleablePainter_focusColor_set$,
        'downPosition': _ToggleablePainter_downPosition_set$,
        'isFocused': _ToggleablePainter_isFocused_set$,
        'isActive': _ToggleablePainter_isActive_set$,
      },
    )
  },
);
Function ToggleablePainter_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ToggleablePainter;
Function ToggleablePainter_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ToggleablePainter;
Function _ToggleablePainter_activeColor$(
  m.Scope scope$,
  ToggleablePainter target$,
) =>
    () {
      return target$.activeColor;
    };
void _ToggleablePainter_activeColor_set$(
  m.Scope scope$,
  ToggleablePainter target$,
) =>
    (dynamic other$) {
      target$.activeColor = other$;
    };
Function _ToggleablePainter_inactiveColor$(
  m.Scope scope$,
  ToggleablePainter target$,
) =>
    () {
      return target$.inactiveColor;
    };
void _ToggleablePainter_inactiveColor_set$(
  m.Scope scope$,
  ToggleablePainter target$,
) =>
    (dynamic other$) {
      target$.inactiveColor = other$;
    };
Function _ToggleablePainter_focusColor$(
  m.Scope scope$,
  ToggleablePainter target$,
) =>
    () {
      return target$.focusColor;
    };
void _ToggleablePainter_focusColor_set$(
  m.Scope scope$,
  ToggleablePainter target$,
) =>
    (dynamic other$) {
      target$.focusColor = other$;
    };
Function _ToggleablePainter_downPosition$(
  m.Scope scope$,
  ToggleablePainter target$,
) =>
    () {
      return target$.downPosition;
    };
void _ToggleablePainter_downPosition_set$(
  m.Scope scope$,
  ToggleablePainter target$,
) =>
    (dynamic other$) {
      target$.downPosition = other$;
    };
Function _ToggleablePainter_isFocused$(
  m.Scope scope$,
  ToggleablePainter target$,
) =>
    () {
      return target$.isFocused;
    };
void _ToggleablePainter_isFocused_set$(
  m.Scope scope$,
  ToggleablePainter target$,
) =>
    (dynamic other$) {
      target$.isFocused = other$;
    };
Function _ToggleablePainter_isActive$(
  m.Scope scope$,
  ToggleablePainter target$,
) =>
    () {
      return target$.isActive;
    };
void _ToggleablePainter_isActive_set$(
  m.Scope scope$,
  ToggleablePainter target$,
) =>
    (dynamic other$) {
      target$.isActive = other$;
    };
Function _ToggleablePainter_semanticsBuilder$(
  m.Scope scope$,
  ToggleablePainter target$,
) =>
    () {
      return target$.semanticsBuilder;
    };
Function _ToggleablePainter_shouldRepaint$(
  m.Scope scope$,
  ToggleablePainter target$,
) =>
    target$.shouldRepaint;
Function _ToggleablePainter_hitTest$(
  m.Scope scope$,
  ToggleablePainter target$,
) =>
    target$.hitTest;
Function _ToggleablePainter_shouldRebuildSemantics$(
  m.Scope scope$,
  ToggleablePainter target$,
) =>
    target$.shouldRebuildSemantics;
Function _ToggleablePainter_toString$(
  m.Scope scope$,
  ToggleablePainter target$,
) =>
    target$.toString;
