// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/hardware_keyboard.dart';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/services/binding.dart';
import 'package:flutter/src/services/raw_keyboard.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/hardware_keyboard.dart',
  {
    'HardwareKeyboard.instance': _HardwareKeyboard_instance$,
    'KeyboardLockMode.numLock': _KeyboardLockMode_numLock$,
    'KeyboardLockMode.scrollLock': _KeyboardLockMode_scrollLock$,
    'KeyboardLockMode.capsLock': _KeyboardLockMode_capsLock$,
    'KeyboardLockMode.values': _KeyboardLockMode_values$,
    'KeyboardLockMode.findLockByLogicalKey': _findLockByLogicalKey$,
    'KeyDataTransitMode.rawKeyData': _KeyDataTransitMode_rawKeyData$,
    'KeyDataTransitMode.keyDataThenRawKeyData':
        _KeyDataTransitMode_keyDataThenRawKeyData$,
    'KeyDataTransitMode.values': _KeyDataTransitMode_values$,
  },
  {},
  {
    'KeyEvent': m.ClassMirror(
      'KeyEvent',
      {
        'physicalKey': _KeyEvent_physicalKey$,
        'logicalKey': _KeyEvent_logicalKey$,
        'character': _KeyEvent_character$,
        'timeStamp': _KeyEvent_timeStamp$,
        'synthesized': _KeyEvent_synthesized$,
        'debugFillProperties': _KeyEvent_debugFillProperties$,
      },
      {},
    ),
    'KeyDownEvent': m.ClassMirror(
      'KeyDownEvent',
      {},
      {},
    ),
    'KeyUpEvent': m.ClassMirror(
      'KeyUpEvent',
      {},
      {},
    ),
    'KeyRepeatEvent': m.ClassMirror(
      'KeyRepeatEvent',
      {},
      {},
    ),
    'HardwareKeyboard': m.ClassMirror(
      'HardwareKeyboard',
      {
        'physicalKeysPressed': _HardwareKeyboard_physicalKeysPressed$,
        'logicalKeysPressed': _HardwareKeyboard_logicalKeysPressed$,
        'lockModesEnabled': _HardwareKeyboard_lockModesEnabled$,
        'lookUpLayout': _HardwareKeyboard_lookUpLayout$,
        'handleKeyEvent': _HardwareKeyboard_handleKeyEvent$,
        'clearState': _HardwareKeyboard_clearState$,
      },
      {},
    ),
    'KeyMessage': m.ClassMirror(
      'KeyMessage',
      {
        'events': _KeyMessage_events$,
        'rawEvent': _KeyMessage_rawEvent$,
        'toString': _KeyMessage_toString$,
      },
      {},
    ),
    'KeyEventManager': m.ClassMirror(
      'KeyEventManager',
      {
        'keyMessageHandler': _KeyEventManager_keyMessageHandler$,
        'handleKeyData': _KeyEventManager_handleKeyData$,
        'handleRawKeyMessage': _KeyEventManager_handleRawKeyMessage$,
        'clearState': _KeyEventManager_clearState$,
      },
      {'keyMessageHandler': _KeyEventManager_keyMessageHandler_set$},
    ),
    'KeyboardLockMode': m.ClassMirror(
      'KeyboardLockMode',
      {'logicalKey': _KeyboardLockMode_logicalKey$},
      {},
    ),
    'KeyDataTransitMode': m.ClassMirror(
      'KeyDataTransitMode',
      {},
      {},
    ),
  },
);
PhysicalKeyboardKey _KeyEvent_physicalKey$(KeyEvent target) {
  return target.physicalKey;
}

LogicalKeyboardKey _KeyEvent_logicalKey$(KeyEvent target) {
  return target.logicalKey;
}

String? _KeyEvent_character$(KeyEvent target) {
  return target.character;
}

Duration _KeyEvent_timeStamp$(KeyEvent target) {
  return target.timeStamp;
}

bool _KeyEvent_synthesized$(KeyEvent target) {
  return target.synthesized;
}

Function _KeyEvent_debugFillProperties$(
  m.Scope scope,
  KeyEvent target,
) =>
    target.debugFillProperties;
HardwareKeyboard _HardwareKeyboard_instance$() {
  return HardwareKeyboard.instance;
}

Set<PhysicalKeyboardKey> _HardwareKeyboard_physicalKeysPressed$(
    HardwareKeyboard target) {
  return target.physicalKeysPressed;
}

Set<LogicalKeyboardKey> _HardwareKeyboard_logicalKeysPressed$(
    HardwareKeyboard target) {
  return target.logicalKeysPressed;
}

Set<KeyboardLockMode> _HardwareKeyboard_lockModesEnabled$(
    HardwareKeyboard target) {
  return target.lockModesEnabled;
}

Function _HardwareKeyboard_lookUpLayout$(
  m.Scope scope,
  HardwareKeyboard target,
) =>
    target.lookUpLayout;
Function _HardwareKeyboard_handleKeyEvent$(
  m.Scope scope,
  HardwareKeyboard target,
) =>
    target.handleKeyEvent;
Function _HardwareKeyboard_clearState$(
  m.Scope scope,
  HardwareKeyboard target,
) =>
    target.clearState;
List<KeyEvent> _KeyMessage_events$(KeyMessage target) {
  return target.events;
}

RawKeyEvent? _KeyMessage_rawEvent$(KeyMessage target) {
  return target.rawEvent;
}

Function _KeyMessage_toString$(
  m.Scope scope,
  KeyMessage target,
) =>
    target.toString;
bool Function(KeyMessage)? _KeyEventManager_keyMessageHandler$(
    KeyEventManager target) {
  return target.keyMessageHandler;
}

Function _KeyEventManager_keyMessageHandler_set$(
  m.Scope scope,
  KeyEventManager target,
) =>
    (m.FunctionPointer? _keyMessageHandler) {
      bool _keyMessageHandlerProxy(KeyMessage _keyMessageHandler_message) =>
          scope.engine.callFunctionPointer(
            scope,
            _keyMessageHandler!,
            [_keyMessageHandler_message],
            {},
          );
      target.keyMessageHandler =
          (_keyMessageHandler == null ? null : _keyMessageHandlerProxy);
    };
Function _KeyEventManager_handleKeyData$(
  m.Scope scope,
  KeyEventManager target,
) =>
    target.handleKeyData;
Function _KeyEventManager_handleRawKeyMessage$(
  m.Scope scope,
  KeyEventManager target,
) =>
    target.handleRawKeyMessage;
Function _KeyEventManager_clearState$(
  m.Scope scope,
  KeyEventManager target,
) =>
    target.clearState;
KeyboardLockMode _KeyboardLockMode_numLock$() {
  return KeyboardLockMode.numLock;
}

KeyboardLockMode _KeyboardLockMode_scrollLock$() {
  return KeyboardLockMode.scrollLock;
}

KeyboardLockMode _KeyboardLockMode_capsLock$() {
  return KeyboardLockMode.capsLock;
}

List<KeyboardLockMode> _KeyboardLockMode_values$() {
  return KeyboardLockMode.values;
}

LogicalKeyboardKey _KeyboardLockMode_logicalKey$(KeyboardLockMode target) {
  return target.logicalKey;
}

Function _findLockByLogicalKey$(m.Scope scope) =>
    KeyboardLockMode.findLockByLogicalKey;
KeyDataTransitMode _KeyDataTransitMode_rawKeyData$() {
  return KeyDataTransitMode.rawKeyData;
}

KeyDataTransitMode _KeyDataTransitMode_keyDataThenRawKeyData$() {
  return KeyDataTransitMode.keyDataThenRawKeyData;
}

List<KeyDataTransitMode> _KeyDataTransitMode_values$() {
  return KeyDataTransitMode.values;
}
