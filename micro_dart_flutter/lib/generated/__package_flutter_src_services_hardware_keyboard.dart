// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/hardware_keyboard.dart';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/services/binding.dart';
import 'package:flutter/src/services/raw_keyboard.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/hardware_keyboard.dart',
  {
    'KeyDownEvent.': _KeyDownEvent__$,
    'KeyUpEvent.': _KeyUpEvent__$,
    'KeyRepeatEvent.': _KeyRepeatEvent__$,
    'HardwareKeyboard.instance': _HardwareKeyboard_instance$,
    'HardwareKeyboard.': _HardwareKeyboard__$,
    'KeyMessage.': _KeyMessage__$,
    'KeyEventManager.': _KeyEventManager__$,
    'KeyboardLockMode.numLock': _KeyboardLockMode_numLock$,
    'KeyboardLockMode.scrollLock': _KeyboardLockMode_scrollLock$,
    'KeyboardLockMode.capsLock': _KeyboardLockMode_capsLock$,
    'KeyboardLockMode.values': _KeyboardLockMode_values$,
    'KeyboardLockMode.findLockByLogicalKey': _findLockByLogicalKey$,
    'KeyDataTransitMode.rawKeyData': _KeyDataTransitMode_rawKeyData$,
    'KeyDataTransitMode.keyDataThenRawKeyData':
        _KeyDataTransitMode_keyDataThenRawKeyData$,
    'KeyDataTransitMode.values': _KeyDataTransitMode_values$,
  },
  {},
  {
    'KeyEvent': m.ClassMirror(
      'KeyEvent',
      {
        '#as': KeyEvent_as$,
        '#is': KeyEvent_is$,
        'physicalKey': _KeyEvent_physicalKey$,
        'logicalKey': _KeyEvent_logicalKey$,
        'character': _KeyEvent_character$,
        'timeStamp': _KeyEvent_timeStamp$,
        'synthesized': _KeyEvent_synthesized$,
        'debugFillProperties': _KeyEvent_debugFillProperties$,
      },
      {},
    ),
    'KeyDownEvent': m.ClassMirror(
      'KeyDownEvent',
      {
        '#as': KeyDownEvent_as$,
        '#is': KeyDownEvent_is$,
      },
      {},
    ),
    'KeyUpEvent': m.ClassMirror(
      'KeyUpEvent',
      {
        '#as': KeyUpEvent_as$,
        '#is': KeyUpEvent_is$,
      },
      {},
    ),
    'KeyRepeatEvent': m.ClassMirror(
      'KeyRepeatEvent',
      {
        '#as': KeyRepeatEvent_as$,
        '#is': KeyRepeatEvent_is$,
      },
      {},
    ),
    'HardwareKeyboard': m.ClassMirror(
      'HardwareKeyboard',
      {
        '#as': HardwareKeyboard_as$,
        '#is': HardwareKeyboard_is$,
        'physicalKeysPressed': _HardwareKeyboard_physicalKeysPressed$,
        'logicalKeysPressed': _HardwareKeyboard_logicalKeysPressed$,
        'lockModesEnabled': _HardwareKeyboard_lockModesEnabled$,
        'lookUpLayout': _HardwareKeyboard_lookUpLayout$,
        'addHandler': _HardwareKeyboard_addHandler$,
        'removeHandler': _HardwareKeyboard_removeHandler$,
        'handleKeyEvent': _HardwareKeyboard_handleKeyEvent$,
        'clearState': _HardwareKeyboard_clearState$,
      },
      {},
    ),
    'KeyMessage': m.ClassMirror(
      'KeyMessage',
      {
        '#as': KeyMessage_as$,
        '#is': KeyMessage_is$,
        'events': _KeyMessage_events$,
        'rawEvent': _KeyMessage_rawEvent$,
        'toString': _KeyMessage_toString$,
      },
      {},
    ),
    'KeyEventManager': m.ClassMirror(
      'KeyEventManager',
      {
        '#as': KeyEventManager_as$,
        '#is': KeyEventManager_is$,
        'keyMessageHandler': _KeyEventManager_keyMessageHandler$,
        'handleKeyData': _KeyEventManager_handleKeyData$,
        'handleRawKeyMessage': _KeyEventManager_handleRawKeyMessage$,
        'clearState': _KeyEventManager_clearState$,
      },
      {'keyMessageHandler': _KeyEventManager_keyMessageHandler_set$},
    ),
    'KeyboardLockMode': m.ClassMirror(
      'KeyboardLockMode',
      {'logicalKey': _KeyboardLockMode_logicalKey$},
      {},
    ),
    'KeyDataTransitMode': m.ClassMirror(
      'KeyDataTransitMode',
      {},
      {},
    ),
  },
);
Function KeyEvent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as KeyEvent;
Function KeyEvent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is KeyEvent;
Function _KeyEvent_physicalKey$(
  m.Scope scope$,
  KeyEvent target$,
) =>
    () {
      return target$.physicalKey;
    };
Function _KeyEvent_logicalKey$(
  m.Scope scope$,
  KeyEvent target$,
) =>
    () {
      return target$.logicalKey;
    };
Function _KeyEvent_character$(
  m.Scope scope$,
  KeyEvent target$,
) =>
    () {
      return target$.character;
    };
Function _KeyEvent_timeStamp$(
  m.Scope scope$,
  KeyEvent target$,
) =>
    () {
      return target$.timeStamp;
    };
Function _KeyEvent_synthesized$(
  m.Scope scope$,
  KeyEvent target$,
) =>
    () {
      return target$.synthesized;
    };
Function _KeyEvent_debugFillProperties$(
  m.Scope scope$,
  KeyEvent target$,
) =>
    target$.debugFillProperties;
Function KeyDownEvent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as KeyDownEvent;
Function KeyDownEvent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is KeyDownEvent;
Function _KeyDownEvent__$(m.Scope scope$) => ({
      required PhysicalKeyboardKey physicalKey,
      required LogicalKeyboardKey logicalKey,
      String? character,
      required Duration timeStamp,
      bool? synthesized,
    }) {
      return KeyDownEvent(
        character: character,
        logicalKey: logicalKey,
        physicalKey: physicalKey,
        synthesized: synthesized ?? false,
        timeStamp: timeStamp,
      );
    };
Function KeyUpEvent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as KeyUpEvent;
Function KeyUpEvent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is KeyUpEvent;
Function _KeyUpEvent__$(m.Scope scope$) => ({
      required PhysicalKeyboardKey physicalKey,
      required LogicalKeyboardKey logicalKey,
      required Duration timeStamp,
      bool? synthesized,
    }) {
      return KeyUpEvent(
        logicalKey: logicalKey,
        physicalKey: physicalKey,
        synthesized: synthesized ?? false,
        timeStamp: timeStamp,
      );
    };
Function KeyRepeatEvent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as KeyRepeatEvent;
Function KeyRepeatEvent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is KeyRepeatEvent;
Function _KeyRepeatEvent__$(m.Scope scope$) => ({
      required PhysicalKeyboardKey physicalKey,
      required LogicalKeyboardKey logicalKey,
      String? character,
      required Duration timeStamp,
    }) {
      return KeyRepeatEvent(
        character: character,
        logicalKey: logicalKey,
        physicalKey: physicalKey,
        timeStamp: timeStamp,
      );
    };
Function HardwareKeyboard_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as HardwareKeyboard;
Function HardwareKeyboard_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is HardwareKeyboard;
Function _HardwareKeyboard_instance$(m.Scope scope$) =>
    () => HardwareKeyboard.instance;
Function _HardwareKeyboard_physicalKeysPressed$(
  m.Scope scope$,
  HardwareKeyboard target$,
) =>
    () {
      return target$.physicalKeysPressed;
    };
Function _HardwareKeyboard_logicalKeysPressed$(
  m.Scope scope$,
  HardwareKeyboard target$,
) =>
    () {
      return target$.logicalKeysPressed;
    };
Function _HardwareKeyboard_lockModesEnabled$(
  m.Scope scope$,
  HardwareKeyboard target$,
) =>
    () {
      return target$.lockModesEnabled;
    };
Function _HardwareKeyboard__$(m.Scope scope$) => () {
      return HardwareKeyboard();
    };
Function _HardwareKeyboard_lookUpLayout$(
  m.Scope scope$,
  HardwareKeyboard target$,
) =>
    target$.lookUpLayout;
Function _HardwareKeyboard_addHandler$(
  m.Scope scope$,
  HardwareKeyboard target$,
) =>
    (m.FunctionPointer handler) {
      bool handlerProxy(KeyEvent handler_event$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            handler,
            [handler_event$],
            {},
          );
      target$.addHandler(handlerProxy);
    };
Function _HardwareKeyboard_removeHandler$(
  m.Scope scope$,
  HardwareKeyboard target$,
) =>
    (m.FunctionPointer handler) {
      bool handlerProxy(KeyEvent handler_event$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            handler,
            [handler_event$],
            {},
          );
      target$.removeHandler(handlerProxy);
    };
Function _HardwareKeyboard_handleKeyEvent$(
  m.Scope scope$,
  HardwareKeyboard target$,
) =>
    target$.handleKeyEvent;
Function _HardwareKeyboard_clearState$(
  m.Scope scope$,
  HardwareKeyboard target$,
) =>
    target$.clearState;
Function KeyMessage_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as KeyMessage;
Function KeyMessage_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is KeyMessage;
Function _KeyMessage_events$(
  m.Scope scope$,
  KeyMessage target$,
) =>
    () {
      return target$.events;
    };
Function _KeyMessage_rawEvent$(
  m.Scope scope$,
  KeyMessage target$,
) =>
    () {
      return target$.rawEvent;
    };
Function _KeyMessage__$(m.Scope scope$) => (
      List events,
      RawKeyEvent? rawEvent,
    ) {
      return KeyMessage(
        List.from(events),
        rawEvent,
      );
    };
Function _KeyMessage_toString$(
  m.Scope scope$,
  KeyMessage target$,
) =>
    target$.toString;
Function KeyEventManager_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as KeyEventManager;
Function KeyEventManager_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is KeyEventManager;
Function _KeyEventManager_keyMessageHandler$(
  m.Scope scope$,
  KeyEventManager target$,
) =>
    () {
      return target$.keyMessageHandler;
    };
Function _KeyEventManager_keyMessageHandler_set$(
  m.Scope scope$,
  KeyEventManager target$,
) =>
    (m.FunctionPointer? _keyMessageHandler) {
      bool _keyMessageHandlerProxy(KeyMessage _keyMessageHandler_message$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            _keyMessageHandler!,
            [_keyMessageHandler_message$],
            {},
          );
      target$.keyMessageHandler =
          (_keyMessageHandler == null ? null : _keyMessageHandlerProxy);
    };
Function _KeyEventManager__$(m.Scope scope$) => (
      HardwareKeyboard _hardwareKeyboard,
      RawKeyboard _rawKeyboard,
    ) {
      return KeyEventManager(
        _hardwareKeyboard,
        _rawKeyboard,
      );
    };
Function _KeyEventManager_handleKeyData$(
  m.Scope scope$,
  KeyEventManager target$,
) =>
    target$.handleKeyData;
Function _KeyEventManager_handleRawKeyMessage$(
  m.Scope scope$,
  KeyEventManager target$,
) =>
    target$.handleRawKeyMessage;
Function _KeyEventManager_clearState$(
  m.Scope scope$,
  KeyEventManager target$,
) =>
    target$.clearState;
Function _KeyboardLockMode_numLock$(m.Scope scope$) =>
    () => KeyboardLockMode.numLock;
Function _KeyboardLockMode_scrollLock$(m.Scope scope$) =>
    () => KeyboardLockMode.scrollLock;
Function _KeyboardLockMode_capsLock$(m.Scope scope$) =>
    () => KeyboardLockMode.capsLock;
Function _KeyboardLockMode_values$(m.Scope scope$) =>
    () => KeyboardLockMode.values;
Function _KeyboardLockMode_logicalKey$(
  m.Scope scope$,
  KeyboardLockMode target$,
) =>
    () {
      return target$.logicalKey;
    };
Function _findLockByLogicalKey$(m.Scope scope$) =>
    KeyboardLockMode.findLockByLogicalKey;
Function _KeyDataTransitMode_rawKeyData$(m.Scope scope$) =>
    () => KeyDataTransitMode.rawKeyData;
Function _KeyDataTransitMode_keyDataThenRawKeyData$(m.Scope scope$) =>
    () => KeyDataTransitMode.keyDataThenRawKeyData;
Function _KeyDataTransitMode_values$(m.Scope scope$) =>
    () => KeyDataTransitMode.values;
