// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/navigation_rail.dart';
import 'dart:ui';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/navigation_bar.dart';
import 'package:flutter/src/material/navigation_rail_theme.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/navigation_rail.dart',
  {
    'NavigationRail.extendedAnimation': _NavigationRail_extendedAnimation$,
    'NavigationRailLabelType.none': _NavigationRailLabelType_none$,
    'NavigationRailLabelType.selected': _NavigationRailLabelType_selected$,
    'NavigationRailLabelType.all': _NavigationRailLabelType_all$,
    'NavigationRailLabelType.values': _NavigationRailLabelType_values$,
  },
  {},
  {
    'NavigationRail': m.ClassMirror(
      'NavigationRail',
      {
        'backgroundColor': _NavigationRail_backgroundColor$,
        'extended': _NavigationRail_extended$,
        'leading': _NavigationRail_leading$,
        'trailing': _NavigationRail_trailing$,
        'destinations': _NavigationRail_destinations$,
        'selectedIndex': _NavigationRail_selectedIndex$,
        'onDestinationSelected': _NavigationRail_onDestinationSelected$,
        'elevation': _NavigationRail_elevation$,
        'groupAlignment': _NavigationRail_groupAlignment$,
        'labelType': _NavigationRail_labelType$,
        'unselectedLabelTextStyle': _NavigationRail_unselectedLabelTextStyle$,
        'selectedLabelTextStyle': _NavigationRail_selectedLabelTextStyle$,
        'unselectedIconTheme': _NavigationRail_unselectedIconTheme$,
        'selectedIconTheme': _NavigationRail_selectedIconTheme$,
        'minWidth': _NavigationRail_minWidth$,
        'minExtendedWidth': _NavigationRail_minExtendedWidth$,
        'useIndicator': _NavigationRail_useIndicator$,
        'indicatorColor': _NavigationRail_indicatorColor$,
        'indicatorShape': _NavigationRail_indicatorShape$,
        'createState': _NavigationRail_createState$,
      },
      {},
    ),
    'NavigationRailDestination': m.ClassMirror(
      'NavigationRailDestination',
      {
        'icon': _NavigationRailDestination_icon$,
        'selectedIcon': _NavigationRailDestination_selectedIcon$,
        'indicatorColor': _NavigationRailDestination_indicatorColor$,
        'indicatorShape': _NavigationRailDestination_indicatorShape$,
        'label': _NavigationRailDestination_label$,
        'padding': _NavigationRailDestination_padding$,
      },
      {},
    ),
    'NavigationRailLabelType': m.ClassMirror(
      'NavigationRailLabelType',
      {},
      {},
    ),
  },
);
Color? _NavigationRail_backgroundColor$(NavigationRail target) {
  return target.backgroundColor;
}

bool _NavigationRail_extended$(NavigationRail target) {
  return target.extended;
}

Widget? _NavigationRail_leading$(NavigationRail target) {
  return target.leading;
}

Widget? _NavigationRail_trailing$(NavigationRail target) {
  return target.trailing;
}

List<NavigationRailDestination> _NavigationRail_destinations$(
    NavigationRail target) {
  return target.destinations;
}

int? _NavigationRail_selectedIndex$(NavigationRail target) {
  return target.selectedIndex;
}

void Function(int)? _NavigationRail_onDestinationSelected$(
    NavigationRail target) {
  return target.onDestinationSelected;
}

double? _NavigationRail_elevation$(NavigationRail target) {
  return target.elevation;
}

double? _NavigationRail_groupAlignment$(NavigationRail target) {
  return target.groupAlignment;
}

NavigationRailLabelType? _NavigationRail_labelType$(NavigationRail target) {
  return target.labelType;
}

TextStyle? _NavigationRail_unselectedLabelTextStyle$(NavigationRail target) {
  return target.unselectedLabelTextStyle;
}

TextStyle? _NavigationRail_selectedLabelTextStyle$(NavigationRail target) {
  return target.selectedLabelTextStyle;
}

IconThemeData? _NavigationRail_unselectedIconTheme$(NavigationRail target) {
  return target.unselectedIconTheme;
}

IconThemeData? _NavigationRail_selectedIconTheme$(NavigationRail target) {
  return target.selectedIconTheme;
}

double? _NavigationRail_minWidth$(NavigationRail target) {
  return target.minWidth;
}

double? _NavigationRail_minExtendedWidth$(NavigationRail target) {
  return target.minExtendedWidth;
}

bool? _NavigationRail_useIndicator$(NavigationRail target) {
  return target.useIndicator;
}

Color? _NavigationRail_indicatorColor$(NavigationRail target) {
  return target.indicatorColor;
}

ShapeBorder? _NavigationRail_indicatorShape$(NavigationRail target) {
  return target.indicatorShape;
}

Function _NavigationRail_extendedAnimation$(m.Scope scope) =>
    NavigationRail.extendedAnimation;
Function _NavigationRail_createState$(
  m.Scope scope,
  NavigationRail target,
) =>
    target.createState;
Widget _NavigationRailDestination_icon$(NavigationRailDestination target) {
  return target.icon;
}

Widget _NavigationRailDestination_selectedIcon$(
    NavigationRailDestination target) {
  return target.selectedIcon;
}

Color? _NavigationRailDestination_indicatorColor$(
    NavigationRailDestination target) {
  return target.indicatorColor;
}

ShapeBorder? _NavigationRailDestination_indicatorShape$(
    NavigationRailDestination target) {
  return target.indicatorShape;
}

Widget _NavigationRailDestination_label$(NavigationRailDestination target) {
  return target.label;
}

EdgeInsetsGeometry? _NavigationRailDestination_padding$(
    NavigationRailDestination target) {
  return target.padding;
}

NavigationRailLabelType _NavigationRailLabelType_none$() {
  return NavigationRailLabelType.none;
}

NavigationRailLabelType _NavigationRailLabelType_selected$() {
  return NavigationRailLabelType.selected;
}

NavigationRailLabelType _NavigationRailLabelType_all$() {
  return NavigationRailLabelType.all;
}

List<NavigationRailLabelType> _NavigationRailLabelType_values$() {
  return NavigationRailLabelType.values;
}
