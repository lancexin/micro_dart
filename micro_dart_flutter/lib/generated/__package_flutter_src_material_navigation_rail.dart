// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/navigation_rail.dart';
import 'dart:ui';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/navigation_bar.dart';
import 'package:flutter/src/material/navigation_rail_theme.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/navigation_rail.dart',
  {
    'NavigationRail.': _NavigationRail__$,
    'NavigationRail.extendedAnimation': _NavigationRail_extendedAnimation$,
    'NavigationRailDestination.': _NavigationRailDestination__$,
    'NavigationRailLabelType.none': _NavigationRailLabelType_none$,
    'NavigationRailLabelType.selected': _NavigationRailLabelType_selected$,
    'NavigationRailLabelType.all': _NavigationRailLabelType_all$,
    'NavigationRailLabelType.values': _NavigationRailLabelType_values$,
  },
  {},
  {
    'NavigationRail': m.ClassMirror(
      'NavigationRail',
      {
        '#as': NavigationRail_as$,
        '#is': NavigationRail_is$,
        'backgroundColor': _NavigationRail_backgroundColor$,
        'extended': _NavigationRail_extended$,
        'leading': _NavigationRail_leading$,
        'trailing': _NavigationRail_trailing$,
        'destinations': _NavigationRail_destinations$,
        'selectedIndex': _NavigationRail_selectedIndex$,
        'onDestinationSelected': _NavigationRail_onDestinationSelected$,
        'elevation': _NavigationRail_elevation$,
        'groupAlignment': _NavigationRail_groupAlignment$,
        'labelType': _NavigationRail_labelType$,
        'unselectedLabelTextStyle': _NavigationRail_unselectedLabelTextStyle$,
        'selectedLabelTextStyle': _NavigationRail_selectedLabelTextStyle$,
        'unselectedIconTheme': _NavigationRail_unselectedIconTheme$,
        'selectedIconTheme': _NavigationRail_selectedIconTheme$,
        'minWidth': _NavigationRail_minWidth$,
        'minExtendedWidth': _NavigationRail_minExtendedWidth$,
        'useIndicator': _NavigationRail_useIndicator$,
        'indicatorColor': _NavigationRail_indicatorColor$,
        'indicatorShape': _NavigationRail_indicatorShape$,
        'createState': _NavigationRail_createState$,
      },
      {},
    ),
    'NavigationRailDestination': m.ClassMirror(
      'NavigationRailDestination',
      {
        '#as': NavigationRailDestination_as$,
        '#is': NavigationRailDestination_is$,
        'icon': _NavigationRailDestination_icon$,
        'selectedIcon': _NavigationRailDestination_selectedIcon$,
        'indicatorColor': _NavigationRailDestination_indicatorColor$,
        'indicatorShape': _NavigationRailDestination_indicatorShape$,
        'label': _NavigationRailDestination_label$,
        'padding': _NavigationRailDestination_padding$,
      },
      {},
    ),
    'NavigationRailLabelType': m.ClassMirror(
      'NavigationRailLabelType',
      {},
      {},
    ),
  },
);
Function NavigationRail_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as NavigationRail;
Function NavigationRail_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is NavigationRail;
Function _NavigationRail_backgroundColor$(
  m.Scope scope$,
  NavigationRail target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _NavigationRail_extended$(
  m.Scope scope$,
  NavigationRail target$,
) =>
    () {
      return target$.extended;
    };
Function _NavigationRail_leading$(
  m.Scope scope$,
  NavigationRail target$,
) =>
    () {
      return target$.leading;
    };
Function _NavigationRail_trailing$(
  m.Scope scope$,
  NavigationRail target$,
) =>
    () {
      return target$.trailing;
    };
Function _NavigationRail_destinations$(
  m.Scope scope$,
  NavigationRail target$,
) =>
    () {
      return target$.destinations;
    };
Function _NavigationRail_selectedIndex$(
  m.Scope scope$,
  NavigationRail target$,
) =>
    () {
      return target$.selectedIndex;
    };
Function _NavigationRail_onDestinationSelected$(
  m.Scope scope$,
  NavigationRail target$,
) =>
    () {
      return target$.onDestinationSelected;
    };
Function _NavigationRail_elevation$(
  m.Scope scope$,
  NavigationRail target$,
) =>
    () {
      return target$.elevation;
    };
Function _NavigationRail_groupAlignment$(
  m.Scope scope$,
  NavigationRail target$,
) =>
    () {
      return target$.groupAlignment;
    };
Function _NavigationRail_labelType$(
  m.Scope scope$,
  NavigationRail target$,
) =>
    () {
      return target$.labelType;
    };
Function _NavigationRail_unselectedLabelTextStyle$(
  m.Scope scope$,
  NavigationRail target$,
) =>
    () {
      return target$.unselectedLabelTextStyle;
    };
Function _NavigationRail_selectedLabelTextStyle$(
  m.Scope scope$,
  NavigationRail target$,
) =>
    () {
      return target$.selectedLabelTextStyle;
    };
Function _NavigationRail_unselectedIconTheme$(
  m.Scope scope$,
  NavigationRail target$,
) =>
    () {
      return target$.unselectedIconTheme;
    };
Function _NavigationRail_selectedIconTheme$(
  m.Scope scope$,
  NavigationRail target$,
) =>
    () {
      return target$.selectedIconTheme;
    };
Function _NavigationRail_minWidth$(
  m.Scope scope$,
  NavigationRail target$,
) =>
    () {
      return target$.minWidth;
    };
Function _NavigationRail_minExtendedWidth$(
  m.Scope scope$,
  NavigationRail target$,
) =>
    () {
      return target$.minExtendedWidth;
    };
Function _NavigationRail_useIndicator$(
  m.Scope scope$,
  NavigationRail target$,
) =>
    () {
      return target$.useIndicator;
    };
Function _NavigationRail_indicatorColor$(
  m.Scope scope$,
  NavigationRail target$,
) =>
    () {
      return target$.indicatorColor;
    };
Function _NavigationRail_indicatorShape$(
  m.Scope scope$,
  NavigationRail target$,
) =>
    () {
      return target$.indicatorShape;
    };
Function _NavigationRail__$(m.Scope scope$) => ({
      Key? key,
      Color? backgroundColor,
      bool? extended,
      Widget? leading,
      Widget? trailing,
      required List destinations,
      required int? selectedIndex,
      m.FunctionPointer? onDestinationSelected,
      double? elevation,
      double? groupAlignment,
      NavigationRailLabelType? labelType,
      TextStyle? unselectedLabelTextStyle,
      TextStyle? selectedLabelTextStyle,
      IconThemeData? unselectedIconTheme,
      IconThemeData? selectedIconTheme,
      double? minWidth,
      double? minExtendedWidth,
      bool? useIndicator,
      Color? indicatorColor,
      ShapeBorder? indicatorShape,
    }) {
      void onDestinationSelectedProxy(int onDestinationSelected_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onDestinationSelected!,
            [onDestinationSelected_value$],
            {},
          );
      return NavigationRail(
        backgroundColor: backgroundColor,
        destinations: List.from(destinations),
        elevation: elevation,
        extended: extended ?? false,
        groupAlignment: groupAlignment,
        indicatorColor: indicatorColor,
        indicatorShape: indicatorShape,
        key: key,
        labelType: labelType,
        leading: leading,
        minExtendedWidth: minExtendedWidth,
        minWidth: minWidth,
        onDestinationSelected:
            onDestinationSelected == null ? null : onDestinationSelectedProxy,
        selectedIconTheme: selectedIconTheme,
        selectedIndex: selectedIndex,
        selectedLabelTextStyle: selectedLabelTextStyle,
        trailing: trailing,
        unselectedIconTheme: unselectedIconTheme,
        unselectedLabelTextStyle: unselectedLabelTextStyle,
        useIndicator: useIndicator,
      );
    };
Function _NavigationRail_extendedAnimation$(m.Scope scope$) =>
    NavigationRail.extendedAnimation;
Function _NavigationRail_createState$(
  m.Scope scope$,
  NavigationRail target$,
) =>
    target$.createState;
Function NavigationRailDestination_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as NavigationRailDestination;
Function NavigationRailDestination_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is NavigationRailDestination;
Function _NavigationRailDestination_icon$(
  m.Scope scope$,
  NavigationRailDestination target$,
) =>
    () {
      return target$.icon;
    };
Function _NavigationRailDestination_selectedIcon$(
  m.Scope scope$,
  NavigationRailDestination target$,
) =>
    () {
      return target$.selectedIcon;
    };
Function _NavigationRailDestination_indicatorColor$(
  m.Scope scope$,
  NavigationRailDestination target$,
) =>
    () {
      return target$.indicatorColor;
    };
Function _NavigationRailDestination_indicatorShape$(
  m.Scope scope$,
  NavigationRailDestination target$,
) =>
    () {
      return target$.indicatorShape;
    };
Function _NavigationRailDestination_label$(
  m.Scope scope$,
  NavigationRailDestination target$,
) =>
    () {
      return target$.label;
    };
Function _NavigationRailDestination_padding$(
  m.Scope scope$,
  NavigationRailDestination target$,
) =>
    () {
      return target$.padding;
    };
Function _NavigationRailDestination__$(m.Scope scope$) => ({
      required Widget icon,
      Widget? selectedIcon,
      Color? indicatorColor,
      ShapeBorder? indicatorShape,
      required Widget label,
      EdgeInsetsGeometry? padding,
    }) {
      return NavigationRailDestination(
        icon: icon,
        indicatorColor: indicatorColor,
        indicatorShape: indicatorShape,
        label: label,
        padding: padding,
        selectedIcon: selectedIcon,
      );
    };
NavigationRailLabelType _NavigationRailLabelType_none$() {
  return NavigationRailLabelType.none;
}

NavigationRailLabelType _NavigationRailLabelType_selected$() {
  return NavigationRailLabelType.selected;
}

NavigationRailLabelType _NavigationRailLabelType_all$() {
  return NavigationRailLabelType.all;
}

List<NavigationRailLabelType> _NavigationRailLabelType_values$() {
  return NavigationRailLabelType.values;
}
