// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/widget_span.dart';
import 'dart:ui' show ParagraphBuilder, PlaceholderAlignment;
import 'package:flutter/painting.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/widget_span.dart',
  {
    'WidgetSpan.': _WidgetSpan__$,
    'WidgetSpan.visitChildren': _WidgetSpan_visitChildren$,
  },
  {},
  {
    'WidgetSpan': m.ClassMirror(
      'WidgetSpan',
      {
        '#as': WidgetSpan_as$,
        '#is': WidgetSpan_is$,
        'child': _WidgetSpan_child$,
        'hashCode': _WidgetSpan_hashCode$,
        'build': _WidgetSpan_build$,
        'getSpanForPositionVisitor': _WidgetSpan_getSpanForPositionVisitor$,
        'codeUnitAtVisitor': _WidgetSpan_codeUnitAtVisitor$,
        'compareTo': _WidgetSpan_compareTo$,
        '==': _WidgetSpan_eq$$,
        'getSpanForPosition': _WidgetSpan_getSpanForPosition$,
        'debugAssertIsValid': _WidgetSpan_debugAssertIsValid$,
      },
      {},
    )
  },
);
Function WidgetSpan_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as WidgetSpan;
Function WidgetSpan_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is WidgetSpan;
Function _WidgetSpan_child$(
  m.Scope scope$,
  WidgetSpan target$,
) =>
    () {
      return target$.child;
    };
Function _WidgetSpan_hashCode$(
  m.Scope scope$,
  WidgetSpan target$,
) =>
    () {
      return target$.hashCode;
    };
Function _WidgetSpan__$(m.Scope scope$) => ({
      required Widget child,
      PlaceholderAlignment? alignment,
      TextBaseline? baseline,
      TextStyle? style,
    }) {
      return WidgetSpan(
        alignment: alignment ?? PlaceholderAlignment.bottom,
        baseline: baseline,
        child: child,
        style: style,
      );
    };
Function _WidgetSpan_build$(
  m.Scope scope$,
  WidgetSpan target$,
) =>
    target$.build;
Function _WidgetSpan_visitChildren$(
  m.Scope scope$,
  WidgetSpan target$,
) =>
    (m.FunctionPointer visitor) {
      bool visitorProxy(InlineSpan visitor_span$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            visitor,
            [visitor_span$],
            {},
          );
      return target$.visitChildren(visitorProxy);
    };
Function _WidgetSpan_getSpanForPositionVisitor$(
  m.Scope scope$,
  WidgetSpan target$,
) =>
    target$.getSpanForPositionVisitor;
Function _WidgetSpan_codeUnitAtVisitor$(
  m.Scope scope$,
  WidgetSpan target$,
) =>
    target$.codeUnitAtVisitor;
Function _WidgetSpan_compareTo$(
  m.Scope scope$,
  WidgetSpan target$,
) =>
    target$.compareTo;
Function _WidgetSpan_eq$$(
  m.Scope scope$,
  WidgetSpan target$,
) =>
    (Object other$) => target$ == other$;
Function _WidgetSpan_getSpanForPosition$(
  m.Scope scope$,
  WidgetSpan target$,
) =>
    target$.getSpanForPosition;
Function _WidgetSpan_debugAssertIsValid$(
  m.Scope scope$,
  WidgetSpan target$,
) =>
    target$.debugAssertIsValid;
