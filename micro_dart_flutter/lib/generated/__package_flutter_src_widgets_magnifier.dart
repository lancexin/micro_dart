// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/magnifier.dart';
import 'dart:async';
import 'dart:math';
import 'dart:ui';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/container.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/inherited_theme.dart';
import 'package:flutter/src/widgets/navigator.dart';
import 'package:flutter/src/widgets/overlay.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/magnifier.dart',
  {
    'MagnifierInfo.empty': _MagnifierInfo_empty$,
    'TextMagnifierConfiguration.disabled':
        _TextMagnifierConfiguration_disabled$,
    'MagnifierController.show': _MagnifierController_show$,
    'MagnifierController.shiftWithinBounds':
        _MagnifierController_shiftWithinBounds$,
  },
  {},
  {
    'MagnifierInfo': m.ClassMirror(
      'MagnifierInfo',
      {
        '#as': MagnifierInfo_as$,
        '#is': MagnifierInfo_is$,
        'globalGesturePosition': _MagnifierInfo_globalGesturePosition$,
        'currentLineBoundaries': _MagnifierInfo_currentLineBoundaries$,
        'caretRect': _MagnifierInfo_caretRect$,
        'fieldBounds': _MagnifierInfo_fieldBounds$,
        'hashCode': _MagnifierInfo_hashCode$,
        '==': _MagnifierInfo_eq$$,
      },
      {},
    ),
    'TextMagnifierConfiguration': m.ClassMirror(
      'TextMagnifierConfiguration',
      {
        '#as': TextMagnifierConfiguration_as$,
        '#is': TextMagnifierConfiguration_is$,
        'shouldDisplayHandlesInMagnifier':
            _TextMagnifierConfiguration_shouldDisplayHandlesInMagnifier$,
        'magnifierBuilder': _TextMagnifierConfiguration_magnifierBuilder$,
      },
      {},
    ),
    'MagnifierController': m.ClassMirror(
      'MagnifierController',
      {
        '#as': MagnifierController_as$,
        '#is': MagnifierController_is$,
        'animationController': _MagnifierController_animationController$,
        'overlayEntry': _MagnifierController_overlayEntry$,
        'shown': _MagnifierController_shown$,
        'hide': _MagnifierController_hide$,
        'removeFromOverlay': _MagnifierController_removeFromOverlay$,
      },
      {'animationController': _MagnifierController_animationController_set$},
    ),
    'MagnifierDecoration': m.ClassMirror(
      'MagnifierDecoration',
      {
        '#as': MagnifierDecoration_as$,
        '#is': MagnifierDecoration_is$,
        'opacity': _MagnifierDecoration_opacity$,
        'hashCode': _MagnifierDecoration_hashCode$,
        '==': _MagnifierDecoration_eq$$,
      },
      {},
    ),
    'RawMagnifier': m.ClassMirror(
      'RawMagnifier',
      {
        '#as': RawMagnifier_as$,
        '#is': RawMagnifier_is$,
        'child': _RawMagnifier_child$,
        'decoration': _RawMagnifier_decoration$,
        'focalPointOffset': _RawMagnifier_focalPointOffset$,
        'magnificationScale': _RawMagnifier_magnificationScale$,
        'size': _RawMagnifier_size$,
        'build': _RawMagnifier_build$,
      },
      {},
    ),
  },
);
Function MagnifierInfo_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as MagnifierInfo;
Function MagnifierInfo_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is MagnifierInfo;
MagnifierInfo _MagnifierInfo_empty$() {
  return MagnifierInfo.empty;
}

Offset _MagnifierInfo_globalGesturePosition$(MagnifierInfo target) {
  return target.globalGesturePosition;
}

Rect _MagnifierInfo_currentLineBoundaries$(MagnifierInfo target) {
  return target.currentLineBoundaries;
}

Rect _MagnifierInfo_caretRect$(MagnifierInfo target) {
  return target.caretRect;
}

Rect _MagnifierInfo_fieldBounds$(MagnifierInfo target) {
  return target.fieldBounds;
}

int _MagnifierInfo_hashCode$(MagnifierInfo target) {
  return target.hashCode;
}

Function _MagnifierInfo_eq$$(
  m.Scope scope,
  MagnifierInfo target,
) =>
    (Object other) => target == other;
Function TextMagnifierConfiguration_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as TextMagnifierConfiguration;
Function TextMagnifierConfiguration_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is TextMagnifierConfiguration;
bool _TextMagnifierConfiguration_shouldDisplayHandlesInMagnifier$(
    TextMagnifierConfiguration target) {
  return target.shouldDisplayHandlesInMagnifier;
}

TextMagnifierConfiguration _TextMagnifierConfiguration_disabled$() {
  return TextMagnifierConfiguration.disabled;
}

Widget? Function(
        BuildContext, MagnifierController, ValueNotifier<MagnifierInfo>)
    _TextMagnifierConfiguration_magnifierBuilder$(
        TextMagnifierConfiguration target) {
  return target.magnifierBuilder;
}

Function MagnifierController_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as MagnifierController;
Function MagnifierController_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is MagnifierController;
AnimationController? _MagnifierController_animationController$(
    MagnifierController target) {
  return target.animationController;
}

void _MagnifierController_animationController_set$(
  MagnifierController target,
  AnimationController? other,
) {
  target.animationController = other;
}

OverlayEntry? _MagnifierController_overlayEntry$(MagnifierController target) {
  return target.overlayEntry;
}

bool _MagnifierController_shown$(MagnifierController target) {
  return target.shown;
}

Function _MagnifierController_show$(
  m.Scope scope,
  MagnifierController target,
) =>
    ({
      OverlayEntry? below,
      required m.FunctionPointer builder,
      required BuildContext context,
      Widget? debugRequiredFor,
    }) {
      Widget builderProxy(BuildContext builder_context) =>
          scope.engine.callFunctionPointer(
            scope,
            builder,
            [builder_context],
            {},
          );
      return target.show(
        below: below,
        builder: builderProxy,
        context: context,
        debugRequiredFor: debugRequiredFor,
      );
    };
Function _MagnifierController_hide$(
  m.Scope scope,
  MagnifierController target,
) =>
    target.hide;
Function _MagnifierController_removeFromOverlay$(
  m.Scope scope,
  MagnifierController target,
) =>
    target.removeFromOverlay;
Function _MagnifierController_shiftWithinBounds$(m.Scope scope) =>
    MagnifierController.shiftWithinBounds;
Function MagnifierDecoration_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as MagnifierDecoration;
Function MagnifierDecoration_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is MagnifierDecoration;
double _MagnifierDecoration_opacity$(MagnifierDecoration target) {
  return target.opacity;
}

int _MagnifierDecoration_hashCode$(MagnifierDecoration target) {
  return target.hashCode;
}

Function _MagnifierDecoration_eq$$(
  m.Scope scope,
  MagnifierDecoration target,
) =>
    (Object other) => target == other;
Function RawMagnifier_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RawMagnifier;
Function RawMagnifier_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RawMagnifier;
Widget? _RawMagnifier_child$(RawMagnifier target) {
  return target.child;
}

MagnifierDecoration _RawMagnifier_decoration$(RawMagnifier target) {
  return target.decoration;
}

Offset _RawMagnifier_focalPointOffset$(RawMagnifier target) {
  return target.focalPointOffset;
}

double _RawMagnifier_magnificationScale$(RawMagnifier target) {
  return target.magnificationScale;
}

Size _RawMagnifier_size$(RawMagnifier target) {
  return target.size;
}

Function _RawMagnifier_build$(
  m.Scope scope,
  RawMagnifier target,
) =>
    target.build;
