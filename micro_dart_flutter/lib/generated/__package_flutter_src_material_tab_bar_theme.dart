// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/tab_bar_theme.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/tabs.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/tab_bar_theme.dart',
  {
    'TabBarTheme.': _TabBarTheme__$,
    'TabBarTheme.of': _TabBarTheme_of$,
    'TabBarTheme.lerp': _TabBarTheme_lerp$,
  },
  {},
  {
    'TabBarTheme': m.ClassMirror(
      'TabBarTheme',
      {
        '#as': TabBarTheme_as$,
        '#is': TabBarTheme_is$,
        'indicator': _TabBarTheme_indicator$,
        'indicatorColor': _TabBarTheme_indicatorColor$,
        'indicatorSize': _TabBarTheme_indicatorSize$,
        'dividerColor': _TabBarTheme_dividerColor$,
        'labelColor': _TabBarTheme_labelColor$,
        'labelPadding': _TabBarTheme_labelPadding$,
        'labelStyle': _TabBarTheme_labelStyle$,
        'unselectedLabelColor': _TabBarTheme_unselectedLabelColor$,
        'unselectedLabelStyle': _TabBarTheme_unselectedLabelStyle$,
        'overlayColor': _TabBarTheme_overlayColor$,
        'splashFactory': _TabBarTheme_splashFactory$,
        'mouseCursor': _TabBarTheme_mouseCursor$,
        'hashCode': _TabBarTheme_hashCode$,
        'copyWith': _TabBarTheme_copyWith$,
        '==': _TabBarTheme_eq$$,
      },
      {},
    )
  },
);
Function TabBarTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TabBarTheme;
Function TabBarTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TabBarTheme;
Function _TabBarTheme_indicator$(
  m.Scope scope$,
  TabBarTheme target$,
) =>
    () {
      return target$.indicator;
    };
Function _TabBarTheme_indicatorColor$(
  m.Scope scope$,
  TabBarTheme target$,
) =>
    () {
      return target$.indicatorColor;
    };
Function _TabBarTheme_indicatorSize$(
  m.Scope scope$,
  TabBarTheme target$,
) =>
    () {
      return target$.indicatorSize;
    };
Function _TabBarTheme_dividerColor$(
  m.Scope scope$,
  TabBarTheme target$,
) =>
    () {
      return target$.dividerColor;
    };
Function _TabBarTheme_labelColor$(
  m.Scope scope$,
  TabBarTheme target$,
) =>
    () {
      return target$.labelColor;
    };
Function _TabBarTheme_labelPadding$(
  m.Scope scope$,
  TabBarTheme target$,
) =>
    () {
      return target$.labelPadding;
    };
Function _TabBarTheme_labelStyle$(
  m.Scope scope$,
  TabBarTheme target$,
) =>
    () {
      return target$.labelStyle;
    };
Function _TabBarTheme_unselectedLabelColor$(
  m.Scope scope$,
  TabBarTheme target$,
) =>
    () {
      return target$.unselectedLabelColor;
    };
Function _TabBarTheme_unselectedLabelStyle$(
  m.Scope scope$,
  TabBarTheme target$,
) =>
    () {
      return target$.unselectedLabelStyle;
    };
Function _TabBarTheme_overlayColor$(
  m.Scope scope$,
  TabBarTheme target$,
) =>
    () {
      return target$.overlayColor;
    };
Function _TabBarTheme_splashFactory$(
  m.Scope scope$,
  TabBarTheme target$,
) =>
    () {
      return target$.splashFactory;
    };
Function _TabBarTheme_mouseCursor$(
  m.Scope scope$,
  TabBarTheme target$,
) =>
    () {
      return target$.mouseCursor;
    };
Function _TabBarTheme_hashCode$(
  m.Scope scope$,
  TabBarTheme target$,
) =>
    () {
      return target$.hashCode;
    };
Function _TabBarTheme__$(m.Scope scope$) => ({
      Decoration? indicator,
      Color? indicatorColor,
      TabBarIndicatorSize? indicatorSize,
      Color? dividerColor,
      Color? labelColor,
      EdgeInsetsGeometry? labelPadding,
      TextStyle? labelStyle,
      Color? unselectedLabelColor,
      TextStyle? unselectedLabelStyle,
      MaterialStateProperty<Color>? overlayColor,
      InteractiveInkFeatureFactory? splashFactory,
      MaterialStateProperty<MouseCursor>? mouseCursor,
    }) {
      return TabBarTheme(
        dividerColor: dividerColor,
        indicator: indicator,
        indicatorColor: indicatorColor,
        indicatorSize: indicatorSize,
        labelColor: labelColor,
        labelPadding: labelPadding,
        labelStyle: labelStyle,
        mouseCursor: mouseCursor,
        overlayColor: overlayColor,
        splashFactory: splashFactory,
        unselectedLabelColor: unselectedLabelColor,
        unselectedLabelStyle: unselectedLabelStyle,
      );
    };
Function _TabBarTheme_copyWith$(
  m.Scope scope$,
  TabBarTheme target$,
) =>
    target$.copyWith;
Function _TabBarTheme_of$(m.Scope scope$) => TabBarTheme.of;
Function _TabBarTheme_lerp$(m.Scope scope$) => TabBarTheme.lerp;
Function _TabBarTheme_eq$$(
  m.Scope scope$,
  TabBarTheme target$,
) =>
    (Object other$) => target$ == other$;
