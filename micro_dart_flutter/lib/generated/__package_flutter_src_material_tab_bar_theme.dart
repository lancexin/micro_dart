// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/tab_bar_theme.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/tabs.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/tab_bar_theme.dart',
  {
    'TabBarTheme.of': _TabBarTheme_of$,
    'TabBarTheme.lerp': _TabBarTheme_lerp$,
  },
  {},
  {
    'TabBarTheme': m.ClassMirror(
      'TabBarTheme',
      {
        'indicator': _TabBarTheme_indicator$,
        'indicatorColor': _TabBarTheme_indicatorColor$,
        'indicatorSize': _TabBarTheme_indicatorSize$,
        'dividerColor': _TabBarTheme_dividerColor$,
        'labelColor': _TabBarTheme_labelColor$,
        'labelPadding': _TabBarTheme_labelPadding$,
        'labelStyle': _TabBarTheme_labelStyle$,
        'unselectedLabelColor': _TabBarTheme_unselectedLabelColor$,
        'unselectedLabelStyle': _TabBarTheme_unselectedLabelStyle$,
        'overlayColor': _TabBarTheme_overlayColor$,
        'splashFactory': _TabBarTheme_splashFactory$,
        'mouseCursor': _TabBarTheme_mouseCursor$,
        'hashCode': _TabBarTheme_hashCode$,
        'copyWith': _TabBarTheme_copyWith$,
      },
      {},
    )
  },
);
Decoration? _TabBarTheme_indicator$(TabBarTheme target) {
  return target.indicator;
}

Color? _TabBarTheme_indicatorColor$(TabBarTheme target) {
  return target.indicatorColor;
}

TabBarIndicatorSize? _TabBarTheme_indicatorSize$(TabBarTheme target) {
  return target.indicatorSize;
}

Color? _TabBarTheme_dividerColor$(TabBarTheme target) {
  return target.dividerColor;
}

Color? _TabBarTheme_labelColor$(TabBarTheme target) {
  return target.labelColor;
}

EdgeInsetsGeometry? _TabBarTheme_labelPadding$(TabBarTheme target) {
  return target.labelPadding;
}

TextStyle? _TabBarTheme_labelStyle$(TabBarTheme target) {
  return target.labelStyle;
}

Color? _TabBarTheme_unselectedLabelColor$(TabBarTheme target) {
  return target.unselectedLabelColor;
}

TextStyle? _TabBarTheme_unselectedLabelStyle$(TabBarTheme target) {
  return target.unselectedLabelStyle;
}

MaterialStateProperty<Color?>? _TabBarTheme_overlayColor$(TabBarTheme target) {
  return target.overlayColor;
}

InteractiveInkFeatureFactory? _TabBarTheme_splashFactory$(TabBarTheme target) {
  return target.splashFactory;
}

MaterialStateProperty<MouseCursor?>? _TabBarTheme_mouseCursor$(
    TabBarTheme target) {
  return target.mouseCursor;
}

int _TabBarTheme_hashCode$(TabBarTheme target) {
  return target.hashCode;
}

Function _TabBarTheme_copyWith$(
  m.Scope scope,
  TabBarTheme target,
) =>
    target.copyWith;
Function _TabBarTheme_of$(m.Scope scope) => TabBarTheme.of;
Function _TabBarTheme_lerp$(m.Scope scope) => TabBarTheme.lerp;
