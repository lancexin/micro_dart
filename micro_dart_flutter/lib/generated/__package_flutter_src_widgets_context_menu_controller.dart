// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/context_menu_controller.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/inherited_theme.dart';
import 'package:flutter/src/widgets/navigator.dart';
import 'package:flutter/src/widgets/overlay.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/context_menu_controller.dart',
  {
    'ContextMenuController.': _ContextMenuController__$,
    'ContextMenuController.removeAny': _ContextMenuController_removeAny$,
  },
  {},
  {
    'ContextMenuController': m.ClassMirror(
      'ContextMenuController',
      {
        '#as': ContextMenuController_as$,
        '#is': ContextMenuController_is$,
        'onRemove': _ContextMenuController_onRemove$,
        'isShown': _ContextMenuController_isShown$,
        'show': _ContextMenuController_show$,
        'markNeedsBuild': _ContextMenuController_markNeedsBuild$,
        'remove': _ContextMenuController_remove$,
      },
      {},
    )
  },
);
Function ContextMenuController_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ContextMenuController;
Function ContextMenuController_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ContextMenuController;
Function _ContextMenuController_onRemove$(
  m.Scope scope$,
  ContextMenuController target$,
) =>
    () {
      return target$.onRemove;
    };
Function _ContextMenuController_isShown$(
  m.Scope scope$,
  ContextMenuController target$,
) =>
    () {
      return target$.isShown;
    };
Function _ContextMenuController__$(m.Scope scope$) =>
    ({m.FunctionPointer? onRemove}) {
      void onRemoveProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onRemove!,
            [],
            {},
          );
      return ContextMenuController(
          onRemove: onRemove == null ? null : onRemoveProxy);
    };
Function _ContextMenuController_show$(
  m.Scope scope$,
  ContextMenuController target$,
) =>
    ({
      required BuildContext context,
      required m.FunctionPointer contextMenuBuilder,
      Widget? debugRequiredFor,
    }) {
      Widget contextMenuBuilderProxy(
              BuildContext contextMenuBuilder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            contextMenuBuilder,
            [contextMenuBuilder_context$],
            {},
          );
      target$.show(
        context: context,
        contextMenuBuilder: contextMenuBuilderProxy,
        debugRequiredFor: debugRequiredFor,
      );
    };
Function _ContextMenuController_removeAny$(m.Scope scope$) =>
    ContextMenuController.removeAny;
Function _ContextMenuController_markNeedsBuild$(
  m.Scope scope$,
  ContextMenuController target$,
) =>
    target$.markNeedsBuild;
Function _ContextMenuController_remove$(
  m.Scope scope$,
  ContextMenuController target$,
) =>
    target$.remove;
