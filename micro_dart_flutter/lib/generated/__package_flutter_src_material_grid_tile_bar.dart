// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/grid_tile_bar.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/grid_tile_bar.dart',
  {},
  {},
  {
    'GridTileBar': m.ClassMirror(
      'GridTileBar',
      {
        '#as': GridTileBar_as$,
        '#is': GridTileBar_is$,
        'backgroundColor': _GridTileBar_backgroundColor$,
        'leading': _GridTileBar_leading$,
        'title': _GridTileBar_title$,
        'subtitle': _GridTileBar_subtitle$,
        'trailing': _GridTileBar_trailing$,
        'build': _GridTileBar_build$,
      },
      {},
    )
  },
);
Function GridTileBar_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as GridTileBar;
Function GridTileBar_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is GridTileBar;
Color? _GridTileBar_backgroundColor$(GridTileBar target) {
  return target.backgroundColor;
}

Widget? _GridTileBar_leading$(GridTileBar target) {
  return target.leading;
}

Widget? _GridTileBar_title$(GridTileBar target) {
  return target.title;
}

Widget? _GridTileBar_subtitle$(GridTileBar target) {
  return target.subtitle;
}

Widget? _GridTileBar_trailing$(GridTileBar target) {
  return target.trailing;
}

Function _GridTileBar_build$(
  m.Scope scope,
  GridTileBar target,
) =>
    target.build;
