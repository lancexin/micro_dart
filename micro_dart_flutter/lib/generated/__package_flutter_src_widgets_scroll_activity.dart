// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/scroll_activity.dart';
import 'dart:async';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/scroll_metrics.dart';
import 'package:flutter/src/widgets/scroll_notification.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/scroll_activity.dart',
  {
    'ScrollDragController.momentumRetainStationaryDurationThreshold':
        _ScrollDragController_momentumRetainStationaryDurationThreshold$,
    'ScrollDragController.momentumRetainVelocityThresholdFactor':
        _ScrollDragController_momentumRetainVelocityThresholdFactor$,
    'ScrollDragController.motionStoppedDurationThreshold':
        _ScrollDragController_motionStoppedDurationThreshold$,
  },
  {},
  {
    'ScrollActivityDelegate': m.ClassMirror(
      'ScrollActivityDelegate',
      {
        'axisDirection': _ScrollActivityDelegate_axisDirection$,
        'setPixels': _ScrollActivityDelegate_setPixels$,
        'applyUserOffset': _ScrollActivityDelegate_applyUserOffset$,
        'goIdle': _ScrollActivityDelegate_goIdle$,
        'goBallistic': _ScrollActivityDelegate_goBallistic$,
      },
      {},
    ),
    'ScrollActivity': m.ClassMirror(
      'ScrollActivity',
      {
        'delegate': _ScrollActivity_delegate$,
        'shouldIgnorePointer': _ScrollActivity_shouldIgnorePointer$,
        'isScrolling': _ScrollActivity_isScrolling$,
        'velocity': _ScrollActivity_velocity$,
        'updateDelegate': _ScrollActivity_updateDelegate$,
        'resetActivity': _ScrollActivity_resetActivity$,
        'dispatchScrollStartNotification':
            _ScrollActivity_dispatchScrollStartNotification$,
        'dispatchScrollUpdateNotification':
            _ScrollActivity_dispatchScrollUpdateNotification$,
        'dispatchOverscrollNotification':
            _ScrollActivity_dispatchOverscrollNotification$,
        'dispatchScrollEndNotification':
            _ScrollActivity_dispatchScrollEndNotification$,
        'applyNewDimensions': _ScrollActivity_applyNewDimensions$,
        'dispose': _ScrollActivity_dispose$,
        'toString': _ScrollActivity_toString$,
      },
      {},
    ),
    'IdleScrollActivity': m.ClassMirror(
      'IdleScrollActivity',
      {
        'shouldIgnorePointer': _IdleScrollActivity_shouldIgnorePointer$,
        'isScrolling': _IdleScrollActivity_isScrolling$,
        'velocity': _IdleScrollActivity_velocity$,
        'applyNewDimensions': _IdleScrollActivity_applyNewDimensions$,
      },
      {},
    ),
    'ScrollHoldController': m.ClassMirror(
      'ScrollHoldController',
      {'cancel': _ScrollHoldController_cancel$},
      {},
    ),
    'HoldScrollActivity': m.ClassMirror(
      'HoldScrollActivity',
      {
        'onHoldCanceled': _HoldScrollActivity_onHoldCanceled$,
        'shouldIgnorePointer': _HoldScrollActivity_shouldIgnorePointer$,
        'isScrolling': _HoldScrollActivity_isScrolling$,
        'velocity': _HoldScrollActivity_velocity$,
        'cancel': _HoldScrollActivity_cancel$,
        'dispose': _HoldScrollActivity_dispose$,
      },
      {},
    ),
    'ScrollDragController': m.ClassMirror(
      'ScrollDragController',
      {
        'onDragCanceled': _ScrollDragController_onDragCanceled$,
        'carriedVelocity': _ScrollDragController_carriedVelocity$,
        'motionStartDistanceThreshold':
            _ScrollDragController_motionStartDistanceThreshold$,
        'delegate': _ScrollDragController_delegate$,
        'lastDetails': _ScrollDragController_lastDetails$,
        'updateDelegate': _ScrollDragController_updateDelegate$,
        'update': _ScrollDragController_update$,
        'end': _ScrollDragController_end$,
        'cancel': _ScrollDragController_cancel$,
        'dispose': _ScrollDragController_dispose$,
        'toString': _ScrollDragController_toString$,
      },
      {},
    ),
    'DragScrollActivity': m.ClassMirror(
      'DragScrollActivity',
      {
        'shouldIgnorePointer': _DragScrollActivity_shouldIgnorePointer$,
        'isScrolling': _DragScrollActivity_isScrolling$,
        'velocity': _DragScrollActivity_velocity$,
        'dispatchScrollStartNotification':
            _DragScrollActivity_dispatchScrollStartNotification$,
        'dispatchScrollUpdateNotification':
            _DragScrollActivity_dispatchScrollUpdateNotification$,
        'dispatchOverscrollNotification':
            _DragScrollActivity_dispatchOverscrollNotification$,
        'dispatchScrollEndNotification':
            _DragScrollActivity_dispatchScrollEndNotification$,
        'dispose': _DragScrollActivity_dispose$,
        'toString': _DragScrollActivity_toString$,
      },
      {},
    ),
    'BallisticScrollActivity': m.ClassMirror(
      'BallisticScrollActivity',
      {
        'shouldIgnorePointer': _BallisticScrollActivity_shouldIgnorePointer$,
        'isScrolling': _BallisticScrollActivity_isScrolling$,
        'velocity': _BallisticScrollActivity_velocity$,
        'resetActivity': _BallisticScrollActivity_resetActivity$,
        'applyNewDimensions': _BallisticScrollActivity_applyNewDimensions$,
        'applyMoveTo': _BallisticScrollActivity_applyMoveTo$,
        'dispatchOverscrollNotification':
            _BallisticScrollActivity_dispatchOverscrollNotification$,
        'dispose': _BallisticScrollActivity_dispose$,
        'toString': _BallisticScrollActivity_toString$,
      },
      {},
    ),
    'DrivenScrollActivity': m.ClassMirror(
      'DrivenScrollActivity',
      {
        'done': _DrivenScrollActivity_done$,
        'shouldIgnorePointer': _DrivenScrollActivity_shouldIgnorePointer$,
        'isScrolling': _DrivenScrollActivity_isScrolling$,
        'velocity': _DrivenScrollActivity_velocity$,
        'dispatchOverscrollNotification':
            _DrivenScrollActivity_dispatchOverscrollNotification$,
        'dispose': _DrivenScrollActivity_dispose$,
        'toString': _DrivenScrollActivity_toString$,
      },
      {},
    ),
  },
);
AxisDirection _ScrollActivityDelegate_axisDirection$(
    ScrollActivityDelegate target) {
  return target.axisDirection;
}

Function _ScrollActivityDelegate_setPixels$(
  m.Scope scope,
  ScrollActivityDelegate target,
) =>
    target.setPixels;
Function _ScrollActivityDelegate_applyUserOffset$(
  m.Scope scope,
  ScrollActivityDelegate target,
) =>
    target.applyUserOffset;
Function _ScrollActivityDelegate_goIdle$(
  m.Scope scope,
  ScrollActivityDelegate target,
) =>
    target.goIdle;
Function _ScrollActivityDelegate_goBallistic$(
  m.Scope scope,
  ScrollActivityDelegate target,
) =>
    target.goBallistic;
ScrollActivityDelegate _ScrollActivity_delegate$(ScrollActivity target) {
  return target.delegate;
}

bool _ScrollActivity_shouldIgnorePointer$(ScrollActivity target) {
  return target.shouldIgnorePointer;
}

bool _ScrollActivity_isScrolling$(ScrollActivity target) {
  return target.isScrolling;
}

double _ScrollActivity_velocity$(ScrollActivity target) {
  return target.velocity;
}

Function _ScrollActivity_updateDelegate$(
  m.Scope scope,
  ScrollActivity target,
) =>
    target.updateDelegate;
Function _ScrollActivity_resetActivity$(
  m.Scope scope,
  ScrollActivity target,
) =>
    target.resetActivity;
Function _ScrollActivity_dispatchScrollStartNotification$(
  m.Scope scope,
  ScrollActivity target,
) =>
    target.dispatchScrollStartNotification;
Function _ScrollActivity_dispatchScrollUpdateNotification$(
  m.Scope scope,
  ScrollActivity target,
) =>
    target.dispatchScrollUpdateNotification;
Function _ScrollActivity_dispatchOverscrollNotification$(
  m.Scope scope,
  ScrollActivity target,
) =>
    target.dispatchOverscrollNotification;
Function _ScrollActivity_dispatchScrollEndNotification$(
  m.Scope scope,
  ScrollActivity target,
) =>
    target.dispatchScrollEndNotification;
Function _ScrollActivity_applyNewDimensions$(
  m.Scope scope,
  ScrollActivity target,
) =>
    target.applyNewDimensions;
Function _ScrollActivity_dispose$(
  m.Scope scope,
  ScrollActivity target,
) =>
    target.dispose;
Function _ScrollActivity_toString$(
  m.Scope scope,
  ScrollActivity target,
) =>
    target.toString;
bool _IdleScrollActivity_shouldIgnorePointer$(IdleScrollActivity target) {
  return target.shouldIgnorePointer;
}

bool _IdleScrollActivity_isScrolling$(IdleScrollActivity target) {
  return target.isScrolling;
}

double _IdleScrollActivity_velocity$(IdleScrollActivity target) {
  return target.velocity;
}

Function _IdleScrollActivity_applyNewDimensions$(
  m.Scope scope,
  IdleScrollActivity target,
) =>
    target.applyNewDimensions;
Function _ScrollHoldController_cancel$(
  m.Scope scope,
  ScrollHoldController target,
) =>
    target.cancel;
void Function()? _HoldScrollActivity_onHoldCanceled$(
    HoldScrollActivity target) {
  return target.onHoldCanceled;
}

bool _HoldScrollActivity_shouldIgnorePointer$(HoldScrollActivity target) {
  return target.shouldIgnorePointer;
}

bool _HoldScrollActivity_isScrolling$(HoldScrollActivity target) {
  return target.isScrolling;
}

double _HoldScrollActivity_velocity$(HoldScrollActivity target) {
  return target.velocity;
}

Function _HoldScrollActivity_cancel$(
  m.Scope scope,
  HoldScrollActivity target,
) =>
    target.cancel;
Function _HoldScrollActivity_dispose$(
  m.Scope scope,
  HoldScrollActivity target,
) =>
    target.dispose;
void Function()? _ScrollDragController_onDragCanceled$(
    ScrollDragController target) {
  return target.onDragCanceled;
}

double? _ScrollDragController_carriedVelocity$(ScrollDragController target) {
  return target.carriedVelocity;
}

double? _ScrollDragController_motionStartDistanceThreshold$(
    ScrollDragController target) {
  return target.motionStartDistanceThreshold;
}

Duration _ScrollDragController_momentumRetainStationaryDurationThreshold$() {
  return ScrollDragController.momentumRetainStationaryDurationThreshold;
}

double _ScrollDragController_momentumRetainVelocityThresholdFactor$() {
  return ScrollDragController.momentumRetainVelocityThresholdFactor;
}

Duration _ScrollDragController_motionStoppedDurationThreshold$() {
  return ScrollDragController.motionStoppedDurationThreshold;
}

ScrollActivityDelegate _ScrollDragController_delegate$(
    ScrollDragController target) {
  return target.delegate;
}

dynamic _ScrollDragController_lastDetails$(ScrollDragController target) {
  return target.lastDetails;
}

Function _ScrollDragController_updateDelegate$(
  m.Scope scope,
  ScrollDragController target,
) =>
    target.updateDelegate;
Function _ScrollDragController_update$(
  m.Scope scope,
  ScrollDragController target,
) =>
    target.update;
Function _ScrollDragController_end$(
  m.Scope scope,
  ScrollDragController target,
) =>
    target.end;
Function _ScrollDragController_cancel$(
  m.Scope scope,
  ScrollDragController target,
) =>
    target.cancel;
Function _ScrollDragController_dispose$(
  m.Scope scope,
  ScrollDragController target,
) =>
    target.dispose;
Function _ScrollDragController_toString$(
  m.Scope scope,
  ScrollDragController target,
) =>
    target.toString;
bool _DragScrollActivity_shouldIgnorePointer$(DragScrollActivity target) {
  return target.shouldIgnorePointer;
}

bool _DragScrollActivity_isScrolling$(DragScrollActivity target) {
  return target.isScrolling;
}

double _DragScrollActivity_velocity$(DragScrollActivity target) {
  return target.velocity;
}

Function _DragScrollActivity_dispatchScrollStartNotification$(
  m.Scope scope,
  DragScrollActivity target,
) =>
    target.dispatchScrollStartNotification;
Function _DragScrollActivity_dispatchScrollUpdateNotification$(
  m.Scope scope,
  DragScrollActivity target,
) =>
    target.dispatchScrollUpdateNotification;
Function _DragScrollActivity_dispatchOverscrollNotification$(
  m.Scope scope,
  DragScrollActivity target,
) =>
    target.dispatchOverscrollNotification;
Function _DragScrollActivity_dispatchScrollEndNotification$(
  m.Scope scope,
  DragScrollActivity target,
) =>
    target.dispatchScrollEndNotification;
Function _DragScrollActivity_dispose$(
  m.Scope scope,
  DragScrollActivity target,
) =>
    target.dispose;
Function _DragScrollActivity_toString$(
  m.Scope scope,
  DragScrollActivity target,
) =>
    target.toString;
bool _BallisticScrollActivity_shouldIgnorePointer$(
    BallisticScrollActivity target) {
  return target.shouldIgnorePointer;
}

bool _BallisticScrollActivity_isScrolling$(BallisticScrollActivity target) {
  return target.isScrolling;
}

double _BallisticScrollActivity_velocity$(BallisticScrollActivity target) {
  return target.velocity;
}

Function _BallisticScrollActivity_resetActivity$(
  m.Scope scope,
  BallisticScrollActivity target,
) =>
    target.resetActivity;
Function _BallisticScrollActivity_applyNewDimensions$(
  m.Scope scope,
  BallisticScrollActivity target,
) =>
    target.applyNewDimensions;
Function _BallisticScrollActivity_applyMoveTo$(
  m.Scope scope,
  BallisticScrollActivity target,
) =>
    target.applyMoveTo;
Function _BallisticScrollActivity_dispatchOverscrollNotification$(
  m.Scope scope,
  BallisticScrollActivity target,
) =>
    target.dispatchOverscrollNotification;
Function _BallisticScrollActivity_dispose$(
  m.Scope scope,
  BallisticScrollActivity target,
) =>
    target.dispose;
Function _BallisticScrollActivity_toString$(
  m.Scope scope,
  BallisticScrollActivity target,
) =>
    target.toString;
Future<void> _DrivenScrollActivity_done$(DrivenScrollActivity target) {
  return target.done;
}

bool _DrivenScrollActivity_shouldIgnorePointer$(DrivenScrollActivity target) {
  return target.shouldIgnorePointer;
}

bool _DrivenScrollActivity_isScrolling$(DrivenScrollActivity target) {
  return target.isScrolling;
}

double _DrivenScrollActivity_velocity$(DrivenScrollActivity target) {
  return target.velocity;
}

Function _DrivenScrollActivity_dispatchOverscrollNotification$(
  m.Scope scope,
  DrivenScrollActivity target,
) =>
    target.dispatchOverscrollNotification;
Function _DrivenScrollActivity_dispose$(
  m.Scope scope,
  DrivenScrollActivity target,
) =>
    target.dispose;
Function _DrivenScrollActivity_toString$(
  m.Scope scope,
  DrivenScrollActivity target,
) =>
    target.toString;
