// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/checkbox_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/checkbox_theme.dart',
  {
    'CheckboxThemeData.': _CheckboxThemeData__$,
    'CheckboxThemeData.lerp': _CheckboxThemeData_lerp$,
    'CheckboxTheme.': _CheckboxTheme__$,
    'CheckboxTheme.of': _CheckboxTheme_of$,
  },
  {},
  {
    'CheckboxThemeData': m.ClassMirror(
      'CheckboxThemeData',
      {
        '#as': CheckboxThemeData_as$,
        '#is': CheckboxThemeData_is$,
        'mouseCursor': _CheckboxThemeData_mouseCursor$,
        'fillColor': _CheckboxThemeData_fillColor$,
        'checkColor': _CheckboxThemeData_checkColor$,
        'overlayColor': _CheckboxThemeData_overlayColor$,
        'splashRadius': _CheckboxThemeData_splashRadius$,
        'materialTapTargetSize': _CheckboxThemeData_materialTapTargetSize$,
        'visualDensity': _CheckboxThemeData_visualDensity$,
        'shape': _CheckboxThemeData_shape$,
        'side': _CheckboxThemeData_side$,
        'hashCode': _CheckboxThemeData_hashCode$,
        'copyWith': _CheckboxThemeData_copyWith$,
        '==': _CheckboxThemeData_eq$$,
        'debugFillProperties': _CheckboxThemeData_debugFillProperties$,
      },
      {},
    ),
    'CheckboxTheme': m.ClassMirror(
      'CheckboxTheme',
      {
        '#as': CheckboxTheme_as$,
        '#is': CheckboxTheme_is$,
        'data': _CheckboxTheme_data$,
        'updateShouldNotify': _CheckboxTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function CheckboxThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CheckboxThemeData;
Function CheckboxThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CheckboxThemeData;
Function _CheckboxThemeData_mouseCursor$(
  m.Scope scope$,
  CheckboxThemeData target$,
) =>
    () {
      return target$.mouseCursor;
    };
Function _CheckboxThemeData_fillColor$(
  m.Scope scope$,
  CheckboxThemeData target$,
) =>
    () {
      return target$.fillColor;
    };
Function _CheckboxThemeData_checkColor$(
  m.Scope scope$,
  CheckboxThemeData target$,
) =>
    () {
      return target$.checkColor;
    };
Function _CheckboxThemeData_overlayColor$(
  m.Scope scope$,
  CheckboxThemeData target$,
) =>
    () {
      return target$.overlayColor;
    };
Function _CheckboxThemeData_splashRadius$(
  m.Scope scope$,
  CheckboxThemeData target$,
) =>
    () {
      return target$.splashRadius;
    };
Function _CheckboxThemeData_materialTapTargetSize$(
  m.Scope scope$,
  CheckboxThemeData target$,
) =>
    () {
      return target$.materialTapTargetSize;
    };
Function _CheckboxThemeData_visualDensity$(
  m.Scope scope$,
  CheckboxThemeData target$,
) =>
    () {
      return target$.visualDensity;
    };
Function _CheckboxThemeData_shape$(
  m.Scope scope$,
  CheckboxThemeData target$,
) =>
    () {
      return target$.shape;
    };
Function _CheckboxThemeData_side$(
  m.Scope scope$,
  CheckboxThemeData target$,
) =>
    () {
      return target$.side;
    };
Function _CheckboxThemeData_hashCode$(
  m.Scope scope$,
  CheckboxThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _CheckboxThemeData__$(m.Scope scope$) => ({
      MaterialStateProperty<MouseCursor>? mouseCursor,
      MaterialStateProperty<Color>? fillColor,
      MaterialStateProperty<Color>? checkColor,
      MaterialStateProperty<Color>? overlayColor,
      double? splashRadius,
      MaterialTapTargetSize? materialTapTargetSize,
      VisualDensity? visualDensity,
      OutlinedBorder? shape,
      BorderSide? side,
    }) {
      return CheckboxThemeData(
        checkColor: checkColor,
        fillColor: fillColor,
        materialTapTargetSize: materialTapTargetSize,
        mouseCursor: mouseCursor,
        overlayColor: overlayColor,
        shape: shape,
        side: side,
        splashRadius: splashRadius,
        visualDensity: visualDensity,
      );
    };
Function _CheckboxThemeData_copyWith$(
  m.Scope scope$,
  CheckboxThemeData target$,
) =>
    target$.copyWith;
Function _CheckboxThemeData_lerp$(m.Scope scope$) => CheckboxThemeData.lerp;
Function _CheckboxThemeData_eq$$(
  m.Scope scope$,
  CheckboxThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _CheckboxThemeData_debugFillProperties$(
  m.Scope scope$,
  CheckboxThemeData target$,
) =>
    target$.debugFillProperties;
Function CheckboxTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CheckboxTheme;
Function CheckboxTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CheckboxTheme;
Function _CheckboxTheme_data$(
  m.Scope scope$,
  CheckboxTheme target$,
) =>
    () {
      return target$.data;
    };
Function _CheckboxTheme__$(m.Scope scope$) => ({
      Key? key,
      required CheckboxThemeData data,
      required Widget child,
    }) {
      return CheckboxTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _CheckboxTheme_of$(m.Scope scope$) => CheckboxTheme.of;
Function _CheckboxTheme_updateShouldNotify$(
  m.Scope scope$,
  CheckboxTheme target$,
) =>
    target$.updateShouldNotify;
