// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/stack.dart';
import 'dart:math';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/rendering/layer.dart';
import 'package:flutter/src/rendering/layout_helper.dart';
import 'package:flutter/src/rendering/object.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/stack.dart',
  {
    'RelativeRect.fill': _RelativeRect_fill$,
    'RelativeRect.lerp': _RelativeRect_lerp$,
    'RenderStack.layoutPositionedChild': _RenderStack_layoutPositionedChild$,
    'StackFit.loose': _StackFit_loose$,
    'StackFit.expand': _StackFit_expand$,
    'StackFit.passthrough': _StackFit_passthrough$,
    'StackFit.values': _StackFit_values$,
  },
  {},
  {
    'RelativeRect': m.ClassMirror(
      'RelativeRect',
      {
        'left': _RelativeRect_left$,
        'top': _RelativeRect_top$,
        'right': _RelativeRect_right$,
        'bottom': _RelativeRect_bottom$,
        'hasInsets': _RelativeRect_hasInsets$,
        'hashCode': _RelativeRect_hashCode$,
        'shift': _RelativeRect_shift$,
        'inflate': _RelativeRect_inflate$,
        'deflate': _RelativeRect_deflate$,
        'intersect': _RelativeRect_intersect$,
        'toRect': _RelativeRect_toRect$,
        'toSize': _RelativeRect_toSize$,
        'toString': _RelativeRect_toString$,
      },
      {},
    ),
    'StackParentData': m.ClassMirror(
      'StackParentData',
      {
        'top': _StackParentData_top$,
        'right': _StackParentData_right$,
        'bottom': _StackParentData_bottom$,
        'left': _StackParentData_left$,
        'width': _StackParentData_width$,
        'height': _StackParentData_height$,
        'rect': _StackParentData_rect$,
        'isPositioned': _StackParentData_isPositioned$,
        'toString': _StackParentData_toString$,
      },
      {
        'top': _StackParentData_top_set$,
        'right': _StackParentData_right_set$,
        'bottom': _StackParentData_bottom_set$,
        'left': _StackParentData_left_set$,
        'width': _StackParentData_width_set$,
        'height': _StackParentData_height_set$,
        'rect': _StackParentData_rect_set$,
      },
    ),
    'RenderStack': m.ClassMirror(
      'RenderStack',
      {
        'alignment': _RenderStack_alignment$,
        'textDirection': _RenderStack_textDirection$,
        'fit': _RenderStack_fit$,
        'clipBehavior': _RenderStack_clipBehavior$,
        'setupParentData': _RenderStack_setupParentData$,
        'computeMinIntrinsicWidth': _RenderStack_computeMinIntrinsicWidth$,
        'computeMaxIntrinsicWidth': _RenderStack_computeMaxIntrinsicWidth$,
        'computeMinIntrinsicHeight': _RenderStack_computeMinIntrinsicHeight$,
        'computeMaxIntrinsicHeight': _RenderStack_computeMaxIntrinsicHeight$,
        'computeDistanceToActualBaseline':
            _RenderStack_computeDistanceToActualBaseline$,
        'computeDryLayout': _RenderStack_computeDryLayout$,
        'performLayout': _RenderStack_performLayout$,
        'hitTestChildren': _RenderStack_hitTestChildren$,
        'paintStack': _RenderStack_paintStack$,
        'paint': _RenderStack_paint$,
        'dispose': _RenderStack_dispose$,
        'describeApproximatePaintClip':
            _RenderStack_describeApproximatePaintClip$,
        'debugFillProperties': _RenderStack_debugFillProperties$,
      },
      {
        'alignment': _RenderStack_alignment_set$,
        'textDirection': _RenderStack_textDirection_set$,
        'fit': _RenderStack_fit_set$,
        'clipBehavior': _RenderStack_clipBehavior_set$,
      },
    ),
    'RenderIndexedStack': m.ClassMirror(
      'RenderIndexedStack',
      {
        'index': _RenderIndexedStack_index$,
        'hitTestChildren': _RenderIndexedStack_hitTestChildren$,
        'paintStack': _RenderIndexedStack_paintStack$,
        'debugFillProperties': _RenderIndexedStack_debugFillProperties$,
        'debugDescribeChildren': _RenderIndexedStack_debugDescribeChildren$,
      },
      {'index': _RenderIndexedStack_index_set$},
    ),
    'StackFit': m.ClassMirror(
      'StackFit',
      {},
      {},
    ),
  },
);
RelativeRect _RelativeRect_fill$() {
  return RelativeRect.fill;
}

double _RelativeRect_left$(RelativeRect target) {
  return target.left;
}

double _RelativeRect_top$(RelativeRect target) {
  return target.top;
}

double _RelativeRect_right$(RelativeRect target) {
  return target.right;
}

double _RelativeRect_bottom$(RelativeRect target) {
  return target.bottom;
}

bool _RelativeRect_hasInsets$(RelativeRect target) {
  return target.hasInsets;
}

int _RelativeRect_hashCode$(RelativeRect target) {
  return target.hashCode;
}

Function _RelativeRect_shift$(
  m.Scope scope,
  RelativeRect target,
) =>
    target.shift;
Function _RelativeRect_inflate$(
  m.Scope scope,
  RelativeRect target,
) =>
    target.inflate;
Function _RelativeRect_deflate$(
  m.Scope scope,
  RelativeRect target,
) =>
    target.deflate;
Function _RelativeRect_intersect$(
  m.Scope scope,
  RelativeRect target,
) =>
    target.intersect;
Function _RelativeRect_toRect$(
  m.Scope scope,
  RelativeRect target,
) =>
    target.toRect;
Function _RelativeRect_toSize$(
  m.Scope scope,
  RelativeRect target,
) =>
    target.toSize;
Function _RelativeRect_lerp$(m.Scope scope) => RelativeRect.lerp;
Function _RelativeRect_toString$(
  m.Scope scope,
  RelativeRect target,
) =>
    target.toString;
double? _StackParentData_top$(StackParentData target) {
  return target.top;
}

void _StackParentData_top_set$(
  StackParentData target,
  double? other,
) {
  target.top = other;
}

double? _StackParentData_right$(StackParentData target) {
  return target.right;
}

void _StackParentData_right_set$(
  StackParentData target,
  double? other,
) {
  target.right = other;
}

double? _StackParentData_bottom$(StackParentData target) {
  return target.bottom;
}

void _StackParentData_bottom_set$(
  StackParentData target,
  double? other,
) {
  target.bottom = other;
}

double? _StackParentData_left$(StackParentData target) {
  return target.left;
}

void _StackParentData_left_set$(
  StackParentData target,
  double? other,
) {
  target.left = other;
}

double? _StackParentData_width$(StackParentData target) {
  return target.width;
}

void _StackParentData_width_set$(
  StackParentData target,
  double? other,
) {
  target.width = other;
}

double? _StackParentData_height$(StackParentData target) {
  return target.height;
}

void _StackParentData_height_set$(
  StackParentData target,
  double? other,
) {
  target.height = other;
}

RelativeRect _StackParentData_rect$(StackParentData target) {
  return target.rect;
}

void _StackParentData_rect_set$(
  StackParentData target,
  RelativeRect other,
) {
  target.rect = other;
}

bool _StackParentData_isPositioned$(StackParentData target) {
  return target.isPositioned;
}

Function _StackParentData_toString$(
  m.Scope scope,
  StackParentData target,
) =>
    target.toString;
AlignmentGeometry _RenderStack_alignment$(RenderStack target) {
  return target.alignment;
}

void _RenderStack_alignment_set$(
  RenderStack target,
  AlignmentGeometry other,
) {
  target.alignment = other;
}

TextDirection? _RenderStack_textDirection$(RenderStack target) {
  return target.textDirection;
}

void _RenderStack_textDirection_set$(
  RenderStack target,
  TextDirection? other,
) {
  target.textDirection = other;
}

StackFit _RenderStack_fit$(RenderStack target) {
  return target.fit;
}

void _RenderStack_fit_set$(
  RenderStack target,
  StackFit other,
) {
  target.fit = other;
}

Clip _RenderStack_clipBehavior$(RenderStack target) {
  return target.clipBehavior;
}

void _RenderStack_clipBehavior_set$(
  RenderStack target,
  Clip other,
) {
  target.clipBehavior = other;
}

Function _RenderStack_setupParentData$(
  m.Scope scope,
  RenderStack target,
) =>
    target.setupParentData;
Function _RenderStack_computeMinIntrinsicWidth$(
  m.Scope scope,
  RenderStack target,
) =>
    target.computeMinIntrinsicWidth;
Function _RenderStack_computeMaxIntrinsicWidth$(
  m.Scope scope,
  RenderStack target,
) =>
    target.computeMaxIntrinsicWidth;
Function _RenderStack_computeMinIntrinsicHeight$(
  m.Scope scope,
  RenderStack target,
) =>
    target.computeMinIntrinsicHeight;
Function _RenderStack_computeMaxIntrinsicHeight$(
  m.Scope scope,
  RenderStack target,
) =>
    target.computeMaxIntrinsicHeight;
Function _RenderStack_computeDistanceToActualBaseline$(
  m.Scope scope,
  RenderStack target,
) =>
    target.computeDistanceToActualBaseline;
Function _RenderStack_layoutPositionedChild$(m.Scope scope) =>
    RenderStack.layoutPositionedChild;
Function _RenderStack_computeDryLayout$(
  m.Scope scope,
  RenderStack target,
) =>
    target.computeDryLayout;
Function _RenderStack_performLayout$(
  m.Scope scope,
  RenderStack target,
) =>
    target.performLayout;
Function _RenderStack_hitTestChildren$(
  m.Scope scope,
  RenderStack target,
) =>
    target.hitTestChildren;
Function _RenderStack_paintStack$(
  m.Scope scope,
  RenderStack target,
) =>
    target.paintStack;
Function _RenderStack_paint$(
  m.Scope scope,
  RenderStack target,
) =>
    target.paint;
Function _RenderStack_dispose$(
  m.Scope scope,
  RenderStack target,
) =>
    target.dispose;
Function _RenderStack_describeApproximatePaintClip$(
  m.Scope scope,
  RenderStack target,
) =>
    target.describeApproximatePaintClip;
Function _RenderStack_debugFillProperties$(
  m.Scope scope,
  RenderStack target,
) =>
    target.debugFillProperties;
int? _RenderIndexedStack_index$(RenderIndexedStack target) {
  return target.index;
}

void _RenderIndexedStack_index_set$(
  RenderIndexedStack target,
  int? other,
) {
  target.index = other;
}

Function _RenderIndexedStack_hitTestChildren$(
  m.Scope scope,
  RenderIndexedStack target,
) =>
    target.hitTestChildren;
Function _RenderIndexedStack_paintStack$(
  m.Scope scope,
  RenderIndexedStack target,
) =>
    target.paintStack;
Function _RenderIndexedStack_debugFillProperties$(
  m.Scope scope,
  RenderIndexedStack target,
) =>
    target.debugFillProperties;
Function _RenderIndexedStack_debugDescribeChildren$(
  m.Scope scope,
  RenderIndexedStack target,
) =>
    target.debugDescribeChildren;
StackFit _StackFit_loose$() {
  return StackFit.loose;
}

StackFit _StackFit_expand$() {
  return StackFit.expand;
}

StackFit _StackFit_passthrough$() {
  return StackFit.passthrough;
}

List<StackFit> _StackFit_values$() {
  return StackFit.values;
}
