// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/stack.dart';
import 'dart:math';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/rendering/layer.dart';
import 'package:flutter/src/rendering/layout_helper.dart';
import 'package:flutter/src/rendering/object.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/stack.dart',
  {
    'RelativeRect.fill': _RelativeRect_fill$,
    'RelativeRect.fromLTRB': _RelativeRect_fromLTRB_$,
    'RelativeRect.fromSize': _RelativeRect_fromSize_$,
    'RelativeRect.fromRect': _RelativeRect_fromRect_$,
    'RelativeRect.fromDirectional': _RelativeRect_fromDirectional_$,
    'RelativeRect.lerp': _RelativeRect_lerp$,
    'StackParentData.': _StackParentData__$,
    'RenderStack.': _RenderStack__$,
    'RenderStack.getIntrinsicDimension': _RenderStack_getIntrinsicDimension$,
    'RenderStack.layoutPositionedChild': _RenderStack_layoutPositionedChild$,
    'RenderIndexedStack.': _RenderIndexedStack__$,
    'RenderIndexedStack.visitChildrenForSemantics':
        _RenderIndexedStack_visitChildrenForSemantics$,
    'StackFit.loose': _StackFit_loose$,
    'StackFit.expand': _StackFit_expand$,
    'StackFit.passthrough': _StackFit_passthrough$,
    'StackFit.values': _StackFit_values$,
  },
  {},
  {
    'RelativeRect': m.ClassMirror(
      'RelativeRect',
      {
        '#as': RelativeRect_as$,
        '#is': RelativeRect_is$,
        'left': _RelativeRect_left$,
        'top': _RelativeRect_top$,
        'right': _RelativeRect_right$,
        'bottom': _RelativeRect_bottom$,
        'hasInsets': _RelativeRect_hasInsets$,
        'hashCode': _RelativeRect_hashCode$,
        'shift': _RelativeRect_shift$,
        'inflate': _RelativeRect_inflate$,
        'deflate': _RelativeRect_deflate$,
        'intersect': _RelativeRect_intersect$,
        'toRect': _RelativeRect_toRect$,
        'toSize': _RelativeRect_toSize$,
        '==': _RelativeRect_eq$$,
        'toString': _RelativeRect_toString$,
      },
      {},
    ),
    'StackParentData': m.ClassMirror(
      'StackParentData',
      {
        '#as': StackParentData_as$,
        '#is': StackParentData_is$,
        'top': _StackParentData_top$,
        'right': _StackParentData_right$,
        'bottom': _StackParentData_bottom$,
        'left': _StackParentData_left$,
        'width': _StackParentData_width$,
        'height': _StackParentData_height$,
        'rect': _StackParentData_rect$,
        'isPositioned': _StackParentData_isPositioned$,
        'toString': _StackParentData_toString$,
      },
      {
        'top': _StackParentData_top_set$,
        'right': _StackParentData_right_set$,
        'bottom': _StackParentData_bottom_set$,
        'left': _StackParentData_left_set$,
        'width': _StackParentData_width_set$,
        'height': _StackParentData_height_set$,
        'rect': _StackParentData_rect_set$,
      },
    ),
    'RenderStack': m.ClassMirror(
      'RenderStack',
      {
        '#as': RenderStack_as$,
        '#is': RenderStack_is$,
        'alignment': _RenderStack_alignment$,
        'textDirection': _RenderStack_textDirection$,
        'fit': _RenderStack_fit$,
        'clipBehavior': _RenderStack_clipBehavior$,
        'setupParentData': _RenderStack_setupParentData$,
        'computeMinIntrinsicWidth': _RenderStack_computeMinIntrinsicWidth$,
        'computeMaxIntrinsicWidth': _RenderStack_computeMaxIntrinsicWidth$,
        'computeMinIntrinsicHeight': _RenderStack_computeMinIntrinsicHeight$,
        'computeMaxIntrinsicHeight': _RenderStack_computeMaxIntrinsicHeight$,
        'computeDistanceToActualBaseline':
            _RenderStack_computeDistanceToActualBaseline$,
        'computeDryLayout': _RenderStack_computeDryLayout$,
        'performLayout': _RenderStack_performLayout$,
        'hitTestChildren': _RenderStack_hitTestChildren$,
        'paintStack': _RenderStack_paintStack$,
        'paint': _RenderStack_paint$,
        'dispose': _RenderStack_dispose$,
        'describeApproximatePaintClip':
            _RenderStack_describeApproximatePaintClip$,
        'debugFillProperties': _RenderStack_debugFillProperties$,
      },
      {
        'alignment': _RenderStack_alignment_set$,
        'textDirection': _RenderStack_textDirection_set$,
        'fit': _RenderStack_fit_set$,
        'clipBehavior': _RenderStack_clipBehavior_set$,
      },
    ),
    'RenderIndexedStack': m.ClassMirror(
      'RenderIndexedStack',
      {
        '#as': RenderIndexedStack_as$,
        '#is': RenderIndexedStack_is$,
        'index': _RenderIndexedStack_index$,
        'hitTestChildren': _RenderIndexedStack_hitTestChildren$,
        'paintStack': _RenderIndexedStack_paintStack$,
        'debugFillProperties': _RenderIndexedStack_debugFillProperties$,
        'debugDescribeChildren': _RenderIndexedStack_debugDescribeChildren$,
      },
      {'index': _RenderIndexedStack_index_set$},
    ),
    'StackFit': m.ClassMirror(
      'StackFit',
      {},
      {},
    ),
  },
);
Function RelativeRect_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RelativeRect;
Function RelativeRect_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RelativeRect;
RelativeRect _RelativeRect_fill$() {
  return RelativeRect.fill;
}

Function _RelativeRect_left$(
  m.Scope scope$,
  RelativeRect target$,
) =>
    () {
      return target$.left;
    };
Function _RelativeRect_top$(
  m.Scope scope$,
  RelativeRect target$,
) =>
    () {
      return target$.top;
    };
Function _RelativeRect_right$(
  m.Scope scope$,
  RelativeRect target$,
) =>
    () {
      return target$.right;
    };
Function _RelativeRect_bottom$(
  m.Scope scope$,
  RelativeRect target$,
) =>
    () {
      return target$.bottom;
    };
Function _RelativeRect_hasInsets$(
  m.Scope scope$,
  RelativeRect target$,
) =>
    () {
      return target$.hasInsets;
    };
Function _RelativeRect_hashCode$(
  m.Scope scope$,
  RelativeRect target$,
) =>
    () {
      return target$.hashCode;
    };
Function _RelativeRect_fromLTRB_$(m.Scope scope$) => RelativeRect.fromLTRB;
Function _RelativeRect_fromSize_$(m.Scope scope$) => RelativeRect.fromSize;
Function _RelativeRect_fromRect_$(m.Scope scope$) => RelativeRect.fromRect;
Function _RelativeRect_fromDirectional_$(m.Scope scope$) =>
    RelativeRect.fromDirectional;
Function _RelativeRect_shift$(
  m.Scope scope$,
  RelativeRect target$,
) =>
    target$.shift;
Function _RelativeRect_inflate$(
  m.Scope scope$,
  RelativeRect target$,
) =>
    target$.inflate;
Function _RelativeRect_deflate$(
  m.Scope scope$,
  RelativeRect target$,
) =>
    target$.deflate;
Function _RelativeRect_intersect$(
  m.Scope scope$,
  RelativeRect target$,
) =>
    target$.intersect;
Function _RelativeRect_toRect$(
  m.Scope scope$,
  RelativeRect target$,
) =>
    target$.toRect;
Function _RelativeRect_toSize$(
  m.Scope scope$,
  RelativeRect target$,
) =>
    target$.toSize;
Function _RelativeRect_lerp$(m.Scope scope$) => RelativeRect.lerp;
Function _RelativeRect_eq$$(
  m.Scope scope$,
  RelativeRect target$,
) =>
    (Object other$) => target$ == other$;
Function _RelativeRect_toString$(
  m.Scope scope$,
  RelativeRect target$,
) =>
    target$.toString;
Function StackParentData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as StackParentData;
Function StackParentData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is StackParentData;
Function _StackParentData_top$(
  m.Scope scope$,
  StackParentData target$,
) =>
    () {
      return target$.top;
    };
void _StackParentData_top_set$(
  m.Scope scope$,
  StackParentData target$,
) =>
    (dynamic other$) {
      target$.top = other$;
    };
Function _StackParentData_right$(
  m.Scope scope$,
  StackParentData target$,
) =>
    () {
      return target$.right;
    };
void _StackParentData_right_set$(
  m.Scope scope$,
  StackParentData target$,
) =>
    (dynamic other$) {
      target$.right = other$;
    };
Function _StackParentData_bottom$(
  m.Scope scope$,
  StackParentData target$,
) =>
    () {
      return target$.bottom;
    };
void _StackParentData_bottom_set$(
  m.Scope scope$,
  StackParentData target$,
) =>
    (dynamic other$) {
      target$.bottom = other$;
    };
Function _StackParentData_left$(
  m.Scope scope$,
  StackParentData target$,
) =>
    () {
      return target$.left;
    };
void _StackParentData_left_set$(
  m.Scope scope$,
  StackParentData target$,
) =>
    (dynamic other$) {
      target$.left = other$;
    };
Function _StackParentData_width$(
  m.Scope scope$,
  StackParentData target$,
) =>
    () {
      return target$.width;
    };
void _StackParentData_width_set$(
  m.Scope scope$,
  StackParentData target$,
) =>
    (dynamic other$) {
      target$.width = other$;
    };
Function _StackParentData_height$(
  m.Scope scope$,
  StackParentData target$,
) =>
    () {
      return target$.height;
    };
void _StackParentData_height_set$(
  m.Scope scope$,
  StackParentData target$,
) =>
    (dynamic other$) {
      target$.height = other$;
    };
Function _StackParentData_rect$(
  m.Scope scope$,
  StackParentData target$,
) =>
    () {
      return target$.rect;
    };
void _StackParentData_rect_set$(
  m.Scope scope$,
  StackParentData target$,
) =>
    (dynamic other$) {
      target$.rect = other$;
    };
Function _StackParentData_isPositioned$(
  m.Scope scope$,
  StackParentData target$,
) =>
    () {
      return target$.isPositioned;
    };
Function _StackParentData__$(m.Scope scope$) => () {
      return StackParentData();
    };
Function _StackParentData_toString$(
  m.Scope scope$,
  StackParentData target$,
) =>
    target$.toString;
Function RenderStack_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RenderStack;
Function RenderStack_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RenderStack;
Function _RenderStack_alignment$(
  m.Scope scope$,
  RenderStack target$,
) =>
    () {
      return target$.alignment;
    };
void _RenderStack_alignment_set$(
  m.Scope scope$,
  RenderStack target$,
) =>
    (dynamic other$) {
      target$.alignment = other$;
    };
Function _RenderStack_textDirection$(
  m.Scope scope$,
  RenderStack target$,
) =>
    () {
      return target$.textDirection;
    };
void _RenderStack_textDirection_set$(
  m.Scope scope$,
  RenderStack target$,
) =>
    (dynamic other$) {
      target$.textDirection = other$;
    };
Function _RenderStack_fit$(
  m.Scope scope$,
  RenderStack target$,
) =>
    () {
      return target$.fit;
    };
void _RenderStack_fit_set$(
  m.Scope scope$,
  RenderStack target$,
) =>
    (dynamic other$) {
      target$.fit = other$;
    };
Function _RenderStack_clipBehavior$(
  m.Scope scope$,
  RenderStack target$,
) =>
    () {
      return target$.clipBehavior;
    };
void _RenderStack_clipBehavior_set$(
  m.Scope scope$,
  RenderStack target$,
) =>
    (dynamic other$) {
      target$.clipBehavior = other$;
    };
Function _RenderStack__$(m.Scope scope$) => ({
      List? children,
      AlignmentGeometry? alignment,
      TextDirection? textDirection,
      StackFit? fit,
      Clip? clipBehavior,
    }) {
      return RenderStack(
        alignment: alignment ?? AlignmentDirectional.topStart,
        children: children == null ? null : List.from(children),
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        fit: fit ?? StackFit.loose,
        textDirection: textDirection,
      );
    };
Function _RenderStack_setupParentData$(
  m.Scope scope$,
  RenderStack target$,
) =>
    target$.setupParentData;
Function _RenderStack_getIntrinsicDimension$(m.Scope scope$) => (
      RenderBox? firstChild,
      m.FunctionPointer mainChildSizeGetter,
    ) {
      double mainChildSizeGetterProxy(RenderBox mainChildSizeGetter_child$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            mainChildSizeGetter,
            [mainChildSizeGetter_child$],
            {},
          );
      return RenderStack.getIntrinsicDimension(
        firstChild,
        mainChildSizeGetterProxy,
      );
    };
Function _RenderStack_computeMinIntrinsicWidth$(
  m.Scope scope$,
  RenderStack target$,
) =>
    target$.computeMinIntrinsicWidth;
Function _RenderStack_computeMaxIntrinsicWidth$(
  m.Scope scope$,
  RenderStack target$,
) =>
    target$.computeMaxIntrinsicWidth;
Function _RenderStack_computeMinIntrinsicHeight$(
  m.Scope scope$,
  RenderStack target$,
) =>
    target$.computeMinIntrinsicHeight;
Function _RenderStack_computeMaxIntrinsicHeight$(
  m.Scope scope$,
  RenderStack target$,
) =>
    target$.computeMaxIntrinsicHeight;
Function _RenderStack_computeDistanceToActualBaseline$(
  m.Scope scope$,
  RenderStack target$,
) =>
    target$.computeDistanceToActualBaseline;
Function _RenderStack_layoutPositionedChild$(m.Scope scope$) =>
    RenderStack.layoutPositionedChild;
Function _RenderStack_computeDryLayout$(
  m.Scope scope$,
  RenderStack target$,
) =>
    target$.computeDryLayout;
Function _RenderStack_performLayout$(
  m.Scope scope$,
  RenderStack target$,
) =>
    target$.performLayout;
Function _RenderStack_hitTestChildren$(
  m.Scope scope$,
  RenderStack target$,
) =>
    target$.hitTestChildren;
Function _RenderStack_paintStack$(
  m.Scope scope$,
  RenderStack target$,
) =>
    target$.paintStack;
Function _RenderStack_paint$(
  m.Scope scope$,
  RenderStack target$,
) =>
    target$.paint;
Function _RenderStack_dispose$(
  m.Scope scope$,
  RenderStack target$,
) =>
    target$.dispose;
Function _RenderStack_describeApproximatePaintClip$(
  m.Scope scope$,
  RenderStack target$,
) =>
    target$.describeApproximatePaintClip;
Function _RenderStack_debugFillProperties$(
  m.Scope scope$,
  RenderStack target$,
) =>
    target$.debugFillProperties;
Function RenderIndexedStack_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RenderIndexedStack;
Function RenderIndexedStack_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RenderIndexedStack;
Function _RenderIndexedStack_index$(
  m.Scope scope$,
  RenderIndexedStack target$,
) =>
    () {
      return target$.index;
    };
void _RenderIndexedStack_index_set$(
  m.Scope scope$,
  RenderIndexedStack target$,
) =>
    (dynamic other$) {
      target$.index = other$;
    };
Function _RenderIndexedStack__$(m.Scope scope$) => ({
      List? children,
      AlignmentGeometry? alignment,
      TextDirection? textDirection,
      StackFit? fit,
      Clip? clipBehavior,
      int? index,
    }) {
      return RenderIndexedStack(
        alignment: alignment ?? AlignmentDirectional.topStart,
        children: children == null ? null : List.from(children),
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        fit: fit ?? StackFit.loose,
        index: index ?? 0,
        textDirection: textDirection,
      );
    };
Function _RenderIndexedStack_visitChildrenForSemantics$(
  m.Scope scope$,
  RenderIndexedStack target$,
) =>
    (m.FunctionPointer visitor) {
      void visitorProxy(RenderObject visitor_child$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            visitor,
            [visitor_child$],
            {},
          );
      target$.visitChildrenForSemantics(visitorProxy);
    };
Function _RenderIndexedStack_hitTestChildren$(
  m.Scope scope$,
  RenderIndexedStack target$,
) =>
    target$.hitTestChildren;
Function _RenderIndexedStack_paintStack$(
  m.Scope scope$,
  RenderIndexedStack target$,
) =>
    target$.paintStack;
Function _RenderIndexedStack_debugFillProperties$(
  m.Scope scope$,
  RenderIndexedStack target$,
) =>
    target$.debugFillProperties;
Function _RenderIndexedStack_debugDescribeChildren$(
  m.Scope scope$,
  RenderIndexedStack target$,
) =>
    target$.debugDescribeChildren;
StackFit _StackFit_loose$() {
  return StackFit.loose;
}

StackFit _StackFit_expand$() {
  return StackFit.expand;
}

StackFit _StackFit_passthrough$() {
  return StackFit.passthrough;
}

List<StackFit> _StackFit_values$() {
  return StackFit.values;
}
