// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:flutter/widgets.dart';
import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/pages.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/routes.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/pages.dart',
  {'PageRouteBuilder.': _PageRouteBuilder__$},
  {},
  {
    'PageRoute': m.ClassMirror(
      'PageRoute',
      {
        '#as': PageRoute_as$,
        '#is': PageRoute_is$,
        'fullscreenDialog': _PageRoute_fullscreenDialog$,
        'allowSnapshotting': _PageRoute_allowSnapshotting$,
        'opaque': _PageRoute_opaque$,
        'barrierDismissible': _PageRoute_barrierDismissible$,
        'canTransitionTo': _PageRoute_canTransitionTo$,
        'canTransitionFrom': _PageRoute_canTransitionFrom$,
      },
      {},
    ),
    'PageRouteBuilder': m.ClassMirror(
      'PageRouteBuilder',
      {
        '#as': PageRouteBuilder_as$,
        '#is': PageRouteBuilder_is$,
        'pageBuilder': _PageRouteBuilder_pageBuilder$,
        'transitionsBuilder': _PageRouteBuilder_transitionsBuilder$,
        'transitionDuration': _PageRouteBuilder_transitionDuration$,
        'reverseTransitionDuration':
            _PageRouteBuilder_reverseTransitionDuration$,
        'opaque': _PageRouteBuilder_opaque$,
        'barrierDismissible': _PageRouteBuilder_barrierDismissible$,
        'barrierColor': _PageRouteBuilder_barrierColor$,
        'barrierLabel': _PageRouteBuilder_barrierLabel$,
        'maintainState': _PageRouteBuilder_maintainState$,
        'buildPage': _PageRouteBuilder_buildPage$,
        'buildTransitions': _PageRouteBuilder_buildTransitions$,
      },
      {},
    ),
  },
);
Function PageRoute_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PageRoute<T>;
Function PageRoute_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PageRoute<T>;
Function _PageRoute_fullscreenDialog$<T>(
  m.Scope scope$,
  PageRoute<T> target$,
) =>
    () {
      return target$.fullscreenDialog;
    };
Function _PageRoute_allowSnapshotting$<T>(
  m.Scope scope$,
  PageRoute<T> target$,
) =>
    () {
      return target$.allowSnapshotting;
    };
Function _PageRoute_opaque$<T>(
  m.Scope scope$,
  PageRoute<T> target$,
) =>
    () {
      return target$.opaque;
    };
Function _PageRoute_barrierDismissible$<T>(
  m.Scope scope$,
  PageRoute<T> target$,
) =>
    () {
      return target$.barrierDismissible;
    };
Function _PageRoute_canTransitionTo$<T>(
  m.Scope scope$,
  PageRoute<T> target$,
) =>
    target$.canTransitionTo;
Function _PageRoute_canTransitionFrom$<T>(
  m.Scope scope$,
  PageRoute<T> target$,
) =>
    target$.canTransitionFrom;
Function PageRouteBuilder_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PageRouteBuilder<T>;
Function PageRouteBuilder_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PageRouteBuilder<T>;
Function _PageRouteBuilder_pageBuilder$<T>(
  m.Scope scope$,
  PageRouteBuilder<T> target$,
) =>
    () {
      return target$.pageBuilder;
    };
Function _PageRouteBuilder_transitionsBuilder$<T>(
  m.Scope scope$,
  PageRouteBuilder<T> target$,
) =>
    () {
      return target$.transitionsBuilder;
    };
Function _PageRouteBuilder_transitionDuration$<T>(
  m.Scope scope$,
  PageRouteBuilder<T> target$,
) =>
    () {
      return target$.transitionDuration;
    };
Function _PageRouteBuilder_reverseTransitionDuration$<T>(
  m.Scope scope$,
  PageRouteBuilder<T> target$,
) =>
    () {
      return target$.reverseTransitionDuration;
    };
Function _PageRouteBuilder_opaque$<T>(
  m.Scope scope$,
  PageRouteBuilder<T> target$,
) =>
    () {
      return target$.opaque;
    };
Function _PageRouteBuilder_barrierDismissible$<T>(
  m.Scope scope$,
  PageRouteBuilder<T> target$,
) =>
    () {
      return target$.barrierDismissible;
    };
Function _PageRouteBuilder_barrierColor$<T>(
  m.Scope scope$,
  PageRouteBuilder<T> target$,
) =>
    () {
      return target$.barrierColor;
    };
Function _PageRouteBuilder_barrierLabel$<T>(
  m.Scope scope$,
  PageRouteBuilder<T> target$,
) =>
    () {
      return target$.barrierLabel;
    };
Function _PageRouteBuilder_maintainState$<T>(
  m.Scope scope$,
  PageRouteBuilder<T> target$,
) =>
    () {
      return target$.maintainState;
    };
Function _PageRouteBuilder__$(m.Scope scope$) => ({
      RouteSettings? settings,
      required m.FunctionPointer pageBuilder,
      m.FunctionPointer? transitionsBuilder,
      Duration? transitionDuration,
      Duration? reverseTransitionDuration,
      bool? opaque,
      bool? barrierDismissible,
      Color? barrierColor,
      String? barrierLabel,
      bool? maintainState,
      bool? fullscreenDialog,
      bool? allowSnapshotting,
    }) {
      Widget pageBuilderProxy(
        BuildContext pageBuilder_context$,
        Animation<double> pageBuilder_animation$,
        Animation<double> pageBuilder_secondaryAnimation$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            pageBuilder,
            [
              pageBuilder_context$,
              pageBuilder_animation$,
              pageBuilder_secondaryAnimation$,
            ],
            {},
          );
      Widget transitionsBuilderProxy(
        BuildContext transitionsBuilder_context$,
        Animation<double> transitionsBuilder_animation$,
        Animation<double> transitionsBuilder_secondaryAnimation$,
        Widget transitionsBuilder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            transitionsBuilder!,
            [
              transitionsBuilder_context$,
              transitionsBuilder_animation$,
              transitionsBuilder_secondaryAnimation$,
              transitionsBuilder_child$,
            ],
            {},
          );
      return PageRouteBuilder(
        allowSnapshotting: allowSnapshotting ?? true,
        barrierColor: barrierColor,
        barrierDismissible: barrierDismissible ?? false,
        barrierLabel: barrierLabel,
        fullscreenDialog: fullscreenDialog ?? false,
        maintainState: maintainState ?? true,
        opaque: opaque ?? true,
        pageBuilder: pageBuilderProxy,
        reverseTransitionDuration:
            reverseTransitionDuration ?? const Duration(milliseconds: 300),
        settings: settings,
        transitionDuration:
            transitionDuration ?? const Duration(milliseconds: 300),
        transitionsBuilder: transitionsBuilder == null
            ? (BuildContext context, Animation<double> animation,
                Animation<double> secondaryAnimation, Widget child) {
                return child;
              }
            : transitionsBuilderProxy,
      );
    };
Function _PageRouteBuilder_buildPage$<T>(
  m.Scope scope$,
  PageRouteBuilder<T> target$,
) =>
    target$.buildPage;
Function _PageRouteBuilder_buildTransitions$<T>(
  m.Scope scope$,
  PageRouteBuilder<T> target$,
) =>
    target$.buildTransitions;
