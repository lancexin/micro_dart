// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/pages.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/routes.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/pages.dart',
  {},
  {},
  {
    'PageRoute': m.ClassMirror(
      'PageRoute',
      {
        'fullscreenDialog': _PageRoute_fullscreenDialog$,
        'allowSnapshotting': _PageRoute_allowSnapshotting$,
        'opaque': _PageRoute_opaque$,
        'barrierDismissible': _PageRoute_barrierDismissible$,
        'canTransitionTo': _PageRoute_canTransitionTo$,
        'canTransitionFrom': _PageRoute_canTransitionFrom$,
      },
      {},
    ),
    'PageRouteBuilder': m.ClassMirror(
      'PageRouteBuilder',
      {
        'pageBuilder': _PageRouteBuilder_pageBuilder$,
        'transitionsBuilder': _PageRouteBuilder_transitionsBuilder$,
        'transitionDuration': _PageRouteBuilder_transitionDuration$,
        'reverseTransitionDuration':
            _PageRouteBuilder_reverseTransitionDuration$,
        'opaque': _PageRouteBuilder_opaque$,
        'barrierDismissible': _PageRouteBuilder_barrierDismissible$,
        'barrierColor': _PageRouteBuilder_barrierColor$,
        'barrierLabel': _PageRouteBuilder_barrierLabel$,
        'maintainState': _PageRouteBuilder_maintainState$,
        'buildPage': _PageRouteBuilder_buildPage$,
        'buildTransitions': _PageRouteBuilder_buildTransitions$,
      },
      {},
    ),
  },
);
bool _PageRoute_fullscreenDialog$<T>(PageRoute<T> target) {
  return target.fullscreenDialog;
}

bool _PageRoute_allowSnapshotting$<T>(PageRoute<T> target) {
  return target.allowSnapshotting;
}

bool _PageRoute_opaque$<T>(PageRoute<T> target) {
  return target.opaque;
}

bool _PageRoute_barrierDismissible$<T>(PageRoute<T> target) {
  return target.barrierDismissible;
}

Function _PageRoute_canTransitionTo$<T>(
  m.Scope scope,
  PageRoute<T> target,
) =>
    target.canTransitionTo;
Function _PageRoute_canTransitionFrom$<T>(
  m.Scope scope,
  PageRoute<T> target,
) =>
    target.canTransitionFrom;
Widget Function(BuildContext, Animation<double>, Animation<double>)
    _PageRouteBuilder_pageBuilder$<T>(PageRouteBuilder<T> target) {
  return target.pageBuilder;
}

Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)
    _PageRouteBuilder_transitionsBuilder$<T>(PageRouteBuilder<T> target) {
  return target.transitionsBuilder;
}

Duration _PageRouteBuilder_transitionDuration$<T>(PageRouteBuilder<T> target) {
  return target.transitionDuration;
}

Duration _PageRouteBuilder_reverseTransitionDuration$<T>(
    PageRouteBuilder<T> target) {
  return target.reverseTransitionDuration;
}

bool _PageRouteBuilder_opaque$<T>(PageRouteBuilder<T> target) {
  return target.opaque;
}

bool _PageRouteBuilder_barrierDismissible$<T>(PageRouteBuilder<T> target) {
  return target.barrierDismissible;
}

Color? _PageRouteBuilder_barrierColor$<T>(PageRouteBuilder<T> target) {
  return target.barrierColor;
}

String? _PageRouteBuilder_barrierLabel$<T>(PageRouteBuilder<T> target) {
  return target.barrierLabel;
}

bool _PageRouteBuilder_maintainState$<T>(PageRouteBuilder<T> target) {
  return target.maintainState;
}

Function _PageRouteBuilder_buildPage$<T>(
  m.Scope scope,
  PageRouteBuilder<T> target,
) =>
    target.buildPage;
Function _PageRouteBuilder_buildTransitions$<T>(
  m.Scope scope,
  PageRouteBuilder<T> target,
) =>
    target.buildTransitions;
