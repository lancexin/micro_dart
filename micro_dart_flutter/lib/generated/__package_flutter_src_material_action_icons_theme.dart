// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/action_icons_theme.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/action_buttons.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/action_icons_theme.dart',
  {
    'ActionIconThemeData.': _ActionIconThemeData__$,
    'ActionIconThemeData.copyWith': _ActionIconThemeData_copyWith$,
    'ActionIconThemeData.lerp': _ActionIconThemeData_lerp$,
    'ActionIconTheme.': _ActionIconTheme__$,
    'ActionIconTheme.of': _ActionIconTheme_of$,
  },
  {},
  {
    'ActionIconThemeData': m.ClassMirror(
      'ActionIconThemeData',
      {
        '#as': ActionIconThemeData_as$,
        '#is': ActionIconThemeData_is$,
        'backButtonIconBuilder': _ActionIconThemeData_backButtonIconBuilder$,
        'closeButtonIconBuilder': _ActionIconThemeData_closeButtonIconBuilder$,
        'drawerButtonIconBuilder':
            _ActionIconThemeData_drawerButtonIconBuilder$,
        'endDrawerButtonIconBuilder':
            _ActionIconThemeData_endDrawerButtonIconBuilder$,
        'hashCode': _ActionIconThemeData_hashCode$,
        '==': _ActionIconThemeData_eq$$,
        'debugFillProperties': _ActionIconThemeData_debugFillProperties$,
      },
      {},
    ),
    'ActionIconTheme': m.ClassMirror(
      'ActionIconTheme',
      {
        '#as': ActionIconTheme_as$,
        '#is': ActionIconTheme_is$,
        'data': _ActionIconTheme_data$,
        'wrap': _ActionIconTheme_wrap$,
        'updateShouldNotify': _ActionIconTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function ActionIconThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ActionIconThemeData;
Function ActionIconThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ActionIconThemeData;
Function _ActionIconThemeData_backButtonIconBuilder$(
  m.Scope scope$,
  ActionIconThemeData target$,
) =>
    () {
      return target$.backButtonIconBuilder;
    };
Function _ActionIconThemeData_closeButtonIconBuilder$(
  m.Scope scope$,
  ActionIconThemeData target$,
) =>
    () {
      return target$.closeButtonIconBuilder;
    };
Function _ActionIconThemeData_drawerButtonIconBuilder$(
  m.Scope scope$,
  ActionIconThemeData target$,
) =>
    () {
      return target$.drawerButtonIconBuilder;
    };
Function _ActionIconThemeData_endDrawerButtonIconBuilder$(
  m.Scope scope$,
  ActionIconThemeData target$,
) =>
    () {
      return target$.endDrawerButtonIconBuilder;
    };
Function _ActionIconThemeData_hashCode$(
  m.Scope scope$,
  ActionIconThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _ActionIconThemeData__$(m.Scope scope$) => ({
      m.FunctionPointer? backButtonIconBuilder,
      m.FunctionPointer? closeButtonIconBuilder,
      m.FunctionPointer? drawerButtonIconBuilder,
      m.FunctionPointer? endDrawerButtonIconBuilder,
    }) {
      Widget backButtonIconBuilderProxy(
              BuildContext backButtonIconBuilder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            backButtonIconBuilder!,
            [backButtonIconBuilder_context$],
            {},
          );
      Widget closeButtonIconBuilderProxy(
              BuildContext closeButtonIconBuilder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            closeButtonIconBuilder!,
            [closeButtonIconBuilder_context$],
            {},
          );
      Widget drawerButtonIconBuilderProxy(
              BuildContext drawerButtonIconBuilder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            drawerButtonIconBuilder!,
            [drawerButtonIconBuilder_context$],
            {},
          );
      Widget endDrawerButtonIconBuilderProxy(
              BuildContext endDrawerButtonIconBuilder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            endDrawerButtonIconBuilder!,
            [endDrawerButtonIconBuilder_context$],
            {},
          );
      return ActionIconThemeData(
        backButtonIconBuilder:
            backButtonIconBuilder == null ? null : backButtonIconBuilderProxy,
        closeButtonIconBuilder:
            closeButtonIconBuilder == null ? null : closeButtonIconBuilderProxy,
        drawerButtonIconBuilder: drawerButtonIconBuilder == null
            ? null
            : drawerButtonIconBuilderProxy,
        endDrawerButtonIconBuilder: endDrawerButtonIconBuilder == null
            ? null
            : endDrawerButtonIconBuilderProxy,
      );
    };
Function _ActionIconThemeData_copyWith$(
  m.Scope scope$,
  ActionIconThemeData target$,
) =>
    ({
      m.FunctionPointer? backButtonIconBuilder,
      m.FunctionPointer? closeButtonIconBuilder,
      m.FunctionPointer? drawerButtonIconBuilder,
      m.FunctionPointer? endDrawerButtonIconBuilder,
    }) {
      Widget backButtonIconBuilderProxy(
              BuildContext backButtonIconBuilder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            backButtonIconBuilder!,
            [backButtonIconBuilder_context$],
            {},
          );
      Widget closeButtonIconBuilderProxy(
              BuildContext closeButtonIconBuilder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            closeButtonIconBuilder!,
            [closeButtonIconBuilder_context$],
            {},
          );
      Widget drawerButtonIconBuilderProxy(
              BuildContext drawerButtonIconBuilder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            drawerButtonIconBuilder!,
            [drawerButtonIconBuilder_context$],
            {},
          );
      Widget endDrawerButtonIconBuilderProxy(
              BuildContext endDrawerButtonIconBuilder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            endDrawerButtonIconBuilder!,
            [endDrawerButtonIconBuilder_context$],
            {},
          );
      return target$.copyWith(
        backButtonIconBuilder:
            backButtonIconBuilder == null ? null : backButtonIconBuilderProxy,
        closeButtonIconBuilder:
            closeButtonIconBuilder == null ? null : closeButtonIconBuilderProxy,
        drawerButtonIconBuilder: drawerButtonIconBuilder == null
            ? null
            : drawerButtonIconBuilderProxy,
        endDrawerButtonIconBuilder: endDrawerButtonIconBuilder == null
            ? null
            : endDrawerButtonIconBuilderProxy,
      );
    };
Function _ActionIconThemeData_lerp$(m.Scope scope$) => ActionIconThemeData.lerp;
Function _ActionIconThemeData_eq$$(
  m.Scope scope$,
  ActionIconThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _ActionIconThemeData_debugFillProperties$(
  m.Scope scope$,
  ActionIconThemeData target$,
) =>
    target$.debugFillProperties;
Function ActionIconTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ActionIconTheme;
Function ActionIconTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ActionIconTheme;
Function _ActionIconTheme_data$(
  m.Scope scope$,
  ActionIconTheme target$,
) =>
    () {
      return target$.data;
    };
Function _ActionIconTheme__$(m.Scope scope$) => ({
      Key? key,
      required ActionIconThemeData data,
      required Widget child,
    }) {
      return ActionIconTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _ActionIconTheme_of$(m.Scope scope$) => ActionIconTheme.of;
Function _ActionIconTheme_wrap$(
  m.Scope scope$,
  ActionIconTheme target$,
) =>
    target$.wrap;
Function _ActionIconTheme_updateShouldNotify$(
  m.Scope scope$,
  ActionIconTheme target$,
) =>
    target$.updateShouldNotify;
