// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/drawer_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/drawer_theme.dart',
  {
    'DrawerThemeData.': _DrawerThemeData__$,
    'DrawerThemeData.lerp': _DrawerThemeData_lerp$,
    'DrawerTheme.': _DrawerTheme__$,
    'DrawerTheme.of': _DrawerTheme_of$,
  },
  {},
  {
    'DrawerThemeData': m.ClassMirror(
      'DrawerThemeData',
      {
        '#as': DrawerThemeData_as$,
        '#is': DrawerThemeData_is$,
        'backgroundColor': _DrawerThemeData_backgroundColor$,
        'scrimColor': _DrawerThemeData_scrimColor$,
        'elevation': _DrawerThemeData_elevation$,
        'shadowColor': _DrawerThemeData_shadowColor$,
        'surfaceTintColor': _DrawerThemeData_surfaceTintColor$,
        'shape': _DrawerThemeData_shape$,
        'endShape': _DrawerThemeData_endShape$,
        'width': _DrawerThemeData_width$,
        'hashCode': _DrawerThemeData_hashCode$,
        'copyWith': _DrawerThemeData_copyWith$,
        '==': _DrawerThemeData_eq$$,
        'debugFillProperties': _DrawerThemeData_debugFillProperties$,
      },
      {},
    ),
    'DrawerTheme': m.ClassMirror(
      'DrawerTheme',
      {
        '#as': DrawerTheme_as$,
        '#is': DrawerTheme_is$,
        'data': _DrawerTheme_data$,
        'wrap': _DrawerTheme_wrap$,
        'updateShouldNotify': _DrawerTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function DrawerThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DrawerThemeData;
Function DrawerThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DrawerThemeData;
Function _DrawerThemeData_backgroundColor$(
  m.Scope scope$,
  DrawerThemeData target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _DrawerThemeData_scrimColor$(
  m.Scope scope$,
  DrawerThemeData target$,
) =>
    () {
      return target$.scrimColor;
    };
Function _DrawerThemeData_elevation$(
  m.Scope scope$,
  DrawerThemeData target$,
) =>
    () {
      return target$.elevation;
    };
Function _DrawerThemeData_shadowColor$(
  m.Scope scope$,
  DrawerThemeData target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _DrawerThemeData_surfaceTintColor$(
  m.Scope scope$,
  DrawerThemeData target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _DrawerThemeData_shape$(
  m.Scope scope$,
  DrawerThemeData target$,
) =>
    () {
      return target$.shape;
    };
Function _DrawerThemeData_endShape$(
  m.Scope scope$,
  DrawerThemeData target$,
) =>
    () {
      return target$.endShape;
    };
Function _DrawerThemeData_width$(
  m.Scope scope$,
  DrawerThemeData target$,
) =>
    () {
      return target$.width;
    };
Function _DrawerThemeData_hashCode$(
  m.Scope scope$,
  DrawerThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _DrawerThemeData__$(m.Scope scope$) => ({
      Color? backgroundColor,
      Color? scrimColor,
      double? elevation,
      Color? shadowColor,
      Color? surfaceTintColor,
      ShapeBorder? shape,
      ShapeBorder? endShape,
      double? width,
    }) {
      return DrawerThemeData(
        backgroundColor: backgroundColor,
        elevation: elevation,
        endShape: endShape,
        scrimColor: scrimColor,
        shadowColor: shadowColor,
        shape: shape,
        surfaceTintColor: surfaceTintColor,
        width: width,
      );
    };
Function _DrawerThemeData_copyWith$(
  m.Scope scope$,
  DrawerThemeData target$,
) =>
    target$.copyWith;
Function _DrawerThemeData_lerp$(m.Scope scope$) => DrawerThemeData.lerp;
Function _DrawerThemeData_eq$$(
  m.Scope scope$,
  DrawerThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _DrawerThemeData_debugFillProperties$(
  m.Scope scope$,
  DrawerThemeData target$,
) =>
    target$.debugFillProperties;
Function DrawerTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DrawerTheme;
Function DrawerTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DrawerTheme;
Function _DrawerTheme_data$(
  m.Scope scope$,
  DrawerTheme target$,
) =>
    () {
      return target$.data;
    };
Function _DrawerTheme__$(m.Scope scope$) => ({
      Key? key,
      required DrawerThemeData data,
      required Widget child,
    }) {
      return DrawerTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _DrawerTheme_of$(m.Scope scope$) => DrawerTheme.of;
Function _DrawerTheme_wrap$(
  m.Scope scope$,
  DrawerTheme target$,
) =>
    target$.wrap;
Function _DrawerTheme_updateShouldNotify$(
  m.Scope scope$,
  DrawerTheme target$,
) =>
    target$.updateShouldNotify;
