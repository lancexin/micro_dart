// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/nested_scroll_view.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/primary_scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_activity.dart';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/widgets/scroll_context.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_metrics.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/scroll_position.dart';
import 'package:flutter/src/widgets/scroll_view.dart';
import 'package:flutter/src/widgets/sliver_fill.dart';
import 'package:flutter/src/widgets/viewport.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/nested_scroll_view.dart',
  {
    'NestedScrollView.sliverOverlapAbsorberHandleFor':
        _NestedScrollView_sliverOverlapAbsorberHandleFor$
  },
  {},
  {
    'NestedScrollView': m.ClassMirror(
      'NestedScrollView',
      {
        '#as': NestedScrollView_as$,
        '#is': NestedScrollView_is$,
        'controller': _NestedScrollView_controller$,
        'scrollDirection': _NestedScrollView_scrollDirection$,
        'reverse': _NestedScrollView_reverse$,
        'physics': _NestedScrollView_physics$,
        'headerSliverBuilder': _NestedScrollView_headerSliverBuilder$,
        'body': _NestedScrollView_body$,
        'dragStartBehavior': _NestedScrollView_dragStartBehavior$,
        'floatHeaderSlivers': _NestedScrollView_floatHeaderSlivers$,
        'clipBehavior': _NestedScrollView_clipBehavior$,
        'restorationId': _NestedScrollView_restorationId$,
        'scrollBehavior': _NestedScrollView_scrollBehavior$,
        'createState': _NestedScrollView_createState$,
      },
      {},
    ),
    'NestedScrollViewState': m.ClassMirror(
      'NestedScrollViewState',
      {
        '#as': NestedScrollViewState_as$,
        '#is': NestedScrollViewState_is$,
        'innerController': _NestedScrollViewState_innerController$,
        'outerController': _NestedScrollViewState_outerController$,
        'initState': _NestedScrollViewState_initState$,
        'didChangeDependencies': _NestedScrollViewState_didChangeDependencies$,
        'didUpdateWidget': _NestedScrollViewState_didUpdateWidget$,
        'dispose': _NestedScrollViewState_dispose$,
        'build': _NestedScrollViewState_build$,
      },
      {},
    ),
    'SliverOverlapAbsorberHandle': m.ClassMirror(
      'SliverOverlapAbsorberHandle',
      {
        '#as': SliverOverlapAbsorberHandle_as$,
        '#is': SliverOverlapAbsorberHandle_is$,
        'layoutExtent': _SliverOverlapAbsorberHandle_layoutExtent$,
        'scrollExtent': _SliverOverlapAbsorberHandle_scrollExtent$,
        'toString': _SliverOverlapAbsorberHandle_toString$,
      },
      {},
    ),
    'SliverOverlapAbsorber': m.ClassMirror(
      'SliverOverlapAbsorber',
      {
        '#as': SliverOverlapAbsorber_as$,
        '#is': SliverOverlapAbsorber_is$,
        'handle': _SliverOverlapAbsorber_handle$,
        'createRenderObject': _SliverOverlapAbsorber_createRenderObject$,
        'updateRenderObject': _SliverOverlapAbsorber_updateRenderObject$,
        'debugFillProperties': _SliverOverlapAbsorber_debugFillProperties$,
      },
      {},
    ),
    'RenderSliverOverlapAbsorber': m.ClassMirror(
      'RenderSliverOverlapAbsorber',
      {
        '#as': RenderSliverOverlapAbsorber_as$,
        '#is': RenderSliverOverlapAbsorber_is$,
        'handle': _RenderSliverOverlapAbsorber_handle$,
        'attach': _RenderSliverOverlapAbsorber_attach$,
        'detach': _RenderSliverOverlapAbsorber_detach$,
        'performLayout': _RenderSliverOverlapAbsorber_performLayout$,
        'applyPaintTransform':
            _RenderSliverOverlapAbsorber_applyPaintTransform$,
        'hitTestChildren': _RenderSliverOverlapAbsorber_hitTestChildren$,
        'paint': _RenderSliverOverlapAbsorber_paint$,
        'debugFillProperties':
            _RenderSliverOverlapAbsorber_debugFillProperties$,
      },
      {'handle': _RenderSliverOverlapAbsorber_handle_set$},
    ),
    'SliverOverlapInjector': m.ClassMirror(
      'SliverOverlapInjector',
      {
        '#as': SliverOverlapInjector_as$,
        '#is': SliverOverlapInjector_is$,
        'handle': _SliverOverlapInjector_handle$,
        'createRenderObject': _SliverOverlapInjector_createRenderObject$,
        'updateRenderObject': _SliverOverlapInjector_updateRenderObject$,
        'debugFillProperties': _SliverOverlapInjector_debugFillProperties$,
      },
      {},
    ),
    'RenderSliverOverlapInjector': m.ClassMirror(
      'RenderSliverOverlapInjector',
      {
        '#as': RenderSliverOverlapInjector_as$,
        '#is': RenderSliverOverlapInjector_is$,
        'handle': _RenderSliverOverlapInjector_handle$,
        'attach': _RenderSliverOverlapInjector_attach$,
        'detach': _RenderSliverOverlapInjector_detach$,
        'performLayout': _RenderSliverOverlapInjector_performLayout$,
        'debugPaint': _RenderSliverOverlapInjector_debugPaint$,
        'debugFillProperties':
            _RenderSliverOverlapInjector_debugFillProperties$,
      },
      {'handle': _RenderSliverOverlapInjector_handle_set$},
    ),
    'NestedScrollViewViewport': m.ClassMirror(
      'NestedScrollViewViewport',
      {
        '#as': NestedScrollViewViewport_as$,
        '#is': NestedScrollViewViewport_is$,
        'handle': _NestedScrollViewViewport_handle$,
        'createRenderObject': _NestedScrollViewViewport_createRenderObject$,
        'updateRenderObject': _NestedScrollViewViewport_updateRenderObject$,
        'debugFillProperties': _NestedScrollViewViewport_debugFillProperties$,
      },
      {},
    ),
    'RenderNestedScrollViewViewport': m.ClassMirror(
      'RenderNestedScrollViewViewport',
      {
        '#as': RenderNestedScrollViewViewport_as$,
        '#is': RenderNestedScrollViewViewport_is$,
        'handle': _RenderNestedScrollViewViewport_handle$,
        'markNeedsLayout': _RenderNestedScrollViewViewport_markNeedsLayout$,
        'debugFillProperties':
            _RenderNestedScrollViewViewport_debugFillProperties$,
      },
      {'handle': _RenderNestedScrollViewViewport_handle_set$},
    ),
  },
);
Function NestedScrollView_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as NestedScrollView;
Function NestedScrollView_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is NestedScrollView;
ScrollController? _NestedScrollView_controller$(NestedScrollView target) {
  return target.controller;
}

Axis _NestedScrollView_scrollDirection$(NestedScrollView target) {
  return target.scrollDirection;
}

bool _NestedScrollView_reverse$(NestedScrollView target) {
  return target.reverse;
}

ScrollPhysics? _NestedScrollView_physics$(NestedScrollView target) {
  return target.physics;
}

List<Widget> Function(BuildContext, bool)
    _NestedScrollView_headerSliverBuilder$(NestedScrollView target) {
  return target.headerSliverBuilder;
}

Widget _NestedScrollView_body$(NestedScrollView target) {
  return target.body;
}

DragStartBehavior _NestedScrollView_dragStartBehavior$(
    NestedScrollView target) {
  return target.dragStartBehavior;
}

bool _NestedScrollView_floatHeaderSlivers$(NestedScrollView target) {
  return target.floatHeaderSlivers;
}

Clip _NestedScrollView_clipBehavior$(NestedScrollView target) {
  return target.clipBehavior;
}

String? _NestedScrollView_restorationId$(NestedScrollView target) {
  return target.restorationId;
}

ScrollBehavior? _NestedScrollView_scrollBehavior$(NestedScrollView target) {
  return target.scrollBehavior;
}

Function _NestedScrollView_sliverOverlapAbsorberHandleFor$(m.Scope scope) =>
    NestedScrollView.sliverOverlapAbsorberHandleFor;
Function _NestedScrollView_createState$(
  m.Scope scope,
  NestedScrollView target,
) =>
    target.createState;
Function NestedScrollViewState_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as NestedScrollViewState;
Function NestedScrollViewState_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is NestedScrollViewState;
ScrollController _NestedScrollViewState_innerController$(
    NestedScrollViewState target) {
  return target.innerController;
}

ScrollController _NestedScrollViewState_outerController$(
    NestedScrollViewState target) {
  return target.outerController;
}

Function _NestedScrollViewState_initState$(
  m.Scope scope,
  NestedScrollViewState target,
) =>
    target.initState;
Function _NestedScrollViewState_didChangeDependencies$(
  m.Scope scope,
  NestedScrollViewState target,
) =>
    target.didChangeDependencies;
Function _NestedScrollViewState_didUpdateWidget$(
  m.Scope scope,
  NestedScrollViewState target,
) =>
    target.didUpdateWidget;
Function _NestedScrollViewState_dispose$(
  m.Scope scope,
  NestedScrollViewState target,
) =>
    target.dispose;
Function _NestedScrollViewState_build$(
  m.Scope scope,
  NestedScrollViewState target,
) =>
    target.build;
Function SliverOverlapAbsorberHandle_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SliverOverlapAbsorberHandle;
Function SliverOverlapAbsorberHandle_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SliverOverlapAbsorberHandle;
double? _SliverOverlapAbsorberHandle_layoutExtent$(
    SliverOverlapAbsorberHandle target) {
  return target.layoutExtent;
}

double? _SliverOverlapAbsorberHandle_scrollExtent$(
    SliverOverlapAbsorberHandle target) {
  return target.scrollExtent;
}

Function _SliverOverlapAbsorberHandle_toString$(
  m.Scope scope,
  SliverOverlapAbsorberHandle target,
) =>
    target.toString;
Function SliverOverlapAbsorber_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SliverOverlapAbsorber;
Function SliverOverlapAbsorber_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SliverOverlapAbsorber;
SliverOverlapAbsorberHandle _SliverOverlapAbsorber_handle$(
    SliverOverlapAbsorber target) {
  return target.handle;
}

Function _SliverOverlapAbsorber_createRenderObject$(
  m.Scope scope,
  SliverOverlapAbsorber target,
) =>
    target.createRenderObject;
Function _SliverOverlapAbsorber_updateRenderObject$(
  m.Scope scope,
  SliverOverlapAbsorber target,
) =>
    target.updateRenderObject;
Function _SliverOverlapAbsorber_debugFillProperties$(
  m.Scope scope,
  SliverOverlapAbsorber target,
) =>
    target.debugFillProperties;
Function RenderSliverOverlapAbsorber_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderSliverOverlapAbsorber;
Function RenderSliverOverlapAbsorber_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderSliverOverlapAbsorber;
SliverOverlapAbsorberHandle _RenderSliverOverlapAbsorber_handle$(
    RenderSliverOverlapAbsorber target) {
  return target.handle;
}

void _RenderSliverOverlapAbsorber_handle_set$(
  RenderSliverOverlapAbsorber target,
  SliverOverlapAbsorberHandle other,
) {
  target.handle = other;
}

Function _RenderSliverOverlapAbsorber_attach$(
  m.Scope scope,
  RenderSliverOverlapAbsorber target,
) =>
    target.attach;
Function _RenderSliverOverlapAbsorber_detach$(
  m.Scope scope,
  RenderSliverOverlapAbsorber target,
) =>
    target.detach;
Function _RenderSliverOverlapAbsorber_performLayout$(
  m.Scope scope,
  RenderSliverOverlapAbsorber target,
) =>
    target.performLayout;
Function _RenderSliverOverlapAbsorber_applyPaintTransform$(
  m.Scope scope,
  RenderSliverOverlapAbsorber target,
) =>
    target.applyPaintTransform;
Function _RenderSliverOverlapAbsorber_hitTestChildren$(
  m.Scope scope,
  RenderSliverOverlapAbsorber target,
) =>
    target.hitTestChildren;
Function _RenderSliverOverlapAbsorber_paint$(
  m.Scope scope,
  RenderSliverOverlapAbsorber target,
) =>
    target.paint;
Function _RenderSliverOverlapAbsorber_debugFillProperties$(
  m.Scope scope,
  RenderSliverOverlapAbsorber target,
) =>
    target.debugFillProperties;
Function SliverOverlapInjector_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SliverOverlapInjector;
Function SliverOverlapInjector_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SliverOverlapInjector;
SliverOverlapAbsorberHandle _SliverOverlapInjector_handle$(
    SliverOverlapInjector target) {
  return target.handle;
}

Function _SliverOverlapInjector_createRenderObject$(
  m.Scope scope,
  SliverOverlapInjector target,
) =>
    target.createRenderObject;
Function _SliverOverlapInjector_updateRenderObject$(
  m.Scope scope,
  SliverOverlapInjector target,
) =>
    target.updateRenderObject;
Function _SliverOverlapInjector_debugFillProperties$(
  m.Scope scope,
  SliverOverlapInjector target,
) =>
    target.debugFillProperties;
Function RenderSliverOverlapInjector_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderSliverOverlapInjector;
Function RenderSliverOverlapInjector_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderSliverOverlapInjector;
SliverOverlapAbsorberHandle _RenderSliverOverlapInjector_handle$(
    RenderSliverOverlapInjector target) {
  return target.handle;
}

void _RenderSliverOverlapInjector_handle_set$(
  RenderSliverOverlapInjector target,
  SliverOverlapAbsorberHandle other,
) {
  target.handle = other;
}

Function _RenderSliverOverlapInjector_attach$(
  m.Scope scope,
  RenderSliverOverlapInjector target,
) =>
    target.attach;
Function _RenderSliverOverlapInjector_detach$(
  m.Scope scope,
  RenderSliverOverlapInjector target,
) =>
    target.detach;
Function _RenderSliverOverlapInjector_performLayout$(
  m.Scope scope,
  RenderSliverOverlapInjector target,
) =>
    target.performLayout;
Function _RenderSliverOverlapInjector_debugPaint$(
  m.Scope scope,
  RenderSliverOverlapInjector target,
) =>
    target.debugPaint;
Function _RenderSliverOverlapInjector_debugFillProperties$(
  m.Scope scope,
  RenderSliverOverlapInjector target,
) =>
    target.debugFillProperties;
Function NestedScrollViewViewport_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as NestedScrollViewViewport;
Function NestedScrollViewViewport_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is NestedScrollViewViewport;
SliverOverlapAbsorberHandle _NestedScrollViewViewport_handle$(
    NestedScrollViewViewport target) {
  return target.handle;
}

Function _NestedScrollViewViewport_createRenderObject$(
  m.Scope scope,
  NestedScrollViewViewport target,
) =>
    target.createRenderObject;
Function _NestedScrollViewViewport_updateRenderObject$(
  m.Scope scope,
  NestedScrollViewViewport target,
) =>
    target.updateRenderObject;
Function _NestedScrollViewViewport_debugFillProperties$(
  m.Scope scope,
  NestedScrollViewViewport target,
) =>
    target.debugFillProperties;
Function RenderNestedScrollViewViewport_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderNestedScrollViewViewport;
Function RenderNestedScrollViewViewport_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderNestedScrollViewViewport;
SliverOverlapAbsorberHandle _RenderNestedScrollViewViewport_handle$(
    RenderNestedScrollViewViewport target) {
  return target.handle;
}

void _RenderNestedScrollViewViewport_handle_set$(
  RenderNestedScrollViewViewport target,
  SliverOverlapAbsorberHandle other,
) {
  target.handle = other;
}

Function _RenderNestedScrollViewViewport_markNeedsLayout$(
  m.Scope scope,
  RenderNestedScrollViewViewport target,
) =>
    target.markNeedsLayout;
Function _RenderNestedScrollViewViewport_debugFillProperties$(
  m.Scope scope,
  RenderNestedScrollViewViewport target,
) =>
    target.debugFillProperties;
