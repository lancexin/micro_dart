// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/router.dart';
import 'dart:async';
import 'dart:collection';
import 'package:flutter/foundation.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/binding.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/navigator.dart';
import 'package:flutter/src/widgets/restoration.dart';
import 'package:flutter/src/widgets/restoration_properties.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/router.dart',
  {
    'Router.of': _Router_of$,
    'Router.maybeOf': _Router_maybeOf$,
    'RouteInformationReportingType.none': _RouteInformationReportingType_none$,
    'RouteInformationReportingType.neglect':
        _RouteInformationReportingType_neglect$,
    'RouteInformationReportingType.navigate':
        _RouteInformationReportingType_navigate$,
    'RouteInformationReportingType.values':
        _RouteInformationReportingType_values$,
  },
  {},
  {
    'RouteInformation': m.ClassMirror(
      'RouteInformation',
      {
        'location': _RouteInformation_location$,
        'state': _RouteInformation_state$,
      },
      {},
    ),
    'RouterConfig': m.ClassMirror(
      'RouterConfig',
      {
        'routeInformationProvider': _RouterConfig_routeInformationProvider$,
        'routeInformationParser': _RouterConfig_routeInformationParser$,
        'routerDelegate': _RouterConfig_routerDelegate$,
        'backButtonDispatcher': _RouterConfig_backButtonDispatcher$,
      },
      {},
    ),
    'Router': m.ClassMirror(
      'Router',
      {
        'routeInformationProvider': _Router_routeInformationProvider$,
        'routeInformationParser': _Router_routeInformationParser$,
        'routerDelegate': _Router_routerDelegate$,
        'backButtonDispatcher': _Router_backButtonDispatcher$,
        'restorationScopeId': _Router_restorationScopeId$,
        'createState': _Router_createState$,
      },
      {},
    ),
    'BackButtonDispatcher': m.ClassMirror(
      'BackButtonDispatcher',
      {
        'hasCallbacks': _BackButtonDispatcher_hasCallbacks$,
        'invokeCallback': _BackButtonDispatcher_invokeCallback$,
        'createChildBackButtonDispatcher':
            _BackButtonDispatcher_createChildBackButtonDispatcher$,
        'takePriority': _BackButtonDispatcher_takePriority$,
        'deferTo': _BackButtonDispatcher_deferTo$,
        'forget': _BackButtonDispatcher_forget$,
      },
      {},
    ),
    'RootBackButtonDispatcher': m.ClassMirror(
      'RootBackButtonDispatcher',
      {'didPopRoute': _RootBackButtonDispatcher_didPopRoute$},
      {},
    ),
    'ChildBackButtonDispatcher': m.ClassMirror(
      'ChildBackButtonDispatcher',
      {
        'parent': _ChildBackButtonDispatcher_parent$,
        'notifiedByParent': _ChildBackButtonDispatcher_notifiedByParent$,
        'takePriority': _ChildBackButtonDispatcher_takePriority$,
        'deferTo': _ChildBackButtonDispatcher_deferTo$,
      },
      {},
    ),
    'BackButtonListener': m.ClassMirror(
      'BackButtonListener',
      {
        'child': _BackButtonListener_child$,
        'onBackButtonPressed': _BackButtonListener_onBackButtonPressed$,
        'createState': _BackButtonListener_createState$,
      },
      {},
    ),
    'RouteInformationParser': m.ClassMirror(
      'RouteInformationParser',
      {
        'parseRouteInformation': _RouteInformationParser_parseRouteInformation$,
        'parseRouteInformationWithDependencies':
            _RouteInformationParser_parseRouteInformationWithDependencies$,
        'restoreRouteInformation':
            _RouteInformationParser_restoreRouteInformation$,
      },
      {},
    ),
    'RouterDelegate': m.ClassMirror(
      'RouterDelegate',
      {
        'currentConfiguration': _RouterDelegate_currentConfiguration$,
        'setInitialRoutePath': _RouterDelegate_setInitialRoutePath$,
        'setRestoredRoutePath': _RouterDelegate_setRestoredRoutePath$,
        'setNewRoutePath': _RouterDelegate_setNewRoutePath$,
        'popRoute': _RouterDelegate_popRoute$,
        'build': _RouterDelegate_build$,
      },
      {},
    ),
    'RouteInformationProvider': m.ClassMirror(
      'RouteInformationProvider',
      {
        'routerReportsNewRouteInformation':
            _RouteInformationProvider_routerReportsNewRouteInformation$
      },
      {},
    ),
    'PlatformRouteInformationProvider': m.ClassMirror(
      'PlatformRouteInformationProvider',
      {
        'value': _PlatformRouteInformationProvider_value$,
        'routerReportsNewRouteInformation':
            _PlatformRouteInformationProvider_routerReportsNewRouteInformation$,
        'dispose': _PlatformRouteInformationProvider_dispose$,
        'didPushRouteInformation':
            _PlatformRouteInformationProvider_didPushRouteInformation$,
        'didPushRoute': _PlatformRouteInformationProvider_didPushRoute$,
      },
      {},
    ),
    'RouteInformationReportingType': m.ClassMirror(
      'RouteInformationReportingType',
      {},
      {},
    ),
  },
);
String? _RouteInformation_location$(RouteInformation target) {
  return target.location;
}

Object? _RouteInformation_state$(RouteInformation target) {
  return target.state;
}

RouteInformationProvider? _RouterConfig_routeInformationProvider$<T>(
    RouterConfig<T> target) {
  return target.routeInformationProvider;
}

RouteInformationParser<T>? _RouterConfig_routeInformationParser$<T>(
    RouterConfig<T> target) {
  return target.routeInformationParser;
}

RouterDelegate<T> _RouterConfig_routerDelegate$<T>(RouterConfig<T> target) {
  return target.routerDelegate;
}

BackButtonDispatcher? _RouterConfig_backButtonDispatcher$<T>(
    RouterConfig<T> target) {
  return target.backButtonDispatcher;
}

RouteInformationProvider? _Router_routeInformationProvider$<T>(
    Router<T> target) {
  return target.routeInformationProvider;
}

RouteInformationParser<T>? _Router_routeInformationParser$<T>(
    Router<T> target) {
  return target.routeInformationParser;
}

RouterDelegate<T> _Router_routerDelegate$<T>(Router<T> target) {
  return target.routerDelegate;
}

BackButtonDispatcher? _Router_backButtonDispatcher$<T>(Router<T> target) {
  return target.backButtonDispatcher;
}

String? _Router_restorationScopeId$<T>(Router<T> target) {
  return target.restorationScopeId;
}

Function _Router_of$<T extends Object?>(m.Scope scope) => Router.of<T>;
Function _Router_maybeOf$<T extends Object?>(m.Scope scope) =>
    Router.maybeOf<T>;
Function _Router_createState$<T>(
  m.Scope scope,
  Router<T> target,
) =>
    target.createState;
bool _BackButtonDispatcher_hasCallbacks$(BackButtonDispatcher target) {
  return target.hasCallbacks;
}

Function _BackButtonDispatcher_invokeCallback$(
  m.Scope scope,
  BackButtonDispatcher target,
) =>
    target.invokeCallback;
Function _BackButtonDispatcher_createChildBackButtonDispatcher$(
  m.Scope scope,
  BackButtonDispatcher target,
) =>
    target.createChildBackButtonDispatcher;
Function _BackButtonDispatcher_takePriority$(
  m.Scope scope,
  BackButtonDispatcher target,
) =>
    target.takePriority;
Function _BackButtonDispatcher_deferTo$(
  m.Scope scope,
  BackButtonDispatcher target,
) =>
    target.deferTo;
Function _BackButtonDispatcher_forget$(
  m.Scope scope,
  BackButtonDispatcher target,
) =>
    target.forget;
Function _RootBackButtonDispatcher_didPopRoute$(
  m.Scope scope,
  RootBackButtonDispatcher target,
) =>
    target.didPopRoute;
BackButtonDispatcher _ChildBackButtonDispatcher_parent$(
    ChildBackButtonDispatcher target) {
  return target.parent;
}

Function _ChildBackButtonDispatcher_notifiedByParent$(
  m.Scope scope,
  ChildBackButtonDispatcher target,
) =>
    target.notifiedByParent;
Function _ChildBackButtonDispatcher_takePriority$(
  m.Scope scope,
  ChildBackButtonDispatcher target,
) =>
    target.takePriority;
Function _ChildBackButtonDispatcher_deferTo$(
  m.Scope scope,
  ChildBackButtonDispatcher target,
) =>
    target.deferTo;
Widget _BackButtonListener_child$(BackButtonListener target) {
  return target.child;
}

Future<bool> Function() _BackButtonListener_onBackButtonPressed$(
    BackButtonListener target) {
  return target.onBackButtonPressed;
}

Function _BackButtonListener_createState$(
  m.Scope scope,
  BackButtonListener target,
) =>
    target.createState;
Function _RouteInformationParser_parseRouteInformation$<T>(
  m.Scope scope,
  RouteInformationParser<T> target,
) =>
    target.parseRouteInformation;
Function _RouteInformationParser_parseRouteInformationWithDependencies$<T>(
  m.Scope scope,
  RouteInformationParser<T> target,
) =>
    target.parseRouteInformationWithDependencies;
Function _RouteInformationParser_restoreRouteInformation$<T>(
  m.Scope scope,
  RouteInformationParser<T> target,
) =>
    target.restoreRouteInformation;
T? _RouterDelegate_currentConfiguration$<T>(RouterDelegate<T> target) {
  return target.currentConfiguration;
}

Function _RouterDelegate_setInitialRoutePath$<T>(
  m.Scope scope,
  RouterDelegate<T> target,
) =>
    target.setInitialRoutePath;
Function _RouterDelegate_setRestoredRoutePath$<T>(
  m.Scope scope,
  RouterDelegate<T> target,
) =>
    target.setRestoredRoutePath;
Function _RouterDelegate_setNewRoutePath$<T>(
  m.Scope scope,
  RouterDelegate<T> target,
) =>
    target.setNewRoutePath;
Function _RouterDelegate_popRoute$<T>(
  m.Scope scope,
  RouterDelegate<T> target,
) =>
    target.popRoute;
Function _RouterDelegate_build$<T>(
  m.Scope scope,
  RouterDelegate<T> target,
) =>
    target.build;
Function _RouteInformationProvider_routerReportsNewRouteInformation$(
  m.Scope scope,
  RouteInformationProvider target,
) =>
    target.routerReportsNewRouteInformation;
RouteInformation _PlatformRouteInformationProvider_value$(
    PlatformRouteInformationProvider target) {
  return target.value;
}

Function _PlatformRouteInformationProvider_routerReportsNewRouteInformation$(
  m.Scope scope,
  PlatformRouteInformationProvider target,
) =>
    target.routerReportsNewRouteInformation;
Function _PlatformRouteInformationProvider_dispose$(
  m.Scope scope,
  PlatformRouteInformationProvider target,
) =>
    target.dispose;
Function _PlatformRouteInformationProvider_didPushRouteInformation$(
  m.Scope scope,
  PlatformRouteInformationProvider target,
) =>
    target.didPushRouteInformation;
Function _PlatformRouteInformationProvider_didPushRoute$(
  m.Scope scope,
  PlatformRouteInformationProvider target,
) =>
    target.didPushRoute;
RouteInformationReportingType _RouteInformationReportingType_none$() {
  return RouteInformationReportingType.none;
}

RouteInformationReportingType _RouteInformationReportingType_neglect$() {
  return RouteInformationReportingType.neglect;
}

RouteInformationReportingType _RouteInformationReportingType_navigate$() {
  return RouteInformationReportingType.navigate;
}

List<RouteInformationReportingType> _RouteInformationReportingType_values$() {
  return RouteInformationReportingType.values;
}
