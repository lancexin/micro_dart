// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/drawer.dart';
import 'package:flutter/gestures.dart' show DragStartBehavior;
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/drawer_theme.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'package:flutter/src/material/list_tile_theme.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/drawer.dart',
  {
    'DrawerController.maybeOf': _DrawerController_maybeOf$,
    'DrawerController.of': _DrawerController_of$,
    'DrawerAlignment.start': _DrawerAlignment_start$,
    'DrawerAlignment.end': _DrawerAlignment_end$,
    'DrawerAlignment.values': _DrawerAlignment_values$,
  },
  {},
  {
    'Drawer': m.ClassMirror(
      'Drawer',
      {
        '#as': Drawer_as$,
        '#is': Drawer_is$,
        'backgroundColor': _Drawer_backgroundColor$,
        'elevation': _Drawer_elevation$,
        'shadowColor': _Drawer_shadowColor$,
        'surfaceTintColor': _Drawer_surfaceTintColor$,
        'shape': _Drawer_shape$,
        'width': _Drawer_width$,
        'child': _Drawer_child$,
        'semanticLabel': _Drawer_semanticLabel$,
        'clipBehavior': _Drawer_clipBehavior$,
        'build': _Drawer_build$,
      },
      {},
    ),
    'DrawerController': m.ClassMirror(
      'DrawerController',
      {
        '#as': DrawerController_as$,
        '#is': DrawerController_is$,
        'child': _DrawerController_child$,
        'alignment': _DrawerController_alignment$,
        'drawerCallback': _DrawerController_drawerCallback$,
        'dragStartBehavior': _DrawerController_dragStartBehavior$,
        'scrimColor': _DrawerController_scrimColor$,
        'enableOpenDragGesture': _DrawerController_enableOpenDragGesture$,
        'edgeDragWidth': _DrawerController_edgeDragWidth$,
        'isDrawerOpen': _DrawerController_isDrawerOpen$,
        'createState': _DrawerController_createState$,
      },
      {},
    ),
    'DrawerControllerState': m.ClassMirror(
      'DrawerControllerState',
      {
        '#as': DrawerControllerState_as$,
        '#is': DrawerControllerState_is$,
        'initState': _DrawerControllerState_initState$,
        'dispose': _DrawerControllerState_dispose$,
        'didChangeDependencies': _DrawerControllerState_didChangeDependencies$,
        'didUpdateWidget': _DrawerControllerState_didUpdateWidget$,
        'open': _DrawerControllerState_open$,
        'close': _DrawerControllerState_close$,
        'build': _DrawerControllerState_build$,
      },
      {},
    ),
    'DrawerAlignment': m.ClassMirror(
      'DrawerAlignment',
      {},
      {},
    ),
  },
);
Function Drawer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Drawer;
Function Drawer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Drawer;
Color? _Drawer_backgroundColor$(Drawer target) {
  return target.backgroundColor;
}

double? _Drawer_elevation$(Drawer target) {
  return target.elevation;
}

Color? _Drawer_shadowColor$(Drawer target) {
  return target.shadowColor;
}

Color? _Drawer_surfaceTintColor$(Drawer target) {
  return target.surfaceTintColor;
}

ShapeBorder? _Drawer_shape$(Drawer target) {
  return target.shape;
}

double? _Drawer_width$(Drawer target) {
  return target.width;
}

Widget? _Drawer_child$(Drawer target) {
  return target.child;
}

String? _Drawer_semanticLabel$(Drawer target) {
  return target.semanticLabel;
}

Clip? _Drawer_clipBehavior$(Drawer target) {
  return target.clipBehavior;
}

Function _Drawer_build$(
  m.Scope scope,
  Drawer target,
) =>
    target.build;
Function DrawerController_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DrawerController;
Function DrawerController_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DrawerController;
Widget _DrawerController_child$(DrawerController target) {
  return target.child;
}

DrawerAlignment _DrawerController_alignment$(DrawerController target) {
  return target.alignment;
}

void Function(bool)? _DrawerController_drawerCallback$(
    DrawerController target) {
  return target.drawerCallback;
}

DragStartBehavior _DrawerController_dragStartBehavior$(
    DrawerController target) {
  return target.dragStartBehavior;
}

Color? _DrawerController_scrimColor$(DrawerController target) {
  return target.scrimColor;
}

bool _DrawerController_enableOpenDragGesture$(DrawerController target) {
  return target.enableOpenDragGesture;
}

double? _DrawerController_edgeDragWidth$(DrawerController target) {
  return target.edgeDragWidth;
}

bool _DrawerController_isDrawerOpen$(DrawerController target) {
  return target.isDrawerOpen;
}

Function _DrawerController_maybeOf$(m.Scope scope) => DrawerController.maybeOf;
Function _DrawerController_of$(m.Scope scope) => DrawerController.of;
Function _DrawerController_createState$(
  m.Scope scope,
  DrawerController target,
) =>
    target.createState;
Function DrawerControllerState_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DrawerControllerState;
Function DrawerControllerState_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DrawerControllerState;
Function _DrawerControllerState_initState$(
  m.Scope scope,
  DrawerControllerState target,
) =>
    target.initState;
Function _DrawerControllerState_dispose$(
  m.Scope scope,
  DrawerControllerState target,
) =>
    target.dispose;
Function _DrawerControllerState_didChangeDependencies$(
  m.Scope scope,
  DrawerControllerState target,
) =>
    target.didChangeDependencies;
Function _DrawerControllerState_didUpdateWidget$(
  m.Scope scope,
  DrawerControllerState target,
) =>
    target.didUpdateWidget;
Function _DrawerControllerState_open$(
  m.Scope scope,
  DrawerControllerState target,
) =>
    target.open;
Function _DrawerControllerState_close$(
  m.Scope scope,
  DrawerControllerState target,
) =>
    target.close;
Function _DrawerControllerState_build$(
  m.Scope scope,
  DrawerControllerState target,
) =>
    target.build;
DrawerAlignment _DrawerAlignment_start$() {
  return DrawerAlignment.start;
}

DrawerAlignment _DrawerAlignment_end$() {
  return DrawerAlignment.end;
}

List<DrawerAlignment> _DrawerAlignment_values$() {
  return DrawerAlignment.values;
}
