// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/overscroll_indicator.dart';
import 'dart:async' show Timer;
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/physics.dart' show Tolerance, nearEqual;
import 'package:flutter/rendering.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/media_query.dart';
import 'package:flutter/src/widgets/notification_listener.dart';
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:flutter/src/widgets/ticker_provider.dart';
import 'package:flutter/src/widgets/transitions.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/overscroll_indicator.dart',
  {},
  {},
  {
    'GlowingOverscrollIndicator': m.ClassMirror(
      'GlowingOverscrollIndicator',
      {
        '#as': GlowingOverscrollIndicator_as$,
        '#is': GlowingOverscrollIndicator_is$,
        'showLeading': _GlowingOverscrollIndicator_showLeading$,
        'showTrailing': _GlowingOverscrollIndicator_showTrailing$,
        'axisDirection': _GlowingOverscrollIndicator_axisDirection$,
        'color': _GlowingOverscrollIndicator_color$,
        'notificationPredicate':
            _GlowingOverscrollIndicator_notificationPredicate$,
        'child': _GlowingOverscrollIndicator_child$,
        'axis': _GlowingOverscrollIndicator_axis$,
        'createState': _GlowingOverscrollIndicator_createState$,
        'debugFillProperties': _GlowingOverscrollIndicator_debugFillProperties$,
      },
      {},
    ),
    'StretchingOverscrollIndicator': m.ClassMirror(
      'StretchingOverscrollIndicator',
      {
        '#as': StretchingOverscrollIndicator_as$,
        '#is': StretchingOverscrollIndicator_is$,
        'axisDirection': _StretchingOverscrollIndicator_axisDirection$,
        'notificationPredicate':
            _StretchingOverscrollIndicator_notificationPredicate$,
        'clipBehavior': _StretchingOverscrollIndicator_clipBehavior$,
        'child': _StretchingOverscrollIndicator_child$,
        'axis': _StretchingOverscrollIndicator_axis$,
        'createState': _StretchingOverscrollIndicator_createState$,
        'debugFillProperties':
            _StretchingOverscrollIndicator_debugFillProperties$,
      },
      {},
    ),
    'OverscrollIndicatorNotification': m.ClassMirror(
      'OverscrollIndicatorNotification',
      {
        '#as': OverscrollIndicatorNotification_as$,
        '#is': OverscrollIndicatorNotification_is$,
        'leading': _OverscrollIndicatorNotification_leading$,
        'paintOffset': _OverscrollIndicatorNotification_paintOffset$,
        'accepted': _OverscrollIndicatorNotification_accepted$,
        'disallowIndicator':
            _OverscrollIndicatorNotification_disallowIndicator$,
        'debugFillDescription':
            _OverscrollIndicatorNotification_debugFillDescription$,
      },
      {
        'paintOffset': _OverscrollIndicatorNotification_paintOffset_set$,
        'accepted': _OverscrollIndicatorNotification_accepted_set$,
      },
    ),
  },
);
Function GlowingOverscrollIndicator_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as GlowingOverscrollIndicator;
Function GlowingOverscrollIndicator_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is GlowingOverscrollIndicator;
bool _GlowingOverscrollIndicator_showLeading$(
    GlowingOverscrollIndicator target) {
  return target.showLeading;
}

bool _GlowingOverscrollIndicator_showTrailing$(
    GlowingOverscrollIndicator target) {
  return target.showTrailing;
}

AxisDirection _GlowingOverscrollIndicator_axisDirection$(
    GlowingOverscrollIndicator target) {
  return target.axisDirection;
}

Color _GlowingOverscrollIndicator_color$(GlowingOverscrollIndicator target) {
  return target.color;
}

bool Function(ScrollNotification)
    _GlowingOverscrollIndicator_notificationPredicate$(
        GlowingOverscrollIndicator target) {
  return target.notificationPredicate;
}

Widget? _GlowingOverscrollIndicator_child$(GlowingOverscrollIndicator target) {
  return target.child;
}

Axis _GlowingOverscrollIndicator_axis$(GlowingOverscrollIndicator target) {
  return target.axis;
}

Function _GlowingOverscrollIndicator_createState$(
  m.Scope scope,
  GlowingOverscrollIndicator target,
) =>
    target.createState;
Function _GlowingOverscrollIndicator_debugFillProperties$(
  m.Scope scope,
  GlowingOverscrollIndicator target,
) =>
    target.debugFillProperties;
Function StretchingOverscrollIndicator_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as StretchingOverscrollIndicator;
Function StretchingOverscrollIndicator_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is StretchingOverscrollIndicator;
AxisDirection _StretchingOverscrollIndicator_axisDirection$(
    StretchingOverscrollIndicator target) {
  return target.axisDirection;
}

bool Function(ScrollNotification)
    _StretchingOverscrollIndicator_notificationPredicate$(
        StretchingOverscrollIndicator target) {
  return target.notificationPredicate;
}

Clip _StretchingOverscrollIndicator_clipBehavior$(
    StretchingOverscrollIndicator target) {
  return target.clipBehavior;
}

Widget? _StretchingOverscrollIndicator_child$(
    StretchingOverscrollIndicator target) {
  return target.child;
}

Axis _StretchingOverscrollIndicator_axis$(
    StretchingOverscrollIndicator target) {
  return target.axis;
}

Function _StretchingOverscrollIndicator_createState$(
  m.Scope scope,
  StretchingOverscrollIndicator target,
) =>
    target.createState;
Function _StretchingOverscrollIndicator_debugFillProperties$(
  m.Scope scope,
  StretchingOverscrollIndicator target,
) =>
    target.debugFillProperties;
Function OverscrollIndicatorNotification_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as OverscrollIndicatorNotification;
Function OverscrollIndicatorNotification_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is OverscrollIndicatorNotification;
bool _OverscrollIndicatorNotification_leading$(
    OverscrollIndicatorNotification target) {
  return target.leading;
}

double _OverscrollIndicatorNotification_paintOffset$(
    OverscrollIndicatorNotification target) {
  return target.paintOffset;
}

void _OverscrollIndicatorNotification_paintOffset_set$(
  OverscrollIndicatorNotification target,
  double other,
) {
  target.paintOffset = other;
}

bool _OverscrollIndicatorNotification_accepted$(
    OverscrollIndicatorNotification target) {
  return target.accepted;
}

void _OverscrollIndicatorNotification_accepted_set$(
  OverscrollIndicatorNotification target,
  bool other,
) {
  target.accepted = other;
}

Function _OverscrollIndicatorNotification_disallowIndicator$(
  m.Scope scope,
  OverscrollIndicatorNotification target,
) =>
    target.disallowIndicator;
Function _OverscrollIndicatorNotification_debugFillDescription$(
  m.Scope scope,
  OverscrollIndicatorNotification target,
) =>
    target.debugFillDescription;
