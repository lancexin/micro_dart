// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/overscroll_indicator.dart';
import 'dart:async' show Timer;
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/physics.dart' show Tolerance, nearEqual;
import 'package:flutter/rendering.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/media_query.dart';
import 'package:flutter/src/widgets/notification_listener.dart';
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:flutter/src/widgets/ticker_provider.dart';
import 'package:flutter/src/widgets/transitions.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/overscroll_indicator.dart',
  {
    'GlowingOverscrollIndicator.': _GlowingOverscrollIndicator__$,
    'StretchingOverscrollIndicator.': _StretchingOverscrollIndicator__$,
    'OverscrollIndicatorNotification.': _OverscrollIndicatorNotification__$,
  },
  {},
  {
    'GlowingOverscrollIndicator': m.ClassMirror(
      'GlowingOverscrollIndicator',
      {
        '#as': GlowingOverscrollIndicator_as$,
        '#is': GlowingOverscrollIndicator_is$,
        'showLeading': _GlowingOverscrollIndicator_showLeading$,
        'showTrailing': _GlowingOverscrollIndicator_showTrailing$,
        'axisDirection': _GlowingOverscrollIndicator_axisDirection$,
        'color': _GlowingOverscrollIndicator_color$,
        'notificationPredicate':
            _GlowingOverscrollIndicator_notificationPredicate$,
        'child': _GlowingOverscrollIndicator_child$,
        'axis': _GlowingOverscrollIndicator_axis$,
        'createState': _GlowingOverscrollIndicator_createState$,
        'debugFillProperties': _GlowingOverscrollIndicator_debugFillProperties$,
      },
      {},
    ),
    'StretchingOverscrollIndicator': m.ClassMirror(
      'StretchingOverscrollIndicator',
      {
        '#as': StretchingOverscrollIndicator_as$,
        '#is': StretchingOverscrollIndicator_is$,
        'axisDirection': _StretchingOverscrollIndicator_axisDirection$,
        'notificationPredicate':
            _StretchingOverscrollIndicator_notificationPredicate$,
        'clipBehavior': _StretchingOverscrollIndicator_clipBehavior$,
        'child': _StretchingOverscrollIndicator_child$,
        'axis': _StretchingOverscrollIndicator_axis$,
        'createState': _StretchingOverscrollIndicator_createState$,
        'debugFillProperties':
            _StretchingOverscrollIndicator_debugFillProperties$,
      },
      {},
    ),
    'OverscrollIndicatorNotification': m.ClassMirror(
      'OverscrollIndicatorNotification',
      {
        '#as': OverscrollIndicatorNotification_as$,
        '#is': OverscrollIndicatorNotification_is$,
        'leading': _OverscrollIndicatorNotification_leading$,
        'paintOffset': _OverscrollIndicatorNotification_paintOffset$,
        'accepted': _OverscrollIndicatorNotification_accepted$,
        'disallowIndicator':
            _OverscrollIndicatorNotification_disallowIndicator$,
        'debugFillDescription':
            _OverscrollIndicatorNotification_debugFillDescription$,
      },
      {
        'paintOffset': _OverscrollIndicatorNotification_paintOffset_set$,
        'accepted': _OverscrollIndicatorNotification_accepted_set$,
      },
    ),
  },
);
Function GlowingOverscrollIndicator_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as GlowingOverscrollIndicator;
Function GlowingOverscrollIndicator_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is GlowingOverscrollIndicator;
Function _GlowingOverscrollIndicator_showLeading$(
  m.Scope scope$,
  GlowingOverscrollIndicator target$,
) =>
    () {
      return target$.showLeading;
    };
Function _GlowingOverscrollIndicator_showTrailing$(
  m.Scope scope$,
  GlowingOverscrollIndicator target$,
) =>
    () {
      return target$.showTrailing;
    };
Function _GlowingOverscrollIndicator_axisDirection$(
  m.Scope scope$,
  GlowingOverscrollIndicator target$,
) =>
    () {
      return target$.axisDirection;
    };
Function _GlowingOverscrollIndicator_color$(
  m.Scope scope$,
  GlowingOverscrollIndicator target$,
) =>
    () {
      return target$.color;
    };
Function _GlowingOverscrollIndicator_notificationPredicate$(
  m.Scope scope$,
  GlowingOverscrollIndicator target$,
) =>
    () {
      return target$.notificationPredicate;
    };
Function _GlowingOverscrollIndicator_child$(
  m.Scope scope$,
  GlowingOverscrollIndicator target$,
) =>
    () {
      return target$.child;
    };
Function _GlowingOverscrollIndicator_axis$(
  m.Scope scope$,
  GlowingOverscrollIndicator target$,
) =>
    () {
      return target$.axis;
    };
Function _GlowingOverscrollIndicator__$(m.Scope scope$) => ({
      Key? key,
      bool? showLeading,
      bool? showTrailing,
      required AxisDirection axisDirection,
      required Color color,
      m.FunctionPointer? notificationPredicate,
      Widget? child,
    }) {
      bool notificationPredicateProxy(
              ScrollNotification notificationPredicate_notification$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            notificationPredicate!,
            [notificationPredicate_notification$],
            {},
          );
      return GlowingOverscrollIndicator(
        axisDirection: axisDirection,
        child: child,
        color: color,
        key: key,
        notificationPredicate: notificationPredicate == null
            ? defaultScrollNotificationPredicate
            : notificationPredicateProxy,
        showLeading: showLeading ?? true,
        showTrailing: showTrailing ?? true,
      );
    };
Function _GlowingOverscrollIndicator_createState$(
  m.Scope scope$,
  GlowingOverscrollIndicator target$,
) =>
    target$.createState;
Function _GlowingOverscrollIndicator_debugFillProperties$(
  m.Scope scope$,
  GlowingOverscrollIndicator target$,
) =>
    target$.debugFillProperties;
Function StretchingOverscrollIndicator_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as StretchingOverscrollIndicator;
Function StretchingOverscrollIndicator_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is StretchingOverscrollIndicator;
Function _StretchingOverscrollIndicator_axisDirection$(
  m.Scope scope$,
  StretchingOverscrollIndicator target$,
) =>
    () {
      return target$.axisDirection;
    };
Function _StretchingOverscrollIndicator_notificationPredicate$(
  m.Scope scope$,
  StretchingOverscrollIndicator target$,
) =>
    () {
      return target$.notificationPredicate;
    };
Function _StretchingOverscrollIndicator_clipBehavior$(
  m.Scope scope$,
  StretchingOverscrollIndicator target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _StretchingOverscrollIndicator_child$(
  m.Scope scope$,
  StretchingOverscrollIndicator target$,
) =>
    () {
      return target$.child;
    };
Function _StretchingOverscrollIndicator_axis$(
  m.Scope scope$,
  StretchingOverscrollIndicator target$,
) =>
    () {
      return target$.axis;
    };
Function _StretchingOverscrollIndicator__$(m.Scope scope$) => ({
      Key? key,
      required AxisDirection axisDirection,
      m.FunctionPointer? notificationPredicate,
      Clip? clipBehavior,
      Widget? child,
    }) {
      bool notificationPredicateProxy(
              ScrollNotification notificationPredicate_notification$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            notificationPredicate!,
            [notificationPredicate_notification$],
            {},
          );
      return StretchingOverscrollIndicator(
        axisDirection: axisDirection,
        child: child,
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        key: key,
        notificationPredicate: notificationPredicate == null
            ? defaultScrollNotificationPredicate
            : notificationPredicateProxy,
      );
    };
Function _StretchingOverscrollIndicator_createState$(
  m.Scope scope$,
  StretchingOverscrollIndicator target$,
) =>
    target$.createState;
Function _StretchingOverscrollIndicator_debugFillProperties$(
  m.Scope scope$,
  StretchingOverscrollIndicator target$,
) =>
    target$.debugFillProperties;
Function OverscrollIndicatorNotification_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as OverscrollIndicatorNotification;
Function OverscrollIndicatorNotification_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is OverscrollIndicatorNotification;
Function _OverscrollIndicatorNotification_leading$(
  m.Scope scope$,
  OverscrollIndicatorNotification target$,
) =>
    () {
      return target$.leading;
    };
Function _OverscrollIndicatorNotification_paintOffset$(
  m.Scope scope$,
  OverscrollIndicatorNotification target$,
) =>
    () {
      return target$.paintOffset;
    };
void _OverscrollIndicatorNotification_paintOffset_set$(
  m.Scope scope$,
  OverscrollIndicatorNotification target$,
) =>
    (dynamic other$) {
      target$.paintOffset = other$;
    };
Function _OverscrollIndicatorNotification_accepted$(
  m.Scope scope$,
  OverscrollIndicatorNotification target$,
) =>
    () {
      return target$.accepted;
    };
void _OverscrollIndicatorNotification_accepted_set$(
  m.Scope scope$,
  OverscrollIndicatorNotification target$,
) =>
    (dynamic other$) {
      target$.accepted = other$;
    };
Function _OverscrollIndicatorNotification__$(m.Scope scope$) =>
    ({required bool leading}) {
      return OverscrollIndicatorNotification(leading: leading);
    };
Function _OverscrollIndicatorNotification_disallowIndicator$(
  m.Scope scope$,
  OverscrollIndicatorNotification target$,
) =>
    target$.disallowIndicator;
Function _OverscrollIndicatorNotification_debugFillDescription$(
  m.Scope scope$,
  OverscrollIndicatorNotification target$,
) =>
    target$.debugFillDescription;
