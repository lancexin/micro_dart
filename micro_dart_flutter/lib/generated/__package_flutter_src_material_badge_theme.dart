// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/badge_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/badge_theme.dart',
  {
    'BadgeThemeData.lerp': _BadgeThemeData_lerp$,
    'BadgeTheme.of': _BadgeTheme_of$,
  },
  {},
  {
    'BadgeThemeData': m.ClassMirror(
      'BadgeThemeData',
      {
        'backgroundColor': _BadgeThemeData_backgroundColor$,
        'textColor': _BadgeThemeData_textColor$,
        'smallSize': _BadgeThemeData_smallSize$,
        'largeSize': _BadgeThemeData_largeSize$,
        'textStyle': _BadgeThemeData_textStyle$,
        'padding': _BadgeThemeData_padding$,
        'alignment': _BadgeThemeData_alignment$,
        'offset': _BadgeThemeData_offset$,
        'hashCode': _BadgeThemeData_hashCode$,
        'copyWith': _BadgeThemeData_copyWith$,
        'debugFillProperties': _BadgeThemeData_debugFillProperties$,
      },
      {},
    ),
    'BadgeTheme': m.ClassMirror(
      'BadgeTheme',
      {
        'data': _BadgeTheme_data$,
        'wrap': _BadgeTheme_wrap$,
        'updateShouldNotify': _BadgeTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Color? _BadgeThemeData_backgroundColor$(BadgeThemeData target) {
  return target.backgroundColor;
}

Color? _BadgeThemeData_textColor$(BadgeThemeData target) {
  return target.textColor;
}

double? _BadgeThemeData_smallSize$(BadgeThemeData target) {
  return target.smallSize;
}

double? _BadgeThemeData_largeSize$(BadgeThemeData target) {
  return target.largeSize;
}

TextStyle? _BadgeThemeData_textStyle$(BadgeThemeData target) {
  return target.textStyle;
}

EdgeInsetsGeometry? _BadgeThemeData_padding$(BadgeThemeData target) {
  return target.padding;
}

AlignmentGeometry? _BadgeThemeData_alignment$(BadgeThemeData target) {
  return target.alignment;
}

Offset? _BadgeThemeData_offset$(BadgeThemeData target) {
  return target.offset;
}

int _BadgeThemeData_hashCode$(BadgeThemeData target) {
  return target.hashCode;
}

Function _BadgeThemeData_copyWith$(
  m.Scope scope,
  BadgeThemeData target,
) =>
    target.copyWith;
Function _BadgeThemeData_lerp$(m.Scope scope) => BadgeThemeData.lerp;
Function _BadgeThemeData_debugFillProperties$(
  m.Scope scope,
  BadgeThemeData target,
) =>
    target.debugFillProperties;
BadgeThemeData _BadgeTheme_data$(BadgeTheme target) {
  return target.data;
}

Function _BadgeTheme_of$(m.Scope scope) => BadgeTheme.of;
Function _BadgeTheme_wrap$(
  m.Scope scope,
  BadgeTheme target,
) =>
    target.wrap;
Function _BadgeTheme_updateShouldNotify$(
  m.Scope scope,
  BadgeTheme target,
) =>
    target.updateShouldNotify;
