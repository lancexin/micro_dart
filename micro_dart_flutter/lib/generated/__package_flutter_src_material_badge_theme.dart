// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/badge_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/badge_theme.dart',
  {
    'BadgeThemeData.': _BadgeThemeData__$,
    'BadgeThemeData.lerp': _BadgeThemeData_lerp$,
    'BadgeTheme.': _BadgeTheme__$,
    'BadgeTheme.of': _BadgeTheme_of$,
  },
  {},
  {
    'BadgeThemeData': m.ClassMirror(
      'BadgeThemeData',
      {
        '#as': BadgeThemeData_as$,
        '#is': BadgeThemeData_is$,
        'backgroundColor': _BadgeThemeData_backgroundColor$,
        'textColor': _BadgeThemeData_textColor$,
        'smallSize': _BadgeThemeData_smallSize$,
        'largeSize': _BadgeThemeData_largeSize$,
        'textStyle': _BadgeThemeData_textStyle$,
        'padding': _BadgeThemeData_padding$,
        'alignment': _BadgeThemeData_alignment$,
        'offset': _BadgeThemeData_offset$,
        'hashCode': _BadgeThemeData_hashCode$,
        'copyWith': _BadgeThemeData_copyWith$,
        '==': _BadgeThemeData_eq$$,
        'debugFillProperties': _BadgeThemeData_debugFillProperties$,
      },
      {},
    ),
    'BadgeTheme': m.ClassMirror(
      'BadgeTheme',
      {
        '#as': BadgeTheme_as$,
        '#is': BadgeTheme_is$,
        'data': _BadgeTheme_data$,
        'wrap': _BadgeTheme_wrap$,
        'updateShouldNotify': _BadgeTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function BadgeThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as BadgeThemeData;
Function BadgeThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is BadgeThemeData;
Function _BadgeThemeData_backgroundColor$(
  m.Scope scope$,
  BadgeThemeData target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _BadgeThemeData_textColor$(
  m.Scope scope$,
  BadgeThemeData target$,
) =>
    () {
      return target$.textColor;
    };
Function _BadgeThemeData_smallSize$(
  m.Scope scope$,
  BadgeThemeData target$,
) =>
    () {
      return target$.smallSize;
    };
Function _BadgeThemeData_largeSize$(
  m.Scope scope$,
  BadgeThemeData target$,
) =>
    () {
      return target$.largeSize;
    };
Function _BadgeThemeData_textStyle$(
  m.Scope scope$,
  BadgeThemeData target$,
) =>
    () {
      return target$.textStyle;
    };
Function _BadgeThemeData_padding$(
  m.Scope scope$,
  BadgeThemeData target$,
) =>
    () {
      return target$.padding;
    };
Function _BadgeThemeData_alignment$(
  m.Scope scope$,
  BadgeThemeData target$,
) =>
    () {
      return target$.alignment;
    };
Function _BadgeThemeData_offset$(
  m.Scope scope$,
  BadgeThemeData target$,
) =>
    () {
      return target$.offset;
    };
Function _BadgeThemeData_hashCode$(
  m.Scope scope$,
  BadgeThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _BadgeThemeData__$(m.Scope scope$) => ({
      Color? backgroundColor,
      Color? textColor,
      double? smallSize,
      double? largeSize,
      TextStyle? textStyle,
      EdgeInsetsGeometry? padding,
      AlignmentGeometry? alignment,
      Offset? offset,
    }) {
      return BadgeThemeData(
        alignment: alignment,
        backgroundColor: backgroundColor,
        largeSize: largeSize,
        offset: offset,
        padding: padding,
        smallSize: smallSize,
        textColor: textColor,
        textStyle: textStyle,
      );
    };
Function _BadgeThemeData_copyWith$(
  m.Scope scope$,
  BadgeThemeData target$,
) =>
    target$.copyWith;
Function _BadgeThemeData_lerp$(m.Scope scope$) => BadgeThemeData.lerp;
Function _BadgeThemeData_eq$$(
  m.Scope scope$,
  BadgeThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _BadgeThemeData_debugFillProperties$(
  m.Scope scope$,
  BadgeThemeData target$,
) =>
    target$.debugFillProperties;
Function BadgeTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as BadgeTheme;
Function BadgeTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is BadgeTheme;
Function _BadgeTheme_data$(
  m.Scope scope$,
  BadgeTheme target$,
) =>
    () {
      return target$.data;
    };
Function _BadgeTheme__$(m.Scope scope$) => ({
      Key? key,
      required BadgeThemeData data,
      required Widget child,
    }) {
      return BadgeTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _BadgeTheme_of$(m.Scope scope$) => BadgeTheme.of;
Function _BadgeTheme_wrap$(
  m.Scope scope$,
  BadgeTheme target$,
) =>
    target$.wrap;
Function _BadgeTheme_updateShouldNotify$(
  m.Scope scope$,
  BadgeTheme target$,
) =>
    target$.updateShouldNotify;
