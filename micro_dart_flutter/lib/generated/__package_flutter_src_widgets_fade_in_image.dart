// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/fade_in_image.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/image.dart';
import 'package:flutter/src/widgets/implicit_animations.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/fade_in_image.dart',
  {
    'FadeInImage.': _FadeInImage__$,
    'FadeInImage.memoryNetwork': _FadeInImage_memoryNetwork_$,
    'FadeInImage.assetNetwork': _FadeInImage_assetNetwork_$,
  },
  {},
  {
    'FadeInImage': m.ClassMirror(
      'FadeInImage',
      {
        '#as': FadeInImage_as$,
        '#is': FadeInImage_is$,
        'placeholder': _FadeInImage_placeholder$,
        'placeholderErrorBuilder': _FadeInImage_placeholderErrorBuilder$,
        'image': _FadeInImage_image$,
        'imageErrorBuilder': _FadeInImage_imageErrorBuilder$,
        'fadeOutDuration': _FadeInImage_fadeOutDuration$,
        'fadeOutCurve': _FadeInImage_fadeOutCurve$,
        'fadeInDuration': _FadeInImage_fadeInDuration$,
        'fadeInCurve': _FadeInImage_fadeInCurve$,
        'width': _FadeInImage_width$,
        'height': _FadeInImage_height$,
        'fit': _FadeInImage_fit$,
        'placeholderFit': _FadeInImage_placeholderFit$,
        'filterQuality': _FadeInImage_filterQuality$,
        'placeholderFilterQuality': _FadeInImage_placeholderFilterQuality$,
        'alignment': _FadeInImage_alignment$,
        'repeat': _FadeInImage_repeat$,
        'matchTextDirection': _FadeInImage_matchTextDirection$,
        'excludeFromSemantics': _FadeInImage_excludeFromSemantics$,
        'imageSemanticLabel': _FadeInImage_imageSemanticLabel$,
        'createState': _FadeInImage_createState$,
      },
      {},
    )
  },
);
Function FadeInImage_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FadeInImage;
Function FadeInImage_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FadeInImage;
Function _FadeInImage_placeholder$(
  m.Scope scope$,
  FadeInImage target$,
) =>
    () {
      return target$.placeholder;
    };
Function _FadeInImage_placeholderErrorBuilder$(
  m.Scope scope$,
  FadeInImage target$,
) =>
    () {
      return target$.placeholderErrorBuilder;
    };
Function _FadeInImage_image$(
  m.Scope scope$,
  FadeInImage target$,
) =>
    () {
      return target$.image;
    };
Function _FadeInImage_imageErrorBuilder$(
  m.Scope scope$,
  FadeInImage target$,
) =>
    () {
      return target$.imageErrorBuilder;
    };
Function _FadeInImage_fadeOutDuration$(
  m.Scope scope$,
  FadeInImage target$,
) =>
    () {
      return target$.fadeOutDuration;
    };
Function _FadeInImage_fadeOutCurve$(
  m.Scope scope$,
  FadeInImage target$,
) =>
    () {
      return target$.fadeOutCurve;
    };
Function _FadeInImage_fadeInDuration$(
  m.Scope scope$,
  FadeInImage target$,
) =>
    () {
      return target$.fadeInDuration;
    };
Function _FadeInImage_fadeInCurve$(
  m.Scope scope$,
  FadeInImage target$,
) =>
    () {
      return target$.fadeInCurve;
    };
Function _FadeInImage_width$(
  m.Scope scope$,
  FadeInImage target$,
) =>
    () {
      return target$.width;
    };
Function _FadeInImage_height$(
  m.Scope scope$,
  FadeInImage target$,
) =>
    () {
      return target$.height;
    };
Function _FadeInImage_fit$(
  m.Scope scope$,
  FadeInImage target$,
) =>
    () {
      return target$.fit;
    };
Function _FadeInImage_placeholderFit$(
  m.Scope scope$,
  FadeInImage target$,
) =>
    () {
      return target$.placeholderFit;
    };
Function _FadeInImage_filterQuality$(
  m.Scope scope$,
  FadeInImage target$,
) =>
    () {
      return target$.filterQuality;
    };
Function _FadeInImage_placeholderFilterQuality$(
  m.Scope scope$,
  FadeInImage target$,
) =>
    () {
      return target$.placeholderFilterQuality;
    };
Function _FadeInImage_alignment$(
  m.Scope scope$,
  FadeInImage target$,
) =>
    () {
      return target$.alignment;
    };
Function _FadeInImage_repeat$(
  m.Scope scope$,
  FadeInImage target$,
) =>
    () {
      return target$.repeat;
    };
Function _FadeInImage_matchTextDirection$(
  m.Scope scope$,
  FadeInImage target$,
) =>
    () {
      return target$.matchTextDirection;
    };
Function _FadeInImage_excludeFromSemantics$(
  m.Scope scope$,
  FadeInImage target$,
) =>
    () {
      return target$.excludeFromSemantics;
    };
Function _FadeInImage_imageSemanticLabel$(
  m.Scope scope$,
  FadeInImage target$,
) =>
    () {
      return target$.imageSemanticLabel;
    };
Function _FadeInImage__$(m.Scope scope$) => ({
      Key? key,
      required ImageProvider<Object> placeholder,
      m.FunctionPointer? placeholderErrorBuilder,
      required ImageProvider<Object> image,
      m.FunctionPointer? imageErrorBuilder,
      bool? excludeFromSemantics,
      String? imageSemanticLabel,
      Duration? fadeOutDuration,
      Curve? fadeOutCurve,
      Duration? fadeInDuration,
      Curve? fadeInCurve,
      double? width,
      double? height,
      BoxFit? fit,
      BoxFit? placeholderFit,
      FilterQuality? filterQuality,
      FilterQuality? placeholderFilterQuality,
      AlignmentGeometry? alignment,
      ImageRepeat? repeat,
      bool? matchTextDirection,
    }) {
      Widget imageErrorBuilderProxy(
        BuildContext imageErrorBuilder_context$,
        Object imageErrorBuilder_error$,
        StackTrace? imageErrorBuilder_stackTrace$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            imageErrorBuilder!,
            [
              imageErrorBuilder_context$,
              imageErrorBuilder_error$,
              imageErrorBuilder_stackTrace$,
            ],
            {},
          );
      Widget placeholderErrorBuilderProxy(
        BuildContext placeholderErrorBuilder_context$,
        Object placeholderErrorBuilder_error$,
        StackTrace? placeholderErrorBuilder_stackTrace$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            placeholderErrorBuilder!,
            [
              placeholderErrorBuilder_context$,
              placeholderErrorBuilder_error$,
              placeholderErrorBuilder_stackTrace$,
            ],
            {},
          );
      return FadeInImage(
        alignment: alignment ?? Alignment.center,
        excludeFromSemantics: excludeFromSemantics ?? false,
        fadeInCurve: fadeInCurve ?? Curves.easeIn,
        fadeInDuration: fadeInDuration ?? const Duration(milliseconds: 700),
        fadeOutCurve: fadeOutCurve ?? Curves.easeOut,
        fadeOutDuration: fadeOutDuration ?? const Duration(milliseconds: 300),
        filterQuality: filterQuality ?? FilterQuality.low,
        fit: fit,
        height: height,
        image: image,
        imageErrorBuilder:
            imageErrorBuilder == null ? null : imageErrorBuilderProxy,
        imageSemanticLabel: imageSemanticLabel,
        key: key,
        matchTextDirection: matchTextDirection ?? false,
        placeholder: placeholder,
        placeholderErrorBuilder: placeholderErrorBuilder == null
            ? null
            : placeholderErrorBuilderProxy,
        placeholderFilterQuality: placeholderFilterQuality,
        placeholderFit: placeholderFit,
        repeat: repeat ?? ImageRepeat.noRepeat,
        width: width,
      );
    };
Function _FadeInImage_memoryNetwork_$(m.Scope scope$) => ({
      Key? key,
      required Uint8List placeholder,
      m.FunctionPointer? placeholderErrorBuilder,
      required String image,
      m.FunctionPointer? imageErrorBuilder,
      double? placeholderScale,
      double? imageScale,
      bool? excludeFromSemantics,
      String? imageSemanticLabel,
      Duration? fadeOutDuration,
      Curve? fadeOutCurve,
      Duration? fadeInDuration,
      Curve? fadeInCurve,
      double? width,
      double? height,
      BoxFit? fit,
      BoxFit? placeholderFit,
      FilterQuality? filterQuality,
      FilterQuality? placeholderFilterQuality,
      AlignmentGeometry? alignment,
      ImageRepeat? repeat,
      bool? matchTextDirection,
      int? placeholderCacheWidth,
      int? placeholderCacheHeight,
      int? imageCacheWidth,
      int? imageCacheHeight,
    }) {
      Widget imageErrorBuilderProxy(
        BuildContext imageErrorBuilder_context$,
        Object imageErrorBuilder_error$,
        StackTrace? imageErrorBuilder_stackTrace$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            imageErrorBuilder!,
            [
              imageErrorBuilder_context$,
              imageErrorBuilder_error$,
              imageErrorBuilder_stackTrace$,
            ],
            {},
          );
      Widget placeholderErrorBuilderProxy(
        BuildContext placeholderErrorBuilder_context$,
        Object placeholderErrorBuilder_error$,
        StackTrace? placeholderErrorBuilder_stackTrace$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            placeholderErrorBuilder!,
            [
              placeholderErrorBuilder_context$,
              placeholderErrorBuilder_error$,
              placeholderErrorBuilder_stackTrace$,
            ],
            {},
          );
      return FadeInImage.memoryNetwork(
        alignment: alignment ?? Alignment.center,
        excludeFromSemantics: excludeFromSemantics ?? false,
        fadeInCurve: fadeInCurve ?? Curves.easeIn,
        fadeInDuration: fadeInDuration ?? const Duration(milliseconds: 700),
        fadeOutCurve: fadeOutCurve ?? Curves.easeOut,
        fadeOutDuration: fadeOutDuration ?? const Duration(milliseconds: 300),
        filterQuality: filterQuality ?? FilterQuality.low,
        fit: fit,
        height: height,
        image: image,
        imageCacheHeight: imageCacheHeight,
        imageCacheWidth: imageCacheWidth,
        imageErrorBuilder:
            imageErrorBuilder == null ? null : imageErrorBuilderProxy,
        imageScale: imageScale ?? 1.0,
        imageSemanticLabel: imageSemanticLabel,
        key: key,
        matchTextDirection: matchTextDirection ?? false,
        placeholder: placeholder,
        placeholderCacheHeight: placeholderCacheHeight,
        placeholderCacheWidth: placeholderCacheWidth,
        placeholderErrorBuilder: placeholderErrorBuilder == null
            ? null
            : placeholderErrorBuilderProxy,
        placeholderFilterQuality: placeholderFilterQuality,
        placeholderFit: placeholderFit,
        placeholderScale: placeholderScale ?? 1.0,
        repeat: repeat ?? ImageRepeat.noRepeat,
        width: width,
      );
    };
Function _FadeInImage_assetNetwork_$(m.Scope scope$) => ({
      Key? key,
      required String placeholder,
      m.FunctionPointer? placeholderErrorBuilder,
      required String image,
      m.FunctionPointer? imageErrorBuilder,
      AssetBundle? bundle,
      double? placeholderScale,
      double? imageScale,
      bool? excludeFromSemantics,
      String? imageSemanticLabel,
      Duration? fadeOutDuration,
      Curve? fadeOutCurve,
      Duration? fadeInDuration,
      Curve? fadeInCurve,
      double? width,
      double? height,
      BoxFit? fit,
      BoxFit? placeholderFit,
      FilterQuality? filterQuality,
      FilterQuality? placeholderFilterQuality,
      AlignmentGeometry? alignment,
      ImageRepeat? repeat,
      bool? matchTextDirection,
      int? placeholderCacheWidth,
      int? placeholderCacheHeight,
      int? imageCacheWidth,
      int? imageCacheHeight,
    }) {
      Widget imageErrorBuilderProxy(
        BuildContext imageErrorBuilder_context$,
        Object imageErrorBuilder_error$,
        StackTrace? imageErrorBuilder_stackTrace$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            imageErrorBuilder!,
            [
              imageErrorBuilder_context$,
              imageErrorBuilder_error$,
              imageErrorBuilder_stackTrace$,
            ],
            {},
          );
      Widget placeholderErrorBuilderProxy(
        BuildContext placeholderErrorBuilder_context$,
        Object placeholderErrorBuilder_error$,
        StackTrace? placeholderErrorBuilder_stackTrace$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            placeholderErrorBuilder!,
            [
              placeholderErrorBuilder_context$,
              placeholderErrorBuilder_error$,
              placeholderErrorBuilder_stackTrace$,
            ],
            {},
          );
      return FadeInImage.assetNetwork(
        alignment: alignment ?? Alignment.center,
        bundle: bundle,
        excludeFromSemantics: excludeFromSemantics ?? false,
        fadeInCurve: fadeInCurve ?? Curves.easeIn,
        fadeInDuration: fadeInDuration ?? const Duration(milliseconds: 700),
        fadeOutCurve: fadeOutCurve ?? Curves.easeOut,
        fadeOutDuration: fadeOutDuration ?? const Duration(milliseconds: 300),
        filterQuality: filterQuality ?? FilterQuality.low,
        fit: fit,
        height: height,
        image: image,
        imageCacheHeight: imageCacheHeight,
        imageCacheWidth: imageCacheWidth,
        imageErrorBuilder:
            imageErrorBuilder == null ? null : imageErrorBuilderProxy,
        imageScale: imageScale ?? 1.0,
        imageSemanticLabel: imageSemanticLabel,
        key: key,
        matchTextDirection: matchTextDirection ?? false,
        placeholder: placeholder,
        placeholderCacheHeight: placeholderCacheHeight,
        placeholderCacheWidth: placeholderCacheWidth,
        placeholderErrorBuilder: placeholderErrorBuilder == null
            ? null
            : placeholderErrorBuilderProxy,
        placeholderFilterQuality: placeholderFilterQuality,
        placeholderFit: placeholderFit,
        placeholderScale: placeholderScale,
        repeat: repeat ?? ImageRepeat.noRepeat,
        width: width,
      );
    };
Function _FadeInImage_createState$(
  m.Scope scope$,
  FadeInImage target$,
) =>
    target$.createState;
