// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/toggleable.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/material_state.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/toggleable.dart',
  {},
  {},
  {
    'ToggleablePainter': m.ClassMirror(
      'ToggleablePainter',
      {
        'position': _ToggleablePainter_position$,
        'reaction': _ToggleablePainter_reaction$,
        'reactionFocusFade': _ToggleablePainter_reactionFocusFade$,
        'reactionHoverFade': _ToggleablePainter_reactionHoverFade$,
        'activeColor': _ToggleablePainter_activeColor$,
        'inactiveColor': _ToggleablePainter_inactiveColor$,
        'inactiveReactionColor': _ToggleablePainter_inactiveReactionColor$,
        'reactionColor': _ToggleablePainter_reactionColor$,
        'hoverColor': _ToggleablePainter_hoverColor$,
        'focusColor': _ToggleablePainter_focusColor$,
        'splashRadius': _ToggleablePainter_splashRadius$,
        'downPosition': _ToggleablePainter_downPosition$,
        'isFocused': _ToggleablePainter_isFocused$,
        'isHovered': _ToggleablePainter_isHovered$,
        'semanticsBuilder': _ToggleablePainter_semanticsBuilder$,
        'paintRadialReaction': _ToggleablePainter_paintRadialReaction$,
        'dispose': _ToggleablePainter_dispose$,
        'shouldRepaint': _ToggleablePainter_shouldRepaint$,
        'hitTest': _ToggleablePainter_hitTest$,
        'shouldRebuildSemantics': _ToggleablePainter_shouldRebuildSemantics$,
        'toString': _ToggleablePainter_toString$,
      },
      {
        'position': _ToggleablePainter_position_set$,
        'reaction': _ToggleablePainter_reaction_set$,
        'reactionFocusFade': _ToggleablePainter_reactionFocusFade_set$,
        'reactionHoverFade': _ToggleablePainter_reactionHoverFade_set$,
        'activeColor': _ToggleablePainter_activeColor_set$,
        'inactiveColor': _ToggleablePainter_inactiveColor_set$,
        'inactiveReactionColor': _ToggleablePainter_inactiveReactionColor_set$,
        'reactionColor': _ToggleablePainter_reactionColor_set$,
        'hoverColor': _ToggleablePainter_hoverColor_set$,
        'focusColor': _ToggleablePainter_focusColor_set$,
        'splashRadius': _ToggleablePainter_splashRadius_set$,
        'downPosition': _ToggleablePainter_downPosition_set$,
        'isFocused': _ToggleablePainter_isFocused_set$,
        'isHovered': _ToggleablePainter_isHovered_set$,
      },
    )
  },
);
Animation<double> _ToggleablePainter_position$(ToggleablePainter target) {
  return target.position;
}

void _ToggleablePainter_position_set$(
  ToggleablePainter target,
  Animation<double> other,
) {
  target.position = other;
}

Animation<double> _ToggleablePainter_reaction$(ToggleablePainter target) {
  return target.reaction;
}

void _ToggleablePainter_reaction_set$(
  ToggleablePainter target,
  Animation<double> other,
) {
  target.reaction = other;
}

Animation<double> _ToggleablePainter_reactionFocusFade$(
    ToggleablePainter target) {
  return target.reactionFocusFade;
}

void _ToggleablePainter_reactionFocusFade_set$(
  ToggleablePainter target,
  Animation<double> other,
) {
  target.reactionFocusFade = other;
}

Animation<double> _ToggleablePainter_reactionHoverFade$(
    ToggleablePainter target) {
  return target.reactionHoverFade;
}

void _ToggleablePainter_reactionHoverFade_set$(
  ToggleablePainter target,
  Animation<double> other,
) {
  target.reactionHoverFade = other;
}

Color _ToggleablePainter_activeColor$(ToggleablePainter target) {
  return target.activeColor;
}

void _ToggleablePainter_activeColor_set$(
  ToggleablePainter target,
  Color other,
) {
  target.activeColor = other;
}

Color _ToggleablePainter_inactiveColor$(ToggleablePainter target) {
  return target.inactiveColor;
}

void _ToggleablePainter_inactiveColor_set$(
  ToggleablePainter target,
  Color other,
) {
  target.inactiveColor = other;
}

Color _ToggleablePainter_inactiveReactionColor$(ToggleablePainter target) {
  return target.inactiveReactionColor;
}

void _ToggleablePainter_inactiveReactionColor_set$(
  ToggleablePainter target,
  Color other,
) {
  target.inactiveReactionColor = other;
}

Color _ToggleablePainter_reactionColor$(ToggleablePainter target) {
  return target.reactionColor;
}

void _ToggleablePainter_reactionColor_set$(
  ToggleablePainter target,
  Color other,
) {
  target.reactionColor = other;
}

Color _ToggleablePainter_hoverColor$(ToggleablePainter target) {
  return target.hoverColor;
}

void _ToggleablePainter_hoverColor_set$(
  ToggleablePainter target,
  Color other,
) {
  target.hoverColor = other;
}

Color _ToggleablePainter_focusColor$(ToggleablePainter target) {
  return target.focusColor;
}

void _ToggleablePainter_focusColor_set$(
  ToggleablePainter target,
  Color other,
) {
  target.focusColor = other;
}

double _ToggleablePainter_splashRadius$(ToggleablePainter target) {
  return target.splashRadius;
}

void _ToggleablePainter_splashRadius_set$(
  ToggleablePainter target,
  double other,
) {
  target.splashRadius = other;
}

Offset? _ToggleablePainter_downPosition$(ToggleablePainter target) {
  return target.downPosition;
}

void _ToggleablePainter_downPosition_set$(
  ToggleablePainter target,
  Offset? other,
) {
  target.downPosition = other;
}

bool _ToggleablePainter_isFocused$(ToggleablePainter target) {
  return target.isFocused;
}

void _ToggleablePainter_isFocused_set$(
  ToggleablePainter target,
  bool? other,
) {
  target.isFocused = other;
}

bool _ToggleablePainter_isHovered$(ToggleablePainter target) {
  return target.isHovered;
}

void _ToggleablePainter_isHovered_set$(
  ToggleablePainter target,
  bool? other,
) {
  target.isHovered = other;
}

List<CustomPainterSemantics> Function(Size)?
    _ToggleablePainter_semanticsBuilder$(ToggleablePainter target) {
  return target.semanticsBuilder;
}

Function _ToggleablePainter_paintRadialReaction$(
  m.Scope scope,
  ToggleablePainter target,
) =>
    target.paintRadialReaction;
Function _ToggleablePainter_dispose$(
  m.Scope scope,
  ToggleablePainter target,
) =>
    target.dispose;
Function _ToggleablePainter_shouldRepaint$(
  m.Scope scope,
  ToggleablePainter target,
) =>
    target.shouldRepaint;
Function _ToggleablePainter_hitTest$(
  m.Scope scope,
  ToggleablePainter target,
) =>
    target.hitTest;
Function _ToggleablePainter_shouldRebuildSemantics$(
  m.Scope scope,
  ToggleablePainter target,
) =>
    target.shouldRebuildSemantics;
Function _ToggleablePainter_toString$(
  m.Scope scope,
  ToggleablePainter target,
) =>
    target.toString;
