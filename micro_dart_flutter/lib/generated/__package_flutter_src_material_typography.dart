// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/typography.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/text_theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/typography.dart',
  {
    'Typography.blackMountainView': _Typography_blackMountainView$,
    'Typography.whiteMountainView': _Typography_whiteMountainView$,
    'Typography.blackRedmond': _Typography_blackRedmond$,
    'Typography.whiteRedmond': _Typography_whiteRedmond$,
    'Typography.blackHelsinki': _Typography_blackHelsinki$,
    'Typography.whiteHelsinki': _Typography_whiteHelsinki$,
    'Typography.blackCupertino': _Typography_blackCupertino$,
    'Typography.whiteCupertino': _Typography_whiteCupertino$,
    'Typography.blackRedwoodCity': _Typography_blackRedwoodCity$,
    'Typography.whiteRedwoodCity': _Typography_whiteRedwoodCity$,
    'Typography.englishLike2014': _Typography_englishLike2014$,
    'Typography.englishLike2018': _Typography_englishLike2018$,
    'Typography.dense2014': _Typography_dense2014$,
    'Typography.dense2018': _Typography_dense2018$,
    'Typography.tall2014': _Typography_tall2014$,
    'Typography.tall2018': _Typography_tall2018$,
    'Typography.englishLike2021': _Typography_englishLike2021$,
    'Typography.dense2021': _Typography_dense2021$,
    'Typography.tall2021': _Typography_tall2021$,
    'Typography.': _Typography__$,
    'Typography.material2014': _Typography_material2014_$,
    'Typography.material2018': _Typography_material2018_$,
    'Typography.material2021': _Typography_material2021_$,
    'Typography.lerp': _Typography_lerp$,
    'ScriptCategory.englishLike': _ScriptCategory_englishLike$,
    'ScriptCategory.dense': _ScriptCategory_dense$,
    'ScriptCategory.tall': _ScriptCategory_tall$,
    'ScriptCategory.values': _ScriptCategory_values$,
  },
  {},
  {
    'Typography': m.ClassMirror(
      'Typography',
      {
        '#as': Typography_as$,
        '#is': Typography_is$,
        'black': _Typography_black$,
        'white': _Typography_white$,
        'englishLike': _Typography_englishLike$,
        'dense': _Typography_dense$,
        'tall': _Typography_tall$,
        'hashCode': _Typography_hashCode$,
        'geometryThemeFor': _Typography_geometryThemeFor$,
        'copyWith': _Typography_copyWith$,
        '==': _Typography_eq$$,
        'debugFillProperties': _Typography_debugFillProperties$,
      },
      {},
    ),
    'ScriptCategory': m.ClassMirror(
      'ScriptCategory',
      {},
      {},
    ),
  },
);
Function Typography_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Typography;
Function Typography_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Typography;
Function _Typography_black$(
  m.Scope scope$,
  Typography target$,
) =>
    () {
      return target$.black;
    };
Function _Typography_white$(
  m.Scope scope$,
  Typography target$,
) =>
    () {
      return target$.white;
    };
Function _Typography_englishLike$(
  m.Scope scope$,
  Typography target$,
) =>
    () {
      return target$.englishLike;
    };
Function _Typography_dense$(
  m.Scope scope$,
  Typography target$,
) =>
    () {
      return target$.dense;
    };
Function _Typography_tall$(
  m.Scope scope$,
  Typography target$,
) =>
    () {
      return target$.tall;
    };
TextTheme _Typography_blackMountainView$() {
  return Typography.blackMountainView;
}

TextTheme _Typography_whiteMountainView$() {
  return Typography.whiteMountainView;
}

TextTheme _Typography_blackRedmond$() {
  return Typography.blackRedmond;
}

TextTheme _Typography_whiteRedmond$() {
  return Typography.whiteRedmond;
}

TextTheme _Typography_blackHelsinki$() {
  return Typography.blackHelsinki;
}

TextTheme _Typography_whiteHelsinki$() {
  return Typography.whiteHelsinki;
}

TextTheme _Typography_blackCupertino$() {
  return Typography.blackCupertino;
}

TextTheme _Typography_whiteCupertino$() {
  return Typography.whiteCupertino;
}

TextTheme _Typography_blackRedwoodCity$() {
  return Typography.blackRedwoodCity;
}

TextTheme _Typography_whiteRedwoodCity$() {
  return Typography.whiteRedwoodCity;
}

TextTheme _Typography_englishLike2014$() {
  return Typography.englishLike2014;
}

TextTheme _Typography_englishLike2018$() {
  return Typography.englishLike2018;
}

TextTheme _Typography_dense2014$() {
  return Typography.dense2014;
}

TextTheme _Typography_dense2018$() {
  return Typography.dense2018;
}

TextTheme _Typography_tall2014$() {
  return Typography.tall2014;
}

TextTheme _Typography_tall2018$() {
  return Typography.tall2018;
}

TextTheme _Typography_englishLike2021$() {
  return Typography.englishLike2021;
}

TextTheme _Typography_dense2021$() {
  return Typography.dense2021;
}

TextTheme _Typography_tall2021$() {
  return Typography.tall2021;
}

Function _Typography_hashCode$(
  m.Scope scope$,
  Typography target$,
) =>
    () {
      return target$.hashCode;
    };
Function _Typography__$(m.Scope scope$) => ({
      TargetPlatform? platform,
      TextTheme? black,
      TextTheme? white,
      TextTheme? englishLike,
      TextTheme? dense,
      TextTheme? tall,
    }) {
      return Typography(
        black: black,
        dense: dense,
        englishLike: englishLike,
        platform: platform,
        tall: tall,
        white: white,
      );
    };
Function _Typography_material2014_$(m.Scope scope$) => Typography.material2014;
Function _Typography_material2018_$(m.Scope scope$) => Typography.material2018;
Function _Typography_material2021_$(m.Scope scope$) => Typography.material2021;
Function _Typography_geometryThemeFor$(
  m.Scope scope$,
  Typography target$,
) =>
    target$.geometryThemeFor;
Function _Typography_copyWith$(
  m.Scope scope$,
  Typography target$,
) =>
    target$.copyWith;
Function _Typography_lerp$(m.Scope scope$) => Typography.lerp;
Function _Typography_eq$$(
  m.Scope scope$,
  Typography target$,
) =>
    (Object other$) => target$ == other$;
Function _Typography_debugFillProperties$(
  m.Scope scope$,
  Typography target$,
) =>
    target$.debugFillProperties;
ScriptCategory _ScriptCategory_englishLike$() {
  return ScriptCategory.englishLike;
}

ScriptCategory _ScriptCategory_dense$() {
  return ScriptCategory.dense;
}

ScriptCategory _ScriptCategory_tall$() {
  return ScriptCategory.tall;
}

List<ScriptCategory> _ScriptCategory_values$() {
  return ScriptCategory.values;
}
