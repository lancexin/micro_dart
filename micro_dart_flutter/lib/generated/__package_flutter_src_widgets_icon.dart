// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/icon.dart';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/icon_data.dart';
import 'package:flutter/src/widgets/icon_theme.dart';
import 'package:flutter/src/widgets/icon_theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/icon.dart',
  {},
  {},
  {
    'Icon': m.ClassMirror(
      'Icon',
      {
        '#as': Icon_as$,
        '#is': Icon_is$,
        'icon': _Icon_icon$,
        'size': _Icon_size$,
        'fill': _Icon_fill$,
        'weight': _Icon_weight$,
        'grade': _Icon_grade$,
        'opticalSize': _Icon_opticalSize$,
        'color': _Icon_color$,
        'shadows': _Icon_shadows$,
        'semanticLabel': _Icon_semanticLabel$,
        'textDirection': _Icon_textDirection$,
        'build': _Icon_build$,
        'debugFillProperties': _Icon_debugFillProperties$,
      },
      {},
    )
  },
);
Function Icon_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Icon;
Function Icon_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Icon;
IconData? _Icon_icon$(Icon target) {
  return target.icon;
}

double? _Icon_size$(Icon target) {
  return target.size;
}

double? _Icon_fill$(Icon target) {
  return target.fill;
}

double? _Icon_weight$(Icon target) {
  return target.weight;
}

double? _Icon_grade$(Icon target) {
  return target.grade;
}

double? _Icon_opticalSize$(Icon target) {
  return target.opticalSize;
}

Color? _Icon_color$(Icon target) {
  return target.color;
}

List<Shadow>? _Icon_shadows$(Icon target) {
  return target.shadows;
}

String? _Icon_semanticLabel$(Icon target) {
  return target.semanticLabel;
}

TextDirection? _Icon_textDirection$(Icon target) {
  return target.textDirection;
}

Function _Icon_build$(
  m.Scope scope,
  Icon target,
) =>
    target.build;
Function _Icon_debugFillProperties$(
  m.Scope scope,
  Icon target,
) =>
    target.debugFillProperties;
