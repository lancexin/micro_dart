// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/icon.dart';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/icon_data.dart';
import 'package:flutter/src/widgets/icon_theme.dart';
import 'package:flutter/src/widgets/icon_theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/icon.dart',
  {'Icon.': _Icon__$},
  {},
  {
    'Icon': m.ClassMirror(
      'Icon',
      {
        '#as': Icon_as$,
        '#is': Icon_is$,
        'icon': _Icon_icon$,
        'size': _Icon_size$,
        'fill': _Icon_fill$,
        'weight': _Icon_weight$,
        'grade': _Icon_grade$,
        'opticalSize': _Icon_opticalSize$,
        'color': _Icon_color$,
        'shadows': _Icon_shadows$,
        'semanticLabel': _Icon_semanticLabel$,
        'textDirection': _Icon_textDirection$,
        'build': _Icon_build$,
        'debugFillProperties': _Icon_debugFillProperties$,
      },
      {},
    )
  },
);
Function Icon_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Icon;
Function Icon_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Icon;
Function _Icon_icon$(
  m.Scope scope$,
  Icon target$,
) =>
    () {
      return target$.icon;
    };
Function _Icon_size$(
  m.Scope scope$,
  Icon target$,
) =>
    () {
      return target$.size;
    };
Function _Icon_fill$(
  m.Scope scope$,
  Icon target$,
) =>
    () {
      return target$.fill;
    };
Function _Icon_weight$(
  m.Scope scope$,
  Icon target$,
) =>
    () {
      return target$.weight;
    };
Function _Icon_grade$(
  m.Scope scope$,
  Icon target$,
) =>
    () {
      return target$.grade;
    };
Function _Icon_opticalSize$(
  m.Scope scope$,
  Icon target$,
) =>
    () {
      return target$.opticalSize;
    };
Function _Icon_color$(
  m.Scope scope$,
  Icon target$,
) =>
    () {
      return target$.color;
    };
Function _Icon_shadows$(
  m.Scope scope$,
  Icon target$,
) =>
    () {
      return target$.shadows;
    };
Function _Icon_semanticLabel$(
  m.Scope scope$,
  Icon target$,
) =>
    () {
      return target$.semanticLabel;
    };
Function _Icon_textDirection$(
  m.Scope scope$,
  Icon target$,
) =>
    () {
      return target$.textDirection;
    };
Function _Icon__$(m.Scope scope$) => (
      IconData? icon, {
      Key? key,
      double? size,
      double? fill,
      double? weight,
      double? grade,
      double? opticalSize,
      Color? color,
      List? shadows,
      String? semanticLabel,
      TextDirection? textDirection,
    }) {
      return Icon(
        icon,
        color: color,
        fill: fill,
        grade: grade,
        key: key,
        opticalSize: opticalSize,
        semanticLabel: semanticLabel,
        shadows: shadows == null ? null : List.from(shadows),
        size: size,
        textDirection: textDirection,
        weight: weight,
      );
    };
Function _Icon_build$(
  m.Scope scope$,
  Icon target$,
) =>
    target$.build;
Function _Icon_debugFillProperties$(
  m.Scope scope$,
  Icon target$,
) =>
    target$.debugFillProperties;
