// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/progress_indicator_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/progress_indicator_theme.dart',
  {
    'ProgressIndicatorThemeData.': _ProgressIndicatorThemeData__$,
    'ProgressIndicatorThemeData.lerp': _ProgressIndicatorThemeData_lerp$,
    'ProgressIndicatorTheme.': _ProgressIndicatorTheme__$,
    'ProgressIndicatorTheme.of': _ProgressIndicatorTheme_of$,
  },
  {},
  {
    'ProgressIndicatorThemeData': m.ClassMirror(
      'ProgressIndicatorThemeData',
      {
        '#as': ProgressIndicatorThemeData_as$,
        '#is': ProgressIndicatorThemeData_is$,
        'color': _ProgressIndicatorThemeData_color$,
        'linearTrackColor': _ProgressIndicatorThemeData_linearTrackColor$,
        'linearMinHeight': _ProgressIndicatorThemeData_linearMinHeight$,
        'circularTrackColor': _ProgressIndicatorThemeData_circularTrackColor$,
        'refreshBackgroundColor':
            _ProgressIndicatorThemeData_refreshBackgroundColor$,
        'hashCode': _ProgressIndicatorThemeData_hashCode$,
        'copyWith': _ProgressIndicatorThemeData_copyWith$,
        '==': _ProgressIndicatorThemeData_eq$$,
        'debugFillProperties': _ProgressIndicatorThemeData_debugFillProperties$,
      },
      {},
    ),
    'ProgressIndicatorTheme': m.ClassMirror(
      'ProgressIndicatorTheme',
      {
        '#as': ProgressIndicatorTheme_as$,
        '#is': ProgressIndicatorTheme_is$,
        'data': _ProgressIndicatorTheme_data$,
        'wrap': _ProgressIndicatorTheme_wrap$,
        'updateShouldNotify': _ProgressIndicatorTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function ProgressIndicatorThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ProgressIndicatorThemeData;
Function ProgressIndicatorThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ProgressIndicatorThemeData;
Function _ProgressIndicatorThemeData_color$(
  m.Scope scope$,
  ProgressIndicatorThemeData target$,
) =>
    () {
      return target$.color;
    };
Function _ProgressIndicatorThemeData_linearTrackColor$(
  m.Scope scope$,
  ProgressIndicatorThemeData target$,
) =>
    () {
      return target$.linearTrackColor;
    };
Function _ProgressIndicatorThemeData_linearMinHeight$(
  m.Scope scope$,
  ProgressIndicatorThemeData target$,
) =>
    () {
      return target$.linearMinHeight;
    };
Function _ProgressIndicatorThemeData_circularTrackColor$(
  m.Scope scope$,
  ProgressIndicatorThemeData target$,
) =>
    () {
      return target$.circularTrackColor;
    };
Function _ProgressIndicatorThemeData_refreshBackgroundColor$(
  m.Scope scope$,
  ProgressIndicatorThemeData target$,
) =>
    () {
      return target$.refreshBackgroundColor;
    };
Function _ProgressIndicatorThemeData_hashCode$(
  m.Scope scope$,
  ProgressIndicatorThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _ProgressIndicatorThemeData__$(m.Scope scope$) => ({
      Color? color,
      Color? linearTrackColor,
      double? linearMinHeight,
      Color? circularTrackColor,
      Color? refreshBackgroundColor,
    }) {
      return ProgressIndicatorThemeData(
        circularTrackColor: circularTrackColor,
        color: color,
        linearMinHeight: linearMinHeight,
        linearTrackColor: linearTrackColor,
        refreshBackgroundColor: refreshBackgroundColor,
      );
    };
Function _ProgressIndicatorThemeData_copyWith$(
  m.Scope scope$,
  ProgressIndicatorThemeData target$,
) =>
    target$.copyWith;
Function _ProgressIndicatorThemeData_lerp$(m.Scope scope$) =>
    ProgressIndicatorThemeData.lerp;
Function _ProgressIndicatorThemeData_eq$$(
  m.Scope scope$,
  ProgressIndicatorThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _ProgressIndicatorThemeData_debugFillProperties$(
  m.Scope scope$,
  ProgressIndicatorThemeData target$,
) =>
    target$.debugFillProperties;
Function ProgressIndicatorTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ProgressIndicatorTheme;
Function ProgressIndicatorTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ProgressIndicatorTheme;
Function _ProgressIndicatorTheme_data$(
  m.Scope scope$,
  ProgressIndicatorTheme target$,
) =>
    () {
      return target$.data;
    };
Function _ProgressIndicatorTheme__$(m.Scope scope$) => ({
      Key? key,
      required ProgressIndicatorThemeData data,
      required Widget child,
    }) {
      return ProgressIndicatorTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _ProgressIndicatorTheme_of$(m.Scope scope$) =>
    ProgressIndicatorTheme.of;
Function _ProgressIndicatorTheme_wrap$(
  m.Scope scope$,
  ProgressIndicatorTheme target$,
) =>
    target$.wrap;
Function _ProgressIndicatorTheme_updateShouldNotify$(
  m.Scope scope$,
  ProgressIndicatorTheme target$,
) =>
    target$.updateShouldNotify;
