// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/progress_indicator_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/progress_indicator_theme.dart',
  {
    'ProgressIndicatorThemeData.lerp': _ProgressIndicatorThemeData_lerp$,
    'ProgressIndicatorTheme.of': _ProgressIndicatorTheme_of$,
  },
  {},
  {
    'ProgressIndicatorThemeData': m.ClassMirror(
      'ProgressIndicatorThemeData',
      {
        'color': _ProgressIndicatorThemeData_color$,
        'linearTrackColor': _ProgressIndicatorThemeData_linearTrackColor$,
        'linearMinHeight': _ProgressIndicatorThemeData_linearMinHeight$,
        'circularTrackColor': _ProgressIndicatorThemeData_circularTrackColor$,
        'refreshBackgroundColor':
            _ProgressIndicatorThemeData_refreshBackgroundColor$,
        'hashCode': _ProgressIndicatorThemeData_hashCode$,
        'copyWith': _ProgressIndicatorThemeData_copyWith$,
        'debugFillProperties': _ProgressIndicatorThemeData_debugFillProperties$,
      },
      {},
    ),
    'ProgressIndicatorTheme': m.ClassMirror(
      'ProgressIndicatorTheme',
      {
        'data': _ProgressIndicatorTheme_data$,
        'wrap': _ProgressIndicatorTheme_wrap$,
        'updateShouldNotify': _ProgressIndicatorTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Color? _ProgressIndicatorThemeData_color$(ProgressIndicatorThemeData target) {
  return target.color;
}

Color? _ProgressIndicatorThemeData_linearTrackColor$(
    ProgressIndicatorThemeData target) {
  return target.linearTrackColor;
}

double? _ProgressIndicatorThemeData_linearMinHeight$(
    ProgressIndicatorThemeData target) {
  return target.linearMinHeight;
}

Color? _ProgressIndicatorThemeData_circularTrackColor$(
    ProgressIndicatorThemeData target) {
  return target.circularTrackColor;
}

Color? _ProgressIndicatorThemeData_refreshBackgroundColor$(
    ProgressIndicatorThemeData target) {
  return target.refreshBackgroundColor;
}

int _ProgressIndicatorThemeData_hashCode$(ProgressIndicatorThemeData target) {
  return target.hashCode;
}

Function _ProgressIndicatorThemeData_copyWith$(
  m.Scope scope,
  ProgressIndicatorThemeData target,
) =>
    target.copyWith;
Function _ProgressIndicatorThemeData_lerp$(m.Scope scope) =>
    ProgressIndicatorThemeData.lerp;
Function _ProgressIndicatorThemeData_debugFillProperties$(
  m.Scope scope,
  ProgressIndicatorThemeData target,
) =>
    target.debugFillProperties;
ProgressIndicatorThemeData _ProgressIndicatorTheme_data$(
    ProgressIndicatorTheme target) {
  return target.data;
}

Function _ProgressIndicatorTheme_of$(m.Scope scope) =>
    ProgressIndicatorTheme.of;
Function _ProgressIndicatorTheme_wrap$(
  m.Scope scope,
  ProgressIndicatorTheme target,
) =>
    target.wrap;
Function _ProgressIndicatorTheme_updateShouldNotify$(
  m.Scope scope,
  ProgressIndicatorTheme target,
) =>
    target.updateShouldNotify;
