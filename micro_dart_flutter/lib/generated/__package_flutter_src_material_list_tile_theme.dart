// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/list_tile_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/list_tile_theme.dart',
  {
    'ListTileThemeData.lerp': _ListTileThemeData_lerp$,
    'ListTileTheme.of': _ListTileTheme_of$,
    'ListTileTheme.merge': _ListTileTheme_merge$,
  },
  {},
  {
    'ListTileThemeData': m.ClassMirror(
      'ListTileThemeData',
      {
        '#as': ListTileThemeData_as$,
        '#is': ListTileThemeData_is$,
        'dense': _ListTileThemeData_dense$,
        'shape': _ListTileThemeData_shape$,
        'style': _ListTileThemeData_style$,
        'selectedColor': _ListTileThemeData_selectedColor$,
        'iconColor': _ListTileThemeData_iconColor$,
        'textColor': _ListTileThemeData_textColor$,
        'titleTextStyle': _ListTileThemeData_titleTextStyle$,
        'subtitleTextStyle': _ListTileThemeData_subtitleTextStyle$,
        'leadingAndTrailingTextStyle':
            _ListTileThemeData_leadingAndTrailingTextStyle$,
        'contentPadding': _ListTileThemeData_contentPadding$,
        'tileColor': _ListTileThemeData_tileColor$,
        'selectedTileColor': _ListTileThemeData_selectedTileColor$,
        'horizontalTitleGap': _ListTileThemeData_horizontalTitleGap$,
        'minVerticalPadding': _ListTileThemeData_minVerticalPadding$,
        'minLeadingWidth': _ListTileThemeData_minLeadingWidth$,
        'enableFeedback': _ListTileThemeData_enableFeedback$,
        'mouseCursor': _ListTileThemeData_mouseCursor$,
        'visualDensity': _ListTileThemeData_visualDensity$,
        'titleAlignment': _ListTileThemeData_titleAlignment$,
        'hashCode': _ListTileThemeData_hashCode$,
        'copyWith': _ListTileThemeData_copyWith$,
        '==': _ListTileThemeData_eq$$,
        'debugFillProperties': _ListTileThemeData_debugFillProperties$,
      },
      {},
    ),
    'ListTileTheme': m.ClassMirror(
      'ListTileTheme',
      {
        '#as': ListTileTheme_as$,
        '#is': ListTileTheme_is$,
        'data': _ListTileTheme_data$,
        'dense': _ListTileTheme_dense$,
        'shape': _ListTileTheme_shape$,
        'style': _ListTileTheme_style$,
        'selectedColor': _ListTileTheme_selectedColor$,
        'iconColor': _ListTileTheme_iconColor$,
        'textColor': _ListTileTheme_textColor$,
        'contentPadding': _ListTileTheme_contentPadding$,
        'tileColor': _ListTileTheme_tileColor$,
        'selectedTileColor': _ListTileTheme_selectedTileColor$,
        'horizontalTitleGap': _ListTileTheme_horizontalTitleGap$,
        'minVerticalPadding': _ListTileTheme_minVerticalPadding$,
        'minLeadingWidth': _ListTileTheme_minLeadingWidth$,
        'enableFeedback': _ListTileTheme_enableFeedback$,
        'wrap': _ListTileTheme_wrap$,
        'updateShouldNotify': _ListTileTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function ListTileThemeData_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ListTileThemeData;
Function ListTileThemeData_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ListTileThemeData;
bool? _ListTileThemeData_dense$(ListTileThemeData target) {
  return target.dense;
}

ShapeBorder? _ListTileThemeData_shape$(ListTileThemeData target) {
  return target.shape;
}

ListTileStyle? _ListTileThemeData_style$(ListTileThemeData target) {
  return target.style;
}

Color? _ListTileThemeData_selectedColor$(ListTileThemeData target) {
  return target.selectedColor;
}

Color? _ListTileThemeData_iconColor$(ListTileThemeData target) {
  return target.iconColor;
}

Color? _ListTileThemeData_textColor$(ListTileThemeData target) {
  return target.textColor;
}

TextStyle? _ListTileThemeData_titleTextStyle$(ListTileThemeData target) {
  return target.titleTextStyle;
}

TextStyle? _ListTileThemeData_subtitleTextStyle$(ListTileThemeData target) {
  return target.subtitleTextStyle;
}

TextStyle? _ListTileThemeData_leadingAndTrailingTextStyle$(
    ListTileThemeData target) {
  return target.leadingAndTrailingTextStyle;
}

EdgeInsetsGeometry? _ListTileThemeData_contentPadding$(
    ListTileThemeData target) {
  return target.contentPadding;
}

Color? _ListTileThemeData_tileColor$(ListTileThemeData target) {
  return target.tileColor;
}

Color? _ListTileThemeData_selectedTileColor$(ListTileThemeData target) {
  return target.selectedTileColor;
}

double? _ListTileThemeData_horizontalTitleGap$(ListTileThemeData target) {
  return target.horizontalTitleGap;
}

double? _ListTileThemeData_minVerticalPadding$(ListTileThemeData target) {
  return target.minVerticalPadding;
}

double? _ListTileThemeData_minLeadingWidth$(ListTileThemeData target) {
  return target.minLeadingWidth;
}

bool? _ListTileThemeData_enableFeedback$(ListTileThemeData target) {
  return target.enableFeedback;
}

MaterialStateProperty<MouseCursor?>? _ListTileThemeData_mouseCursor$(
    ListTileThemeData target) {
  return target.mouseCursor;
}

VisualDensity? _ListTileThemeData_visualDensity$(ListTileThemeData target) {
  return target.visualDensity;
}

ListTileTitleAlignment? _ListTileThemeData_titleAlignment$(
    ListTileThemeData target) {
  return target.titleAlignment;
}

int _ListTileThemeData_hashCode$(ListTileThemeData target) {
  return target.hashCode;
}

Function _ListTileThemeData_copyWith$(
  m.Scope scope,
  ListTileThemeData target,
) =>
    target.copyWith;
Function _ListTileThemeData_lerp$(m.Scope scope) => ListTileThemeData.lerp;
Function _ListTileThemeData_eq$$(
  m.Scope scope,
  ListTileThemeData target,
) =>
    (Object other) => target == other;
Function _ListTileThemeData_debugFillProperties$(
  m.Scope scope,
  ListTileThemeData target,
) =>
    target.debugFillProperties;
Function ListTileTheme_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ListTileTheme;
Function ListTileTheme_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ListTileTheme;
ListTileThemeData _ListTileTheme_data$(ListTileTheme target) {
  return target.data;
}

bool? _ListTileTheme_dense$(ListTileTheme target) {
  return target.dense;
}

ShapeBorder? _ListTileTheme_shape$(ListTileTheme target) {
  return target.shape;
}

ListTileStyle? _ListTileTheme_style$(ListTileTheme target) {
  return target.style;
}

Color? _ListTileTheme_selectedColor$(ListTileTheme target) {
  return target.selectedColor;
}

Color? _ListTileTheme_iconColor$(ListTileTheme target) {
  return target.iconColor;
}

Color? _ListTileTheme_textColor$(ListTileTheme target) {
  return target.textColor;
}

EdgeInsetsGeometry? _ListTileTheme_contentPadding$(ListTileTheme target) {
  return target.contentPadding;
}

Color? _ListTileTheme_tileColor$(ListTileTheme target) {
  return target.tileColor;
}

Color? _ListTileTheme_selectedTileColor$(ListTileTheme target) {
  return target.selectedTileColor;
}

double? _ListTileTheme_horizontalTitleGap$(ListTileTheme target) {
  return target.horizontalTitleGap;
}

double? _ListTileTheme_minVerticalPadding$(ListTileTheme target) {
  return target.minVerticalPadding;
}

double? _ListTileTheme_minLeadingWidth$(ListTileTheme target) {
  return target.minLeadingWidth;
}

bool? _ListTileTheme_enableFeedback$(ListTileTheme target) {
  return target.enableFeedback;
}

Function _ListTileTheme_of$(m.Scope scope) => ListTileTheme.of;
Function _ListTileTheme_merge$(m.Scope scope) => ListTileTheme.merge;
Function _ListTileTheme_wrap$(
  m.Scope scope,
  ListTileTheme target,
) =>
    target.wrap;
Function _ListTileTheme_updateShouldNotify$(
  m.Scope scope,
  ListTileTheme target,
) =>
    target.updateShouldNotify;
