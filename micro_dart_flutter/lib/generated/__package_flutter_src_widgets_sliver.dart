// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/sliver.dart';
import 'dart:collection' show HashMap, SplayTreeMap;
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/automatic_keep_alive.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/scroll_delegate.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/sliver.dart',
  {
    'SliverList.': _SliverList__$,
    'SliverList.builder': _SliverList_builder_$,
    'SliverList.separated': _SliverList_separated_$,
    'SliverList.list': _SliverList_list_$,
    'SliverFixedExtentList.': _SliverFixedExtentList__$,
    'SliverFixedExtentList.builder': _SliverFixedExtentList_builder_$,
    'SliverFixedExtentList.list': _SliverFixedExtentList_list_$,
    'SliverGrid.': _SliverGrid__$,
    'SliverGrid.builder': _SliverGrid_builder_$,
    'SliverGrid.count': _SliverGrid_count_$,
    'SliverGrid.extent': _SliverGrid_extent_$,
    'SliverMultiBoxAdaptorElement.': _SliverMultiBoxAdaptorElement__$,
    'SliverMultiBoxAdaptorElement.visitChildren':
        _SliverMultiBoxAdaptorElement_visitChildren$,
    'SliverMultiBoxAdaptorElement.debugVisitOnstageChildren':
        _SliverMultiBoxAdaptorElement_debugVisitOnstageChildren$,
    'SliverOpacity.': _SliverOpacity__$,
    'SliverIgnorePointer.': _SliverIgnorePointer__$,
    'SliverOffstage.': _SliverOffstage__$,
    'KeepAlive.': _KeepAlive__$,
  },
  {},
  {
    'SliverWithKeepAliveWidget': m.ClassMirror(
      'SliverWithKeepAliveWidget',
      {
        '#as': SliverWithKeepAliveWidget_as$,
        '#is': SliverWithKeepAliveWidget_is$,
        'createRenderObject': _SliverWithKeepAliveWidget_createRenderObject$,
      },
      {},
    ),
    'SliverMultiBoxAdaptorWidget': m.ClassMirror(
      'SliverMultiBoxAdaptorWidget',
      {
        '#as': SliverMultiBoxAdaptorWidget_as$,
        '#is': SliverMultiBoxAdaptorWidget_is$,
        'delegate': _SliverMultiBoxAdaptorWidget_delegate$,
        'createElement': _SliverMultiBoxAdaptorWidget_createElement$,
        'createRenderObject': _SliverMultiBoxAdaptorWidget_createRenderObject$,
        'estimateMaxScrollOffset':
            _SliverMultiBoxAdaptorWidget_estimateMaxScrollOffset$,
        'debugFillProperties':
            _SliverMultiBoxAdaptorWidget_debugFillProperties$,
      },
      {},
    ),
    'SliverList': m.ClassMirror(
      'SliverList',
      {
        '#as': SliverList_as$,
        '#is': SliverList_is$,
        'createElement': _SliverList_createElement$,
        'createRenderObject': _SliverList_createRenderObject$,
      },
      {},
    ),
    'SliverFixedExtentList': m.ClassMirror(
      'SliverFixedExtentList',
      {
        '#as': SliverFixedExtentList_as$,
        '#is': SliverFixedExtentList_is$,
        'itemExtent': _SliverFixedExtentList_itemExtent$,
        'createRenderObject': _SliverFixedExtentList_createRenderObject$,
        'updateRenderObject': _SliverFixedExtentList_updateRenderObject$,
      },
      {},
    ),
    'SliverGrid': m.ClassMirror(
      'SliverGrid',
      {
        '#as': SliverGrid_as$,
        '#is': SliverGrid_is$,
        'gridDelegate': _SliverGrid_gridDelegate$,
        'createRenderObject': _SliverGrid_createRenderObject$,
        'updateRenderObject': _SliverGrid_updateRenderObject$,
        'estimateMaxScrollOffset': _SliverGrid_estimateMaxScrollOffset$,
      },
      {},
    ),
    'SliverMultiBoxAdaptorElement': m.ClassMirror(
      'SliverMultiBoxAdaptorElement',
      {
        '#as': SliverMultiBoxAdaptorElement_as$,
        '#is': SliverMultiBoxAdaptorElement_is$,
        'renderObject': _SliverMultiBoxAdaptorElement_renderObject$,
        'estimatedChildCount':
            _SliverMultiBoxAdaptorElement_estimatedChildCount$,
        'childCount': _SliverMultiBoxAdaptorElement_childCount$,
        'update': _SliverMultiBoxAdaptorElement_update$,
        'performRebuild': _SliverMultiBoxAdaptorElement_performRebuild$,
        'createChild': _SliverMultiBoxAdaptorElement_createChild$,
        'updateChild': _SliverMultiBoxAdaptorElement_updateChild$,
        'forgetChild': _SliverMultiBoxAdaptorElement_forgetChild$,
        'removeChild': _SliverMultiBoxAdaptorElement_removeChild$,
        'estimateMaxScrollOffset':
            _SliverMultiBoxAdaptorElement_estimateMaxScrollOffset$,
        'didStartLayout': _SliverMultiBoxAdaptorElement_didStartLayout$,
        'didFinishLayout': _SliverMultiBoxAdaptorElement_didFinishLayout$,
        'debugAssertChildListLocked':
            _SliverMultiBoxAdaptorElement_debugAssertChildListLocked$,
        'didAdoptChild': _SliverMultiBoxAdaptorElement_didAdoptChild$,
        'setDidUnderflow': _SliverMultiBoxAdaptorElement_setDidUnderflow$,
        'insertRenderObjectChild':
            _SliverMultiBoxAdaptorElement_insertRenderObjectChild$,
        'moveRenderObjectChild':
            _SliverMultiBoxAdaptorElement_moveRenderObjectChild$,
        'removeRenderObjectChild':
            _SliverMultiBoxAdaptorElement_removeRenderObjectChild$,
      },
      {},
    ),
    'SliverOpacity': m.ClassMirror(
      'SliverOpacity',
      {
        '#as': SliverOpacity_as$,
        '#is': SliverOpacity_is$,
        'opacity': _SliverOpacity_opacity$,
        'alwaysIncludeSemantics': _SliverOpacity_alwaysIncludeSemantics$,
        'createRenderObject': _SliverOpacity_createRenderObject$,
        'updateRenderObject': _SliverOpacity_updateRenderObject$,
        'debugFillProperties': _SliverOpacity_debugFillProperties$,
      },
      {},
    ),
    'SliverIgnorePointer': m.ClassMirror(
      'SliverIgnorePointer',
      {
        '#as': SliverIgnorePointer_as$,
        '#is': SliverIgnorePointer_is$,
        'ignoring': _SliverIgnorePointer_ignoring$,
        'ignoringSemantics': _SliverIgnorePointer_ignoringSemantics$,
        'createRenderObject': _SliverIgnorePointer_createRenderObject$,
        'updateRenderObject': _SliverIgnorePointer_updateRenderObject$,
        'debugFillProperties': _SliverIgnorePointer_debugFillProperties$,
      },
      {},
    ),
    'SliverOffstage': m.ClassMirror(
      'SliverOffstage',
      {
        '#as': SliverOffstage_as$,
        '#is': SliverOffstage_is$,
        'offstage': _SliverOffstage_offstage$,
        'createRenderObject': _SliverOffstage_createRenderObject$,
        'updateRenderObject': _SliverOffstage_updateRenderObject$,
        'debugFillProperties': _SliverOffstage_debugFillProperties$,
        'createElement': _SliverOffstage_createElement$,
      },
      {},
    ),
    'KeepAlive': m.ClassMirror(
      'KeepAlive',
      {
        '#as': KeepAlive_as$,
        '#is': KeepAlive_is$,
        'keepAlive': _KeepAlive_keepAlive$,
        'debugTypicalAncestorWidgetClass':
            _KeepAlive_debugTypicalAncestorWidgetClass$,
        'applyParentData': _KeepAlive_applyParentData$,
        'debugCanApplyOutOfTurn': _KeepAlive_debugCanApplyOutOfTurn$,
        'debugFillProperties': _KeepAlive_debugFillProperties$,
      },
      {},
    ),
  },
);
Function SliverWithKeepAliveWidget_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverWithKeepAliveWidget;
Function SliverWithKeepAliveWidget_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverWithKeepAliveWidget;
Function _SliverWithKeepAliveWidget_createRenderObject$(
  m.Scope scope$,
  SliverWithKeepAliveWidget target$,
) =>
    target$.createRenderObject;
Function SliverMultiBoxAdaptorWidget_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverMultiBoxAdaptorWidget;
Function SliverMultiBoxAdaptorWidget_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverMultiBoxAdaptorWidget;
Function _SliverMultiBoxAdaptorWidget_delegate$(
  m.Scope scope$,
  SliverMultiBoxAdaptorWidget target$,
) =>
    () {
      return target$.delegate;
    };
Function _SliverMultiBoxAdaptorWidget_createElement$(
  m.Scope scope$,
  SliverMultiBoxAdaptorWidget target$,
) =>
    target$.createElement;
Function _SliverMultiBoxAdaptorWidget_createRenderObject$(
  m.Scope scope$,
  SliverMultiBoxAdaptorWidget target$,
) =>
    target$.createRenderObject;
Function _SliverMultiBoxAdaptorWidget_estimateMaxScrollOffset$(
  m.Scope scope$,
  SliverMultiBoxAdaptorWidget target$,
) =>
    target$.estimateMaxScrollOffset;
Function _SliverMultiBoxAdaptorWidget_debugFillProperties$(
  m.Scope scope$,
  SliverMultiBoxAdaptorWidget target$,
) =>
    target$.debugFillProperties;
Function SliverList_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverList;
Function SliverList_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverList;
Function _SliverList__$(m.Scope scope$) => ({
      Key? key,
      required SliverChildDelegate delegate,
    }) {
      return SliverList(
        delegate: delegate,
        key: key,
      );
    };
Function _SliverList_builder_$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer itemBuilder,
      m.FunctionPointer? findChildIndexCallback,
      int? itemCount,
      bool? addAutomaticKeepAlives,
      bool? addRepaintBoundaries,
      bool? addSemanticIndexes,
    }) {
      int? findChildIndexCallbackProxy(Key findChildIndexCallback_key$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            findChildIndexCallback!,
            [findChildIndexCallback_key$],
            {},
          );
      Widget? itemBuilderProxy(
        BuildContext itemBuilder_context$,
        int itemBuilder_index$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            itemBuilder,
            [
              itemBuilder_context$,
              itemBuilder_index$,
            ],
            {},
          );
      return SliverList.builder(
        addAutomaticKeepAlives: addAutomaticKeepAlives ?? true,
        addRepaintBoundaries: addRepaintBoundaries ?? true,
        addSemanticIndexes: addSemanticIndexes ?? true,
        findChildIndexCallback:
            findChildIndexCallback == null ? null : findChildIndexCallbackProxy,
        itemBuilder: itemBuilderProxy,
        itemCount: itemCount,
        key: key,
      );
    };
Function _SliverList_separated_$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer itemBuilder,
      m.FunctionPointer? findChildIndexCallback,
      required m.FunctionPointer separatorBuilder,
      int? itemCount,
      bool? addAutomaticKeepAlives,
      bool? addRepaintBoundaries,
      bool? addSemanticIndexes,
    }) {
      int? findChildIndexCallbackProxy(Key findChildIndexCallback_key$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            findChildIndexCallback!,
            [findChildIndexCallback_key$],
            {},
          );
      Widget? itemBuilderProxy(
        BuildContext itemBuilder_context$,
        int itemBuilder_index$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            itemBuilder,
            [
              itemBuilder_context$,
              itemBuilder_index$,
            ],
            {},
          );
      Widget? separatorBuilderProxy(
        BuildContext separatorBuilder_context$,
        int separatorBuilder_index$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            separatorBuilder,
            [
              separatorBuilder_context$,
              separatorBuilder_index$,
            ],
            {},
          );
      return SliverList.separated(
        addAutomaticKeepAlives: addAutomaticKeepAlives ?? true,
        addRepaintBoundaries: addRepaintBoundaries ?? true,
        addSemanticIndexes: addSemanticIndexes ?? true,
        findChildIndexCallback:
            findChildIndexCallback == null ? null : findChildIndexCallbackProxy,
        itemBuilder: itemBuilderProxy,
        itemCount: itemCount,
        key: key,
        separatorBuilder: separatorBuilderProxy,
      );
    };
Function _SliverList_list_$(m.Scope scope$) => SliverList.list;
Function _SliverList_createElement$(
  m.Scope scope$,
  SliverList target$,
) =>
    target$.createElement;
Function _SliverList_createRenderObject$(
  m.Scope scope$,
  SliverList target$,
) =>
    target$.createRenderObject;
Function SliverFixedExtentList_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverFixedExtentList;
Function SliverFixedExtentList_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverFixedExtentList;
Function _SliverFixedExtentList_itemExtent$(
  m.Scope scope$,
  SliverFixedExtentList target$,
) =>
    () {
      return target$.itemExtent;
    };
Function _SliverFixedExtentList__$(m.Scope scope$) => ({
      Key? key,
      required SliverChildDelegate delegate,
      required double itemExtent,
    }) {
      return SliverFixedExtentList(
        delegate: delegate,
        itemExtent: itemExtent,
        key: key,
      );
    };
Function _SliverFixedExtentList_builder_$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer itemBuilder,
      required double itemExtent,
      m.FunctionPointer? findChildIndexCallback,
      int? itemCount,
      bool? addAutomaticKeepAlives,
      bool? addRepaintBoundaries,
      bool? addSemanticIndexes,
    }) {
      int? findChildIndexCallbackProxy(Key findChildIndexCallback_key$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            findChildIndexCallback!,
            [findChildIndexCallback_key$],
            {},
          );
      Widget? itemBuilderProxy(
        BuildContext itemBuilder_context$,
        int itemBuilder_index$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            itemBuilder,
            [
              itemBuilder_context$,
              itemBuilder_index$,
            ],
            {},
          );
      return SliverFixedExtentList.builder(
        addAutomaticKeepAlives: addAutomaticKeepAlives ?? true,
        addRepaintBoundaries: addRepaintBoundaries ?? true,
        addSemanticIndexes: addSemanticIndexes ?? true,
        findChildIndexCallback:
            findChildIndexCallback == null ? null : findChildIndexCallbackProxy,
        itemBuilder: itemBuilderProxy,
        itemCount: itemCount,
        itemExtent: itemExtent,
        key: key,
      );
    };
Function _SliverFixedExtentList_list_$(m.Scope scope$) =>
    SliverFixedExtentList.list;
Function _SliverFixedExtentList_createRenderObject$(
  m.Scope scope$,
  SliverFixedExtentList target$,
) =>
    target$.createRenderObject;
Function _SliverFixedExtentList_updateRenderObject$(
  m.Scope scope$,
  SliverFixedExtentList target$,
) =>
    target$.updateRenderObject;
Function SliverGrid_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverGrid;
Function SliverGrid_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverGrid;
Function _SliverGrid_gridDelegate$(
  m.Scope scope$,
  SliverGrid target$,
) =>
    () {
      return target$.gridDelegate;
    };
Function _SliverGrid__$(m.Scope scope$) => ({
      Key? key,
      required SliverChildDelegate delegate,
      required SliverGridDelegate gridDelegate,
    }) {
      return SliverGrid(
        delegate: delegate,
        gridDelegate: gridDelegate,
        key: key,
      );
    };
Function _SliverGrid_builder_$(m.Scope scope$) => ({
      Key? key,
      required SliverGridDelegate gridDelegate,
      required m.FunctionPointer itemBuilder,
      m.FunctionPointer? findChildIndexCallback,
      int? itemCount,
      bool? addAutomaticKeepAlives,
      bool? addRepaintBoundaries,
      bool? addSemanticIndexes,
    }) {
      int? findChildIndexCallbackProxy(Key findChildIndexCallback_key$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            findChildIndexCallback!,
            [findChildIndexCallback_key$],
            {},
          );
      Widget? itemBuilderProxy(
        BuildContext itemBuilder_context$,
        int itemBuilder_index$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            itemBuilder,
            [
              itemBuilder_context$,
              itemBuilder_index$,
            ],
            {},
          );
      return SliverGrid.builder(
        addAutomaticKeepAlives: addAutomaticKeepAlives ?? true,
        addRepaintBoundaries: addRepaintBoundaries ?? true,
        addSemanticIndexes: addSemanticIndexes ?? true,
        findChildIndexCallback:
            findChildIndexCallback == null ? null : findChildIndexCallbackProxy,
        gridDelegate: gridDelegate,
        itemBuilder: itemBuilderProxy,
        itemCount: itemCount,
        key: key,
      );
    };
Function _SliverGrid_count_$(m.Scope scope$) => SliverGrid.count;
Function _SliverGrid_extent_$(m.Scope scope$) => SliverGrid.extent;
Function _SliverGrid_createRenderObject$(
  m.Scope scope$,
  SliverGrid target$,
) =>
    target$.createRenderObject;
Function _SliverGrid_updateRenderObject$(
  m.Scope scope$,
  SliverGrid target$,
) =>
    target$.updateRenderObject;
Function _SliverGrid_estimateMaxScrollOffset$(
  m.Scope scope$,
  SliverGrid target$,
) =>
    target$.estimateMaxScrollOffset;
Function SliverMultiBoxAdaptorElement_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverMultiBoxAdaptorElement;
Function SliverMultiBoxAdaptorElement_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverMultiBoxAdaptorElement;
Function _SliverMultiBoxAdaptorElement_renderObject$(
  m.Scope scope$,
  SliverMultiBoxAdaptorElement target$,
) =>
    () {
      return target$.renderObject;
    };
Function _SliverMultiBoxAdaptorElement_estimatedChildCount$(
  m.Scope scope$,
  SliverMultiBoxAdaptorElement target$,
) =>
    () {
      return target$.estimatedChildCount;
    };
Function _SliverMultiBoxAdaptorElement_childCount$(
  m.Scope scope$,
  SliverMultiBoxAdaptorElement target$,
) =>
    () {
      return target$.childCount;
    };
Function _SliverMultiBoxAdaptorElement__$(m.Scope scope$) => (
      SliverMultiBoxAdaptorWidget widget, {
      bool? replaceMovedChildren,
    }) {
      return SliverMultiBoxAdaptorElement(
        widget,
        replaceMovedChildren: replaceMovedChildren ?? false,
      );
    };
Function _SliverMultiBoxAdaptorElement_update$(
  m.Scope scope$,
  SliverMultiBoxAdaptorElement target$,
) =>
    target$.update;
Function _SliverMultiBoxAdaptorElement_performRebuild$(
  m.Scope scope$,
  SliverMultiBoxAdaptorElement target$,
) =>
    target$.performRebuild;
Function _SliverMultiBoxAdaptorElement_createChild$(
  m.Scope scope$,
  SliverMultiBoxAdaptorElement target$,
) =>
    target$.createChild;
Function _SliverMultiBoxAdaptorElement_updateChild$(
  m.Scope scope$,
  SliverMultiBoxAdaptorElement target$,
) =>
    target$.updateChild;
Function _SliverMultiBoxAdaptorElement_forgetChild$(
  m.Scope scope$,
  SliverMultiBoxAdaptorElement target$,
) =>
    target$.forgetChild;
Function _SliverMultiBoxAdaptorElement_removeChild$(
  m.Scope scope$,
  SliverMultiBoxAdaptorElement target$,
) =>
    target$.removeChild;
Function _SliverMultiBoxAdaptorElement_estimateMaxScrollOffset$(
  m.Scope scope$,
  SliverMultiBoxAdaptorElement target$,
) =>
    target$.estimateMaxScrollOffset;
Function _SliverMultiBoxAdaptorElement_didStartLayout$(
  m.Scope scope$,
  SliverMultiBoxAdaptorElement target$,
) =>
    target$.didStartLayout;
Function _SliverMultiBoxAdaptorElement_didFinishLayout$(
  m.Scope scope$,
  SliverMultiBoxAdaptorElement target$,
) =>
    target$.didFinishLayout;
Function _SliverMultiBoxAdaptorElement_debugAssertChildListLocked$(
  m.Scope scope$,
  SliverMultiBoxAdaptorElement target$,
) =>
    target$.debugAssertChildListLocked;
Function _SliverMultiBoxAdaptorElement_didAdoptChild$(
  m.Scope scope$,
  SliverMultiBoxAdaptorElement target$,
) =>
    target$.didAdoptChild;
Function _SliverMultiBoxAdaptorElement_setDidUnderflow$(
  m.Scope scope$,
  SliverMultiBoxAdaptorElement target$,
) =>
    target$.setDidUnderflow;
Function _SliverMultiBoxAdaptorElement_insertRenderObjectChild$(
  m.Scope scope$,
  SliverMultiBoxAdaptorElement target$,
) =>
    target$.insertRenderObjectChild;
Function _SliverMultiBoxAdaptorElement_moveRenderObjectChild$(
  m.Scope scope$,
  SliverMultiBoxAdaptorElement target$,
) =>
    target$.moveRenderObjectChild;
Function _SliverMultiBoxAdaptorElement_removeRenderObjectChild$(
  m.Scope scope$,
  SliverMultiBoxAdaptorElement target$,
) =>
    target$.removeRenderObjectChild;
Function _SliverMultiBoxAdaptorElement_visitChildren$(
  m.Scope scope$,
  SliverMultiBoxAdaptorElement target$,
) =>
    (m.FunctionPointer visitor) {
      void visitorProxy(Element visitor_element$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            visitor,
            [visitor_element$],
            {},
          );
      target$.visitChildren(visitorProxy);
    };
Function _SliverMultiBoxAdaptorElement_debugVisitOnstageChildren$(
  m.Scope scope$,
  SliverMultiBoxAdaptorElement target$,
) =>
    (m.FunctionPointer visitor) {
      void visitorProxy(Element visitor_element$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            visitor,
            [visitor_element$],
            {},
          );
      target$.debugVisitOnstageChildren(visitorProxy);
    };
Function SliverOpacity_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverOpacity;
Function SliverOpacity_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverOpacity;
Function _SliverOpacity_opacity$(
  m.Scope scope$,
  SliverOpacity target$,
) =>
    () {
      return target$.opacity;
    };
Function _SliverOpacity_alwaysIncludeSemantics$(
  m.Scope scope$,
  SliverOpacity target$,
) =>
    () {
      return target$.alwaysIncludeSemantics;
    };
Function _SliverOpacity__$(m.Scope scope$) => ({
      Key? key,
      required double opacity,
      bool? alwaysIncludeSemantics,
      Widget? sliver,
    }) {
      return SliverOpacity(
        alwaysIncludeSemantics: alwaysIncludeSemantics ?? false,
        key: key,
        opacity: opacity,
        sliver: sliver,
      );
    };
Function _SliverOpacity_createRenderObject$(
  m.Scope scope$,
  SliverOpacity target$,
) =>
    target$.createRenderObject;
Function _SliverOpacity_updateRenderObject$(
  m.Scope scope$,
  SliverOpacity target$,
) =>
    target$.updateRenderObject;
Function _SliverOpacity_debugFillProperties$(
  m.Scope scope$,
  SliverOpacity target$,
) =>
    target$.debugFillProperties;
Function SliverIgnorePointer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverIgnorePointer;
Function SliverIgnorePointer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverIgnorePointer;
Function _SliverIgnorePointer_ignoring$(
  m.Scope scope$,
  SliverIgnorePointer target$,
) =>
    () {
      return target$.ignoring;
    };
Function _SliverIgnorePointer_ignoringSemantics$(
  m.Scope scope$,
  SliverIgnorePointer target$,
) =>
    () {
      return target$.ignoringSemantics;
    };
Function _SliverIgnorePointer__$(m.Scope scope$) => ({
      Key? key,
      bool? ignoring,
      bool? ignoringSemantics,
      Widget? sliver,
    }) {
      return SliverIgnorePointer(
        ignoring: ignoring ?? true,
        ignoringSemantics: ignoringSemantics,
        key: key,
        sliver: sliver,
      );
    };
Function _SliverIgnorePointer_createRenderObject$(
  m.Scope scope$,
  SliverIgnorePointer target$,
) =>
    target$.createRenderObject;
Function _SliverIgnorePointer_updateRenderObject$(
  m.Scope scope$,
  SliverIgnorePointer target$,
) =>
    target$.updateRenderObject;
Function _SliverIgnorePointer_debugFillProperties$(
  m.Scope scope$,
  SliverIgnorePointer target$,
) =>
    target$.debugFillProperties;
Function SliverOffstage_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverOffstage;
Function SliverOffstage_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverOffstage;
Function _SliverOffstage_offstage$(
  m.Scope scope$,
  SliverOffstage target$,
) =>
    () {
      return target$.offstage;
    };
Function _SliverOffstage__$(m.Scope scope$) => ({
      Key? key,
      bool? offstage,
      Widget? sliver,
    }) {
      return SliverOffstage(
        key: key,
        offstage: offstage ?? true,
        sliver: sliver,
      );
    };
Function _SliverOffstage_createRenderObject$(
  m.Scope scope$,
  SliverOffstage target$,
) =>
    target$.createRenderObject;
Function _SliverOffstage_updateRenderObject$(
  m.Scope scope$,
  SliverOffstage target$,
) =>
    target$.updateRenderObject;
Function _SliverOffstage_debugFillProperties$(
  m.Scope scope$,
  SliverOffstage target$,
) =>
    target$.debugFillProperties;
Function _SliverOffstage_createElement$(
  m.Scope scope$,
  SliverOffstage target$,
) =>
    target$.createElement;
Function KeepAlive_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as KeepAlive;
Function KeepAlive_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is KeepAlive;
Function _KeepAlive_keepAlive$(
  m.Scope scope$,
  KeepAlive target$,
) =>
    () {
      return target$.keepAlive;
    };
Function _KeepAlive_debugTypicalAncestorWidgetClass$(
  m.Scope scope$,
  KeepAlive target$,
) =>
    () {
      return target$.debugTypicalAncestorWidgetClass;
    };
Function _KeepAlive__$(m.Scope scope$) => ({
      Key? key,
      required bool keepAlive,
      required Widget child,
    }) {
      return KeepAlive(
        child: child,
        keepAlive: keepAlive,
        key: key,
      );
    };
Function _KeepAlive_applyParentData$(
  m.Scope scope$,
  KeepAlive target$,
) =>
    target$.applyParentData;
Function _KeepAlive_debugCanApplyOutOfTurn$(
  m.Scope scope$,
  KeepAlive target$,
) =>
    target$.debugCanApplyOutOfTurn;
Function _KeepAlive_debugFillProperties$(
  m.Scope scope$,
  KeepAlive target$,
) =>
    target$.debugFillProperties;
