// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/sliver.dart';
import 'dart:collection' show HashMap, SplayTreeMap;
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/automatic_keep_alive.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/scroll_delegate.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/sliver.dart',
  {},
  {},
  {
    'SliverWithKeepAliveWidget': m.ClassMirror(
      'SliverWithKeepAliveWidget',
      {'createRenderObject': _SliverWithKeepAliveWidget_createRenderObject$},
      {},
    ),
    'SliverMultiBoxAdaptorWidget': m.ClassMirror(
      'SliverMultiBoxAdaptorWidget',
      {
        'delegate': _SliverMultiBoxAdaptorWidget_delegate$,
        'createElement': _SliverMultiBoxAdaptorWidget_createElement$,
        'createRenderObject': _SliverMultiBoxAdaptorWidget_createRenderObject$,
        'estimateMaxScrollOffset':
            _SliverMultiBoxAdaptorWidget_estimateMaxScrollOffset$,
        'debugFillProperties':
            _SliverMultiBoxAdaptorWidget_debugFillProperties$,
      },
      {},
    ),
    'SliverList': m.ClassMirror(
      'SliverList',
      {
        'createElement': _SliverList_createElement$,
        'createRenderObject': _SliverList_createRenderObject$,
      },
      {},
    ),
    'SliverFixedExtentList': m.ClassMirror(
      'SliverFixedExtentList',
      {
        'itemExtent': _SliverFixedExtentList_itemExtent$,
        'createRenderObject': _SliverFixedExtentList_createRenderObject$,
        'updateRenderObject': _SliverFixedExtentList_updateRenderObject$,
      },
      {},
    ),
    'SliverGrid': m.ClassMirror(
      'SliverGrid',
      {
        'gridDelegate': _SliverGrid_gridDelegate$,
        'createRenderObject': _SliverGrid_createRenderObject$,
        'updateRenderObject': _SliverGrid_updateRenderObject$,
        'estimateMaxScrollOffset': _SliverGrid_estimateMaxScrollOffset$,
      },
      {},
    ),
    'SliverMultiBoxAdaptorElement': m.ClassMirror(
      'SliverMultiBoxAdaptorElement',
      {
        'renderObject': _SliverMultiBoxAdaptorElement_renderObject$,
        'estimatedChildCount':
            _SliverMultiBoxAdaptorElement_estimatedChildCount$,
        'childCount': _SliverMultiBoxAdaptorElement_childCount$,
        'update': _SliverMultiBoxAdaptorElement_update$,
        'performRebuild': _SliverMultiBoxAdaptorElement_performRebuild$,
        'createChild': _SliverMultiBoxAdaptorElement_createChild$,
        'updateChild': _SliverMultiBoxAdaptorElement_updateChild$,
        'forgetChild': _SliverMultiBoxAdaptorElement_forgetChild$,
        'removeChild': _SliverMultiBoxAdaptorElement_removeChild$,
        'estimateMaxScrollOffset':
            _SliverMultiBoxAdaptorElement_estimateMaxScrollOffset$,
        'didStartLayout': _SliverMultiBoxAdaptorElement_didStartLayout$,
        'didFinishLayout': _SliverMultiBoxAdaptorElement_didFinishLayout$,
        'debugAssertChildListLocked':
            _SliverMultiBoxAdaptorElement_debugAssertChildListLocked$,
        'didAdoptChild': _SliverMultiBoxAdaptorElement_didAdoptChild$,
        'setDidUnderflow': _SliverMultiBoxAdaptorElement_setDidUnderflow$,
        'insertRenderObjectChild':
            _SliverMultiBoxAdaptorElement_insertRenderObjectChild$,
        'moveRenderObjectChild':
            _SliverMultiBoxAdaptorElement_moveRenderObjectChild$,
        'removeRenderObjectChild':
            _SliverMultiBoxAdaptorElement_removeRenderObjectChild$,
      },
      {},
    ),
    'SliverOpacity': m.ClassMirror(
      'SliverOpacity',
      {
        'opacity': _SliverOpacity_opacity$,
        'alwaysIncludeSemantics': _SliverOpacity_alwaysIncludeSemantics$,
        'createRenderObject': _SliverOpacity_createRenderObject$,
        'updateRenderObject': _SliverOpacity_updateRenderObject$,
        'debugFillProperties': _SliverOpacity_debugFillProperties$,
      },
      {},
    ),
    'SliverIgnorePointer': m.ClassMirror(
      'SliverIgnorePointer',
      {
        'ignoring': _SliverIgnorePointer_ignoring$,
        'ignoringSemantics': _SliverIgnorePointer_ignoringSemantics$,
        'createRenderObject': _SliverIgnorePointer_createRenderObject$,
        'updateRenderObject': _SliverIgnorePointer_updateRenderObject$,
        'debugFillProperties': _SliverIgnorePointer_debugFillProperties$,
      },
      {},
    ),
    'SliverOffstage': m.ClassMirror(
      'SliverOffstage',
      {
        'offstage': _SliverOffstage_offstage$,
        'createRenderObject': _SliverOffstage_createRenderObject$,
        'updateRenderObject': _SliverOffstage_updateRenderObject$,
        'debugFillProperties': _SliverOffstage_debugFillProperties$,
        'createElement': _SliverOffstage_createElement$,
      },
      {},
    ),
    'KeepAlive': m.ClassMirror(
      'KeepAlive',
      {
        'keepAlive': _KeepAlive_keepAlive$,
        'debugTypicalAncestorWidgetClass':
            _KeepAlive_debugTypicalAncestorWidgetClass$,
        'applyParentData': _KeepAlive_applyParentData$,
        'debugCanApplyOutOfTurn': _KeepAlive_debugCanApplyOutOfTurn$,
        'debugFillProperties': _KeepAlive_debugFillProperties$,
      },
      {},
    ),
  },
);
Function _SliverWithKeepAliveWidget_createRenderObject$(
  m.Scope scope,
  SliverWithKeepAliveWidget target,
) =>
    target.createRenderObject;
SliverChildDelegate _SliverMultiBoxAdaptorWidget_delegate$(
    SliverMultiBoxAdaptorWidget target) {
  return target.delegate;
}

Function _SliverMultiBoxAdaptorWidget_createElement$(
  m.Scope scope,
  SliverMultiBoxAdaptorWidget target,
) =>
    target.createElement;
Function _SliverMultiBoxAdaptorWidget_createRenderObject$(
  m.Scope scope,
  SliverMultiBoxAdaptorWidget target,
) =>
    target.createRenderObject;
Function _SliverMultiBoxAdaptorWidget_estimateMaxScrollOffset$(
  m.Scope scope,
  SliverMultiBoxAdaptorWidget target,
) =>
    target.estimateMaxScrollOffset;
Function _SliverMultiBoxAdaptorWidget_debugFillProperties$(
  m.Scope scope,
  SliverMultiBoxAdaptorWidget target,
) =>
    target.debugFillProperties;
Function _SliverList_createElement$(
  m.Scope scope,
  SliverList target,
) =>
    target.createElement;
Function _SliverList_createRenderObject$(
  m.Scope scope,
  SliverList target,
) =>
    target.createRenderObject;
double _SliverFixedExtentList_itemExtent$(SliverFixedExtentList target) {
  return target.itemExtent;
}

Function _SliverFixedExtentList_createRenderObject$(
  m.Scope scope,
  SliverFixedExtentList target,
) =>
    target.createRenderObject;
Function _SliverFixedExtentList_updateRenderObject$(
  m.Scope scope,
  SliverFixedExtentList target,
) =>
    target.updateRenderObject;
SliverGridDelegate _SliverGrid_gridDelegate$(SliverGrid target) {
  return target.gridDelegate;
}

Function _SliverGrid_createRenderObject$(
  m.Scope scope,
  SliverGrid target,
) =>
    target.createRenderObject;
Function _SliverGrid_updateRenderObject$(
  m.Scope scope,
  SliverGrid target,
) =>
    target.updateRenderObject;
Function _SliverGrid_estimateMaxScrollOffset$(
  m.Scope scope,
  SliverGrid target,
) =>
    target.estimateMaxScrollOffset;
RenderSliverMultiBoxAdaptor _SliverMultiBoxAdaptorElement_renderObject$(
    SliverMultiBoxAdaptorElement target) {
  return target.renderObject;
}

int? _SliverMultiBoxAdaptorElement_estimatedChildCount$(
    SliverMultiBoxAdaptorElement target) {
  return target.estimatedChildCount;
}

int _SliverMultiBoxAdaptorElement_childCount$(
    SliverMultiBoxAdaptorElement target) {
  return target.childCount;
}

Function _SliverMultiBoxAdaptorElement_update$(
  m.Scope scope,
  SliverMultiBoxAdaptorElement target,
) =>
    target.update;
Function _SliverMultiBoxAdaptorElement_performRebuild$(
  m.Scope scope,
  SliverMultiBoxAdaptorElement target,
) =>
    target.performRebuild;
Function _SliverMultiBoxAdaptorElement_createChild$(
  m.Scope scope,
  SliverMultiBoxAdaptorElement target,
) =>
    target.createChild;
Function _SliverMultiBoxAdaptorElement_updateChild$(
  m.Scope scope,
  SliverMultiBoxAdaptorElement target,
) =>
    target.updateChild;
Function _SliverMultiBoxAdaptorElement_forgetChild$(
  m.Scope scope,
  SliverMultiBoxAdaptorElement target,
) =>
    target.forgetChild;
Function _SliverMultiBoxAdaptorElement_removeChild$(
  m.Scope scope,
  SliverMultiBoxAdaptorElement target,
) =>
    target.removeChild;
Function _SliverMultiBoxAdaptorElement_estimateMaxScrollOffset$(
  m.Scope scope,
  SliverMultiBoxAdaptorElement target,
) =>
    target.estimateMaxScrollOffset;
Function _SliverMultiBoxAdaptorElement_didStartLayout$(
  m.Scope scope,
  SliverMultiBoxAdaptorElement target,
) =>
    target.didStartLayout;
Function _SliverMultiBoxAdaptorElement_didFinishLayout$(
  m.Scope scope,
  SliverMultiBoxAdaptorElement target,
) =>
    target.didFinishLayout;
Function _SliverMultiBoxAdaptorElement_debugAssertChildListLocked$(
  m.Scope scope,
  SliverMultiBoxAdaptorElement target,
) =>
    target.debugAssertChildListLocked;
Function _SliverMultiBoxAdaptorElement_didAdoptChild$(
  m.Scope scope,
  SliverMultiBoxAdaptorElement target,
) =>
    target.didAdoptChild;
Function _SliverMultiBoxAdaptorElement_setDidUnderflow$(
  m.Scope scope,
  SliverMultiBoxAdaptorElement target,
) =>
    target.setDidUnderflow;
Function _SliverMultiBoxAdaptorElement_insertRenderObjectChild$(
  m.Scope scope,
  SliverMultiBoxAdaptorElement target,
) =>
    target.insertRenderObjectChild;
Function _SliverMultiBoxAdaptorElement_moveRenderObjectChild$(
  m.Scope scope,
  SliverMultiBoxAdaptorElement target,
) =>
    target.moveRenderObjectChild;
Function _SliverMultiBoxAdaptorElement_removeRenderObjectChild$(
  m.Scope scope,
  SliverMultiBoxAdaptorElement target,
) =>
    target.removeRenderObjectChild;
double _SliverOpacity_opacity$(SliverOpacity target) {
  return target.opacity;
}

bool _SliverOpacity_alwaysIncludeSemantics$(SliverOpacity target) {
  return target.alwaysIncludeSemantics;
}

Function _SliverOpacity_createRenderObject$(
  m.Scope scope,
  SliverOpacity target,
) =>
    target.createRenderObject;
Function _SliverOpacity_updateRenderObject$(
  m.Scope scope,
  SliverOpacity target,
) =>
    target.updateRenderObject;
Function _SliverOpacity_debugFillProperties$(
  m.Scope scope,
  SliverOpacity target,
) =>
    target.debugFillProperties;
bool _SliverIgnorePointer_ignoring$(SliverIgnorePointer target) {
  return target.ignoring;
}

bool? _SliverIgnorePointer_ignoringSemantics$(SliverIgnorePointer target) {
  return target.ignoringSemantics;
}

Function _SliverIgnorePointer_createRenderObject$(
  m.Scope scope,
  SliverIgnorePointer target,
) =>
    target.createRenderObject;
Function _SliverIgnorePointer_updateRenderObject$(
  m.Scope scope,
  SliverIgnorePointer target,
) =>
    target.updateRenderObject;
Function _SliverIgnorePointer_debugFillProperties$(
  m.Scope scope,
  SliverIgnorePointer target,
) =>
    target.debugFillProperties;
bool _SliverOffstage_offstage$(SliverOffstage target) {
  return target.offstage;
}

Function _SliverOffstage_createRenderObject$(
  m.Scope scope,
  SliverOffstage target,
) =>
    target.createRenderObject;
Function _SliverOffstage_updateRenderObject$(
  m.Scope scope,
  SliverOffstage target,
) =>
    target.updateRenderObject;
Function _SliverOffstage_debugFillProperties$(
  m.Scope scope,
  SliverOffstage target,
) =>
    target.debugFillProperties;
Function _SliverOffstage_createElement$(
  m.Scope scope,
  SliverOffstage target,
) =>
    target.createElement;
bool _KeepAlive_keepAlive$(KeepAlive target) {
  return target.keepAlive;
}

Type _KeepAlive_debugTypicalAncestorWidgetClass$(KeepAlive target) {
  return target.debugTypicalAncestorWidgetClass;
}

Function _KeepAlive_applyParentData$(
  m.Scope scope,
  KeepAlive target,
) =>
    target.applyParentData;
Function _KeepAlive_debugCanApplyOutOfTurn$(
  m.Scope scope,
  KeepAlive target,
) =>
    target.debugCanApplyOutOfTurn;
Function _KeepAlive_debugFillProperties$(
  m.Scope scope,
  KeepAlive target,
) =>
    target.debugFillProperties;
