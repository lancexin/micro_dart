// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/table.dart';
import 'dart:collection';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/rendering/object.dart';
import 'package:flutter/src/rendering/table_border.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/table.dart',
  {
    'TableCellVerticalAlignment.top': _TableCellVerticalAlignment_top$,
    'TableCellVerticalAlignment.middle': _TableCellVerticalAlignment_middle$,
    'TableCellVerticalAlignment.bottom': _TableCellVerticalAlignment_bottom$,
    'TableCellVerticalAlignment.baseline':
        _TableCellVerticalAlignment_baseline$,
    'TableCellVerticalAlignment.fill': _TableCellVerticalAlignment_fill$,
    'TableCellVerticalAlignment.values': _TableCellVerticalAlignment_values$,
  },
  {},
  {
    'TableCellParentData': m.ClassMirror(
      'TableCellParentData',
      {
        'verticalAlignment': _TableCellParentData_verticalAlignment$,
        'x': _TableCellParentData_x$,
        'y': _TableCellParentData_y$,
        'toString': _TableCellParentData_toString$,
      },
      {
        'verticalAlignment': _TableCellParentData_verticalAlignment_set$,
        'x': _TableCellParentData_x_set$,
        'y': _TableCellParentData_y_set$,
      },
    ),
    'TableColumnWidth': m.ClassMirror(
      'TableColumnWidth',
      {
        'minIntrinsicWidth': _TableColumnWidth_minIntrinsicWidth$,
        'maxIntrinsicWidth': _TableColumnWidth_maxIntrinsicWidth$,
        'flex': _TableColumnWidth_flex$,
        'toString': _TableColumnWidth_toString$,
      },
      {},
    ),
    'IntrinsicColumnWidth': m.ClassMirror(
      'IntrinsicColumnWidth',
      {
        'minIntrinsicWidth': _IntrinsicColumnWidth_minIntrinsicWidth$,
        'maxIntrinsicWidth': _IntrinsicColumnWidth_maxIntrinsicWidth$,
        'flex': _IntrinsicColumnWidth_flex$,
        'toString': _IntrinsicColumnWidth_toString$,
      },
      {},
    ),
    'FixedColumnWidth': m.ClassMirror(
      'FixedColumnWidth',
      {
        'value': _FixedColumnWidth_value$,
        'minIntrinsicWidth': _FixedColumnWidth_minIntrinsicWidth$,
        'maxIntrinsicWidth': _FixedColumnWidth_maxIntrinsicWidth$,
        'toString': _FixedColumnWidth_toString$,
      },
      {},
    ),
    'FractionColumnWidth': m.ClassMirror(
      'FractionColumnWidth',
      {
        'value': _FractionColumnWidth_value$,
        'minIntrinsicWidth': _FractionColumnWidth_minIntrinsicWidth$,
        'maxIntrinsicWidth': _FractionColumnWidth_maxIntrinsicWidth$,
        'toString': _FractionColumnWidth_toString$,
      },
      {},
    ),
    'FlexColumnWidth': m.ClassMirror(
      'FlexColumnWidth',
      {
        'value': _FlexColumnWidth_value$,
        'minIntrinsicWidth': _FlexColumnWidth_minIntrinsicWidth$,
        'maxIntrinsicWidth': _FlexColumnWidth_maxIntrinsicWidth$,
        'flex': _FlexColumnWidth_flex$,
        'toString': _FlexColumnWidth_toString$,
      },
      {},
    ),
    'MaxColumnWidth': m.ClassMirror(
      'MaxColumnWidth',
      {
        'a': _MaxColumnWidth_a$,
        'b': _MaxColumnWidth_b$,
        'minIntrinsicWidth': _MaxColumnWidth_minIntrinsicWidth$,
        'maxIntrinsicWidth': _MaxColumnWidth_maxIntrinsicWidth$,
        'flex': _MaxColumnWidth_flex$,
        'toString': _MaxColumnWidth_toString$,
      },
      {},
    ),
    'MinColumnWidth': m.ClassMirror(
      'MinColumnWidth',
      {
        'a': _MinColumnWidth_a$,
        'b': _MinColumnWidth_b$,
        'minIntrinsicWidth': _MinColumnWidth_minIntrinsicWidth$,
        'maxIntrinsicWidth': _MinColumnWidth_maxIntrinsicWidth$,
        'flex': _MinColumnWidth_flex$,
        'toString': _MinColumnWidth_toString$,
      },
      {},
    ),
    'RenderTable': m.ClassMirror(
      'RenderTable',
      {
        'columns': _RenderTable_columns$,
        'rows': _RenderTable_rows$,
        'columnWidths': _RenderTable_columnWidths$,
        'defaultColumnWidth': _RenderTable_defaultColumnWidth$,
        'textDirection': _RenderTable_textDirection$,
        'border': _RenderTable_border$,
        'rowDecorations': _RenderTable_rowDecorations$,
        'configuration': _RenderTable_configuration$,
        'defaultVerticalAlignment': _RenderTable_defaultVerticalAlignment$,
        'textBaseline': _RenderTable_textBaseline$,
        'setColumnWidth': _RenderTable_setColumnWidth$,
        'setupParentData': _RenderTable_setupParentData$,
        'setFlatChildren': _RenderTable_setFlatChildren$,
        'setChildren': _RenderTable_setChildren$,
        'addRow': _RenderTable_addRow$,
        'setChild': _RenderTable_setChild$,
        'attach': _RenderTable_attach$,
        'detach': _RenderTable_detach$,
        'computeMinIntrinsicWidth': _RenderTable_computeMinIntrinsicWidth$,
        'computeMaxIntrinsicWidth': _RenderTable_computeMaxIntrinsicWidth$,
        'computeMinIntrinsicHeight': _RenderTable_computeMinIntrinsicHeight$,
        'computeMaxIntrinsicHeight': _RenderTable_computeMaxIntrinsicHeight$,
        'computeDistanceToActualBaseline':
            _RenderTable_computeDistanceToActualBaseline$,
        'column': _RenderTable_column$,
        'row': _RenderTable_row$,
        'getRowBox': _RenderTable_getRowBox$,
        'computeDryLayout': _RenderTable_computeDryLayout$,
        'performLayout': _RenderTable_performLayout$,
        'hitTestChildren': _RenderTable_hitTestChildren$,
        'paint': _RenderTable_paint$,
        'debugFillProperties': _RenderTable_debugFillProperties$,
        'debugDescribeChildren': _RenderTable_debugDescribeChildren$,
      },
      {
        'columns': _RenderTable_columns_set$,
        'rows': _RenderTable_rows_set$,
        'columnWidths': _RenderTable_columnWidths_set$,
        'defaultColumnWidth': _RenderTable_defaultColumnWidth_set$,
        'textDirection': _RenderTable_textDirection_set$,
        'border': _RenderTable_border_set$,
        'rowDecorations': _RenderTable_rowDecorations_set$,
        'configuration': _RenderTable_configuration_set$,
        'defaultVerticalAlignment': _RenderTable_defaultVerticalAlignment_set$,
        'textBaseline': _RenderTable_textBaseline_set$,
      },
    ),
    'TableCellVerticalAlignment': m.ClassMirror(
      'TableCellVerticalAlignment',
      {},
      {},
    ),
  },
);
TableCellVerticalAlignment? _TableCellParentData_verticalAlignment$(
    TableCellParentData target) {
  return target.verticalAlignment;
}

void _TableCellParentData_verticalAlignment_set$(
  TableCellParentData target,
  TableCellVerticalAlignment? other,
) {
  target.verticalAlignment = other;
}

int? _TableCellParentData_x$(TableCellParentData target) {
  return target.x;
}

void _TableCellParentData_x_set$(
  TableCellParentData target,
  int? other,
) {
  target.x = other;
}

int? _TableCellParentData_y$(TableCellParentData target) {
  return target.y;
}

void _TableCellParentData_y_set$(
  TableCellParentData target,
  int? other,
) {
  target.y = other;
}

Function _TableCellParentData_toString$(
  m.Scope scope,
  TableCellParentData target,
) =>
    target.toString;
Function _TableColumnWidth_minIntrinsicWidth$(
  m.Scope scope,
  TableColumnWidth target,
) =>
    target.minIntrinsicWidth;
Function _TableColumnWidth_maxIntrinsicWidth$(
  m.Scope scope,
  TableColumnWidth target,
) =>
    target.maxIntrinsicWidth;
Function _TableColumnWidth_flex$(
  m.Scope scope,
  TableColumnWidth target,
) =>
    target.flex;
Function _TableColumnWidth_toString$(
  m.Scope scope,
  TableColumnWidth target,
) =>
    target.toString;
Function _IntrinsicColumnWidth_minIntrinsicWidth$(
  m.Scope scope,
  IntrinsicColumnWidth target,
) =>
    target.minIntrinsicWidth;
Function _IntrinsicColumnWidth_maxIntrinsicWidth$(
  m.Scope scope,
  IntrinsicColumnWidth target,
) =>
    target.maxIntrinsicWidth;
Function _IntrinsicColumnWidth_flex$(
  m.Scope scope,
  IntrinsicColumnWidth target,
) =>
    target.flex;
Function _IntrinsicColumnWidth_toString$(
  m.Scope scope,
  IntrinsicColumnWidth target,
) =>
    target.toString;
double _FixedColumnWidth_value$(FixedColumnWidth target) {
  return target.value;
}

Function _FixedColumnWidth_minIntrinsicWidth$(
  m.Scope scope,
  FixedColumnWidth target,
) =>
    target.minIntrinsicWidth;
Function _FixedColumnWidth_maxIntrinsicWidth$(
  m.Scope scope,
  FixedColumnWidth target,
) =>
    target.maxIntrinsicWidth;
Function _FixedColumnWidth_toString$(
  m.Scope scope,
  FixedColumnWidth target,
) =>
    target.toString;
double _FractionColumnWidth_value$(FractionColumnWidth target) {
  return target.value;
}

Function _FractionColumnWidth_minIntrinsicWidth$(
  m.Scope scope,
  FractionColumnWidth target,
) =>
    target.minIntrinsicWidth;
Function _FractionColumnWidth_maxIntrinsicWidth$(
  m.Scope scope,
  FractionColumnWidth target,
) =>
    target.maxIntrinsicWidth;
Function _FractionColumnWidth_toString$(
  m.Scope scope,
  FractionColumnWidth target,
) =>
    target.toString;
double _FlexColumnWidth_value$(FlexColumnWidth target) {
  return target.value;
}

Function _FlexColumnWidth_minIntrinsicWidth$(
  m.Scope scope,
  FlexColumnWidth target,
) =>
    target.minIntrinsicWidth;
Function _FlexColumnWidth_maxIntrinsicWidth$(
  m.Scope scope,
  FlexColumnWidth target,
) =>
    target.maxIntrinsicWidth;
Function _FlexColumnWidth_flex$(
  m.Scope scope,
  FlexColumnWidth target,
) =>
    target.flex;
Function _FlexColumnWidth_toString$(
  m.Scope scope,
  FlexColumnWidth target,
) =>
    target.toString;
TableColumnWidth _MaxColumnWidth_a$(MaxColumnWidth target) {
  return target.a;
}

TableColumnWidth _MaxColumnWidth_b$(MaxColumnWidth target) {
  return target.b;
}

Function _MaxColumnWidth_minIntrinsicWidth$(
  m.Scope scope,
  MaxColumnWidth target,
) =>
    target.minIntrinsicWidth;
Function _MaxColumnWidth_maxIntrinsicWidth$(
  m.Scope scope,
  MaxColumnWidth target,
) =>
    target.maxIntrinsicWidth;
Function _MaxColumnWidth_flex$(
  m.Scope scope,
  MaxColumnWidth target,
) =>
    target.flex;
Function _MaxColumnWidth_toString$(
  m.Scope scope,
  MaxColumnWidth target,
) =>
    target.toString;
TableColumnWidth _MinColumnWidth_a$(MinColumnWidth target) {
  return target.a;
}

TableColumnWidth _MinColumnWidth_b$(MinColumnWidth target) {
  return target.b;
}

Function _MinColumnWidth_minIntrinsicWidth$(
  m.Scope scope,
  MinColumnWidth target,
) =>
    target.minIntrinsicWidth;
Function _MinColumnWidth_maxIntrinsicWidth$(
  m.Scope scope,
  MinColumnWidth target,
) =>
    target.maxIntrinsicWidth;
Function _MinColumnWidth_flex$(
  m.Scope scope,
  MinColumnWidth target,
) =>
    target.flex;
Function _MinColumnWidth_toString$(
  m.Scope scope,
  MinColumnWidth target,
) =>
    target.toString;
int _RenderTable_columns$(RenderTable target) {
  return target.columns;
}

void _RenderTable_columns_set$(
  RenderTable target,
  int other,
) {
  target.columns = other;
}

int _RenderTable_rows$(RenderTable target) {
  return target.rows;
}

void _RenderTable_rows_set$(
  RenderTable target,
  int other,
) {
  target.rows = other;
}

Map<int, TableColumnWidth>? _RenderTable_columnWidths$(RenderTable target) {
  return target.columnWidths;
}

void _RenderTable_columnWidths_set$(
  RenderTable target,
  Map<int, TableColumnWidth>? other,
) {
  target.columnWidths = other;
}

TableColumnWidth _RenderTable_defaultColumnWidth$(RenderTable target) {
  return target.defaultColumnWidth;
}

void _RenderTable_defaultColumnWidth_set$(
  RenderTable target,
  TableColumnWidth other,
) {
  target.defaultColumnWidth = other;
}

TextDirection _RenderTable_textDirection$(RenderTable target) {
  return target.textDirection;
}

void _RenderTable_textDirection_set$(
  RenderTable target,
  TextDirection other,
) {
  target.textDirection = other;
}

TableBorder? _RenderTable_border$(RenderTable target) {
  return target.border;
}

void _RenderTable_border_set$(
  RenderTable target,
  TableBorder? other,
) {
  target.border = other;
}

List<Decoration> _RenderTable_rowDecorations$(RenderTable target) {
  return target.rowDecorations;
}

void _RenderTable_rowDecorations_set$(
  RenderTable target,
  List<Decoration?>? other,
) {
  target.rowDecorations = other;
}

ImageConfiguration _RenderTable_configuration$(RenderTable target) {
  return target.configuration;
}

void _RenderTable_configuration_set$(
  RenderTable target,
  ImageConfiguration other,
) {
  target.configuration = other;
}

TableCellVerticalAlignment _RenderTable_defaultVerticalAlignment$(
    RenderTable target) {
  return target.defaultVerticalAlignment;
}

void _RenderTable_defaultVerticalAlignment_set$(
  RenderTable target,
  TableCellVerticalAlignment other,
) {
  target.defaultVerticalAlignment = other;
}

TextBaseline? _RenderTable_textBaseline$(RenderTable target) {
  return target.textBaseline;
}

void _RenderTable_textBaseline_set$(
  RenderTable target,
  TextBaseline? other,
) {
  target.textBaseline = other;
}

Function _RenderTable_setColumnWidth$(
  m.Scope scope,
  RenderTable target,
) =>
    target.setColumnWidth;
Function _RenderTable_setupParentData$(
  m.Scope scope,
  RenderTable target,
) =>
    target.setupParentData;
Function _RenderTable_setFlatChildren$(
  m.Scope scope,
  RenderTable target,
) =>
    target.setFlatChildren;
Function _RenderTable_setChildren$(
  m.Scope scope,
  RenderTable target,
) =>
    target.setChildren;
Function _RenderTable_addRow$(
  m.Scope scope,
  RenderTable target,
) =>
    target.addRow;
Function _RenderTable_setChild$(
  m.Scope scope,
  RenderTable target,
) =>
    target.setChild;
Function _RenderTable_attach$(
  m.Scope scope,
  RenderTable target,
) =>
    target.attach;
Function _RenderTable_detach$(
  m.Scope scope,
  RenderTable target,
) =>
    target.detach;
Function _RenderTable_computeMinIntrinsicWidth$(
  m.Scope scope,
  RenderTable target,
) =>
    target.computeMinIntrinsicWidth;
Function _RenderTable_computeMaxIntrinsicWidth$(
  m.Scope scope,
  RenderTable target,
) =>
    target.computeMaxIntrinsicWidth;
Function _RenderTable_computeMinIntrinsicHeight$(
  m.Scope scope,
  RenderTable target,
) =>
    target.computeMinIntrinsicHeight;
Function _RenderTable_computeMaxIntrinsicHeight$(
  m.Scope scope,
  RenderTable target,
) =>
    target.computeMaxIntrinsicHeight;
Function _RenderTable_computeDistanceToActualBaseline$(
  m.Scope scope,
  RenderTable target,
) =>
    target.computeDistanceToActualBaseline;
Function _RenderTable_column$(
  m.Scope scope,
  RenderTable target,
) =>
    target.column;
Function _RenderTable_row$(
  m.Scope scope,
  RenderTable target,
) =>
    target.row;
Function _RenderTable_getRowBox$(
  m.Scope scope,
  RenderTable target,
) =>
    target.getRowBox;
Function _RenderTable_computeDryLayout$(
  m.Scope scope,
  RenderTable target,
) =>
    target.computeDryLayout;
Function _RenderTable_performLayout$(
  m.Scope scope,
  RenderTable target,
) =>
    target.performLayout;
Function _RenderTable_hitTestChildren$(
  m.Scope scope,
  RenderTable target,
) =>
    target.hitTestChildren;
Function _RenderTable_paint$(
  m.Scope scope,
  RenderTable target,
) =>
    target.paint;
Function _RenderTable_debugFillProperties$(
  m.Scope scope,
  RenderTable target,
) =>
    target.debugFillProperties;
Function _RenderTable_debugDescribeChildren$(
  m.Scope scope,
  RenderTable target,
) =>
    target.debugDescribeChildren;
TableCellVerticalAlignment _TableCellVerticalAlignment_top$() {
  return TableCellVerticalAlignment.top;
}

TableCellVerticalAlignment _TableCellVerticalAlignment_middle$() {
  return TableCellVerticalAlignment.middle;
}

TableCellVerticalAlignment _TableCellVerticalAlignment_bottom$() {
  return TableCellVerticalAlignment.bottom;
}

TableCellVerticalAlignment _TableCellVerticalAlignment_baseline$() {
  return TableCellVerticalAlignment.baseline;
}

TableCellVerticalAlignment _TableCellVerticalAlignment_fill$() {
  return TableCellVerticalAlignment.fill;
}

List<TableCellVerticalAlignment> _TableCellVerticalAlignment_values$() {
  return TableCellVerticalAlignment.values;
}
