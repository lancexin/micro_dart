// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/table.dart';
import 'dart:collection';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/rendering/object.dart';
import 'package:flutter/src/rendering/table_border.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/table.dart',
  {
    'TableCellParentData.': _TableCellParentData__$,
    'IntrinsicColumnWidth.': _IntrinsicColumnWidth__$,
    'FixedColumnWidth.': _FixedColumnWidth__$,
    'FractionColumnWidth.': _FractionColumnWidth__$,
    'FlexColumnWidth.': _FlexColumnWidth__$,
    'MaxColumnWidth.': _MaxColumnWidth__$,
    'MinColumnWidth.': _MinColumnWidth__$,
    'RenderTable.': _RenderTable__$,
    'TableCellVerticalAlignment.top': _TableCellVerticalAlignment_top$,
    'TableCellVerticalAlignment.middle': _TableCellVerticalAlignment_middle$,
    'TableCellVerticalAlignment.bottom': _TableCellVerticalAlignment_bottom$,
    'TableCellVerticalAlignment.baseline':
        _TableCellVerticalAlignment_baseline$,
    'TableCellVerticalAlignment.fill': _TableCellVerticalAlignment_fill$,
    'TableCellVerticalAlignment.values': _TableCellVerticalAlignment_values$,
  },
  {},
  {
    'TableCellParentData': m.ClassMirror(
      'TableCellParentData',
      {
        '#as': TableCellParentData_as$,
        '#is': TableCellParentData_is$,
        'verticalAlignment': _TableCellParentData_verticalAlignment$,
        'x': _TableCellParentData_x$,
        'y': _TableCellParentData_y$,
        'toString': _TableCellParentData_toString$,
      },
      {
        'verticalAlignment': _TableCellParentData_verticalAlignment_set$,
        'x': _TableCellParentData_x_set$,
        'y': _TableCellParentData_y_set$,
      },
    ),
    'TableColumnWidth': m.ClassMirror(
      'TableColumnWidth',
      {
        '#as': TableColumnWidth_as$,
        '#is': TableColumnWidth_is$,
        'minIntrinsicWidth': _TableColumnWidth_minIntrinsicWidth$,
        'maxIntrinsicWidth': _TableColumnWidth_maxIntrinsicWidth$,
        'flex': _TableColumnWidth_flex$,
        'toString': _TableColumnWidth_toString$,
      },
      {},
    ),
    'IntrinsicColumnWidth': m.ClassMirror(
      'IntrinsicColumnWidth',
      {
        '#as': IntrinsicColumnWidth_as$,
        '#is': IntrinsicColumnWidth_is$,
        'minIntrinsicWidth': _IntrinsicColumnWidth_minIntrinsicWidth$,
        'maxIntrinsicWidth': _IntrinsicColumnWidth_maxIntrinsicWidth$,
        'flex': _IntrinsicColumnWidth_flex$,
        'toString': _IntrinsicColumnWidth_toString$,
      },
      {},
    ),
    'FixedColumnWidth': m.ClassMirror(
      'FixedColumnWidth',
      {
        '#as': FixedColumnWidth_as$,
        '#is': FixedColumnWidth_is$,
        'value': _FixedColumnWidth_value$,
        'minIntrinsicWidth': _FixedColumnWidth_minIntrinsicWidth$,
        'maxIntrinsicWidth': _FixedColumnWidth_maxIntrinsicWidth$,
        'toString': _FixedColumnWidth_toString$,
      },
      {},
    ),
    'FractionColumnWidth': m.ClassMirror(
      'FractionColumnWidth',
      {
        '#as': FractionColumnWidth_as$,
        '#is': FractionColumnWidth_is$,
        'value': _FractionColumnWidth_value$,
        'minIntrinsicWidth': _FractionColumnWidth_minIntrinsicWidth$,
        'maxIntrinsicWidth': _FractionColumnWidth_maxIntrinsicWidth$,
        'toString': _FractionColumnWidth_toString$,
      },
      {},
    ),
    'FlexColumnWidth': m.ClassMirror(
      'FlexColumnWidth',
      {
        '#as': FlexColumnWidth_as$,
        '#is': FlexColumnWidth_is$,
        'value': _FlexColumnWidth_value$,
        'minIntrinsicWidth': _FlexColumnWidth_minIntrinsicWidth$,
        'maxIntrinsicWidth': _FlexColumnWidth_maxIntrinsicWidth$,
        'flex': _FlexColumnWidth_flex$,
        'toString': _FlexColumnWidth_toString$,
      },
      {},
    ),
    'MaxColumnWidth': m.ClassMirror(
      'MaxColumnWidth',
      {
        '#as': MaxColumnWidth_as$,
        '#is': MaxColumnWidth_is$,
        'a': _MaxColumnWidth_a$,
        'b': _MaxColumnWidth_b$,
        'minIntrinsicWidth': _MaxColumnWidth_minIntrinsicWidth$,
        'maxIntrinsicWidth': _MaxColumnWidth_maxIntrinsicWidth$,
        'flex': _MaxColumnWidth_flex$,
        'toString': _MaxColumnWidth_toString$,
      },
      {},
    ),
    'MinColumnWidth': m.ClassMirror(
      'MinColumnWidth',
      {
        '#as': MinColumnWidth_as$,
        '#is': MinColumnWidth_is$,
        'a': _MinColumnWidth_a$,
        'b': _MinColumnWidth_b$,
        'minIntrinsicWidth': _MinColumnWidth_minIntrinsicWidth$,
        'maxIntrinsicWidth': _MinColumnWidth_maxIntrinsicWidth$,
        'flex': _MinColumnWidth_flex$,
        'toString': _MinColumnWidth_toString$,
      },
      {},
    ),
    'RenderTable': m.ClassMirror(
      'RenderTable',
      {
        '#as': RenderTable_as$,
        '#is': RenderTable_is$,
        'columns': _RenderTable_columns$,
        'rows': _RenderTable_rows$,
        'columnWidths': _RenderTable_columnWidths$,
        'defaultColumnWidth': _RenderTable_defaultColumnWidth$,
        'textDirection': _RenderTable_textDirection$,
        'border': _RenderTable_border$,
        'rowDecorations': _RenderTable_rowDecorations$,
        'configuration': _RenderTable_configuration$,
        'defaultVerticalAlignment': _RenderTable_defaultVerticalAlignment$,
        'textBaseline': _RenderTable_textBaseline$,
        'setColumnWidth': _RenderTable_setColumnWidth$,
        'setupParentData': _RenderTable_setupParentData$,
        'setFlatChildren': _RenderTable_setFlatChildren$,
        'setChildren': _RenderTable_setChildren$,
        'addRow': _RenderTable_addRow$,
        'setChild': _RenderTable_setChild$,
        'attach': _RenderTable_attach$,
        'detach': _RenderTable_detach$,
        'visitChildren': _RenderTable_visitChildren$,
        'computeMinIntrinsicWidth': _RenderTable_computeMinIntrinsicWidth$,
        'computeMaxIntrinsicWidth': _RenderTable_computeMaxIntrinsicWidth$,
        'computeMinIntrinsicHeight': _RenderTable_computeMinIntrinsicHeight$,
        'computeMaxIntrinsicHeight': _RenderTable_computeMaxIntrinsicHeight$,
        'computeDistanceToActualBaseline':
            _RenderTable_computeDistanceToActualBaseline$,
        'column': _RenderTable_column$,
        'row': _RenderTable_row$,
        'getRowBox': _RenderTable_getRowBox$,
        'computeDryLayout': _RenderTable_computeDryLayout$,
        'performLayout': _RenderTable_performLayout$,
        'hitTestChildren': _RenderTable_hitTestChildren$,
        'paint': _RenderTable_paint$,
        'debugFillProperties': _RenderTable_debugFillProperties$,
        'debugDescribeChildren': _RenderTable_debugDescribeChildren$,
      },
      {
        'columns': _RenderTable_columns_set$,
        'rows': _RenderTable_rows_set$,
        'columnWidths': _RenderTable_columnWidths_set$,
        'defaultColumnWidth': _RenderTable_defaultColumnWidth_set$,
        'textDirection': _RenderTable_textDirection_set$,
        'border': _RenderTable_border_set$,
        'rowDecorations': _RenderTable_rowDecorations_set$,
        'configuration': _RenderTable_configuration_set$,
        'defaultVerticalAlignment': _RenderTable_defaultVerticalAlignment_set$,
        'textBaseline': _RenderTable_textBaseline_set$,
      },
    ),
    'TableCellVerticalAlignment': m.ClassMirror(
      'TableCellVerticalAlignment',
      {},
      {},
    ),
  },
);
Function TableCellParentData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TableCellParentData;
Function TableCellParentData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TableCellParentData;
Function _TableCellParentData_verticalAlignment$(
  m.Scope scope$,
  TableCellParentData target$,
) =>
    () {
      return target$.verticalAlignment;
    };
void _TableCellParentData_verticalAlignment_set$(
  m.Scope scope$,
  TableCellParentData target$,
) =>
    (dynamic other$) {
      target$.verticalAlignment = other$;
    };
Function _TableCellParentData_x$(
  m.Scope scope$,
  TableCellParentData target$,
) =>
    () {
      return target$.x;
    };
void _TableCellParentData_x_set$(
  m.Scope scope$,
  TableCellParentData target$,
) =>
    (dynamic other$) {
      target$.x = other$;
    };
Function _TableCellParentData_y$(
  m.Scope scope$,
  TableCellParentData target$,
) =>
    () {
      return target$.y;
    };
void _TableCellParentData_y_set$(
  m.Scope scope$,
  TableCellParentData target$,
) =>
    (dynamic other$) {
      target$.y = other$;
    };
Function _TableCellParentData__$(m.Scope scope$) => () {
      return TableCellParentData();
    };
Function _TableCellParentData_toString$(
  m.Scope scope$,
  TableCellParentData target$,
) =>
    target$.toString;
Function TableColumnWidth_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TableColumnWidth;
Function TableColumnWidth_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TableColumnWidth;
Function _TableColumnWidth_minIntrinsicWidth$(
  m.Scope scope$,
  TableColumnWidth target$,
) =>
    target$.minIntrinsicWidth;
Function _TableColumnWidth_maxIntrinsicWidth$(
  m.Scope scope$,
  TableColumnWidth target$,
) =>
    target$.maxIntrinsicWidth;
Function _TableColumnWidth_flex$(
  m.Scope scope$,
  TableColumnWidth target$,
) =>
    target$.flex;
Function _TableColumnWidth_toString$(
  m.Scope scope$,
  TableColumnWidth target$,
) =>
    target$.toString;
Function IntrinsicColumnWidth_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as IntrinsicColumnWidth;
Function IntrinsicColumnWidth_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is IntrinsicColumnWidth;
Function _IntrinsicColumnWidth__$(m.Scope scope$) => ({double? flex}) {
      return IntrinsicColumnWidth(flex: flex);
    };
Function _IntrinsicColumnWidth_minIntrinsicWidth$(
  m.Scope scope$,
  IntrinsicColumnWidth target$,
) =>
    target$.minIntrinsicWidth;
Function _IntrinsicColumnWidth_maxIntrinsicWidth$(
  m.Scope scope$,
  IntrinsicColumnWidth target$,
) =>
    target$.maxIntrinsicWidth;
Function _IntrinsicColumnWidth_flex$(
  m.Scope scope$,
  IntrinsicColumnWidth target$,
) =>
    target$.flex;
Function _IntrinsicColumnWidth_toString$(
  m.Scope scope$,
  IntrinsicColumnWidth target$,
) =>
    target$.toString;
Function FixedColumnWidth_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FixedColumnWidth;
Function FixedColumnWidth_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FixedColumnWidth;
Function _FixedColumnWidth_value$(
  m.Scope scope$,
  FixedColumnWidth target$,
) =>
    () {
      return target$.value;
    };
Function _FixedColumnWidth__$(m.Scope scope$) => (double value) {
      return FixedColumnWidth(value);
    };
Function _FixedColumnWidth_minIntrinsicWidth$(
  m.Scope scope$,
  FixedColumnWidth target$,
) =>
    target$.minIntrinsicWidth;
Function _FixedColumnWidth_maxIntrinsicWidth$(
  m.Scope scope$,
  FixedColumnWidth target$,
) =>
    target$.maxIntrinsicWidth;
Function _FixedColumnWidth_toString$(
  m.Scope scope$,
  FixedColumnWidth target$,
) =>
    target$.toString;
Function FractionColumnWidth_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FractionColumnWidth;
Function FractionColumnWidth_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FractionColumnWidth;
Function _FractionColumnWidth_value$(
  m.Scope scope$,
  FractionColumnWidth target$,
) =>
    () {
      return target$.value;
    };
Function _FractionColumnWidth__$(m.Scope scope$) => (double value) {
      return FractionColumnWidth(value);
    };
Function _FractionColumnWidth_minIntrinsicWidth$(
  m.Scope scope$,
  FractionColumnWidth target$,
) =>
    target$.minIntrinsicWidth;
Function _FractionColumnWidth_maxIntrinsicWidth$(
  m.Scope scope$,
  FractionColumnWidth target$,
) =>
    target$.maxIntrinsicWidth;
Function _FractionColumnWidth_toString$(
  m.Scope scope$,
  FractionColumnWidth target$,
) =>
    target$.toString;
Function FlexColumnWidth_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FlexColumnWidth;
Function FlexColumnWidth_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FlexColumnWidth;
Function _FlexColumnWidth_value$(
  m.Scope scope$,
  FlexColumnWidth target$,
) =>
    () {
      return target$.value;
    };
Function _FlexColumnWidth__$(m.Scope scope$) => ([double? value]) {
      if (value == null) {
        return FlexColumnWidth();
      }
      return FlexColumnWidth(value!);
    };
Function _FlexColumnWidth_minIntrinsicWidth$(
  m.Scope scope$,
  FlexColumnWidth target$,
) =>
    target$.minIntrinsicWidth;
Function _FlexColumnWidth_maxIntrinsicWidth$(
  m.Scope scope$,
  FlexColumnWidth target$,
) =>
    target$.maxIntrinsicWidth;
Function _FlexColumnWidth_flex$(
  m.Scope scope$,
  FlexColumnWidth target$,
) =>
    target$.flex;
Function _FlexColumnWidth_toString$(
  m.Scope scope$,
  FlexColumnWidth target$,
) =>
    target$.toString;
Function MaxColumnWidth_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MaxColumnWidth;
Function MaxColumnWidth_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MaxColumnWidth;
Function _MaxColumnWidth_a$(
  m.Scope scope$,
  MaxColumnWidth target$,
) =>
    () {
      return target$.a;
    };
Function _MaxColumnWidth_b$(
  m.Scope scope$,
  MaxColumnWidth target$,
) =>
    () {
      return target$.b;
    };
Function _MaxColumnWidth__$(m.Scope scope$) => (
      TableColumnWidth a,
      TableColumnWidth b,
    ) {
      return MaxColumnWidth(
        a,
        b,
      );
    };
Function _MaxColumnWidth_minIntrinsicWidth$(
  m.Scope scope$,
  MaxColumnWidth target$,
) =>
    target$.minIntrinsicWidth;
Function _MaxColumnWidth_maxIntrinsicWidth$(
  m.Scope scope$,
  MaxColumnWidth target$,
) =>
    target$.maxIntrinsicWidth;
Function _MaxColumnWidth_flex$(
  m.Scope scope$,
  MaxColumnWidth target$,
) =>
    target$.flex;
Function _MaxColumnWidth_toString$(
  m.Scope scope$,
  MaxColumnWidth target$,
) =>
    target$.toString;
Function MinColumnWidth_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MinColumnWidth;
Function MinColumnWidth_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MinColumnWidth;
Function _MinColumnWidth_a$(
  m.Scope scope$,
  MinColumnWidth target$,
) =>
    () {
      return target$.a;
    };
Function _MinColumnWidth_b$(
  m.Scope scope$,
  MinColumnWidth target$,
) =>
    () {
      return target$.b;
    };
Function _MinColumnWidth__$(m.Scope scope$) => (
      TableColumnWidth a,
      TableColumnWidth b,
    ) {
      return MinColumnWidth(
        a,
        b,
      );
    };
Function _MinColumnWidth_minIntrinsicWidth$(
  m.Scope scope$,
  MinColumnWidth target$,
) =>
    target$.minIntrinsicWidth;
Function _MinColumnWidth_maxIntrinsicWidth$(
  m.Scope scope$,
  MinColumnWidth target$,
) =>
    target$.maxIntrinsicWidth;
Function _MinColumnWidth_flex$(
  m.Scope scope$,
  MinColumnWidth target$,
) =>
    target$.flex;
Function _MinColumnWidth_toString$(
  m.Scope scope$,
  MinColumnWidth target$,
) =>
    target$.toString;
Function RenderTable_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RenderTable;
Function RenderTable_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RenderTable;
Function _RenderTable_columns$(
  m.Scope scope$,
  RenderTable target$,
) =>
    () {
      return target$.columns;
    };
void _RenderTable_columns_set$(
  m.Scope scope$,
  RenderTable target$,
) =>
    (dynamic other$) {
      target$.columns = other$;
    };
Function _RenderTable_rows$(
  m.Scope scope$,
  RenderTable target$,
) =>
    () {
      return target$.rows;
    };
void _RenderTable_rows_set$(
  m.Scope scope$,
  RenderTable target$,
) =>
    (dynamic other$) {
      target$.rows = other$;
    };
Function _RenderTable_columnWidths$(
  m.Scope scope$,
  RenderTable target$,
) =>
    () {
      return target$.columnWidths;
    };
void _RenderTable_columnWidths_set$(
  m.Scope scope$,
  RenderTable target$,
) =>
    (dynamic other$) {
      target$.columnWidths = other$;
    };
Function _RenderTable_defaultColumnWidth$(
  m.Scope scope$,
  RenderTable target$,
) =>
    () {
      return target$.defaultColumnWidth;
    };
void _RenderTable_defaultColumnWidth_set$(
  m.Scope scope$,
  RenderTable target$,
) =>
    (dynamic other$) {
      target$.defaultColumnWidth = other$;
    };
Function _RenderTable_textDirection$(
  m.Scope scope$,
  RenderTable target$,
) =>
    () {
      return target$.textDirection;
    };
void _RenderTable_textDirection_set$(
  m.Scope scope$,
  RenderTable target$,
) =>
    (dynamic other$) {
      target$.textDirection = other$;
    };
Function _RenderTable_border$(
  m.Scope scope$,
  RenderTable target$,
) =>
    () {
      return target$.border;
    };
void _RenderTable_border_set$(
  m.Scope scope$,
  RenderTable target$,
) =>
    (dynamic other$) {
      target$.border = other$;
    };
Function _RenderTable_rowDecorations$(
  m.Scope scope$,
  RenderTable target$,
) =>
    () {
      return target$.rowDecorations;
    };
void _RenderTable_rowDecorations_set$(
  m.Scope scope$,
  RenderTable target$,
) =>
    (dynamic other$) {
      target$.rowDecorations = other$;
    };
Function _RenderTable_configuration$(
  m.Scope scope$,
  RenderTable target$,
) =>
    () {
      return target$.configuration;
    };
void _RenderTable_configuration_set$(
  m.Scope scope$,
  RenderTable target$,
) =>
    (dynamic other$) {
      target$.configuration = other$;
    };
Function _RenderTable_defaultVerticalAlignment$(
  m.Scope scope$,
  RenderTable target$,
) =>
    () {
      return target$.defaultVerticalAlignment;
    };
void _RenderTable_defaultVerticalAlignment_set$(
  m.Scope scope$,
  RenderTable target$,
) =>
    (dynamic other$) {
      target$.defaultVerticalAlignment = other$;
    };
Function _RenderTable_textBaseline$(
  m.Scope scope$,
  RenderTable target$,
) =>
    () {
      return target$.textBaseline;
    };
void _RenderTable_textBaseline_set$(
  m.Scope scope$,
  RenderTable target$,
) =>
    (dynamic other$) {
      target$.textBaseline = other$;
    };
Function _RenderTable__$(m.Scope scope$) => ({
      int? columns,
      int? rows,
      Map? columnWidths,
      TableColumnWidth? defaultColumnWidth,
      required TextDirection textDirection,
      TableBorder? border,
      List? rowDecorations,
      ImageConfiguration? configuration,
      TableCellVerticalAlignment? defaultVerticalAlignment,
      TextBaseline? textBaseline,
      List? children,
    }) {
      return RenderTable(
        border: border,
        children: children == null ? null : List.from(children),
        columnWidths: columnWidths == null ? null : Map.from(columnWidths),
        columns: columns,
        configuration: configuration ?? ImageConfiguration.empty,
        defaultColumnWidth: defaultColumnWidth ?? const FlexColumnWidth(),
        defaultVerticalAlignment:
            defaultVerticalAlignment ?? TableCellVerticalAlignment.top,
        rowDecorations:
            rowDecorations == null ? null : List.from(rowDecorations),
        rows: rows,
        textBaseline: textBaseline,
        textDirection: textDirection,
      );
    };
Function _RenderTable_setColumnWidth$(
  m.Scope scope$,
  RenderTable target$,
) =>
    target$.setColumnWidth;
Function _RenderTable_setupParentData$(
  m.Scope scope$,
  RenderTable target$,
) =>
    target$.setupParentData;
Function _RenderTable_setFlatChildren$(
  m.Scope scope$,
  RenderTable target$,
) =>
    target$.setFlatChildren;
Function _RenderTable_setChildren$(
  m.Scope scope$,
  RenderTable target$,
) =>
    target$.setChildren;
Function _RenderTable_addRow$(
  m.Scope scope$,
  RenderTable target$,
) =>
    target$.addRow;
Function _RenderTable_setChild$(
  m.Scope scope$,
  RenderTable target$,
) =>
    target$.setChild;
Function _RenderTable_attach$(
  m.Scope scope$,
  RenderTable target$,
) =>
    target$.attach;
Function _RenderTable_detach$(
  m.Scope scope$,
  RenderTable target$,
) =>
    target$.detach;
Function _RenderTable_visitChildren$(
  m.Scope scope$,
  RenderTable target$,
) =>
    (m.FunctionPointer visitor) {
      void visitorProxy(RenderObject visitor_child$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            visitor,
            [visitor_child$],
            {},
          );
      target$.visitChildren(visitorProxy);
    };
Function _RenderTable_computeMinIntrinsicWidth$(
  m.Scope scope$,
  RenderTable target$,
) =>
    target$.computeMinIntrinsicWidth;
Function _RenderTable_computeMaxIntrinsicWidth$(
  m.Scope scope$,
  RenderTable target$,
) =>
    target$.computeMaxIntrinsicWidth;
Function _RenderTable_computeMinIntrinsicHeight$(
  m.Scope scope$,
  RenderTable target$,
) =>
    target$.computeMinIntrinsicHeight;
Function _RenderTable_computeMaxIntrinsicHeight$(
  m.Scope scope$,
  RenderTable target$,
) =>
    target$.computeMaxIntrinsicHeight;
Function _RenderTable_computeDistanceToActualBaseline$(
  m.Scope scope$,
  RenderTable target$,
) =>
    target$.computeDistanceToActualBaseline;
Function _RenderTable_column$(
  m.Scope scope$,
  RenderTable target$,
) =>
    target$.column;
Function _RenderTable_row$(
  m.Scope scope$,
  RenderTable target$,
) =>
    target$.row;
Function _RenderTable_getRowBox$(
  m.Scope scope$,
  RenderTable target$,
) =>
    target$.getRowBox;
Function _RenderTable_computeDryLayout$(
  m.Scope scope$,
  RenderTable target$,
) =>
    target$.computeDryLayout;
Function _RenderTable_performLayout$(
  m.Scope scope$,
  RenderTable target$,
) =>
    target$.performLayout;
Function _RenderTable_hitTestChildren$(
  m.Scope scope$,
  RenderTable target$,
) =>
    target$.hitTestChildren;
Function _RenderTable_paint$(
  m.Scope scope$,
  RenderTable target$,
) =>
    target$.paint;
Function _RenderTable_debugFillProperties$(
  m.Scope scope$,
  RenderTable target$,
) =>
    target$.debugFillProperties;
Function _RenderTable_debugDescribeChildren$(
  m.Scope scope$,
  RenderTable target$,
) =>
    target$.debugDescribeChildren;
Function _TableCellVerticalAlignment_top$(m.Scope scope$) =>
    () => TableCellVerticalAlignment.top;
Function _TableCellVerticalAlignment_middle$(m.Scope scope$) =>
    () => TableCellVerticalAlignment.middle;
Function _TableCellVerticalAlignment_bottom$(m.Scope scope$) =>
    () => TableCellVerticalAlignment.bottom;
Function _TableCellVerticalAlignment_baseline$(m.Scope scope$) =>
    () => TableCellVerticalAlignment.baseline;
Function _TableCellVerticalAlignment_fill$(m.Scope scope$) =>
    () => TableCellVerticalAlignment.fill;
Function _TableCellVerticalAlignment_values$(m.Scope scope$) =>
    () => TableCellVerticalAlignment.values;
