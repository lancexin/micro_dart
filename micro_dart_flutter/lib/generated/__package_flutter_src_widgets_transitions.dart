// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/transitions.dart';
import 'dart:math';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/container.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/text.dart';

part '../proxy/proxy__package_flutter_src_widgets_transitions.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/transitions.dart',
  {
    'AnimatedWidget.': _AnimatedWidget__$,
    'SlideTransition.': _SlideTransition__$,
    'ScaleTransition.': _ScaleTransition__$,
    'RotationTransition.': _RotationTransition__$,
    'SizeTransition.': _SizeTransition__$,
    'FadeTransition.': _FadeTransition__$,
    'SliverFadeTransition.': _SliverFadeTransition__$,
    'RelativeRectTween.': _RelativeRectTween__$,
    'PositionedTransition.': _PositionedTransition__$,
    'RelativePositionedTransition.': _RelativePositionedTransition__$,
    'DecoratedBoxTransition.': _DecoratedBoxTransition__$,
    'AlignTransition.': _AlignTransition__$,
    'DefaultTextStyleTransition.': _DefaultTextStyleTransition__$,
    'ListenableBuilder.': _ListenableBuilder__$,
    'AnimatedBuilder.': _AnimatedBuilder__$,
  },
  {},
  {
    'AnimatedWidget': m.ClassMirror(
      'AnimatedWidget',
      {
        '#as': AnimatedWidget_as$,
        '#is': AnimatedWidget_is$,
        'listenable': _AnimatedWidget_listenable$,
        'build': _AnimatedWidget_build$,
        'createState': _AnimatedWidget_createState$,
        'debugFillProperties': _AnimatedWidget_debugFillProperties$,
      },
      {},
    ),
    'SlideTransition': m.ClassMirror(
      'SlideTransition',
      {
        '#as': SlideTransition_as$,
        '#is': SlideTransition_is$,
        'textDirection': _SlideTransition_textDirection$,
        'transformHitTests': _SlideTransition_transformHitTests$,
        'child': _SlideTransition_child$,
        'position': _SlideTransition_position$,
        'build': _SlideTransition_build$,
      },
      {},
    ),
    'ScaleTransition': m.ClassMirror(
      'ScaleTransition',
      {
        '#as': ScaleTransition_as$,
        '#is': ScaleTransition_is$,
        'alignment': _ScaleTransition_alignment$,
        'filterQuality': _ScaleTransition_filterQuality$,
        'child': _ScaleTransition_child$,
        'scale': _ScaleTransition_scale$,
        'build': _ScaleTransition_build$,
      },
      {},
    ),
    'RotationTransition': m.ClassMirror(
      'RotationTransition',
      {
        '#as': RotationTransition_as$,
        '#is': RotationTransition_is$,
        'alignment': _RotationTransition_alignment$,
        'filterQuality': _RotationTransition_filterQuality$,
        'child': _RotationTransition_child$,
        'turns': _RotationTransition_turns$,
        'build': _RotationTransition_build$,
      },
      {},
    ),
    'SizeTransition': m.ClassMirror(
      'SizeTransition',
      {
        '#as': SizeTransition_as$,
        '#is': SizeTransition_is$,
        'axis': _SizeTransition_axis$,
        'axisAlignment': _SizeTransition_axisAlignment$,
        'child': _SizeTransition_child$,
        'sizeFactor': _SizeTransition_sizeFactor$,
        'build': _SizeTransition_build$,
      },
      {},
    ),
    'FadeTransition': m.ClassMirror(
      'FadeTransition',
      {
        '#as': FadeTransition_as$,
        '#is': FadeTransition_is$,
        'opacity': _FadeTransition_opacity$,
        'alwaysIncludeSemantics': _FadeTransition_alwaysIncludeSemantics$,
        'createRenderObject': _FadeTransition_createRenderObject$,
        'updateRenderObject': _FadeTransition_updateRenderObject$,
        'debugFillProperties': _FadeTransition_debugFillProperties$,
      },
      {},
    ),
    'SliverFadeTransition': m.ClassMirror(
      'SliverFadeTransition',
      {
        '#as': SliverFadeTransition_as$,
        '#is': SliverFadeTransition_is$,
        'opacity': _SliverFadeTransition_opacity$,
        'alwaysIncludeSemantics': _SliverFadeTransition_alwaysIncludeSemantics$,
        'createRenderObject': _SliverFadeTransition_createRenderObject$,
        'updateRenderObject': _SliverFadeTransition_updateRenderObject$,
        'debugFillProperties': _SliverFadeTransition_debugFillProperties$,
      },
      {},
    ),
    'RelativeRectTween': m.ClassMirror(
      'RelativeRectTween',
      {
        '#as': RelativeRectTween_as$,
        '#is': RelativeRectTween_is$,
        'lerp': _RelativeRectTween_lerp$,
      },
      {},
    ),
    'PositionedTransition': m.ClassMirror(
      'PositionedTransition',
      {
        '#as': PositionedTransition_as$,
        '#is': PositionedTransition_is$,
        'child': _PositionedTransition_child$,
        'rect': _PositionedTransition_rect$,
        'build': _PositionedTransition_build$,
      },
      {},
    ),
    'RelativePositionedTransition': m.ClassMirror(
      'RelativePositionedTransition',
      {
        '#as': RelativePositionedTransition_as$,
        '#is': RelativePositionedTransition_is$,
        'size': _RelativePositionedTransition_size$,
        'child': _RelativePositionedTransition_child$,
        'rect': _RelativePositionedTransition_rect$,
        'build': _RelativePositionedTransition_build$,
      },
      {},
    ),
    'DecoratedBoxTransition': m.ClassMirror(
      'DecoratedBoxTransition',
      {
        '#as': DecoratedBoxTransition_as$,
        '#is': DecoratedBoxTransition_is$,
        'decoration': _DecoratedBoxTransition_decoration$,
        'position': _DecoratedBoxTransition_position$,
        'child': _DecoratedBoxTransition_child$,
        'build': _DecoratedBoxTransition_build$,
      },
      {},
    ),
    'AlignTransition': m.ClassMirror(
      'AlignTransition',
      {
        '#as': AlignTransition_as$,
        '#is': AlignTransition_is$,
        'widthFactor': _AlignTransition_widthFactor$,
        'heightFactor': _AlignTransition_heightFactor$,
        'child': _AlignTransition_child$,
        'alignment': _AlignTransition_alignment$,
        'build': _AlignTransition_build$,
      },
      {},
    ),
    'DefaultTextStyleTransition': m.ClassMirror(
      'DefaultTextStyleTransition',
      {
        '#as': DefaultTextStyleTransition_as$,
        '#is': DefaultTextStyleTransition_is$,
        'textAlign': _DefaultTextStyleTransition_textAlign$,
        'softWrap': _DefaultTextStyleTransition_softWrap$,
        'overflow': _DefaultTextStyleTransition_overflow$,
        'maxLines': _DefaultTextStyleTransition_maxLines$,
        'child': _DefaultTextStyleTransition_child$,
        'style': _DefaultTextStyleTransition_style$,
        'build': _DefaultTextStyleTransition_build$,
      },
      {},
    ),
    'ListenableBuilder': m.ClassMirror(
      'ListenableBuilder',
      {
        '#as': ListenableBuilder_as$,
        '#is': ListenableBuilder_is$,
        'builder': _ListenableBuilder_builder$,
        'child': _ListenableBuilder_child$,
        'listenable': _ListenableBuilder_listenable$,
        'build': _ListenableBuilder_build$,
      },
      {},
    ),
    'AnimatedBuilder': m.ClassMirror(
      'AnimatedBuilder',
      {
        '#as': AnimatedBuilder_as$,
        '#is': AnimatedBuilder_is$,
        'animation': _AnimatedBuilder_animation$,
        'listenable': _AnimatedBuilder_listenable$,
        'builder': _AnimatedBuilder_builder$,
      },
      {},
    ),
  },
);
Function AnimatedWidget_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AnimatedWidget;
Function AnimatedWidget_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AnimatedWidget;
Function _AnimatedWidget_listenable$(
  m.Scope scope$,
  AnimatedWidget target$,
) =>
    () {
      return target$.listenable;
    };
Function _AnimatedWidget_build$(
  m.Scope scope$,
  AnimatedWidget target$,
) =>
    target$.build;
Function _AnimatedWidget_createState$(
  m.Scope scope$,
  AnimatedWidget target$,
) =>
    target$.createState;
Function _AnimatedWidget_debugFillProperties$(
  m.Scope scope$,
  AnimatedWidget target$,
) =>
    target$.debugFillProperties;
Function SlideTransition_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SlideTransition;
Function SlideTransition_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SlideTransition;
Function _SlideTransition_textDirection$(
  m.Scope scope$,
  SlideTransition target$,
) =>
    () {
      return target$.textDirection;
    };
Function _SlideTransition_transformHitTests$(
  m.Scope scope$,
  SlideTransition target$,
) =>
    () {
      return target$.transformHitTests;
    };
Function _SlideTransition_child$(
  m.Scope scope$,
  SlideTransition target$,
) =>
    () {
      return target$.child;
    };
Function _SlideTransition_position$(
  m.Scope scope$,
  SlideTransition target$,
) =>
    () {
      return target$.position;
    };
Function _SlideTransition__$(m.Scope scope$) => ({
      Key? key,
      required Animation<Offset> position,
      bool? transformHitTests,
      TextDirection? textDirection,
      Widget? child,
    }) {
      return SlideTransition(
        child: child,
        key: key,
        position: position,
        textDirection: textDirection,
        transformHitTests: transformHitTests ?? true,
      );
    };
Function _SlideTransition_build$(
  m.Scope scope$,
  SlideTransition target$,
) =>
    target$.build;
Function ScaleTransition_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ScaleTransition;
Function ScaleTransition_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ScaleTransition;
Function _ScaleTransition_alignment$(
  m.Scope scope$,
  ScaleTransition target$,
) =>
    () {
      return target$.alignment;
    };
Function _ScaleTransition_filterQuality$(
  m.Scope scope$,
  ScaleTransition target$,
) =>
    () {
      return target$.filterQuality;
    };
Function _ScaleTransition_child$(
  m.Scope scope$,
  ScaleTransition target$,
) =>
    () {
      return target$.child;
    };
Function _ScaleTransition_scale$(
  m.Scope scope$,
  ScaleTransition target$,
) =>
    () {
      return target$.scale;
    };
Function _ScaleTransition__$(m.Scope scope$) => ({
      Key? key,
      required Animation<double> scale,
      Alignment? alignment,
      FilterQuality? filterQuality,
      Widget? child,
    }) {
      return ScaleTransition(
        alignment: alignment ?? Alignment.center,
        child: child,
        filterQuality: filterQuality,
        key: key,
        scale: scale,
      );
    };
Function _ScaleTransition_build$(
  m.Scope scope$,
  ScaleTransition target$,
) =>
    target$.build;
Function RotationTransition_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RotationTransition;
Function RotationTransition_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RotationTransition;
Function _RotationTransition_alignment$(
  m.Scope scope$,
  RotationTransition target$,
) =>
    () {
      return target$.alignment;
    };
Function _RotationTransition_filterQuality$(
  m.Scope scope$,
  RotationTransition target$,
) =>
    () {
      return target$.filterQuality;
    };
Function _RotationTransition_child$(
  m.Scope scope$,
  RotationTransition target$,
) =>
    () {
      return target$.child;
    };
Function _RotationTransition_turns$(
  m.Scope scope$,
  RotationTransition target$,
) =>
    () {
      return target$.turns;
    };
Function _RotationTransition__$(m.Scope scope$) => ({
      Key? key,
      required Animation<double> turns,
      Alignment? alignment,
      FilterQuality? filterQuality,
      Widget? child,
    }) {
      return RotationTransition(
        alignment: alignment ?? Alignment.center,
        child: child,
        filterQuality: filterQuality,
        key: key,
        turns: turns,
      );
    };
Function _RotationTransition_build$(
  m.Scope scope$,
  RotationTransition target$,
) =>
    target$.build;
Function SizeTransition_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SizeTransition;
Function SizeTransition_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SizeTransition;
Function _SizeTransition_axis$(
  m.Scope scope$,
  SizeTransition target$,
) =>
    () {
      return target$.axis;
    };
Function _SizeTransition_axisAlignment$(
  m.Scope scope$,
  SizeTransition target$,
) =>
    () {
      return target$.axisAlignment;
    };
Function _SizeTransition_child$(
  m.Scope scope$,
  SizeTransition target$,
) =>
    () {
      return target$.child;
    };
Function _SizeTransition_sizeFactor$(
  m.Scope scope$,
  SizeTransition target$,
) =>
    () {
      return target$.sizeFactor;
    };
Function _SizeTransition__$(m.Scope scope$) => ({
      Key? key,
      Axis? axis,
      required Animation<double> sizeFactor,
      double? axisAlignment,
      Widget? child,
    }) {
      return SizeTransition(
        axis: axis ?? Axis.vertical,
        axisAlignment: axisAlignment ?? 0.0,
        child: child,
        key: key,
        sizeFactor: sizeFactor,
      );
    };
Function _SizeTransition_build$(
  m.Scope scope$,
  SizeTransition target$,
) =>
    target$.build;
Function FadeTransition_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FadeTransition;
Function FadeTransition_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FadeTransition;
Function _FadeTransition_opacity$(
  m.Scope scope$,
  FadeTransition target$,
) =>
    () {
      return target$.opacity;
    };
Function _FadeTransition_alwaysIncludeSemantics$(
  m.Scope scope$,
  FadeTransition target$,
) =>
    () {
      return target$.alwaysIncludeSemantics;
    };
Function _FadeTransition__$(m.Scope scope$) => ({
      Key? key,
      required Animation<double> opacity,
      bool? alwaysIncludeSemantics,
      Widget? child,
    }) {
      return FadeTransition(
        alwaysIncludeSemantics: alwaysIncludeSemantics ?? false,
        child: child,
        key: key,
        opacity: opacity,
      );
    };
Function _FadeTransition_createRenderObject$(
  m.Scope scope$,
  FadeTransition target$,
) =>
    target$.createRenderObject;
Function _FadeTransition_updateRenderObject$(
  m.Scope scope$,
  FadeTransition target$,
) =>
    target$.updateRenderObject;
Function _FadeTransition_debugFillProperties$(
  m.Scope scope$,
  FadeTransition target$,
) =>
    target$.debugFillProperties;
Function SliverFadeTransition_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverFadeTransition;
Function SliverFadeTransition_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverFadeTransition;
Function _SliverFadeTransition_opacity$(
  m.Scope scope$,
  SliverFadeTransition target$,
) =>
    () {
      return target$.opacity;
    };
Function _SliverFadeTransition_alwaysIncludeSemantics$(
  m.Scope scope$,
  SliverFadeTransition target$,
) =>
    () {
      return target$.alwaysIncludeSemantics;
    };
Function _SliverFadeTransition__$(m.Scope scope$) => ({
      Key? key,
      required Animation<double> opacity,
      bool? alwaysIncludeSemantics,
      Widget? sliver,
    }) {
      return SliverFadeTransition(
        alwaysIncludeSemantics: alwaysIncludeSemantics ?? false,
        key: key,
        opacity: opacity,
        sliver: sliver,
      );
    };
Function _SliverFadeTransition_createRenderObject$(
  m.Scope scope$,
  SliverFadeTransition target$,
) =>
    target$.createRenderObject;
Function _SliverFadeTransition_updateRenderObject$(
  m.Scope scope$,
  SliverFadeTransition target$,
) =>
    target$.updateRenderObject;
Function _SliverFadeTransition_debugFillProperties$(
  m.Scope scope$,
  SliverFadeTransition target$,
) =>
    target$.debugFillProperties;
Function RelativeRectTween_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RelativeRectTween;
Function RelativeRectTween_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RelativeRectTween;
Function _RelativeRectTween__$(m.Scope scope$) => ({
      RelativeRect? begin,
      RelativeRect? end,
    }) {
      return RelativeRectTween(
        begin: begin,
        end: end,
      );
    };
Function _RelativeRectTween_lerp$(
  m.Scope scope$,
  RelativeRectTween target$,
) =>
    target$.lerp;
Function PositionedTransition_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PositionedTransition;
Function PositionedTransition_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PositionedTransition;
Function _PositionedTransition_child$(
  m.Scope scope$,
  PositionedTransition target$,
) =>
    () {
      return target$.child;
    };
Function _PositionedTransition_rect$(
  m.Scope scope$,
  PositionedTransition target$,
) =>
    () {
      return target$.rect;
    };
Function _PositionedTransition__$(m.Scope scope$) => ({
      Key? key,
      required Animation<RelativeRect> rect,
      required Widget child,
    }) {
      return PositionedTransition(
        child: child,
        key: key,
        rect: rect,
      );
    };
Function _PositionedTransition_build$(
  m.Scope scope$,
  PositionedTransition target$,
) =>
    target$.build;
Function RelativePositionedTransition_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RelativePositionedTransition;
Function RelativePositionedTransition_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RelativePositionedTransition;
Function _RelativePositionedTransition_size$(
  m.Scope scope$,
  RelativePositionedTransition target$,
) =>
    () {
      return target$.size;
    };
Function _RelativePositionedTransition_child$(
  m.Scope scope$,
  RelativePositionedTransition target$,
) =>
    () {
      return target$.child;
    };
Function _RelativePositionedTransition_rect$(
  m.Scope scope$,
  RelativePositionedTransition target$,
) =>
    () {
      return target$.rect;
    };
Function _RelativePositionedTransition__$(m.Scope scope$) => ({
      Key? key,
      required Animation<Rect> rect,
      required Size size,
      required Widget child,
    }) {
      return RelativePositionedTransition(
        child: child,
        key: key,
        rect: rect,
        size: size,
      );
    };
Function _RelativePositionedTransition_build$(
  m.Scope scope$,
  RelativePositionedTransition target$,
) =>
    target$.build;
Function DecoratedBoxTransition_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DecoratedBoxTransition;
Function DecoratedBoxTransition_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DecoratedBoxTransition;
Function _DecoratedBoxTransition_decoration$(
  m.Scope scope$,
  DecoratedBoxTransition target$,
) =>
    () {
      return target$.decoration;
    };
Function _DecoratedBoxTransition_position$(
  m.Scope scope$,
  DecoratedBoxTransition target$,
) =>
    () {
      return target$.position;
    };
Function _DecoratedBoxTransition_child$(
  m.Scope scope$,
  DecoratedBoxTransition target$,
) =>
    () {
      return target$.child;
    };
Function _DecoratedBoxTransition__$(m.Scope scope$) => ({
      Key? key,
      required Animation<Decoration> decoration,
      DecorationPosition? position,
      required Widget child,
    }) {
      return DecoratedBoxTransition(
        child: child,
        decoration: decoration,
        key: key,
        position: position ?? DecorationPosition.background,
      );
    };
Function _DecoratedBoxTransition_build$(
  m.Scope scope$,
  DecoratedBoxTransition target$,
) =>
    target$.build;
Function AlignTransition_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AlignTransition;
Function AlignTransition_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AlignTransition;
Function _AlignTransition_widthFactor$(
  m.Scope scope$,
  AlignTransition target$,
) =>
    () {
      return target$.widthFactor;
    };
Function _AlignTransition_heightFactor$(
  m.Scope scope$,
  AlignTransition target$,
) =>
    () {
      return target$.heightFactor;
    };
Function _AlignTransition_child$(
  m.Scope scope$,
  AlignTransition target$,
) =>
    () {
      return target$.child;
    };
Function _AlignTransition_alignment$(
  m.Scope scope$,
  AlignTransition target$,
) =>
    () {
      return target$.alignment;
    };
Function _AlignTransition__$(m.Scope scope$) => ({
      Key? key,
      required Animation<AlignmentGeometry> alignment,
      required Widget child,
      double? widthFactor,
      double? heightFactor,
    }) {
      return AlignTransition(
        alignment: alignment,
        child: child,
        heightFactor: heightFactor,
        key: key,
        widthFactor: widthFactor,
      );
    };
Function _AlignTransition_build$(
  m.Scope scope$,
  AlignTransition target$,
) =>
    target$.build;
Function DefaultTextStyleTransition_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DefaultTextStyleTransition;
Function DefaultTextStyleTransition_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DefaultTextStyleTransition;
Function _DefaultTextStyleTransition_textAlign$(
  m.Scope scope$,
  DefaultTextStyleTransition target$,
) =>
    () {
      return target$.textAlign;
    };
Function _DefaultTextStyleTransition_softWrap$(
  m.Scope scope$,
  DefaultTextStyleTransition target$,
) =>
    () {
      return target$.softWrap;
    };
Function _DefaultTextStyleTransition_overflow$(
  m.Scope scope$,
  DefaultTextStyleTransition target$,
) =>
    () {
      return target$.overflow;
    };
Function _DefaultTextStyleTransition_maxLines$(
  m.Scope scope$,
  DefaultTextStyleTransition target$,
) =>
    () {
      return target$.maxLines;
    };
Function _DefaultTextStyleTransition_child$(
  m.Scope scope$,
  DefaultTextStyleTransition target$,
) =>
    () {
      return target$.child;
    };
Function _DefaultTextStyleTransition_style$(
  m.Scope scope$,
  DefaultTextStyleTransition target$,
) =>
    () {
      return target$.style;
    };
Function _DefaultTextStyleTransition__$(m.Scope scope$) => ({
      Key? key,
      required Animation<TextStyle> style,
      required Widget child,
      TextAlign? textAlign,
      bool? softWrap,
      TextOverflow? overflow,
      int? maxLines,
    }) {
      return DefaultTextStyleTransition(
        child: child,
        key: key,
        maxLines: maxLines,
        overflow: overflow ?? TextOverflow.clip,
        softWrap: softWrap ?? true,
        style: style,
        textAlign: textAlign,
      );
    };
Function _DefaultTextStyleTransition_build$(
  m.Scope scope$,
  DefaultTextStyleTransition target$,
) =>
    target$.build;
Function ListenableBuilder_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ListenableBuilder;
Function ListenableBuilder_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ListenableBuilder;
Function _ListenableBuilder_builder$(
  m.Scope scope$,
  ListenableBuilder target$,
) =>
    () {
      return target$.builder;
    };
Function _ListenableBuilder_child$(
  m.Scope scope$,
  ListenableBuilder target$,
) =>
    () {
      return target$.child;
    };
Function _ListenableBuilder_listenable$(
  m.Scope scope$,
  ListenableBuilder target$,
) =>
    () {
      return target$.listenable;
    };
Function _ListenableBuilder__$(m.Scope scope$) => ({
      Key? key,
      required Listenable listenable,
      required m.FunctionPointer builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      return ListenableBuilder(
        builder: builderProxy,
        child: child,
        key: key,
        listenable: listenable,
      );
    };
Function _ListenableBuilder_build$(
  m.Scope scope$,
  ListenableBuilder target$,
) =>
    target$.build;
Function AnimatedBuilder_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AnimatedBuilder;
Function AnimatedBuilder_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AnimatedBuilder;
Function _AnimatedBuilder_animation$(
  m.Scope scope$,
  AnimatedBuilder target$,
) =>
    () {
      return target$.animation;
    };
Function _AnimatedBuilder_listenable$(
  m.Scope scope$,
  AnimatedBuilder target$,
) =>
    () {
      return target$.listenable;
    };
Function _AnimatedBuilder_builder$(
  m.Scope scope$,
  AnimatedBuilder target$,
) =>
    () {
      return target$.builder;
    };
Function _AnimatedBuilder__$(m.Scope scope$) => ({
      Key? key,
      required Listenable animation,
      required m.FunctionPointer builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      return AnimatedBuilder(
        animation: animation,
        builder: builderProxy,
        child: child,
        key: key,
      );
    };
