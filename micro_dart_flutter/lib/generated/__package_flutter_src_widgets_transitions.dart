// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/transitions.dart';
import 'dart:math';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/container.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/text.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/transitions.dart',
  {},
  {},
  {
    'AnimatedWidget': m.ClassMirror(
      'AnimatedWidget',
      {
        '#as': AnimatedWidget_as$,
        '#is': AnimatedWidget_is$,
        'listenable': _AnimatedWidget_listenable$,
        'build': _AnimatedWidget_build$,
        'createState': _AnimatedWidget_createState$,
        'debugFillProperties': _AnimatedWidget_debugFillProperties$,
      },
      {},
    ),
    'SlideTransition': m.ClassMirror(
      'SlideTransition',
      {
        '#as': SlideTransition_as$,
        '#is': SlideTransition_is$,
        'textDirection': _SlideTransition_textDirection$,
        'transformHitTests': _SlideTransition_transformHitTests$,
        'child': _SlideTransition_child$,
        'position': _SlideTransition_position$,
        'build': _SlideTransition_build$,
      },
      {},
    ),
    'ScaleTransition': m.ClassMirror(
      'ScaleTransition',
      {
        '#as': ScaleTransition_as$,
        '#is': ScaleTransition_is$,
        'alignment': _ScaleTransition_alignment$,
        'filterQuality': _ScaleTransition_filterQuality$,
        'child': _ScaleTransition_child$,
        'scale': _ScaleTransition_scale$,
        'build': _ScaleTransition_build$,
      },
      {},
    ),
    'RotationTransition': m.ClassMirror(
      'RotationTransition',
      {
        '#as': RotationTransition_as$,
        '#is': RotationTransition_is$,
        'alignment': _RotationTransition_alignment$,
        'filterQuality': _RotationTransition_filterQuality$,
        'child': _RotationTransition_child$,
        'turns': _RotationTransition_turns$,
        'build': _RotationTransition_build$,
      },
      {},
    ),
    'SizeTransition': m.ClassMirror(
      'SizeTransition',
      {
        '#as': SizeTransition_as$,
        '#is': SizeTransition_is$,
        'axis': _SizeTransition_axis$,
        'axisAlignment': _SizeTransition_axisAlignment$,
        'child': _SizeTransition_child$,
        'sizeFactor': _SizeTransition_sizeFactor$,
        'build': _SizeTransition_build$,
      },
      {},
    ),
    'FadeTransition': m.ClassMirror(
      'FadeTransition',
      {
        '#as': FadeTransition_as$,
        '#is': FadeTransition_is$,
        'opacity': _FadeTransition_opacity$,
        'alwaysIncludeSemantics': _FadeTransition_alwaysIncludeSemantics$,
        'createRenderObject': _FadeTransition_createRenderObject$,
        'updateRenderObject': _FadeTransition_updateRenderObject$,
        'debugFillProperties': _FadeTransition_debugFillProperties$,
      },
      {},
    ),
    'SliverFadeTransition': m.ClassMirror(
      'SliverFadeTransition',
      {
        '#as': SliverFadeTransition_as$,
        '#is': SliverFadeTransition_is$,
        'opacity': _SliverFadeTransition_opacity$,
        'alwaysIncludeSemantics': _SliverFadeTransition_alwaysIncludeSemantics$,
        'createRenderObject': _SliverFadeTransition_createRenderObject$,
        'updateRenderObject': _SliverFadeTransition_updateRenderObject$,
        'debugFillProperties': _SliverFadeTransition_debugFillProperties$,
      },
      {},
    ),
    'RelativeRectTween': m.ClassMirror(
      'RelativeRectTween',
      {
        '#as': RelativeRectTween_as$,
        '#is': RelativeRectTween_is$,
        'lerp': _RelativeRectTween_lerp$,
      },
      {},
    ),
    'PositionedTransition': m.ClassMirror(
      'PositionedTransition',
      {
        '#as': PositionedTransition_as$,
        '#is': PositionedTransition_is$,
        'child': _PositionedTransition_child$,
        'rect': _PositionedTransition_rect$,
        'build': _PositionedTransition_build$,
      },
      {},
    ),
    'RelativePositionedTransition': m.ClassMirror(
      'RelativePositionedTransition',
      {
        '#as': RelativePositionedTransition_as$,
        '#is': RelativePositionedTransition_is$,
        'size': _RelativePositionedTransition_size$,
        'child': _RelativePositionedTransition_child$,
        'rect': _RelativePositionedTransition_rect$,
        'build': _RelativePositionedTransition_build$,
      },
      {},
    ),
    'DecoratedBoxTransition': m.ClassMirror(
      'DecoratedBoxTransition',
      {
        '#as': DecoratedBoxTransition_as$,
        '#is': DecoratedBoxTransition_is$,
        'decoration': _DecoratedBoxTransition_decoration$,
        'position': _DecoratedBoxTransition_position$,
        'child': _DecoratedBoxTransition_child$,
        'build': _DecoratedBoxTransition_build$,
      },
      {},
    ),
    'AlignTransition': m.ClassMirror(
      'AlignTransition',
      {
        '#as': AlignTransition_as$,
        '#is': AlignTransition_is$,
        'widthFactor': _AlignTransition_widthFactor$,
        'heightFactor': _AlignTransition_heightFactor$,
        'child': _AlignTransition_child$,
        'alignment': _AlignTransition_alignment$,
        'build': _AlignTransition_build$,
      },
      {},
    ),
    'DefaultTextStyleTransition': m.ClassMirror(
      'DefaultTextStyleTransition',
      {
        '#as': DefaultTextStyleTransition_as$,
        '#is': DefaultTextStyleTransition_is$,
        'textAlign': _DefaultTextStyleTransition_textAlign$,
        'softWrap': _DefaultTextStyleTransition_softWrap$,
        'overflow': _DefaultTextStyleTransition_overflow$,
        'maxLines': _DefaultTextStyleTransition_maxLines$,
        'child': _DefaultTextStyleTransition_child$,
        'style': _DefaultTextStyleTransition_style$,
        'build': _DefaultTextStyleTransition_build$,
      },
      {},
    ),
    'ListenableBuilder': m.ClassMirror(
      'ListenableBuilder',
      {
        '#as': ListenableBuilder_as$,
        '#is': ListenableBuilder_is$,
        'builder': _ListenableBuilder_builder$,
        'child': _ListenableBuilder_child$,
        'listenable': _ListenableBuilder_listenable$,
        'build': _ListenableBuilder_build$,
      },
      {},
    ),
    'AnimatedBuilder': m.ClassMirror(
      'AnimatedBuilder',
      {
        '#as': AnimatedBuilder_as$,
        '#is': AnimatedBuilder_is$,
        'animation': _AnimatedBuilder_animation$,
        'listenable': _AnimatedBuilder_listenable$,
        'builder': _AnimatedBuilder_builder$,
      },
      {},
    ),
  },
);
Function AnimatedWidget_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AnimatedWidget;
Function AnimatedWidget_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AnimatedWidget;
Listenable _AnimatedWidget_listenable$(AnimatedWidget target) {
  return target.listenable;
}

Function _AnimatedWidget_build$(
  m.Scope scope,
  AnimatedWidget target,
) =>
    target.build;
Function _AnimatedWidget_createState$(
  m.Scope scope,
  AnimatedWidget target,
) =>
    target.createState;
Function _AnimatedWidget_debugFillProperties$(
  m.Scope scope,
  AnimatedWidget target,
) =>
    target.debugFillProperties;
Function SlideTransition_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SlideTransition;
Function SlideTransition_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SlideTransition;
TextDirection? _SlideTransition_textDirection$(SlideTransition target) {
  return target.textDirection;
}

bool _SlideTransition_transformHitTests$(SlideTransition target) {
  return target.transformHitTests;
}

Widget? _SlideTransition_child$(SlideTransition target) {
  return target.child;
}

Animation<Offset> _SlideTransition_position$(SlideTransition target) {
  return target.position;
}

Function _SlideTransition_build$(
  m.Scope scope,
  SlideTransition target,
) =>
    target.build;
Function ScaleTransition_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ScaleTransition;
Function ScaleTransition_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ScaleTransition;
Alignment _ScaleTransition_alignment$(ScaleTransition target) {
  return target.alignment;
}

FilterQuality? _ScaleTransition_filterQuality$(ScaleTransition target) {
  return target.filterQuality;
}

Widget? _ScaleTransition_child$(ScaleTransition target) {
  return target.child;
}

Animation<double> _ScaleTransition_scale$(ScaleTransition target) {
  return target.scale;
}

Function _ScaleTransition_build$(
  m.Scope scope,
  ScaleTransition target,
) =>
    target.build;
Function RotationTransition_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RotationTransition;
Function RotationTransition_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RotationTransition;
Alignment _RotationTransition_alignment$(RotationTransition target) {
  return target.alignment;
}

FilterQuality? _RotationTransition_filterQuality$(RotationTransition target) {
  return target.filterQuality;
}

Widget? _RotationTransition_child$(RotationTransition target) {
  return target.child;
}

Animation<double> _RotationTransition_turns$(RotationTransition target) {
  return target.turns;
}

Function _RotationTransition_build$(
  m.Scope scope,
  RotationTransition target,
) =>
    target.build;
Function SizeTransition_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SizeTransition;
Function SizeTransition_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SizeTransition;
Axis _SizeTransition_axis$(SizeTransition target) {
  return target.axis;
}

double _SizeTransition_axisAlignment$(SizeTransition target) {
  return target.axisAlignment;
}

Widget? _SizeTransition_child$(SizeTransition target) {
  return target.child;
}

Animation<double> _SizeTransition_sizeFactor$(SizeTransition target) {
  return target.sizeFactor;
}

Function _SizeTransition_build$(
  m.Scope scope,
  SizeTransition target,
) =>
    target.build;
Function FadeTransition_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as FadeTransition;
Function FadeTransition_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is FadeTransition;
Animation<double> _FadeTransition_opacity$(FadeTransition target) {
  return target.opacity;
}

bool _FadeTransition_alwaysIncludeSemantics$(FadeTransition target) {
  return target.alwaysIncludeSemantics;
}

Function _FadeTransition_createRenderObject$(
  m.Scope scope,
  FadeTransition target,
) =>
    target.createRenderObject;
Function _FadeTransition_updateRenderObject$(
  m.Scope scope,
  FadeTransition target,
) =>
    target.updateRenderObject;
Function _FadeTransition_debugFillProperties$(
  m.Scope scope,
  FadeTransition target,
) =>
    target.debugFillProperties;
Function SliverFadeTransition_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SliverFadeTransition;
Function SliverFadeTransition_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SliverFadeTransition;
Animation<double> _SliverFadeTransition_opacity$(SliverFadeTransition target) {
  return target.opacity;
}

bool _SliverFadeTransition_alwaysIncludeSemantics$(
    SliverFadeTransition target) {
  return target.alwaysIncludeSemantics;
}

Function _SliverFadeTransition_createRenderObject$(
  m.Scope scope,
  SliverFadeTransition target,
) =>
    target.createRenderObject;
Function _SliverFadeTransition_updateRenderObject$(
  m.Scope scope,
  SliverFadeTransition target,
) =>
    target.updateRenderObject;
Function _SliverFadeTransition_debugFillProperties$(
  m.Scope scope,
  SliverFadeTransition target,
) =>
    target.debugFillProperties;
Function RelativeRectTween_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RelativeRectTween;
Function RelativeRectTween_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RelativeRectTween;
Function _RelativeRectTween_lerp$(
  m.Scope scope,
  RelativeRectTween target,
) =>
    target.lerp;
Function PositionedTransition_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as PositionedTransition;
Function PositionedTransition_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is PositionedTransition;
Widget _PositionedTransition_child$(PositionedTransition target) {
  return target.child;
}

Animation<RelativeRect> _PositionedTransition_rect$(
    PositionedTransition target) {
  return target.rect;
}

Function _PositionedTransition_build$(
  m.Scope scope,
  PositionedTransition target,
) =>
    target.build;
Function RelativePositionedTransition_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RelativePositionedTransition;
Function RelativePositionedTransition_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RelativePositionedTransition;
Size _RelativePositionedTransition_size$(RelativePositionedTransition target) {
  return target.size;
}

Widget _RelativePositionedTransition_child$(
    RelativePositionedTransition target) {
  return target.child;
}

Animation<Rect?> _RelativePositionedTransition_rect$(
    RelativePositionedTransition target) {
  return target.rect;
}

Function _RelativePositionedTransition_build$(
  m.Scope scope,
  RelativePositionedTransition target,
) =>
    target.build;
Function DecoratedBoxTransition_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DecoratedBoxTransition;
Function DecoratedBoxTransition_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DecoratedBoxTransition;
Animation<Decoration> _DecoratedBoxTransition_decoration$(
    DecoratedBoxTransition target) {
  return target.decoration;
}

DecorationPosition _DecoratedBoxTransition_position$(
    DecoratedBoxTransition target) {
  return target.position;
}

Widget _DecoratedBoxTransition_child$(DecoratedBoxTransition target) {
  return target.child;
}

Function _DecoratedBoxTransition_build$(
  m.Scope scope,
  DecoratedBoxTransition target,
) =>
    target.build;
Function AlignTransition_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AlignTransition;
Function AlignTransition_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AlignTransition;
double? _AlignTransition_widthFactor$(AlignTransition target) {
  return target.widthFactor;
}

double? _AlignTransition_heightFactor$(AlignTransition target) {
  return target.heightFactor;
}

Widget _AlignTransition_child$(AlignTransition target) {
  return target.child;
}

Animation<AlignmentGeometry> _AlignTransition_alignment$(
    AlignTransition target) {
  return target.alignment;
}

Function _AlignTransition_build$(
  m.Scope scope,
  AlignTransition target,
) =>
    target.build;
Function DefaultTextStyleTransition_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DefaultTextStyleTransition;
Function DefaultTextStyleTransition_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DefaultTextStyleTransition;
TextAlign? _DefaultTextStyleTransition_textAlign$(
    DefaultTextStyleTransition target) {
  return target.textAlign;
}

bool _DefaultTextStyleTransition_softWrap$(DefaultTextStyleTransition target) {
  return target.softWrap;
}

TextOverflow _DefaultTextStyleTransition_overflow$(
    DefaultTextStyleTransition target) {
  return target.overflow;
}

int? _DefaultTextStyleTransition_maxLines$(DefaultTextStyleTransition target) {
  return target.maxLines;
}

Widget _DefaultTextStyleTransition_child$(DefaultTextStyleTransition target) {
  return target.child;
}

Animation<TextStyle> _DefaultTextStyleTransition_style$(
    DefaultTextStyleTransition target) {
  return target.style;
}

Function _DefaultTextStyleTransition_build$(
  m.Scope scope,
  DefaultTextStyleTransition target,
) =>
    target.build;
Function ListenableBuilder_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ListenableBuilder;
Function ListenableBuilder_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ListenableBuilder;
Widget Function(BuildContext, Widget?) _ListenableBuilder_builder$(
    ListenableBuilder target) {
  return target.builder;
}

Widget? _ListenableBuilder_child$(ListenableBuilder target) {
  return target.child;
}

Listenable _ListenableBuilder_listenable$(ListenableBuilder target) {
  return target.listenable;
}

Function _ListenableBuilder_build$(
  m.Scope scope,
  ListenableBuilder target,
) =>
    target.build;
Function AnimatedBuilder_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AnimatedBuilder;
Function AnimatedBuilder_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AnimatedBuilder;
Listenable _AnimatedBuilder_animation$(AnimatedBuilder target) {
  return target.animation;
}

Listenable _AnimatedBuilder_listenable$(AnimatedBuilder target) {
  return target.listenable;
}

Widget Function(BuildContext, Widget?) _AnimatedBuilder_builder$(
    AnimatedBuilder target) {
  return target.builder;
}
