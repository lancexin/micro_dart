// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/slider.dart';
import 'dart:math';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/theme.dart';
import 'package:flutter/src/cupertino/thumb_painter.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/slider.dart',
  {'CupertinoSlider.': _CupertinoSlider__$},
  {},
  {
    'CupertinoSlider': m.ClassMirror(
      'CupertinoSlider',
      {
        '#as': CupertinoSlider_as$,
        '#is': CupertinoSlider_is$,
        'value': _CupertinoSlider_value$,
        'onChanged': _CupertinoSlider_onChanged$,
        'onChangeStart': _CupertinoSlider_onChangeStart$,
        'onChangeEnd': _CupertinoSlider_onChangeEnd$,
        'min': _CupertinoSlider_min$,
        'max': _CupertinoSlider_max$,
        'divisions': _CupertinoSlider_divisions$,
        'activeColor': _CupertinoSlider_activeColor$,
        'thumbColor': _CupertinoSlider_thumbColor$,
        'createState': _CupertinoSlider_createState$,
        'debugFillProperties': _CupertinoSlider_debugFillProperties$,
      },
      {},
    )
  },
);
Function CupertinoSlider_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoSlider;
Function CupertinoSlider_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoSlider;
Function _CupertinoSlider_value$(
  m.Scope scope$,
  CupertinoSlider target$,
) =>
    () {
      return target$.value;
    };
Function _CupertinoSlider_onChanged$(
  m.Scope scope$,
  CupertinoSlider target$,
) =>
    () {
      return target$.onChanged;
    };
Function _CupertinoSlider_onChangeStart$(
  m.Scope scope$,
  CupertinoSlider target$,
) =>
    () {
      return target$.onChangeStart;
    };
Function _CupertinoSlider_onChangeEnd$(
  m.Scope scope$,
  CupertinoSlider target$,
) =>
    () {
      return target$.onChangeEnd;
    };
Function _CupertinoSlider_min$(
  m.Scope scope$,
  CupertinoSlider target$,
) =>
    () {
      return target$.min;
    };
Function _CupertinoSlider_max$(
  m.Scope scope$,
  CupertinoSlider target$,
) =>
    () {
      return target$.max;
    };
Function _CupertinoSlider_divisions$(
  m.Scope scope$,
  CupertinoSlider target$,
) =>
    () {
      return target$.divisions;
    };
Function _CupertinoSlider_activeColor$(
  m.Scope scope$,
  CupertinoSlider target$,
) =>
    () {
      return target$.activeColor;
    };
Function _CupertinoSlider_thumbColor$(
  m.Scope scope$,
  CupertinoSlider target$,
) =>
    () {
      return target$.thumbColor;
    };
Function _CupertinoSlider__$(m.Scope scope$) => ({
      Key? key,
      required double value,
      required m.FunctionPointer? onChanged,
      m.FunctionPointer? onChangeStart,
      m.FunctionPointer? onChangeEnd,
      double? min,
      double? max,
      int? divisions,
      Color? activeColor,
      Color? thumbColor,
    }) {
      void onChangeEndProxy(double onChangeEnd_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChangeEnd!,
            [onChangeEnd_value$],
            {},
          );
      void onChangeStartProxy(double onChangeStart_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChangeStart!,
            [onChangeStart_value$],
            {},
          );
      void onChangedProxy(double onChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChanged!,
            [onChanged_value$],
            {},
          );
      return CupertinoSlider(
        activeColor: activeColor,
        divisions: divisions,
        key: key,
        max: max ?? 1.0,
        min: min ?? 0.0,
        onChangeEnd: onChangeEnd == null ? null : onChangeEndProxy,
        onChangeStart: onChangeStart == null ? null : onChangeStartProxy,
        onChanged: onChanged == null ? null : onChangedProxy,
        thumbColor: thumbColor ?? CupertinoColors.white,
        value: value,
      );
    };
Function _CupertinoSlider_createState$(
  m.Scope scope$,
  CupertinoSlider target$,
) =>
    target$.createState;
Function _CupertinoSlider_debugFillProperties$(
  m.Scope scope$,
  CupertinoSlider target$,
) =>
    target$.debugFillProperties;
