// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/ticker_provider.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/ticker_provider.dart',
  {
    'TickerMode.': _TickerMode__$,
    'TickerMode.of': _TickerMode_of$,
    'TickerMode.getNotifier': _TickerMode_getNotifier$,
  },
  {},
  {
    'TickerMode': m.ClassMirror(
      'TickerMode',
      {
        '#as': TickerMode_as$,
        '#is': TickerMode_is$,
        'enabled': _TickerMode_enabled$,
        'child': _TickerMode_child$,
        'createState': _TickerMode_createState$,
      },
      {},
    )
  },
);
Function TickerMode_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TickerMode;
Function TickerMode_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TickerMode;
Function _TickerMode_enabled$(
  m.Scope scope$,
  TickerMode target$,
) =>
    () {
      return target$.enabled;
    };
Function _TickerMode_child$(
  m.Scope scope$,
  TickerMode target$,
) =>
    () {
      return target$.child;
    };
Function _TickerMode__$(m.Scope scope$) => ({
      Key? key,
      required bool enabled,
      required Widget child,
    }) {
      return TickerMode(
        child: child,
        enabled: enabled,
        key: key,
      );
    };
Function _TickerMode_of$(m.Scope scope$) => TickerMode.of;
Function _TickerMode_getNotifier$(m.Scope scope$) => TickerMode.getNotifier;
Function _TickerMode_createState$(
  m.Scope scope$,
  TickerMode target$,
) =>
    target$.createState;
