// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/button_style_button.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/button_style_button.dart',
  {
    'ButtonStyleButton.allOrNull': _ButtonStyleButton_allOrNull$,
    'ButtonStyleButton.scaledPadding': _ButtonStyleButton_scaledPadding$,
  },
  {},
  {
    'ButtonStyleButton': m.ClassMirror(
      'ButtonStyleButton',
      {
        '#as': ButtonStyleButton_as$,
        '#is': ButtonStyleButton_is$,
        'onPressed': _ButtonStyleButton_onPressed$,
        'onLongPress': _ButtonStyleButton_onLongPress$,
        'onHover': _ButtonStyleButton_onHover$,
        'onFocusChange': _ButtonStyleButton_onFocusChange$,
        'style': _ButtonStyleButton_style$,
        'clipBehavior': _ButtonStyleButton_clipBehavior$,
        'focusNode': _ButtonStyleButton_focusNode$,
        'autofocus': _ButtonStyleButton_autofocus$,
        'statesController': _ButtonStyleButton_statesController$,
        'child': _ButtonStyleButton_child$,
        'enabled': _ButtonStyleButton_enabled$,
        'defaultStyleOf': _ButtonStyleButton_defaultStyleOf$,
        'themeStyleOf': _ButtonStyleButton_themeStyleOf$,
        'createState': _ButtonStyleButton_createState$,
        'debugFillProperties': _ButtonStyleButton_debugFillProperties$,
      },
      {},
    )
  },
);
Function ButtonStyleButton_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ButtonStyleButton;
Function ButtonStyleButton_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ButtonStyleButton;
Function _ButtonStyleButton_onPressed$(
  m.Scope scope$,
  ButtonStyleButton target$,
) =>
    () {
      return target$.onPressed;
    };
Function _ButtonStyleButton_onLongPress$(
  m.Scope scope$,
  ButtonStyleButton target$,
) =>
    () {
      return target$.onLongPress;
    };
Function _ButtonStyleButton_onHover$(
  m.Scope scope$,
  ButtonStyleButton target$,
) =>
    () {
      return target$.onHover;
    };
Function _ButtonStyleButton_onFocusChange$(
  m.Scope scope$,
  ButtonStyleButton target$,
) =>
    () {
      return target$.onFocusChange;
    };
Function _ButtonStyleButton_style$(
  m.Scope scope$,
  ButtonStyleButton target$,
) =>
    () {
      return target$.style;
    };
Function _ButtonStyleButton_clipBehavior$(
  m.Scope scope$,
  ButtonStyleButton target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _ButtonStyleButton_focusNode$(
  m.Scope scope$,
  ButtonStyleButton target$,
) =>
    () {
      return target$.focusNode;
    };
Function _ButtonStyleButton_autofocus$(
  m.Scope scope$,
  ButtonStyleButton target$,
) =>
    () {
      return target$.autofocus;
    };
Function _ButtonStyleButton_statesController$(
  m.Scope scope$,
  ButtonStyleButton target$,
) =>
    () {
      return target$.statesController;
    };
Function _ButtonStyleButton_child$(
  m.Scope scope$,
  ButtonStyleButton target$,
) =>
    () {
      return target$.child;
    };
Function _ButtonStyleButton_enabled$(
  m.Scope scope$,
  ButtonStyleButton target$,
) =>
    () {
      return target$.enabled;
    };
Function _ButtonStyleButton_defaultStyleOf$(
  m.Scope scope$,
  ButtonStyleButton target$,
) =>
    target$.defaultStyleOf;
Function _ButtonStyleButton_themeStyleOf$(
  m.Scope scope$,
  ButtonStyleButton target$,
) =>
    target$.themeStyleOf;
Function _ButtonStyleButton_createState$(
  m.Scope scope$,
  ButtonStyleButton target$,
) =>
    target$.createState;
Function _ButtonStyleButton_debugFillProperties$(
  m.Scope scope$,
  ButtonStyleButton target$,
) =>
    target$.debugFillProperties;
Function _ButtonStyleButton_allOrNull$<T>(m.Scope scope$) =>
    ButtonStyleButton.allOrNull<T>;
Function _ButtonStyleButton_scaledPadding$(m.Scope scope$) =>
    ButtonStyleButton.scaledPadding;
