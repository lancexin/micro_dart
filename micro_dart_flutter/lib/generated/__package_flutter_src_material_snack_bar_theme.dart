// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/snack_bar_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/snack_bar_theme.dart',
  {
    'SnackBarThemeData.lerp': _SnackBarThemeData_lerp$,
    'SnackBarBehavior.fixed': _SnackBarBehavior_fixed$,
    'SnackBarBehavior.floating': _SnackBarBehavior_floating$,
    'SnackBarBehavior.values': _SnackBarBehavior_values$,
  },
  {},
  {
    'SnackBarThemeData': m.ClassMirror(
      'SnackBarThemeData',
      {
        'backgroundColor': _SnackBarThemeData_backgroundColor$,
        'actionTextColor': _SnackBarThemeData_actionTextColor$,
        'disabledActionTextColor': _SnackBarThemeData_disabledActionTextColor$,
        'contentTextStyle': _SnackBarThemeData_contentTextStyle$,
        'elevation': _SnackBarThemeData_elevation$,
        'shape': _SnackBarThemeData_shape$,
        'behavior': _SnackBarThemeData_behavior$,
        'width': _SnackBarThemeData_width$,
        'insetPadding': _SnackBarThemeData_insetPadding$,
        'showCloseIcon': _SnackBarThemeData_showCloseIcon$,
        'closeIconColor': _SnackBarThemeData_closeIconColor$,
        'actionOverflowThreshold': _SnackBarThemeData_actionOverflowThreshold$,
        'actionBackgroundColor': _SnackBarThemeData_actionBackgroundColor$,
        'disabledActionBackgroundColor':
            _SnackBarThemeData_disabledActionBackgroundColor$,
        'hashCode': _SnackBarThemeData_hashCode$,
        'copyWith': _SnackBarThemeData_copyWith$,
        'debugFillProperties': _SnackBarThemeData_debugFillProperties$,
      },
      {},
    ),
    'SnackBarBehavior': m.ClassMirror(
      'SnackBarBehavior',
      {},
      {},
    ),
  },
);
Color? _SnackBarThemeData_backgroundColor$(SnackBarThemeData target) {
  return target.backgroundColor;
}

Color? _SnackBarThemeData_actionTextColor$(SnackBarThemeData target) {
  return target.actionTextColor;
}

Color? _SnackBarThemeData_disabledActionTextColor$(SnackBarThemeData target) {
  return target.disabledActionTextColor;
}

TextStyle? _SnackBarThemeData_contentTextStyle$(SnackBarThemeData target) {
  return target.contentTextStyle;
}

double? _SnackBarThemeData_elevation$(SnackBarThemeData target) {
  return target.elevation;
}

ShapeBorder? _SnackBarThemeData_shape$(SnackBarThemeData target) {
  return target.shape;
}

SnackBarBehavior? _SnackBarThemeData_behavior$(SnackBarThemeData target) {
  return target.behavior;
}

double? _SnackBarThemeData_width$(SnackBarThemeData target) {
  return target.width;
}

EdgeInsets? _SnackBarThemeData_insetPadding$(SnackBarThemeData target) {
  return target.insetPadding;
}

bool? _SnackBarThemeData_showCloseIcon$(SnackBarThemeData target) {
  return target.showCloseIcon;
}

Color? _SnackBarThemeData_closeIconColor$(SnackBarThemeData target) {
  return target.closeIconColor;
}

double? _SnackBarThemeData_actionOverflowThreshold$(SnackBarThemeData target) {
  return target.actionOverflowThreshold;
}

Color? _SnackBarThemeData_actionBackgroundColor$(SnackBarThemeData target) {
  return target.actionBackgroundColor;
}

Color? _SnackBarThemeData_disabledActionBackgroundColor$(
    SnackBarThemeData target) {
  return target.disabledActionBackgroundColor;
}

int _SnackBarThemeData_hashCode$(SnackBarThemeData target) {
  return target.hashCode;
}

Function _SnackBarThemeData_copyWith$(
  m.Scope scope,
  SnackBarThemeData target,
) =>
    target.copyWith;
Function _SnackBarThemeData_lerp$(m.Scope scope) => SnackBarThemeData.lerp;
Function _SnackBarThemeData_debugFillProperties$(
  m.Scope scope,
  SnackBarThemeData target,
) =>
    target.debugFillProperties;
SnackBarBehavior _SnackBarBehavior_fixed$() {
  return SnackBarBehavior.fixed;
}

SnackBarBehavior _SnackBarBehavior_floating$() {
  return SnackBarBehavior.floating;
}

List<SnackBarBehavior> _SnackBarBehavior_values$() {
  return SnackBarBehavior.values;
}
