// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/snack_bar_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/snack_bar_theme.dart',
  {
    'SnackBarThemeData.': _SnackBarThemeData__$,
    'SnackBarThemeData.lerp': _SnackBarThemeData_lerp$,
    'SnackBarBehavior.fixed': _SnackBarBehavior_fixed$,
    'SnackBarBehavior.floating': _SnackBarBehavior_floating$,
    'SnackBarBehavior.values': _SnackBarBehavior_values$,
  },
  {},
  {
    'SnackBarThemeData': m.ClassMirror(
      'SnackBarThemeData',
      {
        '#as': SnackBarThemeData_as$,
        '#is': SnackBarThemeData_is$,
        'backgroundColor': _SnackBarThemeData_backgroundColor$,
        'actionTextColor': _SnackBarThemeData_actionTextColor$,
        'disabledActionTextColor': _SnackBarThemeData_disabledActionTextColor$,
        'contentTextStyle': _SnackBarThemeData_contentTextStyle$,
        'elevation': _SnackBarThemeData_elevation$,
        'shape': _SnackBarThemeData_shape$,
        'behavior': _SnackBarThemeData_behavior$,
        'width': _SnackBarThemeData_width$,
        'insetPadding': _SnackBarThemeData_insetPadding$,
        'showCloseIcon': _SnackBarThemeData_showCloseIcon$,
        'closeIconColor': _SnackBarThemeData_closeIconColor$,
        'actionOverflowThreshold': _SnackBarThemeData_actionOverflowThreshold$,
        'actionBackgroundColor': _SnackBarThemeData_actionBackgroundColor$,
        'disabledActionBackgroundColor':
            _SnackBarThemeData_disabledActionBackgroundColor$,
        'hashCode': _SnackBarThemeData_hashCode$,
        'copyWith': _SnackBarThemeData_copyWith$,
        '==': _SnackBarThemeData_eq$$,
        'debugFillProperties': _SnackBarThemeData_debugFillProperties$,
      },
      {},
    ),
    'SnackBarBehavior': m.ClassMirror(
      'SnackBarBehavior',
      {},
      {},
    ),
  },
);
Function SnackBarThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SnackBarThemeData;
Function SnackBarThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SnackBarThemeData;
Function _SnackBarThemeData_backgroundColor$(
  m.Scope scope$,
  SnackBarThemeData target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _SnackBarThemeData_actionTextColor$(
  m.Scope scope$,
  SnackBarThemeData target$,
) =>
    () {
      return target$.actionTextColor;
    };
Function _SnackBarThemeData_disabledActionTextColor$(
  m.Scope scope$,
  SnackBarThemeData target$,
) =>
    () {
      return target$.disabledActionTextColor;
    };
Function _SnackBarThemeData_contentTextStyle$(
  m.Scope scope$,
  SnackBarThemeData target$,
) =>
    () {
      return target$.contentTextStyle;
    };
Function _SnackBarThemeData_elevation$(
  m.Scope scope$,
  SnackBarThemeData target$,
) =>
    () {
      return target$.elevation;
    };
Function _SnackBarThemeData_shape$(
  m.Scope scope$,
  SnackBarThemeData target$,
) =>
    () {
      return target$.shape;
    };
Function _SnackBarThemeData_behavior$(
  m.Scope scope$,
  SnackBarThemeData target$,
) =>
    () {
      return target$.behavior;
    };
Function _SnackBarThemeData_width$(
  m.Scope scope$,
  SnackBarThemeData target$,
) =>
    () {
      return target$.width;
    };
Function _SnackBarThemeData_insetPadding$(
  m.Scope scope$,
  SnackBarThemeData target$,
) =>
    () {
      return target$.insetPadding;
    };
Function _SnackBarThemeData_showCloseIcon$(
  m.Scope scope$,
  SnackBarThemeData target$,
) =>
    () {
      return target$.showCloseIcon;
    };
Function _SnackBarThemeData_closeIconColor$(
  m.Scope scope$,
  SnackBarThemeData target$,
) =>
    () {
      return target$.closeIconColor;
    };
Function _SnackBarThemeData_actionOverflowThreshold$(
  m.Scope scope$,
  SnackBarThemeData target$,
) =>
    () {
      return target$.actionOverflowThreshold;
    };
Function _SnackBarThemeData_actionBackgroundColor$(
  m.Scope scope$,
  SnackBarThemeData target$,
) =>
    () {
      return target$.actionBackgroundColor;
    };
Function _SnackBarThemeData_disabledActionBackgroundColor$(
  m.Scope scope$,
  SnackBarThemeData target$,
) =>
    () {
      return target$.disabledActionBackgroundColor;
    };
Function _SnackBarThemeData_hashCode$(
  m.Scope scope$,
  SnackBarThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _SnackBarThemeData__$(m.Scope scope$) => ({
      Color? backgroundColor,
      Color? actionTextColor,
      Color? disabledActionTextColor,
      TextStyle? contentTextStyle,
      double? elevation,
      ShapeBorder? shape,
      SnackBarBehavior? behavior,
      double? width,
      EdgeInsets? insetPadding,
      bool? showCloseIcon,
      Color? closeIconColor,
      double? actionOverflowThreshold,
      Color? actionBackgroundColor,
      Color? disabledActionBackgroundColor,
    }) {
      return SnackBarThemeData(
        actionBackgroundColor: actionBackgroundColor,
        actionOverflowThreshold: actionOverflowThreshold,
        actionTextColor: actionTextColor,
        backgroundColor: backgroundColor,
        behavior: behavior,
        closeIconColor: closeIconColor,
        contentTextStyle: contentTextStyle,
        disabledActionBackgroundColor: disabledActionBackgroundColor,
        disabledActionTextColor: disabledActionTextColor,
        elevation: elevation,
        insetPadding: insetPadding,
        shape: shape,
        showCloseIcon: showCloseIcon,
        width: width,
      );
    };
Function _SnackBarThemeData_copyWith$(
  m.Scope scope$,
  SnackBarThemeData target$,
) =>
    target$.copyWith;
Function _SnackBarThemeData_lerp$(m.Scope scope$) => SnackBarThemeData.lerp;
Function _SnackBarThemeData_eq$$(
  m.Scope scope$,
  SnackBarThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _SnackBarThemeData_debugFillProperties$(
  m.Scope scope$,
  SnackBarThemeData target$,
) =>
    target$.debugFillProperties;
SnackBarBehavior _SnackBarBehavior_fixed$() {
  return SnackBarBehavior.fixed;
}

SnackBarBehavior _SnackBarBehavior_floating$() {
  return SnackBarBehavior.floating;
}

List<SnackBarBehavior> _SnackBarBehavior_values$() {
  return SnackBarBehavior.values;
}
