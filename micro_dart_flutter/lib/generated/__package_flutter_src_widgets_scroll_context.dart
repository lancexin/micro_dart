// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/scroll_context.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/ticker_provider.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/scroll_context.dart',
  {},
  {},
  {
    'ScrollContext': m.ClassMirror(
      'ScrollContext',
      {
        '#as': ScrollContext_as$,
        '#is': ScrollContext_is$,
        'notificationContext': _ScrollContext_notificationContext$,
        'storageContext': _ScrollContext_storageContext$,
        'vsync': _ScrollContext_vsync$,
        'axisDirection': _ScrollContext_axisDirection$,
        'setIgnorePointer': _ScrollContext_setIgnorePointer$,
        'setCanDrag': _ScrollContext_setCanDrag$,
        'setSemanticsActions': _ScrollContext_setSemanticsActions$,
        'saveOffset': _ScrollContext_saveOffset$,
      },
      {},
    )
  },
);
Function ScrollContext_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ScrollContext;
Function ScrollContext_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ScrollContext;
Function _ScrollContext_notificationContext$(
  m.Scope scope$,
  ScrollContext target$,
) =>
    () {
      return target$.notificationContext;
    };
Function _ScrollContext_storageContext$(
  m.Scope scope$,
  ScrollContext target$,
) =>
    () {
      return target$.storageContext;
    };
Function _ScrollContext_vsync$(
  m.Scope scope$,
  ScrollContext target$,
) =>
    () {
      return target$.vsync;
    };
Function _ScrollContext_axisDirection$(
  m.Scope scope$,
  ScrollContext target$,
) =>
    () {
      return target$.axisDirection;
    };
Function _ScrollContext_setIgnorePointer$(
  m.Scope scope$,
  ScrollContext target$,
) =>
    target$.setIgnorePointer;
Function _ScrollContext_setCanDrag$(
  m.Scope scope$,
  ScrollContext target$,
) =>
    target$.setCanDrag;
Function _ScrollContext_setSemanticsActions$(
  m.Scope scope$,
  ScrollContext target$,
) =>
    target$.setSemanticsActions;
Function _ScrollContext_saveOffset$(
  m.Scope scope$,
  ScrollContext target$,
) =>
    target$.saveOffset;
