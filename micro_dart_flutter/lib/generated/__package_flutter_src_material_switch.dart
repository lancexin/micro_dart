// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/switch.dart';
import 'dart:ui';
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/shadows.dart';
import 'package:flutter/src/material/switch_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/material/toggleable.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/switch.dart',
  {
    'Switch.': _Switch__$,
    'Switch.adaptive': _Switch_adaptive_$,
  },
  {},
  {
    'Switch': m.ClassMirror(
      'Switch',
      {
        '#as': Switch_as$,
        '#is': Switch_is$,
        'value': _Switch_value$,
        'onChanged': _Switch_onChanged$,
        'activeColor': _Switch_activeColor$,
        'activeTrackColor': _Switch_activeTrackColor$,
        'inactiveThumbColor': _Switch_inactiveThumbColor$,
        'inactiveTrackColor': _Switch_inactiveTrackColor$,
        'activeThumbImage': _Switch_activeThumbImage$,
        'onActiveThumbImageError': _Switch_onActiveThumbImageError$,
        'inactiveThumbImage': _Switch_inactiveThumbImage$,
        'onInactiveThumbImageError': _Switch_onInactiveThumbImageError$,
        'thumbColor': _Switch_thumbColor$,
        'trackColor': _Switch_trackColor$,
        'trackOutlineColor': _Switch_trackOutlineColor$,
        'thumbIcon': _Switch_thumbIcon$,
        'materialTapTargetSize': _Switch_materialTapTargetSize$,
        'applyCupertinoTheme': _Switch_applyCupertinoTheme$,
        'dragStartBehavior': _Switch_dragStartBehavior$,
        'mouseCursor': _Switch_mouseCursor$,
        'focusColor': _Switch_focusColor$,
        'hoverColor': _Switch_hoverColor$,
        'overlayColor': _Switch_overlayColor$,
        'splashRadius': _Switch_splashRadius$,
        'focusNode': _Switch_focusNode$,
        'onFocusChange': _Switch_onFocusChange$,
        'autofocus': _Switch_autofocus$,
        'build': _Switch_build$,
        'debugFillProperties': _Switch_debugFillProperties$,
      },
      {},
    )
  },
);
Function Switch_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Switch;
Function Switch_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Switch;
Function _Switch_value$(
  m.Scope scope$,
  Switch target$,
) =>
    () {
      return target$.value;
    };
Function _Switch_onChanged$(
  m.Scope scope$,
  Switch target$,
) =>
    () {
      return target$.onChanged;
    };
Function _Switch_activeColor$(
  m.Scope scope$,
  Switch target$,
) =>
    () {
      return target$.activeColor;
    };
Function _Switch_activeTrackColor$(
  m.Scope scope$,
  Switch target$,
) =>
    () {
      return target$.activeTrackColor;
    };
Function _Switch_inactiveThumbColor$(
  m.Scope scope$,
  Switch target$,
) =>
    () {
      return target$.inactiveThumbColor;
    };
Function _Switch_inactiveTrackColor$(
  m.Scope scope$,
  Switch target$,
) =>
    () {
      return target$.inactiveTrackColor;
    };
Function _Switch_activeThumbImage$(
  m.Scope scope$,
  Switch target$,
) =>
    () {
      return target$.activeThumbImage;
    };
Function _Switch_onActiveThumbImageError$(
  m.Scope scope$,
  Switch target$,
) =>
    () {
      return target$.onActiveThumbImageError;
    };
Function _Switch_inactiveThumbImage$(
  m.Scope scope$,
  Switch target$,
) =>
    () {
      return target$.inactiveThumbImage;
    };
Function _Switch_onInactiveThumbImageError$(
  m.Scope scope$,
  Switch target$,
) =>
    () {
      return target$.onInactiveThumbImageError;
    };
Function _Switch_thumbColor$(
  m.Scope scope$,
  Switch target$,
) =>
    () {
      return target$.thumbColor;
    };
Function _Switch_trackColor$(
  m.Scope scope$,
  Switch target$,
) =>
    () {
      return target$.trackColor;
    };
Function _Switch_trackOutlineColor$(
  m.Scope scope$,
  Switch target$,
) =>
    () {
      return target$.trackOutlineColor;
    };
Function _Switch_thumbIcon$(
  m.Scope scope$,
  Switch target$,
) =>
    () {
      return target$.thumbIcon;
    };
Function _Switch_materialTapTargetSize$(
  m.Scope scope$,
  Switch target$,
) =>
    () {
      return target$.materialTapTargetSize;
    };
Function _Switch_applyCupertinoTheme$(
  m.Scope scope$,
  Switch target$,
) =>
    () {
      return target$.applyCupertinoTheme;
    };
Function _Switch_dragStartBehavior$(
  m.Scope scope$,
  Switch target$,
) =>
    () {
      return target$.dragStartBehavior;
    };
Function _Switch_mouseCursor$(
  m.Scope scope$,
  Switch target$,
) =>
    () {
      return target$.mouseCursor;
    };
Function _Switch_focusColor$(
  m.Scope scope$,
  Switch target$,
) =>
    () {
      return target$.focusColor;
    };
Function _Switch_hoverColor$(
  m.Scope scope$,
  Switch target$,
) =>
    () {
      return target$.hoverColor;
    };
Function _Switch_overlayColor$(
  m.Scope scope$,
  Switch target$,
) =>
    () {
      return target$.overlayColor;
    };
Function _Switch_splashRadius$(
  m.Scope scope$,
  Switch target$,
) =>
    () {
      return target$.splashRadius;
    };
Function _Switch_focusNode$(
  m.Scope scope$,
  Switch target$,
) =>
    () {
      return target$.focusNode;
    };
Function _Switch_onFocusChange$(
  m.Scope scope$,
  Switch target$,
) =>
    () {
      return target$.onFocusChange;
    };
Function _Switch_autofocus$(
  m.Scope scope$,
  Switch target$,
) =>
    () {
      return target$.autofocus;
    };
Function _Switch__$(m.Scope scope$) => ({
      Key? key,
      required bool value,
      required m.FunctionPointer? onChanged,
      Color? activeColor,
      Color? activeTrackColor,
      Color? inactiveThumbColor,
      Color? inactiveTrackColor,
      ImageProvider<Object>? activeThumbImage,
      m.FunctionPointer? onActiveThumbImageError,
      ImageProvider<Object>? inactiveThumbImage,
      m.FunctionPointer? onInactiveThumbImageError,
      MaterialStateProperty<Color>? thumbColor,
      MaterialStateProperty<Color>? trackColor,
      MaterialStateProperty<Color>? trackOutlineColor,
      MaterialStateProperty<Icon>? thumbIcon,
      MaterialTapTargetSize? materialTapTargetSize,
      DragStartBehavior? dragStartBehavior,
      MouseCursor? mouseCursor,
      Color? focusColor,
      Color? hoverColor,
      MaterialStateProperty<Color>? overlayColor,
      double? splashRadius,
      FocusNode? focusNode,
      m.FunctionPointer? onFocusChange,
      bool? autofocus,
    }) {
      void onActiveThumbImageErrorProxy(
        Object onActiveThumbImageError_exception$,
        StackTrace? onActiveThumbImageError_stackTrace$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onActiveThumbImageError!,
            [
              onActiveThumbImageError_exception$,
              onActiveThumbImageError_stackTrace$,
            ],
            {},
          );
      void onChangedProxy(bool onChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChanged!,
            [onChanged_value$],
            {},
          );
      void onFocusChangeProxy(bool onFocusChange_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onFocusChange!,
            [onFocusChange_value$],
            {},
          );
      void onInactiveThumbImageErrorProxy(
        Object onInactiveThumbImageError_exception$,
        StackTrace? onInactiveThumbImageError_stackTrace$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onInactiveThumbImageError!,
            [
              onInactiveThumbImageError_exception$,
              onInactiveThumbImageError_stackTrace$,
            ],
            {},
          );
      return Switch(
        activeColor: activeColor,
        activeThumbImage: activeThumbImage,
        activeTrackColor: activeTrackColor,
        autofocus: autofocus ?? false,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        focusColor: focusColor,
        focusNode: focusNode,
        hoverColor: hoverColor,
        inactiveThumbColor: inactiveThumbColor,
        inactiveThumbImage: inactiveThumbImage,
        inactiveTrackColor: inactiveTrackColor,
        key: key,
        materialTapTargetSize: materialTapTargetSize,
        mouseCursor: mouseCursor,
        onActiveThumbImageError: onActiveThumbImageError == null
            ? null
            : onActiveThumbImageErrorProxy,
        onChanged: onChanged == null ? null : onChangedProxy,
        onFocusChange: onFocusChange == null ? null : onFocusChangeProxy,
        onInactiveThumbImageError: onInactiveThumbImageError == null
            ? null
            : onInactiveThumbImageErrorProxy,
        overlayColor: overlayColor,
        splashRadius: splashRadius,
        thumbColor: thumbColor,
        thumbIcon: thumbIcon,
        trackColor: trackColor,
        trackOutlineColor: trackOutlineColor,
        value: value,
      );
    };
Function _Switch_adaptive_$(m.Scope scope$) => ({
      Key? key,
      required bool value,
      required m.FunctionPointer? onChanged,
      Color? activeColor,
      Color? activeTrackColor,
      Color? inactiveThumbColor,
      Color? inactiveTrackColor,
      ImageProvider<Object>? activeThumbImage,
      m.FunctionPointer? onActiveThumbImageError,
      ImageProvider<Object>? inactiveThumbImage,
      m.FunctionPointer? onInactiveThumbImageError,
      MaterialTapTargetSize? materialTapTargetSize,
      MaterialStateProperty<Color>? thumbColor,
      MaterialStateProperty<Color>? trackColor,
      MaterialStateProperty<Color>? trackOutlineColor,
      MaterialStateProperty<Icon>? thumbIcon,
      DragStartBehavior? dragStartBehavior,
      MouseCursor? mouseCursor,
      Color? focusColor,
      Color? hoverColor,
      MaterialStateProperty<Color>? overlayColor,
      double? splashRadius,
      FocusNode? focusNode,
      m.FunctionPointer? onFocusChange,
      bool? autofocus,
      bool? applyCupertinoTheme,
    }) {
      void onActiveThumbImageErrorProxy(
        Object onActiveThumbImageError_exception$,
        StackTrace? onActiveThumbImageError_stackTrace$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onActiveThumbImageError!,
            [
              onActiveThumbImageError_exception$,
              onActiveThumbImageError_stackTrace$,
            ],
            {},
          );
      void onChangedProxy(bool onChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChanged!,
            [onChanged_value$],
            {},
          );
      void onFocusChangeProxy(bool onFocusChange_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onFocusChange!,
            [onFocusChange_value$],
            {},
          );
      void onInactiveThumbImageErrorProxy(
        Object onInactiveThumbImageError_exception$,
        StackTrace? onInactiveThumbImageError_stackTrace$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onInactiveThumbImageError!,
            [
              onInactiveThumbImageError_exception$,
              onInactiveThumbImageError_stackTrace$,
            ],
            {},
          );
      return Switch.adaptive(
        activeColor: activeColor,
        activeThumbImage: activeThumbImage,
        activeTrackColor: activeTrackColor,
        applyCupertinoTheme: applyCupertinoTheme,
        autofocus: autofocus ?? false,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        focusColor: focusColor,
        focusNode: focusNode,
        hoverColor: hoverColor,
        inactiveThumbColor: inactiveThumbColor,
        inactiveThumbImage: inactiveThumbImage,
        inactiveTrackColor: inactiveTrackColor,
        key: key,
        materialTapTargetSize: materialTapTargetSize,
        mouseCursor: mouseCursor,
        onActiveThumbImageError: onActiveThumbImageError == null
            ? null
            : onActiveThumbImageErrorProxy,
        onChanged: onChanged == null ? null : onChangedProxy,
        onFocusChange: onFocusChange == null ? null : onFocusChangeProxy,
        onInactiveThumbImageError: onInactiveThumbImageError == null
            ? null
            : onInactiveThumbImageErrorProxy,
        overlayColor: overlayColor,
        splashRadius: splashRadius,
        thumbColor: thumbColor,
        thumbIcon: thumbIcon,
        trackColor: trackColor,
        trackOutlineColor: trackOutlineColor,
        value: value,
      );
    };
Function _Switch_build$(
  m.Scope scope$,
  Switch target$,
) =>
    target$.build;
Function _Switch_debugFillProperties$(
  m.Scope scope$,
  Switch target$,
) =>
    target$.debugFillProperties;
