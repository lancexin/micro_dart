// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/switch.dart';
import 'dart:ui';
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/shadows.dart';
import 'package:flutter/src/material/switch_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/material/toggleable.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/switch.dart',
  {},
  {},
  {
    'Switch': m.ClassMirror(
      'Switch',
      {
        '#as': Switch_as$,
        '#is': Switch_is$,
        'value': _Switch_value$,
        'onChanged': _Switch_onChanged$,
        'activeColor': _Switch_activeColor$,
        'activeTrackColor': _Switch_activeTrackColor$,
        'inactiveThumbColor': _Switch_inactiveThumbColor$,
        'inactiveTrackColor': _Switch_inactiveTrackColor$,
        'activeThumbImage': _Switch_activeThumbImage$,
        'onActiveThumbImageError': _Switch_onActiveThumbImageError$,
        'inactiveThumbImage': _Switch_inactiveThumbImage$,
        'onInactiveThumbImageError': _Switch_onInactiveThumbImageError$,
        'thumbColor': _Switch_thumbColor$,
        'trackColor': _Switch_trackColor$,
        'trackOutlineColor': _Switch_trackOutlineColor$,
        'thumbIcon': _Switch_thumbIcon$,
        'materialTapTargetSize': _Switch_materialTapTargetSize$,
        'applyCupertinoTheme': _Switch_applyCupertinoTheme$,
        'dragStartBehavior': _Switch_dragStartBehavior$,
        'mouseCursor': _Switch_mouseCursor$,
        'focusColor': _Switch_focusColor$,
        'hoverColor': _Switch_hoverColor$,
        'overlayColor': _Switch_overlayColor$,
        'splashRadius': _Switch_splashRadius$,
        'focusNode': _Switch_focusNode$,
        'onFocusChange': _Switch_onFocusChange$,
        'autofocus': _Switch_autofocus$,
        'build': _Switch_build$,
        'debugFillProperties': _Switch_debugFillProperties$,
      },
      {},
    )
  },
);
Function Switch_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Switch;
Function Switch_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Switch;
bool _Switch_value$(Switch target) {
  return target.value;
}

void Function(bool)? _Switch_onChanged$(Switch target) {
  return target.onChanged;
}

Color? _Switch_activeColor$(Switch target) {
  return target.activeColor;
}

Color? _Switch_activeTrackColor$(Switch target) {
  return target.activeTrackColor;
}

Color? _Switch_inactiveThumbColor$(Switch target) {
  return target.inactiveThumbColor;
}

Color? _Switch_inactiveTrackColor$(Switch target) {
  return target.inactiveTrackColor;
}

ImageProvider<Object>? _Switch_activeThumbImage$(Switch target) {
  return target.activeThumbImage;
}

void Function(Object, StackTrace?)? _Switch_onActiveThumbImageError$(
    Switch target) {
  return target.onActiveThumbImageError;
}

ImageProvider<Object>? _Switch_inactiveThumbImage$(Switch target) {
  return target.inactiveThumbImage;
}

void Function(Object, StackTrace?)? _Switch_onInactiveThumbImageError$(
    Switch target) {
  return target.onInactiveThumbImageError;
}

MaterialStateProperty<Color?>? _Switch_thumbColor$(Switch target) {
  return target.thumbColor;
}

MaterialStateProperty<Color?>? _Switch_trackColor$(Switch target) {
  return target.trackColor;
}

MaterialStateProperty<Color?>? _Switch_trackOutlineColor$(Switch target) {
  return target.trackOutlineColor;
}

MaterialStateProperty<Icon?>? _Switch_thumbIcon$(Switch target) {
  return target.thumbIcon;
}

MaterialTapTargetSize? _Switch_materialTapTargetSize$(Switch target) {
  return target.materialTapTargetSize;
}

bool? _Switch_applyCupertinoTheme$(Switch target) {
  return target.applyCupertinoTheme;
}

DragStartBehavior _Switch_dragStartBehavior$(Switch target) {
  return target.dragStartBehavior;
}

MouseCursor? _Switch_mouseCursor$(Switch target) {
  return target.mouseCursor;
}

Color? _Switch_focusColor$(Switch target) {
  return target.focusColor;
}

Color? _Switch_hoverColor$(Switch target) {
  return target.hoverColor;
}

MaterialStateProperty<Color?>? _Switch_overlayColor$(Switch target) {
  return target.overlayColor;
}

double? _Switch_splashRadius$(Switch target) {
  return target.splashRadius;
}

FocusNode? _Switch_focusNode$(Switch target) {
  return target.focusNode;
}

void Function(bool)? _Switch_onFocusChange$(Switch target) {
  return target.onFocusChange;
}

bool _Switch_autofocus$(Switch target) {
  return target.autofocus;
}

Function _Switch_build$(
  m.Scope scope,
  Switch target,
) =>
    target.build;
Function _Switch_debugFillProperties$(
  m.Scope scope,
  Switch target,
) =>
    target.debugFillProperties;
