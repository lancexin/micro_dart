// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/arc.dart';
import 'dart:math';
import 'dart:ui' show lerpDouble;
import 'package:flutter/animation.dart';
import 'package:flutter/foundation.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/arc.dart',
  {},
  {},
  {
    'MaterialPointArcTween': m.ClassMirror(
      'MaterialPointArcTween',
      {
        'center': _MaterialPointArcTween_center$,
        'radius': _MaterialPointArcTween_radius$,
        'beginAngle': _MaterialPointArcTween_beginAngle$,
        'endAngle': _MaterialPointArcTween_endAngle$,
        'lerp': _MaterialPointArcTween_lerp$,
        'toString': _MaterialPointArcTween_toString$,
      },
      {
        'begin': _MaterialPointArcTween_begin_set$,
        'end': _MaterialPointArcTween_end_set$,
      },
    ),
    'MaterialRectArcTween': m.ClassMirror(
      'MaterialRectArcTween',
      {
        'beginArc': _MaterialRectArcTween_beginArc$,
        'endArc': _MaterialRectArcTween_endArc$,
        'lerp': _MaterialRectArcTween_lerp$,
        'toString': _MaterialRectArcTween_toString$,
      },
      {
        'begin': _MaterialRectArcTween_begin_set$,
        'end': _MaterialRectArcTween_end_set$,
      },
    ),
    'MaterialRectCenterArcTween': m.ClassMirror(
      'MaterialRectCenterArcTween',
      {
        'centerArc': _MaterialRectCenterArcTween_centerArc$,
        'lerp': _MaterialRectCenterArcTween_lerp$,
        'toString': _MaterialRectCenterArcTween_toString$,
      },
      {
        'begin': _MaterialRectCenterArcTween_begin_set$,
        'end': _MaterialRectCenterArcTween_end_set$,
      },
    ),
  },
);
Offset? _MaterialPointArcTween_center$(MaterialPointArcTween target) {
  return target.center;
}

double? _MaterialPointArcTween_radius$(MaterialPointArcTween target) {
  return target.radius;
}

double? _MaterialPointArcTween_beginAngle$(MaterialPointArcTween target) {
  return target.beginAngle;
}

double? _MaterialPointArcTween_endAngle$(MaterialPointArcTween target) {
  return target.endAngle;
}

void _MaterialPointArcTween_begin_set$(
  MaterialPointArcTween target,
  Offset? other,
) {
  target.begin = other;
}

void _MaterialPointArcTween_end_set$(
  MaterialPointArcTween target,
  Offset? other,
) {
  target.end = other;
}

Function _MaterialPointArcTween_lerp$(
  m.Scope scope,
  MaterialPointArcTween target,
) =>
    target.lerp;
Function _MaterialPointArcTween_toString$(
  m.Scope scope,
  MaterialPointArcTween target,
) =>
    target.toString;
MaterialPointArcTween? _MaterialRectArcTween_beginArc$(
    MaterialRectArcTween target) {
  return target.beginArc;
}

MaterialPointArcTween? _MaterialRectArcTween_endArc$(
    MaterialRectArcTween target) {
  return target.endArc;
}

void _MaterialRectArcTween_begin_set$(
  MaterialRectArcTween target,
  Rect? other,
) {
  target.begin = other;
}

void _MaterialRectArcTween_end_set$(
  MaterialRectArcTween target,
  Rect? other,
) {
  target.end = other;
}

Function _MaterialRectArcTween_lerp$(
  m.Scope scope,
  MaterialRectArcTween target,
) =>
    target.lerp;
Function _MaterialRectArcTween_toString$(
  m.Scope scope,
  MaterialRectArcTween target,
) =>
    target.toString;
MaterialPointArcTween? _MaterialRectCenterArcTween_centerArc$(
    MaterialRectCenterArcTween target) {
  return target.centerArc;
}

void _MaterialRectCenterArcTween_begin_set$(
  MaterialRectCenterArcTween target,
  Rect? other,
) {
  target.begin = other;
}

void _MaterialRectCenterArcTween_end_set$(
  MaterialRectCenterArcTween target,
  Rect? other,
) {
  target.end = other;
}

Function _MaterialRectCenterArcTween_lerp$(
  m.Scope scope,
  MaterialRectCenterArcTween target,
) =>
    target.lerp;
Function _MaterialRectCenterArcTween_toString$(
  m.Scope scope,
  MaterialRectCenterArcTween target,
) =>
    target.toString;
