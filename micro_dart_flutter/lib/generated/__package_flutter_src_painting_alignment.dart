// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/alignment.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/src/painting/basic_types.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/alignment.dart',
  {
    'AlignmentGeometry.lerp': _AlignmentGeometry_lerp$,
    'Alignment.topLeft': _Alignment_topLeft$,
    'Alignment.topCenter': _Alignment_topCenter$,
    'Alignment.topRight': _Alignment_topRight$,
    'Alignment.centerLeft': _Alignment_centerLeft$,
    'Alignment.center': _Alignment_center$,
    'Alignment.centerRight': _Alignment_centerRight$,
    'Alignment.bottomLeft': _Alignment_bottomLeft$,
    'Alignment.bottomCenter': _Alignment_bottomCenter$,
    'Alignment.bottomRight': _Alignment_bottomRight$,
    'Alignment.lerp': _Alignment_lerp$,
    'AlignmentDirectional.topStart': _AlignmentDirectional_topStart$,
    'AlignmentDirectional.topCenter': _AlignmentDirectional_topCenter$,
    'AlignmentDirectional.topEnd': _AlignmentDirectional_topEnd$,
    'AlignmentDirectional.centerStart': _AlignmentDirectional_centerStart$,
    'AlignmentDirectional.center': _AlignmentDirectional_center$,
    'AlignmentDirectional.centerEnd': _AlignmentDirectional_centerEnd$,
    'AlignmentDirectional.bottomStart': _AlignmentDirectional_bottomStart$,
    'AlignmentDirectional.bottomCenter': _AlignmentDirectional_bottomCenter$,
    'AlignmentDirectional.bottomEnd': _AlignmentDirectional_bottomEnd$,
    'AlignmentDirectional.lerp': _AlignmentDirectional_lerp$,
    'TextAlignVertical.top': _TextAlignVertical_top$,
    'TextAlignVertical.center': _TextAlignVertical_center$,
    'TextAlignVertical.bottom': _TextAlignVertical_bottom$,
  },
  {},
  {
    'AlignmentGeometry': m.ClassMirror(
      'AlignmentGeometry',
      {
        'hashCode': _AlignmentGeometry_hashCode$,
        'add': _AlignmentGeometry_add$,
        'resolve': _AlignmentGeometry_resolve$,
        'toString': _AlignmentGeometry_toString$,
      },
      {},
    ),
    'Alignment': m.ClassMirror(
      'Alignment',
      {
        'x': _Alignment_x$,
        'y': _Alignment_y$,
        'add': _Alignment_add$,
        'alongOffset': _Alignment_alongOffset$,
        'alongSize': _Alignment_alongSize$,
        'withinRect': _Alignment_withinRect$,
        'inscribe': _Alignment_inscribe$,
        'resolve': _Alignment_resolve$,
        'toString': _Alignment_toString$,
      },
      {},
    ),
    'AlignmentDirectional': m.ClassMirror(
      'AlignmentDirectional',
      {
        'start': _AlignmentDirectional_start$,
        'y': _AlignmentDirectional_y$,
        'add': _AlignmentDirectional_add$,
        'resolve': _AlignmentDirectional_resolve$,
        'toString': _AlignmentDirectional_toString$,
      },
      {},
    ),
    'TextAlignVertical': m.ClassMirror(
      'TextAlignVertical',
      {
        'y': _TextAlignVertical_y$,
        'toString': _TextAlignVertical_toString$,
      },
      {},
    ),
  },
);
int _AlignmentGeometry_hashCode$(AlignmentGeometry target) {
  return target.hashCode;
}

Function _AlignmentGeometry_add$(
  m.Scope scope,
  AlignmentGeometry target,
) =>
    target.add;
Function _AlignmentGeometry_lerp$(m.Scope scope) => AlignmentGeometry.lerp;
Function _AlignmentGeometry_resolve$(
  m.Scope scope,
  AlignmentGeometry target,
) =>
    target.resolve;
Function _AlignmentGeometry_toString$(
  m.Scope scope,
  AlignmentGeometry target,
) =>
    target.toString;
double _Alignment_x$(Alignment target) {
  return target.x;
}

double _Alignment_y$(Alignment target) {
  return target.y;
}

Alignment _Alignment_topLeft$() {
  return Alignment.topLeft;
}

Alignment _Alignment_topCenter$() {
  return Alignment.topCenter;
}

Alignment _Alignment_topRight$() {
  return Alignment.topRight;
}

Alignment _Alignment_centerLeft$() {
  return Alignment.centerLeft;
}

Alignment _Alignment_center$() {
  return Alignment.center;
}

Alignment _Alignment_centerRight$() {
  return Alignment.centerRight;
}

Alignment _Alignment_bottomLeft$() {
  return Alignment.bottomLeft;
}

Alignment _Alignment_bottomCenter$() {
  return Alignment.bottomCenter;
}

Alignment _Alignment_bottomRight$() {
  return Alignment.bottomRight;
}

Function _Alignment_add$(
  m.Scope scope,
  Alignment target,
) =>
    target.add;
Function _Alignment_alongOffset$(
  m.Scope scope,
  Alignment target,
) =>
    target.alongOffset;
Function _Alignment_alongSize$(
  m.Scope scope,
  Alignment target,
) =>
    target.alongSize;
Function _Alignment_withinRect$(
  m.Scope scope,
  Alignment target,
) =>
    target.withinRect;
Function _Alignment_inscribe$(
  m.Scope scope,
  Alignment target,
) =>
    target.inscribe;
Function _Alignment_lerp$(m.Scope scope) => Alignment.lerp;
Function _Alignment_resolve$(
  m.Scope scope,
  Alignment target,
) =>
    target.resolve;
Function _Alignment_toString$(
  m.Scope scope,
  Alignment target,
) =>
    target.toString;
double _AlignmentDirectional_start$(AlignmentDirectional target) {
  return target.start;
}

double _AlignmentDirectional_y$(AlignmentDirectional target) {
  return target.y;
}

AlignmentDirectional _AlignmentDirectional_topStart$() {
  return AlignmentDirectional.topStart;
}

AlignmentDirectional _AlignmentDirectional_topCenter$() {
  return AlignmentDirectional.topCenter;
}

AlignmentDirectional _AlignmentDirectional_topEnd$() {
  return AlignmentDirectional.topEnd;
}

AlignmentDirectional _AlignmentDirectional_centerStart$() {
  return AlignmentDirectional.centerStart;
}

AlignmentDirectional _AlignmentDirectional_center$() {
  return AlignmentDirectional.center;
}

AlignmentDirectional _AlignmentDirectional_centerEnd$() {
  return AlignmentDirectional.centerEnd;
}

AlignmentDirectional _AlignmentDirectional_bottomStart$() {
  return AlignmentDirectional.bottomStart;
}

AlignmentDirectional _AlignmentDirectional_bottomCenter$() {
  return AlignmentDirectional.bottomCenter;
}

AlignmentDirectional _AlignmentDirectional_bottomEnd$() {
  return AlignmentDirectional.bottomEnd;
}

Function _AlignmentDirectional_add$(
  m.Scope scope,
  AlignmentDirectional target,
) =>
    target.add;
Function _AlignmentDirectional_lerp$(m.Scope scope) =>
    AlignmentDirectional.lerp;
Function _AlignmentDirectional_resolve$(
  m.Scope scope,
  AlignmentDirectional target,
) =>
    target.resolve;
Function _AlignmentDirectional_toString$(
  m.Scope scope,
  AlignmentDirectional target,
) =>
    target.toString;
double _TextAlignVertical_y$(TextAlignVertical target) {
  return target.y;
}

TextAlignVertical _TextAlignVertical_top$() {
  return TextAlignVertical.top;
}

TextAlignVertical _TextAlignVertical_center$() {
  return TextAlignVertical.center;
}

TextAlignVertical _TextAlignVertical_bottom$() {
  return TextAlignVertical.bottom;
}

Function _TextAlignVertical_toString$(
  m.Scope scope,
  TextAlignVertical target,
) =>
    target.toString;
