// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/banner_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/banner_theme.dart',
  {
    'MaterialBannerThemeData.lerp': _MaterialBannerThemeData_lerp$,
    'MaterialBannerTheme.of': _MaterialBannerTheme_of$,
  },
  {},
  {
    'MaterialBannerThemeData': m.ClassMirror(
      'MaterialBannerThemeData',
      {
        'backgroundColor': _MaterialBannerThemeData_backgroundColor$,
        'surfaceTintColor': _MaterialBannerThemeData_surfaceTintColor$,
        'shadowColor': _MaterialBannerThemeData_shadowColor$,
        'dividerColor': _MaterialBannerThemeData_dividerColor$,
        'contentTextStyle': _MaterialBannerThemeData_contentTextStyle$,
        'elevation': _MaterialBannerThemeData_elevation$,
        'padding': _MaterialBannerThemeData_padding$,
        'leadingPadding': _MaterialBannerThemeData_leadingPadding$,
        'hashCode': _MaterialBannerThemeData_hashCode$,
        'copyWith': _MaterialBannerThemeData_copyWith$,
        'debugFillProperties': _MaterialBannerThemeData_debugFillProperties$,
      },
      {},
    ),
    'MaterialBannerTheme': m.ClassMirror(
      'MaterialBannerTheme',
      {
        'data': _MaterialBannerTheme_data$,
        'wrap': _MaterialBannerTheme_wrap$,
        'updateShouldNotify': _MaterialBannerTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Color? _MaterialBannerThemeData_backgroundColor$(
    MaterialBannerThemeData target) {
  return target.backgroundColor;
}

Color? _MaterialBannerThemeData_surfaceTintColor$(
    MaterialBannerThemeData target) {
  return target.surfaceTintColor;
}

Color? _MaterialBannerThemeData_shadowColor$(MaterialBannerThemeData target) {
  return target.shadowColor;
}

Color? _MaterialBannerThemeData_dividerColor$(MaterialBannerThemeData target) {
  return target.dividerColor;
}

TextStyle? _MaterialBannerThemeData_contentTextStyle$(
    MaterialBannerThemeData target) {
  return target.contentTextStyle;
}

double? _MaterialBannerThemeData_elevation$(MaterialBannerThemeData target) {
  return target.elevation;
}

EdgeInsetsGeometry? _MaterialBannerThemeData_padding$(
    MaterialBannerThemeData target) {
  return target.padding;
}

EdgeInsetsGeometry? _MaterialBannerThemeData_leadingPadding$(
    MaterialBannerThemeData target) {
  return target.leadingPadding;
}

int _MaterialBannerThemeData_hashCode$(MaterialBannerThemeData target) {
  return target.hashCode;
}

Function _MaterialBannerThemeData_copyWith$(
  m.Scope scope,
  MaterialBannerThemeData target,
) =>
    target.copyWith;
Function _MaterialBannerThemeData_lerp$(m.Scope scope) =>
    MaterialBannerThemeData.lerp;
Function _MaterialBannerThemeData_debugFillProperties$(
  m.Scope scope,
  MaterialBannerThemeData target,
) =>
    target.debugFillProperties;
MaterialBannerThemeData? _MaterialBannerTheme_data$(
    MaterialBannerTheme target) {
  return target.data;
}

Function _MaterialBannerTheme_of$(m.Scope scope) => MaterialBannerTheme.of;
Function _MaterialBannerTheme_wrap$(
  m.Scope scope,
  MaterialBannerTheme target,
) =>
    target.wrap;
Function _MaterialBannerTheme_updateShouldNotify$(
  m.Scope scope,
  MaterialBannerTheme target,
) =>
    target.updateShouldNotify;
