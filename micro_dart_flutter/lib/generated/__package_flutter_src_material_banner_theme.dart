// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/banner_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/banner_theme.dart',
  {
    'MaterialBannerThemeData.': _MaterialBannerThemeData__$,
    'MaterialBannerThemeData.lerp': _MaterialBannerThemeData_lerp$,
    'MaterialBannerTheme.': _MaterialBannerTheme__$,
    'MaterialBannerTheme.of': _MaterialBannerTheme_of$,
  },
  {},
  {
    'MaterialBannerThemeData': m.ClassMirror(
      'MaterialBannerThemeData',
      {
        '#as': MaterialBannerThemeData_as$,
        '#is': MaterialBannerThemeData_is$,
        'backgroundColor': _MaterialBannerThemeData_backgroundColor$,
        'surfaceTintColor': _MaterialBannerThemeData_surfaceTintColor$,
        'shadowColor': _MaterialBannerThemeData_shadowColor$,
        'dividerColor': _MaterialBannerThemeData_dividerColor$,
        'contentTextStyle': _MaterialBannerThemeData_contentTextStyle$,
        'elevation': _MaterialBannerThemeData_elevation$,
        'padding': _MaterialBannerThemeData_padding$,
        'leadingPadding': _MaterialBannerThemeData_leadingPadding$,
        'hashCode': _MaterialBannerThemeData_hashCode$,
        'copyWith': _MaterialBannerThemeData_copyWith$,
        '==': _MaterialBannerThemeData_eq$$,
        'debugFillProperties': _MaterialBannerThemeData_debugFillProperties$,
      },
      {},
    ),
    'MaterialBannerTheme': m.ClassMirror(
      'MaterialBannerTheme',
      {
        '#as': MaterialBannerTheme_as$,
        '#is': MaterialBannerTheme_is$,
        'data': _MaterialBannerTheme_data$,
        'wrap': _MaterialBannerTheme_wrap$,
        'updateShouldNotify': _MaterialBannerTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function MaterialBannerThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MaterialBannerThemeData;
Function MaterialBannerThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MaterialBannerThemeData;
Function _MaterialBannerThemeData_backgroundColor$(
  m.Scope scope$,
  MaterialBannerThemeData target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _MaterialBannerThemeData_surfaceTintColor$(
  m.Scope scope$,
  MaterialBannerThemeData target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _MaterialBannerThemeData_shadowColor$(
  m.Scope scope$,
  MaterialBannerThemeData target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _MaterialBannerThemeData_dividerColor$(
  m.Scope scope$,
  MaterialBannerThemeData target$,
) =>
    () {
      return target$.dividerColor;
    };
Function _MaterialBannerThemeData_contentTextStyle$(
  m.Scope scope$,
  MaterialBannerThemeData target$,
) =>
    () {
      return target$.contentTextStyle;
    };
Function _MaterialBannerThemeData_elevation$(
  m.Scope scope$,
  MaterialBannerThemeData target$,
) =>
    () {
      return target$.elevation;
    };
Function _MaterialBannerThemeData_padding$(
  m.Scope scope$,
  MaterialBannerThemeData target$,
) =>
    () {
      return target$.padding;
    };
Function _MaterialBannerThemeData_leadingPadding$(
  m.Scope scope$,
  MaterialBannerThemeData target$,
) =>
    () {
      return target$.leadingPadding;
    };
Function _MaterialBannerThemeData_hashCode$(
  m.Scope scope$,
  MaterialBannerThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _MaterialBannerThemeData__$(m.Scope scope$) => ({
      Color? backgroundColor,
      Color? surfaceTintColor,
      Color? shadowColor,
      Color? dividerColor,
      TextStyle? contentTextStyle,
      double? elevation,
      EdgeInsetsGeometry? padding,
      EdgeInsetsGeometry? leadingPadding,
    }) {
      return MaterialBannerThemeData(
        backgroundColor: backgroundColor,
        contentTextStyle: contentTextStyle,
        dividerColor: dividerColor,
        elevation: elevation,
        leadingPadding: leadingPadding,
        padding: padding,
        shadowColor: shadowColor,
        surfaceTintColor: surfaceTintColor,
      );
    };
Function _MaterialBannerThemeData_copyWith$(
  m.Scope scope$,
  MaterialBannerThemeData target$,
) =>
    target$.copyWith;
Function _MaterialBannerThemeData_lerp$(m.Scope scope$) =>
    MaterialBannerThemeData.lerp;
Function _MaterialBannerThemeData_eq$$(
  m.Scope scope$,
  MaterialBannerThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _MaterialBannerThemeData_debugFillProperties$(
  m.Scope scope$,
  MaterialBannerThemeData target$,
) =>
    target$.debugFillProperties;
Function MaterialBannerTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MaterialBannerTheme;
Function MaterialBannerTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MaterialBannerTheme;
Function _MaterialBannerTheme_data$(
  m.Scope scope$,
  MaterialBannerTheme target$,
) =>
    () {
      return target$.data;
    };
Function _MaterialBannerTheme__$(m.Scope scope$) => ({
      Key? key,
      MaterialBannerThemeData? data,
      required Widget child,
    }) {
      return MaterialBannerTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _MaterialBannerTheme_of$(m.Scope scope$) => MaterialBannerTheme.of;
Function _MaterialBannerTheme_wrap$(
  m.Scope scope$,
  MaterialBannerTheme target$,
) =>
    target$.wrap;
Function _MaterialBannerTheme_updateShouldNotify$(
  m.Scope scope$,
  MaterialBannerTheme target$,
) =>
    target$.updateShouldNotify;
