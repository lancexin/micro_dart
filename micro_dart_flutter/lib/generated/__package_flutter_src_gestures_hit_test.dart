// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/gestures/hit_test.dart';
import 'package:flutter/foundation.dart';
import 'package:vector_math/vector_math_64.dart';
import 'package:flutter/src/gestures/events.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/gestures/hit_test.dart',
  {
    'HitTestEntry.': _HitTestEntry__$,
    'HitTestResult.': _HitTestResult__$,
    'HitTestResult.wrap': _HitTestResult_wrap_$,
  },
  {},
  {
    'HitTestable': m.ClassMirror(
      'HitTestable',
      {
        '#as': HitTestable_as$,
        '#is': HitTestable_is$,
        'hitTest': _HitTestable_hitTest$,
      },
      {},
    ),
    'HitTestDispatcher': m.ClassMirror(
      'HitTestDispatcher',
      {
        '#as': HitTestDispatcher_as$,
        '#is': HitTestDispatcher_is$,
        'dispatchEvent': _HitTestDispatcher_dispatchEvent$,
      },
      {},
    ),
    'HitTestTarget': m.ClassMirror(
      'HitTestTarget',
      {
        '#as': HitTestTarget_as$,
        '#is': HitTestTarget_is$,
        'handleEvent': _HitTestTarget_handleEvent$,
      },
      {},
    ),
    'HitTestEntry': m.ClassMirror(
      'HitTestEntry',
      {
        '#as': HitTestEntry_as$,
        '#is': HitTestEntry_is$,
        'target': _HitTestEntry_target$,
        'transform': _HitTestEntry_transform$,
        'toString': _HitTestEntry_toString$,
      },
      {},
    ),
    'HitTestResult': m.ClassMirror(
      'HitTestResult',
      {
        '#as': HitTestResult_as$,
        '#is': HitTestResult_is$,
        'path': _HitTestResult_path$,
        'add': _HitTestResult_add$,
        'pushTransform': _HitTestResult_pushTransform$,
        'pushOffset': _HitTestResult_pushOffset$,
        'popTransform': _HitTestResult_popTransform$,
        'toString': _HitTestResult_toString$,
      },
      {},
    ),
  },
);
Function HitTestable_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as HitTestable;
Function HitTestable_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is HitTestable;
Function _HitTestable_hitTest$(
  m.Scope scope$,
  HitTestable target$,
) =>
    target$.hitTest;
Function HitTestDispatcher_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as HitTestDispatcher;
Function HitTestDispatcher_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is HitTestDispatcher;
Function _HitTestDispatcher_dispatchEvent$(
  m.Scope scope$,
  HitTestDispatcher target$,
) =>
    target$.dispatchEvent;
Function HitTestTarget_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as HitTestTarget;
Function HitTestTarget_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is HitTestTarget;
Function _HitTestTarget_handleEvent$(
  m.Scope scope$,
  HitTestTarget target$,
) =>
    target$.handleEvent;
Function HitTestEntry_as$<T extends HitTestTarget>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as HitTestEntry<T>;
Function HitTestEntry_is$<T extends HitTestTarget>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is HitTestEntry<T>;
Function _HitTestEntry_target$<T extends HitTestTarget>(
  m.Scope scope$,
  HitTestEntry<T> target$,
) =>
    () {
      return target$.target;
    };
Function _HitTestEntry_transform$<T extends HitTestTarget>(
  m.Scope scope$,
  HitTestEntry<T> target$,
) =>
    () {
      return target$.transform;
    };
Function _HitTestEntry__$(m.Scope scope$) =>
    <T extends HitTestTarget>(dynamic target) {
      return HitTestEntry<T>(target);
    };
Function _HitTestEntry_toString$<T extends HitTestTarget>(
  m.Scope scope$,
  HitTestEntry<T> target$,
) =>
    target$.toString;
Function HitTestResult_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as HitTestResult;
Function HitTestResult_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is HitTestResult;
Function _HitTestResult_path$(
  m.Scope scope$,
  HitTestResult target$,
) =>
    () {
      return target$.path;
    };
Function _HitTestResult__$(m.Scope scope$) => () {
      return HitTestResult();
    };
Function _HitTestResult_wrap_$(m.Scope scope$) => HitTestResult.wrap;
Function _HitTestResult_add$(
  m.Scope scope$,
  HitTestResult target$,
) =>
    target$.add;
Function _HitTestResult_pushTransform$(
  m.Scope scope$,
  HitTestResult target$,
) =>
    target$.pushTransform;
Function _HitTestResult_pushOffset$(
  m.Scope scope$,
  HitTestResult target$,
) =>
    target$.pushOffset;
Function _HitTestResult_popTransform$(
  m.Scope scope$,
  HitTestResult target$,
) =>
    target$.popTransform;
Function _HitTestResult_toString$(
  m.Scope scope$,
  HitTestResult target$,
) =>
    target$.toString;
