// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/will_pop_scope.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/navigator.dart';
import 'package:flutter/src/widgets/routes.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/will_pop_scope.dart',
  {'WillPopScope.': _WillPopScope__$},
  {},
  {
    'WillPopScope': m.ClassMirror(
      'WillPopScope',
      {
        '#as': WillPopScope_as$,
        '#is': WillPopScope_is$,
        'child': _WillPopScope_child$,
        'onWillPop': _WillPopScope_onWillPop$,
        'createState': _WillPopScope_createState$,
      },
      {},
    )
  },
);
Function WillPopScope_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as WillPopScope;
Function WillPopScope_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is WillPopScope;
Function _WillPopScope_child$(
  m.Scope scope$,
  WillPopScope target$,
) =>
    () {
      return target$.child;
    };
Function _WillPopScope_onWillPop$(
  m.Scope scope$,
  WillPopScope target$,
) =>
    () {
      return target$.onWillPop;
    };
Function _WillPopScope__$(m.Scope scope$) => ({
      Key? key,
      required Widget child,
      required m.FunctionPointer? onWillPop,
    }) {
      Future<bool> onWillPopProxy() async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            onWillPop!,
            [],
            {},
          );
      return WillPopScope(
        child: child,
        key: key,
        onWillPop: onWillPop == null ? null : onWillPopProxy,
      );
    };
Function _WillPopScope_createState$(
  m.Scope scope$,
  WillPopScope target$,
) =>
    target$.createState;
