// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/media_query.dart';
import 'dart:math';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/binding.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/inherited_model.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/media_query.dart',
  {
    'MediaQueryData.': _MediaQueryData__$,
    'MediaQueryData.fromView': _MediaQueryData_fromView_$,
    'MediaQuery.': _MediaQuery__$,
    'MediaQuery.removePadding': _MediaQuery_removePadding_$,
    'MediaQuery.removeViewInsets': _MediaQuery_removeViewInsets_$,
    'MediaQuery.removeViewPadding': _MediaQuery_removeViewPadding_$,
    'MediaQuery.fromView': _MediaQuery_fromView$,
    'MediaQuery.of': _MediaQuery_of$,
    'MediaQuery.maybeOf': _MediaQuery_maybeOf$,
    'MediaQuery.sizeOf': _MediaQuery_sizeOf$,
    'MediaQuery.maybeSizeOf': _MediaQuery_maybeSizeOf$,
    'MediaQuery.orientationOf': _MediaQuery_orientationOf$,
    'MediaQuery.maybeOrientationOf': _MediaQuery_maybeOrientationOf$,
    'MediaQuery.devicePixelRatioOf': _MediaQuery_devicePixelRatioOf$,
    'MediaQuery.maybeDevicePixelRatioOf': _MediaQuery_maybeDevicePixelRatioOf$,
    'MediaQuery.textScaleFactorOf': _MediaQuery_textScaleFactorOf$,
    'MediaQuery.maybeTextScaleFactorOf': _MediaQuery_maybeTextScaleFactorOf$,
    'MediaQuery.platformBrightnessOf': _MediaQuery_platformBrightnessOf$,
    'MediaQuery.maybePlatformBrightnessOf':
        _MediaQuery_maybePlatformBrightnessOf$,
    'MediaQuery.paddingOf': _MediaQuery_paddingOf$,
    'MediaQuery.maybePaddingOf': _MediaQuery_maybePaddingOf$,
    'MediaQuery.viewInsetsOf': _MediaQuery_viewInsetsOf$,
    'MediaQuery.maybeViewInsetsOf': _MediaQuery_maybeViewInsetsOf$,
    'MediaQuery.systemGestureInsetsOf': _MediaQuery_systemGestureInsetsOf$,
    'MediaQuery.maybeSystemGestureInsetsOf':
        _MediaQuery_maybeSystemGestureInsetsOf$,
    'MediaQuery.viewPaddingOf': _MediaQuery_viewPaddingOf$,
    'MediaQuery.maybeViewPaddingOf': _MediaQuery_maybeViewPaddingOf$,
    'MediaQuery.alwaysUse24HourFormatOf': _MediaQuery_alwaysUse24HourFormatOf$,
    'MediaQuery.maybeAlwaysUse24HourFormatOf':
        _MediaQuery_maybeAlwaysUse24HourFormatOf$,
    'MediaQuery.accessibleNavigationOf': _MediaQuery_accessibleNavigationOf$,
    'MediaQuery.maybeAccessibleNavigationOf':
        _MediaQuery_maybeAccessibleNavigationOf$,
    'MediaQuery.invertColorsOf': _MediaQuery_invertColorsOf$,
    'MediaQuery.maybeInvertColorsOf': _MediaQuery_maybeInvertColorsOf$,
    'MediaQuery.highContrastOf': _MediaQuery_highContrastOf$,
    'MediaQuery.maybeHighContrastOf': _MediaQuery_maybeHighContrastOf$,
    'MediaQuery.disableAnimationsOf': _MediaQuery_disableAnimationsOf$,
    'MediaQuery.maybeDisableAnimationsOf':
        _MediaQuery_maybeDisableAnimationsOf$,
    'MediaQuery.boldTextOf': _MediaQuery_boldTextOf$,
    'MediaQuery.maybeBoldTextOf': _MediaQuery_maybeBoldTextOf$,
    'MediaQuery.navigationModeOf': _MediaQuery_navigationModeOf$,
    'MediaQuery.maybeNavigationModeOf': _MediaQuery_maybeNavigationModeOf$,
    'MediaQuery.gestureSettingsOf': _MediaQuery_gestureSettingsOf$,
    'MediaQuery.maybeGestureSettingsOf': _MediaQuery_maybeGestureSettingsOf$,
    'MediaQuery.displayFeaturesOf': _MediaQuery_displayFeaturesOf$,
    'MediaQuery.maybeDisplayFeaturesOf': _MediaQuery_maybeDisplayFeaturesOf$,
    'Orientation.portrait': _Orientation_portrait$,
    'Orientation.landscape': _Orientation_landscape$,
    'Orientation.values': _Orientation_values$,
    'NavigationMode.traditional': _NavigationMode_traditional$,
    'NavigationMode.directional': _NavigationMode_directional$,
    'NavigationMode.values': _NavigationMode_values$,
  },
  {},
  {
    'MediaQueryData': m.ClassMirror(
      'MediaQueryData',
      {
        '#as': MediaQueryData_as$,
        '#is': MediaQueryData_is$,
        'size': _MediaQueryData_size$,
        'devicePixelRatio': _MediaQueryData_devicePixelRatio$,
        'textScaleFactor': _MediaQueryData_textScaleFactor$,
        'platformBrightness': _MediaQueryData_platformBrightness$,
        'viewInsets': _MediaQueryData_viewInsets$,
        'padding': _MediaQueryData_padding$,
        'viewPadding': _MediaQueryData_viewPadding$,
        'systemGestureInsets': _MediaQueryData_systemGestureInsets$,
        'alwaysUse24HourFormat': _MediaQueryData_alwaysUse24HourFormat$,
        'accessibleNavigation': _MediaQueryData_accessibleNavigation$,
        'invertColors': _MediaQueryData_invertColors$,
        'highContrast': _MediaQueryData_highContrast$,
        'disableAnimations': _MediaQueryData_disableAnimations$,
        'boldText': _MediaQueryData_boldText$,
        'navigationMode': _MediaQueryData_navigationMode$,
        'gestureSettings': _MediaQueryData_gestureSettings$,
        'displayFeatures': _MediaQueryData_displayFeatures$,
        'orientation': _MediaQueryData_orientation$,
        'hashCode': _MediaQueryData_hashCode$,
        'copyWith': _MediaQueryData_copyWith$,
        'removePadding': _MediaQueryData_removePadding$,
        'removeViewInsets': _MediaQueryData_removeViewInsets$,
        'removeViewPadding': _MediaQueryData_removeViewPadding$,
        'removeDisplayFeatures': _MediaQueryData_removeDisplayFeatures$,
        '==': _MediaQueryData_eq$$,
        'toString': _MediaQueryData_toString$,
      },
      {},
    ),
    'MediaQuery': m.ClassMirror(
      'MediaQuery',
      {
        '#as': MediaQuery_as$,
        '#is': MediaQuery_is$,
        'data': _MediaQuery_data$,
        'updateShouldNotify': _MediaQuery_updateShouldNotify$,
        'debugFillProperties': _MediaQuery_debugFillProperties$,
        'updateShouldNotifyDependent': _MediaQuery_updateShouldNotifyDependent$,
      },
      {},
    ),
    'Orientation': m.ClassMirror(
      'Orientation',
      {},
      {},
    ),
    'NavigationMode': m.ClassMirror(
      'NavigationMode',
      {},
      {},
    ),
  },
);
Function MediaQueryData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MediaQueryData;
Function MediaQueryData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MediaQueryData;
Function _MediaQueryData_size$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    () {
      return target$.size;
    };
Function _MediaQueryData_devicePixelRatio$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    () {
      return target$.devicePixelRatio;
    };
Function _MediaQueryData_textScaleFactor$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    () {
      return target$.textScaleFactor;
    };
Function _MediaQueryData_platformBrightness$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    () {
      return target$.platformBrightness;
    };
Function _MediaQueryData_viewInsets$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    () {
      return target$.viewInsets;
    };
Function _MediaQueryData_padding$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    () {
      return target$.padding;
    };
Function _MediaQueryData_viewPadding$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    () {
      return target$.viewPadding;
    };
Function _MediaQueryData_systemGestureInsets$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    () {
      return target$.systemGestureInsets;
    };
Function _MediaQueryData_alwaysUse24HourFormat$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    () {
      return target$.alwaysUse24HourFormat;
    };
Function _MediaQueryData_accessibleNavigation$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    () {
      return target$.accessibleNavigation;
    };
Function _MediaQueryData_invertColors$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    () {
      return target$.invertColors;
    };
Function _MediaQueryData_highContrast$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    () {
      return target$.highContrast;
    };
Function _MediaQueryData_disableAnimations$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    () {
      return target$.disableAnimations;
    };
Function _MediaQueryData_boldText$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    () {
      return target$.boldText;
    };
Function _MediaQueryData_navigationMode$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    () {
      return target$.navigationMode;
    };
Function _MediaQueryData_gestureSettings$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    () {
      return target$.gestureSettings;
    };
Function _MediaQueryData_displayFeatures$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    () {
      return target$.displayFeatures;
    };
Function _MediaQueryData_orientation$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    () {
      return target$.orientation;
    };
Function _MediaQueryData_hashCode$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _MediaQueryData__$(m.Scope scope$) => ({
      Size? size,
      double? devicePixelRatio,
      double? textScaleFactor,
      Brightness? platformBrightness,
      EdgeInsets? padding,
      EdgeInsets? viewInsets,
      EdgeInsets? systemGestureInsets,
      EdgeInsets? viewPadding,
      bool? alwaysUse24HourFormat,
      bool? accessibleNavigation,
      bool? invertColors,
      bool? highContrast,
      bool? disableAnimations,
      bool? boldText,
      NavigationMode? navigationMode,
      DeviceGestureSettings? gestureSettings,
      List? displayFeatures,
    }) {
      return MediaQueryData(
        accessibleNavigation: accessibleNavigation ?? false,
        alwaysUse24HourFormat: alwaysUse24HourFormat ?? false,
        boldText: boldText ?? false,
        devicePixelRatio: devicePixelRatio ?? 1.0,
        disableAnimations: disableAnimations ?? false,
        displayFeatures: displayFeatures == null
            ? const <DisplayFeature>[]
            : List.from(displayFeatures),
        gestureSettings: gestureSettings ??
            const DeviceGestureSettings(touchSlop: kTouchSlop),
        highContrast: highContrast ?? false,
        invertColors: invertColors ?? false,
        navigationMode: navigationMode ?? NavigationMode.traditional,
        padding: padding ?? EdgeInsets.zero,
        platformBrightness: platformBrightness ?? Brightness.light,
        size: size ?? Size.zero,
        systemGestureInsets: systemGestureInsets ?? EdgeInsets.zero,
        textScaleFactor: textScaleFactor ?? 1.0,
        viewInsets: viewInsets ?? EdgeInsets.zero,
        viewPadding: viewPadding ?? EdgeInsets.zero,
      );
    };
Function _MediaQueryData_fromView_$(m.Scope scope$) => MediaQueryData.fromView;
Function _MediaQueryData_copyWith$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    target$.copyWith;
Function _MediaQueryData_removePadding$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    target$.removePadding;
Function _MediaQueryData_removeViewInsets$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    target$.removeViewInsets;
Function _MediaQueryData_removeViewPadding$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    target$.removeViewPadding;
Function _MediaQueryData_removeDisplayFeatures$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    target$.removeDisplayFeatures;
Function _MediaQueryData_eq$$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    (Object other$) => target$ == other$;
Function _MediaQueryData_toString$(
  m.Scope scope$,
  MediaQueryData target$,
) =>
    target$.toString;
Function MediaQuery_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MediaQuery;
Function MediaQuery_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MediaQuery;
Function _MediaQuery_data$(
  m.Scope scope$,
  MediaQuery target$,
) =>
    () {
      return target$.data;
    };
Function _MediaQuery__$(m.Scope scope$) => ({
      Key? key,
      required MediaQueryData data,
      required Widget child,
    }) {
      return MediaQuery(
        child: child,
        data: data,
        key: key,
      );
    };
Function _MediaQuery_removePadding_$(m.Scope scope$) =>
    MediaQuery.removePadding;
Function _MediaQuery_removeViewInsets_$(m.Scope scope$) =>
    MediaQuery.removeViewInsets;
Function _MediaQuery_removeViewPadding_$(m.Scope scope$) =>
    MediaQuery.removeViewPadding;
Function _MediaQuery_fromView$(m.Scope scope$) => MediaQuery.fromView;
Function _MediaQuery_of$(m.Scope scope$) => MediaQuery.of;
Function _MediaQuery_maybeOf$(m.Scope scope$) => MediaQuery.maybeOf;
Function _MediaQuery_sizeOf$(m.Scope scope$) => MediaQuery.sizeOf;
Function _MediaQuery_maybeSizeOf$(m.Scope scope$) => MediaQuery.maybeSizeOf;
Function _MediaQuery_orientationOf$(m.Scope scope$) => MediaQuery.orientationOf;
Function _MediaQuery_maybeOrientationOf$(m.Scope scope$) =>
    MediaQuery.maybeOrientationOf;
Function _MediaQuery_devicePixelRatioOf$(m.Scope scope$) =>
    MediaQuery.devicePixelRatioOf;
Function _MediaQuery_maybeDevicePixelRatioOf$(m.Scope scope$) =>
    MediaQuery.maybeDevicePixelRatioOf;
Function _MediaQuery_textScaleFactorOf$(m.Scope scope$) =>
    MediaQuery.textScaleFactorOf;
Function _MediaQuery_maybeTextScaleFactorOf$(m.Scope scope$) =>
    MediaQuery.maybeTextScaleFactorOf;
Function _MediaQuery_platformBrightnessOf$(m.Scope scope$) =>
    MediaQuery.platformBrightnessOf;
Function _MediaQuery_maybePlatformBrightnessOf$(m.Scope scope$) =>
    MediaQuery.maybePlatformBrightnessOf;
Function _MediaQuery_paddingOf$(m.Scope scope$) => MediaQuery.paddingOf;
Function _MediaQuery_maybePaddingOf$(m.Scope scope$) =>
    MediaQuery.maybePaddingOf;
Function _MediaQuery_viewInsetsOf$(m.Scope scope$) => MediaQuery.viewInsetsOf;
Function _MediaQuery_maybeViewInsetsOf$(m.Scope scope$) =>
    MediaQuery.maybeViewInsetsOf;
Function _MediaQuery_systemGestureInsetsOf$(m.Scope scope$) =>
    MediaQuery.systemGestureInsetsOf;
Function _MediaQuery_maybeSystemGestureInsetsOf$(m.Scope scope$) =>
    MediaQuery.maybeSystemGestureInsetsOf;
Function _MediaQuery_viewPaddingOf$(m.Scope scope$) => MediaQuery.viewPaddingOf;
Function _MediaQuery_maybeViewPaddingOf$(m.Scope scope$) =>
    MediaQuery.maybeViewPaddingOf;
Function _MediaQuery_alwaysUse24HourFormatOf$(m.Scope scope$) =>
    MediaQuery.alwaysUse24HourFormatOf;
Function _MediaQuery_maybeAlwaysUse24HourFormatOf$(m.Scope scope$) =>
    MediaQuery.maybeAlwaysUse24HourFormatOf;
Function _MediaQuery_accessibleNavigationOf$(m.Scope scope$) =>
    MediaQuery.accessibleNavigationOf;
Function _MediaQuery_maybeAccessibleNavigationOf$(m.Scope scope$) =>
    MediaQuery.maybeAccessibleNavigationOf;
Function _MediaQuery_invertColorsOf$(m.Scope scope$) =>
    MediaQuery.invertColorsOf;
Function _MediaQuery_maybeInvertColorsOf$(m.Scope scope$) =>
    MediaQuery.maybeInvertColorsOf;
Function _MediaQuery_highContrastOf$(m.Scope scope$) =>
    MediaQuery.highContrastOf;
Function _MediaQuery_maybeHighContrastOf$(m.Scope scope$) =>
    MediaQuery.maybeHighContrastOf;
Function _MediaQuery_disableAnimationsOf$(m.Scope scope$) =>
    MediaQuery.disableAnimationsOf;
Function _MediaQuery_maybeDisableAnimationsOf$(m.Scope scope$) =>
    MediaQuery.maybeDisableAnimationsOf;
Function _MediaQuery_boldTextOf$(m.Scope scope$) => MediaQuery.boldTextOf;
Function _MediaQuery_maybeBoldTextOf$(m.Scope scope$) =>
    MediaQuery.maybeBoldTextOf;
Function _MediaQuery_navigationModeOf$(m.Scope scope$) =>
    MediaQuery.navigationModeOf;
Function _MediaQuery_maybeNavigationModeOf$(m.Scope scope$) =>
    MediaQuery.maybeNavigationModeOf;
Function _MediaQuery_gestureSettingsOf$(m.Scope scope$) =>
    MediaQuery.gestureSettingsOf;
Function _MediaQuery_maybeGestureSettingsOf$(m.Scope scope$) =>
    MediaQuery.maybeGestureSettingsOf;
Function _MediaQuery_displayFeaturesOf$(m.Scope scope$) =>
    MediaQuery.displayFeaturesOf;
Function _MediaQuery_maybeDisplayFeaturesOf$(m.Scope scope$) =>
    MediaQuery.maybeDisplayFeaturesOf;
Function _MediaQuery_updateShouldNotify$(
  m.Scope scope$,
  MediaQuery target$,
) =>
    target$.updateShouldNotify;
Function _MediaQuery_debugFillProperties$(
  m.Scope scope$,
  MediaQuery target$,
) =>
    target$.debugFillProperties;
Function _MediaQuery_updateShouldNotifyDependent$(
  m.Scope scope$,
  MediaQuery target$,
) =>
    target$.updateShouldNotifyDependent;
Orientation _Orientation_portrait$() {
  return Orientation.portrait;
}

Orientation _Orientation_landscape$() {
  return Orientation.landscape;
}

List<Orientation> _Orientation_values$() {
  return Orientation.values;
}

NavigationMode _NavigationMode_traditional$() {
  return NavigationMode.traditional;
}

NavigationMode _NavigationMode_directional$() {
  return NavigationMode.directional;
}

List<NavigationMode> _NavigationMode_values$() {
  return NavigationMode.values;
}
