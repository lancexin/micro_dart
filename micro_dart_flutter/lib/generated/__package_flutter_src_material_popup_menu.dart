// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/popup_menu.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/divider.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/popup_menu_theme.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/tooltip.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/popup_menu.dart',
  {
    'PopupMenuDivider.': _PopupMenuDivider__$,
    'PopupMenuItem.': _PopupMenuItem__$,
    'PopupMenuItemState.': _PopupMenuItemState__$,
    'CheckedPopupMenuItem.': _CheckedPopupMenuItem__$,
    'PopupMenuButton.': _PopupMenuButton__$,
    'PopupMenuButtonState.': _PopupMenuButtonState__$,
    'showMenu': _showMenu$,
  },
  {},
  {
    'PopupMenuEntry': m.ClassMirror(
      'PopupMenuEntry',
      {
        '#as': PopupMenuEntry_as$,
        '#is': PopupMenuEntry_is$,
        'height': _PopupMenuEntry_height$,
        'represents': _PopupMenuEntry_represents$,
      },
      {},
    ),
    'PopupMenuDivider': m.ClassMirror(
      'PopupMenuDivider',
      {
        '#as': PopupMenuDivider_as$,
        '#is': PopupMenuDivider_is$,
        'height': _PopupMenuDivider_height$,
        'represents': _PopupMenuDivider_represents$,
        'createState': _PopupMenuDivider_createState$,
      },
      {},
    ),
    'PopupMenuItem': m.ClassMirror(
      'PopupMenuItem',
      {
        '#as': PopupMenuItem_as$,
        '#is': PopupMenuItem_is$,
        'value': _PopupMenuItem_value$,
        'onTap': _PopupMenuItem_onTap$,
        'enabled': _PopupMenuItem_enabled$,
        'height': _PopupMenuItem_height$,
        'padding': _PopupMenuItem_padding$,
        'textStyle': _PopupMenuItem_textStyle$,
        'labelTextStyle': _PopupMenuItem_labelTextStyle$,
        'mouseCursor': _PopupMenuItem_mouseCursor$,
        'child': _PopupMenuItem_child$,
        'represents': _PopupMenuItem_represents$,
        'createState': _PopupMenuItem_createState$,
      },
      {},
    ),
    'PopupMenuItemState': m.ClassMirror(
      'PopupMenuItemState',
      {
        '#as': PopupMenuItemState_as$,
        '#is': PopupMenuItemState_is$,
        'buildChild': _PopupMenuItemState_buildChild$,
        'handleTap': _PopupMenuItemState_handleTap$,
        'build': _PopupMenuItemState_build$,
      },
      {},
    ),
    'CheckedPopupMenuItem': m.ClassMirror(
      'CheckedPopupMenuItem',
      {
        '#as': CheckedPopupMenuItem_as$,
        '#is': CheckedPopupMenuItem_is$,
        'checked': _CheckedPopupMenuItem_checked$,
        'child': _CheckedPopupMenuItem_child$,
        'createState': _CheckedPopupMenuItem_createState$,
      },
      {},
    ),
    'PopupMenuButton': m.ClassMirror(
      'PopupMenuButton',
      {
        '#as': PopupMenuButton_as$,
        '#is': PopupMenuButton_is$,
        'itemBuilder': _PopupMenuButton_itemBuilder$,
        'initialValue': _PopupMenuButton_initialValue$,
        'onOpened': _PopupMenuButton_onOpened$,
        'onSelected': _PopupMenuButton_onSelected$,
        'onCanceled': _PopupMenuButton_onCanceled$,
        'tooltip': _PopupMenuButton_tooltip$,
        'elevation': _PopupMenuButton_elevation$,
        'shadowColor': _PopupMenuButton_shadowColor$,
        'surfaceTintColor': _PopupMenuButton_surfaceTintColor$,
        'padding': _PopupMenuButton_padding$,
        'splashRadius': _PopupMenuButton_splashRadius$,
        'child': _PopupMenuButton_child$,
        'icon': _PopupMenuButton_icon$,
        'offset': _PopupMenuButton_offset$,
        'enabled': _PopupMenuButton_enabled$,
        'shape': _PopupMenuButton_shape$,
        'color': _PopupMenuButton_color$,
        'enableFeedback': _PopupMenuButton_enableFeedback$,
        'iconSize': _PopupMenuButton_iconSize$,
        'constraints': _PopupMenuButton_constraints$,
        'position': _PopupMenuButton_position$,
        'clipBehavior': _PopupMenuButton_clipBehavior$,
        'createState': _PopupMenuButton_createState$,
      },
      {},
    ),
    'PopupMenuButtonState': m.ClassMirror(
      'PopupMenuButtonState',
      {
        '#as': PopupMenuButtonState_as$,
        '#is': PopupMenuButtonState_is$,
        'showButtonMenu': _PopupMenuButtonState_showButtonMenu$,
        'build': _PopupMenuButtonState_build$,
      },
      {},
    ),
  },
);
Function PopupMenuEntry_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PopupMenuEntry<T>;
Function PopupMenuEntry_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PopupMenuEntry<T>;
Function _PopupMenuEntry_height$<T>(
  m.Scope scope$,
  PopupMenuEntry<T> target$,
) =>
    () {
      return target$.height;
    };
Function _PopupMenuEntry_represents$<T>(
  m.Scope scope$,
  PopupMenuEntry<T> target$,
) =>
    target$.represents;
Function PopupMenuDivider_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PopupMenuDivider;
Function PopupMenuDivider_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PopupMenuDivider;
Function _PopupMenuDivider_height$(
  m.Scope scope$,
  PopupMenuDivider target$,
) =>
    () {
      return target$.height;
    };
Function _PopupMenuDivider__$(m.Scope scope$) => ({
      Key? key,
      double? height,
    }) {
      return PopupMenuDivider(
        height: height ?? 16.0,
        key: key,
      );
    };
Function _PopupMenuDivider_represents$(
  m.Scope scope$,
  PopupMenuDivider target$,
) =>
    target$.represents;
Function _PopupMenuDivider_createState$(
  m.Scope scope$,
  PopupMenuDivider target$,
) =>
    target$.createState;
Function PopupMenuItem_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PopupMenuItem<T>;
Function PopupMenuItem_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PopupMenuItem<T>;
Function _PopupMenuItem_value$<T>(
  m.Scope scope$,
  PopupMenuItem<T> target$,
) =>
    () {
      return target$.value;
    };
Function _PopupMenuItem_onTap$<T>(
  m.Scope scope$,
  PopupMenuItem<T> target$,
) =>
    () {
      return target$.onTap;
    };
Function _PopupMenuItem_enabled$<T>(
  m.Scope scope$,
  PopupMenuItem<T> target$,
) =>
    () {
      return target$.enabled;
    };
Function _PopupMenuItem_height$<T>(
  m.Scope scope$,
  PopupMenuItem<T> target$,
) =>
    () {
      return target$.height;
    };
Function _PopupMenuItem_padding$<T>(
  m.Scope scope$,
  PopupMenuItem<T> target$,
) =>
    () {
      return target$.padding;
    };
Function _PopupMenuItem_textStyle$<T>(
  m.Scope scope$,
  PopupMenuItem<T> target$,
) =>
    () {
      return target$.textStyle;
    };
Function _PopupMenuItem_labelTextStyle$<T>(
  m.Scope scope$,
  PopupMenuItem<T> target$,
) =>
    () {
      return target$.labelTextStyle;
    };
Function _PopupMenuItem_mouseCursor$<T>(
  m.Scope scope$,
  PopupMenuItem<T> target$,
) =>
    () {
      return target$.mouseCursor;
    };
Function _PopupMenuItem_child$<T>(
  m.Scope scope$,
  PopupMenuItem<T> target$,
) =>
    () {
      return target$.child;
    };
Function _PopupMenuItem__$(m.Scope scope$) => ({
      Key? key,
      dynamic? value,
      m.FunctionPointer? onTap,
      bool? enabled,
      double? height,
      EdgeInsets? padding,
      TextStyle? textStyle,
      MaterialStateProperty<TextStyle>? labelTextStyle,
      MouseCursor? mouseCursor,
      required Widget? child,
    }) {
      void onTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTap!,
            [],
            {},
          );
      return PopupMenuItem(
        child: child,
        enabled: enabled ?? true,
        height: height ?? kMinInteractiveDimension,
        key: key,
        labelTextStyle: labelTextStyle,
        mouseCursor: mouseCursor,
        onTap: onTap == null ? null : onTapProxy,
        padding: padding,
        textStyle: textStyle,
        value: value,
      );
    };
Function _PopupMenuItem_represents$<T>(
  m.Scope scope$,
  PopupMenuItem<T> target$,
) =>
    target$.represents;
Function _PopupMenuItem_createState$<T>(
  m.Scope scope$,
  PopupMenuItem<T> target$,
) =>
    target$.createState;
Function PopupMenuItemState_as$<T, W extends PopupMenuItem<T>>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PopupMenuItemState<T, W>;
Function PopupMenuItemState_is$<T, W extends PopupMenuItem<T>>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PopupMenuItemState<T, W>;
Function _PopupMenuItemState__$(m.Scope scope$) => () {
      return PopupMenuItemState();
    };
Function _PopupMenuItemState_buildChild$<T, W extends PopupMenuItem<T>>(
  m.Scope scope$,
  PopupMenuItemState<T, W> target$,
) =>
    target$.buildChild;
Function _PopupMenuItemState_handleTap$<T, W extends PopupMenuItem<T>>(
  m.Scope scope$,
  PopupMenuItemState<T, W> target$,
) =>
    target$.handleTap;
Function _PopupMenuItemState_build$<T, W extends PopupMenuItem<T>>(
  m.Scope scope$,
  PopupMenuItemState<T, W> target$,
) =>
    target$.build;
Function CheckedPopupMenuItem_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CheckedPopupMenuItem<T>;
Function CheckedPopupMenuItem_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CheckedPopupMenuItem<T>;
Function _CheckedPopupMenuItem_checked$<T>(
  m.Scope scope$,
  CheckedPopupMenuItem<T> target$,
) =>
    () {
      return target$.checked;
    };
Function _CheckedPopupMenuItem_child$<T>(
  m.Scope scope$,
  CheckedPopupMenuItem<T> target$,
) =>
    () {
      return target$.child;
    };
Function _CheckedPopupMenuItem__$(m.Scope scope$) => ({
      Key? key,
      dynamic? value,
      bool? checked,
      bool? enabled,
      EdgeInsets? padding,
      double? height,
      MouseCursor? mouseCursor,
      Widget? child,
    }) {
      return CheckedPopupMenuItem(
        checked: checked ?? false,
        child: child,
        enabled: enabled ?? true,
        height: height ?? kMinInteractiveDimension,
        key: key,
        mouseCursor: mouseCursor,
        padding: padding,
        value: value,
      );
    };
Function _CheckedPopupMenuItem_createState$<T>(
  m.Scope scope$,
  CheckedPopupMenuItem<T> target$,
) =>
    target$.createState;
Function PopupMenuButton_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PopupMenuButton<T>;
Function PopupMenuButton_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PopupMenuButton<T>;
Function _PopupMenuButton_itemBuilder$<T>(
  m.Scope scope$,
  PopupMenuButton<T> target$,
) =>
    () {
      return target$.itemBuilder;
    };
Function _PopupMenuButton_initialValue$<T>(
  m.Scope scope$,
  PopupMenuButton<T> target$,
) =>
    () {
      return target$.initialValue;
    };
Function _PopupMenuButton_onOpened$<T>(
  m.Scope scope$,
  PopupMenuButton<T> target$,
) =>
    () {
      return target$.onOpened;
    };
Function _PopupMenuButton_onSelected$<T>(
  m.Scope scope$,
  PopupMenuButton<T> target$,
) =>
    () {
      return target$.onSelected;
    };
Function _PopupMenuButton_onCanceled$<T>(
  m.Scope scope$,
  PopupMenuButton<T> target$,
) =>
    () {
      return target$.onCanceled;
    };
Function _PopupMenuButton_tooltip$<T>(
  m.Scope scope$,
  PopupMenuButton<T> target$,
) =>
    () {
      return target$.tooltip;
    };
Function _PopupMenuButton_elevation$<T>(
  m.Scope scope$,
  PopupMenuButton<T> target$,
) =>
    () {
      return target$.elevation;
    };
Function _PopupMenuButton_shadowColor$<T>(
  m.Scope scope$,
  PopupMenuButton<T> target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _PopupMenuButton_surfaceTintColor$<T>(
  m.Scope scope$,
  PopupMenuButton<T> target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _PopupMenuButton_padding$<T>(
  m.Scope scope$,
  PopupMenuButton<T> target$,
) =>
    () {
      return target$.padding;
    };
Function _PopupMenuButton_splashRadius$<T>(
  m.Scope scope$,
  PopupMenuButton<T> target$,
) =>
    () {
      return target$.splashRadius;
    };
Function _PopupMenuButton_child$<T>(
  m.Scope scope$,
  PopupMenuButton<T> target$,
) =>
    () {
      return target$.child;
    };
Function _PopupMenuButton_icon$<T>(
  m.Scope scope$,
  PopupMenuButton<T> target$,
) =>
    () {
      return target$.icon;
    };
Function _PopupMenuButton_offset$<T>(
  m.Scope scope$,
  PopupMenuButton<T> target$,
) =>
    () {
      return target$.offset;
    };
Function _PopupMenuButton_enabled$<T>(
  m.Scope scope$,
  PopupMenuButton<T> target$,
) =>
    () {
      return target$.enabled;
    };
Function _PopupMenuButton_shape$<T>(
  m.Scope scope$,
  PopupMenuButton<T> target$,
) =>
    () {
      return target$.shape;
    };
Function _PopupMenuButton_color$<T>(
  m.Scope scope$,
  PopupMenuButton<T> target$,
) =>
    () {
      return target$.color;
    };
Function _PopupMenuButton_enableFeedback$<T>(
  m.Scope scope$,
  PopupMenuButton<T> target$,
) =>
    () {
      return target$.enableFeedback;
    };
Function _PopupMenuButton_iconSize$<T>(
  m.Scope scope$,
  PopupMenuButton<T> target$,
) =>
    () {
      return target$.iconSize;
    };
Function _PopupMenuButton_constraints$<T>(
  m.Scope scope$,
  PopupMenuButton<T> target$,
) =>
    () {
      return target$.constraints;
    };
Function _PopupMenuButton_position$<T>(
  m.Scope scope$,
  PopupMenuButton<T> target$,
) =>
    () {
      return target$.position;
    };
Function _PopupMenuButton_clipBehavior$<T>(
  m.Scope scope$,
  PopupMenuButton<T> target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _PopupMenuButton__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer itemBuilder,
      dynamic? initialValue,
      m.FunctionPointer? onOpened,
      m.FunctionPointer? onSelected,
      m.FunctionPointer? onCanceled,
      String? tooltip,
      double? elevation,
      Color? shadowColor,
      Color? surfaceTintColor,
      EdgeInsetsGeometry? padding,
      Widget? child,
      double? splashRadius,
      Widget? icon,
      double? iconSize,
      Offset? offset,
      bool? enabled,
      ShapeBorder? shape,
      Color? color,
      bool? enableFeedback,
      BoxConstraints? constraints,
      PopupMenuPosition? position,
      Clip? clipBehavior,
    }) {
      List<PopupMenuEntry> itemBuilderProxy(
              BuildContext itemBuilder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            itemBuilder,
            [itemBuilder_context$],
            {},
          );
      void onCanceledProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onCanceled!,
            [],
            {},
          );
      void onOpenedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onOpened!,
            [],
            {},
          );
      void onSelectedProxy(dynamic onSelected_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSelected!,
            [onSelected_value$],
            {},
          );
      return PopupMenuButton(
        child: child,
        clipBehavior: clipBehavior ?? Clip.none,
        color: color,
        constraints: constraints,
        elevation: elevation,
        enableFeedback: enableFeedback,
        enabled: enabled ?? true,
        icon: icon,
        iconSize: iconSize,
        initialValue: initialValue,
        itemBuilder: itemBuilderProxy,
        key: key,
        offset: offset ?? Offset.zero,
        onCanceled: onCanceled == null ? null : onCanceledProxy,
        onOpened: onOpened == null ? null : onOpenedProxy,
        onSelected: onSelected == null ? null : onSelectedProxy,
        padding: padding ?? const EdgeInsets.all(8.0),
        position: position,
        shadowColor: shadowColor,
        shape: shape,
        splashRadius: splashRadius,
        surfaceTintColor: surfaceTintColor,
        tooltip: tooltip,
      );
    };
Function _PopupMenuButton_createState$<T>(
  m.Scope scope$,
  PopupMenuButton<T> target$,
) =>
    target$.createState;
Function PopupMenuButtonState_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PopupMenuButtonState<T>;
Function PopupMenuButtonState_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PopupMenuButtonState<T>;
Function _PopupMenuButtonState__$(m.Scope scope$) => () {
      return PopupMenuButtonState();
    };
Function _PopupMenuButtonState_showButtonMenu$<T>(
  m.Scope scope$,
  PopupMenuButtonState<T> target$,
) =>
    target$.showButtonMenu;
Function _PopupMenuButtonState_build$<T>(
  m.Scope scope$,
  PopupMenuButtonState<T> target$,
) =>
    target$.build;
Function _showMenu$<T>(m.Scope scope$) => showMenu<T>;
