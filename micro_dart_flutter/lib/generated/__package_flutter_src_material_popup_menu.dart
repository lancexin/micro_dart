// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/popup_menu.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/divider.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/popup_menu_theme.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/tooltip.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/popup_menu.dart',
  {'showMenu': _showMenu$},
  {},
  {
    'PopupMenuEntry': m.ClassMirror(
      'PopupMenuEntry',
      {
        '#as': PopupMenuEntry_as$,
        '#is': PopupMenuEntry_is$,
        'height': _PopupMenuEntry_height$,
        'represents': _PopupMenuEntry_represents$,
      },
      {},
    ),
    'PopupMenuDivider': m.ClassMirror(
      'PopupMenuDivider',
      {
        '#as': PopupMenuDivider_as$,
        '#is': PopupMenuDivider_is$,
        'height': _PopupMenuDivider_height$,
        'represents': _PopupMenuDivider_represents$,
        'createState': _PopupMenuDivider_createState$,
      },
      {},
    ),
    'PopupMenuItem': m.ClassMirror(
      'PopupMenuItem',
      {
        '#as': PopupMenuItem_as$,
        '#is': PopupMenuItem_is$,
        'value': _PopupMenuItem_value$,
        'onTap': _PopupMenuItem_onTap$,
        'enabled': _PopupMenuItem_enabled$,
        'height': _PopupMenuItem_height$,
        'padding': _PopupMenuItem_padding$,
        'textStyle': _PopupMenuItem_textStyle$,
        'labelTextStyle': _PopupMenuItem_labelTextStyle$,
        'mouseCursor': _PopupMenuItem_mouseCursor$,
        'child': _PopupMenuItem_child$,
        'represents': _PopupMenuItem_represents$,
        'createState': _PopupMenuItem_createState$,
      },
      {},
    ),
    'PopupMenuItemState': m.ClassMirror(
      'PopupMenuItemState',
      {
        '#as': PopupMenuItemState_as$,
        '#is': PopupMenuItemState_is$,
        'buildChild': _PopupMenuItemState_buildChild$,
        'handleTap': _PopupMenuItemState_handleTap$,
        'build': _PopupMenuItemState_build$,
      },
      {},
    ),
    'CheckedPopupMenuItem': m.ClassMirror(
      'CheckedPopupMenuItem',
      {
        '#as': CheckedPopupMenuItem_as$,
        '#is': CheckedPopupMenuItem_is$,
        'checked': _CheckedPopupMenuItem_checked$,
        'child': _CheckedPopupMenuItem_child$,
        'createState': _CheckedPopupMenuItem_createState$,
      },
      {},
    ),
    'PopupMenuButton': m.ClassMirror(
      'PopupMenuButton',
      {
        '#as': PopupMenuButton_as$,
        '#is': PopupMenuButton_is$,
        'itemBuilder': _PopupMenuButton_itemBuilder$,
        'initialValue': _PopupMenuButton_initialValue$,
        'onOpened': _PopupMenuButton_onOpened$,
        'onSelected': _PopupMenuButton_onSelected$,
        'onCanceled': _PopupMenuButton_onCanceled$,
        'tooltip': _PopupMenuButton_tooltip$,
        'elevation': _PopupMenuButton_elevation$,
        'shadowColor': _PopupMenuButton_shadowColor$,
        'surfaceTintColor': _PopupMenuButton_surfaceTintColor$,
        'padding': _PopupMenuButton_padding$,
        'splashRadius': _PopupMenuButton_splashRadius$,
        'child': _PopupMenuButton_child$,
        'icon': _PopupMenuButton_icon$,
        'offset': _PopupMenuButton_offset$,
        'enabled': _PopupMenuButton_enabled$,
        'shape': _PopupMenuButton_shape$,
        'color': _PopupMenuButton_color$,
        'enableFeedback': _PopupMenuButton_enableFeedback$,
        'iconSize': _PopupMenuButton_iconSize$,
        'constraints': _PopupMenuButton_constraints$,
        'position': _PopupMenuButton_position$,
        'clipBehavior': _PopupMenuButton_clipBehavior$,
        'createState': _PopupMenuButton_createState$,
      },
      {},
    ),
    'PopupMenuButtonState': m.ClassMirror(
      'PopupMenuButtonState',
      {
        '#as': PopupMenuButtonState_as$,
        '#is': PopupMenuButtonState_is$,
        'showButtonMenu': _PopupMenuButtonState_showButtonMenu$,
        'build': _PopupMenuButtonState_build$,
      },
      {},
    ),
  },
);
Function PopupMenuEntry_as$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as PopupMenuEntry<T>;
Function PopupMenuEntry_is$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is PopupMenuEntry<T>;
double _PopupMenuEntry_height$<T>(PopupMenuEntry<T> target) {
  return target.height;
}

Function _PopupMenuEntry_represents$<T>(
  m.Scope scope,
  PopupMenuEntry<T> target,
) =>
    target.represents;
Function PopupMenuDivider_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as PopupMenuDivider;
Function PopupMenuDivider_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is PopupMenuDivider;
double _PopupMenuDivider_height$(PopupMenuDivider target) {
  return target.height;
}

Function _PopupMenuDivider_represents$(
  m.Scope scope,
  PopupMenuDivider target,
) =>
    target.represents;
Function _PopupMenuDivider_createState$(
  m.Scope scope,
  PopupMenuDivider target,
) =>
    target.createState;
Function PopupMenuItem_as$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as PopupMenuItem<T>;
Function PopupMenuItem_is$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is PopupMenuItem<T>;
T? _PopupMenuItem_value$<T>(PopupMenuItem<T> target) {
  return target.value;
}

void Function()? _PopupMenuItem_onTap$<T>(PopupMenuItem<T> target) {
  return target.onTap;
}

bool _PopupMenuItem_enabled$<T>(PopupMenuItem<T> target) {
  return target.enabled;
}

double _PopupMenuItem_height$<T>(PopupMenuItem<T> target) {
  return target.height;
}

EdgeInsets? _PopupMenuItem_padding$<T>(PopupMenuItem<T> target) {
  return target.padding;
}

TextStyle? _PopupMenuItem_textStyle$<T>(PopupMenuItem<T> target) {
  return target.textStyle;
}

MaterialStateProperty<TextStyle?>? _PopupMenuItem_labelTextStyle$<T>(
    PopupMenuItem<T> target) {
  return target.labelTextStyle;
}

MouseCursor? _PopupMenuItem_mouseCursor$<T>(PopupMenuItem<T> target) {
  return target.mouseCursor;
}

Widget? _PopupMenuItem_child$<T>(PopupMenuItem<T> target) {
  return target.child;
}

Function _PopupMenuItem_represents$<T>(
  m.Scope scope,
  PopupMenuItem<T> target,
) =>
    target.represents;
Function _PopupMenuItem_createState$<T>(
  m.Scope scope,
  PopupMenuItem<T> target,
) =>
    target.createState;
Function PopupMenuItemState_as$<T, W extends PopupMenuItem<T>>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as PopupMenuItemState<T, W>;
Function PopupMenuItemState_is$<T, W extends PopupMenuItem<T>>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is PopupMenuItemState<T, W>;
Function _PopupMenuItemState_buildChild$<T, W extends PopupMenuItem<T>>(
  m.Scope scope,
  PopupMenuItemState<T, W> target,
) =>
    target.buildChild;
Function _PopupMenuItemState_handleTap$<T, W extends PopupMenuItem<T>>(
  m.Scope scope,
  PopupMenuItemState<T, W> target,
) =>
    target.handleTap;
Function _PopupMenuItemState_build$<T, W extends PopupMenuItem<T>>(
  m.Scope scope,
  PopupMenuItemState<T, W> target,
) =>
    target.build;
Function CheckedPopupMenuItem_as$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CheckedPopupMenuItem<T>;
Function CheckedPopupMenuItem_is$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CheckedPopupMenuItem<T>;
bool _CheckedPopupMenuItem_checked$<T>(CheckedPopupMenuItem<T> target) {
  return target.checked;
}

Widget? _CheckedPopupMenuItem_child$<T>(CheckedPopupMenuItem<T> target) {
  return target.child;
}

Function _CheckedPopupMenuItem_createState$<T>(
  m.Scope scope,
  CheckedPopupMenuItem<T> target,
) =>
    target.createState;
Function PopupMenuButton_as$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as PopupMenuButton<T>;
Function PopupMenuButton_is$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is PopupMenuButton<T>;
List<PopupMenuEntry<T>> Function(BuildContext) _PopupMenuButton_itemBuilder$<T>(
    PopupMenuButton<T> target) {
  return target.itemBuilder;
}

T? _PopupMenuButton_initialValue$<T>(PopupMenuButton<T> target) {
  return target.initialValue;
}

void Function()? _PopupMenuButton_onOpened$<T>(PopupMenuButton<T> target) {
  return target.onOpened;
}

void Function(T)? _PopupMenuButton_onSelected$<T>(PopupMenuButton<T> target) {
  return target.onSelected;
}

void Function()? _PopupMenuButton_onCanceled$<T>(PopupMenuButton<T> target) {
  return target.onCanceled;
}

String? _PopupMenuButton_tooltip$<T>(PopupMenuButton<T> target) {
  return target.tooltip;
}

double? _PopupMenuButton_elevation$<T>(PopupMenuButton<T> target) {
  return target.elevation;
}

Color? _PopupMenuButton_shadowColor$<T>(PopupMenuButton<T> target) {
  return target.shadowColor;
}

Color? _PopupMenuButton_surfaceTintColor$<T>(PopupMenuButton<T> target) {
  return target.surfaceTintColor;
}

EdgeInsetsGeometry _PopupMenuButton_padding$<T>(PopupMenuButton<T> target) {
  return target.padding;
}

double? _PopupMenuButton_splashRadius$<T>(PopupMenuButton<T> target) {
  return target.splashRadius;
}

Widget? _PopupMenuButton_child$<T>(PopupMenuButton<T> target) {
  return target.child;
}

Widget? _PopupMenuButton_icon$<T>(PopupMenuButton<T> target) {
  return target.icon;
}

Offset _PopupMenuButton_offset$<T>(PopupMenuButton<T> target) {
  return target.offset;
}

bool _PopupMenuButton_enabled$<T>(PopupMenuButton<T> target) {
  return target.enabled;
}

ShapeBorder? _PopupMenuButton_shape$<T>(PopupMenuButton<T> target) {
  return target.shape;
}

Color? _PopupMenuButton_color$<T>(PopupMenuButton<T> target) {
  return target.color;
}

bool? _PopupMenuButton_enableFeedback$<T>(PopupMenuButton<T> target) {
  return target.enableFeedback;
}

double? _PopupMenuButton_iconSize$<T>(PopupMenuButton<T> target) {
  return target.iconSize;
}

BoxConstraints? _PopupMenuButton_constraints$<T>(PopupMenuButton<T> target) {
  return target.constraints;
}

PopupMenuPosition? _PopupMenuButton_position$<T>(PopupMenuButton<T> target) {
  return target.position;
}

Clip _PopupMenuButton_clipBehavior$<T>(PopupMenuButton<T> target) {
  return target.clipBehavior;
}

Function _PopupMenuButton_createState$<T>(
  m.Scope scope,
  PopupMenuButton<T> target,
) =>
    target.createState;
Function PopupMenuButtonState_as$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as PopupMenuButtonState<T>;
Function PopupMenuButtonState_is$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is PopupMenuButtonState<T>;
Function _PopupMenuButtonState_showButtonMenu$<T>(
  m.Scope scope,
  PopupMenuButtonState<T> target,
) =>
    target.showButtonMenu;
Function _PopupMenuButtonState_build$<T>(
  m.Scope scope,
  PopupMenuButtonState<T> target,
) =>
    target.build;
Function _showMenu$<T>(m.Scope scope) => showMenu<T>;
