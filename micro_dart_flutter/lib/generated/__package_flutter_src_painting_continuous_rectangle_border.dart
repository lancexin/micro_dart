// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/continuous_rectangle_border.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/painting/border_radius.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/painting/edge_insets.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/continuous_rectangle_border.dart',
  {'ContinuousRectangleBorder.': _ContinuousRectangleBorder__$},
  {},
  {
    'ContinuousRectangleBorder': m.ClassMirror(
      'ContinuousRectangleBorder',
      {
        '#as': ContinuousRectangleBorder_as$,
        '#is': ContinuousRectangleBorder_is$,
        'borderRadius': _ContinuousRectangleBorder_borderRadius$,
        'dimensions': _ContinuousRectangleBorder_dimensions$,
        'hashCode': _ContinuousRectangleBorder_hashCode$,
        'scale': _ContinuousRectangleBorder_scale$,
        'lerpFrom': _ContinuousRectangleBorder_lerpFrom$,
        'lerpTo': _ContinuousRectangleBorder_lerpTo$,
        'getInnerPath': _ContinuousRectangleBorder_getInnerPath$,
        'getOuterPath': _ContinuousRectangleBorder_getOuterPath$,
        'copyWith': _ContinuousRectangleBorder_copyWith$,
        'paint': _ContinuousRectangleBorder_paint$,
        '==': _ContinuousRectangleBorder_eq$$,
        'toString': _ContinuousRectangleBorder_toString$,
      },
      {},
    )
  },
);
Function ContinuousRectangleBorder_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ContinuousRectangleBorder;
Function ContinuousRectangleBorder_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ContinuousRectangleBorder;
Function _ContinuousRectangleBorder_borderRadius$(
  m.Scope scope$,
  ContinuousRectangleBorder target$,
) =>
    () {
      return target$.borderRadius;
    };
Function _ContinuousRectangleBorder_dimensions$(
  m.Scope scope$,
  ContinuousRectangleBorder target$,
) =>
    () {
      return target$.dimensions;
    };
Function _ContinuousRectangleBorder_hashCode$(
  m.Scope scope$,
  ContinuousRectangleBorder target$,
) =>
    () {
      return target$.hashCode;
    };
Function _ContinuousRectangleBorder__$(m.Scope scope$) => ({
      BorderSide? side,
      BorderRadiusGeometry? borderRadius,
    }) {
      return ContinuousRectangleBorder(
        borderRadius: borderRadius ?? BorderRadius.zero,
        side: side ?? BorderSide.none,
      );
    };
Function _ContinuousRectangleBorder_scale$(
  m.Scope scope$,
  ContinuousRectangleBorder target$,
) =>
    target$.scale;
Function _ContinuousRectangleBorder_lerpFrom$(
  m.Scope scope$,
  ContinuousRectangleBorder target$,
) =>
    target$.lerpFrom;
Function _ContinuousRectangleBorder_lerpTo$(
  m.Scope scope$,
  ContinuousRectangleBorder target$,
) =>
    target$.lerpTo;
Function _ContinuousRectangleBorder_getInnerPath$(
  m.Scope scope$,
  ContinuousRectangleBorder target$,
) =>
    target$.getInnerPath;
Function _ContinuousRectangleBorder_getOuterPath$(
  m.Scope scope$,
  ContinuousRectangleBorder target$,
) =>
    target$.getOuterPath;
Function _ContinuousRectangleBorder_copyWith$(
  m.Scope scope$,
  ContinuousRectangleBorder target$,
) =>
    target$.copyWith;
Function _ContinuousRectangleBorder_paint$(
  m.Scope scope$,
  ContinuousRectangleBorder target$,
) =>
    target$.paint;
Function _ContinuousRectangleBorder_eq$$(
  m.Scope scope$,
  ContinuousRectangleBorder target$,
) =>
    (Object other$) => target$ == other$;
Function _ContinuousRectangleBorder_toString$(
  m.Scope scope$,
  ContinuousRectangleBorder target$,
) =>
    target$.toString;
