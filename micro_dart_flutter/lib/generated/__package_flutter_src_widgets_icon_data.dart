// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/icon_data.dart';
import 'package:flutter/foundation.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/icon_data.dart',
  {
    'staticIconProvider': _staticIconProvider$,
    'IconData.': _IconData__$,
    'IconDataProperty.': _IconDataProperty__$,
  },
  {},
  {
    'IconData': m.ClassMirror(
      'IconData',
      {
        '#as': IconData_as$,
        '#is': IconData_is$,
        'codePoint': _IconData_codePoint$,
        'fontFamily': _IconData_fontFamily$,
        'fontPackage': _IconData_fontPackage$,
        'matchTextDirection': _IconData_matchTextDirection$,
        'hashCode': _IconData_hashCode$,
        '==': _IconData_eq$$,
        'toString': _IconData_toString$,
      },
      {},
    ),
    'IconDataProperty': m.ClassMirror(
      'IconDataProperty',
      {
        '#as': IconDataProperty_as$,
        '#is': IconDataProperty_is$,
        'toJsonMap': _IconDataProperty_toJsonMap$,
      },
      {},
    ),
  },
);
Function _staticIconProvider$(m.Scope scope$) => () => staticIconProvider;
Function IconData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as IconData;
Function IconData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is IconData;
Function _IconData_codePoint$(
  m.Scope scope$,
  IconData target$,
) =>
    () {
      return target$.codePoint;
    };
Function _IconData_fontFamily$(
  m.Scope scope$,
  IconData target$,
) =>
    () {
      return target$.fontFamily;
    };
Function _IconData_fontPackage$(
  m.Scope scope$,
  IconData target$,
) =>
    () {
      return target$.fontPackage;
    };
Function _IconData_matchTextDirection$(
  m.Scope scope$,
  IconData target$,
) =>
    () {
      return target$.matchTextDirection;
    };
Function _IconData_hashCode$(
  m.Scope scope$,
  IconData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _IconData__$(m.Scope scope$) => (
      int codePoint, {
      String? fontFamily,
      String? fontPackage,
      bool? matchTextDirection,
    }) {
      return IconData(
        codePoint,
        fontFamily: fontFamily,
        fontPackage: fontPackage,
        matchTextDirection: matchTextDirection ?? false,
      );
    };
Function _IconData_eq$$(
  m.Scope scope$,
  IconData target$,
) =>
    (Object other$) => target$ == other$;
Function _IconData_toString$(
  m.Scope scope$,
  IconData target$,
) =>
    target$.toString;
Function IconDataProperty_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as IconDataProperty;
Function IconDataProperty_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is IconDataProperty;
Function _IconDataProperty__$(m.Scope scope$) => (
      String name,
      IconData? value, {
      String? ifNull,
      bool? showName,
      DiagnosticsTreeStyle? style,
      DiagnosticLevel? level,
    }) {
      return IconDataProperty(
        name,
        value,
        ifNull: ifNull,
        level: level ?? DiagnosticLevel.info,
        showName: showName ?? true,
        style: style ?? DiagnosticsTreeStyle.singleLine,
      );
    };
Function _IconDataProperty_toJsonMap$(
  m.Scope scope$,
  IconDataProperty target$,
) =>
    target$.toJsonMap;
