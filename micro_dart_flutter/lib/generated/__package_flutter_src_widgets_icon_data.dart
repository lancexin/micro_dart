// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/icon_data.dart';
import 'package:flutter/foundation.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/icon_data.dart',
  {'staticIconProvider': _staticIconProvider$},
  {},
  {
    'IconData': m.ClassMirror(
      'IconData',
      {
        '#as': IconData_as$,
        '#is': IconData_is$,
        'codePoint': _IconData_codePoint$,
        'fontFamily': _IconData_fontFamily$,
        'fontPackage': _IconData_fontPackage$,
        'matchTextDirection': _IconData_matchTextDirection$,
        'hashCode': _IconData_hashCode$,
        '==': _IconData_eq$$,
        'toString': _IconData_toString$,
      },
      {},
    ),
    'IconDataProperty': m.ClassMirror(
      'IconDataProperty',
      {
        '#as': IconDataProperty_as$,
        '#is': IconDataProperty_is$,
        'toJsonMap': _IconDataProperty_toJsonMap$,
      },
      {},
    ),
  },
);
Object _staticIconProvider$() {
  return staticIconProvider;
}

Function IconData_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as IconData;
Function IconData_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is IconData;
int _IconData_codePoint$(IconData target) {
  return target.codePoint;
}

String? _IconData_fontFamily$(IconData target) {
  return target.fontFamily;
}

String? _IconData_fontPackage$(IconData target) {
  return target.fontPackage;
}

bool _IconData_matchTextDirection$(IconData target) {
  return target.matchTextDirection;
}

int _IconData_hashCode$(IconData target) {
  return target.hashCode;
}

Function _IconData_eq$$(
  m.Scope scope,
  IconData target,
) =>
    (Object other) => target == other;
Function _IconData_toString$(
  m.Scope scope,
  IconData target,
) =>
    target.toString;
Function IconDataProperty_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as IconDataProperty;
Function IconDataProperty_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is IconDataProperty;
Function _IconDataProperty_toJsonMap$(
  m.Scope scope,
  IconDataProperty target,
) =>
    target.toJsonMap;
