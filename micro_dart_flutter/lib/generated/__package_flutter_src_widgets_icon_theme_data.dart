// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/icon_theme_data.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/src/widgets/framework.dart' show BuildContext;

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/icon_theme_data.dart',
  {'IconThemeData.lerp': _IconThemeData_lerp$},
  {},
  {
    'IconThemeData': m.ClassMirror(
      'IconThemeData',
      {
        '#as': IconThemeData_as$,
        '#is': IconThemeData_is$,
        'size': _IconThemeData_size$,
        'fill': _IconThemeData_fill$,
        'weight': _IconThemeData_weight$,
        'grade': _IconThemeData_grade$,
        'opticalSize': _IconThemeData_opticalSize$,
        'color': _IconThemeData_color$,
        'shadows': _IconThemeData_shadows$,
        'isConcrete': _IconThemeData_isConcrete$,
        'opacity': _IconThemeData_opacity$,
        'hashCode': _IconThemeData_hashCode$,
        'copyWith': _IconThemeData_copyWith$,
        'merge': _IconThemeData_merge$,
        'resolve': _IconThemeData_resolve$,
        '==': _IconThemeData_eq$$,
        'debugFillProperties': _IconThemeData_debugFillProperties$,
      },
      {},
    )
  },
);
Function IconThemeData_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as IconThemeData;
Function IconThemeData_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is IconThemeData;
double? _IconThemeData_size$(IconThemeData target) {
  return target.size;
}

double? _IconThemeData_fill$(IconThemeData target) {
  return target.fill;
}

double? _IconThemeData_weight$(IconThemeData target) {
  return target.weight;
}

double? _IconThemeData_grade$(IconThemeData target) {
  return target.grade;
}

double? _IconThemeData_opticalSize$(IconThemeData target) {
  return target.opticalSize;
}

Color? _IconThemeData_color$(IconThemeData target) {
  return target.color;
}

List<Shadow>? _IconThemeData_shadows$(IconThemeData target) {
  return target.shadows;
}

bool _IconThemeData_isConcrete$(IconThemeData target) {
  return target.isConcrete;
}

double? _IconThemeData_opacity$(IconThemeData target) {
  return target.opacity;
}

int _IconThemeData_hashCode$(IconThemeData target) {
  return target.hashCode;
}

Function _IconThemeData_copyWith$(
  m.Scope scope,
  IconThemeData target,
) =>
    target.copyWith;
Function _IconThemeData_merge$(
  m.Scope scope,
  IconThemeData target,
) =>
    target.merge;
Function _IconThemeData_resolve$(
  m.Scope scope,
  IconThemeData target,
) =>
    target.resolve;
Function _IconThemeData_lerp$(m.Scope scope) => IconThemeData.lerp;
Function _IconThemeData_eq$$(
  m.Scope scope,
  IconThemeData target,
) =>
    (Object other) => target == other;
Function _IconThemeData_debugFillProperties$(
  m.Scope scope,
  IconThemeData target,
) =>
    target.debugFillProperties;
