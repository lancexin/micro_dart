// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/autocomplete.dart';
import 'dart:async';
import 'package:flutter/scheduler.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/text_form_field.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/autocomplete.dart',
  {},
  {},
  {
    'Autocomplete': m.ClassMirror(
      'Autocomplete',
      {
        'displayStringForOption': _Autocomplete_displayStringForOption$,
        'fieldViewBuilder': _Autocomplete_fieldViewBuilder$,
        'onSelected': _Autocomplete_onSelected$,
        'optionsBuilder': _Autocomplete_optionsBuilder$,
        'optionsViewBuilder': _Autocomplete_optionsViewBuilder$,
        'optionsMaxHeight': _Autocomplete_optionsMaxHeight$,
        'initialValue': _Autocomplete_initialValue$,
        'build': _Autocomplete_build$,
      },
      {},
    )
  },
);
String Function(T) _Autocomplete_displayStringForOption$<T extends Object>(
    Autocomplete<T> target) {
  return target.displayStringForOption;
}

Widget Function(BuildContext, TextEditingController, FocusNode, void Function())
    _Autocomplete_fieldViewBuilder$<T extends Object>(Autocomplete<T> target) {
  return target.fieldViewBuilder;
}

void Function(T)? _Autocomplete_onSelected$<T extends Object>(
    Autocomplete<T> target) {
  return target.onSelected;
}

FutureOr<Iterable<T>> Function(TextEditingValue)
    _Autocomplete_optionsBuilder$<T extends Object>(Autocomplete<T> target) {
  return target.optionsBuilder;
}

Widget Function(BuildContext, void Function(T), Iterable<T>)?
    _Autocomplete_optionsViewBuilder$<T extends Object>(
        Autocomplete<T> target) {
  return target.optionsViewBuilder;
}

double _Autocomplete_optionsMaxHeight$<T extends Object>(
    Autocomplete<T> target) {
  return target.optionsMaxHeight;
}

TextEditingValue? _Autocomplete_initialValue$<T extends Object>(
    Autocomplete<T> target) {
  return target.initialValue;
}

Function _Autocomplete_build$<T extends Object>(
  m.Scope scope,
  Autocomplete<T> target,
) =>
    target.build;
