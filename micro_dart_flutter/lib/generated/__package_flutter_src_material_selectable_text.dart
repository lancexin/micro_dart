// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/selectable_text.dart';
import 'dart:ui' show BoxHeightStyle, BoxWidthStyle;
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/material/adaptive_text_selection_toolbar.dart';
import 'package:flutter/src/material/desktop_text_selection.dart';
import 'package:flutter/src/material/feedback.dart';
import 'package:flutter/src/material/magnifier.dart';
import 'package:flutter/src/material/text_selection.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/selectable_text.dart',
  {'iOSHorizontalOffset': _iOSHorizontalOffset$},
  {},
  {
    'SelectableText': m.ClassMirror(
      'SelectableText',
      {
        'data': _SelectableText_data$,
        'textSpan': _SelectableText_textSpan$,
        'focusNode': _SelectableText_focusNode$,
        'style': _SelectableText_style$,
        'strutStyle': _SelectableText_strutStyle$,
        'textAlign': _SelectableText_textAlign$,
        'textDirection': _SelectableText_textDirection$,
        'textScaleFactor': _SelectableText_textScaleFactor$,
        'autofocus': _SelectableText_autofocus$,
        'minLines': _SelectableText_minLines$,
        'maxLines': _SelectableText_maxLines$,
        'showCursor': _SelectableText_showCursor$,
        'cursorWidth': _SelectableText_cursorWidth$,
        'cursorHeight': _SelectableText_cursorHeight$,
        'cursorRadius': _SelectableText_cursorRadius$,
        'cursorColor': _SelectableText_cursorColor$,
        'selectionHeightStyle': _SelectableText_selectionHeightStyle$,
        'selectionWidthStyle': _SelectableText_selectionWidthStyle$,
        'enableInteractiveSelection':
            _SelectableText_enableInteractiveSelection$,
        'selectionControls': _SelectableText_selectionControls$,
        'dragStartBehavior': _SelectableText_dragStartBehavior$,
        'toolbarOptions': _SelectableText_toolbarOptions$,
        'onTap': _SelectableText_onTap$,
        'scrollPhysics': _SelectableText_scrollPhysics$,
        'semanticsLabel': _SelectableText_semanticsLabel$,
        'textHeightBehavior': _SelectableText_textHeightBehavior$,
        'textWidthBasis': _SelectableText_textWidthBasis$,
        'onSelectionChanged': _SelectableText_onSelectionChanged$,
        'contextMenuBuilder': _SelectableText_contextMenuBuilder$,
        'magnifierConfiguration': _SelectableText_magnifierConfiguration$,
        'selectionEnabled': _SelectableText_selectionEnabled$,
        'createState': _SelectableText_createState$,
        'debugFillProperties': _SelectableText_debugFillProperties$,
      },
      {},
    )
  },
);
int _iOSHorizontalOffset$() {
  return iOSHorizontalOffset;
}

String? _SelectableText_data$(SelectableText target) {
  return target.data;
}

TextSpan? _SelectableText_textSpan$(SelectableText target) {
  return target.textSpan;
}

FocusNode? _SelectableText_focusNode$(SelectableText target) {
  return target.focusNode;
}

TextStyle? _SelectableText_style$(SelectableText target) {
  return target.style;
}

StrutStyle? _SelectableText_strutStyle$(SelectableText target) {
  return target.strutStyle;
}

TextAlign? _SelectableText_textAlign$(SelectableText target) {
  return target.textAlign;
}

TextDirection? _SelectableText_textDirection$(SelectableText target) {
  return target.textDirection;
}

double? _SelectableText_textScaleFactor$(SelectableText target) {
  return target.textScaleFactor;
}

bool _SelectableText_autofocus$(SelectableText target) {
  return target.autofocus;
}

int? _SelectableText_minLines$(SelectableText target) {
  return target.minLines;
}

int? _SelectableText_maxLines$(SelectableText target) {
  return target.maxLines;
}

bool _SelectableText_showCursor$(SelectableText target) {
  return target.showCursor;
}

double _SelectableText_cursorWidth$(SelectableText target) {
  return target.cursorWidth;
}

double? _SelectableText_cursorHeight$(SelectableText target) {
  return target.cursorHeight;
}

Radius? _SelectableText_cursorRadius$(SelectableText target) {
  return target.cursorRadius;
}

Color? _SelectableText_cursorColor$(SelectableText target) {
  return target.cursorColor;
}

BoxHeightStyle _SelectableText_selectionHeightStyle$(SelectableText target) {
  return target.selectionHeightStyle;
}

BoxWidthStyle _SelectableText_selectionWidthStyle$(SelectableText target) {
  return target.selectionWidthStyle;
}

bool _SelectableText_enableInteractiveSelection$(SelectableText target) {
  return target.enableInteractiveSelection;
}

TextSelectionControls? _SelectableText_selectionControls$(
    SelectableText target) {
  return target.selectionControls;
}

DragStartBehavior _SelectableText_dragStartBehavior$(SelectableText target) {
  return target.dragStartBehavior;
}

ToolbarOptions? _SelectableText_toolbarOptions$(SelectableText target) {
  return target.toolbarOptions;
}

void Function()? _SelectableText_onTap$(SelectableText target) {
  return target.onTap;
}

ScrollPhysics? _SelectableText_scrollPhysics$(SelectableText target) {
  return target.scrollPhysics;
}

String? _SelectableText_semanticsLabel$(SelectableText target) {
  return target.semanticsLabel;
}

TextHeightBehavior? _SelectableText_textHeightBehavior$(SelectableText target) {
  return target.textHeightBehavior;
}

TextWidthBasis? _SelectableText_textWidthBasis$(SelectableText target) {
  return target.textWidthBasis;
}

void Function(TextSelection, SelectionChangedCause?)?
    _SelectableText_onSelectionChanged$(SelectableText target) {
  return target.onSelectionChanged;
}

Widget Function(BuildContext, EditableTextState)?
    _SelectableText_contextMenuBuilder$(SelectableText target) {
  return target.contextMenuBuilder;
}

TextMagnifierConfiguration? _SelectableText_magnifierConfiguration$(
    SelectableText target) {
  return target.magnifierConfiguration;
}

bool _SelectableText_selectionEnabled$(SelectableText target) {
  return target.selectionEnabled;
}

Function _SelectableText_createState$(
  m.Scope scope,
  SelectableText target,
) =>
    target.createState;
Function _SelectableText_debugFillProperties$(
  m.Scope scope,
  SelectableText target,
) =>
    target.debugFillProperties;
