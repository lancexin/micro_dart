// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/selectable_text.dart';
import 'dart:ui' show BoxHeightStyle, BoxWidthStyle;
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/material/adaptive_text_selection_toolbar.dart';
import 'package:flutter/src/material/desktop_text_selection.dart';
import 'package:flutter/src/material/feedback.dart';
import 'package:flutter/src/material/magnifier.dart';
import 'package:flutter/src/material/text_selection.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/selectable_text.dart',
  {
    'iOSHorizontalOffset': _iOSHorizontalOffset$,
    'SelectableText.': _SelectableText__$,
    'SelectableText.rich': _SelectableText_rich_$,
  },
  {},
  {
    'SelectableText': m.ClassMirror(
      'SelectableText',
      {
        '#as': SelectableText_as$,
        '#is': SelectableText_is$,
        'data': _SelectableText_data$,
        'textSpan': _SelectableText_textSpan$,
        'focusNode': _SelectableText_focusNode$,
        'style': _SelectableText_style$,
        'strutStyle': _SelectableText_strutStyle$,
        'textAlign': _SelectableText_textAlign$,
        'textDirection': _SelectableText_textDirection$,
        'textScaleFactor': _SelectableText_textScaleFactor$,
        'autofocus': _SelectableText_autofocus$,
        'minLines': _SelectableText_minLines$,
        'maxLines': _SelectableText_maxLines$,
        'showCursor': _SelectableText_showCursor$,
        'cursorWidth': _SelectableText_cursorWidth$,
        'cursorHeight': _SelectableText_cursorHeight$,
        'cursorRadius': _SelectableText_cursorRadius$,
        'cursorColor': _SelectableText_cursorColor$,
        'selectionHeightStyle': _SelectableText_selectionHeightStyle$,
        'selectionWidthStyle': _SelectableText_selectionWidthStyle$,
        'enableInteractiveSelection':
            _SelectableText_enableInteractiveSelection$,
        'selectionControls': _SelectableText_selectionControls$,
        'dragStartBehavior': _SelectableText_dragStartBehavior$,
        'toolbarOptions': _SelectableText_toolbarOptions$,
        'onTap': _SelectableText_onTap$,
        'scrollPhysics': _SelectableText_scrollPhysics$,
        'semanticsLabel': _SelectableText_semanticsLabel$,
        'textHeightBehavior': _SelectableText_textHeightBehavior$,
        'textWidthBasis': _SelectableText_textWidthBasis$,
        'onSelectionChanged': _SelectableText_onSelectionChanged$,
        'contextMenuBuilder': _SelectableText_contextMenuBuilder$,
        'magnifierConfiguration': _SelectableText_magnifierConfiguration$,
        'selectionEnabled': _SelectableText_selectionEnabled$,
        'createState': _SelectableText_createState$,
        'debugFillProperties': _SelectableText_debugFillProperties$,
      },
      {},
    )
  },
);
int _iOSHorizontalOffset$() {
  return iOSHorizontalOffset;
}

Function SelectableText_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SelectableText;
Function SelectableText_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SelectableText;
Function _SelectableText_data$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.data;
    };
Function _SelectableText_textSpan$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.textSpan;
    };
Function _SelectableText_focusNode$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.focusNode;
    };
Function _SelectableText_style$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.style;
    };
Function _SelectableText_strutStyle$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.strutStyle;
    };
Function _SelectableText_textAlign$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.textAlign;
    };
Function _SelectableText_textDirection$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.textDirection;
    };
Function _SelectableText_textScaleFactor$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.textScaleFactor;
    };
Function _SelectableText_autofocus$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.autofocus;
    };
Function _SelectableText_minLines$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.minLines;
    };
Function _SelectableText_maxLines$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.maxLines;
    };
Function _SelectableText_showCursor$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.showCursor;
    };
Function _SelectableText_cursorWidth$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.cursorWidth;
    };
Function _SelectableText_cursorHeight$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.cursorHeight;
    };
Function _SelectableText_cursorRadius$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.cursorRadius;
    };
Function _SelectableText_cursorColor$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.cursorColor;
    };
Function _SelectableText_selectionHeightStyle$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.selectionHeightStyle;
    };
Function _SelectableText_selectionWidthStyle$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.selectionWidthStyle;
    };
Function _SelectableText_enableInteractiveSelection$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.enableInteractiveSelection;
    };
Function _SelectableText_selectionControls$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.selectionControls;
    };
Function _SelectableText_dragStartBehavior$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.dragStartBehavior;
    };
Function _SelectableText_toolbarOptions$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.toolbarOptions;
    };
Function _SelectableText_onTap$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.onTap;
    };
Function _SelectableText_scrollPhysics$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.scrollPhysics;
    };
Function _SelectableText_semanticsLabel$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.semanticsLabel;
    };
Function _SelectableText_textHeightBehavior$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.textHeightBehavior;
    };
Function _SelectableText_textWidthBasis$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.textWidthBasis;
    };
Function _SelectableText_onSelectionChanged$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.onSelectionChanged;
    };
Function _SelectableText_contextMenuBuilder$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.contextMenuBuilder;
    };
Function _SelectableText_magnifierConfiguration$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.magnifierConfiguration;
    };
Function _SelectableText_selectionEnabled$(
  m.Scope scope$,
  SelectableText target$,
) =>
    () {
      return target$.selectionEnabled;
    };
Function _SelectableText__$(m.Scope scope$) => (
      String data, {
      Key? key,
      FocusNode? focusNode,
      TextStyle? style,
      StrutStyle? strutStyle,
      TextAlign? textAlign,
      TextDirection? textDirection,
      double? textScaleFactor,
      bool? showCursor,
      bool? autofocus,
      ToolbarOptions? toolbarOptions,
      int? minLines,
      int? maxLines,
      double? cursorWidth,
      double? cursorHeight,
      Radius? cursorRadius,
      Color? cursorColor,
      BoxHeightStyle? selectionHeightStyle,
      BoxWidthStyle? selectionWidthStyle,
      DragStartBehavior? dragStartBehavior,
      bool? enableInteractiveSelection,
      TextSelectionControls? selectionControls,
      m.FunctionPointer? onTap,
      ScrollPhysics? scrollPhysics,
      String? semanticsLabel,
      TextHeightBehavior? textHeightBehavior,
      TextWidthBasis? textWidthBasis,
      m.FunctionPointer? onSelectionChanged,
      m.FunctionPointer? contextMenuBuilder,
      TextMagnifierConfiguration? magnifierConfiguration,
    }) {
      Widget contextMenuBuilderProxy(
        BuildContext contextMenuBuilder_context$,
        EditableTextState contextMenuBuilder_editableTextState$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            contextMenuBuilder!,
            [
              contextMenuBuilder_context$,
              contextMenuBuilder_editableTextState$,
            ],
            {},
          );
      void onSelectionChangedProxy(
        TextSelection onSelectionChanged_selection$,
        SelectionChangedCause? onSelectionChanged_cause$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSelectionChanged!,
            [
              onSelectionChanged_selection$,
              onSelectionChanged_cause$,
            ],
            {},
          );
      void onTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTap!,
            [],
            {},
          );
      return SelectableText(
        data,
        autofocus: autofocus ?? false,
        contextMenuBuilder: contextMenuBuilder == null
            ? (BuildContext context, EditableTextState editableTextState) {
                return AdaptiveTextSelectionToolbar.editableText(
                  editableTextState: editableTextState,
                );
              }
            : contextMenuBuilderProxy,
        cursorColor: cursorColor,
        cursorHeight: cursorHeight,
        cursorRadius: cursorRadius,
        cursorWidth: cursorWidth ?? 2.0,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        enableInteractiveSelection: enableInteractiveSelection ?? true,
        focusNode: focusNode,
        key: key,
        magnifierConfiguration: magnifierConfiguration,
        maxLines: maxLines,
        minLines: minLines,
        onSelectionChanged:
            onSelectionChanged == null ? null : onSelectionChangedProxy,
        onTap: onTap == null ? null : onTapProxy,
        scrollPhysics: scrollPhysics,
        selectionControls: selectionControls,
        selectionHeightStyle: selectionHeightStyle ?? BoxHeightStyle.tight,
        selectionWidthStyle: selectionWidthStyle ?? BoxWidthStyle.tight,
        semanticsLabel: semanticsLabel,
        showCursor: showCursor ?? false,
        strutStyle: strutStyle,
        style: style,
        textAlign: textAlign,
        textDirection: textDirection,
        textHeightBehavior: textHeightBehavior,
        textScaleFactor: textScaleFactor,
        textWidthBasis: textWidthBasis,
        toolbarOptions: toolbarOptions,
      );
    };
Function _SelectableText_rich_$(m.Scope scope$) => (
      TextSpan textSpan, {
      Key? key,
      FocusNode? focusNode,
      TextStyle? style,
      StrutStyle? strutStyle,
      TextAlign? textAlign,
      TextDirection? textDirection,
      double? textScaleFactor,
      bool? showCursor,
      bool? autofocus,
      ToolbarOptions? toolbarOptions,
      int? minLines,
      int? maxLines,
      double? cursorWidth,
      double? cursorHeight,
      Radius? cursorRadius,
      Color? cursorColor,
      BoxHeightStyle? selectionHeightStyle,
      BoxWidthStyle? selectionWidthStyle,
      DragStartBehavior? dragStartBehavior,
      bool? enableInteractiveSelection,
      TextSelectionControls? selectionControls,
      m.FunctionPointer? onTap,
      ScrollPhysics? scrollPhysics,
      String? semanticsLabel,
      TextHeightBehavior? textHeightBehavior,
      TextWidthBasis? textWidthBasis,
      m.FunctionPointer? onSelectionChanged,
      m.FunctionPointer? contextMenuBuilder,
      TextMagnifierConfiguration? magnifierConfiguration,
    }) {
      Widget contextMenuBuilderProxy(
        BuildContext contextMenuBuilder_context$,
        EditableTextState contextMenuBuilder_editableTextState$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            contextMenuBuilder!,
            [
              contextMenuBuilder_context$,
              contextMenuBuilder_editableTextState$,
            ],
            {},
          );
      void onSelectionChangedProxy(
        TextSelection onSelectionChanged_selection$,
        SelectionChangedCause? onSelectionChanged_cause$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSelectionChanged!,
            [
              onSelectionChanged_selection$,
              onSelectionChanged_cause$,
            ],
            {},
          );
      void onTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTap!,
            [],
            {},
          );
      return SelectableText.rich(
        textSpan,
        autofocus: autofocus ?? false,
        contextMenuBuilder: contextMenuBuilder == null
            ? (BuildContext context, EditableTextState editableTextState) {
                return AdaptiveTextSelectionToolbar.editableText(
                  editableTextState: editableTextState,
                );
              }
            : contextMenuBuilderProxy,
        cursorColor: cursorColor,
        cursorHeight: cursorHeight,
        cursorRadius: cursorRadius,
        cursorWidth: cursorWidth ?? 2.0,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        enableInteractiveSelection: enableInteractiveSelection ?? true,
        focusNode: focusNode,
        key: key,
        magnifierConfiguration: magnifierConfiguration,
        maxLines: maxLines,
        minLines: minLines,
        onSelectionChanged:
            onSelectionChanged == null ? null : onSelectionChangedProxy,
        onTap: onTap == null ? null : onTapProxy,
        scrollPhysics: scrollPhysics,
        selectionControls: selectionControls,
        selectionHeightStyle: selectionHeightStyle ?? BoxHeightStyle.tight,
        selectionWidthStyle: selectionWidthStyle ?? BoxWidthStyle.tight,
        semanticsLabel: semanticsLabel,
        showCursor: showCursor ?? false,
        strutStyle: strutStyle,
        style: style,
        textAlign: textAlign,
        textDirection: textDirection,
        textHeightBehavior: textHeightBehavior,
        textScaleFactor: textScaleFactor,
        textWidthBasis: textWidthBasis,
        toolbarOptions: toolbarOptions,
      );
    };
Function _SelectableText_createState$(
  m.Scope scope$,
  SelectableText target$,
) =>
    target$.createState;
Function _SelectableText_debugFillProperties$(
  m.Scope scope$,
  SelectableText target$,
) =>
    target$.debugFillProperties;
