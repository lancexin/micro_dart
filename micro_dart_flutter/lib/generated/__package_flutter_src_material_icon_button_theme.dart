// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/icon_button_theme.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/icon_button_theme.dart',
  {
    'IconButtonThemeData.': _IconButtonThemeData__$,
    'IconButtonThemeData.lerp': _IconButtonThemeData_lerp$,
    'IconButtonTheme.': _IconButtonTheme__$,
    'IconButtonTheme.of': _IconButtonTheme_of$,
  },
  {},
  {
    'IconButtonThemeData': m.ClassMirror(
      'IconButtonThemeData',
      {
        '#as': IconButtonThemeData_as$,
        '#is': IconButtonThemeData_is$,
        'style': _IconButtonThemeData_style$,
        'hashCode': _IconButtonThemeData_hashCode$,
        '==': _IconButtonThemeData_eq$$,
        'debugFillProperties': _IconButtonThemeData_debugFillProperties$,
      },
      {},
    ),
    'IconButtonTheme': m.ClassMirror(
      'IconButtonTheme',
      {
        '#as': IconButtonTheme_as$,
        '#is': IconButtonTheme_is$,
        'data': _IconButtonTheme_data$,
        'wrap': _IconButtonTheme_wrap$,
        'updateShouldNotify': _IconButtonTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function IconButtonThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as IconButtonThemeData;
Function IconButtonThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is IconButtonThemeData;
Function _IconButtonThemeData_style$(
  m.Scope scope$,
  IconButtonThemeData target$,
) =>
    () {
      return target$.style;
    };
Function _IconButtonThemeData_hashCode$(
  m.Scope scope$,
  IconButtonThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _IconButtonThemeData__$(m.Scope scope$) => ({ButtonStyle? style}) {
      return IconButtonThemeData(style: style);
    };
Function _IconButtonThemeData_lerp$(m.Scope scope$) => IconButtonThemeData.lerp;
Function _IconButtonThemeData_eq$$(
  m.Scope scope$,
  IconButtonThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _IconButtonThemeData_debugFillProperties$(
  m.Scope scope$,
  IconButtonThemeData target$,
) =>
    target$.debugFillProperties;
Function IconButtonTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as IconButtonTheme;
Function IconButtonTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is IconButtonTheme;
Function _IconButtonTheme_data$(
  m.Scope scope$,
  IconButtonTheme target$,
) =>
    () {
      return target$.data;
    };
Function _IconButtonTheme__$(m.Scope scope$) => ({
      Key? key,
      required IconButtonThemeData data,
      required Widget child,
    }) {
      return IconButtonTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _IconButtonTheme_of$(m.Scope scope$) => IconButtonTheme.of;
Function _IconButtonTheme_wrap$(
  m.Scope scope$,
  IconButtonTheme target$,
) =>
    target$.wrap;
Function _IconButtonTheme_updateShouldNotify$(
  m.Scope scope$,
  IconButtonTheme target$,
) =>
    target$.updateShouldNotify;
