// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/icon_button_theme.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/icon_button_theme.dart',
  {
    'IconButtonThemeData.lerp': _IconButtonThemeData_lerp$,
    'IconButtonTheme.of': _IconButtonTheme_of$,
  },
  {},
  {
    'IconButtonThemeData': m.ClassMirror(
      'IconButtonThemeData',
      {
        '#as': IconButtonThemeData_as$,
        '#is': IconButtonThemeData_is$,
        'style': _IconButtonThemeData_style$,
        'hashCode': _IconButtonThemeData_hashCode$,
        '==': _IconButtonThemeData_eq$$,
        'debugFillProperties': _IconButtonThemeData_debugFillProperties$,
      },
      {},
    ),
    'IconButtonTheme': m.ClassMirror(
      'IconButtonTheme',
      {
        '#as': IconButtonTheme_as$,
        '#is': IconButtonTheme_is$,
        'data': _IconButtonTheme_data$,
        'wrap': _IconButtonTheme_wrap$,
        'updateShouldNotify': _IconButtonTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function IconButtonThemeData_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as IconButtonThemeData;
Function IconButtonThemeData_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is IconButtonThemeData;
ButtonStyle? _IconButtonThemeData_style$(IconButtonThemeData target) {
  return target.style;
}

int _IconButtonThemeData_hashCode$(IconButtonThemeData target) {
  return target.hashCode;
}

Function _IconButtonThemeData_lerp$(m.Scope scope) => IconButtonThemeData.lerp;
Function _IconButtonThemeData_eq$$(
  m.Scope scope,
  IconButtonThemeData target,
) =>
    (Object other) => target == other;
Function _IconButtonThemeData_debugFillProperties$(
  m.Scope scope,
  IconButtonThemeData target,
) =>
    target.debugFillProperties;
Function IconButtonTheme_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as IconButtonTheme;
Function IconButtonTheme_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is IconButtonTheme;
IconButtonThemeData _IconButtonTheme_data$(IconButtonTheme target) {
  return target.data;
}

Function _IconButtonTheme_of$(m.Scope scope) => IconButtonTheme.of;
Function _IconButtonTheme_wrap$(
  m.Scope scope,
  IconButtonTheme target,
) =>
    target.wrap;
Function _IconButtonTheme_updateShouldNotify$(
  m.Scope scope,
  IconButtonTheme target,
) =>
    target.updateShouldNotify;
