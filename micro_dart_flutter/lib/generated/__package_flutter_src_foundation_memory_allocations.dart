// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/foundation/memory_allocations.dart';
import 'dart:ui';
import 'package:flutter/src/foundation/assertions.dart';
import 'package:flutter/src/foundation/constants.dart';
import 'package:flutter/src/foundation/diagnostics.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/foundation/memory_allocations.dart',
  {
    'kFlutterMemoryAllocationsEnabled': _kFlutterMemoryAllocationsEnabled$,
    'MemoryAllocations.instance': _MemoryAllocations_instance$,
    'MemoryAllocations.addListener': _MemoryAllocations_addListener$,
    'MemoryAllocations.removeListener': _MemoryAllocations_removeListener$,
  },
  {},
  {
    'ObjectEvent': m.ClassMirror(
      'ObjectEvent',
      {
        '#as': ObjectEvent_as$,
        '#is': ObjectEvent_is$,
        'object': _ObjectEvent_object$,
        'toMap': _ObjectEvent_toMap$,
      },
      {},
    ),
    'ObjectCreated': m.ClassMirror(
      'ObjectCreated',
      {
        '#as': ObjectCreated_as$,
        '#is': ObjectCreated_is$,
        'library': _ObjectCreated_library$,
        'className': _ObjectCreated_className$,
        'toMap': _ObjectCreated_toMap$,
      },
      {},
    ),
    'ObjectDisposed': m.ClassMirror(
      'ObjectDisposed',
      {
        '#as': ObjectDisposed_as$,
        '#is': ObjectDisposed_is$,
        'toMap': _ObjectDisposed_toMap$,
      },
      {},
    ),
    'MemoryAllocations': m.ClassMirror(
      'MemoryAllocations',
      {
        '#as': MemoryAllocations_as$,
        '#is': MemoryAllocations_is$,
        'hasListeners': _MemoryAllocations_hasListeners$,
        'dispatchObjectEvent': _MemoryAllocations_dispatchObjectEvent$,
        'dispatchObjectCreated': _MemoryAllocations_dispatchObjectCreated$,
        'dispatchObjectDisposed': _MemoryAllocations_dispatchObjectDisposed$,
      },
      {},
    ),
  },
);
bool _kFlutterMemoryAllocationsEnabled$() {
  return kFlutterMemoryAllocationsEnabled;
}

Function ObjectEvent_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ObjectEvent;
Function ObjectEvent_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ObjectEvent;
Object _ObjectEvent_object$(ObjectEvent target) {
  return target.object;
}

Function _ObjectEvent_toMap$(
  m.Scope scope,
  ObjectEvent target,
) =>
    target.toMap;
Function ObjectCreated_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ObjectCreated;
Function ObjectCreated_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ObjectCreated;
String _ObjectCreated_library$(ObjectCreated target) {
  return target.library;
}

String _ObjectCreated_className$(ObjectCreated target) {
  return target.className;
}

Function _ObjectCreated_toMap$(
  m.Scope scope,
  ObjectCreated target,
) =>
    target.toMap;
Function ObjectDisposed_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ObjectDisposed;
Function ObjectDisposed_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ObjectDisposed;
Function _ObjectDisposed_toMap$(
  m.Scope scope,
  ObjectDisposed target,
) =>
    target.toMap;
Function MemoryAllocations_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as MemoryAllocations;
Function MemoryAllocations_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is MemoryAllocations;
MemoryAllocations _MemoryAllocations_instance$() {
  return MemoryAllocations.instance;
}

bool _MemoryAllocations_hasListeners$(MemoryAllocations target) {
  return target.hasListeners;
}

Function _MemoryAllocations_addListener$(
  m.Scope scope,
  MemoryAllocations target,
) =>
    (m.FunctionPointer listener) {
      void listenerProxy(ObjectEvent listener_$p0) =>
          scope.engine.callFunctionPointer(
            scope,
            listener,
            [listener_$p0],
            {},
          );
      target.addListener(listenerProxy);
    };
Function _MemoryAllocations_removeListener$(
  m.Scope scope,
  MemoryAllocations target,
) =>
    (m.FunctionPointer listener) {
      void listenerProxy(ObjectEvent listener_$p0) =>
          scope.engine.callFunctionPointer(
            scope,
            listener,
            [listener_$p0],
            {},
          );
      target.removeListener(listenerProxy);
    };
Function _MemoryAllocations_dispatchObjectEvent$(
  m.Scope scope,
  MemoryAllocations target,
) =>
    target.dispatchObjectEvent;
Function _MemoryAllocations_dispatchObjectCreated$(
  m.Scope scope,
  MemoryAllocations target,
) =>
    target.dispatchObjectCreated;
Function _MemoryAllocations_dispatchObjectDisposed$(
  m.Scope scope,
  MemoryAllocations target,
) =>
    target.dispatchObjectDisposed;
