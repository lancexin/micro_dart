// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/foundation/memory_allocations.dart';
import 'dart:ui';
import 'package:flutter/src/foundation/assertions.dart';
import 'package:flutter/src/foundation/constants.dart';
import 'package:flutter/src/foundation/diagnostics.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/foundation/memory_allocations.dart',
  {
    'kFlutterMemoryAllocationsEnabled': _kFlutterMemoryAllocationsEnabled$,
    'MemoryAllocations.instance': _MemoryAllocations_instance$,
  },
  {},
  {
    'ObjectEvent': m.ClassMirror(
      'ObjectEvent',
      {
        'object': _ObjectEvent_object$,
        'toMap': _ObjectEvent_toMap$,
      },
      {},
    ),
    'ObjectCreated': m.ClassMirror(
      'ObjectCreated',
      {
        'library': _ObjectCreated_library$,
        'className': _ObjectCreated_className$,
        'toMap': _ObjectCreated_toMap$,
      },
      {},
    ),
    'ObjectDisposed': m.ClassMirror(
      'ObjectDisposed',
      {'toMap': _ObjectDisposed_toMap$},
      {},
    ),
    'MemoryAllocations': m.ClassMirror(
      'MemoryAllocations',
      {
        'hasListeners': _MemoryAllocations_hasListeners$,
        'dispatchObjectEvent': _MemoryAllocations_dispatchObjectEvent$,
        'dispatchObjectCreated': _MemoryAllocations_dispatchObjectCreated$,
        'dispatchObjectDisposed': _MemoryAllocations_dispatchObjectDisposed$,
      },
      {},
    ),
  },
);
bool _kFlutterMemoryAllocationsEnabled$() {
  return kFlutterMemoryAllocationsEnabled;
}

Object _ObjectEvent_object$(ObjectEvent target) {
  return target.object;
}

Function _ObjectEvent_toMap$(
  m.Scope scope,
  ObjectEvent target,
) =>
    target.toMap;
String _ObjectCreated_library$(ObjectCreated target) {
  return target.library;
}

String _ObjectCreated_className$(ObjectCreated target) {
  return target.className;
}

Function _ObjectCreated_toMap$(
  m.Scope scope,
  ObjectCreated target,
) =>
    target.toMap;
Function _ObjectDisposed_toMap$(
  m.Scope scope,
  ObjectDisposed target,
) =>
    target.toMap;
MemoryAllocations _MemoryAllocations_instance$() {
  return MemoryAllocations.instance;
}

bool _MemoryAllocations_hasListeners$(MemoryAllocations target) {
  return target.hasListeners;
}

Function _MemoryAllocations_dispatchObjectEvent$(
  m.Scope scope,
  MemoryAllocations target,
) =>
    target.dispatchObjectEvent;
Function _MemoryAllocations_dispatchObjectCreated$(
  m.Scope scope,
  MemoryAllocations target,
) =>
    target.dispatchObjectCreated;
Function _MemoryAllocations_dispatchObjectDisposed$(
  m.Scope scope,
  MemoryAllocations target,
) =>
    target.dispatchObjectDisposed;
