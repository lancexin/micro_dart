// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/bottom_tab_bar.dart';
import 'dart:ui' show ImageFilter;
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/localizations.dart';
import 'package:flutter/src/cupertino/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/bottom_tab_bar.dart',
  {'CupertinoTabBar.': _CupertinoTabBar__$},
  {},
  {
    'CupertinoTabBar': m.ClassMirror(
      'CupertinoTabBar',
      {
        '#as': CupertinoTabBar_as$,
        '#is': CupertinoTabBar_is$,
        'items': _CupertinoTabBar_items$,
        'onTap': _CupertinoTabBar_onTap$,
        'currentIndex': _CupertinoTabBar_currentIndex$,
        'backgroundColor': _CupertinoTabBar_backgroundColor$,
        'activeColor': _CupertinoTabBar_activeColor$,
        'inactiveColor': _CupertinoTabBar_inactiveColor$,
        'iconSize': _CupertinoTabBar_iconSize$,
        'height': _CupertinoTabBar_height$,
        'border': _CupertinoTabBar_border$,
        'preferredSize': _CupertinoTabBar_preferredSize$,
        'opaque': _CupertinoTabBar_opaque$,
        'build': _CupertinoTabBar_build$,
        'copyWith': _CupertinoTabBar_copyWith$,
      },
      {},
    )
  },
);
Function CupertinoTabBar_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoTabBar;
Function CupertinoTabBar_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoTabBar;
Function _CupertinoTabBar_items$(
  m.Scope scope$,
  CupertinoTabBar target$,
) =>
    () {
      return target$.items;
    };
Function _CupertinoTabBar_onTap$(
  m.Scope scope$,
  CupertinoTabBar target$,
) =>
    () {
      return target$.onTap;
    };
Function _CupertinoTabBar_currentIndex$(
  m.Scope scope$,
  CupertinoTabBar target$,
) =>
    () {
      return target$.currentIndex;
    };
Function _CupertinoTabBar_backgroundColor$(
  m.Scope scope$,
  CupertinoTabBar target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _CupertinoTabBar_activeColor$(
  m.Scope scope$,
  CupertinoTabBar target$,
) =>
    () {
      return target$.activeColor;
    };
Function _CupertinoTabBar_inactiveColor$(
  m.Scope scope$,
  CupertinoTabBar target$,
) =>
    () {
      return target$.inactiveColor;
    };
Function _CupertinoTabBar_iconSize$(
  m.Scope scope$,
  CupertinoTabBar target$,
) =>
    () {
      return target$.iconSize;
    };
Function _CupertinoTabBar_height$(
  m.Scope scope$,
  CupertinoTabBar target$,
) =>
    () {
      return target$.height;
    };
Function _CupertinoTabBar_border$(
  m.Scope scope$,
  CupertinoTabBar target$,
) =>
    () {
      return target$.border;
    };
Function _CupertinoTabBar_preferredSize$(
  m.Scope scope$,
  CupertinoTabBar target$,
) =>
    () {
      return target$.preferredSize;
    };
Function _CupertinoTabBar__$(m.Scope scope$) => ({
      Key? key,
      required List items,
      m.FunctionPointer? onTap,
      int? currentIndex,
      Color? backgroundColor,
      Color? activeColor,
      Color? inactiveColor,
      double? iconSize,
      double? height,
      Border? border,
    }) {
      void onTapProxy(int onTap_value$) => scope$.engine.callFunctionPointer(
            scope$,
            onTap!,
            [onTap_value$],
            {},
          );
      return CupertinoTabBar(
        activeColor: activeColor,
        backgroundColor: backgroundColor,
        border: border ??
            const Border(
                top: BorderSide(
                    color: const CupertinoDynamicColor.withBrightness(
                      color: Color(0x4D000000),
                      darkColor: Color(0x29000000),
                    ),
                    width: 0.0)),
        currentIndex: currentIndex ?? 0,
        height: height ?? 50.0,
        iconSize: iconSize ?? 30.0,
        inactiveColor: inactiveColor ?? CupertinoColors.inactiveGray,
        items: List.from(items),
        key: key,
        onTap: onTap == null ? null : onTapProxy,
      );
    };
Function _CupertinoTabBar_opaque$(
  m.Scope scope$,
  CupertinoTabBar target$,
) =>
    target$.opaque;
Function _CupertinoTabBar_build$(
  m.Scope scope$,
  CupertinoTabBar target$,
) =>
    target$.build;
Function _CupertinoTabBar_copyWith$(
  m.Scope scope$,
  CupertinoTabBar target$,
) =>
    ({
      Key? key,
      List? items,
      Color? backgroundColor,
      Color? activeColor,
      Color? inactiveColor,
      double? iconSize,
      double? height,
      Border? border,
      int? currentIndex,
      m.FunctionPointer? onTap,
    }) {
      void onTapProxy(int onTap_value$) => scope$.engine.callFunctionPointer(
            scope$,
            onTap!,
            [onTap_value$],
            {},
          );
      return target$.copyWith(
        activeColor: activeColor,
        backgroundColor: backgroundColor,
        border: border,
        currentIndex: currentIndex,
        height: height,
        iconSize: iconSize,
        inactiveColor: inactiveColor,
        items: items == null ? null : List.from(items),
        key: key,
        onTap: onTap == null ? null : onTapProxy,
      );
    };
