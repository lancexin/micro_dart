// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/inherited_model.dart';
import 'dart:collection';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/inherited_model.dart',
  {'InheritedModel.inheritFrom': _InheritedModel_inheritFrom$},
  {},
  {
    'InheritedModel': m.ClassMirror(
      'InheritedModel',
      {
        '#as': InheritedModel_as$,
        '#is': InheritedModel_is$,
        'createElement': _InheritedModel_createElement$,
        'updateShouldNotifyDependent':
            _InheritedModel_updateShouldNotifyDependent$,
        'isSupportedAspect': _InheritedModel_isSupportedAspect$,
      },
      {},
    ),
    'InheritedModelElement': m.ClassMirror(
      'InheritedModelElement',
      {
        '#as': InheritedModelElement_as$,
        '#is': InheritedModelElement_is$,
        'updateDependencies': _InheritedModelElement_updateDependencies$,
        'notifyDependent': _InheritedModelElement_notifyDependent$,
      },
      {},
    ),
  },
);
Function InheritedModel_as$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as InheritedModel<T>;
Function InheritedModel_is$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is InheritedModel<T>;
Function _InheritedModel_createElement$<T>(
  m.Scope scope,
  InheritedModel<T> target,
) =>
    target.createElement;
Function _InheritedModel_updateShouldNotifyDependent$<T>(
  m.Scope scope,
  InheritedModel<T> target,
) =>
    target.updateShouldNotifyDependent;
Function _InheritedModel_isSupportedAspect$<T>(
  m.Scope scope,
  InheritedModel<T> target,
) =>
    target.isSupportedAspect;
Function _InheritedModel_inheritFrom$<T extends InheritedModel<Object>>(
        m.Scope scope) =>
    InheritedModel.inheritFrom<T>;
Function InheritedModelElement_as$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as InheritedModelElement<T>;
Function InheritedModelElement_is$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is InheritedModelElement<T>;
Function _InheritedModelElement_updateDependencies$<T>(
  m.Scope scope,
  InheritedModelElement<T> target,
) =>
    target.updateDependencies;
Function _InheritedModelElement_notifyDependent$<T>(
  m.Scope scope,
  InheritedModelElement<T> target,
) =>
    target.notifyDependent;
