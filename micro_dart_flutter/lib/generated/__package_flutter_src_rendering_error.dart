// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/error.dart';
import 'package:flutter/src/rendering/object.dart' show EdgeInsets, Color;
import 'dart:ui'
    show
        Paragraph,
        ParagraphBuilder,
        ParagraphConstraints,
        ParagraphStyle,
        TextStyle;
import 'package:flutter/src/rendering/box.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/error.dart',
  {
    'RenderErrorBox.padding': _RenderErrorBox_padding$,
    'RenderErrorBox.minimumWidth': _RenderErrorBox_minimumWidth$,
    'RenderErrorBox.backgroundColor': _RenderErrorBox_backgroundColor$,
    'RenderErrorBox.textStyle': _RenderErrorBox_textStyle$,
    'RenderErrorBox.paragraphStyle': _RenderErrorBox_paragraphStyle$,
    'RenderErrorBox.': _RenderErrorBox__$,
  },
  {
    'RenderErrorBox.padding': _RenderErrorBox_padding_set$,
    'RenderErrorBox.minimumWidth': _RenderErrorBox_minimumWidth_set$,
    'RenderErrorBox.backgroundColor': _RenderErrorBox_backgroundColor_set$,
    'RenderErrorBox.textStyle': _RenderErrorBox_textStyle_set$,
    'RenderErrorBox.paragraphStyle': _RenderErrorBox_paragraphStyle_set$,
  },
  {
    'RenderErrorBox': m.ClassMirror(
      'RenderErrorBox',
      {
        '#as': RenderErrorBox_as$,
        '#is': RenderErrorBox_is$,
        'message': _RenderErrorBox_message$,
        'sizedByParent': _RenderErrorBox_sizedByParent$,
        'computeMaxIntrinsicWidth': _RenderErrorBox_computeMaxIntrinsicWidth$,
        'computeMaxIntrinsicHeight': _RenderErrorBox_computeMaxIntrinsicHeight$,
        'hitTestSelf': _RenderErrorBox_hitTestSelf$,
        'computeDryLayout': _RenderErrorBox_computeDryLayout$,
        'paint': _RenderErrorBox_paint$,
      },
      {},
    )
  },
);
Function RenderErrorBox_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RenderErrorBox;
Function RenderErrorBox_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RenderErrorBox;
Function _RenderErrorBox_message$(
  m.Scope scope$,
  RenderErrorBox target$,
) =>
    () {
      return target$.message;
    };
Function _RenderErrorBox_padding$(m.Scope scope$) =>
    () => RenderErrorBox.padding;
void _RenderErrorBox_padding_set$(EdgeInsets other$) {
  RenderErrorBox.padding = other$;
}

Function _RenderErrorBox_minimumWidth$(m.Scope scope$) =>
    () => RenderErrorBox.minimumWidth;
void _RenderErrorBox_minimumWidth_set$(double other$) {
  RenderErrorBox.minimumWidth = other$;
}

Function _RenderErrorBox_backgroundColor$(m.Scope scope$) =>
    () => RenderErrorBox.backgroundColor;
void _RenderErrorBox_backgroundColor_set$(Color other$) {
  RenderErrorBox.backgroundColor = other$;
}

Function _RenderErrorBox_textStyle$(m.Scope scope$) =>
    () => RenderErrorBox.textStyle;
void _RenderErrorBox_textStyle_set$(TextStyle other$) {
  RenderErrorBox.textStyle = other$;
}

Function _RenderErrorBox_paragraphStyle$(m.Scope scope$) =>
    () => RenderErrorBox.paragraphStyle;
void _RenderErrorBox_paragraphStyle_set$(ParagraphStyle other$) {
  RenderErrorBox.paragraphStyle = other$;
}

Function _RenderErrorBox_sizedByParent$(
  m.Scope scope$,
  RenderErrorBox target$,
) =>
    () {
      return target$.sizedByParent;
    };
Function _RenderErrorBox__$(m.Scope scope$) => ([String? message]) {
      if (message == null) {
        return RenderErrorBox();
      }
      return RenderErrorBox(message!);
    };
Function _RenderErrorBox_computeMaxIntrinsicWidth$(
  m.Scope scope$,
  RenderErrorBox target$,
) =>
    target$.computeMaxIntrinsicWidth;
Function _RenderErrorBox_computeMaxIntrinsicHeight$(
  m.Scope scope$,
  RenderErrorBox target$,
) =>
    target$.computeMaxIntrinsicHeight;
Function _RenderErrorBox_hitTestSelf$(
  m.Scope scope$,
  RenderErrorBox target$,
) =>
    target$.hitTestSelf;
Function _RenderErrorBox_computeDryLayout$(
  m.Scope scope$,
  RenderErrorBox target$,
) =>
    target$.computeDryLayout;
Function _RenderErrorBox_paint$(
  m.Scope scope$,
  RenderErrorBox target$,
) =>
    target$.paint;
