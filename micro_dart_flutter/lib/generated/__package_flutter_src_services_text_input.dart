// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/text_input.dart';
import 'dart:async';
import 'dart:io' show Platform;
import 'dart:ui' show FontWeight, Offset, Rect, Size, TextAlign, TextDirection;
import 'package:flutter/foundation.dart';
import 'package:vector_math/vector_math_64.dart' show Matrix4;
import 'package:flutter/src/services/autofill.dart';
import 'package:flutter/src/services/clipboard.dart' show Clipboard;
import 'package:flutter/src/services/keyboard_inserted_content.dart';
import 'package:flutter/src/services/message_codec.dart';
import 'package:flutter/src/services/platform_channel.dart';
import 'package:flutter/src/services/system_channels.dart';
import 'package:flutter/src/services/text_editing.dart';
import 'package:flutter/src/services/text_editing_delta.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/text_input.dart',
  {
    'TextInputType.text': _TextInputType_text$,
    'TextInputType.multiline': _TextInputType_multiline$,
    'TextInputType.number': _TextInputType_number$,
    'TextInputType.phone': _TextInputType_phone$,
    'TextInputType.datetime': _TextInputType_datetime$,
    'TextInputType.emailAddress': _TextInputType_emailAddress$,
    'TextInputType.url': _TextInputType_url$,
    'TextInputType.visiblePassword': _TextInputType_visiblePassword$,
    'TextInputType.name': _TextInputType_name$,
    'TextInputType.streetAddress': _TextInputType_streetAddress$,
    'TextInputType.none': _TextInputType_none$,
    'TextInputType.values': _TextInputType_values$,
    'TextInputType.numberWithOptions': _TextInputType_numberWithOptions_$,
    'TextInputConfiguration.': _TextInputConfiguration__$,
    'RawFloatingCursorPoint.': _RawFloatingCursorPoint__$,
    'TextEditingValue.empty': _TextEditingValue_empty$,
    'TextEditingValue.': _TextEditingValue__$,
    'TextEditingValue.fromJSON': _TextEditingValue_fromJSON_$,
    'SelectionRect.': _SelectionRect__$,
    'TextInputConnection.debugResetId': _TextInputConnection_debugResetId$,
    'TextInput.scribbleClients': _TextInput_scribbleClients$,
    'TextInput.setChannel': _TextInput_setChannel$,
    'TextInput.setInputControl': _TextInput_setInputControl$,
    'TextInput.restorePlatformInputControl':
        _TextInput_restorePlatformInputControl$,
    'TextInput.ensureInitialized': _TextInput_ensureInitialized$,
    'TextInput.attach': _TextInput_attach$,
    'TextInput.updateEditingValue': _TextInput_updateEditingValue$,
    'TextInput.finishAutofillContext': _TextInput_finishAutofillContext$,
    'TextInput.registerScribbleElement': _TextInput_registerScribbleElement$,
    'TextInput.unregisterScribbleElement':
        _TextInput_unregisterScribbleElement$,
    'SmartDashesType.disabled': _SmartDashesType_disabled$,
    'SmartDashesType.enabled': _SmartDashesType_enabled$,
    'SmartDashesType.values': _SmartDashesType_values$,
    'SmartQuotesType.disabled': _SmartQuotesType_disabled$,
    'SmartQuotesType.enabled': _SmartQuotesType_enabled$,
    'SmartQuotesType.values': _SmartQuotesType_values$,
    'TextInputAction.none': _TextInputAction_none$,
    'TextInputAction.unspecified': _TextInputAction_unspecified$,
    'TextInputAction.done': _TextInputAction_done$,
    'TextInputAction.go': _TextInputAction_go$,
    'TextInputAction.search': _TextInputAction_search$,
    'TextInputAction.send': _TextInputAction_send$,
    'TextInputAction.next': _TextInputAction_next$,
    'TextInputAction.previous': _TextInputAction_previous$,
    'TextInputAction.continueAction': _TextInputAction_continueAction$,
    'TextInputAction.join': _TextInputAction_join$,
    'TextInputAction.route': _TextInputAction_route$,
    'TextInputAction.emergencyCall': _TextInputAction_emergencyCall$,
    'TextInputAction.newline': _TextInputAction_newline$,
    'TextInputAction.values': _TextInputAction_values$,
    'TextCapitalization.words': _TextCapitalization_words$,
    'TextCapitalization.sentences': _TextCapitalization_sentences$,
    'TextCapitalization.characters': _TextCapitalization_characters$,
    'TextCapitalization.none': _TextCapitalization_none$,
    'TextCapitalization.values': _TextCapitalization_values$,
    'FloatingCursorDragState.Start': _FloatingCursorDragState_Start$,
    'FloatingCursorDragState.Update': _FloatingCursorDragState_Update$,
    'FloatingCursorDragState.End': _FloatingCursorDragState_End$,
    'FloatingCursorDragState.values': _FloatingCursorDragState_values$,
    'SelectionChangedCause.tap': _SelectionChangedCause_tap$,
    'SelectionChangedCause.doubleTap': _SelectionChangedCause_doubleTap$,
    'SelectionChangedCause.longPress': _SelectionChangedCause_longPress$,
    'SelectionChangedCause.forcePress': _SelectionChangedCause_forcePress$,
    'SelectionChangedCause.keyboard': _SelectionChangedCause_keyboard$,
    'SelectionChangedCause.toolbar': _SelectionChangedCause_toolbar$,
    'SelectionChangedCause.drag': _SelectionChangedCause_drag$,
    'SelectionChangedCause.scribble': _SelectionChangedCause_scribble$,
    'SelectionChangedCause.values': _SelectionChangedCause_values$,
  },
  {},
  {
    'TextInputType': m.ClassMirror(
      'TextInputType',
      {
        '#as': TextInputType_as$,
        '#is': TextInputType_is$,
        'index': _TextInputType_index$,
        'signed': _TextInputType_signed$,
        'decimal': _TextInputType_decimal$,
        'hashCode': _TextInputType_hashCode$,
        'toJson': _TextInputType_toJson$,
        'toString': _TextInputType_toString$,
        '==': _TextInputType_eq$$,
      },
      {},
    ),
    'TextInputConfiguration': m.ClassMirror(
      'TextInputConfiguration',
      {
        '#as': TextInputConfiguration_as$,
        '#is': TextInputConfiguration_is$,
        'inputType': _TextInputConfiguration_inputType$,
        'readOnly': _TextInputConfiguration_readOnly$,
        'obscureText': _TextInputConfiguration_obscureText$,
        'autocorrect': _TextInputConfiguration_autocorrect$,
        'autofillConfiguration': _TextInputConfiguration_autofillConfiguration$,
        'smartDashesType': _TextInputConfiguration_smartDashesType$,
        'smartQuotesType': _TextInputConfiguration_smartQuotesType$,
        'enableSuggestions': _TextInputConfiguration_enableSuggestions$,
        'enableInteractiveSelection':
            _TextInputConfiguration_enableInteractiveSelection$,
        'actionLabel': _TextInputConfiguration_actionLabel$,
        'inputAction': _TextInputConfiguration_inputAction$,
        'textCapitalization': _TextInputConfiguration_textCapitalization$,
        'keyboardAppearance': _TextInputConfiguration_keyboardAppearance$,
        'enableIMEPersonalizedLearning':
            _TextInputConfiguration_enableIMEPersonalizedLearning$,
        'allowedMimeTypes': _TextInputConfiguration_allowedMimeTypes$,
        'enableDeltaModel': _TextInputConfiguration_enableDeltaModel$,
        'copyWith': _TextInputConfiguration_copyWith$,
        'toJson': _TextInputConfiguration_toJson$,
      },
      {},
    ),
    'RawFloatingCursorPoint': m.ClassMirror(
      'RawFloatingCursorPoint',
      {
        '#as': RawFloatingCursorPoint_as$,
        '#is': RawFloatingCursorPoint_is$,
        'offset': _RawFloatingCursorPoint_offset$,
        'state': _RawFloatingCursorPoint_state$,
      },
      {},
    ),
    'TextEditingValue': m.ClassMirror(
      'TextEditingValue',
      {
        '#as': TextEditingValue_as$,
        '#is': TextEditingValue_is$,
        'text': _TextEditingValue_text$,
        'selection': _TextEditingValue_selection$,
        'composing': _TextEditingValue_composing$,
        'isComposingRangeValid': _TextEditingValue_isComposingRangeValid$,
        'hashCode': _TextEditingValue_hashCode$,
        'copyWith': _TextEditingValue_copyWith$,
        'replaced': _TextEditingValue_replaced$,
        'toJSON': _TextEditingValue_toJSON$,
        'toString': _TextEditingValue_toString$,
        '==': _TextEditingValue_eq$$,
      },
      {},
    ),
    'ScribbleClient': m.ClassMirror(
      'ScribbleClient',
      {
        '#as': ScribbleClient_as$,
        '#is': ScribbleClient_is$,
        'elementIdentifier': _ScribbleClient_elementIdentifier$,
        'bounds': _ScribbleClient_bounds$,
        'onScribbleFocus': _ScribbleClient_onScribbleFocus$,
        'isInScribbleRect': _ScribbleClient_isInScribbleRect$,
      },
      {},
    ),
    'SelectionRect': m.ClassMirror(
      'SelectionRect',
      {
        '#as': SelectionRect_as$,
        '#is': SelectionRect_is$,
        'position': _SelectionRect_position$,
        'bounds': _SelectionRect_bounds$,
        'direction': _SelectionRect_direction$,
        'hashCode': _SelectionRect_hashCode$,
        '==': _SelectionRect_eq$$,
        'toString': _SelectionRect_toString$,
      },
      {},
    ),
    'TextInputConnection': m.ClassMirror(
      'TextInputConnection',
      {
        '#as': TextInputConnection_as$,
        '#is': TextInputConnection_is$,
        'attached': _TextInputConnection_attached$,
        'scribbleInProgress': _TextInputConnection_scribbleInProgress$,
        'show': _TextInputConnection_show$,
        'requestAutofill': _TextInputConnection_requestAutofill$,
        'updateConfig': _TextInputConnection_updateConfig$,
        'setEditingState': _TextInputConnection_setEditingState$,
        'setEditableSizeAndTransform':
            _TextInputConnection_setEditableSizeAndTransform$,
        'setComposingRect': _TextInputConnection_setComposingRect$,
        'setCaretRect': _TextInputConnection_setCaretRect$,
        'setSelectionRects': _TextInputConnection_setSelectionRects$,
        'setStyle': _TextInputConnection_setStyle$,
        'close': _TextInputConnection_close$,
        'connectionClosedReceived':
            _TextInputConnection_connectionClosedReceived$,
      },
      {},
    ),
    'TextInput': m.ClassMirror(
      'TextInput',
      {
        '#as': TextInput_as$,
        '#is': TextInput_is$,
        'scribbleInProgress': _TextInput_scribbleInProgress$,
      },
      {},
    ),
    'SmartDashesType': m.ClassMirror(
      'SmartDashesType',
      {},
      {},
    ),
    'SmartQuotesType': m.ClassMirror(
      'SmartQuotesType',
      {},
      {},
    ),
    'TextInputAction': m.ClassMirror(
      'TextInputAction',
      {},
      {},
    ),
    'TextCapitalization': m.ClassMirror(
      'TextCapitalization',
      {},
      {},
    ),
    'FloatingCursorDragState': m.ClassMirror(
      'FloatingCursorDragState',
      {},
      {},
    ),
    'SelectionChangedCause': m.ClassMirror(
      'SelectionChangedCause',
      {},
      {},
    ),
  },
);
Function TextInputType_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextInputType;
Function TextInputType_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextInputType;
Function _TextInputType_index$(
  m.Scope scope$,
  TextInputType target$,
) =>
    () {
      return target$.index;
    };
Function _TextInputType_signed$(
  m.Scope scope$,
  TextInputType target$,
) =>
    () {
      return target$.signed;
    };
Function _TextInputType_decimal$(
  m.Scope scope$,
  TextInputType target$,
) =>
    () {
      return target$.decimal;
    };
Function _TextInputType_text$(m.Scope scope$) => () => TextInputType.text;
Function _TextInputType_multiline$(m.Scope scope$) =>
    () => TextInputType.multiline;
Function _TextInputType_number$(m.Scope scope$) => () => TextInputType.number;
Function _TextInputType_phone$(m.Scope scope$) => () => TextInputType.phone;
Function _TextInputType_datetime$(m.Scope scope$) =>
    () => TextInputType.datetime;
Function _TextInputType_emailAddress$(m.Scope scope$) =>
    () => TextInputType.emailAddress;
Function _TextInputType_url$(m.Scope scope$) => () => TextInputType.url;
Function _TextInputType_visiblePassword$(m.Scope scope$) =>
    () => TextInputType.visiblePassword;
Function _TextInputType_name$(m.Scope scope$) => () => TextInputType.name;
Function _TextInputType_streetAddress$(m.Scope scope$) =>
    () => TextInputType.streetAddress;
Function _TextInputType_none$(m.Scope scope$) => () => TextInputType.none;
Function _TextInputType_values$(m.Scope scope$) => () => TextInputType.values;
Function _TextInputType_hashCode$(
  m.Scope scope$,
  TextInputType target$,
) =>
    () {
      return target$.hashCode;
    };
Function _TextInputType_numberWithOptions_$(m.Scope scope$) =>
    TextInputType.numberWithOptions;
Function _TextInputType_toJson$(
  m.Scope scope$,
  TextInputType target$,
) =>
    target$.toJson;
Function _TextInputType_toString$(
  m.Scope scope$,
  TextInputType target$,
) =>
    target$.toString;
Function _TextInputType_eq$$(
  m.Scope scope$,
  TextInputType target$,
) =>
    (Object other$) => target$ == other$;
Function TextInputConfiguration_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextInputConfiguration;
Function TextInputConfiguration_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextInputConfiguration;
Function _TextInputConfiguration_inputType$(
  m.Scope scope$,
  TextInputConfiguration target$,
) =>
    () {
      return target$.inputType;
    };
Function _TextInputConfiguration_readOnly$(
  m.Scope scope$,
  TextInputConfiguration target$,
) =>
    () {
      return target$.readOnly;
    };
Function _TextInputConfiguration_obscureText$(
  m.Scope scope$,
  TextInputConfiguration target$,
) =>
    () {
      return target$.obscureText;
    };
Function _TextInputConfiguration_autocorrect$(
  m.Scope scope$,
  TextInputConfiguration target$,
) =>
    () {
      return target$.autocorrect;
    };
Function _TextInputConfiguration_autofillConfiguration$(
  m.Scope scope$,
  TextInputConfiguration target$,
) =>
    () {
      return target$.autofillConfiguration;
    };
Function _TextInputConfiguration_smartDashesType$(
  m.Scope scope$,
  TextInputConfiguration target$,
) =>
    () {
      return target$.smartDashesType;
    };
Function _TextInputConfiguration_smartQuotesType$(
  m.Scope scope$,
  TextInputConfiguration target$,
) =>
    () {
      return target$.smartQuotesType;
    };
Function _TextInputConfiguration_enableSuggestions$(
  m.Scope scope$,
  TextInputConfiguration target$,
) =>
    () {
      return target$.enableSuggestions;
    };
Function _TextInputConfiguration_enableInteractiveSelection$(
  m.Scope scope$,
  TextInputConfiguration target$,
) =>
    () {
      return target$.enableInteractiveSelection;
    };
Function _TextInputConfiguration_actionLabel$(
  m.Scope scope$,
  TextInputConfiguration target$,
) =>
    () {
      return target$.actionLabel;
    };
Function _TextInputConfiguration_inputAction$(
  m.Scope scope$,
  TextInputConfiguration target$,
) =>
    () {
      return target$.inputAction;
    };
Function _TextInputConfiguration_textCapitalization$(
  m.Scope scope$,
  TextInputConfiguration target$,
) =>
    () {
      return target$.textCapitalization;
    };
Function _TextInputConfiguration_keyboardAppearance$(
  m.Scope scope$,
  TextInputConfiguration target$,
) =>
    () {
      return target$.keyboardAppearance;
    };
Function _TextInputConfiguration_enableIMEPersonalizedLearning$(
  m.Scope scope$,
  TextInputConfiguration target$,
) =>
    () {
      return target$.enableIMEPersonalizedLearning;
    };
Function _TextInputConfiguration_allowedMimeTypes$(
  m.Scope scope$,
  TextInputConfiguration target$,
) =>
    () {
      return target$.allowedMimeTypes;
    };
Function _TextInputConfiguration_enableDeltaModel$(
  m.Scope scope$,
  TextInputConfiguration target$,
) =>
    () {
      return target$.enableDeltaModel;
    };
Function _TextInputConfiguration__$(m.Scope scope$) => ({
      TextInputType? inputType,
      bool? readOnly,
      bool? obscureText,
      bool? autocorrect,
      SmartDashesType? smartDashesType,
      SmartQuotesType? smartQuotesType,
      bool? enableSuggestions,
      bool? enableInteractiveSelection,
      String? actionLabel,
      TextInputAction? inputAction,
      Brightness? keyboardAppearance,
      TextCapitalization? textCapitalization,
      AutofillConfiguration? autofillConfiguration,
      bool? enableIMEPersonalizedLearning,
      List? allowedMimeTypes,
      bool? enableDeltaModel,
    }) {
      return TextInputConfiguration(
        actionLabel: actionLabel,
        allowedMimeTypes: allowedMimeTypes == null
            ? const <String>[]
            : List.from(allowedMimeTypes),
        autocorrect: autocorrect ?? true,
        autofillConfiguration:
            autofillConfiguration ?? AutofillConfiguration.disabled,
        enableDeltaModel: enableDeltaModel ?? false,
        enableIMEPersonalizedLearning: enableIMEPersonalizedLearning ?? true,
        enableInteractiveSelection: enableInteractiveSelection ?? true,
        enableSuggestions: enableSuggestions ?? true,
        inputAction: inputAction ?? TextInputAction.done,
        inputType: inputType ?? TextInputType.text,
        keyboardAppearance: keyboardAppearance ?? Brightness.light,
        obscureText: obscureText ?? false,
        readOnly: readOnly ?? false,
        smartDashesType: smartDashesType,
        smartQuotesType: smartQuotesType,
        textCapitalization: textCapitalization ?? TextCapitalization.none,
      );
    };
Function _TextInputConfiguration_copyWith$(
  m.Scope scope$,
  TextInputConfiguration target$,
) =>
    target$.copyWith;
Function _TextInputConfiguration_toJson$(
  m.Scope scope$,
  TextInputConfiguration target$,
) =>
    target$.toJson;
Function RawFloatingCursorPoint_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RawFloatingCursorPoint;
Function RawFloatingCursorPoint_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RawFloatingCursorPoint;
Function _RawFloatingCursorPoint_offset$(
  m.Scope scope$,
  RawFloatingCursorPoint target$,
) =>
    () {
      return target$.offset;
    };
Function _RawFloatingCursorPoint_state$(
  m.Scope scope$,
  RawFloatingCursorPoint target$,
) =>
    () {
      return target$.state;
    };
Function _RawFloatingCursorPoint__$(m.Scope scope$) => ({
      Offset? offset,
      required FloatingCursorDragState state,
    }) {
      return RawFloatingCursorPoint(
        offset: offset,
        state: state,
      );
    };
Function TextEditingValue_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextEditingValue;
Function TextEditingValue_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextEditingValue;
Function _TextEditingValue_text$(
  m.Scope scope$,
  TextEditingValue target$,
) =>
    () {
      return target$.text;
    };
Function _TextEditingValue_selection$(
  m.Scope scope$,
  TextEditingValue target$,
) =>
    () {
      return target$.selection;
    };
Function _TextEditingValue_composing$(
  m.Scope scope$,
  TextEditingValue target$,
) =>
    () {
      return target$.composing;
    };
Function _TextEditingValue_empty$(m.Scope scope$) =>
    () => TextEditingValue.empty;
Function _TextEditingValue_isComposingRangeValid$(
  m.Scope scope$,
  TextEditingValue target$,
) =>
    () {
      return target$.isComposingRangeValid;
    };
Function _TextEditingValue_hashCode$(
  m.Scope scope$,
  TextEditingValue target$,
) =>
    () {
      return target$.hashCode;
    };
Function _TextEditingValue__$(m.Scope scope$) => ({
      String? text,
      TextSelection? selection,
      TextRange? composing,
    }) {
      return TextEditingValue(
        composing: composing ?? TextRange.empty,
        selection: selection ?? const TextSelection.collapsed(offset: -1),
        text: text ?? '',
      );
    };
Function _TextEditingValue_fromJSON_$(m.Scope scope$) =>
    TextEditingValue.fromJSON;
Function _TextEditingValue_copyWith$(
  m.Scope scope$,
  TextEditingValue target$,
) =>
    target$.copyWith;
Function _TextEditingValue_replaced$(
  m.Scope scope$,
  TextEditingValue target$,
) =>
    target$.replaced;
Function _TextEditingValue_toJSON$(
  m.Scope scope$,
  TextEditingValue target$,
) =>
    target$.toJSON;
Function _TextEditingValue_toString$(
  m.Scope scope$,
  TextEditingValue target$,
) =>
    target$.toString;
Function _TextEditingValue_eq$$(
  m.Scope scope$,
  TextEditingValue target$,
) =>
    (Object other$) => target$ == other$;
Function ScribbleClient_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ScribbleClient;
Function ScribbleClient_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ScribbleClient;
Function _ScribbleClient_elementIdentifier$(
  m.Scope scope$,
  ScribbleClient target$,
) =>
    () {
      return target$.elementIdentifier;
    };
Function _ScribbleClient_bounds$(
  m.Scope scope$,
  ScribbleClient target$,
) =>
    () {
      return target$.bounds;
    };
Function _ScribbleClient_onScribbleFocus$(
  m.Scope scope$,
  ScribbleClient target$,
) =>
    target$.onScribbleFocus;
Function _ScribbleClient_isInScribbleRect$(
  m.Scope scope$,
  ScribbleClient target$,
) =>
    target$.isInScribbleRect;
Function SelectionRect_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SelectionRect;
Function SelectionRect_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SelectionRect;
Function _SelectionRect_position$(
  m.Scope scope$,
  SelectionRect target$,
) =>
    () {
      return target$.position;
    };
Function _SelectionRect_bounds$(
  m.Scope scope$,
  SelectionRect target$,
) =>
    () {
      return target$.bounds;
    };
Function _SelectionRect_direction$(
  m.Scope scope$,
  SelectionRect target$,
) =>
    () {
      return target$.direction;
    };
Function _SelectionRect_hashCode$(
  m.Scope scope$,
  SelectionRect target$,
) =>
    () {
      return target$.hashCode;
    };
Function _SelectionRect__$(m.Scope scope$) => ({
      required int position,
      required Rect bounds,
      TextDirection? direction,
    }) {
      return SelectionRect(
        bounds: bounds,
        direction: direction ?? TextDirection.ltr,
        position: position,
      );
    };
Function _SelectionRect_eq$$(
  m.Scope scope$,
  SelectionRect target$,
) =>
    (Object other$) => target$ == other$;
Function _SelectionRect_toString$(
  m.Scope scope$,
  SelectionRect target$,
) =>
    target$.toString;
Function TextInputConnection_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextInputConnection;
Function TextInputConnection_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextInputConnection;
Function _TextInputConnection_attached$(
  m.Scope scope$,
  TextInputConnection target$,
) =>
    () {
      return target$.attached;
    };
Function _TextInputConnection_scribbleInProgress$(
  m.Scope scope$,
  TextInputConnection target$,
) =>
    () {
      return target$.scribbleInProgress;
    };
Function _TextInputConnection_debugResetId$(m.Scope scope$) =>
    TextInputConnection.debugResetId;
Function _TextInputConnection_show$(
  m.Scope scope$,
  TextInputConnection target$,
) =>
    target$.show;
Function _TextInputConnection_requestAutofill$(
  m.Scope scope$,
  TextInputConnection target$,
) =>
    target$.requestAutofill;
Function _TextInputConnection_updateConfig$(
  m.Scope scope$,
  TextInputConnection target$,
) =>
    target$.updateConfig;
Function _TextInputConnection_setEditingState$(
  m.Scope scope$,
  TextInputConnection target$,
) =>
    target$.setEditingState;
Function _TextInputConnection_setEditableSizeAndTransform$(
  m.Scope scope$,
  TextInputConnection target$,
) =>
    target$.setEditableSizeAndTransform;
Function _TextInputConnection_setComposingRect$(
  m.Scope scope$,
  TextInputConnection target$,
) =>
    target$.setComposingRect;
Function _TextInputConnection_setCaretRect$(
  m.Scope scope$,
  TextInputConnection target$,
) =>
    target$.setCaretRect;
Function _TextInputConnection_setSelectionRects$(
  m.Scope scope$,
  TextInputConnection target$,
) =>
    target$.setSelectionRects;
Function _TextInputConnection_setStyle$(
  m.Scope scope$,
  TextInputConnection target$,
) =>
    target$.setStyle;
Function _TextInputConnection_close$(
  m.Scope scope$,
  TextInputConnection target$,
) =>
    target$.close;
Function _TextInputConnection_connectionClosedReceived$(
  m.Scope scope$,
  TextInputConnection target$,
) =>
    target$.connectionClosedReceived;
Function TextInput_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextInput;
Function TextInput_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextInput;
Function _TextInput_scribbleClients$(m.Scope scope$) =>
    () => TextInput.scribbleClients;
Function _TextInput_scribbleInProgress$(
  m.Scope scope$,
  TextInput target$,
) =>
    () {
      return target$.scribbleInProgress;
    };
Function _TextInput_setChannel$(m.Scope scope$) => TextInput.setChannel;
Function _TextInput_setInputControl$(m.Scope scope$) =>
    TextInput.setInputControl;
Function _TextInput_restorePlatformInputControl$(m.Scope scope$) =>
    TextInput.restorePlatformInputControl;
Function _TextInput_ensureInitialized$(m.Scope scope$) =>
    TextInput.ensureInitialized;
Function _TextInput_attach$(m.Scope scope$) => TextInput.attach;
Function _TextInput_updateEditingValue$(m.Scope scope$) =>
    TextInput.updateEditingValue;
Function _TextInput_finishAutofillContext$(m.Scope scope$) =>
    TextInput.finishAutofillContext;
Function _TextInput_registerScribbleElement$(m.Scope scope$) =>
    TextInput.registerScribbleElement;
Function _TextInput_unregisterScribbleElement$(m.Scope scope$) =>
    TextInput.unregisterScribbleElement;
Function _SmartDashesType_disabled$(m.Scope scope$) =>
    () => SmartDashesType.disabled;
Function _SmartDashesType_enabled$(m.Scope scope$) =>
    () => SmartDashesType.enabled;
Function _SmartDashesType_values$(m.Scope scope$) =>
    () => SmartDashesType.values;
Function _SmartQuotesType_disabled$(m.Scope scope$) =>
    () => SmartQuotesType.disabled;
Function _SmartQuotesType_enabled$(m.Scope scope$) =>
    () => SmartQuotesType.enabled;
Function _SmartQuotesType_values$(m.Scope scope$) =>
    () => SmartQuotesType.values;
Function _TextInputAction_none$(m.Scope scope$) => () => TextInputAction.none;
Function _TextInputAction_unspecified$(m.Scope scope$) =>
    () => TextInputAction.unspecified;
Function _TextInputAction_done$(m.Scope scope$) => () => TextInputAction.done;
Function _TextInputAction_go$(m.Scope scope$) => () => TextInputAction.go;
Function _TextInputAction_search$(m.Scope scope$) =>
    () => TextInputAction.search;
Function _TextInputAction_send$(m.Scope scope$) => () => TextInputAction.send;
Function _TextInputAction_next$(m.Scope scope$) => () => TextInputAction.next;
Function _TextInputAction_previous$(m.Scope scope$) =>
    () => TextInputAction.previous;
Function _TextInputAction_continueAction$(m.Scope scope$) =>
    () => TextInputAction.continueAction;
Function _TextInputAction_join$(m.Scope scope$) => () => TextInputAction.join;
Function _TextInputAction_route$(m.Scope scope$) => () => TextInputAction.route;
Function _TextInputAction_emergencyCall$(m.Scope scope$) =>
    () => TextInputAction.emergencyCall;
Function _TextInputAction_newline$(m.Scope scope$) =>
    () => TextInputAction.newline;
Function _TextInputAction_values$(m.Scope scope$) =>
    () => TextInputAction.values;
Function _TextCapitalization_words$(m.Scope scope$) =>
    () => TextCapitalization.words;
Function _TextCapitalization_sentences$(m.Scope scope$) =>
    () => TextCapitalization.sentences;
Function _TextCapitalization_characters$(m.Scope scope$) =>
    () => TextCapitalization.characters;
Function _TextCapitalization_none$(m.Scope scope$) =>
    () => TextCapitalization.none;
Function _TextCapitalization_values$(m.Scope scope$) =>
    () => TextCapitalization.values;
Function _FloatingCursorDragState_Start$(m.Scope scope$) =>
    () => FloatingCursorDragState.Start;
Function _FloatingCursorDragState_Update$(m.Scope scope$) =>
    () => FloatingCursorDragState.Update;
Function _FloatingCursorDragState_End$(m.Scope scope$) =>
    () => FloatingCursorDragState.End;
Function _FloatingCursorDragState_values$(m.Scope scope$) =>
    () => FloatingCursorDragState.values;
Function _SelectionChangedCause_tap$(m.Scope scope$) =>
    () => SelectionChangedCause.tap;
Function _SelectionChangedCause_doubleTap$(m.Scope scope$) =>
    () => SelectionChangedCause.doubleTap;
Function _SelectionChangedCause_longPress$(m.Scope scope$) =>
    () => SelectionChangedCause.longPress;
Function _SelectionChangedCause_forcePress$(m.Scope scope$) =>
    () => SelectionChangedCause.forcePress;
Function _SelectionChangedCause_keyboard$(m.Scope scope$) =>
    () => SelectionChangedCause.keyboard;
Function _SelectionChangedCause_toolbar$(m.Scope scope$) =>
    () => SelectionChangedCause.toolbar;
Function _SelectionChangedCause_drag$(m.Scope scope$) =>
    () => SelectionChangedCause.drag;
Function _SelectionChangedCause_scribble$(m.Scope scope$) =>
    () => SelectionChangedCause.scribble;
Function _SelectionChangedCause_values$(m.Scope scope$) =>
    () => SelectionChangedCause.values;
