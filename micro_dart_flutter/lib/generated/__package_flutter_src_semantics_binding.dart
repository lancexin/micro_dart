// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/semantics/binding.dart';
import 'dart:ui'
    show AccessibilityFeatures, SemanticsAction, SemanticsUpdateBuilder;
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/semantics/debug.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/semantics/binding.dart',
  {
    // 'SemanticsActionEvent.': _SemanticsActionEvent__$
  },
  {},
  {
    'SemanticsActionEvent': m.ClassMirror(
      'SemanticsActionEvent',
      {
        '#as': SemanticsActionEvent_as$,
        '#is': SemanticsActionEvent_is$,
        'type': _SemanticsActionEvent_type$,
        'nodeId': _SemanticsActionEvent_nodeId$,
        'arguments': _SemanticsActionEvent_arguments$,
      },
      {},
    ),
    'SemanticsHandle': m.ClassMirror(
      'SemanticsHandle',
      {
        '#as': SemanticsHandle_as$,
        '#is': SemanticsHandle_is$,
        'dispose': _SemanticsHandle_dispose$,
      },
      {},
    ),
  },
);
Function SemanticsActionEvent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SemanticsActionEvent;
Function SemanticsActionEvent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SemanticsActionEvent;
Function _SemanticsActionEvent_type$(
  m.Scope scope$,
  SemanticsActionEvent target$,
) =>
    () {
      return target$.type;
    };
Function _SemanticsActionEvent_nodeId$(
  m.Scope scope$,
  SemanticsActionEvent target$,
) =>
    () {
      return target$.nodeId;
    };
Function _SemanticsActionEvent_arguments$(
  m.Scope scope$,
  SemanticsActionEvent target$,
) =>
    () {
      return target$.arguments;
    };
// Function _SemanticsActionEvent__$(m.Scope scope$) => ({
//       required SemanticsAction type,
//       required int nodeId,
//       Object? arguments,
//     }) {
//       return SemanticsActionEvent(
//         arguments: arguments,
//         nodeId: nodeId,
//         type: type,
//       );
//     };
Function SemanticsHandle_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SemanticsHandle;
Function SemanticsHandle_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SemanticsHandle;
Function _SemanticsHandle_dispose$(
  m.Scope scope$,
  SemanticsHandle target$,
) =>
    target$.dispose;
