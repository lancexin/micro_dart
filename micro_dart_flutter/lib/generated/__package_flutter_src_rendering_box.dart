// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/box.dart';
import 'dart:developer' show Timeline;
import 'dart:math';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:vector_math/vector_math_64.dart';
import 'package:flutter/src/rendering/debug.dart';
import 'package:flutter/src/rendering/object.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/box.dart',
  {
    'BoxConstraints.': _BoxConstraints__$,
    'BoxConstraints.tight': _BoxConstraints_tight_$,
    'BoxConstraints.tightFor': _BoxConstraints_tightFor_$,
    'BoxConstraints.tightForFinite': _BoxConstraints_tightForFinite_$,
    'BoxConstraints.loose': _BoxConstraints_loose_$,
    'BoxConstraints.expand': _BoxConstraints_expand_$,
    'BoxConstraints.lerp': _BoxConstraints_lerp$,
    'BoxConstraints.debugAssertIsValid': _BoxConstraints_debugAssertIsValid$,
    'BoxHitTestResult.': _BoxHitTestResult__$,
    'BoxHitTestResult.wrap': _BoxHitTestResult_wrap_$,
    'BoxHitTestResult.addWithPaintTransform':
        _BoxHitTestResult_addWithPaintTransform$,
    'BoxHitTestResult.addWithPaintOffset':
        _BoxHitTestResult_addWithPaintOffset$,
    'BoxHitTestResult.addWithRawTransform':
        _BoxHitTestResult_addWithRawTransform$,
    'BoxHitTestResult.addWithOutOfBandPosition':
        _BoxHitTestResult_addWithOutOfBandPosition$,
    'BoxHitTestEntry.': _BoxHitTestEntry__$,
    'BoxParentData.': _BoxParentData__$,
  },
  {},
  {
    'BoxConstraints': m.ClassMirror(
      'BoxConstraints',
      {
        '#as': BoxConstraints_as$,
        '#is': BoxConstraints_is$,
        'minWidth': _BoxConstraints_minWidth$,
        'maxWidth': _BoxConstraints_maxWidth$,
        'minHeight': _BoxConstraints_minHeight$,
        'maxHeight': _BoxConstraints_maxHeight$,
        'flipped': _BoxConstraints_flipped$,
        'biggest': _BoxConstraints_biggest$,
        'smallest': _BoxConstraints_smallest$,
        'hasTightWidth': _BoxConstraints_hasTightWidth$,
        'hasTightHeight': _BoxConstraints_hasTightHeight$,
        'isTight': _BoxConstraints_isTight$,
        'hasBoundedWidth': _BoxConstraints_hasBoundedWidth$,
        'hasBoundedHeight': _BoxConstraints_hasBoundedHeight$,
        'hasInfiniteWidth': _BoxConstraints_hasInfiniteWidth$,
        'hasInfiniteHeight': _BoxConstraints_hasInfiniteHeight$,
        'isNormalized': _BoxConstraints_isNormalized$,
        'hashCode': _BoxConstraints_hashCode$,
        'copyWith': _BoxConstraints_copyWith$,
        'deflate': _BoxConstraints_deflate$,
        'loosen': _BoxConstraints_loosen$,
        'enforce': _BoxConstraints_enforce$,
        'tighten': _BoxConstraints_tighten$,
        'widthConstraints': _BoxConstraints_widthConstraints$,
        'heightConstraints': _BoxConstraints_heightConstraints$,
        'constrainWidth': _BoxConstraints_constrainWidth$,
        'constrainHeight': _BoxConstraints_constrainHeight$,
        'constrain': _BoxConstraints_constrain$,
        'constrainDimensions': _BoxConstraints_constrainDimensions$,
        'constrainSizeAndAttemptToPreserveAspectRatio':
            _BoxConstraints_constrainSizeAndAttemptToPreserveAspectRatio$,
        'isSatisfiedBy': _BoxConstraints_isSatisfiedBy$,
        '*': _BoxConstraints_times$$,
        '/': _BoxConstraints_over$$,
        '~/': _BoxConstraints_division$$,
        '%': _BoxConstraints_surplus$$,
        'normalize': _BoxConstraints_normalize$,
        '==': _BoxConstraints_eq$$,
        'toString': _BoxConstraints_toString$,
      },
      {},
    ),
    'BoxHitTestResult': m.ClassMirror(
      'BoxHitTestResult',
      {
        '#as': BoxHitTestResult_as$,
        '#is': BoxHitTestResult_is$,
      },
      {},
    ),
    'BoxHitTestEntry': m.ClassMirror(
      'BoxHitTestEntry',
      {
        '#as': BoxHitTestEntry_as$,
        '#is': BoxHitTestEntry_is$,
        'localPosition': _BoxHitTestEntry_localPosition$,
        'toString': _BoxHitTestEntry_toString$,
      },
      {},
    ),
    'BoxParentData': m.ClassMirror(
      'BoxParentData',
      {
        '#as': BoxParentData_as$,
        '#is': BoxParentData_is$,
        'offset': _BoxParentData_offset$,
        'toString': _BoxParentData_toString$,
      },
      {'offset': _BoxParentData_offset_set$},
    ),
    'ContainerBoxParentData': m.ClassMirror(
      'ContainerBoxParentData',
      {
        '#as': ContainerBoxParentData_as$,
        '#is': ContainerBoxParentData_is$,
      },
      {},
    ),
    'RenderBox': m.ClassMirror(
      'RenderBox',
      {
        '#as': RenderBox_as$,
        '#is': RenderBox_is$,
        'hasSize': _RenderBox_hasSize$,
        'size': _RenderBox_size$,
        'semanticBounds': _RenderBox_semanticBounds$,
        'constraints': _RenderBox_constraints$,
        'paintBounds': _RenderBox_paintBounds$,
        'setupParentData': _RenderBox_setupParentData$,
        'getMinIntrinsicWidth': _RenderBox_getMinIntrinsicWidth$,
        'computeMinIntrinsicWidth': _RenderBox_computeMinIntrinsicWidth$,
        'getMaxIntrinsicWidth': _RenderBox_getMaxIntrinsicWidth$,
        'computeMaxIntrinsicWidth': _RenderBox_computeMaxIntrinsicWidth$,
        'getMinIntrinsicHeight': _RenderBox_getMinIntrinsicHeight$,
        'computeMinIntrinsicHeight': _RenderBox_computeMinIntrinsicHeight$,
        'getMaxIntrinsicHeight': _RenderBox_getMaxIntrinsicHeight$,
        'computeMaxIntrinsicHeight': _RenderBox_computeMaxIntrinsicHeight$,
        'getDryLayout': _RenderBox_getDryLayout$,
        'computeDryLayout': _RenderBox_computeDryLayout$,
        'debugCannotComputeDryLayout': _RenderBox_debugCannotComputeDryLayout$,
        'debugAdoptSize': _RenderBox_debugAdoptSize$,
        'debugResetSize': _RenderBox_debugResetSize$,
        'getDistanceToBaseline': _RenderBox_getDistanceToBaseline$,
        'getDistanceToActualBaseline': _RenderBox_getDistanceToActualBaseline$,
        'computeDistanceToActualBaseline':
            _RenderBox_computeDistanceToActualBaseline$,
        'debugAssertDoesMeetConstraints':
            _RenderBox_debugAssertDoesMeetConstraints$,
        'markNeedsLayout': _RenderBox_markNeedsLayout$,
        'layout': _RenderBox_layout$,
        'performResize': _RenderBox_performResize$,
        'performLayout': _RenderBox_performLayout$,
        'hitTest': _RenderBox_hitTest$,
        'hitTestSelf': _RenderBox_hitTestSelf$,
        'hitTestChildren': _RenderBox_hitTestChildren$,
        'applyPaintTransform': _RenderBox_applyPaintTransform$,
        'globalToLocal': _RenderBox_globalToLocal$,
        'localToGlobal': _RenderBox_localToGlobal$,
        'handleEvent': _RenderBox_handleEvent$,
        'debugHandleEvent': _RenderBox_debugHandleEvent$,
        'debugPaint': _RenderBox_debugPaint$,
        'debugPaintSize': _RenderBox_debugPaintSize$,
        'debugPaintBaselines': _RenderBox_debugPaintBaselines$,
        'debugPaintPointers': _RenderBox_debugPaintPointers$,
        'debugFillProperties': _RenderBox_debugFillProperties$,
      },
      {'size': _RenderBox_size_set$},
    ),
  },
);
Function BoxConstraints_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as BoxConstraints;
Function BoxConstraints_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is BoxConstraints;
Function _BoxConstraints_minWidth$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    () {
      return target$.minWidth;
    };
Function _BoxConstraints_maxWidth$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    () {
      return target$.maxWidth;
    };
Function _BoxConstraints_minHeight$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    () {
      return target$.minHeight;
    };
Function _BoxConstraints_maxHeight$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    () {
      return target$.maxHeight;
    };
Function _BoxConstraints_flipped$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    () {
      return target$.flipped;
    };
Function _BoxConstraints_biggest$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    () {
      return target$.biggest;
    };
Function _BoxConstraints_smallest$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    () {
      return target$.smallest;
    };
Function _BoxConstraints_hasTightWidth$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    () {
      return target$.hasTightWidth;
    };
Function _BoxConstraints_hasTightHeight$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    () {
      return target$.hasTightHeight;
    };
Function _BoxConstraints_isTight$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    () {
      return target$.isTight;
    };
Function _BoxConstraints_hasBoundedWidth$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    () {
      return target$.hasBoundedWidth;
    };
Function _BoxConstraints_hasBoundedHeight$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    () {
      return target$.hasBoundedHeight;
    };
Function _BoxConstraints_hasInfiniteWidth$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    () {
      return target$.hasInfiniteWidth;
    };
Function _BoxConstraints_hasInfiniteHeight$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    () {
      return target$.hasInfiniteHeight;
    };
Function _BoxConstraints_isNormalized$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    () {
      return target$.isNormalized;
    };
Function _BoxConstraints_hashCode$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    () {
      return target$.hashCode;
    };
Function _BoxConstraints__$(m.Scope scope$) => ({
      double? minWidth,
      double? maxWidth,
      double? minHeight,
      double? maxHeight,
    }) {
      return BoxConstraints(
        maxHeight: maxHeight ?? double.infinity,
        maxWidth: maxWidth ?? double.infinity,
        minHeight: minHeight ?? 0.0,
        minWidth: minWidth ?? 0.0,
      );
    };
Function _BoxConstraints_tight_$(m.Scope scope$) => BoxConstraints.tight;
Function _BoxConstraints_tightFor_$(m.Scope scope$) => BoxConstraints.tightFor;
Function _BoxConstraints_tightForFinite_$(m.Scope scope$) =>
    BoxConstraints.tightForFinite;
Function _BoxConstraints_loose_$(m.Scope scope$) => BoxConstraints.loose;
Function _BoxConstraints_expand_$(m.Scope scope$) => BoxConstraints.expand;
Function _BoxConstraints_copyWith$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    target$.copyWith;
Function _BoxConstraints_deflate$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    target$.deflate;
Function _BoxConstraints_loosen$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    target$.loosen;
Function _BoxConstraints_enforce$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    target$.enforce;
Function _BoxConstraints_tighten$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    target$.tighten;
Function _BoxConstraints_widthConstraints$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    target$.widthConstraints;
Function _BoxConstraints_heightConstraints$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    target$.heightConstraints;
Function _BoxConstraints_constrainWidth$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    target$.constrainWidth;
Function _BoxConstraints_constrainHeight$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    target$.constrainHeight;
Function _BoxConstraints_constrain$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    target$.constrain;
Function _BoxConstraints_constrainDimensions$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    target$.constrainDimensions;
Function _BoxConstraints_constrainSizeAndAttemptToPreserveAspectRatio$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    target$.constrainSizeAndAttemptToPreserveAspectRatio;
Function _BoxConstraints_isSatisfiedBy$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    target$.isSatisfiedBy;
Function _BoxConstraints_times$$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    (double other$) => target$ * other$;
Function _BoxConstraints_over$$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    (double other$) => target$ / other$;
Function _BoxConstraints_division$$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    (double other$) => target$ ~/ other$;
Function _BoxConstraints_surplus$$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    (double other$) => target$ % other$;
Function _BoxConstraints_lerp$(m.Scope scope$) => BoxConstraints.lerp;
Function _BoxConstraints_debugAssertIsValid$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    ({
      bool? isAppliedConstraint,
      m.FunctionPointer? informationCollector,
    }) {
      Iterable<DiagnosticsNode> informationCollectorProxy() =>
          scope$.engine.callFunctionPointer(
            scope$,
            informationCollector!,
            [],
            {},
          );
      return target$.debugAssertIsValid(
        informationCollector:
            informationCollector == null ? null : informationCollectorProxy,
        isAppliedConstraint: isAppliedConstraint ?? false,
      );
    };
Function _BoxConstraints_normalize$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    target$.normalize;
Function _BoxConstraints_eq$$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    (Object other$) => target$ == other$;
Function _BoxConstraints_toString$(
  m.Scope scope$,
  BoxConstraints target$,
) =>
    target$.toString;
Function BoxHitTestResult_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as BoxHitTestResult;
Function BoxHitTestResult_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is BoxHitTestResult;
Function _BoxHitTestResult__$(m.Scope scope$) => () {
      return BoxHitTestResult();
    };
Function _BoxHitTestResult_wrap_$(m.Scope scope$) => BoxHitTestResult.wrap;
Function _BoxHitTestResult_addWithPaintTransform$(
  m.Scope scope$,
  BoxHitTestResult target$,
) =>
    ({
      required Matrix4? transform,
      required Offset position,
      required m.FunctionPointer hitTest,
    }) {
      bool hitTestProxy(
        BoxHitTestResult hitTest_result$,
        Offset hitTest_position$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            hitTest,
            [
              hitTest_result$,
              hitTest_position$,
            ],
            {},
          );
      return target$.addWithPaintTransform(
        hitTest: hitTestProxy,
        position: position,
        transform: transform,
      );
    };
Function _BoxHitTestResult_addWithPaintOffset$(
  m.Scope scope$,
  BoxHitTestResult target$,
) =>
    ({
      required Offset? offset,
      required Offset position,
      required m.FunctionPointer hitTest,
    }) {
      bool hitTestProxy(
        BoxHitTestResult hitTest_result$,
        Offset hitTest_position$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            hitTest,
            [
              hitTest_result$,
              hitTest_position$,
            ],
            {},
          );
      return target$.addWithPaintOffset(
        hitTest: hitTestProxy,
        offset: offset,
        position: position,
      );
    };
Function _BoxHitTestResult_addWithRawTransform$(
  m.Scope scope$,
  BoxHitTestResult target$,
) =>
    ({
      required Matrix4? transform,
      required Offset position,
      required m.FunctionPointer hitTest,
    }) {
      bool hitTestProxy(
        BoxHitTestResult hitTest_result$,
        Offset hitTest_position$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            hitTest,
            [
              hitTest_result$,
              hitTest_position$,
            ],
            {},
          );
      return target$.addWithRawTransform(
        hitTest: hitTestProxy,
        position: position,
        transform: transform,
      );
    };
Function _BoxHitTestResult_addWithOutOfBandPosition$(
  m.Scope scope$,
  BoxHitTestResult target$,
) =>
    ({
      Offset? paintOffset,
      Matrix4? paintTransform,
      Matrix4? rawTransform,
      required m.FunctionPointer hitTest,
    }) {
      bool hitTestProxy(BoxHitTestResult hitTest_result$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            hitTest,
            [hitTest_result$],
            {},
          );
      return target$.addWithOutOfBandPosition(
        hitTest: hitTestProxy,
        paintOffset: paintOffset,
        paintTransform: paintTransform,
        rawTransform: rawTransform,
      );
    };
Function BoxHitTestEntry_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as BoxHitTestEntry;
Function BoxHitTestEntry_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is BoxHitTestEntry;
Function _BoxHitTestEntry_localPosition$(
  m.Scope scope$,
  BoxHitTestEntry target$,
) =>
    () {
      return target$.localPosition;
    };
Function _BoxHitTestEntry__$(m.Scope scope$) => (
      RenderBox target,
      Offset localPosition,
    ) {
      return BoxHitTestEntry(
        target,
        localPosition,
      );
    };
Function _BoxHitTestEntry_toString$(
  m.Scope scope$,
  BoxHitTestEntry target$,
) =>
    target$.toString;
Function BoxParentData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as BoxParentData;
Function BoxParentData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is BoxParentData;
Function _BoxParentData_offset$(
  m.Scope scope$,
  BoxParentData target$,
) =>
    () {
      return target$.offset;
    };
void _BoxParentData_offset_set$(
  m.Scope scope$,
  BoxParentData target$,
) =>
    (dynamic other$) {
      target$.offset = other$;
    };
Function _BoxParentData__$(m.Scope scope$) => () {
      return BoxParentData();
    };
Function _BoxParentData_toString$(
  m.Scope scope$,
  BoxParentData target$,
) =>
    target$.toString;
Function ContainerBoxParentData_as$<ChildType extends RenderObject>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ContainerBoxParentData<ChildType>;
Function ContainerBoxParentData_is$<ChildType extends RenderObject>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ContainerBoxParentData<ChildType>;
Function RenderBox_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RenderBox;
Function RenderBox_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RenderBox;
Function _RenderBox_hasSize$(
  m.Scope scope$,
  RenderBox target$,
) =>
    () {
      return target$.hasSize;
    };
Function _RenderBox_size$(
  m.Scope scope$,
  RenderBox target$,
) =>
    () {
      return target$.size;
    };
void _RenderBox_size_set$(
  m.Scope scope$,
  RenderBox target$,
) =>
    (dynamic other$) {
      target$.size = other$;
    };
Function _RenderBox_semanticBounds$(
  m.Scope scope$,
  RenderBox target$,
) =>
    () {
      return target$.semanticBounds;
    };
Function _RenderBox_constraints$(
  m.Scope scope$,
  RenderBox target$,
) =>
    () {
      return target$.constraints;
    };
Function _RenderBox_paintBounds$(
  m.Scope scope$,
  RenderBox target$,
) =>
    () {
      return target$.paintBounds;
    };
Function _RenderBox_setupParentData$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.setupParentData;
Function _RenderBox_getMinIntrinsicWidth$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.getMinIntrinsicWidth;
Function _RenderBox_computeMinIntrinsicWidth$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.computeMinIntrinsicWidth;
Function _RenderBox_getMaxIntrinsicWidth$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.getMaxIntrinsicWidth;
Function _RenderBox_computeMaxIntrinsicWidth$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.computeMaxIntrinsicWidth;
Function _RenderBox_getMinIntrinsicHeight$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.getMinIntrinsicHeight;
Function _RenderBox_computeMinIntrinsicHeight$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.computeMinIntrinsicHeight;
Function _RenderBox_getMaxIntrinsicHeight$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.getMaxIntrinsicHeight;
Function _RenderBox_computeMaxIntrinsicHeight$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.computeMaxIntrinsicHeight;
Function _RenderBox_getDryLayout$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.getDryLayout;
Function _RenderBox_computeDryLayout$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.computeDryLayout;
Function _RenderBox_debugCannotComputeDryLayout$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.debugCannotComputeDryLayout;
Function _RenderBox_debugAdoptSize$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.debugAdoptSize;
Function _RenderBox_debugResetSize$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.debugResetSize;
Function _RenderBox_getDistanceToBaseline$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.getDistanceToBaseline;
Function _RenderBox_getDistanceToActualBaseline$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.getDistanceToActualBaseline;
Function _RenderBox_computeDistanceToActualBaseline$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.computeDistanceToActualBaseline;
Function _RenderBox_debugAssertDoesMeetConstraints$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.debugAssertDoesMeetConstraints;
Function _RenderBox_markNeedsLayout$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.markNeedsLayout;
Function _RenderBox_layout$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.layout;
Function _RenderBox_performResize$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.performResize;
Function _RenderBox_performLayout$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.performLayout;
Function _RenderBox_hitTest$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.hitTest;
Function _RenderBox_hitTestSelf$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.hitTestSelf;
Function _RenderBox_hitTestChildren$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.hitTestChildren;
Function _RenderBox_applyPaintTransform$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.applyPaintTransform;
Function _RenderBox_globalToLocal$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.globalToLocal;
Function _RenderBox_localToGlobal$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.localToGlobal;
Function _RenderBox_handleEvent$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.handleEvent;
Function _RenderBox_debugHandleEvent$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.debugHandleEvent;
Function _RenderBox_debugPaint$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.debugPaint;
Function _RenderBox_debugPaintSize$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.debugPaintSize;
Function _RenderBox_debugPaintBaselines$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.debugPaintBaselines;
Function _RenderBox_debugPaintPointers$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.debugPaintPointers;
Function _RenderBox_debugFillProperties$(
  m.Scope scope$,
  RenderBox target$,
) =>
    target$.debugFillProperties;
