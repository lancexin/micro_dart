// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/navigation_drawer.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/drawer.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/navigation_bar.dart';
import 'package:flutter/src/material/navigation_drawer_theme.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/navigation_drawer.dart',
  {
    'NavigationDrawer.': _NavigationDrawer__$,
    'NavigationDrawerDestination.': _NavigationDrawerDestination__$,
  },
  {},
  {
    'NavigationDrawer': m.ClassMirror(
      'NavigationDrawer',
      {
        '#as': NavigationDrawer_as$,
        '#is': NavigationDrawer_is$,
        'backgroundColor': _NavigationDrawer_backgroundColor$,
        'shadowColor': _NavigationDrawer_shadowColor$,
        'surfaceTintColor': _NavigationDrawer_surfaceTintColor$,
        'elevation': _NavigationDrawer_elevation$,
        'indicatorColor': _NavigationDrawer_indicatorColor$,
        'indicatorShape': _NavigationDrawer_indicatorShape$,
        'children': _NavigationDrawer_children$,
        'selectedIndex': _NavigationDrawer_selectedIndex$,
        'onDestinationSelected': _NavigationDrawer_onDestinationSelected$,
        'build': _NavigationDrawer_build$,
      },
      {},
    ),
    'NavigationDrawerDestination': m.ClassMirror(
      'NavigationDrawerDestination',
      {
        '#as': NavigationDrawerDestination_as$,
        '#is': NavigationDrawerDestination_is$,
        'backgroundColor': _NavigationDrawerDestination_backgroundColor$,
        'icon': _NavigationDrawerDestination_icon$,
        'selectedIcon': _NavigationDrawerDestination_selectedIcon$,
        'label': _NavigationDrawerDestination_label$,
        'build': _NavigationDrawerDestination_build$,
      },
      {},
    ),
  },
);
Function NavigationDrawer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as NavigationDrawer;
Function NavigationDrawer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is NavigationDrawer;
Function _NavigationDrawer_backgroundColor$(
  m.Scope scope$,
  NavigationDrawer target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _NavigationDrawer_shadowColor$(
  m.Scope scope$,
  NavigationDrawer target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _NavigationDrawer_surfaceTintColor$(
  m.Scope scope$,
  NavigationDrawer target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _NavigationDrawer_elevation$(
  m.Scope scope$,
  NavigationDrawer target$,
) =>
    () {
      return target$.elevation;
    };
Function _NavigationDrawer_indicatorColor$(
  m.Scope scope$,
  NavigationDrawer target$,
) =>
    () {
      return target$.indicatorColor;
    };
Function _NavigationDrawer_indicatorShape$(
  m.Scope scope$,
  NavigationDrawer target$,
) =>
    () {
      return target$.indicatorShape;
    };
Function _NavigationDrawer_children$(
  m.Scope scope$,
  NavigationDrawer target$,
) =>
    () {
      return target$.children;
    };
Function _NavigationDrawer_selectedIndex$(
  m.Scope scope$,
  NavigationDrawer target$,
) =>
    () {
      return target$.selectedIndex;
    };
Function _NavigationDrawer_onDestinationSelected$(
  m.Scope scope$,
  NavigationDrawer target$,
) =>
    () {
      return target$.onDestinationSelected;
    };
Function _NavigationDrawer__$(m.Scope scope$) => ({
      Key? key,
      required List children,
      Color? backgroundColor,
      Color? shadowColor,
      Color? surfaceTintColor,
      double? elevation,
      Color? indicatorColor,
      ShapeBorder? indicatorShape,
      m.FunctionPointer? onDestinationSelected,
      int? selectedIndex,
    }) {
      void onDestinationSelectedProxy(int onDestinationSelected_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onDestinationSelected!,
            [onDestinationSelected_value$],
            {},
          );
      return NavigationDrawer(
        backgroundColor: backgroundColor,
        children: List.from(children),
        elevation: elevation,
        indicatorColor: indicatorColor,
        indicatorShape: indicatorShape,
        key: key,
        onDestinationSelected:
            onDestinationSelected == null ? null : onDestinationSelectedProxy,
        selectedIndex: selectedIndex ?? 0,
        shadowColor: shadowColor,
        surfaceTintColor: surfaceTintColor,
      );
    };
Function _NavigationDrawer_build$(
  m.Scope scope$,
  NavigationDrawer target$,
) =>
    target$.build;
Function NavigationDrawerDestination_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as NavigationDrawerDestination;
Function NavigationDrawerDestination_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is NavigationDrawerDestination;
Function _NavigationDrawerDestination_backgroundColor$(
  m.Scope scope$,
  NavigationDrawerDestination target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _NavigationDrawerDestination_icon$(
  m.Scope scope$,
  NavigationDrawerDestination target$,
) =>
    () {
      return target$.icon;
    };
Function _NavigationDrawerDestination_selectedIcon$(
  m.Scope scope$,
  NavigationDrawerDestination target$,
) =>
    () {
      return target$.selectedIcon;
    };
Function _NavigationDrawerDestination_label$(
  m.Scope scope$,
  NavigationDrawerDestination target$,
) =>
    () {
      return target$.label;
    };
Function _NavigationDrawerDestination__$(m.Scope scope$) => ({
      Key? key,
      Color? backgroundColor,
      required Widget icon,
      Widget? selectedIcon,
      required Widget label,
    }) {
      return NavigationDrawerDestination(
        backgroundColor: backgroundColor,
        icon: icon,
        key: key,
        label: label,
        selectedIcon: selectedIcon,
      );
    };
Function _NavigationDrawerDestination_build$(
  m.Scope scope$,
  NavigationDrawerDestination target$,
) =>
    target$.build;
