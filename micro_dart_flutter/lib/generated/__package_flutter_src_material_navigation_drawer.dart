// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/navigation_drawer.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/drawer.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/navigation_bar.dart';
import 'package:flutter/src/material/navigation_drawer_theme.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/navigation_drawer.dart',
  {},
  {},
  {
    'NavigationDrawer': m.ClassMirror(
      'NavigationDrawer',
      {
        '#as': NavigationDrawer_as$,
        '#is': NavigationDrawer_is$,
        'backgroundColor': _NavigationDrawer_backgroundColor$,
        'shadowColor': _NavigationDrawer_shadowColor$,
        'surfaceTintColor': _NavigationDrawer_surfaceTintColor$,
        'elevation': _NavigationDrawer_elevation$,
        'indicatorColor': _NavigationDrawer_indicatorColor$,
        'indicatorShape': _NavigationDrawer_indicatorShape$,
        'children': _NavigationDrawer_children$,
        'selectedIndex': _NavigationDrawer_selectedIndex$,
        'onDestinationSelected': _NavigationDrawer_onDestinationSelected$,
        'build': _NavigationDrawer_build$,
      },
      {},
    ),
    'NavigationDrawerDestination': m.ClassMirror(
      'NavigationDrawerDestination',
      {
        '#as': NavigationDrawerDestination_as$,
        '#is': NavigationDrawerDestination_is$,
        'backgroundColor': _NavigationDrawerDestination_backgroundColor$,
        'icon': _NavigationDrawerDestination_icon$,
        'selectedIcon': _NavigationDrawerDestination_selectedIcon$,
        'label': _NavigationDrawerDestination_label$,
        'build': _NavigationDrawerDestination_build$,
      },
      {},
    ),
  },
);
Function NavigationDrawer_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as NavigationDrawer;
Function NavigationDrawer_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is NavigationDrawer;
Color? _NavigationDrawer_backgroundColor$(NavigationDrawer target) {
  return target.backgroundColor;
}

Color? _NavigationDrawer_shadowColor$(NavigationDrawer target) {
  return target.shadowColor;
}

Color? _NavigationDrawer_surfaceTintColor$(NavigationDrawer target) {
  return target.surfaceTintColor;
}

double? _NavigationDrawer_elevation$(NavigationDrawer target) {
  return target.elevation;
}

Color? _NavigationDrawer_indicatorColor$(NavigationDrawer target) {
  return target.indicatorColor;
}

ShapeBorder? _NavigationDrawer_indicatorShape$(NavigationDrawer target) {
  return target.indicatorShape;
}

List<Widget> _NavigationDrawer_children$(NavigationDrawer target) {
  return target.children;
}

int? _NavigationDrawer_selectedIndex$(NavigationDrawer target) {
  return target.selectedIndex;
}

void Function(int)? _NavigationDrawer_onDestinationSelected$(
    NavigationDrawer target) {
  return target.onDestinationSelected;
}

Function _NavigationDrawer_build$(
  m.Scope scope,
  NavigationDrawer target,
) =>
    target.build;
Function NavigationDrawerDestination_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as NavigationDrawerDestination;
Function NavigationDrawerDestination_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is NavigationDrawerDestination;
Color? _NavigationDrawerDestination_backgroundColor$(
    NavigationDrawerDestination target) {
  return target.backgroundColor;
}

Widget _NavigationDrawerDestination_icon$(NavigationDrawerDestination target) {
  return target.icon;
}

Widget? _NavigationDrawerDestination_selectedIcon$(
    NavigationDrawerDestination target) {
  return target.selectedIcon;
}

Widget _NavigationDrawerDestination_label$(NavigationDrawerDestination target) {
  return target.label;
}

Function _NavigationDrawerDestination_build$(
  m.Scope scope,
  NavigationDrawerDestination target,
) =>
    target.build;
