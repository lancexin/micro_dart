// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/picker.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/picker.dart',
  {},
  {},
  {
    'CupertinoPicker': m.ClassMirror(
      'CupertinoPicker',
      {
        'diameterRatio': _CupertinoPicker_diameterRatio$,
        'backgroundColor': _CupertinoPicker_backgroundColor$,
        'offAxisFraction': _CupertinoPicker_offAxisFraction$,
        'useMagnifier': _CupertinoPicker_useMagnifier$,
        'magnification': _CupertinoPicker_magnification$,
        'scrollController': _CupertinoPicker_scrollController$,
        'itemExtent': _CupertinoPicker_itemExtent$,
        'squeeze': _CupertinoPicker_squeeze$,
        'onSelectedItemChanged': _CupertinoPicker_onSelectedItemChanged$,
        'childDelegate': _CupertinoPicker_childDelegate$,
        'selectionOverlay': _CupertinoPicker_selectionOverlay$,
        'createState': _CupertinoPicker_createState$,
      },
      {},
    ),
    'CupertinoPickerDefaultSelectionOverlay': m.ClassMirror(
      'CupertinoPickerDefaultSelectionOverlay',
      {
        'capStartEdge': _CupertinoPickerDefaultSelectionOverlay_capStartEdge$,
        'capEndEdge': _CupertinoPickerDefaultSelectionOverlay_capEndEdge$,
        'background': _CupertinoPickerDefaultSelectionOverlay_background$,
        'build': _CupertinoPickerDefaultSelectionOverlay_build$,
      },
      {},
    ),
  },
);
double _CupertinoPicker_diameterRatio$(CupertinoPicker target) {
  return target.diameterRatio;
}

Color? _CupertinoPicker_backgroundColor$(CupertinoPicker target) {
  return target.backgroundColor;
}

double _CupertinoPicker_offAxisFraction$(CupertinoPicker target) {
  return target.offAxisFraction;
}

bool _CupertinoPicker_useMagnifier$(CupertinoPicker target) {
  return target.useMagnifier;
}

double _CupertinoPicker_magnification$(CupertinoPicker target) {
  return target.magnification;
}

FixedExtentScrollController? _CupertinoPicker_scrollController$(
    CupertinoPicker target) {
  return target.scrollController;
}

double _CupertinoPicker_itemExtent$(CupertinoPicker target) {
  return target.itemExtent;
}

double _CupertinoPicker_squeeze$(CupertinoPicker target) {
  return target.squeeze;
}

void Function(int)? _CupertinoPicker_onSelectedItemChanged$(
    CupertinoPicker target) {
  return target.onSelectedItemChanged;
}

ListWheelChildDelegate _CupertinoPicker_childDelegate$(CupertinoPicker target) {
  return target.childDelegate;
}

Widget? _CupertinoPicker_selectionOverlay$(CupertinoPicker target) {
  return target.selectionOverlay;
}

Function _CupertinoPicker_createState$(
  m.Scope scope,
  CupertinoPicker target,
) =>
    target.createState;
bool _CupertinoPickerDefaultSelectionOverlay_capStartEdge$(
    CupertinoPickerDefaultSelectionOverlay target) {
  return target.capStartEdge;
}

bool _CupertinoPickerDefaultSelectionOverlay_capEndEdge$(
    CupertinoPickerDefaultSelectionOverlay target) {
  return target.capEndEdge;
}

Color _CupertinoPickerDefaultSelectionOverlay_background$(
    CupertinoPickerDefaultSelectionOverlay target) {
  return target.background;
}

Function _CupertinoPickerDefaultSelectionOverlay_build$(
  m.Scope scope,
  CupertinoPickerDefaultSelectionOverlay target,
) =>
    target.build;
