// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/picker.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/picker.dart',
  {
    'CupertinoPicker.': _CupertinoPicker__$,
    'CupertinoPicker.builder': _CupertinoPicker_builder_$,
    'CupertinoPickerDefaultSelectionOverlay.':
        _CupertinoPickerDefaultSelectionOverlay__$,
  },
  {},
  {
    'CupertinoPicker': m.ClassMirror(
      'CupertinoPicker',
      {
        '#as': CupertinoPicker_as$,
        '#is': CupertinoPicker_is$,
        'diameterRatio': _CupertinoPicker_diameterRatio$,
        'backgroundColor': _CupertinoPicker_backgroundColor$,
        'offAxisFraction': _CupertinoPicker_offAxisFraction$,
        'useMagnifier': _CupertinoPicker_useMagnifier$,
        'magnification': _CupertinoPicker_magnification$,
        'scrollController': _CupertinoPicker_scrollController$,
        'itemExtent': _CupertinoPicker_itemExtent$,
        'squeeze': _CupertinoPicker_squeeze$,
        'onSelectedItemChanged': _CupertinoPicker_onSelectedItemChanged$,
        'childDelegate': _CupertinoPicker_childDelegate$,
        'selectionOverlay': _CupertinoPicker_selectionOverlay$,
        'createState': _CupertinoPicker_createState$,
      },
      {},
    ),
    'CupertinoPickerDefaultSelectionOverlay': m.ClassMirror(
      'CupertinoPickerDefaultSelectionOverlay',
      {
        '#as': CupertinoPickerDefaultSelectionOverlay_as$,
        '#is': CupertinoPickerDefaultSelectionOverlay_is$,
        'capStartEdge': _CupertinoPickerDefaultSelectionOverlay_capStartEdge$,
        'capEndEdge': _CupertinoPickerDefaultSelectionOverlay_capEndEdge$,
        'background': _CupertinoPickerDefaultSelectionOverlay_background$,
        'build': _CupertinoPickerDefaultSelectionOverlay_build$,
      },
      {},
    ),
  },
);
Function CupertinoPicker_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoPicker;
Function CupertinoPicker_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoPicker;
Function _CupertinoPicker_diameterRatio$(
  m.Scope scope$,
  CupertinoPicker target$,
) =>
    () {
      return target$.diameterRatio;
    };
Function _CupertinoPicker_backgroundColor$(
  m.Scope scope$,
  CupertinoPicker target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _CupertinoPicker_offAxisFraction$(
  m.Scope scope$,
  CupertinoPicker target$,
) =>
    () {
      return target$.offAxisFraction;
    };
Function _CupertinoPicker_useMagnifier$(
  m.Scope scope$,
  CupertinoPicker target$,
) =>
    () {
      return target$.useMagnifier;
    };
Function _CupertinoPicker_magnification$(
  m.Scope scope$,
  CupertinoPicker target$,
) =>
    () {
      return target$.magnification;
    };
Function _CupertinoPicker_scrollController$(
  m.Scope scope$,
  CupertinoPicker target$,
) =>
    () {
      return target$.scrollController;
    };
Function _CupertinoPicker_itemExtent$(
  m.Scope scope$,
  CupertinoPicker target$,
) =>
    () {
      return target$.itemExtent;
    };
Function _CupertinoPicker_squeeze$(
  m.Scope scope$,
  CupertinoPicker target$,
) =>
    () {
      return target$.squeeze;
    };
Function _CupertinoPicker_onSelectedItemChanged$(
  m.Scope scope$,
  CupertinoPicker target$,
) =>
    () {
      return target$.onSelectedItemChanged;
    };
Function _CupertinoPicker_childDelegate$(
  m.Scope scope$,
  CupertinoPicker target$,
) =>
    () {
      return target$.childDelegate;
    };
Function _CupertinoPicker_selectionOverlay$(
  m.Scope scope$,
  CupertinoPicker target$,
) =>
    () {
      return target$.selectionOverlay;
    };
Function _CupertinoPicker__$(m.Scope scope$) => ({
      Key? key,
      double? diameterRatio,
      Color? backgroundColor,
      double? offAxisFraction,
      bool? useMagnifier,
      double? magnification,
      FixedExtentScrollController? scrollController,
      double? squeeze,
      required double itemExtent,
      required m.FunctionPointer? onSelectedItemChanged,
      required List children,
      Widget? selectionOverlay,
      bool? looping,
    }) {
      void onSelectedItemChangedProxy(int onSelectedItemChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSelectedItemChanged!,
            [onSelectedItemChanged_value$],
            {},
          );
      return CupertinoPicker(
        backgroundColor: backgroundColor,
        children: List.from(children),
        diameterRatio: diameterRatio ?? 1.07,
        itemExtent: itemExtent,
        key: key,
        looping: looping ?? false,
        magnification: magnification ?? 1.0,
        offAxisFraction: offAxisFraction ?? 0.0,
        onSelectedItemChanged:
            onSelectedItemChanged == null ? null : onSelectedItemChangedProxy,
        scrollController: scrollController,
        selectionOverlay:
            selectionOverlay ?? const CupertinoPickerDefaultSelectionOverlay(),
        squeeze: squeeze ?? 1.45,
        useMagnifier: useMagnifier ?? false,
      );
    };
Function _CupertinoPicker_builder_$(m.Scope scope$) => ({
      Key? key,
      double? diameterRatio,
      Color? backgroundColor,
      double? offAxisFraction,
      bool? useMagnifier,
      double? magnification,
      FixedExtentScrollController? scrollController,
      double? squeeze,
      required double itemExtent,
      required m.FunctionPointer? onSelectedItemChanged,
      required m.FunctionPointer itemBuilder,
      int? childCount,
      Widget? selectionOverlay,
    }) {
      Widget? itemBuilderProxy(
        BuildContext itemBuilder_context$,
        int itemBuilder_index$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            itemBuilder,
            [
              itemBuilder_context$,
              itemBuilder_index$,
            ],
            {},
          );
      void onSelectedItemChangedProxy(int onSelectedItemChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSelectedItemChanged!,
            [onSelectedItemChanged_value$],
            {},
          );
      return CupertinoPicker.builder(
        backgroundColor: backgroundColor,
        childCount: childCount,
        diameterRatio: diameterRatio ?? 1.07,
        itemBuilder: itemBuilderProxy,
        itemExtent: itemExtent,
        key: key,
        magnification: magnification ?? 1.0,
        offAxisFraction: offAxisFraction ?? 0.0,
        onSelectedItemChanged:
            onSelectedItemChanged == null ? null : onSelectedItemChangedProxy,
        scrollController: scrollController,
        selectionOverlay:
            selectionOverlay ?? const CupertinoPickerDefaultSelectionOverlay(),
        squeeze: squeeze ?? 1.45,
        useMagnifier: useMagnifier ?? false,
      );
    };
Function _CupertinoPicker_createState$(
  m.Scope scope$,
  CupertinoPicker target$,
) =>
    target$.createState;
Function CupertinoPickerDefaultSelectionOverlay_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoPickerDefaultSelectionOverlay;
Function CupertinoPickerDefaultSelectionOverlay_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoPickerDefaultSelectionOverlay;
Function _CupertinoPickerDefaultSelectionOverlay_capStartEdge$(
  m.Scope scope$,
  CupertinoPickerDefaultSelectionOverlay target$,
) =>
    () {
      return target$.capStartEdge;
    };
Function _CupertinoPickerDefaultSelectionOverlay_capEndEdge$(
  m.Scope scope$,
  CupertinoPickerDefaultSelectionOverlay target$,
) =>
    () {
      return target$.capEndEdge;
    };
Function _CupertinoPickerDefaultSelectionOverlay_background$(
  m.Scope scope$,
  CupertinoPickerDefaultSelectionOverlay target$,
) =>
    () {
      return target$.background;
    };
Function _CupertinoPickerDefaultSelectionOverlay__$(m.Scope scope$) => ({
      Key? key,
      Color? background,
      bool? capStartEdge,
      bool? capEndEdge,
    }) {
      return CupertinoPickerDefaultSelectionOverlay(
        background: background ?? CupertinoColors.tertiarySystemFill,
        capEndEdge: capEndEdge ?? true,
        capStartEdge: capStartEdge ?? true,
        key: key,
      );
    };
Function _CupertinoPickerDefaultSelectionOverlay_build$(
  m.Scope scope$,
  CupertinoPickerDefaultSelectionOverlay target$,
) =>
    target$.build;
