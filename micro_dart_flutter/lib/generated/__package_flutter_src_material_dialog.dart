// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/dialog.dart';
import 'dart:ui';
import 'package:flutter/foundation.dart' show clampDouble;
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/dialog_theme.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/dialog.dart',
  {'showDialog': _showDialog$},
  {},
  {
    'Dialog': m.ClassMirror(
      'Dialog',
      {
        'backgroundColor': _Dialog_backgroundColor$,
        'elevation': _Dialog_elevation$,
        'shadowColor': _Dialog_shadowColor$,
        'surfaceTintColor': _Dialog_surfaceTintColor$,
        'insetAnimationDuration': _Dialog_insetAnimationDuration$,
        'insetAnimationCurve': _Dialog_insetAnimationCurve$,
        'insetPadding': _Dialog_insetPadding$,
        'clipBehavior': _Dialog_clipBehavior$,
        'shape': _Dialog_shape$,
        'alignment': _Dialog_alignment$,
        'child': _Dialog_child$,
        'build': _Dialog_build$,
      },
      {},
    ),
    'AlertDialog': m.ClassMirror(
      'AlertDialog',
      {
        'icon': _AlertDialog_icon$,
        'iconColor': _AlertDialog_iconColor$,
        'iconPadding': _AlertDialog_iconPadding$,
        'title': _AlertDialog_title$,
        'titlePadding': _AlertDialog_titlePadding$,
        'titleTextStyle': _AlertDialog_titleTextStyle$,
        'content': _AlertDialog_content$,
        'contentPadding': _AlertDialog_contentPadding$,
        'contentTextStyle': _AlertDialog_contentTextStyle$,
        'actions': _AlertDialog_actions$,
        'actionsPadding': _AlertDialog_actionsPadding$,
        'actionsAlignment': _AlertDialog_actionsAlignment$,
        'actionsOverflowAlignment': _AlertDialog_actionsOverflowAlignment$,
        'actionsOverflowDirection': _AlertDialog_actionsOverflowDirection$,
        'actionsOverflowButtonSpacing':
            _AlertDialog_actionsOverflowButtonSpacing$,
        'buttonPadding': _AlertDialog_buttonPadding$,
        'backgroundColor': _AlertDialog_backgroundColor$,
        'elevation': _AlertDialog_elevation$,
        'shadowColor': _AlertDialog_shadowColor$,
        'surfaceTintColor': _AlertDialog_surfaceTintColor$,
        'semanticLabel': _AlertDialog_semanticLabel$,
        'insetPadding': _AlertDialog_insetPadding$,
        'clipBehavior': _AlertDialog_clipBehavior$,
        'shape': _AlertDialog_shape$,
        'alignment': _AlertDialog_alignment$,
        'scrollable': _AlertDialog_scrollable$,
        'build': _AlertDialog_build$,
      },
      {},
    ),
    'SimpleDialogOption': m.ClassMirror(
      'SimpleDialogOption',
      {
        'onPressed': _SimpleDialogOption_onPressed$,
        'child': _SimpleDialogOption_child$,
        'padding': _SimpleDialogOption_padding$,
        'build': _SimpleDialogOption_build$,
      },
      {},
    ),
    'SimpleDialog': m.ClassMirror(
      'SimpleDialog',
      {
        'title': _SimpleDialog_title$,
        'titlePadding': _SimpleDialog_titlePadding$,
        'titleTextStyle': _SimpleDialog_titleTextStyle$,
        'children': _SimpleDialog_children$,
        'contentPadding': _SimpleDialog_contentPadding$,
        'backgroundColor': _SimpleDialog_backgroundColor$,
        'elevation': _SimpleDialog_elevation$,
        'shadowColor': _SimpleDialog_shadowColor$,
        'surfaceTintColor': _SimpleDialog_surfaceTintColor$,
        'semanticLabel': _SimpleDialog_semanticLabel$,
        'insetPadding': _SimpleDialog_insetPadding$,
        'clipBehavior': _SimpleDialog_clipBehavior$,
        'shape': _SimpleDialog_shape$,
        'alignment': _SimpleDialog_alignment$,
        'build': _SimpleDialog_build$,
      },
      {},
    ),
    'DialogRoute': m.ClassMirror(
      'DialogRoute',
      {},
      {},
    ),
  },
);
Color? _Dialog_backgroundColor$(Dialog target) {
  return target.backgroundColor;
}

double? _Dialog_elevation$(Dialog target) {
  return target.elevation;
}

Color? _Dialog_shadowColor$(Dialog target) {
  return target.shadowColor;
}

Color? _Dialog_surfaceTintColor$(Dialog target) {
  return target.surfaceTintColor;
}

Duration _Dialog_insetAnimationDuration$(Dialog target) {
  return target.insetAnimationDuration;
}

Curve _Dialog_insetAnimationCurve$(Dialog target) {
  return target.insetAnimationCurve;
}

EdgeInsets? _Dialog_insetPadding$(Dialog target) {
  return target.insetPadding;
}

Clip _Dialog_clipBehavior$(Dialog target) {
  return target.clipBehavior;
}

ShapeBorder? _Dialog_shape$(Dialog target) {
  return target.shape;
}

AlignmentGeometry? _Dialog_alignment$(Dialog target) {
  return target.alignment;
}

Widget? _Dialog_child$(Dialog target) {
  return target.child;
}

Function _Dialog_build$(
  m.Scope scope,
  Dialog target,
) =>
    target.build;
Widget? _AlertDialog_icon$(AlertDialog target) {
  return target.icon;
}

Color? _AlertDialog_iconColor$(AlertDialog target) {
  return target.iconColor;
}

EdgeInsetsGeometry? _AlertDialog_iconPadding$(AlertDialog target) {
  return target.iconPadding;
}

Widget? _AlertDialog_title$(AlertDialog target) {
  return target.title;
}

EdgeInsetsGeometry? _AlertDialog_titlePadding$(AlertDialog target) {
  return target.titlePadding;
}

TextStyle? _AlertDialog_titleTextStyle$(AlertDialog target) {
  return target.titleTextStyle;
}

Widget? _AlertDialog_content$(AlertDialog target) {
  return target.content;
}

EdgeInsetsGeometry? _AlertDialog_contentPadding$(AlertDialog target) {
  return target.contentPadding;
}

TextStyle? _AlertDialog_contentTextStyle$(AlertDialog target) {
  return target.contentTextStyle;
}

List<Widget>? _AlertDialog_actions$(AlertDialog target) {
  return target.actions;
}

EdgeInsetsGeometry? _AlertDialog_actionsPadding$(AlertDialog target) {
  return target.actionsPadding;
}

MainAxisAlignment? _AlertDialog_actionsAlignment$(AlertDialog target) {
  return target.actionsAlignment;
}

OverflowBarAlignment? _AlertDialog_actionsOverflowAlignment$(
    AlertDialog target) {
  return target.actionsOverflowAlignment;
}

VerticalDirection? _AlertDialog_actionsOverflowDirection$(AlertDialog target) {
  return target.actionsOverflowDirection;
}

double? _AlertDialog_actionsOverflowButtonSpacing$(AlertDialog target) {
  return target.actionsOverflowButtonSpacing;
}

EdgeInsetsGeometry? _AlertDialog_buttonPadding$(AlertDialog target) {
  return target.buttonPadding;
}

Color? _AlertDialog_backgroundColor$(AlertDialog target) {
  return target.backgroundColor;
}

double? _AlertDialog_elevation$(AlertDialog target) {
  return target.elevation;
}

Color? _AlertDialog_shadowColor$(AlertDialog target) {
  return target.shadowColor;
}

Color? _AlertDialog_surfaceTintColor$(AlertDialog target) {
  return target.surfaceTintColor;
}

String? _AlertDialog_semanticLabel$(AlertDialog target) {
  return target.semanticLabel;
}

EdgeInsets _AlertDialog_insetPadding$(AlertDialog target) {
  return target.insetPadding;
}

Clip _AlertDialog_clipBehavior$(AlertDialog target) {
  return target.clipBehavior;
}

ShapeBorder? _AlertDialog_shape$(AlertDialog target) {
  return target.shape;
}

AlignmentGeometry? _AlertDialog_alignment$(AlertDialog target) {
  return target.alignment;
}

bool _AlertDialog_scrollable$(AlertDialog target) {
  return target.scrollable;
}

Function _AlertDialog_build$(
  m.Scope scope,
  AlertDialog target,
) =>
    target.build;
void Function()? _SimpleDialogOption_onPressed$(SimpleDialogOption target) {
  return target.onPressed;
}

Widget? _SimpleDialogOption_child$(SimpleDialogOption target) {
  return target.child;
}

EdgeInsets? _SimpleDialogOption_padding$(SimpleDialogOption target) {
  return target.padding;
}

Function _SimpleDialogOption_build$(
  m.Scope scope,
  SimpleDialogOption target,
) =>
    target.build;
Widget? _SimpleDialog_title$(SimpleDialog target) {
  return target.title;
}

EdgeInsetsGeometry _SimpleDialog_titlePadding$(SimpleDialog target) {
  return target.titlePadding;
}

TextStyle? _SimpleDialog_titleTextStyle$(SimpleDialog target) {
  return target.titleTextStyle;
}

List<Widget>? _SimpleDialog_children$(SimpleDialog target) {
  return target.children;
}

EdgeInsetsGeometry _SimpleDialog_contentPadding$(SimpleDialog target) {
  return target.contentPadding;
}

Color? _SimpleDialog_backgroundColor$(SimpleDialog target) {
  return target.backgroundColor;
}

double? _SimpleDialog_elevation$(SimpleDialog target) {
  return target.elevation;
}

Color? _SimpleDialog_shadowColor$(SimpleDialog target) {
  return target.shadowColor;
}

Color? _SimpleDialog_surfaceTintColor$(SimpleDialog target) {
  return target.surfaceTintColor;
}

String? _SimpleDialog_semanticLabel$(SimpleDialog target) {
  return target.semanticLabel;
}

EdgeInsets _SimpleDialog_insetPadding$(SimpleDialog target) {
  return target.insetPadding;
}

Clip _SimpleDialog_clipBehavior$(SimpleDialog target) {
  return target.clipBehavior;
}

ShapeBorder? _SimpleDialog_shape$(SimpleDialog target) {
  return target.shape;
}

AlignmentGeometry? _SimpleDialog_alignment$(SimpleDialog target) {
  return target.alignment;
}

Function _SimpleDialog_build$(
  m.Scope scope,
  SimpleDialog target,
) =>
    target.build;
Function _showDialog$(m.Scope scope) => <T>(
      BuildContext context,
      m.FunctionPointer builder, {
      bool? barrierDismissible,
      Color? barrierColor,
      String? barrierLabel,
      bool? useSafeArea,
      bool? useRootNavigator,
      RouteSettings? routeSettings,
      Offset? anchorPoint,
      TraversalEdgeBehavior? traversalEdgeBehavior,
    }) {
      Widget builderProxy(BuildContext builder_context) =>
          scope.engine.callFunctionPointer(
            scope,
            builder,
            [builder_context],
            {},
          );
      return showDialog<T>(
        anchorPoint: anchorPoint,
        barrierColor: barrierColor == null ? Colors.black54 : barrierColor,
        barrierDismissible:
            barrierDismissible == null ? true : barrierDismissible,
        barrierLabel: barrierLabel,
        builder: builderProxy,
        context: context,
        routeSettings: routeSettings,
        traversalEdgeBehavior: traversalEdgeBehavior,
        useRootNavigator: useRootNavigator == null ? true : useRootNavigator,
        useSafeArea: useSafeArea == null ? true : useSafeArea,
      );
    };
