// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/dialog.dart';
import 'dart:ui';
import 'package:flutter/foundation.dart' show clampDouble;
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/dialog_theme.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/dialog.dart',
  {
    'Dialog.': _Dialog__$,
    'Dialog.fullscreen': _Dialog_fullscreen_$,
    'AlertDialog.': _AlertDialog__$,
    'SimpleDialogOption.': _SimpleDialogOption__$,
    'SimpleDialog.': _SimpleDialog__$,
    'DialogRoute.': _DialogRoute__$,
    'showDialog': _showDialog$,
  },
  {},
  {
    'Dialog': m.ClassMirror(
      'Dialog',
      {
        '#as': Dialog_as$,
        '#is': Dialog_is$,
        'backgroundColor': _Dialog_backgroundColor$,
        'elevation': _Dialog_elevation$,
        'shadowColor': _Dialog_shadowColor$,
        'surfaceTintColor': _Dialog_surfaceTintColor$,
        'insetAnimationDuration': _Dialog_insetAnimationDuration$,
        'insetAnimationCurve': _Dialog_insetAnimationCurve$,
        'insetPadding': _Dialog_insetPadding$,
        'clipBehavior': _Dialog_clipBehavior$,
        'shape': _Dialog_shape$,
        'alignment': _Dialog_alignment$,
        'child': _Dialog_child$,
        'build': _Dialog_build$,
      },
      {},
    ),
    'AlertDialog': m.ClassMirror(
      'AlertDialog',
      {
        '#as': AlertDialog_as$,
        '#is': AlertDialog_is$,
        'icon': _AlertDialog_icon$,
        'iconColor': _AlertDialog_iconColor$,
        'iconPadding': _AlertDialog_iconPadding$,
        'title': _AlertDialog_title$,
        'titlePadding': _AlertDialog_titlePadding$,
        'titleTextStyle': _AlertDialog_titleTextStyle$,
        'content': _AlertDialog_content$,
        'contentPadding': _AlertDialog_contentPadding$,
        'contentTextStyle': _AlertDialog_contentTextStyle$,
        'actions': _AlertDialog_actions$,
        'actionsPadding': _AlertDialog_actionsPadding$,
        'actionsAlignment': _AlertDialog_actionsAlignment$,
        'actionsOverflowAlignment': _AlertDialog_actionsOverflowAlignment$,
        'actionsOverflowDirection': _AlertDialog_actionsOverflowDirection$,
        'actionsOverflowButtonSpacing':
            _AlertDialog_actionsOverflowButtonSpacing$,
        'buttonPadding': _AlertDialog_buttonPadding$,
        'backgroundColor': _AlertDialog_backgroundColor$,
        'elevation': _AlertDialog_elevation$,
        'shadowColor': _AlertDialog_shadowColor$,
        'surfaceTintColor': _AlertDialog_surfaceTintColor$,
        'semanticLabel': _AlertDialog_semanticLabel$,
        'insetPadding': _AlertDialog_insetPadding$,
        'clipBehavior': _AlertDialog_clipBehavior$,
        'shape': _AlertDialog_shape$,
        'alignment': _AlertDialog_alignment$,
        'scrollable': _AlertDialog_scrollable$,
        'build': _AlertDialog_build$,
      },
      {},
    ),
    'SimpleDialogOption': m.ClassMirror(
      'SimpleDialogOption',
      {
        '#as': SimpleDialogOption_as$,
        '#is': SimpleDialogOption_is$,
        'onPressed': _SimpleDialogOption_onPressed$,
        'child': _SimpleDialogOption_child$,
        'padding': _SimpleDialogOption_padding$,
        'build': _SimpleDialogOption_build$,
      },
      {},
    ),
    'SimpleDialog': m.ClassMirror(
      'SimpleDialog',
      {
        '#as': SimpleDialog_as$,
        '#is': SimpleDialog_is$,
        'title': _SimpleDialog_title$,
        'titlePadding': _SimpleDialog_titlePadding$,
        'titleTextStyle': _SimpleDialog_titleTextStyle$,
        'children': _SimpleDialog_children$,
        'contentPadding': _SimpleDialog_contentPadding$,
        'backgroundColor': _SimpleDialog_backgroundColor$,
        'elevation': _SimpleDialog_elevation$,
        'shadowColor': _SimpleDialog_shadowColor$,
        'surfaceTintColor': _SimpleDialog_surfaceTintColor$,
        'semanticLabel': _SimpleDialog_semanticLabel$,
        'insetPadding': _SimpleDialog_insetPadding$,
        'clipBehavior': _SimpleDialog_clipBehavior$,
        'shape': _SimpleDialog_shape$,
        'alignment': _SimpleDialog_alignment$,
        'build': _SimpleDialog_build$,
      },
      {},
    ),
    'DialogRoute': m.ClassMirror(
      'DialogRoute',
      {
        '#as': DialogRoute_as$,
        '#is': DialogRoute_is$,
      },
      {},
    ),
  },
);
Function Dialog_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Dialog;
Function Dialog_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Dialog;
Function _Dialog_backgroundColor$(
  m.Scope scope$,
  Dialog target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _Dialog_elevation$(
  m.Scope scope$,
  Dialog target$,
) =>
    () {
      return target$.elevation;
    };
Function _Dialog_shadowColor$(
  m.Scope scope$,
  Dialog target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _Dialog_surfaceTintColor$(
  m.Scope scope$,
  Dialog target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _Dialog_insetAnimationDuration$(
  m.Scope scope$,
  Dialog target$,
) =>
    () {
      return target$.insetAnimationDuration;
    };
Function _Dialog_insetAnimationCurve$(
  m.Scope scope$,
  Dialog target$,
) =>
    () {
      return target$.insetAnimationCurve;
    };
Function _Dialog_insetPadding$(
  m.Scope scope$,
  Dialog target$,
) =>
    () {
      return target$.insetPadding;
    };
Function _Dialog_clipBehavior$(
  m.Scope scope$,
  Dialog target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _Dialog_shape$(
  m.Scope scope$,
  Dialog target$,
) =>
    () {
      return target$.shape;
    };
Function _Dialog_alignment$(
  m.Scope scope$,
  Dialog target$,
) =>
    () {
      return target$.alignment;
    };
Function _Dialog_child$(
  m.Scope scope$,
  Dialog target$,
) =>
    () {
      return target$.child;
    };
Function _Dialog__$(m.Scope scope$) => ({
      Key? key,
      Color? backgroundColor,
      double? elevation,
      Color? shadowColor,
      Color? surfaceTintColor,
      Duration? insetAnimationDuration,
      Curve? insetAnimationCurve,
      EdgeInsets? insetPadding,
      Clip? clipBehavior,
      ShapeBorder? shape,
      AlignmentGeometry? alignment,
      Widget? child,
    }) {
      return Dialog(
        alignment: alignment,
        backgroundColor: backgroundColor,
        child: child,
        clipBehavior: clipBehavior ?? Clip.none,
        elevation: elevation,
        insetAnimationCurve: insetAnimationCurve ?? Curves.decelerate,
        insetAnimationDuration:
            insetAnimationDuration ?? const Duration(milliseconds: 100),
        insetPadding: insetPadding ??
            const EdgeInsets.symmetric(horizontal: 40.0, vertical: 24.0),
        key: key,
        shadowColor: shadowColor,
        shape: shape,
        surfaceTintColor: surfaceTintColor,
      );
    };
Function _Dialog_fullscreen_$(m.Scope scope$) => Dialog.fullscreen;
Function _Dialog_build$(
  m.Scope scope$,
  Dialog target$,
) =>
    target$.build;
Function AlertDialog_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AlertDialog;
Function AlertDialog_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AlertDialog;
Function _AlertDialog_icon$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.icon;
    };
Function _AlertDialog_iconColor$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.iconColor;
    };
Function _AlertDialog_iconPadding$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.iconPadding;
    };
Function _AlertDialog_title$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.title;
    };
Function _AlertDialog_titlePadding$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.titlePadding;
    };
Function _AlertDialog_titleTextStyle$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.titleTextStyle;
    };
Function _AlertDialog_content$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.content;
    };
Function _AlertDialog_contentPadding$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.contentPadding;
    };
Function _AlertDialog_contentTextStyle$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.contentTextStyle;
    };
Function _AlertDialog_actions$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.actions;
    };
Function _AlertDialog_actionsPadding$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.actionsPadding;
    };
Function _AlertDialog_actionsAlignment$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.actionsAlignment;
    };
Function _AlertDialog_actionsOverflowAlignment$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.actionsOverflowAlignment;
    };
Function _AlertDialog_actionsOverflowDirection$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.actionsOverflowDirection;
    };
Function _AlertDialog_actionsOverflowButtonSpacing$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.actionsOverflowButtonSpacing;
    };
Function _AlertDialog_buttonPadding$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.buttonPadding;
    };
Function _AlertDialog_backgroundColor$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _AlertDialog_elevation$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.elevation;
    };
Function _AlertDialog_shadowColor$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _AlertDialog_surfaceTintColor$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _AlertDialog_semanticLabel$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.semanticLabel;
    };
Function _AlertDialog_insetPadding$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.insetPadding;
    };
Function _AlertDialog_clipBehavior$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _AlertDialog_shape$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.shape;
    };
Function _AlertDialog_alignment$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.alignment;
    };
Function _AlertDialog_scrollable$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    () {
      return target$.scrollable;
    };
Function _AlertDialog__$(m.Scope scope$) => ({
      Key? key,
      Widget? icon,
      EdgeInsetsGeometry? iconPadding,
      Color? iconColor,
      Widget? title,
      EdgeInsetsGeometry? titlePadding,
      TextStyle? titleTextStyle,
      Widget? content,
      EdgeInsetsGeometry? contentPadding,
      TextStyle? contentTextStyle,
      List? actions,
      EdgeInsetsGeometry? actionsPadding,
      MainAxisAlignment? actionsAlignment,
      OverflowBarAlignment? actionsOverflowAlignment,
      VerticalDirection? actionsOverflowDirection,
      double? actionsOverflowButtonSpacing,
      EdgeInsetsGeometry? buttonPadding,
      Color? backgroundColor,
      double? elevation,
      Color? shadowColor,
      Color? surfaceTintColor,
      String? semanticLabel,
      EdgeInsets? insetPadding,
      Clip? clipBehavior,
      ShapeBorder? shape,
      AlignmentGeometry? alignment,
      bool? scrollable,
    }) {
      return AlertDialog(
        actions: actions == null ? null : List.from(actions),
        actionsAlignment: actionsAlignment,
        actionsOverflowAlignment: actionsOverflowAlignment,
        actionsOverflowButtonSpacing: actionsOverflowButtonSpacing,
        actionsOverflowDirection: actionsOverflowDirection,
        actionsPadding: actionsPadding,
        alignment: alignment,
        backgroundColor: backgroundColor,
        buttonPadding: buttonPadding,
        clipBehavior: clipBehavior ?? Clip.none,
        content: content,
        contentPadding: contentPadding,
        contentTextStyle: contentTextStyle,
        elevation: elevation,
        icon: icon,
        iconColor: iconColor,
        iconPadding: iconPadding,
        insetPadding: insetPadding ??
            const EdgeInsets.symmetric(horizontal: 40.0, vertical: 24.0),
        key: key,
        scrollable: scrollable ?? false,
        semanticLabel: semanticLabel,
        shadowColor: shadowColor,
        shape: shape,
        surfaceTintColor: surfaceTintColor,
        title: title,
        titlePadding: titlePadding,
        titleTextStyle: titleTextStyle,
      );
    };
Function _AlertDialog_build$(
  m.Scope scope$,
  AlertDialog target$,
) =>
    target$.build;
Function SimpleDialogOption_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SimpleDialogOption;
Function SimpleDialogOption_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SimpleDialogOption;
Function _SimpleDialogOption_onPressed$(
  m.Scope scope$,
  SimpleDialogOption target$,
) =>
    () {
      return target$.onPressed;
    };
Function _SimpleDialogOption_child$(
  m.Scope scope$,
  SimpleDialogOption target$,
) =>
    () {
      return target$.child;
    };
Function _SimpleDialogOption_padding$(
  m.Scope scope$,
  SimpleDialogOption target$,
) =>
    () {
      return target$.padding;
    };
Function _SimpleDialogOption__$(m.Scope scope$) => ({
      Key? key,
      m.FunctionPointer? onPressed,
      EdgeInsets? padding,
      Widget? child,
    }) {
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return SimpleDialogOption(
        child: child,
        key: key,
        onPressed: onPressed == null ? null : onPressedProxy,
        padding: padding,
      );
    };
Function _SimpleDialogOption_build$(
  m.Scope scope$,
  SimpleDialogOption target$,
) =>
    target$.build;
Function SimpleDialog_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SimpleDialog;
Function SimpleDialog_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SimpleDialog;
Function _SimpleDialog_title$(
  m.Scope scope$,
  SimpleDialog target$,
) =>
    () {
      return target$.title;
    };
Function _SimpleDialog_titlePadding$(
  m.Scope scope$,
  SimpleDialog target$,
) =>
    () {
      return target$.titlePadding;
    };
Function _SimpleDialog_titleTextStyle$(
  m.Scope scope$,
  SimpleDialog target$,
) =>
    () {
      return target$.titleTextStyle;
    };
Function _SimpleDialog_children$(
  m.Scope scope$,
  SimpleDialog target$,
) =>
    () {
      return target$.children;
    };
Function _SimpleDialog_contentPadding$(
  m.Scope scope$,
  SimpleDialog target$,
) =>
    () {
      return target$.contentPadding;
    };
Function _SimpleDialog_backgroundColor$(
  m.Scope scope$,
  SimpleDialog target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _SimpleDialog_elevation$(
  m.Scope scope$,
  SimpleDialog target$,
) =>
    () {
      return target$.elevation;
    };
Function _SimpleDialog_shadowColor$(
  m.Scope scope$,
  SimpleDialog target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _SimpleDialog_surfaceTintColor$(
  m.Scope scope$,
  SimpleDialog target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _SimpleDialog_semanticLabel$(
  m.Scope scope$,
  SimpleDialog target$,
) =>
    () {
      return target$.semanticLabel;
    };
Function _SimpleDialog_insetPadding$(
  m.Scope scope$,
  SimpleDialog target$,
) =>
    () {
      return target$.insetPadding;
    };
Function _SimpleDialog_clipBehavior$(
  m.Scope scope$,
  SimpleDialog target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _SimpleDialog_shape$(
  m.Scope scope$,
  SimpleDialog target$,
) =>
    () {
      return target$.shape;
    };
Function _SimpleDialog_alignment$(
  m.Scope scope$,
  SimpleDialog target$,
) =>
    () {
      return target$.alignment;
    };
Function _SimpleDialog__$(m.Scope scope$) => ({
      Key? key,
      Widget? title,
      EdgeInsetsGeometry? titlePadding,
      TextStyle? titleTextStyle,
      List? children,
      EdgeInsetsGeometry? contentPadding,
      Color? backgroundColor,
      double? elevation,
      Color? shadowColor,
      Color? surfaceTintColor,
      String? semanticLabel,
      EdgeInsets? insetPadding,
      Clip? clipBehavior,
      ShapeBorder? shape,
      AlignmentGeometry? alignment,
    }) {
      return SimpleDialog(
        alignment: alignment,
        backgroundColor: backgroundColor,
        children: children == null ? null : List.from(children),
        clipBehavior: clipBehavior ?? Clip.none,
        contentPadding:
            contentPadding ?? const EdgeInsets.fromLTRB(0.0, 12.0, 0.0, 16.0),
        elevation: elevation,
        insetPadding: insetPadding ??
            const EdgeInsets.symmetric(horizontal: 40.0, vertical: 24.0),
        key: key,
        semanticLabel: semanticLabel,
        shadowColor: shadowColor,
        shape: shape,
        surfaceTintColor: surfaceTintColor,
        title: title,
        titlePadding:
            titlePadding ?? const EdgeInsets.fromLTRB(24.0, 24.0, 24.0, 0.0),
        titleTextStyle: titleTextStyle,
      );
    };
Function _SimpleDialog_build$(
  m.Scope scope$,
  SimpleDialog target$,
) =>
    target$.build;
Function DialogRoute_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DialogRoute<T>;
Function DialogRoute_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DialogRoute<T>;
Function _DialogRoute__$(m.Scope scope$) => ({
      required BuildContext context,
      required m.FunctionPointer builder,
      CapturedThemes? themes,
      Color? barrierColor,
      bool? barrierDismissible,
      String? barrierLabel,
      bool? useSafeArea,
      RouteSettings? settings,
      Offset? anchorPoint,
      TraversalEdgeBehavior? traversalEdgeBehavior,
    }) {
      Widget builderProxy(BuildContext builder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [builder_context$],
            {},
          );
      return DialogRoute(
        anchorPoint: anchorPoint,
        barrierColor: barrierColor ?? Colors.black54,
        barrierDismissible: barrierDismissible ?? true,
        barrierLabel: barrierLabel,
        builder: builderProxy,
        context: context,
        settings: settings,
        themes: themes,
        traversalEdgeBehavior: traversalEdgeBehavior,
        useSafeArea: useSafeArea ?? true,
      );
    };
Function _showDialog$(m.Scope scope$) => ({
      required BuildContext context,
      required m.FunctionPointer builder,
      bool? barrierDismissible,
      Color? barrierColor,
      String? barrierLabel,
      bool? useSafeArea,
      bool? useRootNavigator,
      RouteSettings? routeSettings,
      Offset? anchorPoint,
      TraversalEdgeBehavior? traversalEdgeBehavior,
    }) {
      Widget builderProxy(BuildContext builder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [builder_context$],
            {},
          );
      return showDialog(
        anchorPoint: anchorPoint,
        barrierColor: barrierColor ?? Colors.black54,
        barrierDismissible: barrierDismissible ?? true,
        barrierLabel: barrierLabel,
        builder: builderProxy,
        context: context,
        routeSettings: routeSettings,
        traversalEdgeBehavior: traversalEdgeBehavior,
        useRootNavigator: useRootNavigator ?? true,
        useSafeArea: useSafeArea ?? true,
      );
    };
