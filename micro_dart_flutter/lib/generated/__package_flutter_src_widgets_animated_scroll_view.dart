// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/animated_scroll_view.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_delegate.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/scroll_view.dart';
import 'package:flutter/src/widgets/sliver.dart';
import 'package:flutter/src/widgets/ticker_provider.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/animated_scroll_view.dart',
  {
    'AnimatedList.': _AnimatedList__$,
    'AnimatedList.of': _AnimatedList_of$,
    'AnimatedList.maybeOf': _AnimatedList_maybeOf$,
    'AnimatedListState.': _AnimatedListState__$,
    'AnimatedGrid.': _AnimatedGrid__$,
    'AnimatedGrid.of': _AnimatedGrid_of$,
    'AnimatedGrid.maybeOf': _AnimatedGrid_maybeOf$,
    'AnimatedGridState.': _AnimatedGridState__$,
    'SliverAnimatedList.': _SliverAnimatedList__$,
    'SliverAnimatedList.of': _SliverAnimatedList_of$,
    'SliverAnimatedList.maybeOf': _SliverAnimatedList_maybeOf$,
    'SliverAnimatedListState.': _SliverAnimatedListState__$,
    'SliverAnimatedGrid.': _SliverAnimatedGrid__$,
    'SliverAnimatedGrid.of': _SliverAnimatedGrid_of$,
    'SliverAnimatedGrid.maybeOf': _SliverAnimatedGrid_maybeOf$,
    'SliverAnimatedGridState.': _SliverAnimatedGridState__$,
  },
  {},
  {
    'AnimatedList': m.ClassMirror(
      'AnimatedList',
      {
        '#as': AnimatedList_as$,
        '#is': AnimatedList_is$,
        'createState': _AnimatedList_createState$,
      },
      {},
    ),
    'AnimatedListState': m.ClassMirror(
      'AnimatedListState',
      {
        '#as': AnimatedListState_as$,
        '#is': AnimatedListState_is$,
        'build': _AnimatedListState_build$,
      },
      {},
    ),
    'AnimatedGrid': m.ClassMirror(
      'AnimatedGrid',
      {
        '#as': AnimatedGrid_as$,
        '#is': AnimatedGrid_is$,
        'gridDelegate': _AnimatedGrid_gridDelegate$,
        'createState': _AnimatedGrid_createState$,
      },
      {},
    ),
    'AnimatedGridState': m.ClassMirror(
      'AnimatedGridState',
      {
        '#as': AnimatedGridState_as$,
        '#is': AnimatedGridState_is$,
        'build': _AnimatedGridState_build$,
      },
      {},
    ),
    'SliverAnimatedList': m.ClassMirror(
      'SliverAnimatedList',
      {
        '#as': SliverAnimatedList_as$,
        '#is': SliverAnimatedList_is$,
        'createState': _SliverAnimatedList_createState$,
      },
      {},
    ),
    'SliverAnimatedListState': m.ClassMirror(
      'SliverAnimatedListState',
      {
        '#as': SliverAnimatedListState_as$,
        '#is': SliverAnimatedListState_is$,
        'build': _SliverAnimatedListState_build$,
      },
      {},
    ),
    'SliverAnimatedGrid': m.ClassMirror(
      'SliverAnimatedGrid',
      {
        '#as': SliverAnimatedGrid_as$,
        '#is': SliverAnimatedGrid_is$,
        'gridDelegate': _SliverAnimatedGrid_gridDelegate$,
        'createState': _SliverAnimatedGrid_createState$,
      },
      {},
    ),
    'SliverAnimatedGridState': m.ClassMirror(
      'SliverAnimatedGridState',
      {
        '#as': SliverAnimatedGridState_as$,
        '#is': SliverAnimatedGridState_is$,
        'build': _SliverAnimatedGridState_build$,
      },
      {},
    ),
  },
);
Function AnimatedList_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AnimatedList;
Function AnimatedList_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AnimatedList;
Function _AnimatedList__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer itemBuilder,
      int? initialItemCount,
      Axis? scrollDirection,
      bool? reverse,
      ScrollController? controller,
      bool? primary,
      ScrollPhysics? physics,
      bool? shrinkWrap,
      EdgeInsetsGeometry? padding,
      Clip? clipBehavior,
    }) {
      Widget itemBuilderProxy(
        BuildContext itemBuilder_context$,
        int itemBuilder_index$,
        Animation<double> itemBuilder_animation$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            itemBuilder,
            [
              itemBuilder_context$,
              itemBuilder_index$,
              itemBuilder_animation$,
            ],
            {},
          );
      return AnimatedList(
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        controller: controller,
        initialItemCount: initialItemCount ?? 0,
        itemBuilder: itemBuilderProxy,
        key: key,
        padding: padding,
        physics: physics,
        primary: primary,
        reverse: reverse ?? false,
        scrollDirection: scrollDirection ?? Axis.vertical,
        shrinkWrap: shrinkWrap ?? false,
      );
    };
Function _AnimatedList_of$(m.Scope scope$) => AnimatedList.of;
Function _AnimatedList_maybeOf$(m.Scope scope$) => AnimatedList.maybeOf;
Function _AnimatedList_createState$(
  m.Scope scope$,
  AnimatedList target$,
) =>
    target$.createState;
Function AnimatedListState_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AnimatedListState;
Function AnimatedListState_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AnimatedListState;
Function _AnimatedListState__$(m.Scope scope$) => () {
      return AnimatedListState();
    };
Function _AnimatedListState_build$(
  m.Scope scope$,
  AnimatedListState target$,
) =>
    target$.build;
Function AnimatedGrid_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AnimatedGrid;
Function AnimatedGrid_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AnimatedGrid;
Function _AnimatedGrid_gridDelegate$(
  m.Scope scope$,
  AnimatedGrid target$,
) =>
    () {
      return target$.gridDelegate;
    };
Function _AnimatedGrid__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer itemBuilder,
      required SliverGridDelegate gridDelegate,
      int? initialItemCount,
      Axis? scrollDirection,
      bool? reverse,
      ScrollController? controller,
      bool? primary,
      ScrollPhysics? physics,
      EdgeInsetsGeometry? padding,
      Clip? clipBehavior,
    }) {
      Widget itemBuilderProxy(
        BuildContext itemBuilder_context$,
        int itemBuilder_index$,
        Animation<double> itemBuilder_animation$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            itemBuilder,
            [
              itemBuilder_context$,
              itemBuilder_index$,
              itemBuilder_animation$,
            ],
            {},
          );
      return AnimatedGrid(
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        controller: controller,
        gridDelegate: gridDelegate,
        initialItemCount: initialItemCount ?? 0,
        itemBuilder: itemBuilderProxy,
        key: key,
        padding: padding,
        physics: physics,
        primary: primary,
        reverse: reverse ?? false,
        scrollDirection: scrollDirection ?? Axis.vertical,
      );
    };
Function _AnimatedGrid_of$(m.Scope scope$) => AnimatedGrid.of;
Function _AnimatedGrid_maybeOf$(m.Scope scope$) => AnimatedGrid.maybeOf;
Function _AnimatedGrid_createState$(
  m.Scope scope$,
  AnimatedGrid target$,
) =>
    target$.createState;
Function AnimatedGridState_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AnimatedGridState;
Function AnimatedGridState_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AnimatedGridState;
Function _AnimatedGridState__$(m.Scope scope$) => () {
      return AnimatedGridState();
    };
Function _AnimatedGridState_build$(
  m.Scope scope$,
  AnimatedGridState target$,
) =>
    target$.build;
Function SliverAnimatedList_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverAnimatedList;
Function SliverAnimatedList_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverAnimatedList;
Function _SliverAnimatedList__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer itemBuilder,
      m.FunctionPointer? findChildIndexCallback,
      int? initialItemCount,
    }) {
      int? findChildIndexCallbackProxy(Key findChildIndexCallback_key$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            findChildIndexCallback!,
            [findChildIndexCallback_key$],
            {},
          );
      Widget itemBuilderProxy(
        BuildContext itemBuilder_context$,
        int itemBuilder_index$,
        Animation<double> itemBuilder_animation$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            itemBuilder,
            [
              itemBuilder_context$,
              itemBuilder_index$,
              itemBuilder_animation$,
            ],
            {},
          );
      return SliverAnimatedList(
        findChildIndexCallback:
            findChildIndexCallback == null ? null : findChildIndexCallbackProxy,
        initialItemCount: initialItemCount ?? 0,
        itemBuilder: itemBuilderProxy,
        key: key,
      );
    };
Function _SliverAnimatedList_createState$(
  m.Scope scope$,
  SliverAnimatedList target$,
) =>
    target$.createState;
Function _SliverAnimatedList_of$(m.Scope scope$) => SliverAnimatedList.of;
Function _SliverAnimatedList_maybeOf$(m.Scope scope$) =>
    SliverAnimatedList.maybeOf;
Function SliverAnimatedListState_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverAnimatedListState;
Function SliverAnimatedListState_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverAnimatedListState;
Function _SliverAnimatedListState__$(m.Scope scope$) => () {
      return SliverAnimatedListState();
    };
Function _SliverAnimatedListState_build$(
  m.Scope scope$,
  SliverAnimatedListState target$,
) =>
    target$.build;
Function SliverAnimatedGrid_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverAnimatedGrid;
Function SliverAnimatedGrid_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverAnimatedGrid;
Function _SliverAnimatedGrid_gridDelegate$(
  m.Scope scope$,
  SliverAnimatedGrid target$,
) =>
    () {
      return target$.gridDelegate;
    };
Function _SliverAnimatedGrid__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer itemBuilder,
      required SliverGridDelegate gridDelegate,
      m.FunctionPointer? findChildIndexCallback,
      int? initialItemCount,
    }) {
      int? findChildIndexCallbackProxy(Key findChildIndexCallback_key$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            findChildIndexCallback!,
            [findChildIndexCallback_key$],
            {},
          );
      Widget itemBuilderProxy(
        BuildContext itemBuilder_context$,
        int itemBuilder_index$,
        Animation<double> itemBuilder_animation$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            itemBuilder,
            [
              itemBuilder_context$,
              itemBuilder_index$,
              itemBuilder_animation$,
            ],
            {},
          );
      return SliverAnimatedGrid(
        findChildIndexCallback:
            findChildIndexCallback == null ? null : findChildIndexCallbackProxy,
        gridDelegate: gridDelegate,
        initialItemCount: initialItemCount ?? 0,
        itemBuilder: itemBuilderProxy,
        key: key,
      );
    };
Function _SliverAnimatedGrid_createState$(
  m.Scope scope$,
  SliverAnimatedGrid target$,
) =>
    target$.createState;
Function _SliverAnimatedGrid_of$(m.Scope scope$) => SliverAnimatedGrid.of;
Function _SliverAnimatedGrid_maybeOf$(m.Scope scope$) =>
    SliverAnimatedGrid.maybeOf;
Function SliverAnimatedGridState_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverAnimatedGridState;
Function SliverAnimatedGridState_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverAnimatedGridState;
Function _SliverAnimatedGridState__$(m.Scope scope$) => () {
      return SliverAnimatedGridState();
    };
Function _SliverAnimatedGridState_build$(
  m.Scope scope$,
  SliverAnimatedGridState target$,
) =>
    target$.build;
