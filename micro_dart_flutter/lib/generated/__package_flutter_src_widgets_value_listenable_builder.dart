// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/value_listenable_builder.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/value_listenable_builder.dart',
  {'ValueListenableBuilder.': _ValueListenableBuilder__$},
  {},
  {
    'ValueListenableBuilder': m.ClassMirror(
      'ValueListenableBuilder',
      {
        '#as': ValueListenableBuilder_as$,
        '#is': ValueListenableBuilder_is$,
        'valueListenable': _ValueListenableBuilder_valueListenable$,
        'builder': _ValueListenableBuilder_builder$,
        'child': _ValueListenableBuilder_child$,
        'createState': _ValueListenableBuilder_createState$,
      },
      {},
    )
  },
);
Function ValueListenableBuilder_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ValueListenableBuilder<T>;
Function ValueListenableBuilder_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ValueListenableBuilder<T>;
Function _ValueListenableBuilder_valueListenable$<T>(
  m.Scope scope$,
  ValueListenableBuilder<T> target$,
) =>
    () {
      return target$.valueListenable;
    };
Function _ValueListenableBuilder_builder$<T>(
  m.Scope scope$,
  ValueListenableBuilder<T> target$,
) =>
    () {
      return target$.builder;
    };
Function _ValueListenableBuilder_child$<T>(
  m.Scope scope$,
  ValueListenableBuilder<T> target$,
) =>
    () {
      return target$.child;
    };
Function _ValueListenableBuilder__$(m.Scope scope$) => ({
      Key? key,
      required ValueListenable valueListenable,
      required m.FunctionPointer builder,
      Widget? child,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        dynamic builder_value$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [
              builder_context$,
              builder_value$,
              builder_child$,
            ],
            {},
          );
      return ValueListenableBuilder(
        builder: builderProxy,
        child: child,
        key: key,
        valueListenable: valueListenable,
      );
    };
Function _ValueListenableBuilder_createState$<T>(
  m.Scope scope$,
  ValueListenableBuilder<T> target$,
) =>
    target$.createState;
