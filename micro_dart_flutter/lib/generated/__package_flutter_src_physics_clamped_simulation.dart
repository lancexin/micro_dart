// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/physics/clamped_simulation.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/physics/simulation.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/physics/clamped_simulation.dart',
  {'ClampedSimulation.': _ClampedSimulation__$},
  {},
  {
    'ClampedSimulation': m.ClassMirror(
      'ClampedSimulation',
      {
        '#as': ClampedSimulation_as$,
        '#is': ClampedSimulation_is$,
        'simulation': _ClampedSimulation_simulation$,
        'xMin': _ClampedSimulation_xMin$,
        'xMax': _ClampedSimulation_xMax$,
        'dxMin': _ClampedSimulation_dxMin$,
        'dxMax': _ClampedSimulation_dxMax$,
        'x': _ClampedSimulation_x$,
        'dx': _ClampedSimulation_dx$,
        'isDone': _ClampedSimulation_isDone$,
        'toString': _ClampedSimulation_toString$,
      },
      {},
    )
  },
);
Function ClampedSimulation_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ClampedSimulation;
Function ClampedSimulation_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ClampedSimulation;
Function _ClampedSimulation_simulation$(
  m.Scope scope$,
  ClampedSimulation target$,
) =>
    () {
      return target$.simulation;
    };
Function _ClampedSimulation_xMin$(
  m.Scope scope$,
  ClampedSimulation target$,
) =>
    () {
      return target$.xMin;
    };
Function _ClampedSimulation_xMax$(
  m.Scope scope$,
  ClampedSimulation target$,
) =>
    () {
      return target$.xMax;
    };
Function _ClampedSimulation_dxMin$(
  m.Scope scope$,
  ClampedSimulation target$,
) =>
    () {
      return target$.dxMin;
    };
Function _ClampedSimulation_dxMax$(
  m.Scope scope$,
  ClampedSimulation target$,
) =>
    () {
      return target$.dxMax;
    };
Function _ClampedSimulation__$(m.Scope scope$) => (
      Simulation simulation, {
      double? xMin,
      double? xMax,
      double? dxMin,
      double? dxMax,
    }) {
      return ClampedSimulation(
        simulation,
        dxMax: dxMax ?? double.infinity,
        dxMin: dxMin ?? double.negativeInfinity,
        xMax: xMax ?? double.infinity,
        xMin: xMin ?? double.negativeInfinity,
      );
    };
Function _ClampedSimulation_x$(
  m.Scope scope$,
  ClampedSimulation target$,
) =>
    target$.x;
Function _ClampedSimulation_dx$(
  m.Scope scope$,
  ClampedSimulation target$,
) =>
    target$.dx;
Function _ClampedSimulation_isDone$(
  m.Scope scope$,
  ClampedSimulation target$,
) =>
    target$.isDone;
Function _ClampedSimulation_toString$(
  m.Scope scope$,
  ClampedSimulation target$,
) =>
    target$.toString;
