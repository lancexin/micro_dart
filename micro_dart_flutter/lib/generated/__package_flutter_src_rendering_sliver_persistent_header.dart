// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/sliver_persistent_header.dart';
import 'dart:math';
import 'package:flutter/animation.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/semantics.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/rendering/object.dart';
import 'package:flutter/src/rendering/sliver.dart';
import 'package:flutter/src/rendering/viewport.dart';
import 'package:flutter/src/rendering/viewport_offset.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/sliver_persistent_header.dart',
  {
    'OverScrollHeaderStretchConfiguration.':
        _OverScrollHeaderStretchConfiguration__$,
    'PersistentHeaderShowOnScreenConfiguration.':
        _PersistentHeaderShowOnScreenConfiguration__$,
    'FloatingHeaderSnapConfiguration.': _FloatingHeaderSnapConfiguration__$,
  },
  {},
  {
    'OverScrollHeaderStretchConfiguration': m.ClassMirror(
      'OverScrollHeaderStretchConfiguration',
      {
        '#as': OverScrollHeaderStretchConfiguration_as$,
        '#is': OverScrollHeaderStretchConfiguration_is$,
        'stretchTriggerOffset':
            _OverScrollHeaderStretchConfiguration_stretchTriggerOffset$,
        'onStretchTrigger':
            _OverScrollHeaderStretchConfiguration_onStretchTrigger$,
      },
      {},
    ),
    'PersistentHeaderShowOnScreenConfiguration': m.ClassMirror(
      'PersistentHeaderShowOnScreenConfiguration',
      {
        '#as': PersistentHeaderShowOnScreenConfiguration_as$,
        '#is': PersistentHeaderShowOnScreenConfiguration_is$,
        'minShowOnScreenExtent':
            _PersistentHeaderShowOnScreenConfiguration_minShowOnScreenExtent$,
        'maxShowOnScreenExtent':
            _PersistentHeaderShowOnScreenConfiguration_maxShowOnScreenExtent$,
      },
      {},
    ),
    'RenderSliverPersistentHeader': m.ClassMirror(
      'RenderSliverPersistentHeader',
      {
        '#as': RenderSliverPersistentHeader_as$,
        '#is': RenderSliverPersistentHeader_is$,
        'stretchConfiguration':
            _RenderSliverPersistentHeader_stretchConfiguration$,
        'maxExtent': _RenderSliverPersistentHeader_maxExtent$,
        'minExtent': _RenderSliverPersistentHeader_minExtent$,
        'childExtent': _RenderSliverPersistentHeader_childExtent$,
        'updateChild': _RenderSliverPersistentHeader_updateChild$,
        'markNeedsLayout': _RenderSliverPersistentHeader_markNeedsLayout$,
        'layoutChild': _RenderSliverPersistentHeader_layoutChild$,
        'childMainAxisPosition':
            _RenderSliverPersistentHeader_childMainAxisPosition$,
        'hitTestChildren': _RenderSliverPersistentHeader_hitTestChildren$,
        'applyPaintTransform':
            _RenderSliverPersistentHeader_applyPaintTransform$,
        'paint': _RenderSliverPersistentHeader_paint$,
        'describeSemanticsConfiguration':
            _RenderSliverPersistentHeader_describeSemanticsConfiguration$,
        'debugFillProperties':
            _RenderSliverPersistentHeader_debugFillProperties$,
      },
      {
        'stretchConfiguration':
            _RenderSliverPersistentHeader_stretchConfiguration_set$
      },
    ),
    'RenderSliverScrollingPersistentHeader': m.ClassMirror(
      'RenderSliverScrollingPersistentHeader',
      {
        '#as': RenderSliverScrollingPersistentHeader_as$,
        '#is': RenderSliverScrollingPersistentHeader_is$,
        'updateGeometry':
            _RenderSliverScrollingPersistentHeader_updateGeometry$,
        'performLayout': _RenderSliverScrollingPersistentHeader_performLayout$,
        'childMainAxisPosition':
            _RenderSliverScrollingPersistentHeader_childMainAxisPosition$,
      },
      {},
    ),
    'RenderSliverPinnedPersistentHeader': m.ClassMirror(
      'RenderSliverPinnedPersistentHeader',
      {
        '#as': RenderSliverPinnedPersistentHeader_as$,
        '#is': RenderSliverPinnedPersistentHeader_is$,
        'showOnScreenConfiguration':
            _RenderSliverPinnedPersistentHeader_showOnScreenConfiguration$,
        'performLayout': _RenderSliverPinnedPersistentHeader_performLayout$,
        'childMainAxisPosition':
            _RenderSliverPinnedPersistentHeader_childMainAxisPosition$,
        'showOnScreen': _RenderSliverPinnedPersistentHeader_showOnScreen$,
      },
      {
        'showOnScreenConfiguration':
            _RenderSliverPinnedPersistentHeader_showOnScreenConfiguration_set$
      },
    ),
    'FloatingHeaderSnapConfiguration': m.ClassMirror(
      'FloatingHeaderSnapConfiguration',
      {
        '#as': FloatingHeaderSnapConfiguration_as$,
        '#is': FloatingHeaderSnapConfiguration_is$,
        'curve': _FloatingHeaderSnapConfiguration_curve$,
        'duration': _FloatingHeaderSnapConfiguration_duration$,
      },
      {},
    ),
    'RenderSliverFloatingPersistentHeader': m.ClassMirror(
      'RenderSliverFloatingPersistentHeader',
      {
        '#as': RenderSliverFloatingPersistentHeader_as$,
        '#is': RenderSliverFloatingPersistentHeader_is$,
        'snapConfiguration':
            _RenderSliverFloatingPersistentHeader_snapConfiguration$,
        'showOnScreenConfiguration':
            _RenderSliverFloatingPersistentHeader_showOnScreenConfiguration$,
        'vsync': _RenderSliverFloatingPersistentHeader_vsync$,
        'detach': _RenderSliverFloatingPersistentHeader_detach$,
        'updateGeometry': _RenderSliverFloatingPersistentHeader_updateGeometry$,
        'updateScrollStartDirection':
            _RenderSliverFloatingPersistentHeader_updateScrollStartDirection$,
        'maybeStartSnapAnimation':
            _RenderSliverFloatingPersistentHeader_maybeStartSnapAnimation$,
        'maybeStopSnapAnimation':
            _RenderSliverFloatingPersistentHeader_maybeStopSnapAnimation$,
        'performLayout': _RenderSliverFloatingPersistentHeader_performLayout$,
        'showOnScreen': _RenderSliverFloatingPersistentHeader_showOnScreen$,
        'childMainAxisPosition':
            _RenderSliverFloatingPersistentHeader_childMainAxisPosition$,
        'debugFillProperties':
            _RenderSliverFloatingPersistentHeader_debugFillProperties$,
      },
      {
        'snapConfiguration':
            _RenderSliverFloatingPersistentHeader_snapConfiguration_set$,
        'showOnScreenConfiguration':
            _RenderSliverFloatingPersistentHeader_showOnScreenConfiguration_set$,
        'vsync': _RenderSliverFloatingPersistentHeader_vsync_set$,
      },
    ),
    'RenderSliverFloatingPinnedPersistentHeader': m.ClassMirror(
      'RenderSliverFloatingPinnedPersistentHeader',
      {
        '#as': RenderSliverFloatingPinnedPersistentHeader_as$,
        '#is': RenderSliverFloatingPinnedPersistentHeader_is$,
        'updateGeometry':
            _RenderSliverFloatingPinnedPersistentHeader_updateGeometry$,
      },
      {},
    ),
  },
);
Function OverScrollHeaderStretchConfiguration_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as OverScrollHeaderStretchConfiguration;
Function OverScrollHeaderStretchConfiguration_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is OverScrollHeaderStretchConfiguration;
Function _OverScrollHeaderStretchConfiguration_stretchTriggerOffset$(
  m.Scope scope$,
  OverScrollHeaderStretchConfiguration target$,
) =>
    () {
      return target$.stretchTriggerOffset;
    };
Function _OverScrollHeaderStretchConfiguration_onStretchTrigger$(
  m.Scope scope$,
  OverScrollHeaderStretchConfiguration target$,
) =>
    () {
      return target$.onStretchTrigger;
    };
Function _OverScrollHeaderStretchConfiguration__$(m.Scope scope$) => ({
      double? stretchTriggerOffset,
      m.FunctionPointer? onStretchTrigger,
    }) {
      Future<void> onStretchTriggerProxy() async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            onStretchTrigger!,
            [],
            {},
          );
      return OverScrollHeaderStretchConfiguration(
        onStretchTrigger:
            onStretchTrigger == null ? null : onStretchTriggerProxy,
        stretchTriggerOffset: stretchTriggerOffset ?? 100.0,
      );
    };
Function PersistentHeaderShowOnScreenConfiguration_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PersistentHeaderShowOnScreenConfiguration;
Function PersistentHeaderShowOnScreenConfiguration_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PersistentHeaderShowOnScreenConfiguration;
Function _PersistentHeaderShowOnScreenConfiguration_minShowOnScreenExtent$(
  m.Scope scope$,
  PersistentHeaderShowOnScreenConfiguration target$,
) =>
    () {
      return target$.minShowOnScreenExtent;
    };
Function _PersistentHeaderShowOnScreenConfiguration_maxShowOnScreenExtent$(
  m.Scope scope$,
  PersistentHeaderShowOnScreenConfiguration target$,
) =>
    () {
      return target$.maxShowOnScreenExtent;
    };
Function _PersistentHeaderShowOnScreenConfiguration__$(m.Scope scope$) => ({
      double? minShowOnScreenExtent,
      double? maxShowOnScreenExtent,
    }) {
      return PersistentHeaderShowOnScreenConfiguration(
        maxShowOnScreenExtent: maxShowOnScreenExtent ?? double.infinity,
        minShowOnScreenExtent: minShowOnScreenExtent ?? double.negativeInfinity,
      );
    };
Function RenderSliverPersistentHeader_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RenderSliverPersistentHeader;
Function RenderSliverPersistentHeader_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RenderSliverPersistentHeader;
Function _RenderSliverPersistentHeader_stretchConfiguration$(
  m.Scope scope$,
  RenderSliverPersistentHeader target$,
) =>
    () {
      return target$.stretchConfiguration;
    };
void _RenderSliverPersistentHeader_stretchConfiguration_set$(
  m.Scope scope$,
  RenderSliverPersistentHeader target$,
) =>
    (dynamic other$) {
      target$.stretchConfiguration = other$;
    };
Function _RenderSliverPersistentHeader_maxExtent$(
  m.Scope scope$,
  RenderSliverPersistentHeader target$,
) =>
    () {
      return target$.maxExtent;
    };
Function _RenderSliverPersistentHeader_minExtent$(
  m.Scope scope$,
  RenderSliverPersistentHeader target$,
) =>
    () {
      return target$.minExtent;
    };
Function _RenderSliverPersistentHeader_childExtent$(
  m.Scope scope$,
  RenderSliverPersistentHeader target$,
) =>
    () {
      return target$.childExtent;
    };
Function _RenderSliverPersistentHeader_updateChild$(
  m.Scope scope$,
  RenderSliverPersistentHeader target$,
) =>
    target$.updateChild;
Function _RenderSliverPersistentHeader_markNeedsLayout$(
  m.Scope scope$,
  RenderSliverPersistentHeader target$,
) =>
    target$.markNeedsLayout;
Function _RenderSliverPersistentHeader_layoutChild$(
  m.Scope scope$,
  RenderSliverPersistentHeader target$,
) =>
    target$.layoutChild;
Function _RenderSliverPersistentHeader_childMainAxisPosition$(
  m.Scope scope$,
  RenderSliverPersistentHeader target$,
) =>
    target$.childMainAxisPosition;
Function _RenderSliverPersistentHeader_hitTestChildren$(
  m.Scope scope$,
  RenderSliverPersistentHeader target$,
) =>
    target$.hitTestChildren;
Function _RenderSliverPersistentHeader_applyPaintTransform$(
  m.Scope scope$,
  RenderSliverPersistentHeader target$,
) =>
    target$.applyPaintTransform;
Function _RenderSliverPersistentHeader_paint$(
  m.Scope scope$,
  RenderSliverPersistentHeader target$,
) =>
    target$.paint;
Function _RenderSliverPersistentHeader_describeSemanticsConfiguration$(
  m.Scope scope$,
  RenderSliverPersistentHeader target$,
) =>
    target$.describeSemanticsConfiguration;
Function _RenderSliverPersistentHeader_debugFillProperties$(
  m.Scope scope$,
  RenderSliverPersistentHeader target$,
) =>
    target$.debugFillProperties;
Function RenderSliverScrollingPersistentHeader_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RenderSliverScrollingPersistentHeader;
Function RenderSliverScrollingPersistentHeader_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RenderSliverScrollingPersistentHeader;
Function _RenderSliverScrollingPersistentHeader_updateGeometry$(
  m.Scope scope$,
  RenderSliverScrollingPersistentHeader target$,
) =>
    target$.updateGeometry;
Function _RenderSliverScrollingPersistentHeader_performLayout$(
  m.Scope scope$,
  RenderSliverScrollingPersistentHeader target$,
) =>
    target$.performLayout;
Function _RenderSliverScrollingPersistentHeader_childMainAxisPosition$(
  m.Scope scope$,
  RenderSliverScrollingPersistentHeader target$,
) =>
    target$.childMainAxisPosition;
Function RenderSliverPinnedPersistentHeader_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RenderSliverPinnedPersistentHeader;
Function RenderSliverPinnedPersistentHeader_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RenderSliverPinnedPersistentHeader;
Function _RenderSliverPinnedPersistentHeader_showOnScreenConfiguration$(
  m.Scope scope$,
  RenderSliverPinnedPersistentHeader target$,
) =>
    () {
      return target$.showOnScreenConfiguration;
    };
void _RenderSliverPinnedPersistentHeader_showOnScreenConfiguration_set$(
  m.Scope scope$,
  RenderSliverPinnedPersistentHeader target$,
) =>
    (dynamic other$) {
      target$.showOnScreenConfiguration = other$;
    };
Function _RenderSliverPinnedPersistentHeader_performLayout$(
  m.Scope scope$,
  RenderSliverPinnedPersistentHeader target$,
) =>
    target$.performLayout;
Function _RenderSliverPinnedPersistentHeader_childMainAxisPosition$(
  m.Scope scope$,
  RenderSliverPinnedPersistentHeader target$,
) =>
    target$.childMainAxisPosition;
Function _RenderSliverPinnedPersistentHeader_showOnScreen$(
  m.Scope scope$,
  RenderSliverPinnedPersistentHeader target$,
) =>
    target$.showOnScreen;
Function FloatingHeaderSnapConfiguration_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FloatingHeaderSnapConfiguration;
Function FloatingHeaderSnapConfiguration_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FloatingHeaderSnapConfiguration;
Function _FloatingHeaderSnapConfiguration_curve$(
  m.Scope scope$,
  FloatingHeaderSnapConfiguration target$,
) =>
    () {
      return target$.curve;
    };
Function _FloatingHeaderSnapConfiguration_duration$(
  m.Scope scope$,
  FloatingHeaderSnapConfiguration target$,
) =>
    () {
      return target$.duration;
    };
Function _FloatingHeaderSnapConfiguration__$(m.Scope scope$) => ({
      Curve? curve,
      Duration? duration,
    }) {
      return FloatingHeaderSnapConfiguration(
        curve: curve ?? Curves.ease,
        duration: duration ?? const Duration(milliseconds: 300),
      );
    };
Function RenderSliverFloatingPersistentHeader_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RenderSliverFloatingPersistentHeader;
Function RenderSliverFloatingPersistentHeader_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RenderSliverFloatingPersistentHeader;
Function _RenderSliverFloatingPersistentHeader_snapConfiguration$(
  m.Scope scope$,
  RenderSliverFloatingPersistentHeader target$,
) =>
    () {
      return target$.snapConfiguration;
    };
void _RenderSliverFloatingPersistentHeader_snapConfiguration_set$(
  m.Scope scope$,
  RenderSliverFloatingPersistentHeader target$,
) =>
    (dynamic other$) {
      target$.snapConfiguration = other$;
    };
Function _RenderSliverFloatingPersistentHeader_showOnScreenConfiguration$(
  m.Scope scope$,
  RenderSliverFloatingPersistentHeader target$,
) =>
    () {
      return target$.showOnScreenConfiguration;
    };
void _RenderSliverFloatingPersistentHeader_showOnScreenConfiguration_set$(
  m.Scope scope$,
  RenderSliverFloatingPersistentHeader target$,
) =>
    (dynamic other$) {
      target$.showOnScreenConfiguration = other$;
    };
Function _RenderSliverFloatingPersistentHeader_vsync$(
  m.Scope scope$,
  RenderSliverFloatingPersistentHeader target$,
) =>
    () {
      return target$.vsync;
    };
void _RenderSliverFloatingPersistentHeader_vsync_set$(
  m.Scope scope$,
  RenderSliverFloatingPersistentHeader target$,
) =>
    (dynamic other$) {
      target$.vsync = other$;
    };
Function _RenderSliverFloatingPersistentHeader_detach$(
  m.Scope scope$,
  RenderSliverFloatingPersistentHeader target$,
) =>
    target$.detach;
Function _RenderSliverFloatingPersistentHeader_updateGeometry$(
  m.Scope scope$,
  RenderSliverFloatingPersistentHeader target$,
) =>
    target$.updateGeometry;
Function _RenderSliverFloatingPersistentHeader_updateScrollStartDirection$(
  m.Scope scope$,
  RenderSliverFloatingPersistentHeader target$,
) =>
    target$.updateScrollStartDirection;
Function _RenderSliverFloatingPersistentHeader_maybeStartSnapAnimation$(
  m.Scope scope$,
  RenderSliverFloatingPersistentHeader target$,
) =>
    target$.maybeStartSnapAnimation;
Function _RenderSliverFloatingPersistentHeader_maybeStopSnapAnimation$(
  m.Scope scope$,
  RenderSliverFloatingPersistentHeader target$,
) =>
    target$.maybeStopSnapAnimation;
Function _RenderSliverFloatingPersistentHeader_performLayout$(
  m.Scope scope$,
  RenderSliverFloatingPersistentHeader target$,
) =>
    target$.performLayout;
Function _RenderSliverFloatingPersistentHeader_showOnScreen$(
  m.Scope scope$,
  RenderSliverFloatingPersistentHeader target$,
) =>
    target$.showOnScreen;
Function _RenderSliverFloatingPersistentHeader_childMainAxisPosition$(
  m.Scope scope$,
  RenderSliverFloatingPersistentHeader target$,
) =>
    target$.childMainAxisPosition;
Function _RenderSliverFloatingPersistentHeader_debugFillProperties$(
  m.Scope scope$,
  RenderSliverFloatingPersistentHeader target$,
) =>
    target$.debugFillProperties;
Function RenderSliverFloatingPinnedPersistentHeader_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RenderSliverFloatingPinnedPersistentHeader;
Function RenderSliverFloatingPinnedPersistentHeader_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RenderSliverFloatingPinnedPersistentHeader;
Function _RenderSliverFloatingPinnedPersistentHeader_updateGeometry$(
  m.Scope scope$,
  RenderSliverFloatingPinnedPersistentHeader target$,
) =>
    target$.updateGeometry;
