// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/sliver_persistent_header.dart';
import 'dart:math';
import 'package:flutter/animation.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/semantics.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/rendering/object.dart';
import 'package:flutter/src/rendering/sliver.dart';
import 'package:flutter/src/rendering/viewport.dart';
import 'package:flutter/src/rendering/viewport_offset.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/sliver_persistent_header.dart',
  {},
  {},
  {
    'OverScrollHeaderStretchConfiguration': m.ClassMirror(
      'OverScrollHeaderStretchConfiguration',
      {
        'stretchTriggerOffset':
            _OverScrollHeaderStretchConfiguration_stretchTriggerOffset$,
        'onStretchTrigger':
            _OverScrollHeaderStretchConfiguration_onStretchTrigger$,
      },
      {},
    ),
    'PersistentHeaderShowOnScreenConfiguration': m.ClassMirror(
      'PersistentHeaderShowOnScreenConfiguration',
      {
        'minShowOnScreenExtent':
            _PersistentHeaderShowOnScreenConfiguration_minShowOnScreenExtent$,
        'maxShowOnScreenExtent':
            _PersistentHeaderShowOnScreenConfiguration_maxShowOnScreenExtent$,
      },
      {},
    ),
    'RenderSliverPersistentHeader': m.ClassMirror(
      'RenderSliverPersistentHeader',
      {
        'stretchConfiguration':
            _RenderSliverPersistentHeader_stretchConfiguration$,
        'maxExtent': _RenderSliverPersistentHeader_maxExtent$,
        'minExtent': _RenderSliverPersistentHeader_minExtent$,
        'childExtent': _RenderSliverPersistentHeader_childExtent$,
        'updateChild': _RenderSliverPersistentHeader_updateChild$,
        'markNeedsLayout': _RenderSliverPersistentHeader_markNeedsLayout$,
        'layoutChild': _RenderSliverPersistentHeader_layoutChild$,
        'childMainAxisPosition':
            _RenderSliverPersistentHeader_childMainAxisPosition$,
        'hitTestChildren': _RenderSliverPersistentHeader_hitTestChildren$,
        'applyPaintTransform':
            _RenderSliverPersistentHeader_applyPaintTransform$,
        'paint': _RenderSliverPersistentHeader_paint$,
        'describeSemanticsConfiguration':
            _RenderSliverPersistentHeader_describeSemanticsConfiguration$,
        'debugFillProperties':
            _RenderSliverPersistentHeader_debugFillProperties$,
      },
      {
        'stretchConfiguration':
            _RenderSliverPersistentHeader_stretchConfiguration_set$
      },
    ),
    'RenderSliverScrollingPersistentHeader': m.ClassMirror(
      'RenderSliverScrollingPersistentHeader',
      {
        'updateGeometry':
            _RenderSliverScrollingPersistentHeader_updateGeometry$,
        'performLayout': _RenderSliverScrollingPersistentHeader_performLayout$,
        'childMainAxisPosition':
            _RenderSliverScrollingPersistentHeader_childMainAxisPosition$,
      },
      {},
    ),
    'RenderSliverPinnedPersistentHeader': m.ClassMirror(
      'RenderSliverPinnedPersistentHeader',
      {
        'showOnScreenConfiguration':
            _RenderSliverPinnedPersistentHeader_showOnScreenConfiguration$,
        'performLayout': _RenderSliverPinnedPersistentHeader_performLayout$,
        'childMainAxisPosition':
            _RenderSliverPinnedPersistentHeader_childMainAxisPosition$,
        'showOnScreen': _RenderSliverPinnedPersistentHeader_showOnScreen$,
      },
      {
        'showOnScreenConfiguration':
            _RenderSliverPinnedPersistentHeader_showOnScreenConfiguration_set$
      },
    ),
    'FloatingHeaderSnapConfiguration': m.ClassMirror(
      'FloatingHeaderSnapConfiguration',
      {
        'curve': _FloatingHeaderSnapConfiguration_curve$,
        'duration': _FloatingHeaderSnapConfiguration_duration$,
      },
      {},
    ),
    'RenderSliverFloatingPersistentHeader': m.ClassMirror(
      'RenderSliverFloatingPersistentHeader',
      {
        'snapConfiguration':
            _RenderSliverFloatingPersistentHeader_snapConfiguration$,
        'showOnScreenConfiguration':
            _RenderSliverFloatingPersistentHeader_showOnScreenConfiguration$,
        'vsync': _RenderSliverFloatingPersistentHeader_vsync$,
        'detach': _RenderSliverFloatingPersistentHeader_detach$,
        'updateGeometry': _RenderSliverFloatingPersistentHeader_updateGeometry$,
        'updateScrollStartDirection':
            _RenderSliverFloatingPersistentHeader_updateScrollStartDirection$,
        'maybeStartSnapAnimation':
            _RenderSliverFloatingPersistentHeader_maybeStartSnapAnimation$,
        'maybeStopSnapAnimation':
            _RenderSliverFloatingPersistentHeader_maybeStopSnapAnimation$,
        'performLayout': _RenderSliverFloatingPersistentHeader_performLayout$,
        'showOnScreen': _RenderSliverFloatingPersistentHeader_showOnScreen$,
        'childMainAxisPosition':
            _RenderSliverFloatingPersistentHeader_childMainAxisPosition$,
        'debugFillProperties':
            _RenderSliverFloatingPersistentHeader_debugFillProperties$,
      },
      {
        'snapConfiguration':
            _RenderSliverFloatingPersistentHeader_snapConfiguration_set$,
        'showOnScreenConfiguration':
            _RenderSliverFloatingPersistentHeader_showOnScreenConfiguration_set$,
        'vsync': _RenderSliverFloatingPersistentHeader_vsync_set$,
      },
    ),
    'RenderSliverFloatingPinnedPersistentHeader': m.ClassMirror(
      'RenderSliverFloatingPinnedPersistentHeader',
      {
        'updateGeometry':
            _RenderSliverFloatingPinnedPersistentHeader_updateGeometry$
      },
      {},
    ),
  },
);
double _OverScrollHeaderStretchConfiguration_stretchTriggerOffset$(
    OverScrollHeaderStretchConfiguration target) {
  return target.stretchTriggerOffset;
}

Future<void> Function()?
    _OverScrollHeaderStretchConfiguration_onStretchTrigger$(
        OverScrollHeaderStretchConfiguration target) {
  return target.onStretchTrigger;
}

double _PersistentHeaderShowOnScreenConfiguration_minShowOnScreenExtent$(
    PersistentHeaderShowOnScreenConfiguration target) {
  return target.minShowOnScreenExtent;
}

double _PersistentHeaderShowOnScreenConfiguration_maxShowOnScreenExtent$(
    PersistentHeaderShowOnScreenConfiguration target) {
  return target.maxShowOnScreenExtent;
}

OverScrollHeaderStretchConfiguration?
    _RenderSliverPersistentHeader_stretchConfiguration$(
        RenderSliverPersistentHeader target) {
  return target.stretchConfiguration;
}

void _RenderSliverPersistentHeader_stretchConfiguration_set$(
  RenderSliverPersistentHeader target,
  OverScrollHeaderStretchConfiguration? other,
) {
  target.stretchConfiguration = other;
}

double _RenderSliverPersistentHeader_maxExtent$(
    RenderSliverPersistentHeader target) {
  return target.maxExtent;
}

double _RenderSliverPersistentHeader_minExtent$(
    RenderSliverPersistentHeader target) {
  return target.minExtent;
}

double _RenderSliverPersistentHeader_childExtent$(
    RenderSliverPersistentHeader target) {
  return target.childExtent;
}

Function _RenderSliverPersistentHeader_updateChild$(
  m.Scope scope,
  RenderSliverPersistentHeader target,
) =>
    target.updateChild;
Function _RenderSliverPersistentHeader_markNeedsLayout$(
  m.Scope scope,
  RenderSliverPersistentHeader target,
) =>
    target.markNeedsLayout;
Function _RenderSliverPersistentHeader_layoutChild$(
  m.Scope scope,
  RenderSliverPersistentHeader target,
) =>
    target.layoutChild;
Function _RenderSliverPersistentHeader_childMainAxisPosition$(
  m.Scope scope,
  RenderSliverPersistentHeader target,
) =>
    target.childMainAxisPosition;
Function _RenderSliverPersistentHeader_hitTestChildren$(
  m.Scope scope,
  RenderSliverPersistentHeader target,
) =>
    target.hitTestChildren;
Function _RenderSliverPersistentHeader_applyPaintTransform$(
  m.Scope scope,
  RenderSliverPersistentHeader target,
) =>
    target.applyPaintTransform;
Function _RenderSliverPersistentHeader_paint$(
  m.Scope scope,
  RenderSliverPersistentHeader target,
) =>
    target.paint;
Function _RenderSliverPersistentHeader_describeSemanticsConfiguration$(
  m.Scope scope,
  RenderSliverPersistentHeader target,
) =>
    target.describeSemanticsConfiguration;
Function _RenderSliverPersistentHeader_debugFillProperties$(
  m.Scope scope,
  RenderSliverPersistentHeader target,
) =>
    target.debugFillProperties;
Function _RenderSliverScrollingPersistentHeader_updateGeometry$(
  m.Scope scope,
  RenderSliverScrollingPersistentHeader target,
) =>
    target.updateGeometry;
Function _RenderSliverScrollingPersistentHeader_performLayout$(
  m.Scope scope,
  RenderSliverScrollingPersistentHeader target,
) =>
    target.performLayout;
Function _RenderSliverScrollingPersistentHeader_childMainAxisPosition$(
  m.Scope scope,
  RenderSliverScrollingPersistentHeader target,
) =>
    target.childMainAxisPosition;
PersistentHeaderShowOnScreenConfiguration?
    _RenderSliverPinnedPersistentHeader_showOnScreenConfiguration$(
        RenderSliverPinnedPersistentHeader target) {
  return target.showOnScreenConfiguration;
}

void _RenderSliverPinnedPersistentHeader_showOnScreenConfiguration_set$(
  RenderSliverPinnedPersistentHeader target,
  PersistentHeaderShowOnScreenConfiguration? other,
) {
  target.showOnScreenConfiguration = other;
}

Function _RenderSliverPinnedPersistentHeader_performLayout$(
  m.Scope scope,
  RenderSliverPinnedPersistentHeader target,
) =>
    target.performLayout;
Function _RenderSliverPinnedPersistentHeader_childMainAxisPosition$(
  m.Scope scope,
  RenderSliverPinnedPersistentHeader target,
) =>
    target.childMainAxisPosition;
Function _RenderSliverPinnedPersistentHeader_showOnScreen$(
  m.Scope scope,
  RenderSliverPinnedPersistentHeader target,
) =>
    target.showOnScreen;
Curve _FloatingHeaderSnapConfiguration_curve$(
    FloatingHeaderSnapConfiguration target) {
  return target.curve;
}

Duration _FloatingHeaderSnapConfiguration_duration$(
    FloatingHeaderSnapConfiguration target) {
  return target.duration;
}

FloatingHeaderSnapConfiguration?
    _RenderSliverFloatingPersistentHeader_snapConfiguration$(
        RenderSliverFloatingPersistentHeader target) {
  return target.snapConfiguration;
}

void _RenderSliverFloatingPersistentHeader_snapConfiguration_set$(
  RenderSliverFloatingPersistentHeader target,
  FloatingHeaderSnapConfiguration? other,
) {
  target.snapConfiguration = other;
}

PersistentHeaderShowOnScreenConfiguration?
    _RenderSliverFloatingPersistentHeader_showOnScreenConfiguration$(
        RenderSliverFloatingPersistentHeader target) {
  return target.showOnScreenConfiguration;
}

void _RenderSliverFloatingPersistentHeader_showOnScreenConfiguration_set$(
  RenderSliverFloatingPersistentHeader target,
  PersistentHeaderShowOnScreenConfiguration? other,
) {
  target.showOnScreenConfiguration = other;
}

TickerProvider? _RenderSliverFloatingPersistentHeader_vsync$(
    RenderSliverFloatingPersistentHeader target) {
  return target.vsync;
}

void _RenderSliverFloatingPersistentHeader_vsync_set$(
  RenderSliverFloatingPersistentHeader target,
  TickerProvider? other,
) {
  target.vsync = other;
}

Function _RenderSliverFloatingPersistentHeader_detach$(
  m.Scope scope,
  RenderSliverFloatingPersistentHeader target,
) =>
    target.detach;
Function _RenderSliverFloatingPersistentHeader_updateGeometry$(
  m.Scope scope,
  RenderSliverFloatingPersistentHeader target,
) =>
    target.updateGeometry;
Function _RenderSliverFloatingPersistentHeader_updateScrollStartDirection$(
  m.Scope scope,
  RenderSliverFloatingPersistentHeader target,
) =>
    target.updateScrollStartDirection;
Function _RenderSliverFloatingPersistentHeader_maybeStartSnapAnimation$(
  m.Scope scope,
  RenderSliverFloatingPersistentHeader target,
) =>
    target.maybeStartSnapAnimation;
Function _RenderSliverFloatingPersistentHeader_maybeStopSnapAnimation$(
  m.Scope scope,
  RenderSliverFloatingPersistentHeader target,
) =>
    target.maybeStopSnapAnimation;
Function _RenderSliverFloatingPersistentHeader_performLayout$(
  m.Scope scope,
  RenderSliverFloatingPersistentHeader target,
) =>
    target.performLayout;
Function _RenderSliverFloatingPersistentHeader_showOnScreen$(
  m.Scope scope,
  RenderSliverFloatingPersistentHeader target,
) =>
    target.showOnScreen;
Function _RenderSliverFloatingPersistentHeader_childMainAxisPosition$(
  m.Scope scope,
  RenderSliverFloatingPersistentHeader target,
) =>
    target.childMainAxisPosition;
Function _RenderSliverFloatingPersistentHeader_debugFillProperties$(
  m.Scope scope,
  RenderSliverFloatingPersistentHeader target,
) =>
    target.debugFillProperties;
Function _RenderSliverFloatingPinnedPersistentHeader_updateGeometry$(
  m.Scope scope,
  RenderSliverFloatingPinnedPersistentHeader target,
) =>
    target.updateGeometry;
