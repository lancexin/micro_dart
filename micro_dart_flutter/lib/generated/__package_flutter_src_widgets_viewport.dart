// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/viewport.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/scroll_notification.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/viewport.dart',
  {
    'Viewport.getDefaultCrossAxisDirection':
        _Viewport_getDefaultCrossAxisDirection$
  },
  {},
  {
    'Viewport': m.ClassMirror(
      'Viewport',
      {
        '#as': Viewport_as$,
        '#is': Viewport_is$,
        'axisDirection': _Viewport_axisDirection$,
        'crossAxisDirection': _Viewport_crossAxisDirection$,
        'anchor': _Viewport_anchor$,
        'offset': _Viewport_offset$,
        'center': _Viewport_center$,
        'cacheExtent': _Viewport_cacheExtent$,
        'cacheExtentStyle': _Viewport_cacheExtentStyle$,
        'clipBehavior': _Viewport_clipBehavior$,
        'createRenderObject': _Viewport_createRenderObject$,
        'updateRenderObject': _Viewport_updateRenderObject$,
        'createElement': _Viewport_createElement$,
        'debugFillProperties': _Viewport_debugFillProperties$,
      },
      {},
    ),
    'ShrinkWrappingViewport': m.ClassMirror(
      'ShrinkWrappingViewport',
      {
        '#as': ShrinkWrappingViewport_as$,
        '#is': ShrinkWrappingViewport_is$,
        'axisDirection': _ShrinkWrappingViewport_axisDirection$,
        'crossAxisDirection': _ShrinkWrappingViewport_crossAxisDirection$,
        'offset': _ShrinkWrappingViewport_offset$,
        'clipBehavior': _ShrinkWrappingViewport_clipBehavior$,
        'createRenderObject': _ShrinkWrappingViewport_createRenderObject$,
        'updateRenderObject': _ShrinkWrappingViewport_updateRenderObject$,
        'debugFillProperties': _ShrinkWrappingViewport_debugFillProperties$,
      },
      {},
    ),
  },
);
Function Viewport_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Viewport;
Function Viewport_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Viewport;
AxisDirection _Viewport_axisDirection$(Viewport target) {
  return target.axisDirection;
}

AxisDirection? _Viewport_crossAxisDirection$(Viewport target) {
  return target.crossAxisDirection;
}

double _Viewport_anchor$(Viewport target) {
  return target.anchor;
}

ViewportOffset _Viewport_offset$(Viewport target) {
  return target.offset;
}

Key? _Viewport_center$(Viewport target) {
  return target.center;
}

double? _Viewport_cacheExtent$(Viewport target) {
  return target.cacheExtent;
}

CacheExtentStyle _Viewport_cacheExtentStyle$(Viewport target) {
  return target.cacheExtentStyle;
}

Clip _Viewport_clipBehavior$(Viewport target) {
  return target.clipBehavior;
}

Function _Viewport_getDefaultCrossAxisDirection$(m.Scope scope) =>
    Viewport.getDefaultCrossAxisDirection;
Function _Viewport_createRenderObject$(
  m.Scope scope,
  Viewport target,
) =>
    target.createRenderObject;
Function _Viewport_updateRenderObject$(
  m.Scope scope,
  Viewport target,
) =>
    target.updateRenderObject;
Function _Viewport_createElement$(
  m.Scope scope,
  Viewport target,
) =>
    target.createElement;
Function _Viewport_debugFillProperties$(
  m.Scope scope,
  Viewport target,
) =>
    target.debugFillProperties;
Function ShrinkWrappingViewport_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ShrinkWrappingViewport;
Function ShrinkWrappingViewport_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ShrinkWrappingViewport;
AxisDirection _ShrinkWrappingViewport_axisDirection$(
    ShrinkWrappingViewport target) {
  return target.axisDirection;
}

AxisDirection? _ShrinkWrappingViewport_crossAxisDirection$(
    ShrinkWrappingViewport target) {
  return target.crossAxisDirection;
}

ViewportOffset _ShrinkWrappingViewport_offset$(ShrinkWrappingViewport target) {
  return target.offset;
}

Clip _ShrinkWrappingViewport_clipBehavior$(ShrinkWrappingViewport target) {
  return target.clipBehavior;
}

Function _ShrinkWrappingViewport_createRenderObject$(
  m.Scope scope,
  ShrinkWrappingViewport target,
) =>
    target.createRenderObject;
Function _ShrinkWrappingViewport_updateRenderObject$(
  m.Scope scope,
  ShrinkWrappingViewport target,
) =>
    target.updateRenderObject;
Function _ShrinkWrappingViewport_debugFillProperties$(
  m.Scope scope,
  ShrinkWrappingViewport target,
) =>
    target.debugFillProperties;
