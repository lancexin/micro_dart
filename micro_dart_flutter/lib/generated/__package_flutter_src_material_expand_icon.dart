// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/expand_icon.dart';
import 'dart:math';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/expand_icon.dart',
  {'ExpandIcon.': _ExpandIcon__$},
  {},
  {
    'ExpandIcon': m.ClassMirror(
      'ExpandIcon',
      {
        '#as': ExpandIcon_as$,
        '#is': ExpandIcon_is$,
        'isExpanded': _ExpandIcon_isExpanded$,
        'size': _ExpandIcon_size$,
        'onPressed': _ExpandIcon_onPressed$,
        'padding': _ExpandIcon_padding$,
        'color': _ExpandIcon_color$,
        'disabledColor': _ExpandIcon_disabledColor$,
        'expandedColor': _ExpandIcon_expandedColor$,
        'createState': _ExpandIcon_createState$,
      },
      {},
    )
  },
);
Function ExpandIcon_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ExpandIcon;
Function ExpandIcon_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ExpandIcon;
Function _ExpandIcon_isExpanded$(
  m.Scope scope$,
  ExpandIcon target$,
) =>
    () {
      return target$.isExpanded;
    };
Function _ExpandIcon_size$(
  m.Scope scope$,
  ExpandIcon target$,
) =>
    () {
      return target$.size;
    };
Function _ExpandIcon_onPressed$(
  m.Scope scope$,
  ExpandIcon target$,
) =>
    () {
      return target$.onPressed;
    };
Function _ExpandIcon_padding$(
  m.Scope scope$,
  ExpandIcon target$,
) =>
    () {
      return target$.padding;
    };
Function _ExpandIcon_color$(
  m.Scope scope$,
  ExpandIcon target$,
) =>
    () {
      return target$.color;
    };
Function _ExpandIcon_disabledColor$(
  m.Scope scope$,
  ExpandIcon target$,
) =>
    () {
      return target$.disabledColor;
    };
Function _ExpandIcon_expandedColor$(
  m.Scope scope$,
  ExpandIcon target$,
) =>
    () {
      return target$.expandedColor;
    };
Function _ExpandIcon__$(m.Scope scope$) => ({
      Key? key,
      bool? isExpanded,
      double? size,
      required m.FunctionPointer? onPressed,
      EdgeInsetsGeometry? padding,
      Color? color,
      Color? disabledColor,
      Color? expandedColor,
    }) {
      void onPressedProxy(bool onPressed_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [onPressed_value$],
            {},
          );
      return ExpandIcon(
        color: color,
        disabledColor: disabledColor,
        expandedColor: expandedColor,
        isExpanded: isExpanded ?? false,
        key: key,
        onPressed: onPressed == null ? null : onPressedProxy,
        padding: padding ?? const EdgeInsets.all(8.0),
        size: size ?? 24.0,
      );
    };
Function _ExpandIcon_createState$(
  m.Scope scope$,
  ExpandIcon target$,
) =>
    target$.createState;
