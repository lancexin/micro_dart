// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/expand_icon.dart';
import 'dart:math';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/expand_icon.dart',
  {},
  {},
  {
    'ExpandIcon': m.ClassMirror(
      'ExpandIcon',
      {
        '#as': ExpandIcon_as$,
        '#is': ExpandIcon_is$,
        'isExpanded': _ExpandIcon_isExpanded$,
        'size': _ExpandIcon_size$,
        'onPressed': _ExpandIcon_onPressed$,
        'padding': _ExpandIcon_padding$,
        'color': _ExpandIcon_color$,
        'disabledColor': _ExpandIcon_disabledColor$,
        'expandedColor': _ExpandIcon_expandedColor$,
        'createState': _ExpandIcon_createState$,
      },
      {},
    )
  },
);
Function ExpandIcon_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ExpandIcon;
Function ExpandIcon_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ExpandIcon;
bool _ExpandIcon_isExpanded$(ExpandIcon target) {
  return target.isExpanded;
}

double _ExpandIcon_size$(ExpandIcon target) {
  return target.size;
}

void Function(bool)? _ExpandIcon_onPressed$(ExpandIcon target) {
  return target.onPressed;
}

EdgeInsetsGeometry _ExpandIcon_padding$(ExpandIcon target) {
  return target.padding;
}

Color? _ExpandIcon_color$(ExpandIcon target) {
  return target.color;
}

Color? _ExpandIcon_disabledColor$(ExpandIcon target) {
  return target.disabledColor;
}

Color? _ExpandIcon_expandedColor$(ExpandIcon target) {
  return target.expandedColor;
}

Function _ExpandIcon_createState$(
  m.Scope scope,
  ExpandIcon target,
) =>
    target.createState;
