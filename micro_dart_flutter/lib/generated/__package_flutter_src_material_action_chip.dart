// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/action_chip.dart';
import 'package:flutter/foundation.dart' show clampDouble;
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/chip.dart';
import 'package:flutter/src/material/chip_theme.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/action_chip.dart',
  {},
  {},
  {
    'ActionChip': m.ClassMirror(
      'ActionChip',
      {
        '#as': ActionChip_as$,
        '#is': ActionChip_is$,
        'avatar': _ActionChip_avatar$,
        'label': _ActionChip_label$,
        'labelStyle': _ActionChip_labelStyle$,
        'labelPadding': _ActionChip_labelPadding$,
        'onPressed': _ActionChip_onPressed$,
        'pressElevation': _ActionChip_pressElevation$,
        'tooltip': _ActionChip_tooltip$,
        'side': _ActionChip_side$,
        'shape': _ActionChip_shape$,
        'clipBehavior': _ActionChip_clipBehavior$,
        'focusNode': _ActionChip_focusNode$,
        'autofocus': _ActionChip_autofocus$,
        'backgroundColor': _ActionChip_backgroundColor$,
        'disabledColor': _ActionChip_disabledColor$,
        'padding': _ActionChip_padding$,
        'visualDensity': _ActionChip_visualDensity$,
        'materialTapTargetSize': _ActionChip_materialTapTargetSize$,
        'elevation': _ActionChip_elevation$,
        'shadowColor': _ActionChip_shadowColor$,
        'surfaceTintColor': _ActionChip_surfaceTintColor$,
        'iconTheme': _ActionChip_iconTheme$,
        'isEnabled': _ActionChip_isEnabled$,
        'build': _ActionChip_build$,
      },
      {},
    )
  },
);
Function ActionChip_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ActionChip;
Function ActionChip_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ActionChip;
Widget? _ActionChip_avatar$(ActionChip target) {
  return target.avatar;
}

Widget _ActionChip_label$(ActionChip target) {
  return target.label;
}

TextStyle? _ActionChip_labelStyle$(ActionChip target) {
  return target.labelStyle;
}

EdgeInsetsGeometry? _ActionChip_labelPadding$(ActionChip target) {
  return target.labelPadding;
}

void Function()? _ActionChip_onPressed$(ActionChip target) {
  return target.onPressed;
}

double? _ActionChip_pressElevation$(ActionChip target) {
  return target.pressElevation;
}

String? _ActionChip_tooltip$(ActionChip target) {
  return target.tooltip;
}

BorderSide? _ActionChip_side$(ActionChip target) {
  return target.side;
}

OutlinedBorder? _ActionChip_shape$(ActionChip target) {
  return target.shape;
}

Clip _ActionChip_clipBehavior$(ActionChip target) {
  return target.clipBehavior;
}

FocusNode? _ActionChip_focusNode$(ActionChip target) {
  return target.focusNode;
}

bool _ActionChip_autofocus$(ActionChip target) {
  return target.autofocus;
}

Color? _ActionChip_backgroundColor$(ActionChip target) {
  return target.backgroundColor;
}

Color? _ActionChip_disabledColor$(ActionChip target) {
  return target.disabledColor;
}

EdgeInsetsGeometry? _ActionChip_padding$(ActionChip target) {
  return target.padding;
}

VisualDensity? _ActionChip_visualDensity$(ActionChip target) {
  return target.visualDensity;
}

MaterialTapTargetSize? _ActionChip_materialTapTargetSize$(ActionChip target) {
  return target.materialTapTargetSize;
}

double? _ActionChip_elevation$(ActionChip target) {
  return target.elevation;
}

Color? _ActionChip_shadowColor$(ActionChip target) {
  return target.shadowColor;
}

Color? _ActionChip_surfaceTintColor$(ActionChip target) {
  return target.surfaceTintColor;
}

IconThemeData? _ActionChip_iconTheme$(ActionChip target) {
  return target.iconTheme;
}

bool _ActionChip_isEnabled$(ActionChip target) {
  return target.isEnabled;
}

Function _ActionChip_build$(
  m.Scope scope,
  ActionChip target,
) =>
    target.build;
