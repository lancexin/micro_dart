// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/action_chip.dart';
import 'package:flutter/foundation.dart' show clampDouble;
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/chip.dart';
import 'package:flutter/src/material/chip_theme.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/action_chip.dart',
  {'ActionChip.': _ActionChip__$},
  {},
  {
    'ActionChip': m.ClassMirror(
      'ActionChip',
      {
        '#as': ActionChip_as$,
        '#is': ActionChip_is$,
        'avatar': _ActionChip_avatar$,
        'label': _ActionChip_label$,
        'labelStyle': _ActionChip_labelStyle$,
        'labelPadding': _ActionChip_labelPadding$,
        'onPressed': _ActionChip_onPressed$,
        'pressElevation': _ActionChip_pressElevation$,
        'tooltip': _ActionChip_tooltip$,
        'side': _ActionChip_side$,
        'shape': _ActionChip_shape$,
        'clipBehavior': _ActionChip_clipBehavior$,
        'focusNode': _ActionChip_focusNode$,
        'autofocus': _ActionChip_autofocus$,
        'backgroundColor': _ActionChip_backgroundColor$,
        'disabledColor': _ActionChip_disabledColor$,
        'padding': _ActionChip_padding$,
        'visualDensity': _ActionChip_visualDensity$,
        'materialTapTargetSize': _ActionChip_materialTapTargetSize$,
        'elevation': _ActionChip_elevation$,
        'shadowColor': _ActionChip_shadowColor$,
        'surfaceTintColor': _ActionChip_surfaceTintColor$,
        'iconTheme': _ActionChip_iconTheme$,
        'isEnabled': _ActionChip_isEnabled$,
        'build': _ActionChip_build$,
      },
      {},
    )
  },
);
Function ActionChip_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ActionChip;
Function ActionChip_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ActionChip;
Function _ActionChip_avatar$(
  m.Scope scope$,
  ActionChip target$,
) =>
    () {
      return target$.avatar;
    };
Function _ActionChip_label$(
  m.Scope scope$,
  ActionChip target$,
) =>
    () {
      return target$.label;
    };
Function _ActionChip_labelStyle$(
  m.Scope scope$,
  ActionChip target$,
) =>
    () {
      return target$.labelStyle;
    };
Function _ActionChip_labelPadding$(
  m.Scope scope$,
  ActionChip target$,
) =>
    () {
      return target$.labelPadding;
    };
Function _ActionChip_onPressed$(
  m.Scope scope$,
  ActionChip target$,
) =>
    () {
      return target$.onPressed;
    };
Function _ActionChip_pressElevation$(
  m.Scope scope$,
  ActionChip target$,
) =>
    () {
      return target$.pressElevation;
    };
Function _ActionChip_tooltip$(
  m.Scope scope$,
  ActionChip target$,
) =>
    () {
      return target$.tooltip;
    };
Function _ActionChip_side$(
  m.Scope scope$,
  ActionChip target$,
) =>
    () {
      return target$.side;
    };
Function _ActionChip_shape$(
  m.Scope scope$,
  ActionChip target$,
) =>
    () {
      return target$.shape;
    };
Function _ActionChip_clipBehavior$(
  m.Scope scope$,
  ActionChip target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _ActionChip_focusNode$(
  m.Scope scope$,
  ActionChip target$,
) =>
    () {
      return target$.focusNode;
    };
Function _ActionChip_autofocus$(
  m.Scope scope$,
  ActionChip target$,
) =>
    () {
      return target$.autofocus;
    };
Function _ActionChip_backgroundColor$(
  m.Scope scope$,
  ActionChip target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _ActionChip_disabledColor$(
  m.Scope scope$,
  ActionChip target$,
) =>
    () {
      return target$.disabledColor;
    };
Function _ActionChip_padding$(
  m.Scope scope$,
  ActionChip target$,
) =>
    () {
      return target$.padding;
    };
Function _ActionChip_visualDensity$(
  m.Scope scope$,
  ActionChip target$,
) =>
    () {
      return target$.visualDensity;
    };
Function _ActionChip_materialTapTargetSize$(
  m.Scope scope$,
  ActionChip target$,
) =>
    () {
      return target$.materialTapTargetSize;
    };
Function _ActionChip_elevation$(
  m.Scope scope$,
  ActionChip target$,
) =>
    () {
      return target$.elevation;
    };
Function _ActionChip_shadowColor$(
  m.Scope scope$,
  ActionChip target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _ActionChip_surfaceTintColor$(
  m.Scope scope$,
  ActionChip target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _ActionChip_iconTheme$(
  m.Scope scope$,
  ActionChip target$,
) =>
    () {
      return target$.iconTheme;
    };
Function _ActionChip_isEnabled$(
  m.Scope scope$,
  ActionChip target$,
) =>
    () {
      return target$.isEnabled;
    };
Function _ActionChip__$(m.Scope scope$) => ({
      Key? key,
      Widget? avatar,
      required Widget label,
      TextStyle? labelStyle,
      EdgeInsetsGeometry? labelPadding,
      m.FunctionPointer? onPressed,
      double? pressElevation,
      String? tooltip,
      BorderSide? side,
      OutlinedBorder? shape,
      Clip? clipBehavior,
      FocusNode? focusNode,
      bool? autofocus,
      Color? backgroundColor,
      Color? disabledColor,
      EdgeInsetsGeometry? padding,
      VisualDensity? visualDensity,
      MaterialTapTargetSize? materialTapTargetSize,
      double? elevation,
      Color? shadowColor,
      Color? surfaceTintColor,
      IconThemeData? iconTheme,
    }) {
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return ActionChip(
        autofocus: autofocus ?? false,
        avatar: avatar,
        backgroundColor: backgroundColor,
        clipBehavior: clipBehavior ?? Clip.none,
        disabledColor: disabledColor,
        elevation: elevation,
        focusNode: focusNode,
        iconTheme: iconTheme,
        key: key,
        label: label,
        labelPadding: labelPadding,
        labelStyle: labelStyle,
        materialTapTargetSize: materialTapTargetSize,
        onPressed: onPressed == null ? null : onPressedProxy,
        padding: padding,
        pressElevation: pressElevation,
        shadowColor: shadowColor,
        shape: shape,
        side: side,
        surfaceTintColor: surfaceTintColor,
        tooltip: tooltip,
        visualDensity: visualDensity,
      );
    };
Function _ActionChip_build$(
  m.Scope scope$,
  ActionChip target$,
) =>
    target$.build;
