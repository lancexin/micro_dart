// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/bottom_sheet.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/bottom_sheet_theme.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/curves.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/scaffold.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/bottom_sheet.dart',
  {
    'BottomSheet.createAnimationController':
        _BottomSheet_createAnimationController$,
    'showModalBottomSheet': _showModalBottomSheet$,
    'showBottomSheet': _showBottomSheet$,
  },
  {},
  {
    'BottomSheet': m.ClassMirror(
      'BottomSheet',
      {
        'animationController': _BottomSheet_animationController$,
        'onClosing': _BottomSheet_onClosing$,
        'builder': _BottomSheet_builder$,
        'enableDrag': _BottomSheet_enableDrag$,
        'showDragHandle': _BottomSheet_showDragHandle$,
        'dragHandleColor': _BottomSheet_dragHandleColor$,
        'dragHandleSize': _BottomSheet_dragHandleSize$,
        'onDragStart': _BottomSheet_onDragStart$,
        'onDragEnd': _BottomSheet_onDragEnd$,
        'backgroundColor': _BottomSheet_backgroundColor$,
        'shadowColor': _BottomSheet_shadowColor$,
        'elevation': _BottomSheet_elevation$,
        'shape': _BottomSheet_shape$,
        'clipBehavior': _BottomSheet_clipBehavior$,
        'constraints': _BottomSheet_constraints$,
        'createState': _BottomSheet_createState$,
      },
      {},
    ),
    'ModalBottomSheetRoute': m.ClassMirror(
      'ModalBottomSheetRoute',
      {
        'builder': _ModalBottomSheetRoute_builder$,
        'capturedThemes': _ModalBottomSheetRoute_capturedThemes$,
        'isScrollControlled': _ModalBottomSheetRoute_isScrollControlled$,
        'backgroundColor': _ModalBottomSheetRoute_backgroundColor$,
        'elevation': _ModalBottomSheetRoute_elevation$,
        'shape': _ModalBottomSheetRoute_shape$,
        'clipBehavior': _ModalBottomSheetRoute_clipBehavior$,
        'constraints': _ModalBottomSheetRoute_constraints$,
        'modalBarrierColor': _ModalBottomSheetRoute_modalBarrierColor$,
        'isDismissible': _ModalBottomSheetRoute_isDismissible$,
        'enableDrag': _ModalBottomSheetRoute_enableDrag$,
        'showDragHandle': _ModalBottomSheetRoute_showDragHandle$,
        'transitionAnimationController':
            _ModalBottomSheetRoute_transitionAnimationController$,
        'anchorPoint': _ModalBottomSheetRoute_anchorPoint$,
        'useSafeArea': _ModalBottomSheetRoute_useSafeArea$,
        'barrierOnTapHint': _ModalBottomSheetRoute_barrierOnTapHint$,
        'barrierLabel': _ModalBottomSheetRoute_barrierLabel$,
        'transitionDuration': _ModalBottomSheetRoute_transitionDuration$,
        'reverseTransitionDuration':
            _ModalBottomSheetRoute_reverseTransitionDuration$,
        'barrierDismissible': _ModalBottomSheetRoute_barrierDismissible$,
        'barrierColor': _ModalBottomSheetRoute_barrierColor$,
        'createAnimationController':
            _ModalBottomSheetRoute_createAnimationController$,
        'buildPage': _ModalBottomSheetRoute_buildPage$,
        'buildModalBarrier': _ModalBottomSheetRoute_buildModalBarrier$,
      },
      {},
    ),
  },
);
AnimationController? _BottomSheet_animationController$(BottomSheet target) {
  return target.animationController;
}

void Function() _BottomSheet_onClosing$(BottomSheet target) {
  return target.onClosing;
}

Widget Function(BuildContext) _BottomSheet_builder$(BottomSheet target) {
  return target.builder;
}

bool _BottomSheet_enableDrag$(BottomSheet target) {
  return target.enableDrag;
}

bool? _BottomSheet_showDragHandle$(BottomSheet target) {
  return target.showDragHandle;
}

Color? _BottomSheet_dragHandleColor$(BottomSheet target) {
  return target.dragHandleColor;
}

Size? _BottomSheet_dragHandleSize$(BottomSheet target) {
  return target.dragHandleSize;
}

void Function(DragStartDetails)? _BottomSheet_onDragStart$(BottomSheet target) {
  return target.onDragStart;
}

void Function(DragEndDetails, {required bool isClosing})?
    _BottomSheet_onDragEnd$(BottomSheet target) {
  return target.onDragEnd;
}

Color? _BottomSheet_backgroundColor$(BottomSheet target) {
  return target.backgroundColor;
}

Color? _BottomSheet_shadowColor$(BottomSheet target) {
  return target.shadowColor;
}

double? _BottomSheet_elevation$(BottomSheet target) {
  return target.elevation;
}

ShapeBorder? _BottomSheet_shape$(BottomSheet target) {
  return target.shape;
}

Clip? _BottomSheet_clipBehavior$(BottomSheet target) {
  return target.clipBehavior;
}

BoxConstraints? _BottomSheet_constraints$(BottomSheet target) {
  return target.constraints;
}

Function _BottomSheet_createState$(
  m.Scope scope,
  BottomSheet target,
) =>
    target.createState;
Function _BottomSheet_createAnimationController$(m.Scope scope) =>
    BottomSheet.createAnimationController;
Widget Function(BuildContext) _ModalBottomSheetRoute_builder$<T>(
    ModalBottomSheetRoute<T> target) {
  return target.builder;
}

CapturedThemes? _ModalBottomSheetRoute_capturedThemes$<T>(
    ModalBottomSheetRoute<T> target) {
  return target.capturedThemes;
}

bool _ModalBottomSheetRoute_isScrollControlled$<T>(
    ModalBottomSheetRoute<T> target) {
  return target.isScrollControlled;
}

Color? _ModalBottomSheetRoute_backgroundColor$<T>(
    ModalBottomSheetRoute<T> target) {
  return target.backgroundColor;
}

double? _ModalBottomSheetRoute_elevation$<T>(ModalBottomSheetRoute<T> target) {
  return target.elevation;
}

ShapeBorder? _ModalBottomSheetRoute_shape$<T>(ModalBottomSheetRoute<T> target) {
  return target.shape;
}

Clip? _ModalBottomSheetRoute_clipBehavior$<T>(ModalBottomSheetRoute<T> target) {
  return target.clipBehavior;
}

BoxConstraints? _ModalBottomSheetRoute_constraints$<T>(
    ModalBottomSheetRoute<T> target) {
  return target.constraints;
}

Color? _ModalBottomSheetRoute_modalBarrierColor$<T>(
    ModalBottomSheetRoute<T> target) {
  return target.modalBarrierColor;
}

bool _ModalBottomSheetRoute_isDismissible$<T>(ModalBottomSheetRoute<T> target) {
  return target.isDismissible;
}

bool _ModalBottomSheetRoute_enableDrag$<T>(ModalBottomSheetRoute<T> target) {
  return target.enableDrag;
}

bool? _ModalBottomSheetRoute_showDragHandle$<T>(
    ModalBottomSheetRoute<T> target) {
  return target.showDragHandle;
}

AnimationController? _ModalBottomSheetRoute_transitionAnimationController$<T>(
    ModalBottomSheetRoute<T> target) {
  return target.transitionAnimationController;
}

Offset? _ModalBottomSheetRoute_anchorPoint$<T>(
    ModalBottomSheetRoute<T> target) {
  return target.anchorPoint;
}

bool _ModalBottomSheetRoute_useSafeArea$<T>(ModalBottomSheetRoute<T> target) {
  return target.useSafeArea;
}

String? _ModalBottomSheetRoute_barrierOnTapHint$<T>(
    ModalBottomSheetRoute<T> target) {
  return target.barrierOnTapHint;
}

String? _ModalBottomSheetRoute_barrierLabel$<T>(
    ModalBottomSheetRoute<T> target) {
  return target.barrierLabel;
}

Duration _ModalBottomSheetRoute_transitionDuration$<T>(
    ModalBottomSheetRoute<T> target) {
  return target.transitionDuration;
}

Duration _ModalBottomSheetRoute_reverseTransitionDuration$<T>(
    ModalBottomSheetRoute<T> target) {
  return target.reverseTransitionDuration;
}

bool _ModalBottomSheetRoute_barrierDismissible$<T>(
    ModalBottomSheetRoute<T> target) {
  return target.barrierDismissible;
}

Color _ModalBottomSheetRoute_barrierColor$<T>(ModalBottomSheetRoute<T> target) {
  return target.barrierColor;
}

Function _ModalBottomSheetRoute_createAnimationController$<T>(
  m.Scope scope,
  ModalBottomSheetRoute<T> target,
) =>
    target.createAnimationController;
Function _ModalBottomSheetRoute_buildPage$<T>(
  m.Scope scope,
  ModalBottomSheetRoute<T> target,
) =>
    target.buildPage;
Function _ModalBottomSheetRoute_buildModalBarrier$<T>(
  m.Scope scope,
  ModalBottomSheetRoute<T> target,
) =>
    target.buildModalBarrier;
Function _showModalBottomSheet$(m.Scope scope) => <T>(
      BuildContext context,
      m.FunctionPointer builder, {
      Color? backgroundColor,
      double? elevation,
      ShapeBorder? shape,
      Clip? clipBehavior,
      BoxConstraints? constraints,
      Color? barrierColor,
      bool? isScrollControlled,
      bool? useRootNavigator,
      bool? isDismissible,
      bool? enableDrag,
      bool? showDragHandle,
      bool? useSafeArea,
      RouteSettings? routeSettings,
      AnimationController? transitionAnimationController,
      Offset? anchorPoint,
    }) {
      Widget builderProxy(BuildContext builder_context) =>
          scope.engine.callFunctionPointer(
            scope,
            builder,
            [builder_context],
            {},
          );
      return showModalBottomSheet<T>(
        anchorPoint: anchorPoint,
        backgroundColor: backgroundColor,
        barrierColor: barrierColor,
        builder: builderProxy,
        clipBehavior: clipBehavior,
        constraints: constraints,
        context: context,
        elevation: elevation,
        enableDrag: enableDrag == null ? true : enableDrag,
        isDismissible: isDismissible == null ? true : isDismissible,
        isScrollControlled:
            isScrollControlled == null ? false : isScrollControlled,
        routeSettings: routeSettings,
        shape: shape,
        showDragHandle: showDragHandle,
        transitionAnimationController: transitionAnimationController,
        useRootNavigator: useRootNavigator == null ? false : useRootNavigator,
        useSafeArea: useSafeArea == null ? false : useSafeArea,
      );
    };
Function _showBottomSheet$(m.Scope scope) => <T>(
      BuildContext context,
      m.FunctionPointer builder, {
      Color? backgroundColor,
      double? elevation,
      ShapeBorder? shape,
      Clip? clipBehavior,
      BoxConstraints? constraints,
      bool? enableDrag,
      AnimationController? transitionAnimationController,
    }) {
      Widget builderProxy(BuildContext builder_context) =>
          scope.engine.callFunctionPointer(
            scope,
            builder,
            [builder_context],
            {},
          );
      return showBottomSheet<T>(
        backgroundColor: backgroundColor,
        builder: builderProxy,
        clipBehavior: clipBehavior,
        constraints: constraints,
        context: context,
        elevation: elevation,
        enableDrag: enableDrag,
        shape: shape,
        transitionAnimationController: transitionAnimationController,
      );
    };
