// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/autofill.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/autofill.dart',
  {
    'AutofillGroup.maybeOf': _AutofillGroup_maybeOf$,
    'AutofillGroup.of': _AutofillGroup_of$,
    'AutofillContextAction.commit': _AutofillContextAction_commit$,
    'AutofillContextAction.cancel': _AutofillContextAction_cancel$,
    'AutofillContextAction.values': _AutofillContextAction_values$,
  },
  {},
  {
    'AutofillGroup': m.ClassMirror(
      'AutofillGroup',
      {
        '#as': AutofillGroup_as$,
        '#is': AutofillGroup_is$,
        'child': _AutofillGroup_child$,
        'onDisposeAction': _AutofillGroup_onDisposeAction$,
        'createState': _AutofillGroup_createState$,
      },
      {},
    ),
    'AutofillGroupState': m.ClassMirror(
      'AutofillGroupState',
      {
        '#as': AutofillGroupState_as$,
        '#is': AutofillGroupState_is$,
        'autofillClients': _AutofillGroupState_autofillClients$,
        'getAutofillClient': _AutofillGroupState_getAutofillClient$,
        'register': _AutofillGroupState_register$,
        'unregister': _AutofillGroupState_unregister$,
        'didChangeDependencies': _AutofillGroupState_didChangeDependencies$,
        'build': _AutofillGroupState_build$,
        'dispose': _AutofillGroupState_dispose$,
      },
      {},
    ),
    'AutofillContextAction': m.ClassMirror(
      'AutofillContextAction',
      {},
      {},
    ),
  },
);
Function AutofillGroup_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AutofillGroup;
Function AutofillGroup_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AutofillGroup;
Widget _AutofillGroup_child$(AutofillGroup target) {
  return target.child;
}

AutofillContextAction _AutofillGroup_onDisposeAction$(AutofillGroup target) {
  return target.onDisposeAction;
}

Function _AutofillGroup_maybeOf$(m.Scope scope) => AutofillGroup.maybeOf;
Function _AutofillGroup_of$(m.Scope scope) => AutofillGroup.of;
Function _AutofillGroup_createState$(
  m.Scope scope,
  AutofillGroup target,
) =>
    target.createState;
Function AutofillGroupState_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AutofillGroupState;
Function AutofillGroupState_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AutofillGroupState;
Iterable<AutofillClient> _AutofillGroupState_autofillClients$(
    AutofillGroupState target) {
  return target.autofillClients;
}

Function _AutofillGroupState_getAutofillClient$(
  m.Scope scope,
  AutofillGroupState target,
) =>
    target.getAutofillClient;
Function _AutofillGroupState_register$(
  m.Scope scope,
  AutofillGroupState target,
) =>
    target.register;
Function _AutofillGroupState_unregister$(
  m.Scope scope,
  AutofillGroupState target,
) =>
    target.unregister;
Function _AutofillGroupState_didChangeDependencies$(
  m.Scope scope,
  AutofillGroupState target,
) =>
    target.didChangeDependencies;
Function _AutofillGroupState_build$(
  m.Scope scope,
  AutofillGroupState target,
) =>
    target.build;
Function _AutofillGroupState_dispose$(
  m.Scope scope,
  AutofillGroupState target,
) =>
    target.dispose;
AutofillContextAction _AutofillContextAction_commit$() {
  return AutofillContextAction.commit;
}

AutofillContextAction _AutofillContextAction_cancel$() {
  return AutofillContextAction.cancel;
}

List<AutofillContextAction> _AutofillContextAction_values$() {
  return AutofillContextAction.values;
}
