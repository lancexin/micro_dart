// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/autofill.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/autofill.dart',
  {
    'AutofillGroup.': _AutofillGroup__$,
    'AutofillGroup.maybeOf': _AutofillGroup_maybeOf$,
    'AutofillGroup.of': _AutofillGroup_of$,
    'AutofillGroupState.': _AutofillGroupState__$,
    'AutofillContextAction.commit': _AutofillContextAction_commit$,
    'AutofillContextAction.cancel': _AutofillContextAction_cancel$,
    'AutofillContextAction.values': _AutofillContextAction_values$,
  },
  {},
  {
    'AutofillGroup': m.ClassMirror(
      'AutofillGroup',
      {
        '#as': AutofillGroup_as$,
        '#is': AutofillGroup_is$,
        'child': _AutofillGroup_child$,
        'onDisposeAction': _AutofillGroup_onDisposeAction$,
        'createState': _AutofillGroup_createState$,
      },
      {},
    ),
    'AutofillGroupState': m.ClassMirror(
      'AutofillGroupState',
      {
        '#as': AutofillGroupState_as$,
        '#is': AutofillGroupState_is$,
        'autofillClients': _AutofillGroupState_autofillClients$,
        'getAutofillClient': _AutofillGroupState_getAutofillClient$,
        'register': _AutofillGroupState_register$,
        'unregister': _AutofillGroupState_unregister$,
        'didChangeDependencies': _AutofillGroupState_didChangeDependencies$,
        'build': _AutofillGroupState_build$,
        'dispose': _AutofillGroupState_dispose$,
      },
      {},
    ),
    'AutofillContextAction': m.ClassMirror(
      'AutofillContextAction',
      {},
      {},
    ),
  },
);
Function AutofillGroup_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AutofillGroup;
Function AutofillGroup_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AutofillGroup;
Function _AutofillGroup_child$(
  m.Scope scope$,
  AutofillGroup target$,
) =>
    () {
      return target$.child;
    };
Function _AutofillGroup_onDisposeAction$(
  m.Scope scope$,
  AutofillGroup target$,
) =>
    () {
      return target$.onDisposeAction;
    };
Function _AutofillGroup__$(m.Scope scope$) => ({
      Key? key,
      required Widget child,
      AutofillContextAction? onDisposeAction,
    }) {
      return AutofillGroup(
        child: child,
        key: key,
        onDisposeAction: onDisposeAction ?? AutofillContextAction.commit,
      );
    };
Function _AutofillGroup_maybeOf$(m.Scope scope$) => AutofillGroup.maybeOf;
Function _AutofillGroup_of$(m.Scope scope$) => AutofillGroup.of;
Function _AutofillGroup_createState$(
  m.Scope scope$,
  AutofillGroup target$,
) =>
    target$.createState;
Function AutofillGroupState_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AutofillGroupState;
Function AutofillGroupState_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AutofillGroupState;
Function _AutofillGroupState_autofillClients$(
  m.Scope scope$,
  AutofillGroupState target$,
) =>
    () {
      return target$.autofillClients;
    };
Function _AutofillGroupState__$(m.Scope scope$) => () {
      return AutofillGroupState();
    };
Function _AutofillGroupState_getAutofillClient$(
  m.Scope scope$,
  AutofillGroupState target$,
) =>
    target$.getAutofillClient;
Function _AutofillGroupState_register$(
  m.Scope scope$,
  AutofillGroupState target$,
) =>
    target$.register;
Function _AutofillGroupState_unregister$(
  m.Scope scope$,
  AutofillGroupState target$,
) =>
    target$.unregister;
Function _AutofillGroupState_didChangeDependencies$(
  m.Scope scope$,
  AutofillGroupState target$,
) =>
    target$.didChangeDependencies;
Function _AutofillGroupState_build$(
  m.Scope scope$,
  AutofillGroupState target$,
) =>
    target$.build;
Function _AutofillGroupState_dispose$(
  m.Scope scope$,
  AutofillGroupState target$,
) =>
    target$.dispose;
Function _AutofillContextAction_commit$(m.Scope scope$) =>
    () => AutofillContextAction.commit;
Function _AutofillContextAction_cancel$(m.Scope scope$) =>
    () => AutofillContextAction.cancel;
Function _AutofillContextAction_values$(m.Scope scope$) =>
    () => AutofillContextAction.values;
