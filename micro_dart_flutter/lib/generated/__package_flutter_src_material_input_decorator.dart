// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/input_decorator.dart';
import 'dart:math';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icon_button_theme.dart';
import 'package:flutter/src/material/input_border.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/input_decorator.dart',
  {
    'FloatingLabelAlignment.start': _FloatingLabelAlignment_start$,
    'FloatingLabelAlignment.center': _FloatingLabelAlignment_center$,
    'InputDecorator.': _InputDecorator__$,
    'InputDecorator.containerOf': _InputDecorator_containerOf$,
    'InputDecoration.': _InputDecoration__$,
    'InputDecoration.collapsed': _InputDecoration_collapsed_$,
    'InputDecorationTheme.': _InputDecorationTheme__$,
    'FloatingLabelBehavior.never': _FloatingLabelBehavior_never$,
    'FloatingLabelBehavior.auto': _FloatingLabelBehavior_auto$,
    'FloatingLabelBehavior.always': _FloatingLabelBehavior_always$,
    'FloatingLabelBehavior.values': _FloatingLabelBehavior_values$,
  },
  {},
  {
    'FloatingLabelAlignment': m.ClassMirror(
      'FloatingLabelAlignment',
      {
        '#as': FloatingLabelAlignment_as$,
        '#is': FloatingLabelAlignment_is$,
        'hashCode': _FloatingLabelAlignment_hashCode$,
        '==': _FloatingLabelAlignment_eq$$,
        'toString': _FloatingLabelAlignment_toString$,
      },
      {},
    ),
    'InputDecorator': m.ClassMirror(
      'InputDecorator',
      {
        '#as': InputDecorator_as$,
        '#is': InputDecorator_is$,
        'decoration': _InputDecorator_decoration$,
        'baseStyle': _InputDecorator_baseStyle$,
        'textAlign': _InputDecorator_textAlign$,
        'textAlignVertical': _InputDecorator_textAlignVertical$,
        'isFocused': _InputDecorator_isFocused$,
        'isHovering': _InputDecorator_isHovering$,
        'expands': _InputDecorator_expands$,
        'isEmpty': _InputDecorator_isEmpty$,
        'child': _InputDecorator_child$,
        'createState': _InputDecorator_createState$,
        'debugFillProperties': _InputDecorator_debugFillProperties$,
      },
      {},
    ),
    'InputDecoration': m.ClassMirror(
      'InputDecoration',
      {
        '#as': InputDecoration_as$,
        '#is': InputDecoration_is$,
        'icon': _InputDecoration_icon$,
        'iconColor': _InputDecoration_iconColor$,
        'label': _InputDecoration_label$,
        'labelText': _InputDecoration_labelText$,
        'labelStyle': _InputDecoration_labelStyle$,
        'floatingLabelStyle': _InputDecoration_floatingLabelStyle$,
        'helperText': _InputDecoration_helperText$,
        'helperStyle': _InputDecoration_helperStyle$,
        'helperMaxLines': _InputDecoration_helperMaxLines$,
        'hintText': _InputDecoration_hintText$,
        'hintStyle': _InputDecoration_hintStyle$,
        'hintTextDirection': _InputDecoration_hintTextDirection$,
        'hintMaxLines': _InputDecoration_hintMaxLines$,
        'errorText': _InputDecoration_errorText$,
        'errorStyle': _InputDecoration_errorStyle$,
        'errorMaxLines': _InputDecoration_errorMaxLines$,
        'floatingLabelBehavior': _InputDecoration_floatingLabelBehavior$,
        'floatingLabelAlignment': _InputDecoration_floatingLabelAlignment$,
        'isDense': _InputDecoration_isDense$,
        'contentPadding': _InputDecoration_contentPadding$,
        'isCollapsed': _InputDecoration_isCollapsed$,
        'prefixIcon': _InputDecoration_prefixIcon$,
        'prefixIconConstraints': _InputDecoration_prefixIconConstraints$,
        'prefix': _InputDecoration_prefix$,
        'prefixText': _InputDecoration_prefixText$,
        'prefixStyle': _InputDecoration_prefixStyle$,
        'prefixIconColor': _InputDecoration_prefixIconColor$,
        'suffixIcon': _InputDecoration_suffixIcon$,
        'suffix': _InputDecoration_suffix$,
        'suffixText': _InputDecoration_suffixText$,
        'suffixStyle': _InputDecoration_suffixStyle$,
        'suffixIconColor': _InputDecoration_suffixIconColor$,
        'suffixIconConstraints': _InputDecoration_suffixIconConstraints$,
        'counterText': _InputDecoration_counterText$,
        'counter': _InputDecoration_counter$,
        'counterStyle': _InputDecoration_counterStyle$,
        'filled': _InputDecoration_filled$,
        'fillColor': _InputDecoration_fillColor$,
        'focusColor': _InputDecoration_focusColor$,
        'hoverColor': _InputDecoration_hoverColor$,
        'errorBorder': _InputDecoration_errorBorder$,
        'focusedBorder': _InputDecoration_focusedBorder$,
        'focusedErrorBorder': _InputDecoration_focusedErrorBorder$,
        'disabledBorder': _InputDecoration_disabledBorder$,
        'enabledBorder': _InputDecoration_enabledBorder$,
        'border': _InputDecoration_border$,
        'enabled': _InputDecoration_enabled$,
        'semanticCounterText': _InputDecoration_semanticCounterText$,
        'alignLabelWithHint': _InputDecoration_alignLabelWithHint$,
        'constraints': _InputDecoration_constraints$,
        'hashCode': _InputDecoration_hashCode$,
        'copyWith': _InputDecoration_copyWith$,
        'applyDefaults': _InputDecoration_applyDefaults$,
        '==': _InputDecoration_eq$$,
        'toString': _InputDecoration_toString$,
      },
      {},
    ),
    'InputDecorationTheme': m.ClassMirror(
      'InputDecorationTheme',
      {
        '#as': InputDecorationTheme_as$,
        '#is': InputDecorationTheme_is$,
        'labelStyle': _InputDecorationTheme_labelStyle$,
        'floatingLabelStyle': _InputDecorationTheme_floatingLabelStyle$,
        'helperStyle': _InputDecorationTheme_helperStyle$,
        'helperMaxLines': _InputDecorationTheme_helperMaxLines$,
        'hintStyle': _InputDecorationTheme_hintStyle$,
        'errorStyle': _InputDecorationTheme_errorStyle$,
        'errorMaxLines': _InputDecorationTheme_errorMaxLines$,
        'floatingLabelBehavior': _InputDecorationTheme_floatingLabelBehavior$,
        'floatingLabelAlignment': _InputDecorationTheme_floatingLabelAlignment$,
        'isDense': _InputDecorationTheme_isDense$,
        'contentPadding': _InputDecorationTheme_contentPadding$,
        'isCollapsed': _InputDecorationTheme_isCollapsed$,
        'iconColor': _InputDecorationTheme_iconColor$,
        'prefixStyle': _InputDecorationTheme_prefixStyle$,
        'prefixIconColor': _InputDecorationTheme_prefixIconColor$,
        'suffixStyle': _InputDecorationTheme_suffixStyle$,
        'suffixIconColor': _InputDecorationTheme_suffixIconColor$,
        'counterStyle': _InputDecorationTheme_counterStyle$,
        'filled': _InputDecorationTheme_filled$,
        'fillColor': _InputDecorationTheme_fillColor$,
        'outlineBorder': _InputDecorationTheme_outlineBorder$,
        'activeIndicatorBorder': _InputDecorationTheme_activeIndicatorBorder$,
        'focusColor': _InputDecorationTheme_focusColor$,
        'hoverColor': _InputDecorationTheme_hoverColor$,
        'errorBorder': _InputDecorationTheme_errorBorder$,
        'focusedBorder': _InputDecorationTheme_focusedBorder$,
        'focusedErrorBorder': _InputDecorationTheme_focusedErrorBorder$,
        'disabledBorder': _InputDecorationTheme_disabledBorder$,
        'enabledBorder': _InputDecorationTheme_enabledBorder$,
        'border': _InputDecorationTheme_border$,
        'alignLabelWithHint': _InputDecorationTheme_alignLabelWithHint$,
        'constraints': _InputDecorationTheme_constraints$,
        'hashCode': _InputDecorationTheme_hashCode$,
        'copyWith': _InputDecorationTheme_copyWith$,
        '==': _InputDecorationTheme_eq$$,
        'debugFillProperties': _InputDecorationTheme_debugFillProperties$,
      },
      {},
    ),
    'FloatingLabelBehavior': m.ClassMirror(
      'FloatingLabelBehavior',
      {},
      {},
    ),
  },
);
Function FloatingLabelAlignment_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FloatingLabelAlignment;
Function FloatingLabelAlignment_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FloatingLabelAlignment;
Function _FloatingLabelAlignment_start$(m.Scope scope$) =>
    () => FloatingLabelAlignment.start;
Function _FloatingLabelAlignment_center$(m.Scope scope$) =>
    () => FloatingLabelAlignment.center;
Function _FloatingLabelAlignment_hashCode$(
  m.Scope scope$,
  FloatingLabelAlignment target$,
) =>
    () {
      return target$.hashCode;
    };
Function _FloatingLabelAlignment_eq$$(
  m.Scope scope$,
  FloatingLabelAlignment target$,
) =>
    (Object other$) => target$ == other$;
Function _FloatingLabelAlignment_toString$(
  m.Scope scope$,
  FloatingLabelAlignment target$,
) =>
    target$.toString;
Function InputDecorator_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as InputDecorator;
Function InputDecorator_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is InputDecorator;
Function _InputDecorator_decoration$(
  m.Scope scope$,
  InputDecorator target$,
) =>
    () {
      return target$.decoration;
    };
Function _InputDecorator_baseStyle$(
  m.Scope scope$,
  InputDecorator target$,
) =>
    () {
      return target$.baseStyle;
    };
Function _InputDecorator_textAlign$(
  m.Scope scope$,
  InputDecorator target$,
) =>
    () {
      return target$.textAlign;
    };
Function _InputDecorator_textAlignVertical$(
  m.Scope scope$,
  InputDecorator target$,
) =>
    () {
      return target$.textAlignVertical;
    };
Function _InputDecorator_isFocused$(
  m.Scope scope$,
  InputDecorator target$,
) =>
    () {
      return target$.isFocused;
    };
Function _InputDecorator_isHovering$(
  m.Scope scope$,
  InputDecorator target$,
) =>
    () {
      return target$.isHovering;
    };
Function _InputDecorator_expands$(
  m.Scope scope$,
  InputDecorator target$,
) =>
    () {
      return target$.expands;
    };
Function _InputDecorator_isEmpty$(
  m.Scope scope$,
  InputDecorator target$,
) =>
    () {
      return target$.isEmpty;
    };
Function _InputDecorator_child$(
  m.Scope scope$,
  InputDecorator target$,
) =>
    () {
      return target$.child;
    };
Function _InputDecorator__$(m.Scope scope$) => ({
      Key? key,
      required InputDecoration decoration,
      TextStyle? baseStyle,
      TextAlign? textAlign,
      TextAlignVertical? textAlignVertical,
      bool? isFocused,
      bool? isHovering,
      bool? expands,
      bool? isEmpty,
      Widget? child,
    }) {
      return InputDecorator(
        baseStyle: baseStyle,
        child: child,
        decoration: decoration,
        expands: expands ?? false,
        isEmpty: isEmpty ?? false,
        isFocused: isFocused ?? false,
        isHovering: isHovering ?? false,
        key: key,
        textAlign: textAlign,
        textAlignVertical: textAlignVertical,
      );
    };
Function _InputDecorator_createState$(
  m.Scope scope$,
  InputDecorator target$,
) =>
    target$.createState;
Function _InputDecorator_containerOf$(m.Scope scope$) =>
    InputDecorator.containerOf;
Function _InputDecorator_debugFillProperties$(
  m.Scope scope$,
  InputDecorator target$,
) =>
    target$.debugFillProperties;
Function InputDecoration_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as InputDecoration;
Function InputDecoration_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is InputDecoration;
Function _InputDecoration_icon$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.icon;
    };
Function _InputDecoration_iconColor$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.iconColor;
    };
Function _InputDecoration_label$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.label;
    };
Function _InputDecoration_labelText$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.labelText;
    };
Function _InputDecoration_labelStyle$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.labelStyle;
    };
Function _InputDecoration_floatingLabelStyle$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.floatingLabelStyle;
    };
Function _InputDecoration_helperText$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.helperText;
    };
Function _InputDecoration_helperStyle$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.helperStyle;
    };
Function _InputDecoration_helperMaxLines$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.helperMaxLines;
    };
Function _InputDecoration_hintText$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.hintText;
    };
Function _InputDecoration_hintStyle$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.hintStyle;
    };
Function _InputDecoration_hintTextDirection$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.hintTextDirection;
    };
Function _InputDecoration_hintMaxLines$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.hintMaxLines;
    };
Function _InputDecoration_errorText$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.errorText;
    };
Function _InputDecoration_errorStyle$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.errorStyle;
    };
Function _InputDecoration_errorMaxLines$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.errorMaxLines;
    };
Function _InputDecoration_floatingLabelBehavior$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.floatingLabelBehavior;
    };
Function _InputDecoration_floatingLabelAlignment$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.floatingLabelAlignment;
    };
Function _InputDecoration_isDense$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.isDense;
    };
Function _InputDecoration_contentPadding$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.contentPadding;
    };
Function _InputDecoration_isCollapsed$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.isCollapsed;
    };
Function _InputDecoration_prefixIcon$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.prefixIcon;
    };
Function _InputDecoration_prefixIconConstraints$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.prefixIconConstraints;
    };
Function _InputDecoration_prefix$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.prefix;
    };
Function _InputDecoration_prefixText$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.prefixText;
    };
Function _InputDecoration_prefixStyle$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.prefixStyle;
    };
Function _InputDecoration_prefixIconColor$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.prefixIconColor;
    };
Function _InputDecoration_suffixIcon$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.suffixIcon;
    };
Function _InputDecoration_suffix$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.suffix;
    };
Function _InputDecoration_suffixText$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.suffixText;
    };
Function _InputDecoration_suffixStyle$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.suffixStyle;
    };
Function _InputDecoration_suffixIconColor$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.suffixIconColor;
    };
Function _InputDecoration_suffixIconConstraints$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.suffixIconConstraints;
    };
Function _InputDecoration_counterText$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.counterText;
    };
Function _InputDecoration_counter$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.counter;
    };
Function _InputDecoration_counterStyle$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.counterStyle;
    };
Function _InputDecoration_filled$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.filled;
    };
Function _InputDecoration_fillColor$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.fillColor;
    };
Function _InputDecoration_focusColor$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.focusColor;
    };
Function _InputDecoration_hoverColor$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.hoverColor;
    };
Function _InputDecoration_errorBorder$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.errorBorder;
    };
Function _InputDecoration_focusedBorder$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.focusedBorder;
    };
Function _InputDecoration_focusedErrorBorder$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.focusedErrorBorder;
    };
Function _InputDecoration_disabledBorder$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.disabledBorder;
    };
Function _InputDecoration_enabledBorder$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.enabledBorder;
    };
Function _InputDecoration_border$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.border;
    };
Function _InputDecoration_enabled$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.enabled;
    };
Function _InputDecoration_semanticCounterText$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.semanticCounterText;
    };
Function _InputDecoration_alignLabelWithHint$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.alignLabelWithHint;
    };
Function _InputDecoration_constraints$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.constraints;
    };
Function _InputDecoration_hashCode$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    () {
      return target$.hashCode;
    };
Function _InputDecoration__$(m.Scope scope$) => ({
      Widget? icon,
      Color? iconColor,
      Widget? label,
      String? labelText,
      TextStyle? labelStyle,
      TextStyle? floatingLabelStyle,
      String? helperText,
      TextStyle? helperStyle,
      int? helperMaxLines,
      String? hintText,
      TextStyle? hintStyle,
      TextDirection? hintTextDirection,
      int? hintMaxLines,
      String? errorText,
      TextStyle? errorStyle,
      int? errorMaxLines,
      FloatingLabelBehavior? floatingLabelBehavior,
      FloatingLabelAlignment? floatingLabelAlignment,
      bool? isCollapsed,
      bool? isDense,
      EdgeInsetsGeometry? contentPadding,
      Widget? prefixIcon,
      BoxConstraints? prefixIconConstraints,
      Widget? prefix,
      String? prefixText,
      TextStyle? prefixStyle,
      Color? prefixIconColor,
      Widget? suffixIcon,
      Widget? suffix,
      String? suffixText,
      TextStyle? suffixStyle,
      Color? suffixIconColor,
      BoxConstraints? suffixIconConstraints,
      Widget? counter,
      String? counterText,
      TextStyle? counterStyle,
      bool? filled,
      Color? fillColor,
      Color? focusColor,
      Color? hoverColor,
      InputBorder? errorBorder,
      InputBorder? focusedBorder,
      InputBorder? focusedErrorBorder,
      InputBorder? disabledBorder,
      InputBorder? enabledBorder,
      InputBorder? border,
      bool? enabled,
      String? semanticCounterText,
      bool? alignLabelWithHint,
      BoxConstraints? constraints,
    }) {
      return InputDecoration(
        alignLabelWithHint: alignLabelWithHint,
        border: border,
        constraints: constraints,
        contentPadding: contentPadding,
        counter: counter,
        counterStyle: counterStyle,
        counterText: counterText,
        disabledBorder: disabledBorder,
        enabled: enabled ?? true,
        enabledBorder: enabledBorder,
        errorBorder: errorBorder,
        errorMaxLines: errorMaxLines,
        errorStyle: errorStyle,
        errorText: errorText,
        fillColor: fillColor,
        filled: filled,
        floatingLabelAlignment: floatingLabelAlignment,
        floatingLabelBehavior: floatingLabelBehavior,
        floatingLabelStyle: floatingLabelStyle,
        focusColor: focusColor,
        focusedBorder: focusedBorder,
        focusedErrorBorder: focusedErrorBorder,
        helperMaxLines: helperMaxLines,
        helperStyle: helperStyle,
        helperText: helperText,
        hintMaxLines: hintMaxLines,
        hintStyle: hintStyle,
        hintText: hintText,
        hintTextDirection: hintTextDirection,
        hoverColor: hoverColor,
        icon: icon,
        iconColor: iconColor,
        isCollapsed: isCollapsed ?? false,
        isDense: isDense,
        label: label,
        labelStyle: labelStyle,
        labelText: labelText,
        prefix: prefix,
        prefixIcon: prefixIcon,
        prefixIconColor: prefixIconColor,
        prefixIconConstraints: prefixIconConstraints,
        prefixStyle: prefixStyle,
        prefixText: prefixText,
        semanticCounterText: semanticCounterText,
        suffix: suffix,
        suffixIcon: suffixIcon,
        suffixIconColor: suffixIconColor,
        suffixIconConstraints: suffixIconConstraints,
        suffixStyle: suffixStyle,
        suffixText: suffixText,
      );
    };
Function _InputDecoration_collapsed_$(m.Scope scope$) =>
    InputDecoration.collapsed;
Function _InputDecoration_copyWith$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    target$.copyWith;
Function _InputDecoration_applyDefaults$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    target$.applyDefaults;
Function _InputDecoration_eq$$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    (Object other$) => target$ == other$;
Function _InputDecoration_toString$(
  m.Scope scope$,
  InputDecoration target$,
) =>
    target$.toString;
Function InputDecorationTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as InputDecorationTheme;
Function InputDecorationTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is InputDecorationTheme;
Function _InputDecorationTheme_labelStyle$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.labelStyle;
    };
Function _InputDecorationTheme_floatingLabelStyle$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.floatingLabelStyle;
    };
Function _InputDecorationTheme_helperStyle$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.helperStyle;
    };
Function _InputDecorationTheme_helperMaxLines$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.helperMaxLines;
    };
Function _InputDecorationTheme_hintStyle$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.hintStyle;
    };
Function _InputDecorationTheme_errorStyle$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.errorStyle;
    };
Function _InputDecorationTheme_errorMaxLines$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.errorMaxLines;
    };
Function _InputDecorationTheme_floatingLabelBehavior$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.floatingLabelBehavior;
    };
Function _InputDecorationTheme_floatingLabelAlignment$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.floatingLabelAlignment;
    };
Function _InputDecorationTheme_isDense$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.isDense;
    };
Function _InputDecorationTheme_contentPadding$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.contentPadding;
    };
Function _InputDecorationTheme_isCollapsed$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.isCollapsed;
    };
Function _InputDecorationTheme_iconColor$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.iconColor;
    };
Function _InputDecorationTheme_prefixStyle$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.prefixStyle;
    };
Function _InputDecorationTheme_prefixIconColor$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.prefixIconColor;
    };
Function _InputDecorationTheme_suffixStyle$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.suffixStyle;
    };
Function _InputDecorationTheme_suffixIconColor$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.suffixIconColor;
    };
Function _InputDecorationTheme_counterStyle$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.counterStyle;
    };
Function _InputDecorationTheme_filled$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.filled;
    };
Function _InputDecorationTheme_fillColor$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.fillColor;
    };
Function _InputDecorationTheme_outlineBorder$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.outlineBorder;
    };
Function _InputDecorationTheme_activeIndicatorBorder$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.activeIndicatorBorder;
    };
Function _InputDecorationTheme_focusColor$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.focusColor;
    };
Function _InputDecorationTheme_hoverColor$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.hoverColor;
    };
Function _InputDecorationTheme_errorBorder$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.errorBorder;
    };
Function _InputDecorationTheme_focusedBorder$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.focusedBorder;
    };
Function _InputDecorationTheme_focusedErrorBorder$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.focusedErrorBorder;
    };
Function _InputDecorationTheme_disabledBorder$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.disabledBorder;
    };
Function _InputDecorationTheme_enabledBorder$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.enabledBorder;
    };
Function _InputDecorationTheme_border$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.border;
    };
Function _InputDecorationTheme_alignLabelWithHint$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.alignLabelWithHint;
    };
Function _InputDecorationTheme_constraints$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.constraints;
    };
Function _InputDecorationTheme_hashCode$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    () {
      return target$.hashCode;
    };
Function _InputDecorationTheme__$(m.Scope scope$) => ({
      TextStyle? labelStyle,
      TextStyle? floatingLabelStyle,
      TextStyle? helperStyle,
      int? helperMaxLines,
      TextStyle? hintStyle,
      TextStyle? errorStyle,
      int? errorMaxLines,
      FloatingLabelBehavior? floatingLabelBehavior,
      FloatingLabelAlignment? floatingLabelAlignment,
      bool? isDense,
      EdgeInsetsGeometry? contentPadding,
      bool? isCollapsed,
      Color? iconColor,
      TextStyle? prefixStyle,
      Color? prefixIconColor,
      TextStyle? suffixStyle,
      Color? suffixIconColor,
      TextStyle? counterStyle,
      bool? filled,
      Color? fillColor,
      BorderSide? activeIndicatorBorder,
      BorderSide? outlineBorder,
      Color? focusColor,
      Color? hoverColor,
      InputBorder? errorBorder,
      InputBorder? focusedBorder,
      InputBorder? focusedErrorBorder,
      InputBorder? disabledBorder,
      InputBorder? enabledBorder,
      InputBorder? border,
      bool? alignLabelWithHint,
      BoxConstraints? constraints,
    }) {
      return InputDecorationTheme(
        activeIndicatorBorder: activeIndicatorBorder,
        alignLabelWithHint: alignLabelWithHint ?? false,
        border: border,
        constraints: constraints,
        contentPadding: contentPadding,
        counterStyle: counterStyle,
        disabledBorder: disabledBorder,
        enabledBorder: enabledBorder,
        errorBorder: errorBorder,
        errorMaxLines: errorMaxLines,
        errorStyle: errorStyle,
        fillColor: fillColor,
        filled: filled ?? false,
        floatingLabelAlignment:
            floatingLabelAlignment ?? FloatingLabelAlignment.start,
        floatingLabelBehavior:
            floatingLabelBehavior ?? FloatingLabelBehavior.auto,
        floatingLabelStyle: floatingLabelStyle,
        focusColor: focusColor,
        focusedBorder: focusedBorder,
        focusedErrorBorder: focusedErrorBorder,
        helperMaxLines: helperMaxLines,
        helperStyle: helperStyle,
        hintStyle: hintStyle,
        hoverColor: hoverColor,
        iconColor: iconColor,
        isCollapsed: isCollapsed ?? false,
        isDense: isDense ?? false,
        labelStyle: labelStyle,
        outlineBorder: outlineBorder,
        prefixIconColor: prefixIconColor,
        prefixStyle: prefixStyle,
        suffixIconColor: suffixIconColor,
        suffixStyle: suffixStyle,
      );
    };
Function _InputDecorationTheme_copyWith$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    target$.copyWith;
Function _InputDecorationTheme_eq$$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    (Object other$) => target$ == other$;
Function _InputDecorationTheme_debugFillProperties$(
  m.Scope scope$,
  InputDecorationTheme target$,
) =>
    target$.debugFillProperties;
Function _FloatingLabelBehavior_never$(m.Scope scope$) =>
    () => FloatingLabelBehavior.never;
Function _FloatingLabelBehavior_auto$(m.Scope scope$) =>
    () => FloatingLabelBehavior.auto;
Function _FloatingLabelBehavior_always$(m.Scope scope$) =>
    () => FloatingLabelBehavior.always;
Function _FloatingLabelBehavior_values$(m.Scope scope$) =>
    () => FloatingLabelBehavior.values;
