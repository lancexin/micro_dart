// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/input_decorator.dart';
import 'dart:math';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icon_button_theme.dart';
import 'package:flutter/src/material/input_border.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/input_decorator.dart',
  {
    'FloatingLabelAlignment.start': _FloatingLabelAlignment_start$,
    'FloatingLabelAlignment.center': _FloatingLabelAlignment_center$,
    'InputDecorator.containerOf': _InputDecorator_containerOf$,
    'FloatingLabelBehavior.never': _FloatingLabelBehavior_never$,
    'FloatingLabelBehavior.auto': _FloatingLabelBehavior_auto$,
    'FloatingLabelBehavior.always': _FloatingLabelBehavior_always$,
    'FloatingLabelBehavior.values': _FloatingLabelBehavior_values$,
  },
  {},
  {
    'FloatingLabelAlignment': m.ClassMirror(
      'FloatingLabelAlignment',
      {
        '#as': FloatingLabelAlignment_as$,
        '#is': FloatingLabelAlignment_is$,
        'hashCode': _FloatingLabelAlignment_hashCode$,
        '==': _FloatingLabelAlignment_eq$$,
        'toString': _FloatingLabelAlignment_toString$,
      },
      {},
    ),
    'InputDecorator': m.ClassMirror(
      'InputDecorator',
      {
        '#as': InputDecorator_as$,
        '#is': InputDecorator_is$,
        'decoration': _InputDecorator_decoration$,
        'baseStyle': _InputDecorator_baseStyle$,
        'textAlign': _InputDecorator_textAlign$,
        'textAlignVertical': _InputDecorator_textAlignVertical$,
        'isFocused': _InputDecorator_isFocused$,
        'isHovering': _InputDecorator_isHovering$,
        'expands': _InputDecorator_expands$,
        'isEmpty': _InputDecorator_isEmpty$,
        'child': _InputDecorator_child$,
        'createState': _InputDecorator_createState$,
        'debugFillProperties': _InputDecorator_debugFillProperties$,
      },
      {},
    ),
    'InputDecoration': m.ClassMirror(
      'InputDecoration',
      {
        '#as': InputDecoration_as$,
        '#is': InputDecoration_is$,
        'icon': _InputDecoration_icon$,
        'iconColor': _InputDecoration_iconColor$,
        'label': _InputDecoration_label$,
        'labelText': _InputDecoration_labelText$,
        'labelStyle': _InputDecoration_labelStyle$,
        'floatingLabelStyle': _InputDecoration_floatingLabelStyle$,
        'helperText': _InputDecoration_helperText$,
        'helperStyle': _InputDecoration_helperStyle$,
        'helperMaxLines': _InputDecoration_helperMaxLines$,
        'hintText': _InputDecoration_hintText$,
        'hintStyle': _InputDecoration_hintStyle$,
        'hintTextDirection': _InputDecoration_hintTextDirection$,
        'hintMaxLines': _InputDecoration_hintMaxLines$,
        'errorText': _InputDecoration_errorText$,
        'errorStyle': _InputDecoration_errorStyle$,
        'errorMaxLines': _InputDecoration_errorMaxLines$,
        'floatingLabelBehavior': _InputDecoration_floatingLabelBehavior$,
        'floatingLabelAlignment': _InputDecoration_floatingLabelAlignment$,
        'isDense': _InputDecoration_isDense$,
        'contentPadding': _InputDecoration_contentPadding$,
        'isCollapsed': _InputDecoration_isCollapsed$,
        'prefixIcon': _InputDecoration_prefixIcon$,
        'prefixIconConstraints': _InputDecoration_prefixIconConstraints$,
        'prefix': _InputDecoration_prefix$,
        'prefixText': _InputDecoration_prefixText$,
        'prefixStyle': _InputDecoration_prefixStyle$,
        'prefixIconColor': _InputDecoration_prefixIconColor$,
        'suffixIcon': _InputDecoration_suffixIcon$,
        'suffix': _InputDecoration_suffix$,
        'suffixText': _InputDecoration_suffixText$,
        'suffixStyle': _InputDecoration_suffixStyle$,
        'suffixIconColor': _InputDecoration_suffixIconColor$,
        'suffixIconConstraints': _InputDecoration_suffixIconConstraints$,
        'counterText': _InputDecoration_counterText$,
        'counter': _InputDecoration_counter$,
        'counterStyle': _InputDecoration_counterStyle$,
        'filled': _InputDecoration_filled$,
        'fillColor': _InputDecoration_fillColor$,
        'focusColor': _InputDecoration_focusColor$,
        'hoverColor': _InputDecoration_hoverColor$,
        'errorBorder': _InputDecoration_errorBorder$,
        'focusedBorder': _InputDecoration_focusedBorder$,
        'focusedErrorBorder': _InputDecoration_focusedErrorBorder$,
        'disabledBorder': _InputDecoration_disabledBorder$,
        'enabledBorder': _InputDecoration_enabledBorder$,
        'border': _InputDecoration_border$,
        'enabled': _InputDecoration_enabled$,
        'semanticCounterText': _InputDecoration_semanticCounterText$,
        'alignLabelWithHint': _InputDecoration_alignLabelWithHint$,
        'constraints': _InputDecoration_constraints$,
        'hashCode': _InputDecoration_hashCode$,
        'copyWith': _InputDecoration_copyWith$,
        'applyDefaults': _InputDecoration_applyDefaults$,
        '==': _InputDecoration_eq$$,
        'toString': _InputDecoration_toString$,
      },
      {},
    ),
    'InputDecorationTheme': m.ClassMirror(
      'InputDecorationTheme',
      {
        '#as': InputDecorationTheme_as$,
        '#is': InputDecorationTheme_is$,
        'labelStyle': _InputDecorationTheme_labelStyle$,
        'floatingLabelStyle': _InputDecorationTheme_floatingLabelStyle$,
        'helperStyle': _InputDecorationTheme_helperStyle$,
        'helperMaxLines': _InputDecorationTheme_helperMaxLines$,
        'hintStyle': _InputDecorationTheme_hintStyle$,
        'errorStyle': _InputDecorationTheme_errorStyle$,
        'errorMaxLines': _InputDecorationTheme_errorMaxLines$,
        'floatingLabelBehavior': _InputDecorationTheme_floatingLabelBehavior$,
        'floatingLabelAlignment': _InputDecorationTheme_floatingLabelAlignment$,
        'isDense': _InputDecorationTheme_isDense$,
        'contentPadding': _InputDecorationTheme_contentPadding$,
        'isCollapsed': _InputDecorationTheme_isCollapsed$,
        'iconColor': _InputDecorationTheme_iconColor$,
        'prefixStyle': _InputDecorationTheme_prefixStyle$,
        'prefixIconColor': _InputDecorationTheme_prefixIconColor$,
        'suffixStyle': _InputDecorationTheme_suffixStyle$,
        'suffixIconColor': _InputDecorationTheme_suffixIconColor$,
        'counterStyle': _InputDecorationTheme_counterStyle$,
        'filled': _InputDecorationTheme_filled$,
        'fillColor': _InputDecorationTheme_fillColor$,
        'outlineBorder': _InputDecorationTheme_outlineBorder$,
        'activeIndicatorBorder': _InputDecorationTheme_activeIndicatorBorder$,
        'focusColor': _InputDecorationTheme_focusColor$,
        'hoverColor': _InputDecorationTheme_hoverColor$,
        'errorBorder': _InputDecorationTheme_errorBorder$,
        'focusedBorder': _InputDecorationTheme_focusedBorder$,
        'focusedErrorBorder': _InputDecorationTheme_focusedErrorBorder$,
        'disabledBorder': _InputDecorationTheme_disabledBorder$,
        'enabledBorder': _InputDecorationTheme_enabledBorder$,
        'border': _InputDecorationTheme_border$,
        'alignLabelWithHint': _InputDecorationTheme_alignLabelWithHint$,
        'constraints': _InputDecorationTheme_constraints$,
        'hashCode': _InputDecorationTheme_hashCode$,
        'copyWith': _InputDecorationTheme_copyWith$,
        '==': _InputDecorationTheme_eq$$,
        'debugFillProperties': _InputDecorationTheme_debugFillProperties$,
      },
      {},
    ),
    'FloatingLabelBehavior': m.ClassMirror(
      'FloatingLabelBehavior',
      {},
      {},
    ),
  },
);
Function FloatingLabelAlignment_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as FloatingLabelAlignment;
Function FloatingLabelAlignment_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is FloatingLabelAlignment;
FloatingLabelAlignment _FloatingLabelAlignment_start$() {
  return FloatingLabelAlignment.start;
}

FloatingLabelAlignment _FloatingLabelAlignment_center$() {
  return FloatingLabelAlignment.center;
}

int _FloatingLabelAlignment_hashCode$(FloatingLabelAlignment target) {
  return target.hashCode;
}

Function _FloatingLabelAlignment_eq$$(
  m.Scope scope,
  FloatingLabelAlignment target,
) =>
    (Object other) => target == other;
Function _FloatingLabelAlignment_toString$(
  m.Scope scope,
  FloatingLabelAlignment target,
) =>
    target.toString;
Function InputDecorator_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as InputDecorator;
Function InputDecorator_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is InputDecorator;
InputDecoration _InputDecorator_decoration$(InputDecorator target) {
  return target.decoration;
}

TextStyle? _InputDecorator_baseStyle$(InputDecorator target) {
  return target.baseStyle;
}

TextAlign? _InputDecorator_textAlign$(InputDecorator target) {
  return target.textAlign;
}

TextAlignVertical? _InputDecorator_textAlignVertical$(InputDecorator target) {
  return target.textAlignVertical;
}

bool _InputDecorator_isFocused$(InputDecorator target) {
  return target.isFocused;
}

bool _InputDecorator_isHovering$(InputDecorator target) {
  return target.isHovering;
}

bool _InputDecorator_expands$(InputDecorator target) {
  return target.expands;
}

bool _InputDecorator_isEmpty$(InputDecorator target) {
  return target.isEmpty;
}

Widget? _InputDecorator_child$(InputDecorator target) {
  return target.child;
}

Function _InputDecorator_createState$(
  m.Scope scope,
  InputDecorator target,
) =>
    target.createState;
Function _InputDecorator_containerOf$(m.Scope scope) =>
    InputDecorator.containerOf;
Function _InputDecorator_debugFillProperties$(
  m.Scope scope,
  InputDecorator target,
) =>
    target.debugFillProperties;
Function InputDecoration_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as InputDecoration;
Function InputDecoration_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is InputDecoration;
Widget? _InputDecoration_icon$(InputDecoration target) {
  return target.icon;
}

Color? _InputDecoration_iconColor$(InputDecoration target) {
  return target.iconColor;
}

Widget? _InputDecoration_label$(InputDecoration target) {
  return target.label;
}

String? _InputDecoration_labelText$(InputDecoration target) {
  return target.labelText;
}

TextStyle? _InputDecoration_labelStyle$(InputDecoration target) {
  return target.labelStyle;
}

TextStyle? _InputDecoration_floatingLabelStyle$(InputDecoration target) {
  return target.floatingLabelStyle;
}

String? _InputDecoration_helperText$(InputDecoration target) {
  return target.helperText;
}

TextStyle? _InputDecoration_helperStyle$(InputDecoration target) {
  return target.helperStyle;
}

int? _InputDecoration_helperMaxLines$(InputDecoration target) {
  return target.helperMaxLines;
}

String? _InputDecoration_hintText$(InputDecoration target) {
  return target.hintText;
}

TextStyle? _InputDecoration_hintStyle$(InputDecoration target) {
  return target.hintStyle;
}

TextDirection? _InputDecoration_hintTextDirection$(InputDecoration target) {
  return target.hintTextDirection;
}

int? _InputDecoration_hintMaxLines$(InputDecoration target) {
  return target.hintMaxLines;
}

String? _InputDecoration_errorText$(InputDecoration target) {
  return target.errorText;
}

TextStyle? _InputDecoration_errorStyle$(InputDecoration target) {
  return target.errorStyle;
}

int? _InputDecoration_errorMaxLines$(InputDecoration target) {
  return target.errorMaxLines;
}

FloatingLabelBehavior? _InputDecoration_floatingLabelBehavior$(
    InputDecoration target) {
  return target.floatingLabelBehavior;
}

FloatingLabelAlignment? _InputDecoration_floatingLabelAlignment$(
    InputDecoration target) {
  return target.floatingLabelAlignment;
}

bool? _InputDecoration_isDense$(InputDecoration target) {
  return target.isDense;
}

EdgeInsetsGeometry? _InputDecoration_contentPadding$(InputDecoration target) {
  return target.contentPadding;
}

bool _InputDecoration_isCollapsed$(InputDecoration target) {
  return target.isCollapsed;
}

Widget? _InputDecoration_prefixIcon$(InputDecoration target) {
  return target.prefixIcon;
}

BoxConstraints? _InputDecoration_prefixIconConstraints$(
    InputDecoration target) {
  return target.prefixIconConstraints;
}

Widget? _InputDecoration_prefix$(InputDecoration target) {
  return target.prefix;
}

String? _InputDecoration_prefixText$(InputDecoration target) {
  return target.prefixText;
}

TextStyle? _InputDecoration_prefixStyle$(InputDecoration target) {
  return target.prefixStyle;
}

Color? _InputDecoration_prefixIconColor$(InputDecoration target) {
  return target.prefixIconColor;
}

Widget? _InputDecoration_suffixIcon$(InputDecoration target) {
  return target.suffixIcon;
}

Widget? _InputDecoration_suffix$(InputDecoration target) {
  return target.suffix;
}

String? _InputDecoration_suffixText$(InputDecoration target) {
  return target.suffixText;
}

TextStyle? _InputDecoration_suffixStyle$(InputDecoration target) {
  return target.suffixStyle;
}

Color? _InputDecoration_suffixIconColor$(InputDecoration target) {
  return target.suffixIconColor;
}

BoxConstraints? _InputDecoration_suffixIconConstraints$(
    InputDecoration target) {
  return target.suffixIconConstraints;
}

String? _InputDecoration_counterText$(InputDecoration target) {
  return target.counterText;
}

Widget? _InputDecoration_counter$(InputDecoration target) {
  return target.counter;
}

TextStyle? _InputDecoration_counterStyle$(InputDecoration target) {
  return target.counterStyle;
}

bool? _InputDecoration_filled$(InputDecoration target) {
  return target.filled;
}

Color? _InputDecoration_fillColor$(InputDecoration target) {
  return target.fillColor;
}

Color? _InputDecoration_focusColor$(InputDecoration target) {
  return target.focusColor;
}

Color? _InputDecoration_hoverColor$(InputDecoration target) {
  return target.hoverColor;
}

InputBorder? _InputDecoration_errorBorder$(InputDecoration target) {
  return target.errorBorder;
}

InputBorder? _InputDecoration_focusedBorder$(InputDecoration target) {
  return target.focusedBorder;
}

InputBorder? _InputDecoration_focusedErrorBorder$(InputDecoration target) {
  return target.focusedErrorBorder;
}

InputBorder? _InputDecoration_disabledBorder$(InputDecoration target) {
  return target.disabledBorder;
}

InputBorder? _InputDecoration_enabledBorder$(InputDecoration target) {
  return target.enabledBorder;
}

InputBorder? _InputDecoration_border$(InputDecoration target) {
  return target.border;
}

bool _InputDecoration_enabled$(InputDecoration target) {
  return target.enabled;
}

String? _InputDecoration_semanticCounterText$(InputDecoration target) {
  return target.semanticCounterText;
}

bool? _InputDecoration_alignLabelWithHint$(InputDecoration target) {
  return target.alignLabelWithHint;
}

BoxConstraints? _InputDecoration_constraints$(InputDecoration target) {
  return target.constraints;
}

int _InputDecoration_hashCode$(InputDecoration target) {
  return target.hashCode;
}

Function _InputDecoration_copyWith$(
  m.Scope scope,
  InputDecoration target,
) =>
    target.copyWith;
Function _InputDecoration_applyDefaults$(
  m.Scope scope,
  InputDecoration target,
) =>
    target.applyDefaults;
Function _InputDecoration_eq$$(
  m.Scope scope,
  InputDecoration target,
) =>
    (Object other) => target == other;
Function _InputDecoration_toString$(
  m.Scope scope,
  InputDecoration target,
) =>
    target.toString;
Function InputDecorationTheme_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as InputDecorationTheme;
Function InputDecorationTheme_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is InputDecorationTheme;
TextStyle? _InputDecorationTheme_labelStyle$(InputDecorationTheme target) {
  return target.labelStyle;
}

TextStyle? _InputDecorationTheme_floatingLabelStyle$(
    InputDecorationTheme target) {
  return target.floatingLabelStyle;
}

TextStyle? _InputDecorationTheme_helperStyle$(InputDecorationTheme target) {
  return target.helperStyle;
}

int? _InputDecorationTheme_helperMaxLines$(InputDecorationTheme target) {
  return target.helperMaxLines;
}

TextStyle? _InputDecorationTheme_hintStyle$(InputDecorationTheme target) {
  return target.hintStyle;
}

TextStyle? _InputDecorationTheme_errorStyle$(InputDecorationTheme target) {
  return target.errorStyle;
}

int? _InputDecorationTheme_errorMaxLines$(InputDecorationTheme target) {
  return target.errorMaxLines;
}

FloatingLabelBehavior _InputDecorationTheme_floatingLabelBehavior$(
    InputDecorationTheme target) {
  return target.floatingLabelBehavior;
}

FloatingLabelAlignment _InputDecorationTheme_floatingLabelAlignment$(
    InputDecorationTheme target) {
  return target.floatingLabelAlignment;
}

bool _InputDecorationTheme_isDense$(InputDecorationTheme target) {
  return target.isDense;
}

EdgeInsetsGeometry? _InputDecorationTheme_contentPadding$(
    InputDecorationTheme target) {
  return target.contentPadding;
}

bool _InputDecorationTheme_isCollapsed$(InputDecorationTheme target) {
  return target.isCollapsed;
}

Color? _InputDecorationTheme_iconColor$(InputDecorationTheme target) {
  return target.iconColor;
}

TextStyle? _InputDecorationTheme_prefixStyle$(InputDecorationTheme target) {
  return target.prefixStyle;
}

Color? _InputDecorationTheme_prefixIconColor$(InputDecorationTheme target) {
  return target.prefixIconColor;
}

TextStyle? _InputDecorationTheme_suffixStyle$(InputDecorationTheme target) {
  return target.suffixStyle;
}

Color? _InputDecorationTheme_suffixIconColor$(InputDecorationTheme target) {
  return target.suffixIconColor;
}

TextStyle? _InputDecorationTheme_counterStyle$(InputDecorationTheme target) {
  return target.counterStyle;
}

bool _InputDecorationTheme_filled$(InputDecorationTheme target) {
  return target.filled;
}

Color? _InputDecorationTheme_fillColor$(InputDecorationTheme target) {
  return target.fillColor;
}

BorderSide? _InputDecorationTheme_outlineBorder$(InputDecorationTheme target) {
  return target.outlineBorder;
}

BorderSide? _InputDecorationTheme_activeIndicatorBorder$(
    InputDecorationTheme target) {
  return target.activeIndicatorBorder;
}

Color? _InputDecorationTheme_focusColor$(InputDecorationTheme target) {
  return target.focusColor;
}

Color? _InputDecorationTheme_hoverColor$(InputDecorationTheme target) {
  return target.hoverColor;
}

InputBorder? _InputDecorationTheme_errorBorder$(InputDecorationTheme target) {
  return target.errorBorder;
}

InputBorder? _InputDecorationTheme_focusedBorder$(InputDecorationTheme target) {
  return target.focusedBorder;
}

InputBorder? _InputDecorationTheme_focusedErrorBorder$(
    InputDecorationTheme target) {
  return target.focusedErrorBorder;
}

InputBorder? _InputDecorationTheme_disabledBorder$(
    InputDecorationTheme target) {
  return target.disabledBorder;
}

InputBorder? _InputDecorationTheme_enabledBorder$(InputDecorationTheme target) {
  return target.enabledBorder;
}

InputBorder? _InputDecorationTheme_border$(InputDecorationTheme target) {
  return target.border;
}

bool _InputDecorationTheme_alignLabelWithHint$(InputDecorationTheme target) {
  return target.alignLabelWithHint;
}

BoxConstraints? _InputDecorationTheme_constraints$(
    InputDecorationTheme target) {
  return target.constraints;
}

int _InputDecorationTheme_hashCode$(InputDecorationTheme target) {
  return target.hashCode;
}

Function _InputDecorationTheme_copyWith$(
  m.Scope scope,
  InputDecorationTheme target,
) =>
    target.copyWith;
Function _InputDecorationTheme_eq$$(
  m.Scope scope,
  InputDecorationTheme target,
) =>
    (Object other) => target == other;
Function _InputDecorationTheme_debugFillProperties$(
  m.Scope scope,
  InputDecorationTheme target,
) =>
    target.debugFillProperties;
FloatingLabelBehavior _FloatingLabelBehavior_never$() {
  return FloatingLabelBehavior.never;
}

FloatingLabelBehavior _FloatingLabelBehavior_auto$() {
  return FloatingLabelBehavior.auto;
}

FloatingLabelBehavior _FloatingLabelBehavior_always$() {
  return FloatingLabelBehavior.always;
}

List<FloatingLabelBehavior> _FloatingLabelBehavior_values$() {
  return FloatingLabelBehavior.values;
}
