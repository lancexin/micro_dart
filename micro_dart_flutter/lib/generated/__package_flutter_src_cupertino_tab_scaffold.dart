// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/tab_scaffold.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/bottom_tab_bar.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/tab_scaffold.dart',
  {
    'CupertinoTabController.': _CupertinoTabController__$,
    'CupertinoTabScaffold.': _CupertinoTabScaffold__$,
    'RestorableCupertinoTabController.': _RestorableCupertinoTabController__$,
  },
  {},
  {
    'CupertinoTabController': m.ClassMirror(
      'CupertinoTabController',
      {
        '#as': CupertinoTabController_as$,
        '#is': CupertinoTabController_is$,
        'index': _CupertinoTabController_index$,
        'dispose': _CupertinoTabController_dispose$,
      },
      {'index': _CupertinoTabController_index_set$},
    ),
    'CupertinoTabScaffold': m.ClassMirror(
      'CupertinoTabScaffold',
      {
        '#as': CupertinoTabScaffold_as$,
        '#is': CupertinoTabScaffold_is$,
        'tabBar': _CupertinoTabScaffold_tabBar$,
        'controller': _CupertinoTabScaffold_controller$,
        'tabBuilder': _CupertinoTabScaffold_tabBuilder$,
        'backgroundColor': _CupertinoTabScaffold_backgroundColor$,
        'resizeToAvoidBottomInset':
            _CupertinoTabScaffold_resizeToAvoidBottomInset$,
        'restorationId': _CupertinoTabScaffold_restorationId$,
        'createState': _CupertinoTabScaffold_createState$,
      },
      {},
    ),
    'RestorableCupertinoTabController': m.ClassMirror(
      'RestorableCupertinoTabController',
      {
        '#as': RestorableCupertinoTabController_as$,
        '#is': RestorableCupertinoTabController_is$,
        'createDefaultValue':
            _RestorableCupertinoTabController_createDefaultValue$,
        'fromPrimitives': _RestorableCupertinoTabController_fromPrimitives$,
        'toPrimitives': _RestorableCupertinoTabController_toPrimitives$,
      },
      {},
    ),
  },
);
Function CupertinoTabController_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoTabController;
Function CupertinoTabController_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoTabController;
Function _CupertinoTabController_index$(
  m.Scope scope$,
  CupertinoTabController target$,
) =>
    () {
      return target$.index;
    };
void _CupertinoTabController_index_set$(
  m.Scope scope$,
  CupertinoTabController target$,
) =>
    (dynamic other$) {
      target$.index = other$;
    };
Function _CupertinoTabController__$(m.Scope scope$) => ({int? initialIndex}) {
      return CupertinoTabController(initialIndex: initialIndex ?? 0);
    };
Function _CupertinoTabController_dispose$(
  m.Scope scope$,
  CupertinoTabController target$,
) =>
    target$.dispose;
Function CupertinoTabScaffold_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoTabScaffold;
Function CupertinoTabScaffold_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoTabScaffold;
Function _CupertinoTabScaffold_tabBar$(
  m.Scope scope$,
  CupertinoTabScaffold target$,
) =>
    () {
      return target$.tabBar;
    };
Function _CupertinoTabScaffold_controller$(
  m.Scope scope$,
  CupertinoTabScaffold target$,
) =>
    () {
      return target$.controller;
    };
Function _CupertinoTabScaffold_tabBuilder$(
  m.Scope scope$,
  CupertinoTabScaffold target$,
) =>
    () {
      return target$.tabBuilder;
    };
Function _CupertinoTabScaffold_backgroundColor$(
  m.Scope scope$,
  CupertinoTabScaffold target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _CupertinoTabScaffold_resizeToAvoidBottomInset$(
  m.Scope scope$,
  CupertinoTabScaffold target$,
) =>
    () {
      return target$.resizeToAvoidBottomInset;
    };
Function _CupertinoTabScaffold_restorationId$(
  m.Scope scope$,
  CupertinoTabScaffold target$,
) =>
    () {
      return target$.restorationId;
    };
Function _CupertinoTabScaffold__$(m.Scope scope$) => ({
      Key? key,
      required CupertinoTabBar tabBar,
      required m.FunctionPointer tabBuilder,
      CupertinoTabController? controller,
      Color? backgroundColor,
      bool? resizeToAvoidBottomInset,
      String? restorationId,
    }) {
      Widget tabBuilderProxy(
        BuildContext tabBuilder_context$,
        int tabBuilder_index$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            tabBuilder,
            [
              tabBuilder_context$,
              tabBuilder_index$,
            ],
            {},
          );
      return CupertinoTabScaffold(
        backgroundColor: backgroundColor,
        controller: controller,
        key: key,
        resizeToAvoidBottomInset: resizeToAvoidBottomInset ?? true,
        restorationId: restorationId,
        tabBar: tabBar,
        tabBuilder: tabBuilderProxy,
      );
    };
Function _CupertinoTabScaffold_createState$(
  m.Scope scope$,
  CupertinoTabScaffold target$,
) =>
    target$.createState;
Function RestorableCupertinoTabController_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RestorableCupertinoTabController;
Function RestorableCupertinoTabController_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RestorableCupertinoTabController;
Function _RestorableCupertinoTabController__$(m.Scope scope$) =>
    ({int? initialIndex}) {
      return RestorableCupertinoTabController(initialIndex: initialIndex ?? 0);
    };
Function _RestorableCupertinoTabController_createDefaultValue$(
  m.Scope scope$,
  RestorableCupertinoTabController target$,
) =>
    target$.createDefaultValue;
Function _RestorableCupertinoTabController_fromPrimitives$(
  m.Scope scope$,
  RestorableCupertinoTabController target$,
) =>
    target$.fromPrimitives;
Function _RestorableCupertinoTabController_toPrimitives$(
  m.Scope scope$,
  RestorableCupertinoTabController target$,
) =>
    target$.toPrimitives;
