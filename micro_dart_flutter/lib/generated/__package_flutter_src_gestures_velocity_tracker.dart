// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/gestures/velocity_tracker.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/gestures/events.dart';
import 'package:flutter/src/gestures/lsq_solver.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/gestures/velocity_tracker.dart',
  {'Velocity.zero': _Velocity_zero$},
  {},
  {
    'Velocity': m.ClassMirror(
      'Velocity',
      {
        '#as': Velocity_as$,
        '#is': Velocity_is$,
        'pixelsPerSecond': _Velocity_pixelsPerSecond$,
        'hashCode': _Velocity_hashCode$,
        'unary-': _Velocity_unary_minus$$,
        '-': _Velocity_minus$$,
        '+': _Velocity_plus$$,
        'clampMagnitude': _Velocity_clampMagnitude$,
        '==': _Velocity_eq$$,
        'toString': _Velocity_toString$,
      },
      {},
    ),
    'VelocityEstimate': m.ClassMirror(
      'VelocityEstimate',
      {
        '#as': VelocityEstimate_as$,
        '#is': VelocityEstimate_is$,
        'pixelsPerSecond': _VelocityEstimate_pixelsPerSecond$,
        'confidence': _VelocityEstimate_confidence$,
        'duration': _VelocityEstimate_duration$,
        'offset': _VelocityEstimate_offset$,
        'toString': _VelocityEstimate_toString$,
      },
      {},
    ),
    'VelocityTracker': m.ClassMirror(
      'VelocityTracker',
      {
        '#as': VelocityTracker_as$,
        '#is': VelocityTracker_is$,
        'kind': _VelocityTracker_kind$,
        'addPosition': _VelocityTracker_addPosition$,
        'getVelocityEstimate': _VelocityTracker_getVelocityEstimate$,
        'getVelocity': _VelocityTracker_getVelocity$,
      },
      {},
    ),
    'IOSScrollViewFlingVelocityTracker': m.ClassMirror(
      'IOSScrollViewFlingVelocityTracker',
      {
        '#as': IOSScrollViewFlingVelocityTracker_as$,
        '#is': IOSScrollViewFlingVelocityTracker_is$,
        'addPosition': _IOSScrollViewFlingVelocityTracker_addPosition$,
        'getVelocityEstimate':
            _IOSScrollViewFlingVelocityTracker_getVelocityEstimate$,
      },
      {},
    ),
    'MacOSScrollViewFlingVelocityTracker': m.ClassMirror(
      'MacOSScrollViewFlingVelocityTracker',
      {
        '#as': MacOSScrollViewFlingVelocityTracker_as$,
        '#is': MacOSScrollViewFlingVelocityTracker_is$,
        'getVelocityEstimate':
            _MacOSScrollViewFlingVelocityTracker_getVelocityEstimate$,
      },
      {},
    ),
  },
);
Function Velocity_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Velocity;
Function Velocity_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Velocity;
Velocity _Velocity_zero$() {
  return Velocity.zero;
}

Offset _Velocity_pixelsPerSecond$(Velocity target) {
  return target.pixelsPerSecond;
}

int _Velocity_hashCode$(Velocity target) {
  return target.hashCode;
}

Function _Velocity_unary_minus$$(
  m.Scope scope,
  Velocity target,
) =>
    () => -target;
Function _Velocity_minus$$(
  m.Scope scope,
  Velocity target,
) =>
    (Velocity other) => target - other;
Function _Velocity_plus$$(
  m.Scope scope,
  Velocity target,
) =>
    (Velocity other) => target + other;
Function _Velocity_clampMagnitude$(
  m.Scope scope,
  Velocity target,
) =>
    target.clampMagnitude;
Function _Velocity_eq$$(
  m.Scope scope,
  Velocity target,
) =>
    (Object other) => target == other;
Function _Velocity_toString$(
  m.Scope scope,
  Velocity target,
) =>
    target.toString;
Function VelocityEstimate_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as VelocityEstimate;
Function VelocityEstimate_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is VelocityEstimate;
Offset _VelocityEstimate_pixelsPerSecond$(VelocityEstimate target) {
  return target.pixelsPerSecond;
}

double _VelocityEstimate_confidence$(VelocityEstimate target) {
  return target.confidence;
}

Duration _VelocityEstimate_duration$(VelocityEstimate target) {
  return target.duration;
}

Offset _VelocityEstimate_offset$(VelocityEstimate target) {
  return target.offset;
}

Function _VelocityEstimate_toString$(
  m.Scope scope,
  VelocityEstimate target,
) =>
    target.toString;
Function VelocityTracker_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as VelocityTracker;
Function VelocityTracker_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is VelocityTracker;
PointerDeviceKind _VelocityTracker_kind$(VelocityTracker target) {
  return target.kind;
}

Function _VelocityTracker_addPosition$(
  m.Scope scope,
  VelocityTracker target,
) =>
    target.addPosition;
Function _VelocityTracker_getVelocityEstimate$(
  m.Scope scope,
  VelocityTracker target,
) =>
    target.getVelocityEstimate;
Function _VelocityTracker_getVelocity$(
  m.Scope scope,
  VelocityTracker target,
) =>
    target.getVelocity;
Function IOSScrollViewFlingVelocityTracker_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as IOSScrollViewFlingVelocityTracker;
Function IOSScrollViewFlingVelocityTracker_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is IOSScrollViewFlingVelocityTracker;
Function _IOSScrollViewFlingVelocityTracker_addPosition$(
  m.Scope scope,
  IOSScrollViewFlingVelocityTracker target,
) =>
    target.addPosition;
Function _IOSScrollViewFlingVelocityTracker_getVelocityEstimate$(
  m.Scope scope,
  IOSScrollViewFlingVelocityTracker target,
) =>
    target.getVelocityEstimate;
Function MacOSScrollViewFlingVelocityTracker_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as MacOSScrollViewFlingVelocityTracker;
Function MacOSScrollViewFlingVelocityTracker_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is MacOSScrollViewFlingVelocityTracker;
Function _MacOSScrollViewFlingVelocityTracker_getVelocityEstimate$(
  m.Scope scope,
  MacOSScrollViewFlingVelocityTracker target,
) =>
    target.getVelocityEstimate;
