// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/time_picker.dart';
import 'dart:async';
import 'dart:math';
import 'dart:ui';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/curves.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/dialog.dart';
import 'package:flutter/src/material/feedback.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/input_border.dart';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/text_button.dart';
import 'package:flutter/src/material/text_form_field.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/material/time.dart';
import 'package:flutter/src/material/time_picker_theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/time_picker.dart',
  {
    'TimePickerDialog.': _TimePickerDialog__$,
    'TimePickerEntryMode.dial': _TimePickerEntryMode_dial$,
    'TimePickerEntryMode.input': _TimePickerEntryMode_input$,
    'TimePickerEntryMode.dialOnly': _TimePickerEntryMode_dialOnly$,
    'TimePickerEntryMode.inputOnly': _TimePickerEntryMode_inputOnly$,
    'TimePickerEntryMode.values': _TimePickerEntryMode_values$,
    'showTimePicker': _showTimePicker$,
  },
  {},
  {
    'TimePickerDialog': m.ClassMirror(
      'TimePickerDialog',
      {
        '#as': TimePickerDialog_as$,
        '#is': TimePickerDialog_is$,
        'initialTime': _TimePickerDialog_initialTime$,
        'cancelText': _TimePickerDialog_cancelText$,
        'confirmText': _TimePickerDialog_confirmText$,
        'helpText': _TimePickerDialog_helpText$,
        'errorInvalidText': _TimePickerDialog_errorInvalidText$,
        'hourLabelText': _TimePickerDialog_hourLabelText$,
        'minuteLabelText': _TimePickerDialog_minuteLabelText$,
        'restorationId': _TimePickerDialog_restorationId$,
        'initialEntryMode': _TimePickerDialog_initialEntryMode$,
        'orientation': _TimePickerDialog_orientation$,
        'onEntryModeChanged': _TimePickerDialog_onEntryModeChanged$,
        'createState': _TimePickerDialog_createState$,
      },
      {},
    ),
    'TimePickerEntryMode': m.ClassMirror(
      'TimePickerEntryMode',
      {},
      {},
    ),
  },
);
Function TimePickerDialog_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TimePickerDialog;
Function TimePickerDialog_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TimePickerDialog;
Function _TimePickerDialog_initialTime$(
  m.Scope scope$,
  TimePickerDialog target$,
) =>
    () {
      return target$.initialTime;
    };
Function _TimePickerDialog_cancelText$(
  m.Scope scope$,
  TimePickerDialog target$,
) =>
    () {
      return target$.cancelText;
    };
Function _TimePickerDialog_confirmText$(
  m.Scope scope$,
  TimePickerDialog target$,
) =>
    () {
      return target$.confirmText;
    };
Function _TimePickerDialog_helpText$(
  m.Scope scope$,
  TimePickerDialog target$,
) =>
    () {
      return target$.helpText;
    };
Function _TimePickerDialog_errorInvalidText$(
  m.Scope scope$,
  TimePickerDialog target$,
) =>
    () {
      return target$.errorInvalidText;
    };
Function _TimePickerDialog_hourLabelText$(
  m.Scope scope$,
  TimePickerDialog target$,
) =>
    () {
      return target$.hourLabelText;
    };
Function _TimePickerDialog_minuteLabelText$(
  m.Scope scope$,
  TimePickerDialog target$,
) =>
    () {
      return target$.minuteLabelText;
    };
Function _TimePickerDialog_restorationId$(
  m.Scope scope$,
  TimePickerDialog target$,
) =>
    () {
      return target$.restorationId;
    };
Function _TimePickerDialog_initialEntryMode$(
  m.Scope scope$,
  TimePickerDialog target$,
) =>
    () {
      return target$.initialEntryMode;
    };
Function _TimePickerDialog_orientation$(
  m.Scope scope$,
  TimePickerDialog target$,
) =>
    () {
      return target$.orientation;
    };
Function _TimePickerDialog_onEntryModeChanged$(
  m.Scope scope$,
  TimePickerDialog target$,
) =>
    () {
      return target$.onEntryModeChanged;
    };
Function _TimePickerDialog__$(m.Scope scope$) => ({
      Key? key,
      required TimeOfDay initialTime,
      String? cancelText,
      String? confirmText,
      String? helpText,
      String? errorInvalidText,
      String? hourLabelText,
      String? minuteLabelText,
      String? restorationId,
      TimePickerEntryMode? initialEntryMode,
      Orientation? orientation,
      m.FunctionPointer? onEntryModeChanged,
    }) {
      void onEntryModeChangedProxy(
              TimePickerEntryMode onEntryModeChanged_$p0$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onEntryModeChanged!,
            [onEntryModeChanged_$p0$],
            {},
          );
      return TimePickerDialog(
        cancelText: cancelText,
        confirmText: confirmText,
        errorInvalidText: errorInvalidText,
        helpText: helpText,
        hourLabelText: hourLabelText,
        initialEntryMode: initialEntryMode ?? TimePickerEntryMode.dial,
        initialTime: initialTime,
        key: key,
        minuteLabelText: minuteLabelText,
        onEntryModeChanged:
            onEntryModeChanged == null ? null : onEntryModeChangedProxy,
        orientation: orientation,
        restorationId: restorationId,
      );
    };
Function _TimePickerDialog_createState$(
  m.Scope scope$,
  TimePickerDialog target$,
) =>
    target$.createState;
TimePickerEntryMode _TimePickerEntryMode_dial$() {
  return TimePickerEntryMode.dial;
}

TimePickerEntryMode _TimePickerEntryMode_input$() {
  return TimePickerEntryMode.input;
}

TimePickerEntryMode _TimePickerEntryMode_dialOnly$() {
  return TimePickerEntryMode.dialOnly;
}

TimePickerEntryMode _TimePickerEntryMode_inputOnly$() {
  return TimePickerEntryMode.inputOnly;
}

List<TimePickerEntryMode> _TimePickerEntryMode_values$() {
  return TimePickerEntryMode.values;
}

Function _showTimePicker$(m.Scope scope$) => ({
      required BuildContext context,
      required TimeOfDay initialTime,
      m.FunctionPointer? builder,
      bool? useRootNavigator,
      TimePickerEntryMode? initialEntryMode,
      String? cancelText,
      String? confirmText,
      String? helpText,
      String? errorInvalidText,
      String? hourLabelText,
      String? minuteLabelText,
      RouteSettings? routeSettings,
      m.FunctionPointer? onEntryModeChanged,
      Offset? anchorPoint,
      Orientation? orientation,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Widget? builder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder!,
            [
              builder_context$,
              builder_child$,
            ],
            {},
          );
      void onEntryModeChangedProxy(
              TimePickerEntryMode onEntryModeChanged_$p0$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onEntryModeChanged!,
            [onEntryModeChanged_$p0$],
            {},
          );
      return showTimePicker(
        anchorPoint: anchorPoint,
        builder: builder == null ? null : builderProxy,
        cancelText: cancelText,
        confirmText: confirmText,
        context: context,
        errorInvalidText: errorInvalidText,
        helpText: helpText,
        hourLabelText: hourLabelText,
        initialEntryMode: initialEntryMode ?? TimePickerEntryMode.dial,
        initialTime: initialTime,
        minuteLabelText: minuteLabelText,
        onEntryModeChanged:
            onEntryModeChanged == null ? null : onEntryModeChangedProxy,
        orientation: orientation,
        routeSettings: routeSettings,
        useRootNavigator: useRootNavigator ?? true,
      );
    };
