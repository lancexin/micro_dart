// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/app_bar.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/action_buttons.dart';
import 'package:flutter/src/material/app_bar_theme.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/flexible_space_bar.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icon_button_theme.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/scaffold.dart';
import 'package:flutter/src/material/tabs.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/app_bar.dart',
  {'AppBar.preferredHeightFor': _AppBar_preferredHeightFor$},
  {},
  {
    'AppBar': m.ClassMirror(
      'AppBar',
      {
        '#as': AppBar_as$,
        '#is': AppBar_is$,
        'leading': _AppBar_leading$,
        'automaticallyImplyLeading': _AppBar_automaticallyImplyLeading$,
        'title': _AppBar_title$,
        'actions': _AppBar_actions$,
        'flexibleSpace': _AppBar_flexibleSpace$,
        'bottom': _AppBar_bottom$,
        'elevation': _AppBar_elevation$,
        'scrolledUnderElevation': _AppBar_scrolledUnderElevation$,
        'notificationPredicate': _AppBar_notificationPredicate$,
        'shadowColor': _AppBar_shadowColor$,
        'surfaceTintColor': _AppBar_surfaceTintColor$,
        'shape': _AppBar_shape$,
        'backgroundColor': _AppBar_backgroundColor$,
        'foregroundColor': _AppBar_foregroundColor$,
        'iconTheme': _AppBar_iconTheme$,
        'actionsIconTheme': _AppBar_actionsIconTheme$,
        'primary': _AppBar_primary$,
        'centerTitle': _AppBar_centerTitle$,
        'excludeHeaderSemantics': _AppBar_excludeHeaderSemantics$,
        'titleSpacing': _AppBar_titleSpacing$,
        'toolbarOpacity': _AppBar_toolbarOpacity$,
        'bottomOpacity': _AppBar_bottomOpacity$,
        'preferredSize': _AppBar_preferredSize$,
        'toolbarHeight': _AppBar_toolbarHeight$,
        'leadingWidth': _AppBar_leadingWidth$,
        'toolbarTextStyle': _AppBar_toolbarTextStyle$,
        'titleTextStyle': _AppBar_titleTextStyle$,
        'systemOverlayStyle': _AppBar_systemOverlayStyle$,
        'forceMaterialTransparency': _AppBar_forceMaterialTransparency$,
        'clipBehavior': _AppBar_clipBehavior$,
        'createState': _AppBar_createState$,
      },
      {},
    ),
    'SliverAppBar': m.ClassMirror(
      'SliverAppBar',
      {
        '#as': SliverAppBar_as$,
        '#is': SliverAppBar_is$,
        'leading': _SliverAppBar_leading$,
        'automaticallyImplyLeading': _SliverAppBar_automaticallyImplyLeading$,
        'title': _SliverAppBar_title$,
        'actions': _SliverAppBar_actions$,
        'flexibleSpace': _SliverAppBar_flexibleSpace$,
        'bottom': _SliverAppBar_bottom$,
        'elevation': _SliverAppBar_elevation$,
        'scrolledUnderElevation': _SliverAppBar_scrolledUnderElevation$,
        'shadowColor': _SliverAppBar_shadowColor$,
        'surfaceTintColor': _SliverAppBar_surfaceTintColor$,
        'forceElevated': _SliverAppBar_forceElevated$,
        'backgroundColor': _SliverAppBar_backgroundColor$,
        'foregroundColor': _SliverAppBar_foregroundColor$,
        'iconTheme': _SliverAppBar_iconTheme$,
        'actionsIconTheme': _SliverAppBar_actionsIconTheme$,
        'primary': _SliverAppBar_primary$,
        'centerTitle': _SliverAppBar_centerTitle$,
        'excludeHeaderSemantics': _SliverAppBar_excludeHeaderSemantics$,
        'titleSpacing': _SliverAppBar_titleSpacing$,
        'collapsedHeight': _SliverAppBar_collapsedHeight$,
        'expandedHeight': _SliverAppBar_expandedHeight$,
        'floating': _SliverAppBar_floating$,
        'pinned': _SliverAppBar_pinned$,
        'shape': _SliverAppBar_shape$,
        'snap': _SliverAppBar_snap$,
        'stretch': _SliverAppBar_stretch$,
        'stretchTriggerOffset': _SliverAppBar_stretchTriggerOffset$,
        'onStretchTrigger': _SliverAppBar_onStretchTrigger$,
        'toolbarHeight': _SliverAppBar_toolbarHeight$,
        'leadingWidth': _SliverAppBar_leadingWidth$,
        'toolbarTextStyle': _SliverAppBar_toolbarTextStyle$,
        'titleTextStyle': _SliverAppBar_titleTextStyle$,
        'systemOverlayStyle': _SliverAppBar_systemOverlayStyle$,
        'forceMaterialTransparency': _SliverAppBar_forceMaterialTransparency$,
        'clipBehavior': _SliverAppBar_clipBehavior$,
        'createState': _SliverAppBar_createState$,
      },
      {},
    ),
  },
);
Function AppBar_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AppBar;
Function AppBar_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AppBar;
Widget? _AppBar_leading$(AppBar target) {
  return target.leading;
}

bool _AppBar_automaticallyImplyLeading$(AppBar target) {
  return target.automaticallyImplyLeading;
}

Widget? _AppBar_title$(AppBar target) {
  return target.title;
}

List<Widget>? _AppBar_actions$(AppBar target) {
  return target.actions;
}

Widget? _AppBar_flexibleSpace$(AppBar target) {
  return target.flexibleSpace;
}

PreferredSizeWidget? _AppBar_bottom$(AppBar target) {
  return target.bottom;
}

double? _AppBar_elevation$(AppBar target) {
  return target.elevation;
}

double? _AppBar_scrolledUnderElevation$(AppBar target) {
  return target.scrolledUnderElevation;
}

bool Function(ScrollNotification) _AppBar_notificationPredicate$(
    AppBar target) {
  return target.notificationPredicate;
}

Color? _AppBar_shadowColor$(AppBar target) {
  return target.shadowColor;
}

Color? _AppBar_surfaceTintColor$(AppBar target) {
  return target.surfaceTintColor;
}

ShapeBorder? _AppBar_shape$(AppBar target) {
  return target.shape;
}

Color? _AppBar_backgroundColor$(AppBar target) {
  return target.backgroundColor;
}

Color? _AppBar_foregroundColor$(AppBar target) {
  return target.foregroundColor;
}

IconThemeData? _AppBar_iconTheme$(AppBar target) {
  return target.iconTheme;
}

IconThemeData? _AppBar_actionsIconTheme$(AppBar target) {
  return target.actionsIconTheme;
}

bool _AppBar_primary$(AppBar target) {
  return target.primary;
}

bool? _AppBar_centerTitle$(AppBar target) {
  return target.centerTitle;
}

bool _AppBar_excludeHeaderSemantics$(AppBar target) {
  return target.excludeHeaderSemantics;
}

double? _AppBar_titleSpacing$(AppBar target) {
  return target.titleSpacing;
}

double _AppBar_toolbarOpacity$(AppBar target) {
  return target.toolbarOpacity;
}

double _AppBar_bottomOpacity$(AppBar target) {
  return target.bottomOpacity;
}

Size _AppBar_preferredSize$(AppBar target) {
  return target.preferredSize;
}

double? _AppBar_toolbarHeight$(AppBar target) {
  return target.toolbarHeight;
}

double? _AppBar_leadingWidth$(AppBar target) {
  return target.leadingWidth;
}

TextStyle? _AppBar_toolbarTextStyle$(AppBar target) {
  return target.toolbarTextStyle;
}

TextStyle? _AppBar_titleTextStyle$(AppBar target) {
  return target.titleTextStyle;
}

SystemUiOverlayStyle? _AppBar_systemOverlayStyle$(AppBar target) {
  return target.systemOverlayStyle;
}

bool _AppBar_forceMaterialTransparency$(AppBar target) {
  return target.forceMaterialTransparency;
}

Clip? _AppBar_clipBehavior$(AppBar target) {
  return target.clipBehavior;
}

Function _AppBar_preferredHeightFor$(m.Scope scope) =>
    AppBar.preferredHeightFor;
Function _AppBar_createState$(
  m.Scope scope,
  AppBar target,
) =>
    target.createState;
Function SliverAppBar_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SliverAppBar;
Function SliverAppBar_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SliverAppBar;
Widget? _SliverAppBar_leading$(SliverAppBar target) {
  return target.leading;
}

bool _SliverAppBar_automaticallyImplyLeading$(SliverAppBar target) {
  return target.automaticallyImplyLeading;
}

Widget? _SliverAppBar_title$(SliverAppBar target) {
  return target.title;
}

List<Widget>? _SliverAppBar_actions$(SliverAppBar target) {
  return target.actions;
}

Widget? _SliverAppBar_flexibleSpace$(SliverAppBar target) {
  return target.flexibleSpace;
}

PreferredSizeWidget? _SliverAppBar_bottom$(SliverAppBar target) {
  return target.bottom;
}

double? _SliverAppBar_elevation$(SliverAppBar target) {
  return target.elevation;
}

double? _SliverAppBar_scrolledUnderElevation$(SliverAppBar target) {
  return target.scrolledUnderElevation;
}

Color? _SliverAppBar_shadowColor$(SliverAppBar target) {
  return target.shadowColor;
}

Color? _SliverAppBar_surfaceTintColor$(SliverAppBar target) {
  return target.surfaceTintColor;
}

bool _SliverAppBar_forceElevated$(SliverAppBar target) {
  return target.forceElevated;
}

Color? _SliverAppBar_backgroundColor$(SliverAppBar target) {
  return target.backgroundColor;
}

Color? _SliverAppBar_foregroundColor$(SliverAppBar target) {
  return target.foregroundColor;
}

IconThemeData? _SliverAppBar_iconTheme$(SliverAppBar target) {
  return target.iconTheme;
}

IconThemeData? _SliverAppBar_actionsIconTheme$(SliverAppBar target) {
  return target.actionsIconTheme;
}

bool _SliverAppBar_primary$(SliverAppBar target) {
  return target.primary;
}

bool? _SliverAppBar_centerTitle$(SliverAppBar target) {
  return target.centerTitle;
}

bool _SliverAppBar_excludeHeaderSemantics$(SliverAppBar target) {
  return target.excludeHeaderSemantics;
}

double? _SliverAppBar_titleSpacing$(SliverAppBar target) {
  return target.titleSpacing;
}

double? _SliverAppBar_collapsedHeight$(SliverAppBar target) {
  return target.collapsedHeight;
}

double? _SliverAppBar_expandedHeight$(SliverAppBar target) {
  return target.expandedHeight;
}

bool _SliverAppBar_floating$(SliverAppBar target) {
  return target.floating;
}

bool _SliverAppBar_pinned$(SliverAppBar target) {
  return target.pinned;
}

ShapeBorder? _SliverAppBar_shape$(SliverAppBar target) {
  return target.shape;
}

bool _SliverAppBar_snap$(SliverAppBar target) {
  return target.snap;
}

bool _SliverAppBar_stretch$(SliverAppBar target) {
  return target.stretch;
}

double _SliverAppBar_stretchTriggerOffset$(SliverAppBar target) {
  return target.stretchTriggerOffset;
}

Future<void> Function()? _SliverAppBar_onStretchTrigger$(SliverAppBar target) {
  return target.onStretchTrigger;
}

double _SliverAppBar_toolbarHeight$(SliverAppBar target) {
  return target.toolbarHeight;
}

double? _SliverAppBar_leadingWidth$(SliverAppBar target) {
  return target.leadingWidth;
}

TextStyle? _SliverAppBar_toolbarTextStyle$(SliverAppBar target) {
  return target.toolbarTextStyle;
}

TextStyle? _SliverAppBar_titleTextStyle$(SliverAppBar target) {
  return target.titleTextStyle;
}

SystemUiOverlayStyle? _SliverAppBar_systemOverlayStyle$(SliverAppBar target) {
  return target.systemOverlayStyle;
}

bool _SliverAppBar_forceMaterialTransparency$(SliverAppBar target) {
  return target.forceMaterialTransparency;
}

Clip? _SliverAppBar_clipBehavior$(SliverAppBar target) {
  return target.clipBehavior;
}

Function _SliverAppBar_createState$(
  m.Scope scope,
  SliverAppBar target,
) =>
    target.createState;
