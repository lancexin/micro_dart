// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/app_bar.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/action_buttons.dart';
import 'package:flutter/src/material/app_bar_theme.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/flexible_space_bar.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icon_button_theme.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/scaffold.dart';
import 'package:flutter/src/material/tabs.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/app_bar.dart',
  {
    'AppBar.': _AppBar__$,
    'AppBar.preferredHeightFor': _AppBar_preferredHeightFor$,
    'SliverAppBar.': _SliverAppBar__$,
    'SliverAppBar.medium': _SliverAppBar_medium_$,
    'SliverAppBar.large': _SliverAppBar_large_$,
  },
  {},
  {
    'AppBar': m.ClassMirror(
      'AppBar',
      {
        '#as': AppBar_as$,
        '#is': AppBar_is$,
        'leading': _AppBar_leading$,
        'automaticallyImplyLeading': _AppBar_automaticallyImplyLeading$,
        'title': _AppBar_title$,
        'actions': _AppBar_actions$,
        'flexibleSpace': _AppBar_flexibleSpace$,
        'bottom': _AppBar_bottom$,
        'elevation': _AppBar_elevation$,
        'scrolledUnderElevation': _AppBar_scrolledUnderElevation$,
        'notificationPredicate': _AppBar_notificationPredicate$,
        'shadowColor': _AppBar_shadowColor$,
        'surfaceTintColor': _AppBar_surfaceTintColor$,
        'shape': _AppBar_shape$,
        'backgroundColor': _AppBar_backgroundColor$,
        'foregroundColor': _AppBar_foregroundColor$,
        'iconTheme': _AppBar_iconTheme$,
        'actionsIconTheme': _AppBar_actionsIconTheme$,
        'primary': _AppBar_primary$,
        'centerTitle': _AppBar_centerTitle$,
        'excludeHeaderSemantics': _AppBar_excludeHeaderSemantics$,
        'titleSpacing': _AppBar_titleSpacing$,
        'toolbarOpacity': _AppBar_toolbarOpacity$,
        'bottomOpacity': _AppBar_bottomOpacity$,
        'preferredSize': _AppBar_preferredSize$,
        'toolbarHeight': _AppBar_toolbarHeight$,
        'leadingWidth': _AppBar_leadingWidth$,
        'toolbarTextStyle': _AppBar_toolbarTextStyle$,
        'titleTextStyle': _AppBar_titleTextStyle$,
        'systemOverlayStyle': _AppBar_systemOverlayStyle$,
        'forceMaterialTransparency': _AppBar_forceMaterialTransparency$,
        'clipBehavior': _AppBar_clipBehavior$,
        'createState': _AppBar_createState$,
      },
      {},
    ),
    'SliverAppBar': m.ClassMirror(
      'SliverAppBar',
      {
        '#as': SliverAppBar_as$,
        '#is': SliverAppBar_is$,
        'leading': _SliverAppBar_leading$,
        'automaticallyImplyLeading': _SliverAppBar_automaticallyImplyLeading$,
        'title': _SliverAppBar_title$,
        'actions': _SliverAppBar_actions$,
        'flexibleSpace': _SliverAppBar_flexibleSpace$,
        'bottom': _SliverAppBar_bottom$,
        'elevation': _SliverAppBar_elevation$,
        'scrolledUnderElevation': _SliverAppBar_scrolledUnderElevation$,
        'shadowColor': _SliverAppBar_shadowColor$,
        'surfaceTintColor': _SliverAppBar_surfaceTintColor$,
        'forceElevated': _SliverAppBar_forceElevated$,
        'backgroundColor': _SliverAppBar_backgroundColor$,
        'foregroundColor': _SliverAppBar_foregroundColor$,
        'iconTheme': _SliverAppBar_iconTheme$,
        'actionsIconTheme': _SliverAppBar_actionsIconTheme$,
        'primary': _SliverAppBar_primary$,
        'centerTitle': _SliverAppBar_centerTitle$,
        'excludeHeaderSemantics': _SliverAppBar_excludeHeaderSemantics$,
        'titleSpacing': _SliverAppBar_titleSpacing$,
        'collapsedHeight': _SliverAppBar_collapsedHeight$,
        'expandedHeight': _SliverAppBar_expandedHeight$,
        'floating': _SliverAppBar_floating$,
        'pinned': _SliverAppBar_pinned$,
        'shape': _SliverAppBar_shape$,
        'snap': _SliverAppBar_snap$,
        'stretch': _SliverAppBar_stretch$,
        'stretchTriggerOffset': _SliverAppBar_stretchTriggerOffset$,
        'onStretchTrigger': _SliverAppBar_onStretchTrigger$,
        'toolbarHeight': _SliverAppBar_toolbarHeight$,
        'leadingWidth': _SliverAppBar_leadingWidth$,
        'toolbarTextStyle': _SliverAppBar_toolbarTextStyle$,
        'titleTextStyle': _SliverAppBar_titleTextStyle$,
        'systemOverlayStyle': _SliverAppBar_systemOverlayStyle$,
        'forceMaterialTransparency': _SliverAppBar_forceMaterialTransparency$,
        'clipBehavior': _SliverAppBar_clipBehavior$,
        'createState': _SliverAppBar_createState$,
      },
      {},
    ),
  },
);
Function AppBar_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AppBar;
Function AppBar_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AppBar;
Function _AppBar_leading$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.leading;
    };
Function _AppBar_automaticallyImplyLeading$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.automaticallyImplyLeading;
    };
Function _AppBar_title$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.title;
    };
Function _AppBar_actions$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.actions;
    };
Function _AppBar_flexibleSpace$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.flexibleSpace;
    };
Function _AppBar_bottom$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.bottom;
    };
Function _AppBar_elevation$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.elevation;
    };
Function _AppBar_scrolledUnderElevation$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.scrolledUnderElevation;
    };
Function _AppBar_notificationPredicate$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.notificationPredicate;
    };
Function _AppBar_shadowColor$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _AppBar_surfaceTintColor$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _AppBar_shape$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.shape;
    };
Function _AppBar_backgroundColor$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _AppBar_foregroundColor$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.foregroundColor;
    };
Function _AppBar_iconTheme$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.iconTheme;
    };
Function _AppBar_actionsIconTheme$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.actionsIconTheme;
    };
Function _AppBar_primary$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.primary;
    };
Function _AppBar_centerTitle$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.centerTitle;
    };
Function _AppBar_excludeHeaderSemantics$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.excludeHeaderSemantics;
    };
Function _AppBar_titleSpacing$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.titleSpacing;
    };
Function _AppBar_toolbarOpacity$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.toolbarOpacity;
    };
Function _AppBar_bottomOpacity$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.bottomOpacity;
    };
Function _AppBar_preferredSize$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.preferredSize;
    };
Function _AppBar_toolbarHeight$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.toolbarHeight;
    };
Function _AppBar_leadingWidth$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.leadingWidth;
    };
Function _AppBar_toolbarTextStyle$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.toolbarTextStyle;
    };
Function _AppBar_titleTextStyle$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.titleTextStyle;
    };
Function _AppBar_systemOverlayStyle$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.systemOverlayStyle;
    };
Function _AppBar_forceMaterialTransparency$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.forceMaterialTransparency;
    };
Function _AppBar_clipBehavior$(
  m.Scope scope$,
  AppBar target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _AppBar__$(m.Scope scope$) => ({
      Key? key,
      Widget? leading,
      bool? automaticallyImplyLeading,
      Widget? title,
      List? actions,
      Widget? flexibleSpace,
      PreferredSizeWidget? bottom,
      double? elevation,
      double? scrolledUnderElevation,
      m.FunctionPointer? notificationPredicate,
      Color? shadowColor,
      Color? surfaceTintColor,
      ShapeBorder? shape,
      Color? backgroundColor,
      Color? foregroundColor,
      IconThemeData? iconTheme,
      IconThemeData? actionsIconTheme,
      bool? primary,
      bool? centerTitle,
      bool? excludeHeaderSemantics,
      double? titleSpacing,
      double? toolbarOpacity,
      double? bottomOpacity,
      double? toolbarHeight,
      double? leadingWidth,
      TextStyle? toolbarTextStyle,
      TextStyle? titleTextStyle,
      SystemUiOverlayStyle? systemOverlayStyle,
      bool? forceMaterialTransparency,
      Clip? clipBehavior,
    }) {
      bool notificationPredicateProxy(
              ScrollNotification notificationPredicate_notification$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            notificationPredicate!,
            [notificationPredicate_notification$],
            {},
          );
      return AppBar(
        actions: actions == null ? null : List.from(actions),
        actionsIconTheme: actionsIconTheme,
        automaticallyImplyLeading: automaticallyImplyLeading ?? true,
        backgroundColor: backgroundColor,
        bottom: bottom,
        bottomOpacity: bottomOpacity ?? 1.0,
        centerTitle: centerTitle,
        clipBehavior: clipBehavior,
        elevation: elevation,
        excludeHeaderSemantics: excludeHeaderSemantics ?? false,
        flexibleSpace: flexibleSpace,
        forceMaterialTransparency: forceMaterialTransparency ?? false,
        foregroundColor: foregroundColor,
        iconTheme: iconTheme,
        key: key,
        leading: leading,
        leadingWidth: leadingWidth,
        notificationPredicate: notificationPredicate == null
            ? defaultScrollNotificationPredicate
            : notificationPredicateProxy,
        primary: primary ?? true,
        scrolledUnderElevation: scrolledUnderElevation,
        shadowColor: shadowColor,
        shape: shape,
        surfaceTintColor: surfaceTintColor,
        systemOverlayStyle: systemOverlayStyle,
        title: title,
        titleSpacing: titleSpacing,
        titleTextStyle: titleTextStyle,
        toolbarHeight: toolbarHeight,
        toolbarOpacity: toolbarOpacity ?? 1.0,
        toolbarTextStyle: toolbarTextStyle,
      );
    };
Function _AppBar_preferredHeightFor$(m.Scope scope$) =>
    AppBar.preferredHeightFor;
Function _AppBar_createState$(
  m.Scope scope$,
  AppBar target$,
) =>
    target$.createState;
Function SliverAppBar_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverAppBar;
Function SliverAppBar_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverAppBar;
Function _SliverAppBar_leading$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.leading;
    };
Function _SliverAppBar_automaticallyImplyLeading$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.automaticallyImplyLeading;
    };
Function _SliverAppBar_title$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.title;
    };
Function _SliverAppBar_actions$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.actions;
    };
Function _SliverAppBar_flexibleSpace$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.flexibleSpace;
    };
Function _SliverAppBar_bottom$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.bottom;
    };
Function _SliverAppBar_elevation$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.elevation;
    };
Function _SliverAppBar_scrolledUnderElevation$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.scrolledUnderElevation;
    };
Function _SliverAppBar_shadowColor$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _SliverAppBar_surfaceTintColor$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _SliverAppBar_forceElevated$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.forceElevated;
    };
Function _SliverAppBar_backgroundColor$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _SliverAppBar_foregroundColor$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.foregroundColor;
    };
Function _SliverAppBar_iconTheme$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.iconTheme;
    };
Function _SliverAppBar_actionsIconTheme$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.actionsIconTheme;
    };
Function _SliverAppBar_primary$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.primary;
    };
Function _SliverAppBar_centerTitle$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.centerTitle;
    };
Function _SliverAppBar_excludeHeaderSemantics$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.excludeHeaderSemantics;
    };
Function _SliverAppBar_titleSpacing$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.titleSpacing;
    };
Function _SliverAppBar_collapsedHeight$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.collapsedHeight;
    };
Function _SliverAppBar_expandedHeight$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.expandedHeight;
    };
Function _SliverAppBar_floating$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.floating;
    };
Function _SliverAppBar_pinned$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.pinned;
    };
Function _SliverAppBar_shape$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.shape;
    };
Function _SliverAppBar_snap$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.snap;
    };
Function _SliverAppBar_stretch$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.stretch;
    };
Function _SliverAppBar_stretchTriggerOffset$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.stretchTriggerOffset;
    };
Function _SliverAppBar_onStretchTrigger$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.onStretchTrigger;
    };
Function _SliverAppBar_toolbarHeight$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.toolbarHeight;
    };
Function _SliverAppBar_leadingWidth$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.leadingWidth;
    };
Function _SliverAppBar_toolbarTextStyle$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.toolbarTextStyle;
    };
Function _SliverAppBar_titleTextStyle$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.titleTextStyle;
    };
Function _SliverAppBar_systemOverlayStyle$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.systemOverlayStyle;
    };
Function _SliverAppBar_forceMaterialTransparency$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.forceMaterialTransparency;
    };
Function _SliverAppBar_clipBehavior$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _SliverAppBar__$(m.Scope scope$) => ({
      Key? key,
      Widget? leading,
      bool? automaticallyImplyLeading,
      Widget? title,
      List? actions,
      Widget? flexibleSpace,
      PreferredSizeWidget? bottom,
      double? elevation,
      double? scrolledUnderElevation,
      Color? shadowColor,
      Color? surfaceTintColor,
      bool? forceElevated,
      Color? backgroundColor,
      Color? foregroundColor,
      IconThemeData? iconTheme,
      IconThemeData? actionsIconTheme,
      bool? primary,
      bool? centerTitle,
      bool? excludeHeaderSemantics,
      double? titleSpacing,
      double? collapsedHeight,
      double? expandedHeight,
      bool? floating,
      bool? pinned,
      bool? snap,
      bool? stretch,
      double? stretchTriggerOffset,
      m.FunctionPointer? onStretchTrigger,
      ShapeBorder? shape,
      double? toolbarHeight,
      double? leadingWidth,
      TextStyle? toolbarTextStyle,
      TextStyle? titleTextStyle,
      SystemUiOverlayStyle? systemOverlayStyle,
      bool? forceMaterialTransparency,
      Clip? clipBehavior,
    }) {
      Future<void> onStretchTriggerProxy() async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            onStretchTrigger!,
            [],
            {},
          );
      return SliverAppBar(
        actions: actions == null ? null : List.from(actions),
        actionsIconTheme: actionsIconTheme,
        automaticallyImplyLeading: automaticallyImplyLeading ?? true,
        backgroundColor: backgroundColor,
        bottom: bottom,
        centerTitle: centerTitle,
        clipBehavior: clipBehavior,
        collapsedHeight: collapsedHeight,
        elevation: elevation,
        excludeHeaderSemantics: excludeHeaderSemantics ?? false,
        expandedHeight: expandedHeight,
        flexibleSpace: flexibleSpace,
        floating: floating ?? false,
        forceElevated: forceElevated ?? false,
        forceMaterialTransparency: forceMaterialTransparency ?? false,
        foregroundColor: foregroundColor,
        iconTheme: iconTheme,
        key: key,
        leading: leading,
        leadingWidth: leadingWidth,
        onStretchTrigger:
            onStretchTrigger == null ? null : onStretchTriggerProxy,
        pinned: pinned ?? false,
        primary: primary ?? true,
        scrolledUnderElevation: scrolledUnderElevation,
        shadowColor: shadowColor,
        shape: shape,
        snap: snap ?? false,
        stretch: stretch ?? false,
        stretchTriggerOffset: stretchTriggerOffset ?? 100.0,
        surfaceTintColor: surfaceTintColor,
        systemOverlayStyle: systemOverlayStyle,
        title: title,
        titleSpacing: titleSpacing,
        titleTextStyle: titleTextStyle,
        toolbarHeight: toolbarHeight ?? kToolbarHeight,
        toolbarTextStyle: toolbarTextStyle,
      );
    };
Function _SliverAppBar_medium_$(m.Scope scope$) => ({
      Key? key,
      Widget? leading,
      bool? automaticallyImplyLeading,
      Widget? title,
      List? actions,
      Widget? flexibleSpace,
      PreferredSizeWidget? bottom,
      double? elevation,
      double? scrolledUnderElevation,
      Color? shadowColor,
      Color? surfaceTintColor,
      bool? forceElevated,
      Color? backgroundColor,
      Color? foregroundColor,
      IconThemeData? iconTheme,
      IconThemeData? actionsIconTheme,
      bool? primary,
      bool? centerTitle,
      bool? excludeHeaderSemantics,
      double? titleSpacing,
      double? collapsedHeight,
      double? expandedHeight,
      bool? floating,
      bool? pinned,
      bool? snap,
      bool? stretch,
      double? stretchTriggerOffset,
      m.FunctionPointer? onStretchTrigger,
      ShapeBorder? shape,
      double? toolbarHeight,
      double? leadingWidth,
      TextStyle? toolbarTextStyle,
      TextStyle? titleTextStyle,
      SystemUiOverlayStyle? systemOverlayStyle,
    }) {
      Future<void> onStretchTriggerProxy() async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            onStretchTrigger!,
            [],
            {},
          );
      return SliverAppBar.medium(
        actions: actions == null ? null : List.from(actions),
        actionsIconTheme: actionsIconTheme,
        automaticallyImplyLeading: automaticallyImplyLeading ?? true,
        backgroundColor: backgroundColor,
        bottom: bottom,
        centerTitle: centerTitle,
        collapsedHeight: collapsedHeight,
        elevation: elevation,
        excludeHeaderSemantics: excludeHeaderSemantics ?? false,
        expandedHeight: expandedHeight,
        flexibleSpace: flexibleSpace,
        floating: floating ?? false,
        forceElevated: forceElevated ?? false,
        foregroundColor: foregroundColor,
        iconTheme: iconTheme,
        key: key,
        leading: leading,
        leadingWidth: leadingWidth,
        onStretchTrigger:
            onStretchTrigger == null ? null : onStretchTriggerProxy,
        pinned: pinned ?? true,
        primary: primary ?? true,
        scrolledUnderElevation: scrolledUnderElevation,
        shadowColor: shadowColor,
        shape: shape,
        snap: snap ?? false,
        stretch: stretch ?? false,
        stretchTriggerOffset: stretchTriggerOffset ?? 100.0,
        surfaceTintColor: surfaceTintColor,
        systemOverlayStyle: systemOverlayStyle,
        title: title,
        titleSpacing: titleSpacing,
        titleTextStyle: titleTextStyle,
        toolbarHeight: toolbarHeight ?? 64.0,
        toolbarTextStyle: toolbarTextStyle,
      );
    };
Function _SliverAppBar_large_$(m.Scope scope$) => ({
      Key? key,
      Widget? leading,
      bool? automaticallyImplyLeading,
      Widget? title,
      List? actions,
      Widget? flexibleSpace,
      PreferredSizeWidget? bottom,
      double? elevation,
      double? scrolledUnderElevation,
      Color? shadowColor,
      Color? surfaceTintColor,
      bool? forceElevated,
      Color? backgroundColor,
      Color? foregroundColor,
      IconThemeData? iconTheme,
      IconThemeData? actionsIconTheme,
      bool? primary,
      bool? centerTitle,
      bool? excludeHeaderSemantics,
      double? titleSpacing,
      double? collapsedHeight,
      double? expandedHeight,
      bool? floating,
      bool? pinned,
      bool? snap,
      bool? stretch,
      double? stretchTriggerOffset,
      m.FunctionPointer? onStretchTrigger,
      ShapeBorder? shape,
      double? toolbarHeight,
      double? leadingWidth,
      TextStyle? toolbarTextStyle,
      TextStyle? titleTextStyle,
      SystemUiOverlayStyle? systemOverlayStyle,
    }) {
      Future<void> onStretchTriggerProxy() async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            onStretchTrigger!,
            [],
            {},
          );
      return SliverAppBar.large(
        actions: actions == null ? null : List.from(actions),
        actionsIconTheme: actionsIconTheme,
        automaticallyImplyLeading: automaticallyImplyLeading ?? true,
        backgroundColor: backgroundColor,
        bottom: bottom,
        centerTitle: centerTitle,
        collapsedHeight: collapsedHeight,
        elevation: elevation,
        excludeHeaderSemantics: excludeHeaderSemantics ?? false,
        expandedHeight: expandedHeight,
        flexibleSpace: flexibleSpace,
        floating: floating ?? false,
        forceElevated: forceElevated ?? false,
        foregroundColor: foregroundColor,
        iconTheme: iconTheme,
        key: key,
        leading: leading,
        leadingWidth: leadingWidth,
        onStretchTrigger:
            onStretchTrigger == null ? null : onStretchTriggerProxy,
        pinned: pinned ?? true,
        primary: primary ?? true,
        scrolledUnderElevation: scrolledUnderElevation,
        shadowColor: shadowColor,
        shape: shape,
        snap: snap ?? false,
        stretch: stretch ?? false,
        stretchTriggerOffset: stretchTriggerOffset ?? 100.0,
        surfaceTintColor: surfaceTintColor,
        systemOverlayStyle: systemOverlayStyle,
        title: title,
        titleSpacing: titleSpacing,
        titleTextStyle: titleTextStyle,
        toolbarHeight: toolbarHeight ?? 64.0,
        toolbarTextStyle: toolbarTextStyle,
      );
    };
Function _SliverAppBar_createState$(
  m.Scope scope$,
  SliverAppBar target$,
) =>
    target$.createState;
