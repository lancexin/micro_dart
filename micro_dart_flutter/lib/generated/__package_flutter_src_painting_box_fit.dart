// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/box_fit.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/painting/basic_types.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/box_fit.dart',
  {
    'FittedSizes.': _FittedSizes__$,
    'BoxFit.fill': _BoxFit_fill$,
    'BoxFit.contain': _BoxFit_contain$,
    'BoxFit.cover': _BoxFit_cover$,
    'BoxFit.fitWidth': _BoxFit_fitWidth$,
    'BoxFit.fitHeight': _BoxFit_fitHeight$,
    'BoxFit.none': _BoxFit_none$,
    'BoxFit.scaleDown': _BoxFit_scaleDown$,
    'BoxFit.values': _BoxFit_values$,
    'applyBoxFit': _applyBoxFit$,
  },
  {},
  {
    'FittedSizes': m.ClassMirror(
      'FittedSizes',
      {
        '#as': FittedSizes_as$,
        '#is': FittedSizes_is$,
        'source': _FittedSizes_source$,
        'destination': _FittedSizes_destination$,
      },
      {},
    ),
    'BoxFit': m.ClassMirror(
      'BoxFit',
      {},
      {},
    ),
  },
);
Function FittedSizes_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FittedSizes;
Function FittedSizes_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FittedSizes;
Function _FittedSizes_source$(
  m.Scope scope$,
  FittedSizes target$,
) =>
    () {
      return target$.source;
    };
Function _FittedSizes_destination$(
  m.Scope scope$,
  FittedSizes target$,
) =>
    () {
      return target$.destination;
    };
Function _FittedSizes__$(m.Scope scope$) => (
      Size source,
      Size destination,
    ) {
      return FittedSizes(
        source,
        destination,
      );
    };
BoxFit _BoxFit_fill$() {
  return BoxFit.fill;
}

BoxFit _BoxFit_contain$() {
  return BoxFit.contain;
}

BoxFit _BoxFit_cover$() {
  return BoxFit.cover;
}

BoxFit _BoxFit_fitWidth$() {
  return BoxFit.fitWidth;
}

BoxFit _BoxFit_fitHeight$() {
  return BoxFit.fitHeight;
}

BoxFit _BoxFit_none$() {
  return BoxFit.none;
}

BoxFit _BoxFit_scaleDown$() {
  return BoxFit.scaleDown;
}

List<BoxFit> _BoxFit_values$() {
  return BoxFit.values;
}

Function _applyBoxFit$(m.Scope scope$) => applyBoxFit;
