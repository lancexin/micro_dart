// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/mouse_tracking.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/src/services/mouse_cursor.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/mouse_tracking.dart',
  {},
  {},
  {
    'MouseTrackerAnnotation': m.ClassMirror(
      'MouseTrackerAnnotation',
      {
        'onEnter': _MouseTrackerAnnotation_onEnter$,
        'onExit': _MouseTrackerAnnotation_onExit$,
        'cursor': _MouseTrackerAnnotation_cursor$,
        'validForMouseTracker': _MouseTrackerAnnotation_validForMouseTracker$,
        'debugFillProperties': _MouseTrackerAnnotation_debugFillProperties$,
      },
      {},
    )
  },
);
void Function(PointerEnterEvent)? _MouseTrackerAnnotation_onEnter$(
    MouseTrackerAnnotation target) {
  return target.onEnter;
}

void Function(PointerExitEvent)? _MouseTrackerAnnotation_onExit$(
    MouseTrackerAnnotation target) {
  return target.onExit;
}

MouseCursor _MouseTrackerAnnotation_cursor$(MouseTrackerAnnotation target) {
  return target.cursor;
}

bool _MouseTrackerAnnotation_validForMouseTracker$(
    MouseTrackerAnnotation target) {
  return target.validForMouseTracker;
}

Function _MouseTrackerAnnotation_debugFillProperties$(
  m.Scope scope,
  MouseTrackerAnnotation target,
) =>
    target.debugFillProperties;
