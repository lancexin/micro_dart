// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/autocomplete.dart';
import 'dart:async';
import 'package:flutter/scheduler.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/actions.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/container.dart';
import 'package:flutter/src/widgets/editable_text.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/inherited_notifier.dart';
import 'package:flutter/src/widgets/overlay.dart';
import 'package:flutter/src/widgets/shortcuts.dart';
import 'package:flutter/src/widgets/tap_region.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/autocomplete.dart',
  {
    'RawAutocomplete.onFieldSubmitted': _RawAutocomplete_onFieldSubmitted$,
    'RawAutocomplete.defaultStringForOption':
        _RawAutocomplete_defaultStringForOption$,
    'AutocompleteHighlightedOption.of': _AutocompleteHighlightedOption_of$,
  },
  {},
  {
    'RawAutocomplete': m.ClassMirror(
      'RawAutocomplete',
      {
        '#as': RawAutocomplete_as$,
        '#is': RawAutocomplete_is$,
        'fieldViewBuilder': _RawAutocomplete_fieldViewBuilder$,
        'focusNode': _RawAutocomplete_focusNode$,
        'optionsViewBuilder': _RawAutocomplete_optionsViewBuilder$,
        'displayStringForOption': _RawAutocomplete_displayStringForOption$,
        'onSelected': _RawAutocomplete_onSelected$,
        'optionsBuilder': _RawAutocomplete_optionsBuilder$,
        'textEditingController': _RawAutocomplete_textEditingController$,
        'initialValue': _RawAutocomplete_initialValue$,
        'createState': _RawAutocomplete_createState$,
      },
      {},
    ),
    'AutocompletePreviousOptionIntent': m.ClassMirror(
      'AutocompletePreviousOptionIntent',
      {
        '#as': AutocompletePreviousOptionIntent_as$,
        '#is': AutocompletePreviousOptionIntent_is$,
      },
      {},
    ),
    'AutocompleteNextOptionIntent': m.ClassMirror(
      'AutocompleteNextOptionIntent',
      {
        '#as': AutocompleteNextOptionIntent_as$,
        '#is': AutocompleteNextOptionIntent_is$,
      },
      {},
    ),
    'AutocompleteHighlightedOption': m.ClassMirror(
      'AutocompleteHighlightedOption',
      {
        '#as': AutocompleteHighlightedOption_as$,
        '#is': AutocompleteHighlightedOption_is$,
      },
      {},
    ),
  },
);
Function RawAutocomplete_as$<T extends Object>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RawAutocomplete<T>;
Function RawAutocomplete_is$<T extends Object>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RawAutocomplete<T>;
Widget Function(
        BuildContext, TextEditingController, FocusNode, void Function())?
    _RawAutocomplete_fieldViewBuilder$<T extends Object>(
        RawAutocomplete<T> target) {
  return target.fieldViewBuilder;
}

FocusNode? _RawAutocomplete_focusNode$<T extends Object>(
    RawAutocomplete<T> target) {
  return target.focusNode;
}

Widget Function(BuildContext, void Function(T), Iterable<T>)
    _RawAutocomplete_optionsViewBuilder$<T extends Object>(
        RawAutocomplete<T> target) {
  return target.optionsViewBuilder;
}

String Function(T) _RawAutocomplete_displayStringForOption$<T extends Object>(
    RawAutocomplete<T> target) {
  return target.displayStringForOption;
}

void Function(T)? _RawAutocomplete_onSelected$<T extends Object>(
    RawAutocomplete<T> target) {
  return target.onSelected;
}

FutureOr<Iterable<T>> Function(TextEditingValue)
    _RawAutocomplete_optionsBuilder$<T extends Object>(
        RawAutocomplete<T> target) {
  return target.optionsBuilder;
}

TextEditingController?
    _RawAutocomplete_textEditingController$<T extends Object>(
        RawAutocomplete<T> target) {
  return target.textEditingController;
}

TextEditingValue? _RawAutocomplete_initialValue$<T extends Object>(
    RawAutocomplete<T> target) {
  return target.initialValue;
}

Function _RawAutocomplete_onFieldSubmitted$<T extends Object>(m.Scope scope) =>
    RawAutocomplete.onFieldSubmitted<T>;
Function _RawAutocomplete_defaultStringForOption$(m.Scope scope) =>
    RawAutocomplete.defaultStringForOption;
Function _RawAutocomplete_createState$<T extends Object>(
  m.Scope scope,
  RawAutocomplete<T> target,
) =>
    target.createState;
Function AutocompletePreviousOptionIntent_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AutocompletePreviousOptionIntent;
Function AutocompletePreviousOptionIntent_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AutocompletePreviousOptionIntent;
Function AutocompleteNextOptionIntent_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AutocompleteNextOptionIntent;
Function AutocompleteNextOptionIntent_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AutocompleteNextOptionIntent;
Function AutocompleteHighlightedOption_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as AutocompleteHighlightedOption;
Function AutocompleteHighlightedOption_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is AutocompleteHighlightedOption;
Function _AutocompleteHighlightedOption_of$(m.Scope scope) =>
    AutocompleteHighlightedOption.of;
