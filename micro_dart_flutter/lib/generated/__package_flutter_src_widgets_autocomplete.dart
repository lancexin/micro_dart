// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/autocomplete.dart';
import 'dart:async';
import 'package:flutter/scheduler.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/actions.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/container.dart';
import 'package:flutter/src/widgets/editable_text.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/inherited_notifier.dart';
import 'package:flutter/src/widgets/overlay.dart';
import 'package:flutter/src/widgets/shortcuts.dart';
import 'package:flutter/src/widgets/tap_region.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/autocomplete.dart',
  {
    'RawAutocomplete.': _RawAutocomplete__$,
    'RawAutocomplete.onFieldSubmitted': _RawAutocomplete_onFieldSubmitted$,
    'RawAutocomplete.defaultStringForOption':
        _RawAutocomplete_defaultStringForOption$,
    'AutocompletePreviousOptionIntent.': _AutocompletePreviousOptionIntent__$,
    'AutocompleteNextOptionIntent.': _AutocompleteNextOptionIntent__$,
    'AutocompleteHighlightedOption.': _AutocompleteHighlightedOption__$,
    'AutocompleteHighlightedOption.of': _AutocompleteHighlightedOption_of$,
  },
  {},
  {
    'RawAutocomplete': m.ClassMirror(
      'RawAutocomplete',
      {
        '#as': RawAutocomplete_as$,
        '#is': RawAutocomplete_is$,
        'fieldViewBuilder': _RawAutocomplete_fieldViewBuilder$,
        'focusNode': _RawAutocomplete_focusNode$,
        'optionsViewBuilder': _RawAutocomplete_optionsViewBuilder$,
        'displayStringForOption': _RawAutocomplete_displayStringForOption$,
        'onSelected': _RawAutocomplete_onSelected$,
        'optionsBuilder': _RawAutocomplete_optionsBuilder$,
        'textEditingController': _RawAutocomplete_textEditingController$,
        'initialValue': _RawAutocomplete_initialValue$,
        'createState': _RawAutocomplete_createState$,
      },
      {},
    ),
    'AutocompletePreviousOptionIntent': m.ClassMirror(
      'AutocompletePreviousOptionIntent',
      {
        '#as': AutocompletePreviousOptionIntent_as$,
        '#is': AutocompletePreviousOptionIntent_is$,
      },
      {},
    ),
    'AutocompleteNextOptionIntent': m.ClassMirror(
      'AutocompleteNextOptionIntent',
      {
        '#as': AutocompleteNextOptionIntent_as$,
        '#is': AutocompleteNextOptionIntent_is$,
      },
      {},
    ),
    'AutocompleteHighlightedOption': m.ClassMirror(
      'AutocompleteHighlightedOption',
      {
        '#as': AutocompleteHighlightedOption_as$,
        '#is': AutocompleteHighlightedOption_is$,
      },
      {},
    ),
  },
);
Function RawAutocomplete_as$<T extends Object>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RawAutocomplete<T>;
Function RawAutocomplete_is$<T extends Object>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RawAutocomplete<T>;
Function _RawAutocomplete_fieldViewBuilder$<T extends Object>(
  m.Scope scope$,
  RawAutocomplete<T> target$,
) =>
    () {
      return target$.fieldViewBuilder;
    };
Function _RawAutocomplete_focusNode$<T extends Object>(
  m.Scope scope$,
  RawAutocomplete<T> target$,
) =>
    () {
      return target$.focusNode;
    };
Function _RawAutocomplete_optionsViewBuilder$<T extends Object>(
  m.Scope scope$,
  RawAutocomplete<T> target$,
) =>
    () {
      return target$.optionsViewBuilder;
    };
Function _RawAutocomplete_displayStringForOption$<T extends Object>(
  m.Scope scope$,
  RawAutocomplete<T> target$,
) =>
    () {
      return target$.displayStringForOption;
    };
Function _RawAutocomplete_onSelected$<T extends Object>(
  m.Scope scope$,
  RawAutocomplete<T> target$,
) =>
    () {
      return target$.onSelected;
    };
Function _RawAutocomplete_optionsBuilder$<T extends Object>(
  m.Scope scope$,
  RawAutocomplete<T> target$,
) =>
    () {
      return target$.optionsBuilder;
    };
Function _RawAutocomplete_textEditingController$<T extends Object>(
  m.Scope scope$,
  RawAutocomplete<T> target$,
) =>
    () {
      return target$.textEditingController;
    };
Function _RawAutocomplete_initialValue$<T extends Object>(
  m.Scope scope$,
  RawAutocomplete<T> target$,
) =>
    () {
      return target$.initialValue;
    };
Function _RawAutocomplete__$(m.Scope scope$) => <T extends Object>({
      Key? key,
      required m.FunctionPointer optionsViewBuilder,
      required m.FunctionPointer optionsBuilder,
      m.FunctionPointer? displayStringForOption,
      m.FunctionPointer? fieldViewBuilder,
      FocusNode? focusNode,
      m.FunctionPointer? onSelected,
      TextEditingController? textEditingController,
      TextEditingValue? initialValue,
    }) {
      String displayStringForOptionProxy(
              dynamic displayStringForOption_option$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            displayStringForOption!,
            [displayStringForOption_option$],
            {},
          );
      Widget fieldViewBuilderProxy(
        BuildContext fieldViewBuilder_context$,
        TextEditingController fieldViewBuilder_textEditingController$,
        FocusNode fieldViewBuilder_focusNode$,
        void Function() fieldViewBuilder_onFieldSubmitted$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            fieldViewBuilder!,
            [
              fieldViewBuilder_context$,
              fieldViewBuilder_textEditingController$,
              fieldViewBuilder_focusNode$,
              fieldViewBuilder_onFieldSubmitted$,
            ],
            {},
          );
      void onSelectedProxy(dynamic onSelected_option$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSelected!,
            [onSelected_option$],
            {},
          );
      FutureOr<Iterable<T>> optionsBuilderProxy(
              TextEditingValue optionsBuilder_textEditingValue$) async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            optionsBuilder,
            [optionsBuilder_textEditingValue$],
            {},
          );
      Widget optionsViewBuilderProxy(
        BuildContext optionsViewBuilder_context$,
        void Function(T) optionsViewBuilder_onSelected$,
        Iterable optionsViewBuilder_options$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            optionsViewBuilder,
            [
              optionsViewBuilder_context$,
              optionsViewBuilder_onSelected$,
              optionsViewBuilder_options$,
            ],
            {},
          );
      return RawAutocomplete<T>(
        displayStringForOption: displayStringForOption == null
            ? RawAutocomplete.defaultStringForOption
            : displayStringForOptionProxy,
        fieldViewBuilder:
            fieldViewBuilder == null ? null : fieldViewBuilderProxy,
        focusNode: focusNode,
        initialValue: initialValue,
        key: key,
        onSelected: onSelected == null ? null : onSelectedProxy,
        optionsBuilder: optionsBuilderProxy,
        optionsViewBuilder: optionsViewBuilderProxy,
        textEditingController: textEditingController,
      );
    };
Function _RawAutocomplete_onFieldSubmitted$<T extends Object>(m.Scope scope$) =>
    RawAutocomplete.onFieldSubmitted<T>;
Function _RawAutocomplete_defaultStringForOption$(m.Scope scope$) =>
    RawAutocomplete.defaultStringForOption;
Function _RawAutocomplete_createState$<T extends Object>(
  m.Scope scope$,
  RawAutocomplete<T> target$,
) =>
    target$.createState;
Function AutocompletePreviousOptionIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AutocompletePreviousOptionIntent;
Function AutocompletePreviousOptionIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AutocompletePreviousOptionIntent;
Function _AutocompletePreviousOptionIntent__$(m.Scope scope$) => () {
      return AutocompletePreviousOptionIntent();
    };
Function AutocompleteNextOptionIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AutocompleteNextOptionIntent;
Function AutocompleteNextOptionIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AutocompleteNextOptionIntent;
Function _AutocompleteNextOptionIntent__$(m.Scope scope$) => () {
      return AutocompleteNextOptionIntent();
    };
Function AutocompleteHighlightedOption_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AutocompleteHighlightedOption;
Function AutocompleteHighlightedOption_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AutocompleteHighlightedOption;
Function _AutocompleteHighlightedOption__$(m.Scope scope$) => ({
      Key? key,
      required ValueNotifier<int> highlightIndexNotifier,
      required Widget child,
    }) {
      return AutocompleteHighlightedOption(
        child: child,
        highlightIndexNotifier: highlightIndexNotifier,
        key: key,
      );
    };
Function _AutocompleteHighlightedOption_of$(m.Scope scope$) =>
    AutocompleteHighlightedOption.of;
