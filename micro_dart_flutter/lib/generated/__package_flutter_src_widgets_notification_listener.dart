// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/notification_listener.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/notification_listener.dart',
  {},
  {},
  {
    'Notification': m.ClassMirror(
      'Notification',
      {
        '#as': Notification_as$,
        '#is': Notification_is$,
        'dispatch': _Notification_dispatch$,
        'toString': _Notification_toString$,
        'debugFillDescription': _Notification_debugFillDescription$,
      },
      {},
    ),
    'NotificationListener': m.ClassMirror(
      'NotificationListener',
      {
        '#as': NotificationListener_as$,
        '#is': NotificationListener_is$,
        'onNotification': _NotificationListener_onNotification$,
        'createElement': _NotificationListener_createElement$,
      },
      {},
    ),
    'LayoutChangedNotification': m.ClassMirror(
      'LayoutChangedNotification',
      {
        '#as': LayoutChangedNotification_as$,
        '#is': LayoutChangedNotification_is$,
      },
      {},
    ),
  },
);
Function Notification_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Notification;
Function Notification_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Notification;
Function _Notification_dispatch$(
  m.Scope scope,
  Notification target,
) =>
    target.dispatch;
Function _Notification_toString$(
  m.Scope scope,
  Notification target,
) =>
    target.toString;
Function _Notification_debugFillDescription$(
  m.Scope scope,
  Notification target,
) =>
    target.debugFillDescription;
Function NotificationListener_as$<T extends Notification>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as NotificationListener<T>;
Function NotificationListener_is$<T extends Notification>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is NotificationListener<T>;
bool Function(T)? _NotificationListener_onNotification$<T extends Notification>(
    NotificationListener<T> target) {
  return target.onNotification;
}

Function _NotificationListener_createElement$<T extends Notification>(
  m.Scope scope,
  NotificationListener<T> target,
) =>
    target.createElement;
Function LayoutChangedNotification_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as LayoutChangedNotification;
Function LayoutChangedNotification_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is LayoutChangedNotification;
