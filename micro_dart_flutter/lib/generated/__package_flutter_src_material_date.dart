// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/date.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/material/material_localizations.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/date.dart',
  {
    'DateUtils.dateOnly': _DateUtils_dateOnly$,
    'DateUtils.datesOnly': _DateUtils_datesOnly$,
    'DateUtils.isSameDay': _DateUtils_isSameDay$,
    'DateUtils.isSameMonth': _DateUtils_isSameMonth$,
    'DateUtils.monthDelta': _DateUtils_monthDelta$,
    'DateUtils.addMonthsToMonthDate': _DateUtils_addMonthsToMonthDate$,
    'DateUtils.addDaysToDate': _DateUtils_addDaysToDate$,
    'DateUtils.firstDayOffset': _DateUtils_firstDayOffset$,
    'DateUtils.getDaysInMonth': _DateUtils_getDaysInMonth$,
    'DateTimeRange.': _DateTimeRange__$,
    'DatePickerEntryMode.calendar': _DatePickerEntryMode_calendar$,
    'DatePickerEntryMode.input': _DatePickerEntryMode_input$,
    'DatePickerEntryMode.calendarOnly': _DatePickerEntryMode_calendarOnly$,
    'DatePickerEntryMode.inputOnly': _DatePickerEntryMode_inputOnly$,
    'DatePickerEntryMode.values': _DatePickerEntryMode_values$,
    'DatePickerMode.day': _DatePickerMode_day$,
    'DatePickerMode.year': _DatePickerMode_year$,
    'DatePickerMode.values': _DatePickerMode_values$,
  },
  {},
  {
    'DateUtils': m.ClassMirror(
      'DateUtils',
      {
        '#as': DateUtils_as$,
        '#is': DateUtils_is$,
      },
      {},
    ),
    'DateTimeRange': m.ClassMirror(
      'DateTimeRange',
      {
        '#as': DateTimeRange_as$,
        '#is': DateTimeRange_is$,
        'start': _DateTimeRange_start$,
        'end': _DateTimeRange_end$,
        'duration': _DateTimeRange_duration$,
        'hashCode': _DateTimeRange_hashCode$,
        '==': _DateTimeRange_eq$$,
        'toString': _DateTimeRange_toString$,
      },
      {},
    ),
    'DatePickerEntryMode': m.ClassMirror(
      'DatePickerEntryMode',
      {},
      {},
    ),
    'DatePickerMode': m.ClassMirror(
      'DatePickerMode',
      {},
      {},
    ),
  },
);
Function DateUtils_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DateUtils;
Function DateUtils_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DateUtils;
Function _DateUtils_dateOnly$(m.Scope scope$) => DateUtils.dateOnly;
Function _DateUtils_datesOnly$(m.Scope scope$) => DateUtils.datesOnly;
Function _DateUtils_isSameDay$(m.Scope scope$) => DateUtils.isSameDay;
Function _DateUtils_isSameMonth$(m.Scope scope$) => DateUtils.isSameMonth;
Function _DateUtils_monthDelta$(m.Scope scope$) => DateUtils.monthDelta;
Function _DateUtils_addMonthsToMonthDate$(m.Scope scope$) =>
    DateUtils.addMonthsToMonthDate;
Function _DateUtils_addDaysToDate$(m.Scope scope$) => DateUtils.addDaysToDate;
Function _DateUtils_firstDayOffset$(m.Scope scope$) => DateUtils.firstDayOffset;
Function _DateUtils_getDaysInMonth$(m.Scope scope$) => DateUtils.getDaysInMonth;
Function DateTimeRange_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DateTimeRange;
Function DateTimeRange_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DateTimeRange;
Function _DateTimeRange_start$(
  m.Scope scope$,
  DateTimeRange target$,
) =>
    () {
      return target$.start;
    };
Function _DateTimeRange_end$(
  m.Scope scope$,
  DateTimeRange target$,
) =>
    () {
      return target$.end;
    };
Function _DateTimeRange_duration$(
  m.Scope scope$,
  DateTimeRange target$,
) =>
    () {
      return target$.duration;
    };
Function _DateTimeRange_hashCode$(
  m.Scope scope$,
  DateTimeRange target$,
) =>
    () {
      return target$.hashCode;
    };
Function _DateTimeRange__$(m.Scope scope$) => ({
      required DateTime start,
      required DateTime end,
    }) {
      return DateTimeRange(
        end: end,
        start: start,
      );
    };
Function _DateTimeRange_eq$$(
  m.Scope scope$,
  DateTimeRange target$,
) =>
    (Object other$) => target$ == other$;
Function _DateTimeRange_toString$(
  m.Scope scope$,
  DateTimeRange target$,
) =>
    target$.toString;
Function _DatePickerEntryMode_calendar$(m.Scope scope$) =>
    () => DatePickerEntryMode.calendar;
Function _DatePickerEntryMode_input$(m.Scope scope$) =>
    () => DatePickerEntryMode.input;
Function _DatePickerEntryMode_calendarOnly$(m.Scope scope$) =>
    () => DatePickerEntryMode.calendarOnly;
Function _DatePickerEntryMode_inputOnly$(m.Scope scope$) =>
    () => DatePickerEntryMode.inputOnly;
Function _DatePickerEntryMode_values$(m.Scope scope$) =>
    () => DatePickerEntryMode.values;
Function _DatePickerMode_day$(m.Scope scope$) => () => DatePickerMode.day;
Function _DatePickerMode_year$(m.Scope scope$) => () => DatePickerMode.year;
Function _DatePickerMode_values$(m.Scope scope$) => () => DatePickerMode.values;
