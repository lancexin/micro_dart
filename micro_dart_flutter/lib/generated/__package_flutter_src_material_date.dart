// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/date.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/material/material_localizations.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/date.dart',
  {
    'DateUtils.dateOnly': _DateUtils_dateOnly$,
    'DateUtils.datesOnly': _DateUtils_datesOnly$,
    'DateUtils.isSameDay': _DateUtils_isSameDay$,
    'DateUtils.isSameMonth': _DateUtils_isSameMonth$,
    'DateUtils.monthDelta': _DateUtils_monthDelta$,
    'DateUtils.addMonthsToMonthDate': _DateUtils_addMonthsToMonthDate$,
    'DateUtils.addDaysToDate': _DateUtils_addDaysToDate$,
    'DateUtils.firstDayOffset': _DateUtils_firstDayOffset$,
    'DateUtils.getDaysInMonth': _DateUtils_getDaysInMonth$,
    'DatePickerEntryMode.calendar': _DatePickerEntryMode_calendar$,
    'DatePickerEntryMode.input': _DatePickerEntryMode_input$,
    'DatePickerEntryMode.calendarOnly': _DatePickerEntryMode_calendarOnly$,
    'DatePickerEntryMode.inputOnly': _DatePickerEntryMode_inputOnly$,
    'DatePickerEntryMode.values': _DatePickerEntryMode_values$,
    'DatePickerMode.day': _DatePickerMode_day$,
    'DatePickerMode.year': _DatePickerMode_year$,
    'DatePickerMode.values': _DatePickerMode_values$,
  },
  {},
  {
    'DateUtils': m.ClassMirror(
      'DateUtils',
      {},
      {},
    ),
    'DateTimeRange': m.ClassMirror(
      'DateTimeRange',
      {
        'start': _DateTimeRange_start$,
        'end': _DateTimeRange_end$,
        'duration': _DateTimeRange_duration$,
        'hashCode': _DateTimeRange_hashCode$,
        'toString': _DateTimeRange_toString$,
      },
      {},
    ),
    'DatePickerEntryMode': m.ClassMirror(
      'DatePickerEntryMode',
      {},
      {},
    ),
    'DatePickerMode': m.ClassMirror(
      'DatePickerMode',
      {},
      {},
    ),
  },
);
Function _DateUtils_dateOnly$(m.Scope scope) => DateUtils.dateOnly;
Function _DateUtils_datesOnly$(m.Scope scope) => DateUtils.datesOnly;
Function _DateUtils_isSameDay$(m.Scope scope) => DateUtils.isSameDay;
Function _DateUtils_isSameMonth$(m.Scope scope) => DateUtils.isSameMonth;
Function _DateUtils_monthDelta$(m.Scope scope) => DateUtils.monthDelta;
Function _DateUtils_addMonthsToMonthDate$(m.Scope scope) =>
    DateUtils.addMonthsToMonthDate;
Function _DateUtils_addDaysToDate$(m.Scope scope) => DateUtils.addDaysToDate;
Function _DateUtils_firstDayOffset$(m.Scope scope) => DateUtils.firstDayOffset;
Function _DateUtils_getDaysInMonth$(m.Scope scope) => DateUtils.getDaysInMonth;
DateTime _DateTimeRange_start$(DateTimeRange target) {
  return target.start;
}

DateTime _DateTimeRange_end$(DateTimeRange target) {
  return target.end;
}

Duration _DateTimeRange_duration$(DateTimeRange target) {
  return target.duration;
}

int _DateTimeRange_hashCode$(DateTimeRange target) {
  return target.hashCode;
}

Function _DateTimeRange_toString$(
  m.Scope scope,
  DateTimeRange target,
) =>
    target.toString;
DatePickerEntryMode _DatePickerEntryMode_calendar$() {
  return DatePickerEntryMode.calendar;
}

DatePickerEntryMode _DatePickerEntryMode_input$() {
  return DatePickerEntryMode.input;
}

DatePickerEntryMode _DatePickerEntryMode_calendarOnly$() {
  return DatePickerEntryMode.calendarOnly;
}

DatePickerEntryMode _DatePickerEntryMode_inputOnly$() {
  return DatePickerEntryMode.inputOnly;
}

List<DatePickerEntryMode> _DatePickerEntryMode_values$() {
  return DatePickerEntryMode.values;
}

DatePickerMode _DatePickerMode_day$() {
  return DatePickerMode.day;
}

DatePickerMode _DatePickerMode_year$() {
  return DatePickerMode.year;
}

List<DatePickerMode> _DatePickerMode_values$() {
  return DatePickerMode.values;
}
