// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/dropdown_menu_theme.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/material/menu_style.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/dropdown_menu_theme.dart',
  {
    'DropdownMenuThemeData.': _DropdownMenuThemeData__$,
    'DropdownMenuThemeData.lerp': _DropdownMenuThemeData_lerp$,
    'DropdownMenuTheme.': _DropdownMenuTheme__$,
    'DropdownMenuTheme.of': _DropdownMenuTheme_of$,
    'DropdownMenuTheme.maybeOf': _DropdownMenuTheme_maybeOf$,
  },
  {},
  {
    'DropdownMenuThemeData': m.ClassMirror(
      'DropdownMenuThemeData',
      {
        '#as': DropdownMenuThemeData_as$,
        '#is': DropdownMenuThemeData_is$,
        'textStyle': _DropdownMenuThemeData_textStyle$,
        'inputDecorationTheme': _DropdownMenuThemeData_inputDecorationTheme$,
        'menuStyle': _DropdownMenuThemeData_menuStyle$,
        'hashCode': _DropdownMenuThemeData_hashCode$,
        'copyWith': _DropdownMenuThemeData_copyWith$,
        '==': _DropdownMenuThemeData_eq$$,
        'debugFillProperties': _DropdownMenuThemeData_debugFillProperties$,
      },
      {},
    ),
    'DropdownMenuTheme': m.ClassMirror(
      'DropdownMenuTheme',
      {
        '#as': DropdownMenuTheme_as$,
        '#is': DropdownMenuTheme_is$,
        'data': _DropdownMenuTheme_data$,
        'wrap': _DropdownMenuTheme_wrap$,
        'updateShouldNotify': _DropdownMenuTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function DropdownMenuThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DropdownMenuThemeData;
Function DropdownMenuThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DropdownMenuThemeData;
Function _DropdownMenuThemeData_textStyle$(
  m.Scope scope$,
  DropdownMenuThemeData target$,
) =>
    () {
      return target$.textStyle;
    };
Function _DropdownMenuThemeData_inputDecorationTheme$(
  m.Scope scope$,
  DropdownMenuThemeData target$,
) =>
    () {
      return target$.inputDecorationTheme;
    };
Function _DropdownMenuThemeData_menuStyle$(
  m.Scope scope$,
  DropdownMenuThemeData target$,
) =>
    () {
      return target$.menuStyle;
    };
Function _DropdownMenuThemeData_hashCode$(
  m.Scope scope$,
  DropdownMenuThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _DropdownMenuThemeData__$(m.Scope scope$) => ({
      TextStyle? textStyle,
      InputDecorationTheme? inputDecorationTheme,
      MenuStyle? menuStyle,
    }) {
      return DropdownMenuThemeData(
        inputDecorationTheme: inputDecorationTheme,
        menuStyle: menuStyle,
        textStyle: textStyle,
      );
    };
Function _DropdownMenuThemeData_copyWith$(
  m.Scope scope$,
  DropdownMenuThemeData target$,
) =>
    target$.copyWith;
Function _DropdownMenuThemeData_lerp$(m.Scope scope$) =>
    DropdownMenuThemeData.lerp;
Function _DropdownMenuThemeData_eq$$(
  m.Scope scope$,
  DropdownMenuThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _DropdownMenuThemeData_debugFillProperties$(
  m.Scope scope$,
  DropdownMenuThemeData target$,
) =>
    target$.debugFillProperties;
Function DropdownMenuTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DropdownMenuTheme;
Function DropdownMenuTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DropdownMenuTheme;
Function _DropdownMenuTheme_data$(
  m.Scope scope$,
  DropdownMenuTheme target$,
) =>
    () {
      return target$.data;
    };
Function _DropdownMenuTheme__$(m.Scope scope$) => ({
      Key? key,
      required DropdownMenuThemeData data,
      required Widget child,
    }) {
      return DropdownMenuTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _DropdownMenuTheme_of$(m.Scope scope$) => DropdownMenuTheme.of;
Function _DropdownMenuTheme_maybeOf$(m.Scope scope$) =>
    DropdownMenuTheme.maybeOf;
Function _DropdownMenuTheme_wrap$(
  m.Scope scope$,
  DropdownMenuTheme target$,
) =>
    target$.wrap;
Function _DropdownMenuTheme_updateShouldNotify$(
  m.Scope scope$,
  DropdownMenuTheme target$,
) =>
    target$.updateShouldNotify;
