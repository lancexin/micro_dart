// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/banner.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/banner.dart',
  {
    'BannerLocation.topStart': _BannerLocation_topStart$,
    'BannerLocation.topEnd': _BannerLocation_topEnd$,
    'BannerLocation.bottomStart': _BannerLocation_bottomStart$,
    'BannerLocation.bottomEnd': _BannerLocation_bottomEnd$,
    'BannerLocation.values': _BannerLocation_values$,
  },
  {},
  {
    'BannerPainter': m.ClassMirror(
      'BannerPainter',
      {
        '#as': BannerPainter_as$,
        '#is': BannerPainter_is$,
        'message': _BannerPainter_message$,
        'textDirection': _BannerPainter_textDirection$,
        'location': _BannerPainter_location$,
        'layoutDirection': _BannerPainter_layoutDirection$,
        'color': _BannerPainter_color$,
        'textStyle': _BannerPainter_textStyle$,
        'dispose': _BannerPainter_dispose$,
        'paint': _BannerPainter_paint$,
        'shouldRepaint': _BannerPainter_shouldRepaint$,
        'hitTest': _BannerPainter_hitTest$,
      },
      {},
    ),
    'Banner': m.ClassMirror(
      'Banner',
      {
        '#as': Banner_as$,
        '#is': Banner_is$,
        'child': _Banner_child$,
        'message': _Banner_message$,
        'textDirection': _Banner_textDirection$,
        'location': _Banner_location$,
        'layoutDirection': _Banner_layoutDirection$,
        'color': _Banner_color$,
        'textStyle': _Banner_textStyle$,
        'build': _Banner_build$,
        'debugFillProperties': _Banner_debugFillProperties$,
      },
      {},
    ),
    'CheckedModeBanner': m.ClassMirror(
      'CheckedModeBanner',
      {
        '#as': CheckedModeBanner_as$,
        '#is': CheckedModeBanner_is$,
        'child': _CheckedModeBanner_child$,
        'build': _CheckedModeBanner_build$,
        'debugFillProperties': _CheckedModeBanner_debugFillProperties$,
      },
      {},
    ),
    'BannerLocation': m.ClassMirror(
      'BannerLocation',
      {},
      {},
    ),
  },
);
Function BannerPainter_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as BannerPainter;
Function BannerPainter_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is BannerPainter;
String _BannerPainter_message$(BannerPainter target) {
  return target.message;
}

TextDirection _BannerPainter_textDirection$(BannerPainter target) {
  return target.textDirection;
}

BannerLocation _BannerPainter_location$(BannerPainter target) {
  return target.location;
}

TextDirection _BannerPainter_layoutDirection$(BannerPainter target) {
  return target.layoutDirection;
}

Color _BannerPainter_color$(BannerPainter target) {
  return target.color;
}

TextStyle _BannerPainter_textStyle$(BannerPainter target) {
  return target.textStyle;
}

Function _BannerPainter_dispose$(
  m.Scope scope,
  BannerPainter target,
) =>
    target.dispose;
Function _BannerPainter_paint$(
  m.Scope scope,
  BannerPainter target,
) =>
    target.paint;
Function _BannerPainter_shouldRepaint$(
  m.Scope scope,
  BannerPainter target,
) =>
    target.shouldRepaint;
Function _BannerPainter_hitTest$(
  m.Scope scope,
  BannerPainter target,
) =>
    target.hitTest;
Function Banner_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Banner;
Function Banner_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Banner;
Widget? _Banner_child$(Banner target) {
  return target.child;
}

String _Banner_message$(Banner target) {
  return target.message;
}

TextDirection? _Banner_textDirection$(Banner target) {
  return target.textDirection;
}

BannerLocation _Banner_location$(Banner target) {
  return target.location;
}

TextDirection? _Banner_layoutDirection$(Banner target) {
  return target.layoutDirection;
}

Color _Banner_color$(Banner target) {
  return target.color;
}

TextStyle _Banner_textStyle$(Banner target) {
  return target.textStyle;
}

Function _Banner_build$(
  m.Scope scope,
  Banner target,
) =>
    target.build;
Function _Banner_debugFillProperties$(
  m.Scope scope,
  Banner target,
) =>
    target.debugFillProperties;
Function CheckedModeBanner_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CheckedModeBanner;
Function CheckedModeBanner_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CheckedModeBanner;
Widget _CheckedModeBanner_child$(CheckedModeBanner target) {
  return target.child;
}

Function _CheckedModeBanner_build$(
  m.Scope scope,
  CheckedModeBanner target,
) =>
    target.build;
Function _CheckedModeBanner_debugFillProperties$(
  m.Scope scope,
  CheckedModeBanner target,
) =>
    target.debugFillProperties;
BannerLocation _BannerLocation_topStart$() {
  return BannerLocation.topStart;
}

BannerLocation _BannerLocation_topEnd$() {
  return BannerLocation.topEnd;
}

BannerLocation _BannerLocation_bottomStart$() {
  return BannerLocation.bottomStart;
}

BannerLocation _BannerLocation_bottomEnd$() {
  return BannerLocation.bottomEnd;
}

List<BannerLocation> _BannerLocation_values$() {
  return BannerLocation.values;
}
