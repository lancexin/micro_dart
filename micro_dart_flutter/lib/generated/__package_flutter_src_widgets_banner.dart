// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/banner.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/banner.dart',
  {
    'BannerPainter.': _BannerPainter__$,
    'Banner.': _Banner__$,
    'CheckedModeBanner.': _CheckedModeBanner__$,
    'BannerLocation.topStart': _BannerLocation_topStart$,
    'BannerLocation.topEnd': _BannerLocation_topEnd$,
    'BannerLocation.bottomStart': _BannerLocation_bottomStart$,
    'BannerLocation.bottomEnd': _BannerLocation_bottomEnd$,
    'BannerLocation.values': _BannerLocation_values$,
  },
  {},
  {
    'BannerPainter': m.ClassMirror(
      'BannerPainter',
      {
        '#as': BannerPainter_as$,
        '#is': BannerPainter_is$,
        'message': _BannerPainter_message$,
        'textDirection': _BannerPainter_textDirection$,
        'location': _BannerPainter_location$,
        'layoutDirection': _BannerPainter_layoutDirection$,
        'color': _BannerPainter_color$,
        'textStyle': _BannerPainter_textStyle$,
        'dispose': _BannerPainter_dispose$,
        'paint': _BannerPainter_paint$,
        'shouldRepaint': _BannerPainter_shouldRepaint$,
        'hitTest': _BannerPainter_hitTest$,
      },
      {},
    ),
    'Banner': m.ClassMirror(
      'Banner',
      {
        '#as': Banner_as$,
        '#is': Banner_is$,
        'child': _Banner_child$,
        'message': _Banner_message$,
        'textDirection': _Banner_textDirection$,
        'location': _Banner_location$,
        'layoutDirection': _Banner_layoutDirection$,
        'color': _Banner_color$,
        'textStyle': _Banner_textStyle$,
        'build': _Banner_build$,
        'debugFillProperties': _Banner_debugFillProperties$,
      },
      {},
    ),
    'CheckedModeBanner': m.ClassMirror(
      'CheckedModeBanner',
      {
        '#as': CheckedModeBanner_as$,
        '#is': CheckedModeBanner_is$,
        'child': _CheckedModeBanner_child$,
        'build': _CheckedModeBanner_build$,
        'debugFillProperties': _CheckedModeBanner_debugFillProperties$,
      },
      {},
    ),
    'BannerLocation': m.ClassMirror(
      'BannerLocation',
      {},
      {},
    ),
  },
);
Function BannerPainter_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as BannerPainter;
Function BannerPainter_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is BannerPainter;
Function _BannerPainter_message$(
  m.Scope scope$,
  BannerPainter target$,
) =>
    () {
      return target$.message;
    };
Function _BannerPainter_textDirection$(
  m.Scope scope$,
  BannerPainter target$,
) =>
    () {
      return target$.textDirection;
    };
Function _BannerPainter_location$(
  m.Scope scope$,
  BannerPainter target$,
) =>
    () {
      return target$.location;
    };
Function _BannerPainter_layoutDirection$(
  m.Scope scope$,
  BannerPainter target$,
) =>
    () {
      return target$.layoutDirection;
    };
Function _BannerPainter_color$(
  m.Scope scope$,
  BannerPainter target$,
) =>
    () {
      return target$.color;
    };
Function _BannerPainter_textStyle$(
  m.Scope scope$,
  BannerPainter target$,
) =>
    () {
      return target$.textStyle;
    };
Function _BannerPainter__$(m.Scope scope$) => ({
      required String message,
      required TextDirection textDirection,
      required BannerLocation location,
      required TextDirection layoutDirection,
      Color? color,
      TextStyle? textStyle,
    }) {
      return BannerPainter(
        color: color ?? _kColor,
        layoutDirection: layoutDirection,
        location: location,
        message: message,
        textDirection: textDirection,
        textStyle: textStyle ?? _kTextStyle,
      );
    };
Function _BannerPainter_dispose$(
  m.Scope scope$,
  BannerPainter target$,
) =>
    target$.dispose;
Function _BannerPainter_paint$(
  m.Scope scope$,
  BannerPainter target$,
) =>
    target$.paint;
Function _BannerPainter_shouldRepaint$(
  m.Scope scope$,
  BannerPainter target$,
) =>
    target$.shouldRepaint;
Function _BannerPainter_hitTest$(
  m.Scope scope$,
  BannerPainter target$,
) =>
    target$.hitTest;
Function Banner_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Banner;
Function Banner_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Banner;
Function _Banner_child$(
  m.Scope scope$,
  Banner target$,
) =>
    () {
      return target$.child;
    };
Function _Banner_message$(
  m.Scope scope$,
  Banner target$,
) =>
    () {
      return target$.message;
    };
Function _Banner_textDirection$(
  m.Scope scope$,
  Banner target$,
) =>
    () {
      return target$.textDirection;
    };
Function _Banner_location$(
  m.Scope scope$,
  Banner target$,
) =>
    () {
      return target$.location;
    };
Function _Banner_layoutDirection$(
  m.Scope scope$,
  Banner target$,
) =>
    () {
      return target$.layoutDirection;
    };
Function _Banner_color$(
  m.Scope scope$,
  Banner target$,
) =>
    () {
      return target$.color;
    };
Function _Banner_textStyle$(
  m.Scope scope$,
  Banner target$,
) =>
    () {
      return target$.textStyle;
    };
Function _Banner__$(m.Scope scope$) => ({
      Key? key,
      Widget? child,
      required String message,
      TextDirection? textDirection,
      required BannerLocation location,
      TextDirection? layoutDirection,
      Color? color,
      TextStyle? textStyle,
    }) {
      return Banner(
        child: child,
        color: color ?? _kColor,
        key: key,
        layoutDirection: layoutDirection,
        location: location,
        message: message,
        textDirection: textDirection,
        textStyle: textStyle ?? _kTextStyle,
      );
    };
Function _Banner_build$(
  m.Scope scope$,
  Banner target$,
) =>
    target$.build;
Function _Banner_debugFillProperties$(
  m.Scope scope$,
  Banner target$,
) =>
    target$.debugFillProperties;
Function CheckedModeBanner_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CheckedModeBanner;
Function CheckedModeBanner_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CheckedModeBanner;
Function _CheckedModeBanner_child$(
  m.Scope scope$,
  CheckedModeBanner target$,
) =>
    () {
      return target$.child;
    };
Function _CheckedModeBanner__$(m.Scope scope$) => ({
      Key? key,
      required Widget child,
    }) {
      return CheckedModeBanner(
        child: child,
        key: key,
      );
    };
Function _CheckedModeBanner_build$(
  m.Scope scope$,
  CheckedModeBanner target$,
) =>
    target$.build;
Function _CheckedModeBanner_debugFillProperties$(
  m.Scope scope$,
  CheckedModeBanner target$,
) =>
    target$.debugFillProperties;
Function _BannerLocation_topStart$(m.Scope scope$) =>
    () => BannerLocation.topStart;
Function _BannerLocation_topEnd$(m.Scope scope$) => () => BannerLocation.topEnd;
Function _BannerLocation_bottomStart$(m.Scope scope$) =>
    () => BannerLocation.bottomStart;
Function _BannerLocation_bottomEnd$(m.Scope scope$) =>
    () => BannerLocation.bottomEnd;
Function _BannerLocation_values$(m.Scope scope$) => () => BannerLocation.values;
const double _kOffset =
    40.0; // distance to bottom of banner, at a 45 degree angle inwards
const double _kHeight = 12.0; // height of banner
const double _kBottomOffset =
    _kOffset + 0.707 * _kHeight; // offset plus sqrt(2)/2 * banner height
const Rect _kRect =
    Rect.fromLTWH(-_kOffset, _kOffset - _kHeight, _kOffset * 2.0, _kHeight);

const Color _kColor = Color(0xA0B71C1C);
const TextStyle _kTextStyle = TextStyle(
  color: Color(0xFFFFFFFF),
  fontSize: _kHeight * 0.85,
  fontWeight: FontWeight.w900,
  height: 1.0,
);
