// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/drawer_header.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/divider.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/drawer_header.dart',
  {'DrawerHeader.': _DrawerHeader__$},
  {},
  {
    'DrawerHeader': m.ClassMirror(
      'DrawerHeader',
      {
        '#as': DrawerHeader_as$,
        '#is': DrawerHeader_is$,
        'decoration': _DrawerHeader_decoration$,
        'padding': _DrawerHeader_padding$,
        'margin': _DrawerHeader_margin$,
        'duration': _DrawerHeader_duration$,
        'curve': _DrawerHeader_curve$,
        'child': _DrawerHeader_child$,
        'build': _DrawerHeader_build$,
      },
      {},
    )
  },
);
Function DrawerHeader_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DrawerHeader;
Function DrawerHeader_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DrawerHeader;
Function _DrawerHeader_decoration$(
  m.Scope scope$,
  DrawerHeader target$,
) =>
    () {
      return target$.decoration;
    };
Function _DrawerHeader_padding$(
  m.Scope scope$,
  DrawerHeader target$,
) =>
    () {
      return target$.padding;
    };
Function _DrawerHeader_margin$(
  m.Scope scope$,
  DrawerHeader target$,
) =>
    () {
      return target$.margin;
    };
Function _DrawerHeader_duration$(
  m.Scope scope$,
  DrawerHeader target$,
) =>
    () {
      return target$.duration;
    };
Function _DrawerHeader_curve$(
  m.Scope scope$,
  DrawerHeader target$,
) =>
    () {
      return target$.curve;
    };
Function _DrawerHeader_child$(
  m.Scope scope$,
  DrawerHeader target$,
) =>
    () {
      return target$.child;
    };
Function _DrawerHeader__$(m.Scope scope$) => ({
      Key? key,
      Decoration? decoration,
      EdgeInsetsGeometry? margin,
      EdgeInsetsGeometry? padding,
      Duration? duration,
      Curve? curve,
      required Widget? child,
    }) {
      return DrawerHeader(
        child: child,
        curve: curve ?? Curves.fastOutSlowIn,
        decoration: decoration,
        duration: duration ?? const Duration(milliseconds: 250),
        key: key,
        margin: margin ?? const EdgeInsets.only(bottom: 8.0),
        padding: padding ?? const EdgeInsets.fromLTRB(16.0, 16.0, 16.0, 8.0),
      );
    };
Function _DrawerHeader_build$(
  m.Scope scope$,
  DrawerHeader target$,
) =>
    target$.build;
