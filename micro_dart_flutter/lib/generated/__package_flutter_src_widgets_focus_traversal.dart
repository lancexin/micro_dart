// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/focus_traversal.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/widgets/actions.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/focus_scope.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/scroll_position.dart';
import 'package:flutter/src/widgets/scrollable.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/focus_traversal.dart',
  {
    'FocusTraversalOrder.of': _FocusTraversalOrder_of$,
    'FocusTraversalOrder.maybeOf': _FocusTraversalOrder_maybeOf$,
    'FocusTraversalGroup.maybeOfNode': _FocusTraversalGroup_maybeOfNode$,
    'FocusTraversalGroup.of': _FocusTraversalGroup_of$,
    'FocusTraversalGroup.maybeOf': _FocusTraversalGroup_maybeOf$,
    'TraversalDirection.up': _TraversalDirection_up$,
    'TraversalDirection.right': _TraversalDirection_right$,
    'TraversalDirection.down': _TraversalDirection_down$,
    'TraversalDirection.left': _TraversalDirection_left$,
    'TraversalDirection.values': _TraversalDirection_values$,
    'TraversalEdgeBehavior.closedLoop': _TraversalEdgeBehavior_closedLoop$,
    'TraversalEdgeBehavior.leaveFlutterView':
        _TraversalEdgeBehavior_leaveFlutterView$,
    'TraversalEdgeBehavior.values': _TraversalEdgeBehavior_values$,
  },
  {},
  {
    'FocusTraversalPolicy': m.ClassMirror(
      'FocusTraversalPolicy',
      {
        'findFirstFocus': _FocusTraversalPolicy_findFirstFocus$,
        'findLastFocus': _FocusTraversalPolicy_findLastFocus$,
        'findFirstFocusInDirection':
            _FocusTraversalPolicy_findFirstFocusInDirection$,
        'invalidateScopeData': _FocusTraversalPolicy_invalidateScopeData$,
        'changedScope': _FocusTraversalPolicy_changedScope$,
        'next': _FocusTraversalPolicy_next$,
        'previous': _FocusTraversalPolicy_previous$,
        'inDirection': _FocusTraversalPolicy_inDirection$,
        'sortDescendants': _FocusTraversalPolicy_sortDescendants$,
      },
      {},
    ),
    'WidgetOrderTraversalPolicy': m.ClassMirror(
      'WidgetOrderTraversalPolicy',
      {'sortDescendants': _WidgetOrderTraversalPolicy_sortDescendants$},
      {},
    ),
    'ReadingOrderTraversalPolicy': m.ClassMirror(
      'ReadingOrderTraversalPolicy',
      {'sortDescendants': _ReadingOrderTraversalPolicy_sortDescendants$},
      {},
    ),
    'FocusOrder': m.ClassMirror(
      'FocusOrder',
      {
        'compareTo': _FocusOrder_compareTo$,
        'doCompare': _FocusOrder_doCompare$,
      },
      {},
    ),
    'NumericFocusOrder': m.ClassMirror(
      'NumericFocusOrder',
      {
        'order': _NumericFocusOrder_order$,
        'doCompare': _NumericFocusOrder_doCompare$,
        'debugFillProperties': _NumericFocusOrder_debugFillProperties$,
      },
      {},
    ),
    'LexicalFocusOrder': m.ClassMirror(
      'LexicalFocusOrder',
      {
        'order': _LexicalFocusOrder_order$,
        'doCompare': _LexicalFocusOrder_doCompare$,
        'debugFillProperties': _LexicalFocusOrder_debugFillProperties$,
      },
      {},
    ),
    'OrderedTraversalPolicy': m.ClassMirror(
      'OrderedTraversalPolicy',
      {
        'secondary': _OrderedTraversalPolicy_secondary$,
        'sortDescendants': _OrderedTraversalPolicy_sortDescendants$,
      },
      {},
    ),
    'FocusTraversalOrder': m.ClassMirror(
      'FocusTraversalOrder',
      {
        'order': _FocusTraversalOrder_order$,
        'updateShouldNotify': _FocusTraversalOrder_updateShouldNotify$,
        'debugFillProperties': _FocusTraversalOrder_debugFillProperties$,
      },
      {},
    ),
    'FocusTraversalGroup': m.ClassMirror(
      'FocusTraversalGroup',
      {
        'policy': _FocusTraversalGroup_policy$,
        'descendantsAreFocusable':
            _FocusTraversalGroup_descendantsAreFocusable$,
        'descendantsAreTraversable':
            _FocusTraversalGroup_descendantsAreTraversable$,
        'child': _FocusTraversalGroup_child$,
        'createState': _FocusTraversalGroup_createState$,
        'debugFillProperties': _FocusTraversalGroup_debugFillProperties$,
      },
      {},
    ),
    'RequestFocusIntent': m.ClassMirror(
      'RequestFocusIntent',
      {'focusNode': _RequestFocusIntent_focusNode$},
      {},
    ),
    'RequestFocusAction': m.ClassMirror(
      'RequestFocusAction',
      {'invoke': _RequestFocusAction_invoke$},
      {},
    ),
    'NextFocusIntent': m.ClassMirror(
      'NextFocusIntent',
      {},
      {},
    ),
    'NextFocusAction': m.ClassMirror(
      'NextFocusAction',
      {
        'invoke': _NextFocusAction_invoke$,
        'toKeyEventResult': _NextFocusAction_toKeyEventResult$,
      },
      {},
    ),
    'PreviousFocusIntent': m.ClassMirror(
      'PreviousFocusIntent',
      {},
      {},
    ),
    'PreviousFocusAction': m.ClassMirror(
      'PreviousFocusAction',
      {
        'invoke': _PreviousFocusAction_invoke$,
        'toKeyEventResult': _PreviousFocusAction_toKeyEventResult$,
      },
      {},
    ),
    'DirectionalFocusIntent': m.ClassMirror(
      'DirectionalFocusIntent',
      {
        'direction': _DirectionalFocusIntent_direction$,
        'ignoreTextFields': _DirectionalFocusIntent_ignoreTextFields$,
        'debugFillProperties': _DirectionalFocusIntent_debugFillProperties$,
      },
      {},
    ),
    'DirectionalFocusAction': m.ClassMirror(
      'DirectionalFocusAction',
      {'invoke': _DirectionalFocusAction_invoke$},
      {},
    ),
    'ExcludeFocusTraversal': m.ClassMirror(
      'ExcludeFocusTraversal',
      {
        'excluding': _ExcludeFocusTraversal_excluding$,
        'child': _ExcludeFocusTraversal_child$,
        'build': _ExcludeFocusTraversal_build$,
      },
      {},
    ),
    'TraversalDirection': m.ClassMirror(
      'TraversalDirection',
      {},
      {},
    ),
    'TraversalEdgeBehavior': m.ClassMirror(
      'TraversalEdgeBehavior',
      {},
      {},
    ),
  },
);
Function _FocusTraversalPolicy_findFirstFocus$(
  m.Scope scope,
  FocusTraversalPolicy target,
) =>
    target.findFirstFocus;
Function _FocusTraversalPolicy_findLastFocus$(
  m.Scope scope,
  FocusTraversalPolicy target,
) =>
    target.findLastFocus;
Function _FocusTraversalPolicy_findFirstFocusInDirection$(
  m.Scope scope,
  FocusTraversalPolicy target,
) =>
    target.findFirstFocusInDirection;
Function _FocusTraversalPolicy_invalidateScopeData$(
  m.Scope scope,
  FocusTraversalPolicy target,
) =>
    target.invalidateScopeData;
Function _FocusTraversalPolicy_changedScope$(
  m.Scope scope,
  FocusTraversalPolicy target,
) =>
    target.changedScope;
Function _FocusTraversalPolicy_next$(
  m.Scope scope,
  FocusTraversalPolicy target,
) =>
    target.next;
Function _FocusTraversalPolicy_previous$(
  m.Scope scope,
  FocusTraversalPolicy target,
) =>
    target.previous;
Function _FocusTraversalPolicy_inDirection$(
  m.Scope scope,
  FocusTraversalPolicy target,
) =>
    target.inDirection;
Function _FocusTraversalPolicy_sortDescendants$(
  m.Scope scope,
  FocusTraversalPolicy target,
) =>
    target.sortDescendants;
Function _WidgetOrderTraversalPolicy_sortDescendants$(
  m.Scope scope,
  WidgetOrderTraversalPolicy target,
) =>
    target.sortDescendants;
Function _ReadingOrderTraversalPolicy_sortDescendants$(
  m.Scope scope,
  ReadingOrderTraversalPolicy target,
) =>
    target.sortDescendants;
Function _FocusOrder_compareTo$(
  m.Scope scope,
  FocusOrder target,
) =>
    target.compareTo;
Function _FocusOrder_doCompare$(
  m.Scope scope,
  FocusOrder target,
) =>
    target.doCompare;
double _NumericFocusOrder_order$(NumericFocusOrder target) {
  return target.order;
}

Function _NumericFocusOrder_doCompare$(
  m.Scope scope,
  NumericFocusOrder target,
) =>
    target.doCompare;
Function _NumericFocusOrder_debugFillProperties$(
  m.Scope scope,
  NumericFocusOrder target,
) =>
    target.debugFillProperties;
String _LexicalFocusOrder_order$(LexicalFocusOrder target) {
  return target.order;
}

Function _LexicalFocusOrder_doCompare$(
  m.Scope scope,
  LexicalFocusOrder target,
) =>
    target.doCompare;
Function _LexicalFocusOrder_debugFillProperties$(
  m.Scope scope,
  LexicalFocusOrder target,
) =>
    target.debugFillProperties;
FocusTraversalPolicy? _OrderedTraversalPolicy_secondary$(
    OrderedTraversalPolicy target) {
  return target.secondary;
}

Function _OrderedTraversalPolicy_sortDescendants$(
  m.Scope scope,
  OrderedTraversalPolicy target,
) =>
    target.sortDescendants;
FocusOrder _FocusTraversalOrder_order$(FocusTraversalOrder target) {
  return target.order;
}

Function _FocusTraversalOrder_of$(m.Scope scope) => FocusTraversalOrder.of;
Function _FocusTraversalOrder_maybeOf$(m.Scope scope) =>
    FocusTraversalOrder.maybeOf;
Function _FocusTraversalOrder_updateShouldNotify$(
  m.Scope scope,
  FocusTraversalOrder target,
) =>
    target.updateShouldNotify;
Function _FocusTraversalOrder_debugFillProperties$(
  m.Scope scope,
  FocusTraversalOrder target,
) =>
    target.debugFillProperties;
FocusTraversalPolicy _FocusTraversalGroup_policy$(FocusTraversalGroup target) {
  return target.policy;
}

bool _FocusTraversalGroup_descendantsAreFocusable$(FocusTraversalGroup target) {
  return target.descendantsAreFocusable;
}

bool _FocusTraversalGroup_descendantsAreTraversable$(
    FocusTraversalGroup target) {
  return target.descendantsAreTraversable;
}

Widget _FocusTraversalGroup_child$(FocusTraversalGroup target) {
  return target.child;
}

Function _FocusTraversalGroup_maybeOfNode$(m.Scope scope) =>
    FocusTraversalGroup.maybeOfNode;
Function _FocusTraversalGroup_of$(m.Scope scope) => FocusTraversalGroup.of;
Function _FocusTraversalGroup_maybeOf$(m.Scope scope) =>
    FocusTraversalGroup.maybeOf;
Function _FocusTraversalGroup_createState$(
  m.Scope scope,
  FocusTraversalGroup target,
) =>
    target.createState;
Function _FocusTraversalGroup_debugFillProperties$(
  m.Scope scope,
  FocusTraversalGroup target,
) =>
    target.debugFillProperties;
FocusNode _RequestFocusIntent_focusNode$(RequestFocusIntent target) {
  return target.focusNode;
}

Function _RequestFocusAction_invoke$(
  m.Scope scope,
  RequestFocusAction target,
) =>
    target.invoke;
Function _NextFocusAction_invoke$(
  m.Scope scope,
  NextFocusAction target,
) =>
    target.invoke;
Function _NextFocusAction_toKeyEventResult$(
  m.Scope scope,
  NextFocusAction target,
) =>
    target.toKeyEventResult;
Function _PreviousFocusAction_invoke$(
  m.Scope scope,
  PreviousFocusAction target,
) =>
    target.invoke;
Function _PreviousFocusAction_toKeyEventResult$(
  m.Scope scope,
  PreviousFocusAction target,
) =>
    target.toKeyEventResult;
TraversalDirection _DirectionalFocusIntent_direction$(
    DirectionalFocusIntent target) {
  return target.direction;
}

bool _DirectionalFocusIntent_ignoreTextFields$(DirectionalFocusIntent target) {
  return target.ignoreTextFields;
}

Function _DirectionalFocusIntent_debugFillProperties$(
  m.Scope scope,
  DirectionalFocusIntent target,
) =>
    target.debugFillProperties;
Function _DirectionalFocusAction_invoke$(
  m.Scope scope,
  DirectionalFocusAction target,
) =>
    target.invoke;
bool _ExcludeFocusTraversal_excluding$(ExcludeFocusTraversal target) {
  return target.excluding;
}

Widget _ExcludeFocusTraversal_child$(ExcludeFocusTraversal target) {
  return target.child;
}

Function _ExcludeFocusTraversal_build$(
  m.Scope scope,
  ExcludeFocusTraversal target,
) =>
    target.build;
TraversalDirection _TraversalDirection_up$() {
  return TraversalDirection.up;
}

TraversalDirection _TraversalDirection_right$() {
  return TraversalDirection.right;
}

TraversalDirection _TraversalDirection_down$() {
  return TraversalDirection.down;
}

TraversalDirection _TraversalDirection_left$() {
  return TraversalDirection.left;
}

List<TraversalDirection> _TraversalDirection_values$() {
  return TraversalDirection.values;
}

TraversalEdgeBehavior _TraversalEdgeBehavior_closedLoop$() {
  return TraversalEdgeBehavior.closedLoop;
}

TraversalEdgeBehavior _TraversalEdgeBehavior_leaveFlutterView$() {
  return TraversalEdgeBehavior.leaveFlutterView;
}

List<TraversalEdgeBehavior> _TraversalEdgeBehavior_values$() {
  return TraversalEdgeBehavior.values;
}
