// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/basic.dart';
import 'dart:math';
import 'dart:ui' show Image, ImageFilter, TextHeightBehavior;
import 'package:flutter/animation.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/binding.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/localizations.dart';
import 'package:flutter/src/widgets/visibility.dart';
import 'package:flutter/src/widgets/widget_span.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/basic.dart',
  {
    'Directionality.of': _Directionality_of$,
    'Directionality.maybeOf': _Directionality_maybeOf$,
    'ClipPath.shape': _ClipPath_shape$,
    'ConstraintsTransformBox.unmodified': _ConstraintsTransformBox_unmodified$,
    'ConstraintsTransformBox.unconstrained':
        _ConstraintsTransformBox_unconstrained$,
    'ConstraintsTransformBox.widthUnconstrained':
        _ConstraintsTransformBox_widthUnconstrained$,
    'ConstraintsTransformBox.heightUnconstrained':
        _ConstraintsTransformBox_heightUnconstrained$,
    'ConstraintsTransformBox.maxHeightUnconstrained':
        _ConstraintsTransformBox_maxHeightUnconstrained$,
    'ConstraintsTransformBox.maxWidthUnconstrained':
        _ConstraintsTransformBox_maxWidthUnconstrained$,
    'ConstraintsTransformBox.maxUnconstrained':
        _ConstraintsTransformBox_maxUnconstrained$,
    'DefaultAssetBundle.of': _DefaultAssetBundle_of$,
    'RepaintBoundary.wrapAll': _RepaintBoundary_wrapAll$,
    'KeyedSubtree.ensureUniqueKeysForList':
        _KeyedSubtree_ensureUniqueKeysForList$,
    'getAxisDirectionFromAxisReverseAndDirectionality':
        _getAxisDirectionFromAxisReverseAndDirectionality$,
  },
  {},
  {
    'Directionality': m.ClassMirror(
      'Directionality',
      {
        'textDirection': _Directionality_textDirection$,
        'updateShouldNotify': _Directionality_updateShouldNotify$,
        'debugFillProperties': _Directionality_debugFillProperties$,
      },
      {},
    ),
    'Opacity': m.ClassMirror(
      'Opacity',
      {
        'opacity': _Opacity_opacity$,
        'alwaysIncludeSemantics': _Opacity_alwaysIncludeSemantics$,
        'createRenderObject': _Opacity_createRenderObject$,
        'updateRenderObject': _Opacity_updateRenderObject$,
        'debugFillProperties': _Opacity_debugFillProperties$,
      },
      {},
    ),
    'ShaderMask': m.ClassMirror(
      'ShaderMask',
      {
        'shaderCallback': _ShaderMask_shaderCallback$,
        'blendMode': _ShaderMask_blendMode$,
        'createRenderObject': _ShaderMask_createRenderObject$,
        'updateRenderObject': _ShaderMask_updateRenderObject$,
      },
      {},
    ),
    'BackdropFilter': m.ClassMirror(
      'BackdropFilter',
      {
        'filter': _BackdropFilter_filter$,
        'blendMode': _BackdropFilter_blendMode$,
        'createRenderObject': _BackdropFilter_createRenderObject$,
        'updateRenderObject': _BackdropFilter_updateRenderObject$,
      },
      {},
    ),
    'CustomPaint': m.ClassMirror(
      'CustomPaint',
      {
        'painter': _CustomPaint_painter$,
        'foregroundPainter': _CustomPaint_foregroundPainter$,
        'size': _CustomPaint_size$,
        'isComplex': _CustomPaint_isComplex$,
        'willChange': _CustomPaint_willChange$,
        'createRenderObject': _CustomPaint_createRenderObject$,
        'updateRenderObject': _CustomPaint_updateRenderObject$,
        'didUnmountRenderObject': _CustomPaint_didUnmountRenderObject$,
      },
      {},
    ),
    'ClipRect': m.ClassMirror(
      'ClipRect',
      {
        'clipper': _ClipRect_clipper$,
        'clipBehavior': _ClipRect_clipBehavior$,
        'createRenderObject': _ClipRect_createRenderObject$,
        'updateRenderObject': _ClipRect_updateRenderObject$,
        'didUnmountRenderObject': _ClipRect_didUnmountRenderObject$,
        'debugFillProperties': _ClipRect_debugFillProperties$,
      },
      {},
    ),
    'ClipRRect': m.ClassMirror(
      'ClipRRect',
      {
        'borderRadius': _ClipRRect_borderRadius$,
        'clipper': _ClipRRect_clipper$,
        'clipBehavior': _ClipRRect_clipBehavior$,
        'createRenderObject': _ClipRRect_createRenderObject$,
        'updateRenderObject': _ClipRRect_updateRenderObject$,
        'debugFillProperties': _ClipRRect_debugFillProperties$,
      },
      {},
    ),
    'ClipOval': m.ClassMirror(
      'ClipOval',
      {
        'clipper': _ClipOval_clipper$,
        'clipBehavior': _ClipOval_clipBehavior$,
        'createRenderObject': _ClipOval_createRenderObject$,
        'updateRenderObject': _ClipOval_updateRenderObject$,
        'didUnmountRenderObject': _ClipOval_didUnmountRenderObject$,
        'debugFillProperties': _ClipOval_debugFillProperties$,
      },
      {},
    ),
    'ClipPath': m.ClassMirror(
      'ClipPath',
      {
        'clipper': _ClipPath_clipper$,
        'clipBehavior': _ClipPath_clipBehavior$,
        'createRenderObject': _ClipPath_createRenderObject$,
        'updateRenderObject': _ClipPath_updateRenderObject$,
        'didUnmountRenderObject': _ClipPath_didUnmountRenderObject$,
        'debugFillProperties': _ClipPath_debugFillProperties$,
      },
      {},
    ),
    'PhysicalModel': m.ClassMirror(
      'PhysicalModel',
      {
        'shape': _PhysicalModel_shape$,
        'clipBehavior': _PhysicalModel_clipBehavior$,
        'borderRadius': _PhysicalModel_borderRadius$,
        'elevation': _PhysicalModel_elevation$,
        'color': _PhysicalModel_color$,
        'shadowColor': _PhysicalModel_shadowColor$,
        'createRenderObject': _PhysicalModel_createRenderObject$,
        'updateRenderObject': _PhysicalModel_updateRenderObject$,
        'debugFillProperties': _PhysicalModel_debugFillProperties$,
      },
      {},
    ),
    'PhysicalShape': m.ClassMirror(
      'PhysicalShape',
      {
        'clipper': _PhysicalShape_clipper$,
        'clipBehavior': _PhysicalShape_clipBehavior$,
        'elevation': _PhysicalShape_elevation$,
        'color': _PhysicalShape_color$,
        'shadowColor': _PhysicalShape_shadowColor$,
        'createRenderObject': _PhysicalShape_createRenderObject$,
        'updateRenderObject': _PhysicalShape_updateRenderObject$,
        'debugFillProperties': _PhysicalShape_debugFillProperties$,
      },
      {},
    ),
    'Transform': m.ClassMirror(
      'Transform',
      {
        'transform': _Transform_transform$,
        'origin': _Transform_origin$,
        'alignment': _Transform_alignment$,
        'transformHitTests': _Transform_transformHitTests$,
        'filterQuality': _Transform_filterQuality$,
        'createRenderObject': _Transform_createRenderObject$,
        'updateRenderObject': _Transform_updateRenderObject$,
      },
      {},
    ),
    'CompositedTransformTarget': m.ClassMirror(
      'CompositedTransformTarget',
      {
        'link': _CompositedTransformTarget_link$,
        'createRenderObject': _CompositedTransformTarget_createRenderObject$,
        'updateRenderObject': _CompositedTransformTarget_updateRenderObject$,
      },
      {},
    ),
    'CompositedTransformFollower': m.ClassMirror(
      'CompositedTransformFollower',
      {
        'link': _CompositedTransformFollower_link$,
        'showWhenUnlinked': _CompositedTransformFollower_showWhenUnlinked$,
        'targetAnchor': _CompositedTransformFollower_targetAnchor$,
        'followerAnchor': _CompositedTransformFollower_followerAnchor$,
        'offset': _CompositedTransformFollower_offset$,
        'createRenderObject': _CompositedTransformFollower_createRenderObject$,
        'updateRenderObject': _CompositedTransformFollower_updateRenderObject$,
      },
      {},
    ),
    'FittedBox': m.ClassMirror(
      'FittedBox',
      {
        'fit': _FittedBox_fit$,
        'alignment': _FittedBox_alignment$,
        'clipBehavior': _FittedBox_clipBehavior$,
        'createRenderObject': _FittedBox_createRenderObject$,
        'updateRenderObject': _FittedBox_updateRenderObject$,
        'debugFillProperties': _FittedBox_debugFillProperties$,
      },
      {},
    ),
    'FractionalTranslation': m.ClassMirror(
      'FractionalTranslation',
      {
        'translation': _FractionalTranslation_translation$,
        'transformHitTests': _FractionalTranslation_transformHitTests$,
        'createRenderObject': _FractionalTranslation_createRenderObject$,
        'updateRenderObject': _FractionalTranslation_updateRenderObject$,
      },
      {},
    ),
    'RotatedBox': m.ClassMirror(
      'RotatedBox',
      {
        'quarterTurns': _RotatedBox_quarterTurns$,
        'createRenderObject': _RotatedBox_createRenderObject$,
        'updateRenderObject': _RotatedBox_updateRenderObject$,
      },
      {},
    ),
    'Padding': m.ClassMirror(
      'Padding',
      {
        'padding': _Padding_padding$,
        'createRenderObject': _Padding_createRenderObject$,
        'updateRenderObject': _Padding_updateRenderObject$,
        'debugFillProperties': _Padding_debugFillProperties$,
      },
      {},
    ),
    'Align': m.ClassMirror(
      'Align',
      {
        'alignment': _Align_alignment$,
        'widthFactor': _Align_widthFactor$,
        'heightFactor': _Align_heightFactor$,
        'createRenderObject': _Align_createRenderObject$,
        'updateRenderObject': _Align_updateRenderObject$,
        'debugFillProperties': _Align_debugFillProperties$,
      },
      {},
    ),
    'Center': m.ClassMirror(
      'Center',
      {},
      {},
    ),
    'CustomSingleChildLayout': m.ClassMirror(
      'CustomSingleChildLayout',
      {
        'delegate': _CustomSingleChildLayout_delegate$,
        'createRenderObject': _CustomSingleChildLayout_createRenderObject$,
        'updateRenderObject': _CustomSingleChildLayout_updateRenderObject$,
      },
      {},
    ),
    'LayoutId': m.ClassMirror(
      'LayoutId',
      {
        'id': _LayoutId_id$,
        'debugTypicalAncestorWidgetClass':
            _LayoutId_debugTypicalAncestorWidgetClass$,
        'applyParentData': _LayoutId_applyParentData$,
        'debugFillProperties': _LayoutId_debugFillProperties$,
      },
      {},
    ),
    'CustomMultiChildLayout': m.ClassMirror(
      'CustomMultiChildLayout',
      {
        'delegate': _CustomMultiChildLayout_delegate$,
        'createRenderObject': _CustomMultiChildLayout_createRenderObject$,
        'updateRenderObject': _CustomMultiChildLayout_updateRenderObject$,
      },
      {},
    ),
    'SizedBox': m.ClassMirror(
      'SizedBox',
      {
        'width': _SizedBox_width$,
        'height': _SizedBox_height$,
        'createRenderObject': _SizedBox_createRenderObject$,
        'updateRenderObject': _SizedBox_updateRenderObject$,
        'toStringShort': _SizedBox_toStringShort$,
        'debugFillProperties': _SizedBox_debugFillProperties$,
      },
      {},
    ),
    'ConstrainedBox': m.ClassMirror(
      'ConstrainedBox',
      {
        'constraints': _ConstrainedBox_constraints$,
        'createRenderObject': _ConstrainedBox_createRenderObject$,
        'updateRenderObject': _ConstrainedBox_updateRenderObject$,
        'debugFillProperties': _ConstrainedBox_debugFillProperties$,
      },
      {},
    ),
    'ConstraintsTransformBox': m.ClassMirror(
      'ConstraintsTransformBox',
      {
        'textDirection': _ConstraintsTransformBox_textDirection$,
        'alignment': _ConstraintsTransformBox_alignment$,
        'constraintsTransform': _ConstraintsTransformBox_constraintsTransform$,
        'clipBehavior': _ConstraintsTransformBox_clipBehavior$,
        'createRenderObject': _ConstraintsTransformBox_createRenderObject$,
        'updateRenderObject': _ConstraintsTransformBox_updateRenderObject$,
        'debugFillProperties': _ConstraintsTransformBox_debugFillProperties$,
      },
      {},
    ),
    'UnconstrainedBox': m.ClassMirror(
      'UnconstrainedBox',
      {
        'textDirection': _UnconstrainedBox_textDirection$,
        'alignment': _UnconstrainedBox_alignment$,
        'constrainedAxis': _UnconstrainedBox_constrainedAxis$,
        'clipBehavior': _UnconstrainedBox_clipBehavior$,
        'child': _UnconstrainedBox_child$,
        'build': _UnconstrainedBox_build$,
        'debugFillProperties': _UnconstrainedBox_debugFillProperties$,
      },
      {},
    ),
    'FractionallySizedBox': m.ClassMirror(
      'FractionallySizedBox',
      {
        'widthFactor': _FractionallySizedBox_widthFactor$,
        'heightFactor': _FractionallySizedBox_heightFactor$,
        'alignment': _FractionallySizedBox_alignment$,
        'createRenderObject': _FractionallySizedBox_createRenderObject$,
        'updateRenderObject': _FractionallySizedBox_updateRenderObject$,
        'debugFillProperties': _FractionallySizedBox_debugFillProperties$,
      },
      {},
    ),
    'LimitedBox': m.ClassMirror(
      'LimitedBox',
      {
        'maxWidth': _LimitedBox_maxWidth$,
        'maxHeight': _LimitedBox_maxHeight$,
        'createRenderObject': _LimitedBox_createRenderObject$,
        'updateRenderObject': _LimitedBox_updateRenderObject$,
        'debugFillProperties': _LimitedBox_debugFillProperties$,
      },
      {},
    ),
    'OverflowBox': m.ClassMirror(
      'OverflowBox',
      {
        'alignment': _OverflowBox_alignment$,
        'minWidth': _OverflowBox_minWidth$,
        'maxWidth': _OverflowBox_maxWidth$,
        'minHeight': _OverflowBox_minHeight$,
        'maxHeight': _OverflowBox_maxHeight$,
        'createRenderObject': _OverflowBox_createRenderObject$,
        'updateRenderObject': _OverflowBox_updateRenderObject$,
        'debugFillProperties': _OverflowBox_debugFillProperties$,
      },
      {},
    ),
    'SizedOverflowBox': m.ClassMirror(
      'SizedOverflowBox',
      {
        'alignment': _SizedOverflowBox_alignment$,
        'size': _SizedOverflowBox_size$,
        'createRenderObject': _SizedOverflowBox_createRenderObject$,
        'updateRenderObject': _SizedOverflowBox_updateRenderObject$,
        'debugFillProperties': _SizedOverflowBox_debugFillProperties$,
      },
      {},
    ),
    'Offstage': m.ClassMirror(
      'Offstage',
      {
        'offstage': _Offstage_offstage$,
        'createRenderObject': _Offstage_createRenderObject$,
        'updateRenderObject': _Offstage_updateRenderObject$,
        'debugFillProperties': _Offstage_debugFillProperties$,
        'createElement': _Offstage_createElement$,
      },
      {},
    ),
    'AspectRatio': m.ClassMirror(
      'AspectRatio',
      {
        'aspectRatio': _AspectRatio_aspectRatio$,
        'createRenderObject': _AspectRatio_createRenderObject$,
        'updateRenderObject': _AspectRatio_updateRenderObject$,
        'debugFillProperties': _AspectRatio_debugFillProperties$,
      },
      {},
    ),
    'IntrinsicWidth': m.ClassMirror(
      'IntrinsicWidth',
      {
        'stepWidth': _IntrinsicWidth_stepWidth$,
        'stepHeight': _IntrinsicWidth_stepHeight$,
        'createRenderObject': _IntrinsicWidth_createRenderObject$,
        'updateRenderObject': _IntrinsicWidth_updateRenderObject$,
      },
      {},
    ),
    'IntrinsicHeight': m.ClassMirror(
      'IntrinsicHeight',
      {'createRenderObject': _IntrinsicHeight_createRenderObject$},
      {},
    ),
    'Baseline': m.ClassMirror(
      'Baseline',
      {
        'baseline': _Baseline_baseline$,
        'baselineType': _Baseline_baselineType$,
        'createRenderObject': _Baseline_createRenderObject$,
        'updateRenderObject': _Baseline_updateRenderObject$,
      },
      {},
    ),
    'SliverToBoxAdapter': m.ClassMirror(
      'SliverToBoxAdapter',
      {'createRenderObject': _SliverToBoxAdapter_createRenderObject$},
      {},
    ),
    'SliverPadding': m.ClassMirror(
      'SliverPadding',
      {
        'padding': _SliverPadding_padding$,
        'createRenderObject': _SliverPadding_createRenderObject$,
        'updateRenderObject': _SliverPadding_updateRenderObject$,
        'debugFillProperties': _SliverPadding_debugFillProperties$,
      },
      {},
    ),
    'ListBody': m.ClassMirror(
      'ListBody',
      {
        'mainAxis': _ListBody_mainAxis$,
        'reverse': _ListBody_reverse$,
        'createRenderObject': _ListBody_createRenderObject$,
        'updateRenderObject': _ListBody_updateRenderObject$,
      },
      {},
    ),
    'Stack': m.ClassMirror(
      'Stack',
      {
        'alignment': _Stack_alignment$,
        'textDirection': _Stack_textDirection$,
        'fit': _Stack_fit$,
        'clipBehavior': _Stack_clipBehavior$,
        'createRenderObject': _Stack_createRenderObject$,
        'updateRenderObject': _Stack_updateRenderObject$,
        'debugFillProperties': _Stack_debugFillProperties$,
      },
      {},
    ),
    'IndexedStack': m.ClassMirror(
      'IndexedStack',
      {
        'alignment': _IndexedStack_alignment$,
        'textDirection': _IndexedStack_textDirection$,
        'clipBehavior': _IndexedStack_clipBehavior$,
        'sizing': _IndexedStack_sizing$,
        'index': _IndexedStack_index$,
        'children': _IndexedStack_children$,
        'build': _IndexedStack_build$,
      },
      {},
    ),
    'Positioned': m.ClassMirror(
      'Positioned',
      {
        'left': _Positioned_left$,
        'top': _Positioned_top$,
        'right': _Positioned_right$,
        'bottom': _Positioned_bottom$,
        'width': _Positioned_width$,
        'height': _Positioned_height$,
        'debugTypicalAncestorWidgetClass':
            _Positioned_debugTypicalAncestorWidgetClass$,
        'applyParentData': _Positioned_applyParentData$,
        'debugFillProperties': _Positioned_debugFillProperties$,
      },
      {},
    ),
    'PositionedDirectional': m.ClassMirror(
      'PositionedDirectional',
      {
        'start': _PositionedDirectional_start$,
        'top': _PositionedDirectional_top$,
        'end': _PositionedDirectional_end$,
        'bottom': _PositionedDirectional_bottom$,
        'width': _PositionedDirectional_width$,
        'height': _PositionedDirectional_height$,
        'child': _PositionedDirectional_child$,
        'build': _PositionedDirectional_build$,
      },
      {},
    ),
    'Flex': m.ClassMirror(
      'Flex',
      {
        'direction': _Flex_direction$,
        'mainAxisAlignment': _Flex_mainAxisAlignment$,
        'mainAxisSize': _Flex_mainAxisSize$,
        'crossAxisAlignment': _Flex_crossAxisAlignment$,
        'textDirection': _Flex_textDirection$,
        'verticalDirection': _Flex_verticalDirection$,
        'textBaseline': _Flex_textBaseline$,
        'clipBehavior': _Flex_clipBehavior$,
        'getEffectiveTextDirection': _Flex_getEffectiveTextDirection$,
        'createRenderObject': _Flex_createRenderObject$,
        'updateRenderObject': _Flex_updateRenderObject$,
        'debugFillProperties': _Flex_debugFillProperties$,
      },
      {},
    ),
    'Row': m.ClassMirror(
      'Row',
      {},
      {},
    ),
    'Column': m.ClassMirror(
      'Column',
      {},
      {},
    ),
    'Flexible': m.ClassMirror(
      'Flexible',
      {
        'flex': _Flexible_flex$,
        'fit': _Flexible_fit$,
        'debugTypicalAncestorWidgetClass':
            _Flexible_debugTypicalAncestorWidgetClass$,
        'applyParentData': _Flexible_applyParentData$,
        'debugFillProperties': _Flexible_debugFillProperties$,
      },
      {},
    ),
    'Expanded': m.ClassMirror(
      'Expanded',
      {},
      {},
    ),
    'Wrap': m.ClassMirror(
      'Wrap',
      {
        'direction': _Wrap_direction$,
        'alignment': _Wrap_alignment$,
        'spacing': _Wrap_spacing$,
        'runAlignment': _Wrap_runAlignment$,
        'runSpacing': _Wrap_runSpacing$,
        'crossAxisAlignment': _Wrap_crossAxisAlignment$,
        'textDirection': _Wrap_textDirection$,
        'verticalDirection': _Wrap_verticalDirection$,
        'clipBehavior': _Wrap_clipBehavior$,
        'createRenderObject': _Wrap_createRenderObject$,
        'updateRenderObject': _Wrap_updateRenderObject$,
        'debugFillProperties': _Wrap_debugFillProperties$,
      },
      {},
    ),
    'Flow': m.ClassMirror(
      'Flow',
      {
        'delegate': _Flow_delegate$,
        'clipBehavior': _Flow_clipBehavior$,
        'createRenderObject': _Flow_createRenderObject$,
        'updateRenderObject': _Flow_updateRenderObject$,
      },
      {},
    ),
    'RichText': m.ClassMirror(
      'RichText',
      {
        'text': _RichText_text$,
        'textAlign': _RichText_textAlign$,
        'textDirection': _RichText_textDirection$,
        'softWrap': _RichText_softWrap$,
        'overflow': _RichText_overflow$,
        'textScaleFactor': _RichText_textScaleFactor$,
        'maxLines': _RichText_maxLines$,
        'locale': _RichText_locale$,
        'strutStyle': _RichText_strutStyle$,
        'textWidthBasis': _RichText_textWidthBasis$,
        'textHeightBehavior': _RichText_textHeightBehavior$,
        'selectionRegistrar': _RichText_selectionRegistrar$,
        'selectionColor': _RichText_selectionColor$,
        'createRenderObject': _RichText_createRenderObject$,
        'updateRenderObject': _RichText_updateRenderObject$,
        'debugFillProperties': _RichText_debugFillProperties$,
      },
      {},
    ),
    'RawImage': m.ClassMirror(
      'RawImage',
      {
        'image': _RawImage_image$,
        'debugImageLabel': _RawImage_debugImageLabel$,
        'width': _RawImage_width$,
        'height': _RawImage_height$,
        'scale': _RawImage_scale$,
        'color': _RawImage_color$,
        'opacity': _RawImage_opacity$,
        'filterQuality': _RawImage_filterQuality$,
        'colorBlendMode': _RawImage_colorBlendMode$,
        'fit': _RawImage_fit$,
        'alignment': _RawImage_alignment$,
        'repeat': _RawImage_repeat$,
        'centerSlice': _RawImage_centerSlice$,
        'matchTextDirection': _RawImage_matchTextDirection$,
        'invertColors': _RawImage_invertColors$,
        'isAntiAlias': _RawImage_isAntiAlias$,
        'createRenderObject': _RawImage_createRenderObject$,
        'updateRenderObject': _RawImage_updateRenderObject$,
        'didUnmountRenderObject': _RawImage_didUnmountRenderObject$,
        'debugFillProperties': _RawImage_debugFillProperties$,
      },
      {},
    ),
    'DefaultAssetBundle': m.ClassMirror(
      'DefaultAssetBundle',
      {
        'bundle': _DefaultAssetBundle_bundle$,
        'updateShouldNotify': _DefaultAssetBundle_updateShouldNotify$,
      },
      {},
    ),
    'WidgetToRenderBoxAdapter': m.ClassMirror(
      'WidgetToRenderBoxAdapter',
      {
        'renderBox': _WidgetToRenderBoxAdapter_renderBox$,
        'onBuild': _WidgetToRenderBoxAdapter_onBuild$,
        'onUnmount': _WidgetToRenderBoxAdapter_onUnmount$,
        'createRenderObject': _WidgetToRenderBoxAdapter_createRenderObject$,
        'updateRenderObject': _WidgetToRenderBoxAdapter_updateRenderObject$,
        'didUnmountRenderObject':
            _WidgetToRenderBoxAdapter_didUnmountRenderObject$,
      },
      {},
    ),
    'Listener': m.ClassMirror(
      'Listener',
      {
        'onPointerDown': _Listener_onPointerDown$,
        'onPointerMove': _Listener_onPointerMove$,
        'onPointerUp': _Listener_onPointerUp$,
        'onPointerHover': _Listener_onPointerHover$,
        'onPointerCancel': _Listener_onPointerCancel$,
        'onPointerPanZoomStart': _Listener_onPointerPanZoomStart$,
        'onPointerPanZoomUpdate': _Listener_onPointerPanZoomUpdate$,
        'onPointerPanZoomEnd': _Listener_onPointerPanZoomEnd$,
        'onPointerSignal': _Listener_onPointerSignal$,
        'behavior': _Listener_behavior$,
        'createRenderObject': _Listener_createRenderObject$,
        'updateRenderObject': _Listener_updateRenderObject$,
        'debugFillProperties': _Listener_debugFillProperties$,
      },
      {},
    ),
    'MouseRegion': m.ClassMirror(
      'MouseRegion',
      {
        'onEnter': _MouseRegion_onEnter$,
        'onHover': _MouseRegion_onHover$,
        'onExit': _MouseRegion_onExit$,
        'cursor': _MouseRegion_cursor$,
        'opaque': _MouseRegion_opaque$,
        'hitTestBehavior': _MouseRegion_hitTestBehavior$,
        'createRenderObject': _MouseRegion_createRenderObject$,
        'updateRenderObject': _MouseRegion_updateRenderObject$,
        'debugFillProperties': _MouseRegion_debugFillProperties$,
      },
      {},
    ),
    'RepaintBoundary': m.ClassMirror(
      'RepaintBoundary',
      {'createRenderObject': _RepaintBoundary_createRenderObject$},
      {},
    ),
    'IgnorePointer': m.ClassMirror(
      'IgnorePointer',
      {
        'ignoring': _IgnorePointer_ignoring$,
        'ignoringSemantics': _IgnorePointer_ignoringSemantics$,
        'createRenderObject': _IgnorePointer_createRenderObject$,
        'updateRenderObject': _IgnorePointer_updateRenderObject$,
        'debugFillProperties': _IgnorePointer_debugFillProperties$,
      },
      {},
    ),
    'AbsorbPointer': m.ClassMirror(
      'AbsorbPointer',
      {
        'absorbing': _AbsorbPointer_absorbing$,
        'ignoringSemantics': _AbsorbPointer_ignoringSemantics$,
        'createRenderObject': _AbsorbPointer_createRenderObject$,
        'updateRenderObject': _AbsorbPointer_updateRenderObject$,
        'debugFillProperties': _AbsorbPointer_debugFillProperties$,
      },
      {},
    ),
    'MetaData': m.ClassMirror(
      'MetaData',
      {
        'metaData': _MetaData_metaData$,
        'behavior': _MetaData_behavior$,
        'createRenderObject': _MetaData_createRenderObject$,
        'updateRenderObject': _MetaData_updateRenderObject$,
        'debugFillProperties': _MetaData_debugFillProperties$,
      },
      {},
    ),
    'Semantics': m.ClassMirror(
      'Semantics',
      {
        'properties': _Semantics_properties$,
        'container': _Semantics_container$,
        'explicitChildNodes': _Semantics_explicitChildNodes$,
        'excludeSemantics': _Semantics_excludeSemantics$,
        'createRenderObject': _Semantics_createRenderObject$,
        'updateRenderObject': _Semantics_updateRenderObject$,
        'debugFillProperties': _Semantics_debugFillProperties$,
      },
      {},
    ),
    'MergeSemantics': m.ClassMirror(
      'MergeSemantics',
      {'createRenderObject': _MergeSemantics_createRenderObject$},
      {},
    ),
    'BlockSemantics': m.ClassMirror(
      'BlockSemantics',
      {
        'blocking': _BlockSemantics_blocking$,
        'createRenderObject': _BlockSemantics_createRenderObject$,
        'updateRenderObject': _BlockSemantics_updateRenderObject$,
        'debugFillProperties': _BlockSemantics_debugFillProperties$,
      },
      {},
    ),
    'ExcludeSemantics': m.ClassMirror(
      'ExcludeSemantics',
      {
        'excluding': _ExcludeSemantics_excluding$,
        'createRenderObject': _ExcludeSemantics_createRenderObject$,
        'updateRenderObject': _ExcludeSemantics_updateRenderObject$,
        'debugFillProperties': _ExcludeSemantics_debugFillProperties$,
      },
      {},
    ),
    'IndexedSemantics': m.ClassMirror(
      'IndexedSemantics',
      {
        'index': _IndexedSemantics_index$,
        'createRenderObject': _IndexedSemantics_createRenderObject$,
        'updateRenderObject': _IndexedSemantics_updateRenderObject$,
        'debugFillProperties': _IndexedSemantics_debugFillProperties$,
      },
      {},
    ),
    'KeyedSubtree': m.ClassMirror(
      'KeyedSubtree',
      {
        'child': _KeyedSubtree_child$,
        'build': _KeyedSubtree_build$,
      },
      {},
    ),
    'Builder': m.ClassMirror(
      'Builder',
      {
        'builder': _Builder_builder$,
        'build': _Builder_build$,
      },
      {},
    ),
    'StatefulBuilder': m.ClassMirror(
      'StatefulBuilder',
      {
        'builder': _StatefulBuilder_builder$,
        'createState': _StatefulBuilder_createState$,
      },
      {},
    ),
    'ColoredBox': m.ClassMirror(
      'ColoredBox',
      {
        'color': _ColoredBox_color$,
        'createRenderObject': _ColoredBox_createRenderObject$,
        'updateRenderObject': _ColoredBox_updateRenderObject$,
        'debugFillProperties': _ColoredBox_debugFillProperties$,
      },
      {},
    ),
  },
);
TextDirection _Directionality_textDirection$(Directionality target) {
  return target.textDirection;
}

Function _Directionality_of$(m.Scope scope) => Directionality.of;
Function _Directionality_maybeOf$(m.Scope scope) => Directionality.maybeOf;
Function _Directionality_updateShouldNotify$(
  m.Scope scope,
  Directionality target,
) =>
    target.updateShouldNotify;
Function _Directionality_debugFillProperties$(
  m.Scope scope,
  Directionality target,
) =>
    target.debugFillProperties;
double _Opacity_opacity$(Opacity target) {
  return target.opacity;
}

bool _Opacity_alwaysIncludeSemantics$(Opacity target) {
  return target.alwaysIncludeSemantics;
}

Function _Opacity_createRenderObject$(
  m.Scope scope,
  Opacity target,
) =>
    target.createRenderObject;
Function _Opacity_updateRenderObject$(
  m.Scope scope,
  Opacity target,
) =>
    target.updateRenderObject;
Function _Opacity_debugFillProperties$(
  m.Scope scope,
  Opacity target,
) =>
    target.debugFillProperties;
Shader Function(Rect) _ShaderMask_shaderCallback$(ShaderMask target) {
  return target.shaderCallback;
}

BlendMode _ShaderMask_blendMode$(ShaderMask target) {
  return target.blendMode;
}

Function _ShaderMask_createRenderObject$(
  m.Scope scope,
  ShaderMask target,
) =>
    target.createRenderObject;
Function _ShaderMask_updateRenderObject$(
  m.Scope scope,
  ShaderMask target,
) =>
    target.updateRenderObject;
ImageFilter _BackdropFilter_filter$(BackdropFilter target) {
  return target.filter;
}

BlendMode _BackdropFilter_blendMode$(BackdropFilter target) {
  return target.blendMode;
}

Function _BackdropFilter_createRenderObject$(
  m.Scope scope,
  BackdropFilter target,
) =>
    target.createRenderObject;
Function _BackdropFilter_updateRenderObject$(
  m.Scope scope,
  BackdropFilter target,
) =>
    target.updateRenderObject;
CustomPainter? _CustomPaint_painter$(CustomPaint target) {
  return target.painter;
}

CustomPainter? _CustomPaint_foregroundPainter$(CustomPaint target) {
  return target.foregroundPainter;
}

Size _CustomPaint_size$(CustomPaint target) {
  return target.size;
}

bool _CustomPaint_isComplex$(CustomPaint target) {
  return target.isComplex;
}

bool _CustomPaint_willChange$(CustomPaint target) {
  return target.willChange;
}

Function _CustomPaint_createRenderObject$(
  m.Scope scope,
  CustomPaint target,
) =>
    target.createRenderObject;
Function _CustomPaint_updateRenderObject$(
  m.Scope scope,
  CustomPaint target,
) =>
    target.updateRenderObject;
Function _CustomPaint_didUnmountRenderObject$(
  m.Scope scope,
  CustomPaint target,
) =>
    target.didUnmountRenderObject;
CustomClipper<Rect>? _ClipRect_clipper$(ClipRect target) {
  return target.clipper;
}

Clip _ClipRect_clipBehavior$(ClipRect target) {
  return target.clipBehavior;
}

Function _ClipRect_createRenderObject$(
  m.Scope scope,
  ClipRect target,
) =>
    target.createRenderObject;
Function _ClipRect_updateRenderObject$(
  m.Scope scope,
  ClipRect target,
) =>
    target.updateRenderObject;
Function _ClipRect_didUnmountRenderObject$(
  m.Scope scope,
  ClipRect target,
) =>
    target.didUnmountRenderObject;
Function _ClipRect_debugFillProperties$(
  m.Scope scope,
  ClipRect target,
) =>
    target.debugFillProperties;
BorderRadiusGeometry? _ClipRRect_borderRadius$(ClipRRect target) {
  return target.borderRadius;
}

CustomClipper<RRect>? _ClipRRect_clipper$(ClipRRect target) {
  return target.clipper;
}

Clip _ClipRRect_clipBehavior$(ClipRRect target) {
  return target.clipBehavior;
}

Function _ClipRRect_createRenderObject$(
  m.Scope scope,
  ClipRRect target,
) =>
    target.createRenderObject;
Function _ClipRRect_updateRenderObject$(
  m.Scope scope,
  ClipRRect target,
) =>
    target.updateRenderObject;
Function _ClipRRect_debugFillProperties$(
  m.Scope scope,
  ClipRRect target,
) =>
    target.debugFillProperties;
CustomClipper<Rect>? _ClipOval_clipper$(ClipOval target) {
  return target.clipper;
}

Clip _ClipOval_clipBehavior$(ClipOval target) {
  return target.clipBehavior;
}

Function _ClipOval_createRenderObject$(
  m.Scope scope,
  ClipOval target,
) =>
    target.createRenderObject;
Function _ClipOval_updateRenderObject$(
  m.Scope scope,
  ClipOval target,
) =>
    target.updateRenderObject;
Function _ClipOval_didUnmountRenderObject$(
  m.Scope scope,
  ClipOval target,
) =>
    target.didUnmountRenderObject;
Function _ClipOval_debugFillProperties$(
  m.Scope scope,
  ClipOval target,
) =>
    target.debugFillProperties;
CustomClipper<Path>? _ClipPath_clipper$(ClipPath target) {
  return target.clipper;
}

Clip _ClipPath_clipBehavior$(ClipPath target) {
  return target.clipBehavior;
}

Function _ClipPath_shape$(m.Scope scope) => ClipPath.shape;
Function _ClipPath_createRenderObject$(
  m.Scope scope,
  ClipPath target,
) =>
    target.createRenderObject;
Function _ClipPath_updateRenderObject$(
  m.Scope scope,
  ClipPath target,
) =>
    target.updateRenderObject;
Function _ClipPath_didUnmountRenderObject$(
  m.Scope scope,
  ClipPath target,
) =>
    target.didUnmountRenderObject;
Function _ClipPath_debugFillProperties$(
  m.Scope scope,
  ClipPath target,
) =>
    target.debugFillProperties;
BoxShape _PhysicalModel_shape$(PhysicalModel target) {
  return target.shape;
}

Clip _PhysicalModel_clipBehavior$(PhysicalModel target) {
  return target.clipBehavior;
}

BorderRadius? _PhysicalModel_borderRadius$(PhysicalModel target) {
  return target.borderRadius;
}

double _PhysicalModel_elevation$(PhysicalModel target) {
  return target.elevation;
}

Color _PhysicalModel_color$(PhysicalModel target) {
  return target.color;
}

Color _PhysicalModel_shadowColor$(PhysicalModel target) {
  return target.shadowColor;
}

Function _PhysicalModel_createRenderObject$(
  m.Scope scope,
  PhysicalModel target,
) =>
    target.createRenderObject;
Function _PhysicalModel_updateRenderObject$(
  m.Scope scope,
  PhysicalModel target,
) =>
    target.updateRenderObject;
Function _PhysicalModel_debugFillProperties$(
  m.Scope scope,
  PhysicalModel target,
) =>
    target.debugFillProperties;
CustomClipper<Path> _PhysicalShape_clipper$(PhysicalShape target) {
  return target.clipper;
}

Clip _PhysicalShape_clipBehavior$(PhysicalShape target) {
  return target.clipBehavior;
}

double _PhysicalShape_elevation$(PhysicalShape target) {
  return target.elevation;
}

Color _PhysicalShape_color$(PhysicalShape target) {
  return target.color;
}

Color _PhysicalShape_shadowColor$(PhysicalShape target) {
  return target.shadowColor;
}

Function _PhysicalShape_createRenderObject$(
  m.Scope scope,
  PhysicalShape target,
) =>
    target.createRenderObject;
Function _PhysicalShape_updateRenderObject$(
  m.Scope scope,
  PhysicalShape target,
) =>
    target.updateRenderObject;
Function _PhysicalShape_debugFillProperties$(
  m.Scope scope,
  PhysicalShape target,
) =>
    target.debugFillProperties;
Matrix4 _Transform_transform$(Transform target) {
  return target.transform;
}

Offset? _Transform_origin$(Transform target) {
  return target.origin;
}

AlignmentGeometry? _Transform_alignment$(Transform target) {
  return target.alignment;
}

bool _Transform_transformHitTests$(Transform target) {
  return target.transformHitTests;
}

FilterQuality? _Transform_filterQuality$(Transform target) {
  return target.filterQuality;
}

Function _Transform_createRenderObject$(
  m.Scope scope,
  Transform target,
) =>
    target.createRenderObject;
Function _Transform_updateRenderObject$(
  m.Scope scope,
  Transform target,
) =>
    target.updateRenderObject;
LayerLink _CompositedTransformTarget_link$(CompositedTransformTarget target) {
  return target.link;
}

Function _CompositedTransformTarget_createRenderObject$(
  m.Scope scope,
  CompositedTransformTarget target,
) =>
    target.createRenderObject;
Function _CompositedTransformTarget_updateRenderObject$(
  m.Scope scope,
  CompositedTransformTarget target,
) =>
    target.updateRenderObject;
LayerLink _CompositedTransformFollower_link$(
    CompositedTransformFollower target) {
  return target.link;
}

bool _CompositedTransformFollower_showWhenUnlinked$(
    CompositedTransformFollower target) {
  return target.showWhenUnlinked;
}

Alignment _CompositedTransformFollower_targetAnchor$(
    CompositedTransformFollower target) {
  return target.targetAnchor;
}

Alignment _CompositedTransformFollower_followerAnchor$(
    CompositedTransformFollower target) {
  return target.followerAnchor;
}

Offset _CompositedTransformFollower_offset$(
    CompositedTransformFollower target) {
  return target.offset;
}

Function _CompositedTransformFollower_createRenderObject$(
  m.Scope scope,
  CompositedTransformFollower target,
) =>
    target.createRenderObject;
Function _CompositedTransformFollower_updateRenderObject$(
  m.Scope scope,
  CompositedTransformFollower target,
) =>
    target.updateRenderObject;
BoxFit _FittedBox_fit$(FittedBox target) {
  return target.fit;
}

AlignmentGeometry _FittedBox_alignment$(FittedBox target) {
  return target.alignment;
}

Clip _FittedBox_clipBehavior$(FittedBox target) {
  return target.clipBehavior;
}

Function _FittedBox_createRenderObject$(
  m.Scope scope,
  FittedBox target,
) =>
    target.createRenderObject;
Function _FittedBox_updateRenderObject$(
  m.Scope scope,
  FittedBox target,
) =>
    target.updateRenderObject;
Function _FittedBox_debugFillProperties$(
  m.Scope scope,
  FittedBox target,
) =>
    target.debugFillProperties;
Offset _FractionalTranslation_translation$(FractionalTranslation target) {
  return target.translation;
}

bool _FractionalTranslation_transformHitTests$(FractionalTranslation target) {
  return target.transformHitTests;
}

Function _FractionalTranslation_createRenderObject$(
  m.Scope scope,
  FractionalTranslation target,
) =>
    target.createRenderObject;
Function _FractionalTranslation_updateRenderObject$(
  m.Scope scope,
  FractionalTranslation target,
) =>
    target.updateRenderObject;
int _RotatedBox_quarterTurns$(RotatedBox target) {
  return target.quarterTurns;
}

Function _RotatedBox_createRenderObject$(
  m.Scope scope,
  RotatedBox target,
) =>
    target.createRenderObject;
Function _RotatedBox_updateRenderObject$(
  m.Scope scope,
  RotatedBox target,
) =>
    target.updateRenderObject;
EdgeInsetsGeometry _Padding_padding$(Padding target) {
  return target.padding;
}

Function _Padding_createRenderObject$(
  m.Scope scope,
  Padding target,
) =>
    target.createRenderObject;
Function _Padding_updateRenderObject$(
  m.Scope scope,
  Padding target,
) =>
    target.updateRenderObject;
Function _Padding_debugFillProperties$(
  m.Scope scope,
  Padding target,
) =>
    target.debugFillProperties;
AlignmentGeometry _Align_alignment$(Align target) {
  return target.alignment;
}

double? _Align_widthFactor$(Align target) {
  return target.widthFactor;
}

double? _Align_heightFactor$(Align target) {
  return target.heightFactor;
}

Function _Align_createRenderObject$(
  m.Scope scope,
  Align target,
) =>
    target.createRenderObject;
Function _Align_updateRenderObject$(
  m.Scope scope,
  Align target,
) =>
    target.updateRenderObject;
Function _Align_debugFillProperties$(
  m.Scope scope,
  Align target,
) =>
    target.debugFillProperties;
SingleChildLayoutDelegate _CustomSingleChildLayout_delegate$(
    CustomSingleChildLayout target) {
  return target.delegate;
}

Function _CustomSingleChildLayout_createRenderObject$(
  m.Scope scope,
  CustomSingleChildLayout target,
) =>
    target.createRenderObject;
Function _CustomSingleChildLayout_updateRenderObject$(
  m.Scope scope,
  CustomSingleChildLayout target,
) =>
    target.updateRenderObject;
Object _LayoutId_id$(LayoutId target) {
  return target.id;
}

Type _LayoutId_debugTypicalAncestorWidgetClass$(LayoutId target) {
  return target.debugTypicalAncestorWidgetClass;
}

Function _LayoutId_applyParentData$(
  m.Scope scope,
  LayoutId target,
) =>
    target.applyParentData;
Function _LayoutId_debugFillProperties$(
  m.Scope scope,
  LayoutId target,
) =>
    target.debugFillProperties;
MultiChildLayoutDelegate _CustomMultiChildLayout_delegate$(
    CustomMultiChildLayout target) {
  return target.delegate;
}

Function _CustomMultiChildLayout_createRenderObject$(
  m.Scope scope,
  CustomMultiChildLayout target,
) =>
    target.createRenderObject;
Function _CustomMultiChildLayout_updateRenderObject$(
  m.Scope scope,
  CustomMultiChildLayout target,
) =>
    target.updateRenderObject;
double? _SizedBox_width$(SizedBox target) {
  return target.width;
}

double? _SizedBox_height$(SizedBox target) {
  return target.height;
}

Function _SizedBox_createRenderObject$(
  m.Scope scope,
  SizedBox target,
) =>
    target.createRenderObject;
Function _SizedBox_updateRenderObject$(
  m.Scope scope,
  SizedBox target,
) =>
    target.updateRenderObject;
Function _SizedBox_toStringShort$(
  m.Scope scope,
  SizedBox target,
) =>
    target.toStringShort;
Function _SizedBox_debugFillProperties$(
  m.Scope scope,
  SizedBox target,
) =>
    target.debugFillProperties;
BoxConstraints _ConstrainedBox_constraints$(ConstrainedBox target) {
  return target.constraints;
}

Function _ConstrainedBox_createRenderObject$(
  m.Scope scope,
  ConstrainedBox target,
) =>
    target.createRenderObject;
Function _ConstrainedBox_updateRenderObject$(
  m.Scope scope,
  ConstrainedBox target,
) =>
    target.updateRenderObject;
Function _ConstrainedBox_debugFillProperties$(
  m.Scope scope,
  ConstrainedBox target,
) =>
    target.debugFillProperties;
TextDirection? _ConstraintsTransformBox_textDirection$(
    ConstraintsTransformBox target) {
  return target.textDirection;
}

AlignmentGeometry _ConstraintsTransformBox_alignment$(
    ConstraintsTransformBox target) {
  return target.alignment;
}

BoxConstraints Function(BoxConstraints)
    _ConstraintsTransformBox_constraintsTransform$(
        ConstraintsTransformBox target) {
  return target.constraintsTransform;
}

Clip _ConstraintsTransformBox_clipBehavior$(ConstraintsTransformBox target) {
  return target.clipBehavior;
}

Function _ConstraintsTransformBox_unmodified$(m.Scope scope) =>
    ConstraintsTransformBox.unmodified;
Function _ConstraintsTransformBox_unconstrained$(m.Scope scope) =>
    ConstraintsTransformBox.unconstrained;
Function _ConstraintsTransformBox_widthUnconstrained$(m.Scope scope) =>
    ConstraintsTransformBox.widthUnconstrained;
Function _ConstraintsTransformBox_heightUnconstrained$(m.Scope scope) =>
    ConstraintsTransformBox.heightUnconstrained;
Function _ConstraintsTransformBox_maxHeightUnconstrained$(m.Scope scope) =>
    ConstraintsTransformBox.maxHeightUnconstrained;
Function _ConstraintsTransformBox_maxWidthUnconstrained$(m.Scope scope) =>
    ConstraintsTransformBox.maxWidthUnconstrained;
Function _ConstraintsTransformBox_maxUnconstrained$(m.Scope scope) =>
    ConstraintsTransformBox.maxUnconstrained;
Function _ConstraintsTransformBox_createRenderObject$(
  m.Scope scope,
  ConstraintsTransformBox target,
) =>
    target.createRenderObject;
Function _ConstraintsTransformBox_updateRenderObject$(
  m.Scope scope,
  ConstraintsTransformBox target,
) =>
    target.updateRenderObject;
Function _ConstraintsTransformBox_debugFillProperties$(
  m.Scope scope,
  ConstraintsTransformBox target,
) =>
    target.debugFillProperties;
TextDirection? _UnconstrainedBox_textDirection$(UnconstrainedBox target) {
  return target.textDirection;
}

AlignmentGeometry _UnconstrainedBox_alignment$(UnconstrainedBox target) {
  return target.alignment;
}

Axis? _UnconstrainedBox_constrainedAxis$(UnconstrainedBox target) {
  return target.constrainedAxis;
}

Clip _UnconstrainedBox_clipBehavior$(UnconstrainedBox target) {
  return target.clipBehavior;
}

Widget? _UnconstrainedBox_child$(UnconstrainedBox target) {
  return target.child;
}

Function _UnconstrainedBox_build$(
  m.Scope scope,
  UnconstrainedBox target,
) =>
    target.build;
Function _UnconstrainedBox_debugFillProperties$(
  m.Scope scope,
  UnconstrainedBox target,
) =>
    target.debugFillProperties;
double? _FractionallySizedBox_widthFactor$(FractionallySizedBox target) {
  return target.widthFactor;
}

double? _FractionallySizedBox_heightFactor$(FractionallySizedBox target) {
  return target.heightFactor;
}

AlignmentGeometry _FractionallySizedBox_alignment$(
    FractionallySizedBox target) {
  return target.alignment;
}

Function _FractionallySizedBox_createRenderObject$(
  m.Scope scope,
  FractionallySizedBox target,
) =>
    target.createRenderObject;
Function _FractionallySizedBox_updateRenderObject$(
  m.Scope scope,
  FractionallySizedBox target,
) =>
    target.updateRenderObject;
Function _FractionallySizedBox_debugFillProperties$(
  m.Scope scope,
  FractionallySizedBox target,
) =>
    target.debugFillProperties;
double _LimitedBox_maxWidth$(LimitedBox target) {
  return target.maxWidth;
}

double _LimitedBox_maxHeight$(LimitedBox target) {
  return target.maxHeight;
}

Function _LimitedBox_createRenderObject$(
  m.Scope scope,
  LimitedBox target,
) =>
    target.createRenderObject;
Function _LimitedBox_updateRenderObject$(
  m.Scope scope,
  LimitedBox target,
) =>
    target.updateRenderObject;
Function _LimitedBox_debugFillProperties$(
  m.Scope scope,
  LimitedBox target,
) =>
    target.debugFillProperties;
AlignmentGeometry _OverflowBox_alignment$(OverflowBox target) {
  return target.alignment;
}

double? _OverflowBox_minWidth$(OverflowBox target) {
  return target.minWidth;
}

double? _OverflowBox_maxWidth$(OverflowBox target) {
  return target.maxWidth;
}

double? _OverflowBox_minHeight$(OverflowBox target) {
  return target.minHeight;
}

double? _OverflowBox_maxHeight$(OverflowBox target) {
  return target.maxHeight;
}

Function _OverflowBox_createRenderObject$(
  m.Scope scope,
  OverflowBox target,
) =>
    target.createRenderObject;
Function _OverflowBox_updateRenderObject$(
  m.Scope scope,
  OverflowBox target,
) =>
    target.updateRenderObject;
Function _OverflowBox_debugFillProperties$(
  m.Scope scope,
  OverflowBox target,
) =>
    target.debugFillProperties;
AlignmentGeometry _SizedOverflowBox_alignment$(SizedOverflowBox target) {
  return target.alignment;
}

Size _SizedOverflowBox_size$(SizedOverflowBox target) {
  return target.size;
}

Function _SizedOverflowBox_createRenderObject$(
  m.Scope scope,
  SizedOverflowBox target,
) =>
    target.createRenderObject;
Function _SizedOverflowBox_updateRenderObject$(
  m.Scope scope,
  SizedOverflowBox target,
) =>
    target.updateRenderObject;
Function _SizedOverflowBox_debugFillProperties$(
  m.Scope scope,
  SizedOverflowBox target,
) =>
    target.debugFillProperties;
bool _Offstage_offstage$(Offstage target) {
  return target.offstage;
}

Function _Offstage_createRenderObject$(
  m.Scope scope,
  Offstage target,
) =>
    target.createRenderObject;
Function _Offstage_updateRenderObject$(
  m.Scope scope,
  Offstage target,
) =>
    target.updateRenderObject;
Function _Offstage_debugFillProperties$(
  m.Scope scope,
  Offstage target,
) =>
    target.debugFillProperties;
Function _Offstage_createElement$(
  m.Scope scope,
  Offstage target,
) =>
    target.createElement;
double _AspectRatio_aspectRatio$(AspectRatio target) {
  return target.aspectRatio;
}

Function _AspectRatio_createRenderObject$(
  m.Scope scope,
  AspectRatio target,
) =>
    target.createRenderObject;
Function _AspectRatio_updateRenderObject$(
  m.Scope scope,
  AspectRatio target,
) =>
    target.updateRenderObject;
Function _AspectRatio_debugFillProperties$(
  m.Scope scope,
  AspectRatio target,
) =>
    target.debugFillProperties;
double? _IntrinsicWidth_stepWidth$(IntrinsicWidth target) {
  return target.stepWidth;
}

double? _IntrinsicWidth_stepHeight$(IntrinsicWidth target) {
  return target.stepHeight;
}

Function _IntrinsicWidth_createRenderObject$(
  m.Scope scope,
  IntrinsicWidth target,
) =>
    target.createRenderObject;
Function _IntrinsicWidth_updateRenderObject$(
  m.Scope scope,
  IntrinsicWidth target,
) =>
    target.updateRenderObject;
Function _IntrinsicHeight_createRenderObject$(
  m.Scope scope,
  IntrinsicHeight target,
) =>
    target.createRenderObject;
double _Baseline_baseline$(Baseline target) {
  return target.baseline;
}

TextBaseline _Baseline_baselineType$(Baseline target) {
  return target.baselineType;
}

Function _Baseline_createRenderObject$(
  m.Scope scope,
  Baseline target,
) =>
    target.createRenderObject;
Function _Baseline_updateRenderObject$(
  m.Scope scope,
  Baseline target,
) =>
    target.updateRenderObject;
Function _SliverToBoxAdapter_createRenderObject$(
  m.Scope scope,
  SliverToBoxAdapter target,
) =>
    target.createRenderObject;
EdgeInsetsGeometry _SliverPadding_padding$(SliverPadding target) {
  return target.padding;
}

Function _SliverPadding_createRenderObject$(
  m.Scope scope,
  SliverPadding target,
) =>
    target.createRenderObject;
Function _SliverPadding_updateRenderObject$(
  m.Scope scope,
  SliverPadding target,
) =>
    target.updateRenderObject;
Function _SliverPadding_debugFillProperties$(
  m.Scope scope,
  SliverPadding target,
) =>
    target.debugFillProperties;
Axis _ListBody_mainAxis$(ListBody target) {
  return target.mainAxis;
}

bool _ListBody_reverse$(ListBody target) {
  return target.reverse;
}

Function _ListBody_createRenderObject$(
  m.Scope scope,
  ListBody target,
) =>
    target.createRenderObject;
Function _ListBody_updateRenderObject$(
  m.Scope scope,
  ListBody target,
) =>
    target.updateRenderObject;
AlignmentGeometry _Stack_alignment$(Stack target) {
  return target.alignment;
}

TextDirection? _Stack_textDirection$(Stack target) {
  return target.textDirection;
}

StackFit _Stack_fit$(Stack target) {
  return target.fit;
}

Clip _Stack_clipBehavior$(Stack target) {
  return target.clipBehavior;
}

Function _Stack_createRenderObject$(
  m.Scope scope,
  Stack target,
) =>
    target.createRenderObject;
Function _Stack_updateRenderObject$(
  m.Scope scope,
  Stack target,
) =>
    target.updateRenderObject;
Function _Stack_debugFillProperties$(
  m.Scope scope,
  Stack target,
) =>
    target.debugFillProperties;
AlignmentGeometry _IndexedStack_alignment$(IndexedStack target) {
  return target.alignment;
}

TextDirection? _IndexedStack_textDirection$(IndexedStack target) {
  return target.textDirection;
}

Clip _IndexedStack_clipBehavior$(IndexedStack target) {
  return target.clipBehavior;
}

StackFit _IndexedStack_sizing$(IndexedStack target) {
  return target.sizing;
}

int? _IndexedStack_index$(IndexedStack target) {
  return target.index;
}

List<Widget> _IndexedStack_children$(IndexedStack target) {
  return target.children;
}

Function _IndexedStack_build$(
  m.Scope scope,
  IndexedStack target,
) =>
    target.build;
double? _Positioned_left$(Positioned target) {
  return target.left;
}

double? _Positioned_top$(Positioned target) {
  return target.top;
}

double? _Positioned_right$(Positioned target) {
  return target.right;
}

double? _Positioned_bottom$(Positioned target) {
  return target.bottom;
}

double? _Positioned_width$(Positioned target) {
  return target.width;
}

double? _Positioned_height$(Positioned target) {
  return target.height;
}

Type _Positioned_debugTypicalAncestorWidgetClass$(Positioned target) {
  return target.debugTypicalAncestorWidgetClass;
}

Function _Positioned_applyParentData$(
  m.Scope scope,
  Positioned target,
) =>
    target.applyParentData;
Function _Positioned_debugFillProperties$(
  m.Scope scope,
  Positioned target,
) =>
    target.debugFillProperties;
double? _PositionedDirectional_start$(PositionedDirectional target) {
  return target.start;
}

double? _PositionedDirectional_top$(PositionedDirectional target) {
  return target.top;
}

double? _PositionedDirectional_end$(PositionedDirectional target) {
  return target.end;
}

double? _PositionedDirectional_bottom$(PositionedDirectional target) {
  return target.bottom;
}

double? _PositionedDirectional_width$(PositionedDirectional target) {
  return target.width;
}

double? _PositionedDirectional_height$(PositionedDirectional target) {
  return target.height;
}

Widget _PositionedDirectional_child$(PositionedDirectional target) {
  return target.child;
}

Function _PositionedDirectional_build$(
  m.Scope scope,
  PositionedDirectional target,
) =>
    target.build;
Axis _Flex_direction$(Flex target) {
  return target.direction;
}

MainAxisAlignment _Flex_mainAxisAlignment$(Flex target) {
  return target.mainAxisAlignment;
}

MainAxisSize _Flex_mainAxisSize$(Flex target) {
  return target.mainAxisSize;
}

CrossAxisAlignment _Flex_crossAxisAlignment$(Flex target) {
  return target.crossAxisAlignment;
}

TextDirection? _Flex_textDirection$(Flex target) {
  return target.textDirection;
}

VerticalDirection _Flex_verticalDirection$(Flex target) {
  return target.verticalDirection;
}

TextBaseline? _Flex_textBaseline$(Flex target) {
  return target.textBaseline;
}

Clip _Flex_clipBehavior$(Flex target) {
  return target.clipBehavior;
}

Function _Flex_getEffectiveTextDirection$(
  m.Scope scope,
  Flex target,
) =>
    target.getEffectiveTextDirection;
Function _Flex_createRenderObject$(
  m.Scope scope,
  Flex target,
) =>
    target.createRenderObject;
Function _Flex_updateRenderObject$(
  m.Scope scope,
  Flex target,
) =>
    target.updateRenderObject;
Function _Flex_debugFillProperties$(
  m.Scope scope,
  Flex target,
) =>
    target.debugFillProperties;
int _Flexible_flex$(Flexible target) {
  return target.flex;
}

FlexFit _Flexible_fit$(Flexible target) {
  return target.fit;
}

Type _Flexible_debugTypicalAncestorWidgetClass$(Flexible target) {
  return target.debugTypicalAncestorWidgetClass;
}

Function _Flexible_applyParentData$(
  m.Scope scope,
  Flexible target,
) =>
    target.applyParentData;
Function _Flexible_debugFillProperties$(
  m.Scope scope,
  Flexible target,
) =>
    target.debugFillProperties;
Axis _Wrap_direction$(Wrap target) {
  return target.direction;
}

WrapAlignment _Wrap_alignment$(Wrap target) {
  return target.alignment;
}

double _Wrap_spacing$(Wrap target) {
  return target.spacing;
}

WrapAlignment _Wrap_runAlignment$(Wrap target) {
  return target.runAlignment;
}

double _Wrap_runSpacing$(Wrap target) {
  return target.runSpacing;
}

WrapCrossAlignment _Wrap_crossAxisAlignment$(Wrap target) {
  return target.crossAxisAlignment;
}

TextDirection? _Wrap_textDirection$(Wrap target) {
  return target.textDirection;
}

VerticalDirection _Wrap_verticalDirection$(Wrap target) {
  return target.verticalDirection;
}

Clip _Wrap_clipBehavior$(Wrap target) {
  return target.clipBehavior;
}

Function _Wrap_createRenderObject$(
  m.Scope scope,
  Wrap target,
) =>
    target.createRenderObject;
Function _Wrap_updateRenderObject$(
  m.Scope scope,
  Wrap target,
) =>
    target.updateRenderObject;
Function _Wrap_debugFillProperties$(
  m.Scope scope,
  Wrap target,
) =>
    target.debugFillProperties;
FlowDelegate _Flow_delegate$(Flow target) {
  return target.delegate;
}

Clip _Flow_clipBehavior$(Flow target) {
  return target.clipBehavior;
}

Function _Flow_createRenderObject$(
  m.Scope scope,
  Flow target,
) =>
    target.createRenderObject;
Function _Flow_updateRenderObject$(
  m.Scope scope,
  Flow target,
) =>
    target.updateRenderObject;
InlineSpan _RichText_text$(RichText target) {
  return target.text;
}

TextAlign _RichText_textAlign$(RichText target) {
  return target.textAlign;
}

TextDirection? _RichText_textDirection$(RichText target) {
  return target.textDirection;
}

bool _RichText_softWrap$(RichText target) {
  return target.softWrap;
}

TextOverflow _RichText_overflow$(RichText target) {
  return target.overflow;
}

double _RichText_textScaleFactor$(RichText target) {
  return target.textScaleFactor;
}

int? _RichText_maxLines$(RichText target) {
  return target.maxLines;
}

Locale? _RichText_locale$(RichText target) {
  return target.locale;
}

StrutStyle? _RichText_strutStyle$(RichText target) {
  return target.strutStyle;
}

TextWidthBasis _RichText_textWidthBasis$(RichText target) {
  return target.textWidthBasis;
}

TextHeightBehavior? _RichText_textHeightBehavior$(RichText target) {
  return target.textHeightBehavior;
}

SelectionRegistrar? _RichText_selectionRegistrar$(RichText target) {
  return target.selectionRegistrar;
}

Color? _RichText_selectionColor$(RichText target) {
  return target.selectionColor;
}

Function _RichText_createRenderObject$(
  m.Scope scope,
  RichText target,
) =>
    target.createRenderObject;
Function _RichText_updateRenderObject$(
  m.Scope scope,
  RichText target,
) =>
    target.updateRenderObject;
Function _RichText_debugFillProperties$(
  m.Scope scope,
  RichText target,
) =>
    target.debugFillProperties;
Image? _RawImage_image$(RawImage target) {
  return target.image;
}

String? _RawImage_debugImageLabel$(RawImage target) {
  return target.debugImageLabel;
}

double? _RawImage_width$(RawImage target) {
  return target.width;
}

double? _RawImage_height$(RawImage target) {
  return target.height;
}

double _RawImage_scale$(RawImage target) {
  return target.scale;
}

Color? _RawImage_color$(RawImage target) {
  return target.color;
}

Animation<double>? _RawImage_opacity$(RawImage target) {
  return target.opacity;
}

FilterQuality _RawImage_filterQuality$(RawImage target) {
  return target.filterQuality;
}

BlendMode? _RawImage_colorBlendMode$(RawImage target) {
  return target.colorBlendMode;
}

BoxFit? _RawImage_fit$(RawImage target) {
  return target.fit;
}

AlignmentGeometry _RawImage_alignment$(RawImage target) {
  return target.alignment;
}

ImageRepeat _RawImage_repeat$(RawImage target) {
  return target.repeat;
}

Rect? _RawImage_centerSlice$(RawImage target) {
  return target.centerSlice;
}

bool _RawImage_matchTextDirection$(RawImage target) {
  return target.matchTextDirection;
}

bool _RawImage_invertColors$(RawImage target) {
  return target.invertColors;
}

bool _RawImage_isAntiAlias$(RawImage target) {
  return target.isAntiAlias;
}

Function _RawImage_createRenderObject$(
  m.Scope scope,
  RawImage target,
) =>
    target.createRenderObject;
Function _RawImage_updateRenderObject$(
  m.Scope scope,
  RawImage target,
) =>
    target.updateRenderObject;
Function _RawImage_didUnmountRenderObject$(
  m.Scope scope,
  RawImage target,
) =>
    target.didUnmountRenderObject;
Function _RawImage_debugFillProperties$(
  m.Scope scope,
  RawImage target,
) =>
    target.debugFillProperties;
AssetBundle _DefaultAssetBundle_bundle$(DefaultAssetBundle target) {
  return target.bundle;
}

Function _DefaultAssetBundle_of$(m.Scope scope) => DefaultAssetBundle.of;
Function _DefaultAssetBundle_updateShouldNotify$(
  m.Scope scope,
  DefaultAssetBundle target,
) =>
    target.updateShouldNotify;
RenderBox _WidgetToRenderBoxAdapter_renderBox$(
    WidgetToRenderBoxAdapter target) {
  return target.renderBox;
}

void Function()? _WidgetToRenderBoxAdapter_onBuild$(
    WidgetToRenderBoxAdapter target) {
  return target.onBuild;
}

void Function()? _WidgetToRenderBoxAdapter_onUnmount$(
    WidgetToRenderBoxAdapter target) {
  return target.onUnmount;
}

Function _WidgetToRenderBoxAdapter_createRenderObject$(
  m.Scope scope,
  WidgetToRenderBoxAdapter target,
) =>
    target.createRenderObject;
Function _WidgetToRenderBoxAdapter_updateRenderObject$(
  m.Scope scope,
  WidgetToRenderBoxAdapter target,
) =>
    target.updateRenderObject;
Function _WidgetToRenderBoxAdapter_didUnmountRenderObject$(
  m.Scope scope,
  WidgetToRenderBoxAdapter target,
) =>
    target.didUnmountRenderObject;
void Function(PointerDownEvent)? _Listener_onPointerDown$(Listener target) {
  return target.onPointerDown;
}

void Function(PointerMoveEvent)? _Listener_onPointerMove$(Listener target) {
  return target.onPointerMove;
}

void Function(PointerUpEvent)? _Listener_onPointerUp$(Listener target) {
  return target.onPointerUp;
}

void Function(PointerHoverEvent)? _Listener_onPointerHover$(Listener target) {
  return target.onPointerHover;
}

void Function(PointerCancelEvent)? _Listener_onPointerCancel$(Listener target) {
  return target.onPointerCancel;
}

void Function(PointerPanZoomStartEvent)? _Listener_onPointerPanZoomStart$(
    Listener target) {
  return target.onPointerPanZoomStart;
}

void Function(PointerPanZoomUpdateEvent)? _Listener_onPointerPanZoomUpdate$(
    Listener target) {
  return target.onPointerPanZoomUpdate;
}

void Function(PointerPanZoomEndEvent)? _Listener_onPointerPanZoomEnd$(
    Listener target) {
  return target.onPointerPanZoomEnd;
}

void Function(PointerSignalEvent)? _Listener_onPointerSignal$(Listener target) {
  return target.onPointerSignal;
}

HitTestBehavior _Listener_behavior$(Listener target) {
  return target.behavior;
}

Function _Listener_createRenderObject$(
  m.Scope scope,
  Listener target,
) =>
    target.createRenderObject;
Function _Listener_updateRenderObject$(
  m.Scope scope,
  Listener target,
) =>
    target.updateRenderObject;
Function _Listener_debugFillProperties$(
  m.Scope scope,
  Listener target,
) =>
    target.debugFillProperties;
void Function(PointerEnterEvent)? _MouseRegion_onEnter$(MouseRegion target) {
  return target.onEnter;
}

void Function(PointerHoverEvent)? _MouseRegion_onHover$(MouseRegion target) {
  return target.onHover;
}

void Function(PointerExitEvent)? _MouseRegion_onExit$(MouseRegion target) {
  return target.onExit;
}

MouseCursor _MouseRegion_cursor$(MouseRegion target) {
  return target.cursor;
}

bool _MouseRegion_opaque$(MouseRegion target) {
  return target.opaque;
}

HitTestBehavior? _MouseRegion_hitTestBehavior$(MouseRegion target) {
  return target.hitTestBehavior;
}

Function _MouseRegion_createRenderObject$(
  m.Scope scope,
  MouseRegion target,
) =>
    target.createRenderObject;
Function _MouseRegion_updateRenderObject$(
  m.Scope scope,
  MouseRegion target,
) =>
    target.updateRenderObject;
Function _MouseRegion_debugFillProperties$(
  m.Scope scope,
  MouseRegion target,
) =>
    target.debugFillProperties;
Function _RepaintBoundary_wrapAll$(m.Scope scope) => RepaintBoundary.wrapAll;
Function _RepaintBoundary_createRenderObject$(
  m.Scope scope,
  RepaintBoundary target,
) =>
    target.createRenderObject;
bool _IgnorePointer_ignoring$(IgnorePointer target) {
  return target.ignoring;
}

bool? _IgnorePointer_ignoringSemantics$(IgnorePointer target) {
  return target.ignoringSemantics;
}

Function _IgnorePointer_createRenderObject$(
  m.Scope scope,
  IgnorePointer target,
) =>
    target.createRenderObject;
Function _IgnorePointer_updateRenderObject$(
  m.Scope scope,
  IgnorePointer target,
) =>
    target.updateRenderObject;
Function _IgnorePointer_debugFillProperties$(
  m.Scope scope,
  IgnorePointer target,
) =>
    target.debugFillProperties;
bool _AbsorbPointer_absorbing$(AbsorbPointer target) {
  return target.absorbing;
}

bool? _AbsorbPointer_ignoringSemantics$(AbsorbPointer target) {
  return target.ignoringSemantics;
}

Function _AbsorbPointer_createRenderObject$(
  m.Scope scope,
  AbsorbPointer target,
) =>
    target.createRenderObject;
Function _AbsorbPointer_updateRenderObject$(
  m.Scope scope,
  AbsorbPointer target,
) =>
    target.updateRenderObject;
Function _AbsorbPointer_debugFillProperties$(
  m.Scope scope,
  AbsorbPointer target,
) =>
    target.debugFillProperties;
dynamic _MetaData_metaData$(MetaData target) {
  return target.metaData;
}

HitTestBehavior _MetaData_behavior$(MetaData target) {
  return target.behavior;
}

Function _MetaData_createRenderObject$(
  m.Scope scope,
  MetaData target,
) =>
    target.createRenderObject;
Function _MetaData_updateRenderObject$(
  m.Scope scope,
  MetaData target,
) =>
    target.updateRenderObject;
Function _MetaData_debugFillProperties$(
  m.Scope scope,
  MetaData target,
) =>
    target.debugFillProperties;
SemanticsProperties _Semantics_properties$(Semantics target) {
  return target.properties;
}

bool _Semantics_container$(Semantics target) {
  return target.container;
}

bool _Semantics_explicitChildNodes$(Semantics target) {
  return target.explicitChildNodes;
}

bool _Semantics_excludeSemantics$(Semantics target) {
  return target.excludeSemantics;
}

Function _Semantics_createRenderObject$(
  m.Scope scope,
  Semantics target,
) =>
    target.createRenderObject;
Function _Semantics_updateRenderObject$(
  m.Scope scope,
  Semantics target,
) =>
    target.updateRenderObject;
Function _Semantics_debugFillProperties$(
  m.Scope scope,
  Semantics target,
) =>
    target.debugFillProperties;
Function _MergeSemantics_createRenderObject$(
  m.Scope scope,
  MergeSemantics target,
) =>
    target.createRenderObject;
bool _BlockSemantics_blocking$(BlockSemantics target) {
  return target.blocking;
}

Function _BlockSemantics_createRenderObject$(
  m.Scope scope,
  BlockSemantics target,
) =>
    target.createRenderObject;
Function _BlockSemantics_updateRenderObject$(
  m.Scope scope,
  BlockSemantics target,
) =>
    target.updateRenderObject;
Function _BlockSemantics_debugFillProperties$(
  m.Scope scope,
  BlockSemantics target,
) =>
    target.debugFillProperties;
bool _ExcludeSemantics_excluding$(ExcludeSemantics target) {
  return target.excluding;
}

Function _ExcludeSemantics_createRenderObject$(
  m.Scope scope,
  ExcludeSemantics target,
) =>
    target.createRenderObject;
Function _ExcludeSemantics_updateRenderObject$(
  m.Scope scope,
  ExcludeSemantics target,
) =>
    target.updateRenderObject;
Function _ExcludeSemantics_debugFillProperties$(
  m.Scope scope,
  ExcludeSemantics target,
) =>
    target.debugFillProperties;
int _IndexedSemantics_index$(IndexedSemantics target) {
  return target.index;
}

Function _IndexedSemantics_createRenderObject$(
  m.Scope scope,
  IndexedSemantics target,
) =>
    target.createRenderObject;
Function _IndexedSemantics_updateRenderObject$(
  m.Scope scope,
  IndexedSemantics target,
) =>
    target.updateRenderObject;
Function _IndexedSemantics_debugFillProperties$(
  m.Scope scope,
  IndexedSemantics target,
) =>
    target.debugFillProperties;
Widget _KeyedSubtree_child$(KeyedSubtree target) {
  return target.child;
}

Function _KeyedSubtree_ensureUniqueKeysForList$(m.Scope scope) =>
    KeyedSubtree.ensureUniqueKeysForList;
Function _KeyedSubtree_build$(
  m.Scope scope,
  KeyedSubtree target,
) =>
    target.build;
Widget Function(BuildContext) _Builder_builder$(Builder target) {
  return target.builder;
}

Function _Builder_build$(
  m.Scope scope,
  Builder target,
) =>
    target.build;
Widget Function(BuildContext, void Function(void Function()))
    _StatefulBuilder_builder$(StatefulBuilder target) {
  return target.builder;
}

Function _StatefulBuilder_createState$(
  m.Scope scope,
  StatefulBuilder target,
) =>
    target.createState;
Color _ColoredBox_color$(ColoredBox target) {
  return target.color;
}

Function _ColoredBox_createRenderObject$(
  m.Scope scope,
  ColoredBox target,
) =>
    target.createRenderObject;
Function _ColoredBox_updateRenderObject$(
  m.Scope scope,
  ColoredBox target,
) =>
    target.updateRenderObject;
Function _ColoredBox_debugFillProperties$(
  m.Scope scope,
  ColoredBox target,
) =>
    target.debugFillProperties;
Function _getAxisDirectionFromAxisReverseAndDirectionality$(m.Scope scope) =>
    getAxisDirectionFromAxisReverseAndDirectionality;
