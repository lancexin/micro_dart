// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/sliver_grid.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/rendering/object.dart';
import 'package:flutter/src/rendering/sliver.dart';
import 'package:flutter/src/rendering/sliver_multi_box_adaptor.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/sliver_grid.dart',
  {
    'SliverGridGeometry.': _SliverGridGeometry__$,
    'SliverGridRegularTileLayout.': _SliverGridRegularTileLayout__$,
    'SliverGridDelegateWithFixedCrossAxisCount.':
        _SliverGridDelegateWithFixedCrossAxisCount__$,
    'SliverGridDelegateWithMaxCrossAxisExtent.':
        _SliverGridDelegateWithMaxCrossAxisExtent__$,
    'SliverGridParentData.': _SliverGridParentData__$,
    'RenderSliverGrid.': _RenderSliverGrid__$,
  },
  {},
  {
    'SliverGridGeometry': m.ClassMirror(
      'SliverGridGeometry',
      {
        '#as': SliverGridGeometry_as$,
        '#is': SliverGridGeometry_is$,
        'scrollOffset': _SliverGridGeometry_scrollOffset$,
        'crossAxisOffset': _SliverGridGeometry_crossAxisOffset$,
        'mainAxisExtent': _SliverGridGeometry_mainAxisExtent$,
        'crossAxisExtent': _SliverGridGeometry_crossAxisExtent$,
        'trailingScrollOffset': _SliverGridGeometry_trailingScrollOffset$,
        'getBoxConstraints': _SliverGridGeometry_getBoxConstraints$,
        'toString': _SliverGridGeometry_toString$,
      },
      {},
    ),
    'SliverGridLayout': m.ClassMirror(
      'SliverGridLayout',
      {
        '#as': SliverGridLayout_as$,
        '#is': SliverGridLayout_is$,
        'getMinChildIndexForScrollOffset':
            _SliverGridLayout_getMinChildIndexForScrollOffset$,
        'getMaxChildIndexForScrollOffset':
            _SliverGridLayout_getMaxChildIndexForScrollOffset$,
        'getGeometryForChildIndex': _SliverGridLayout_getGeometryForChildIndex$,
        'computeMaxScrollOffset': _SliverGridLayout_computeMaxScrollOffset$,
      },
      {},
    ),
    'SliverGridRegularTileLayout': m.ClassMirror(
      'SliverGridRegularTileLayout',
      {
        '#as': SliverGridRegularTileLayout_as$,
        '#is': SliverGridRegularTileLayout_is$,
        'crossAxisCount': _SliverGridRegularTileLayout_crossAxisCount$,
        'mainAxisStride': _SliverGridRegularTileLayout_mainAxisStride$,
        'crossAxisStride': _SliverGridRegularTileLayout_crossAxisStride$,
        'childMainAxisExtent':
            _SliverGridRegularTileLayout_childMainAxisExtent$,
        'childCrossAxisExtent':
            _SliverGridRegularTileLayout_childCrossAxisExtent$,
        'reverseCrossAxis': _SliverGridRegularTileLayout_reverseCrossAxis$,
        'getMinChildIndexForScrollOffset':
            _SliverGridRegularTileLayout_getMinChildIndexForScrollOffset$,
        'getMaxChildIndexForScrollOffset':
            _SliverGridRegularTileLayout_getMaxChildIndexForScrollOffset$,
        'getGeometryForChildIndex':
            _SliverGridRegularTileLayout_getGeometryForChildIndex$,
        'computeMaxScrollOffset':
            _SliverGridRegularTileLayout_computeMaxScrollOffset$,
      },
      {},
    ),
    'SliverGridDelegate': m.ClassMirror(
      'SliverGridDelegate',
      {
        '#as': SliverGridDelegate_as$,
        '#is': SliverGridDelegate_is$,
        'getLayout': _SliverGridDelegate_getLayout$,
        'shouldRelayout': _SliverGridDelegate_shouldRelayout$,
      },
      {},
    ),
    'SliverGridDelegateWithFixedCrossAxisCount': m.ClassMirror(
      'SliverGridDelegateWithFixedCrossAxisCount',
      {
        '#as': SliverGridDelegateWithFixedCrossAxisCount_as$,
        '#is': SliverGridDelegateWithFixedCrossAxisCount_is$,
        'crossAxisCount':
            _SliverGridDelegateWithFixedCrossAxisCount_crossAxisCount$,
        'mainAxisSpacing':
            _SliverGridDelegateWithFixedCrossAxisCount_mainAxisSpacing$,
        'crossAxisSpacing':
            _SliverGridDelegateWithFixedCrossAxisCount_crossAxisSpacing$,
        'childAspectRatio':
            _SliverGridDelegateWithFixedCrossAxisCount_childAspectRatio$,
        'mainAxisExtent':
            _SliverGridDelegateWithFixedCrossAxisCount_mainAxisExtent$,
        'getLayout': _SliverGridDelegateWithFixedCrossAxisCount_getLayout$,
        'shouldRelayout':
            _SliverGridDelegateWithFixedCrossAxisCount_shouldRelayout$,
      },
      {},
    ),
    'SliverGridDelegateWithMaxCrossAxisExtent': m.ClassMirror(
      'SliverGridDelegateWithMaxCrossAxisExtent',
      {
        '#as': SliverGridDelegateWithMaxCrossAxisExtent_as$,
        '#is': SliverGridDelegateWithMaxCrossAxisExtent_is$,
        'maxCrossAxisExtent':
            _SliverGridDelegateWithMaxCrossAxisExtent_maxCrossAxisExtent$,
        'mainAxisSpacing':
            _SliverGridDelegateWithMaxCrossAxisExtent_mainAxisSpacing$,
        'crossAxisSpacing':
            _SliverGridDelegateWithMaxCrossAxisExtent_crossAxisSpacing$,
        'childAspectRatio':
            _SliverGridDelegateWithMaxCrossAxisExtent_childAspectRatio$,
        'mainAxisExtent':
            _SliverGridDelegateWithMaxCrossAxisExtent_mainAxisExtent$,
        'getLayout': _SliverGridDelegateWithMaxCrossAxisExtent_getLayout$,
        'shouldRelayout':
            _SliverGridDelegateWithMaxCrossAxisExtent_shouldRelayout$,
      },
      {},
    ),
    'SliverGridParentData': m.ClassMirror(
      'SliverGridParentData',
      {
        '#as': SliverGridParentData_as$,
        '#is': SliverGridParentData_is$,
        'crossAxisOffset': _SliverGridParentData_crossAxisOffset$,
        'toString': _SliverGridParentData_toString$,
      },
      {'crossAxisOffset': _SliverGridParentData_crossAxisOffset_set$},
    ),
    'RenderSliverGrid': m.ClassMirror(
      'RenderSliverGrid',
      {
        '#as': RenderSliverGrid_as$,
        '#is': RenderSliverGrid_is$,
        'gridDelegate': _RenderSliverGrid_gridDelegate$,
        'setupParentData': _RenderSliverGrid_setupParentData$,
        'childCrossAxisPosition': _RenderSliverGrid_childCrossAxisPosition$,
        'performLayout': _RenderSliverGrid_performLayout$,
      },
      {'gridDelegate': _RenderSliverGrid_gridDelegate_set$},
    ),
  },
);
Function SliverGridGeometry_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverGridGeometry;
Function SliverGridGeometry_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverGridGeometry;
Function _SliverGridGeometry_scrollOffset$(
  m.Scope scope$,
  SliverGridGeometry target$,
) =>
    () {
      return target$.scrollOffset;
    };
Function _SliverGridGeometry_crossAxisOffset$(
  m.Scope scope$,
  SliverGridGeometry target$,
) =>
    () {
      return target$.crossAxisOffset;
    };
Function _SliverGridGeometry_mainAxisExtent$(
  m.Scope scope$,
  SliverGridGeometry target$,
) =>
    () {
      return target$.mainAxisExtent;
    };
Function _SliverGridGeometry_crossAxisExtent$(
  m.Scope scope$,
  SliverGridGeometry target$,
) =>
    () {
      return target$.crossAxisExtent;
    };
Function _SliverGridGeometry_trailingScrollOffset$(
  m.Scope scope$,
  SliverGridGeometry target$,
) =>
    () {
      return target$.trailingScrollOffset;
    };
Function _SliverGridGeometry__$(m.Scope scope$) => ({
      required double scrollOffset,
      required double crossAxisOffset,
      required double mainAxisExtent,
      required double crossAxisExtent,
    }) {
      return SliverGridGeometry(
        crossAxisExtent: crossAxisExtent,
        crossAxisOffset: crossAxisOffset,
        mainAxisExtent: mainAxisExtent,
        scrollOffset: scrollOffset,
      );
    };
Function _SliverGridGeometry_getBoxConstraints$(
  m.Scope scope$,
  SliverGridGeometry target$,
) =>
    target$.getBoxConstraints;
Function _SliverGridGeometry_toString$(
  m.Scope scope$,
  SliverGridGeometry target$,
) =>
    target$.toString;
Function SliverGridLayout_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverGridLayout;
Function SliverGridLayout_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverGridLayout;
Function _SliverGridLayout_getMinChildIndexForScrollOffset$(
  m.Scope scope$,
  SliverGridLayout target$,
) =>
    target$.getMinChildIndexForScrollOffset;
Function _SliverGridLayout_getMaxChildIndexForScrollOffset$(
  m.Scope scope$,
  SliverGridLayout target$,
) =>
    target$.getMaxChildIndexForScrollOffset;
Function _SliverGridLayout_getGeometryForChildIndex$(
  m.Scope scope$,
  SliverGridLayout target$,
) =>
    target$.getGeometryForChildIndex;
Function _SliverGridLayout_computeMaxScrollOffset$(
  m.Scope scope$,
  SliverGridLayout target$,
) =>
    target$.computeMaxScrollOffset;
Function SliverGridRegularTileLayout_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverGridRegularTileLayout;
Function SliverGridRegularTileLayout_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverGridRegularTileLayout;
Function _SliverGridRegularTileLayout_crossAxisCount$(
  m.Scope scope$,
  SliverGridRegularTileLayout target$,
) =>
    () {
      return target$.crossAxisCount;
    };
Function _SliverGridRegularTileLayout_mainAxisStride$(
  m.Scope scope$,
  SliverGridRegularTileLayout target$,
) =>
    () {
      return target$.mainAxisStride;
    };
Function _SliverGridRegularTileLayout_crossAxisStride$(
  m.Scope scope$,
  SliverGridRegularTileLayout target$,
) =>
    () {
      return target$.crossAxisStride;
    };
Function _SliverGridRegularTileLayout_childMainAxisExtent$(
  m.Scope scope$,
  SliverGridRegularTileLayout target$,
) =>
    () {
      return target$.childMainAxisExtent;
    };
Function _SliverGridRegularTileLayout_childCrossAxisExtent$(
  m.Scope scope$,
  SliverGridRegularTileLayout target$,
) =>
    () {
      return target$.childCrossAxisExtent;
    };
Function _SliverGridRegularTileLayout_reverseCrossAxis$(
  m.Scope scope$,
  SliverGridRegularTileLayout target$,
) =>
    () {
      return target$.reverseCrossAxis;
    };
Function _SliverGridRegularTileLayout__$(m.Scope scope$) => ({
      required int crossAxisCount,
      required double mainAxisStride,
      required double crossAxisStride,
      required double childMainAxisExtent,
      required double childCrossAxisExtent,
      required bool reverseCrossAxis,
    }) {
      return SliverGridRegularTileLayout(
        childCrossAxisExtent: childCrossAxisExtent,
        childMainAxisExtent: childMainAxisExtent,
        crossAxisCount: crossAxisCount,
        crossAxisStride: crossAxisStride,
        mainAxisStride: mainAxisStride,
        reverseCrossAxis: reverseCrossAxis,
      );
    };
Function _SliverGridRegularTileLayout_getMinChildIndexForScrollOffset$(
  m.Scope scope$,
  SliverGridRegularTileLayout target$,
) =>
    target$.getMinChildIndexForScrollOffset;
Function _SliverGridRegularTileLayout_getMaxChildIndexForScrollOffset$(
  m.Scope scope$,
  SliverGridRegularTileLayout target$,
) =>
    target$.getMaxChildIndexForScrollOffset;
Function _SliverGridRegularTileLayout_getGeometryForChildIndex$(
  m.Scope scope$,
  SliverGridRegularTileLayout target$,
) =>
    target$.getGeometryForChildIndex;
Function _SliverGridRegularTileLayout_computeMaxScrollOffset$(
  m.Scope scope$,
  SliverGridRegularTileLayout target$,
) =>
    target$.computeMaxScrollOffset;
Function SliverGridDelegate_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverGridDelegate;
Function SliverGridDelegate_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverGridDelegate;
Function _SliverGridDelegate_getLayout$(
  m.Scope scope$,
  SliverGridDelegate target$,
) =>
    target$.getLayout;
Function _SliverGridDelegate_shouldRelayout$(
  m.Scope scope$,
  SliverGridDelegate target$,
) =>
    target$.shouldRelayout;
Function SliverGridDelegateWithFixedCrossAxisCount_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverGridDelegateWithFixedCrossAxisCount;
Function SliverGridDelegateWithFixedCrossAxisCount_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverGridDelegateWithFixedCrossAxisCount;
Function _SliverGridDelegateWithFixedCrossAxisCount_crossAxisCount$(
  m.Scope scope$,
  SliverGridDelegateWithFixedCrossAxisCount target$,
) =>
    () {
      return target$.crossAxisCount;
    };
Function _SliverGridDelegateWithFixedCrossAxisCount_mainAxisSpacing$(
  m.Scope scope$,
  SliverGridDelegateWithFixedCrossAxisCount target$,
) =>
    () {
      return target$.mainAxisSpacing;
    };
Function _SliverGridDelegateWithFixedCrossAxisCount_crossAxisSpacing$(
  m.Scope scope$,
  SliverGridDelegateWithFixedCrossAxisCount target$,
) =>
    () {
      return target$.crossAxisSpacing;
    };
Function _SliverGridDelegateWithFixedCrossAxisCount_childAspectRatio$(
  m.Scope scope$,
  SliverGridDelegateWithFixedCrossAxisCount target$,
) =>
    () {
      return target$.childAspectRatio;
    };
Function _SliverGridDelegateWithFixedCrossAxisCount_mainAxisExtent$(
  m.Scope scope$,
  SliverGridDelegateWithFixedCrossAxisCount target$,
) =>
    () {
      return target$.mainAxisExtent;
    };
Function _SliverGridDelegateWithFixedCrossAxisCount__$(m.Scope scope$) => ({
      required int crossAxisCount,
      double? mainAxisSpacing,
      double? crossAxisSpacing,
      double? childAspectRatio,
      double? mainAxisExtent,
    }) {
      return SliverGridDelegateWithFixedCrossAxisCount(
        childAspectRatio: childAspectRatio ?? 1.0,
        crossAxisCount: crossAxisCount,
        crossAxisSpacing: crossAxisSpacing ?? 0.0,
        mainAxisExtent: mainAxisExtent,
        mainAxisSpacing: mainAxisSpacing ?? 0.0,
      );
    };
Function _SliverGridDelegateWithFixedCrossAxisCount_getLayout$(
  m.Scope scope$,
  SliverGridDelegateWithFixedCrossAxisCount target$,
) =>
    target$.getLayout;
Function _SliverGridDelegateWithFixedCrossAxisCount_shouldRelayout$(
  m.Scope scope$,
  SliverGridDelegateWithFixedCrossAxisCount target$,
) =>
    target$.shouldRelayout;
Function SliverGridDelegateWithMaxCrossAxisExtent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverGridDelegateWithMaxCrossAxisExtent;
Function SliverGridDelegateWithMaxCrossAxisExtent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverGridDelegateWithMaxCrossAxisExtent;
Function _SliverGridDelegateWithMaxCrossAxisExtent_maxCrossAxisExtent$(
  m.Scope scope$,
  SliverGridDelegateWithMaxCrossAxisExtent target$,
) =>
    () {
      return target$.maxCrossAxisExtent;
    };
Function _SliverGridDelegateWithMaxCrossAxisExtent_mainAxisSpacing$(
  m.Scope scope$,
  SliverGridDelegateWithMaxCrossAxisExtent target$,
) =>
    () {
      return target$.mainAxisSpacing;
    };
Function _SliverGridDelegateWithMaxCrossAxisExtent_crossAxisSpacing$(
  m.Scope scope$,
  SliverGridDelegateWithMaxCrossAxisExtent target$,
) =>
    () {
      return target$.crossAxisSpacing;
    };
Function _SliverGridDelegateWithMaxCrossAxisExtent_childAspectRatio$(
  m.Scope scope$,
  SliverGridDelegateWithMaxCrossAxisExtent target$,
) =>
    () {
      return target$.childAspectRatio;
    };
Function _SliverGridDelegateWithMaxCrossAxisExtent_mainAxisExtent$(
  m.Scope scope$,
  SliverGridDelegateWithMaxCrossAxisExtent target$,
) =>
    () {
      return target$.mainAxisExtent;
    };
Function _SliverGridDelegateWithMaxCrossAxisExtent__$(m.Scope scope$) => ({
      required double maxCrossAxisExtent,
      double? mainAxisSpacing,
      double? crossAxisSpacing,
      double? childAspectRatio,
      double? mainAxisExtent,
    }) {
      return SliverGridDelegateWithMaxCrossAxisExtent(
        childAspectRatio: childAspectRatio ?? 1.0,
        crossAxisSpacing: crossAxisSpacing ?? 0.0,
        mainAxisExtent: mainAxisExtent,
        mainAxisSpacing: mainAxisSpacing ?? 0.0,
        maxCrossAxisExtent: maxCrossAxisExtent,
      );
    };
Function _SliverGridDelegateWithMaxCrossAxisExtent_getLayout$(
  m.Scope scope$,
  SliverGridDelegateWithMaxCrossAxisExtent target$,
) =>
    target$.getLayout;
Function _SliverGridDelegateWithMaxCrossAxisExtent_shouldRelayout$(
  m.Scope scope$,
  SliverGridDelegateWithMaxCrossAxisExtent target$,
) =>
    target$.shouldRelayout;
Function SliverGridParentData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverGridParentData;
Function SliverGridParentData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverGridParentData;
Function _SliverGridParentData_crossAxisOffset$(
  m.Scope scope$,
  SliverGridParentData target$,
) =>
    () {
      return target$.crossAxisOffset;
    };
void _SliverGridParentData_crossAxisOffset_set$(
  m.Scope scope$,
  SliverGridParentData target$,
) =>
    (dynamic other$) {
      target$.crossAxisOffset = other$;
    };
Function _SliverGridParentData__$(m.Scope scope$) => () {
      return SliverGridParentData();
    };
Function _SliverGridParentData_toString$(
  m.Scope scope$,
  SliverGridParentData target$,
) =>
    target$.toString;
Function RenderSliverGrid_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RenderSliverGrid;
Function RenderSliverGrid_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RenderSliverGrid;
Function _RenderSliverGrid_gridDelegate$(
  m.Scope scope$,
  RenderSliverGrid target$,
) =>
    () {
      return target$.gridDelegate;
    };
void _RenderSliverGrid_gridDelegate_set$(
  m.Scope scope$,
  RenderSliverGrid target$,
) =>
    (dynamic other$) {
      target$.gridDelegate = other$;
    };
Function _RenderSliverGrid__$(m.Scope scope$) => ({
      required RenderSliverBoxChildManager childManager,
      required SliverGridDelegate gridDelegate,
    }) {
      return RenderSliverGrid(
        childManager: childManager,
        gridDelegate: gridDelegate,
      );
    };
Function _RenderSliverGrid_setupParentData$(
  m.Scope scope$,
  RenderSliverGrid target$,
) =>
    target$.setupParentData;
Function _RenderSliverGrid_childCrossAxisPosition$(
  m.Scope scope$,
  RenderSliverGrid target$,
) =>
    target$.childCrossAxisPosition;
Function _RenderSliverGrid_performLayout$(
  m.Scope scope$,
  RenderSliverGrid target$,
) =>
    target$.performLayout;
