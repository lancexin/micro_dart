// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/sliver_grid.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/rendering/object.dart';
import 'package:flutter/src/rendering/sliver.dart';
import 'package:flutter/src/rendering/sliver_multi_box_adaptor.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/sliver_grid.dart',
  {},
  {},
  {
    'SliverGridGeometry': m.ClassMirror(
      'SliverGridGeometry',
      {
        '#as': SliverGridGeometry_as$,
        '#is': SliverGridGeometry_is$,
        'scrollOffset': _SliverGridGeometry_scrollOffset$,
        'crossAxisOffset': _SliverGridGeometry_crossAxisOffset$,
        'mainAxisExtent': _SliverGridGeometry_mainAxisExtent$,
        'crossAxisExtent': _SliverGridGeometry_crossAxisExtent$,
        'trailingScrollOffset': _SliverGridGeometry_trailingScrollOffset$,
        'getBoxConstraints': _SliverGridGeometry_getBoxConstraints$,
        'toString': _SliverGridGeometry_toString$,
      },
      {},
    ),
    'SliverGridLayout': m.ClassMirror(
      'SliverGridLayout',
      {
        '#as': SliverGridLayout_as$,
        '#is': SliverGridLayout_is$,
        'getMinChildIndexForScrollOffset':
            _SliverGridLayout_getMinChildIndexForScrollOffset$,
        'getMaxChildIndexForScrollOffset':
            _SliverGridLayout_getMaxChildIndexForScrollOffset$,
        'getGeometryForChildIndex': _SliverGridLayout_getGeometryForChildIndex$,
        'computeMaxScrollOffset': _SliverGridLayout_computeMaxScrollOffset$,
      },
      {},
    ),
    'SliverGridRegularTileLayout': m.ClassMirror(
      'SliverGridRegularTileLayout',
      {
        '#as': SliverGridRegularTileLayout_as$,
        '#is': SliverGridRegularTileLayout_is$,
        'crossAxisCount': _SliverGridRegularTileLayout_crossAxisCount$,
        'mainAxisStride': _SliverGridRegularTileLayout_mainAxisStride$,
        'crossAxisStride': _SliverGridRegularTileLayout_crossAxisStride$,
        'childMainAxisExtent':
            _SliverGridRegularTileLayout_childMainAxisExtent$,
        'childCrossAxisExtent':
            _SliverGridRegularTileLayout_childCrossAxisExtent$,
        'reverseCrossAxis': _SliverGridRegularTileLayout_reverseCrossAxis$,
        'getMinChildIndexForScrollOffset':
            _SliverGridRegularTileLayout_getMinChildIndexForScrollOffset$,
        'getMaxChildIndexForScrollOffset':
            _SliverGridRegularTileLayout_getMaxChildIndexForScrollOffset$,
        'getGeometryForChildIndex':
            _SliverGridRegularTileLayout_getGeometryForChildIndex$,
        'computeMaxScrollOffset':
            _SliverGridRegularTileLayout_computeMaxScrollOffset$,
      },
      {},
    ),
    'SliverGridDelegate': m.ClassMirror(
      'SliverGridDelegate',
      {
        '#as': SliverGridDelegate_as$,
        '#is': SliverGridDelegate_is$,
        'getLayout': _SliverGridDelegate_getLayout$,
        'shouldRelayout': _SliverGridDelegate_shouldRelayout$,
      },
      {},
    ),
    'SliverGridDelegateWithFixedCrossAxisCount': m.ClassMirror(
      'SliverGridDelegateWithFixedCrossAxisCount',
      {
        '#as': SliverGridDelegateWithFixedCrossAxisCount_as$,
        '#is': SliverGridDelegateWithFixedCrossAxisCount_is$,
        'crossAxisCount':
            _SliverGridDelegateWithFixedCrossAxisCount_crossAxisCount$,
        'mainAxisSpacing':
            _SliverGridDelegateWithFixedCrossAxisCount_mainAxisSpacing$,
        'crossAxisSpacing':
            _SliverGridDelegateWithFixedCrossAxisCount_crossAxisSpacing$,
        'childAspectRatio':
            _SliverGridDelegateWithFixedCrossAxisCount_childAspectRatio$,
        'mainAxisExtent':
            _SliverGridDelegateWithFixedCrossAxisCount_mainAxisExtent$,
        'getLayout': _SliverGridDelegateWithFixedCrossAxisCount_getLayout$,
        'shouldRelayout':
            _SliverGridDelegateWithFixedCrossAxisCount_shouldRelayout$,
      },
      {},
    ),
    'SliverGridDelegateWithMaxCrossAxisExtent': m.ClassMirror(
      'SliverGridDelegateWithMaxCrossAxisExtent',
      {
        '#as': SliverGridDelegateWithMaxCrossAxisExtent_as$,
        '#is': SliverGridDelegateWithMaxCrossAxisExtent_is$,
        'maxCrossAxisExtent':
            _SliverGridDelegateWithMaxCrossAxisExtent_maxCrossAxisExtent$,
        'mainAxisSpacing':
            _SliverGridDelegateWithMaxCrossAxisExtent_mainAxisSpacing$,
        'crossAxisSpacing':
            _SliverGridDelegateWithMaxCrossAxisExtent_crossAxisSpacing$,
        'childAspectRatio':
            _SliverGridDelegateWithMaxCrossAxisExtent_childAspectRatio$,
        'mainAxisExtent':
            _SliverGridDelegateWithMaxCrossAxisExtent_mainAxisExtent$,
        'getLayout': _SliverGridDelegateWithMaxCrossAxisExtent_getLayout$,
        'shouldRelayout':
            _SliverGridDelegateWithMaxCrossAxisExtent_shouldRelayout$,
      },
      {},
    ),
    'SliverGridParentData': m.ClassMirror(
      'SliverGridParentData',
      {
        '#as': SliverGridParentData_as$,
        '#is': SliverGridParentData_is$,
        'crossAxisOffset': _SliverGridParentData_crossAxisOffset$,
        'toString': _SliverGridParentData_toString$,
      },
      {'crossAxisOffset': _SliverGridParentData_crossAxisOffset_set$},
    ),
    'RenderSliverGrid': m.ClassMirror(
      'RenderSliverGrid',
      {
        '#as': RenderSliverGrid_as$,
        '#is': RenderSliverGrid_is$,
        'gridDelegate': _RenderSliverGrid_gridDelegate$,
        'setupParentData': _RenderSliverGrid_setupParentData$,
        'childCrossAxisPosition': _RenderSliverGrid_childCrossAxisPosition$,
        'performLayout': _RenderSliverGrid_performLayout$,
      },
      {'gridDelegate': _RenderSliverGrid_gridDelegate_set$},
    ),
  },
);
Function SliverGridGeometry_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SliverGridGeometry;
Function SliverGridGeometry_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SliverGridGeometry;
double _SliverGridGeometry_scrollOffset$(SliverGridGeometry target) {
  return target.scrollOffset;
}

double _SliverGridGeometry_crossAxisOffset$(SliverGridGeometry target) {
  return target.crossAxisOffset;
}

double _SliverGridGeometry_mainAxisExtent$(SliverGridGeometry target) {
  return target.mainAxisExtent;
}

double _SliverGridGeometry_crossAxisExtent$(SliverGridGeometry target) {
  return target.crossAxisExtent;
}

double _SliverGridGeometry_trailingScrollOffset$(SliverGridGeometry target) {
  return target.trailingScrollOffset;
}

Function _SliverGridGeometry_getBoxConstraints$(
  m.Scope scope,
  SliverGridGeometry target,
) =>
    target.getBoxConstraints;
Function _SliverGridGeometry_toString$(
  m.Scope scope,
  SliverGridGeometry target,
) =>
    target.toString;
Function SliverGridLayout_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SliverGridLayout;
Function SliverGridLayout_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SliverGridLayout;
Function _SliverGridLayout_getMinChildIndexForScrollOffset$(
  m.Scope scope,
  SliverGridLayout target,
) =>
    target.getMinChildIndexForScrollOffset;
Function _SliverGridLayout_getMaxChildIndexForScrollOffset$(
  m.Scope scope,
  SliverGridLayout target,
) =>
    target.getMaxChildIndexForScrollOffset;
Function _SliverGridLayout_getGeometryForChildIndex$(
  m.Scope scope,
  SliverGridLayout target,
) =>
    target.getGeometryForChildIndex;
Function _SliverGridLayout_computeMaxScrollOffset$(
  m.Scope scope,
  SliverGridLayout target,
) =>
    target.computeMaxScrollOffset;
Function SliverGridRegularTileLayout_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SliverGridRegularTileLayout;
Function SliverGridRegularTileLayout_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SliverGridRegularTileLayout;
int _SliverGridRegularTileLayout_crossAxisCount$(
    SliverGridRegularTileLayout target) {
  return target.crossAxisCount;
}

double _SliverGridRegularTileLayout_mainAxisStride$(
    SliverGridRegularTileLayout target) {
  return target.mainAxisStride;
}

double _SliverGridRegularTileLayout_crossAxisStride$(
    SliverGridRegularTileLayout target) {
  return target.crossAxisStride;
}

double _SliverGridRegularTileLayout_childMainAxisExtent$(
    SliverGridRegularTileLayout target) {
  return target.childMainAxisExtent;
}

double _SliverGridRegularTileLayout_childCrossAxisExtent$(
    SliverGridRegularTileLayout target) {
  return target.childCrossAxisExtent;
}

bool _SliverGridRegularTileLayout_reverseCrossAxis$(
    SliverGridRegularTileLayout target) {
  return target.reverseCrossAxis;
}

Function _SliverGridRegularTileLayout_getMinChildIndexForScrollOffset$(
  m.Scope scope,
  SliverGridRegularTileLayout target,
) =>
    target.getMinChildIndexForScrollOffset;
Function _SliverGridRegularTileLayout_getMaxChildIndexForScrollOffset$(
  m.Scope scope,
  SliverGridRegularTileLayout target,
) =>
    target.getMaxChildIndexForScrollOffset;
Function _SliverGridRegularTileLayout_getGeometryForChildIndex$(
  m.Scope scope,
  SliverGridRegularTileLayout target,
) =>
    target.getGeometryForChildIndex;
Function _SliverGridRegularTileLayout_computeMaxScrollOffset$(
  m.Scope scope,
  SliverGridRegularTileLayout target,
) =>
    target.computeMaxScrollOffset;
Function SliverGridDelegate_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SliverGridDelegate;
Function SliverGridDelegate_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SliverGridDelegate;
Function _SliverGridDelegate_getLayout$(
  m.Scope scope,
  SliverGridDelegate target,
) =>
    target.getLayout;
Function _SliverGridDelegate_shouldRelayout$(
  m.Scope scope,
  SliverGridDelegate target,
) =>
    target.shouldRelayout;
Function SliverGridDelegateWithFixedCrossAxisCount_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SliverGridDelegateWithFixedCrossAxisCount;
Function SliverGridDelegateWithFixedCrossAxisCount_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SliverGridDelegateWithFixedCrossAxisCount;
int _SliverGridDelegateWithFixedCrossAxisCount_crossAxisCount$(
    SliverGridDelegateWithFixedCrossAxisCount target) {
  return target.crossAxisCount;
}

double _SliverGridDelegateWithFixedCrossAxisCount_mainAxisSpacing$(
    SliverGridDelegateWithFixedCrossAxisCount target) {
  return target.mainAxisSpacing;
}

double _SliverGridDelegateWithFixedCrossAxisCount_crossAxisSpacing$(
    SliverGridDelegateWithFixedCrossAxisCount target) {
  return target.crossAxisSpacing;
}

double _SliverGridDelegateWithFixedCrossAxisCount_childAspectRatio$(
    SliverGridDelegateWithFixedCrossAxisCount target) {
  return target.childAspectRatio;
}

double? _SliverGridDelegateWithFixedCrossAxisCount_mainAxisExtent$(
    SliverGridDelegateWithFixedCrossAxisCount target) {
  return target.mainAxisExtent;
}

Function _SliverGridDelegateWithFixedCrossAxisCount_getLayout$(
  m.Scope scope,
  SliverGridDelegateWithFixedCrossAxisCount target,
) =>
    target.getLayout;
Function _SliverGridDelegateWithFixedCrossAxisCount_shouldRelayout$(
  m.Scope scope,
  SliverGridDelegateWithFixedCrossAxisCount target,
) =>
    target.shouldRelayout;
Function SliverGridDelegateWithMaxCrossAxisExtent_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SliverGridDelegateWithMaxCrossAxisExtent;
Function SliverGridDelegateWithMaxCrossAxisExtent_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SliverGridDelegateWithMaxCrossAxisExtent;
double _SliverGridDelegateWithMaxCrossAxisExtent_maxCrossAxisExtent$(
    SliverGridDelegateWithMaxCrossAxisExtent target) {
  return target.maxCrossAxisExtent;
}

double _SliverGridDelegateWithMaxCrossAxisExtent_mainAxisSpacing$(
    SliverGridDelegateWithMaxCrossAxisExtent target) {
  return target.mainAxisSpacing;
}

double _SliverGridDelegateWithMaxCrossAxisExtent_crossAxisSpacing$(
    SliverGridDelegateWithMaxCrossAxisExtent target) {
  return target.crossAxisSpacing;
}

double _SliverGridDelegateWithMaxCrossAxisExtent_childAspectRatio$(
    SliverGridDelegateWithMaxCrossAxisExtent target) {
  return target.childAspectRatio;
}

double? _SliverGridDelegateWithMaxCrossAxisExtent_mainAxisExtent$(
    SliverGridDelegateWithMaxCrossAxisExtent target) {
  return target.mainAxisExtent;
}

Function _SliverGridDelegateWithMaxCrossAxisExtent_getLayout$(
  m.Scope scope,
  SliverGridDelegateWithMaxCrossAxisExtent target,
) =>
    target.getLayout;
Function _SliverGridDelegateWithMaxCrossAxisExtent_shouldRelayout$(
  m.Scope scope,
  SliverGridDelegateWithMaxCrossAxisExtent target,
) =>
    target.shouldRelayout;
Function SliverGridParentData_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SliverGridParentData;
Function SliverGridParentData_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SliverGridParentData;
double? _SliverGridParentData_crossAxisOffset$(SliverGridParentData target) {
  return target.crossAxisOffset;
}

void _SliverGridParentData_crossAxisOffset_set$(
  SliverGridParentData target,
  double? other,
) {
  target.crossAxisOffset = other;
}

Function _SliverGridParentData_toString$(
  m.Scope scope,
  SliverGridParentData target,
) =>
    target.toString;
Function RenderSliverGrid_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderSliverGrid;
Function RenderSliverGrid_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderSliverGrid;
SliverGridDelegate _RenderSliverGrid_gridDelegate$(RenderSliverGrid target) {
  return target.gridDelegate;
}

void _RenderSliverGrid_gridDelegate_set$(
  RenderSliverGrid target,
  SliverGridDelegate other,
) {
  target.gridDelegate = other;
}

Function _RenderSliverGrid_setupParentData$(
  m.Scope scope,
  RenderSliverGrid target,
) =>
    target.setupParentData;
Function _RenderSliverGrid_childCrossAxisPosition$(
  m.Scope scope,
  RenderSliverGrid target,
) =>
    target.childCrossAxisPosition;
Function _RenderSliverGrid_performLayout$(
  m.Scope scope,
  RenderSliverGrid target,
) =>
    target.performLayout;
