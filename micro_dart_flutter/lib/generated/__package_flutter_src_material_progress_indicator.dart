// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/progress_indicator.dart';
import 'dart:math';
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/progress_indicator_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/progress_indicator.dart',
  {
    'RefreshProgressIndicator.defaultStrokeWidth':
        _RefreshProgressIndicator_defaultStrokeWidth$
  },
  {},
  {
    'ProgressIndicator': m.ClassMirror(
      'ProgressIndicator',
      {
        'value': _ProgressIndicator_value$,
        'backgroundColor': _ProgressIndicator_backgroundColor$,
        'color': _ProgressIndicator_color$,
        'valueColor': _ProgressIndicator_valueColor$,
        'semanticsLabel': _ProgressIndicator_semanticsLabel$,
        'semanticsValue': _ProgressIndicator_semanticsValue$,
        'debugFillProperties': _ProgressIndicator_debugFillProperties$,
      },
      {},
    ),
    'LinearProgressIndicator': m.ClassMirror(
      'LinearProgressIndicator',
      {
        'minHeight': _LinearProgressIndicator_minHeight$,
        'backgroundColor': _LinearProgressIndicator_backgroundColor$,
        'createState': _LinearProgressIndicator_createState$,
      },
      {},
    ),
    'CircularProgressIndicator': m.ClassMirror(
      'CircularProgressIndicator',
      {
        'strokeWidth': _CircularProgressIndicator_strokeWidth$,
        'backgroundColor': _CircularProgressIndicator_backgroundColor$,
        'createState': _CircularProgressIndicator_createState$,
      },
      {},
    ),
    'RefreshProgressIndicator': m.ClassMirror(
      'RefreshProgressIndicator',
      {
        'backgroundColor': _RefreshProgressIndicator_backgroundColor$,
        'createState': _RefreshProgressIndicator_createState$,
      },
      {},
    ),
  },
);
double? _ProgressIndicator_value$(ProgressIndicator target) {
  return target.value;
}

Color? _ProgressIndicator_backgroundColor$(ProgressIndicator target) {
  return target.backgroundColor;
}

Color? _ProgressIndicator_color$(ProgressIndicator target) {
  return target.color;
}

Animation<Color?>? _ProgressIndicator_valueColor$(ProgressIndicator target) {
  return target.valueColor;
}

String? _ProgressIndicator_semanticsLabel$(ProgressIndicator target) {
  return target.semanticsLabel;
}

String? _ProgressIndicator_semanticsValue$(ProgressIndicator target) {
  return target.semanticsValue;
}

Function _ProgressIndicator_debugFillProperties$(
  m.Scope scope,
  ProgressIndicator target,
) =>
    target.debugFillProperties;
double? _LinearProgressIndicator_minHeight$(LinearProgressIndicator target) {
  return target.minHeight;
}

Color? _LinearProgressIndicator_backgroundColor$(
    LinearProgressIndicator target) {
  return target.backgroundColor;
}

Function _LinearProgressIndicator_createState$(
  m.Scope scope,
  LinearProgressIndicator target,
) =>
    target.createState;
double _CircularProgressIndicator_strokeWidth$(
    CircularProgressIndicator target) {
  return target.strokeWidth;
}

Color? _CircularProgressIndicator_backgroundColor$(
    CircularProgressIndicator target) {
  return target.backgroundColor;
}

Function _CircularProgressIndicator_createState$(
  m.Scope scope,
  CircularProgressIndicator target,
) =>
    target.createState;
double _RefreshProgressIndicator_defaultStrokeWidth$() {
  return RefreshProgressIndicator.defaultStrokeWidth;
}

Color? _RefreshProgressIndicator_backgroundColor$(
    RefreshProgressIndicator target) {
  return target.backgroundColor;
}

Function _RefreshProgressIndicator_createState$(
  m.Scope scope,
  RefreshProgressIndicator target,
) =>
    target.createState;
