// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/banner.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/banner_theme.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/divider.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/scaffold.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/banner.dart',
  {
    'MaterialBanner.': _MaterialBanner__$,
    'MaterialBanner.createAnimationController':
        _MaterialBanner_createAnimationController$,
    'MaterialBannerClosedReason.dismiss': _MaterialBannerClosedReason_dismiss$,
    'MaterialBannerClosedReason.swipe': _MaterialBannerClosedReason_swipe$,
    'MaterialBannerClosedReason.hide': _MaterialBannerClosedReason_hide$,
    'MaterialBannerClosedReason.remove': _MaterialBannerClosedReason_remove$,
    'MaterialBannerClosedReason.values': _MaterialBannerClosedReason_values$,
  },
  {},
  {
    'MaterialBanner': m.ClassMirror(
      'MaterialBanner',
      {
        '#as': MaterialBanner_as$,
        '#is': MaterialBanner_is$,
        'content': _MaterialBanner_content$,
        'contentTextStyle': _MaterialBanner_contentTextStyle$,
        'actions': _MaterialBanner_actions$,
        'elevation': _MaterialBanner_elevation$,
        'leading': _MaterialBanner_leading$,
        'backgroundColor': _MaterialBanner_backgroundColor$,
        'surfaceTintColor': _MaterialBanner_surfaceTintColor$,
        'shadowColor': _MaterialBanner_shadowColor$,
        'dividerColor': _MaterialBanner_dividerColor$,
        'padding': _MaterialBanner_padding$,
        'margin': _MaterialBanner_margin$,
        'leadingPadding': _MaterialBanner_leadingPadding$,
        'forceActionsBelow': _MaterialBanner_forceActionsBelow$,
        'overflowAlignment': _MaterialBanner_overflowAlignment$,
        'animation': _MaterialBanner_animation$,
        'onVisible': _MaterialBanner_onVisible$,
        'withAnimation': _MaterialBanner_withAnimation$,
        'createState': _MaterialBanner_createState$,
      },
      {},
    ),
    'MaterialBannerClosedReason': m.ClassMirror(
      'MaterialBannerClosedReason',
      {},
      {},
    ),
  },
);
Function MaterialBanner_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MaterialBanner;
Function MaterialBanner_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MaterialBanner;
Function _MaterialBanner_content$(
  m.Scope scope$,
  MaterialBanner target$,
) =>
    () {
      return target$.content;
    };
Function _MaterialBanner_contentTextStyle$(
  m.Scope scope$,
  MaterialBanner target$,
) =>
    () {
      return target$.contentTextStyle;
    };
Function _MaterialBanner_actions$(
  m.Scope scope$,
  MaterialBanner target$,
) =>
    () {
      return target$.actions;
    };
Function _MaterialBanner_elevation$(
  m.Scope scope$,
  MaterialBanner target$,
) =>
    () {
      return target$.elevation;
    };
Function _MaterialBanner_leading$(
  m.Scope scope$,
  MaterialBanner target$,
) =>
    () {
      return target$.leading;
    };
Function _MaterialBanner_backgroundColor$(
  m.Scope scope$,
  MaterialBanner target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _MaterialBanner_surfaceTintColor$(
  m.Scope scope$,
  MaterialBanner target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _MaterialBanner_shadowColor$(
  m.Scope scope$,
  MaterialBanner target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _MaterialBanner_dividerColor$(
  m.Scope scope$,
  MaterialBanner target$,
) =>
    () {
      return target$.dividerColor;
    };
Function _MaterialBanner_padding$(
  m.Scope scope$,
  MaterialBanner target$,
) =>
    () {
      return target$.padding;
    };
Function _MaterialBanner_margin$(
  m.Scope scope$,
  MaterialBanner target$,
) =>
    () {
      return target$.margin;
    };
Function _MaterialBanner_leadingPadding$(
  m.Scope scope$,
  MaterialBanner target$,
) =>
    () {
      return target$.leadingPadding;
    };
Function _MaterialBanner_forceActionsBelow$(
  m.Scope scope$,
  MaterialBanner target$,
) =>
    () {
      return target$.forceActionsBelow;
    };
Function _MaterialBanner_overflowAlignment$(
  m.Scope scope$,
  MaterialBanner target$,
) =>
    () {
      return target$.overflowAlignment;
    };
Function _MaterialBanner_animation$(
  m.Scope scope$,
  MaterialBanner target$,
) =>
    () {
      return target$.animation;
    };
Function _MaterialBanner_onVisible$(
  m.Scope scope$,
  MaterialBanner target$,
) =>
    () {
      return target$.onVisible;
    };
Function _MaterialBanner__$(m.Scope scope$) => ({
      Key? key,
      required Widget content,
      TextStyle? contentTextStyle,
      required List actions,
      double? elevation,
      Widget? leading,
      Color? backgroundColor,
      Color? surfaceTintColor,
      Color? shadowColor,
      Color? dividerColor,
      EdgeInsetsGeometry? padding,
      EdgeInsetsGeometry? margin,
      EdgeInsetsGeometry? leadingPadding,
      bool? forceActionsBelow,
      OverflowBarAlignment? overflowAlignment,
      Animation<double>? animation,
      m.FunctionPointer? onVisible,
    }) {
      void onVisibleProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onVisible!,
            [],
            {},
          );
      return MaterialBanner(
        actions: List.from(actions),
        animation: animation,
        backgroundColor: backgroundColor,
        content: content,
        contentTextStyle: contentTextStyle,
        dividerColor: dividerColor,
        elevation: elevation,
        forceActionsBelow: forceActionsBelow ?? false,
        key: key,
        leading: leading,
        leadingPadding: leadingPadding,
        margin: margin,
        onVisible: onVisible == null ? null : onVisibleProxy,
        overflowAlignment: overflowAlignment ?? OverflowBarAlignment.end,
        padding: padding,
        shadowColor: shadowColor,
        surfaceTintColor: surfaceTintColor,
      );
    };
Function _MaterialBanner_createAnimationController$(m.Scope scope$) =>
    MaterialBanner.createAnimationController;
Function _MaterialBanner_withAnimation$(
  m.Scope scope$,
  MaterialBanner target$,
) =>
    target$.withAnimation;
Function _MaterialBanner_createState$(
  m.Scope scope$,
  MaterialBanner target$,
) =>
    target$.createState;
MaterialBannerClosedReason _MaterialBannerClosedReason_dismiss$() {
  return MaterialBannerClosedReason.dismiss;
}

MaterialBannerClosedReason _MaterialBannerClosedReason_swipe$() {
  return MaterialBannerClosedReason.swipe;
}

MaterialBannerClosedReason _MaterialBannerClosedReason_hide$() {
  return MaterialBannerClosedReason.hide;
}

MaterialBannerClosedReason _MaterialBannerClosedReason_remove$() {
  return MaterialBannerClosedReason.remove;
}

List<MaterialBannerClosedReason> _MaterialBannerClosedReason_values$() {
  return MaterialBannerClosedReason.values;
}
