// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/banner.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/banner_theme.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/divider.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/scaffold.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/banner.dart',
  {
    'MaterialBanner.createAnimationController':
        _MaterialBanner_createAnimationController$,
    'MaterialBannerClosedReason.dismiss': _MaterialBannerClosedReason_dismiss$,
    'MaterialBannerClosedReason.swipe': _MaterialBannerClosedReason_swipe$,
    'MaterialBannerClosedReason.hide': _MaterialBannerClosedReason_hide$,
    'MaterialBannerClosedReason.remove': _MaterialBannerClosedReason_remove$,
    'MaterialBannerClosedReason.values': _MaterialBannerClosedReason_values$,
  },
  {},
  {
    'MaterialBanner': m.ClassMirror(
      'MaterialBanner',
      {
        'content': _MaterialBanner_content$,
        'contentTextStyle': _MaterialBanner_contentTextStyle$,
        'actions': _MaterialBanner_actions$,
        'elevation': _MaterialBanner_elevation$,
        'leading': _MaterialBanner_leading$,
        'backgroundColor': _MaterialBanner_backgroundColor$,
        'surfaceTintColor': _MaterialBanner_surfaceTintColor$,
        'shadowColor': _MaterialBanner_shadowColor$,
        'dividerColor': _MaterialBanner_dividerColor$,
        'padding': _MaterialBanner_padding$,
        'margin': _MaterialBanner_margin$,
        'leadingPadding': _MaterialBanner_leadingPadding$,
        'forceActionsBelow': _MaterialBanner_forceActionsBelow$,
        'overflowAlignment': _MaterialBanner_overflowAlignment$,
        'animation': _MaterialBanner_animation$,
        'onVisible': _MaterialBanner_onVisible$,
        'withAnimation': _MaterialBanner_withAnimation$,
        'createState': _MaterialBanner_createState$,
      },
      {},
    ),
    'MaterialBannerClosedReason': m.ClassMirror(
      'MaterialBannerClosedReason',
      {},
      {},
    ),
  },
);
Widget _MaterialBanner_content$(MaterialBanner target) {
  return target.content;
}

TextStyle? _MaterialBanner_contentTextStyle$(MaterialBanner target) {
  return target.contentTextStyle;
}

List<Widget> _MaterialBanner_actions$(MaterialBanner target) {
  return target.actions;
}

double? _MaterialBanner_elevation$(MaterialBanner target) {
  return target.elevation;
}

Widget? _MaterialBanner_leading$(MaterialBanner target) {
  return target.leading;
}

Color? _MaterialBanner_backgroundColor$(MaterialBanner target) {
  return target.backgroundColor;
}

Color? _MaterialBanner_surfaceTintColor$(MaterialBanner target) {
  return target.surfaceTintColor;
}

Color? _MaterialBanner_shadowColor$(MaterialBanner target) {
  return target.shadowColor;
}

Color? _MaterialBanner_dividerColor$(MaterialBanner target) {
  return target.dividerColor;
}

EdgeInsetsGeometry? _MaterialBanner_padding$(MaterialBanner target) {
  return target.padding;
}

EdgeInsetsGeometry? _MaterialBanner_margin$(MaterialBanner target) {
  return target.margin;
}

EdgeInsetsGeometry? _MaterialBanner_leadingPadding$(MaterialBanner target) {
  return target.leadingPadding;
}

bool _MaterialBanner_forceActionsBelow$(MaterialBanner target) {
  return target.forceActionsBelow;
}

OverflowBarAlignment _MaterialBanner_overflowAlignment$(MaterialBanner target) {
  return target.overflowAlignment;
}

Animation<double>? _MaterialBanner_animation$(MaterialBanner target) {
  return target.animation;
}

void Function()? _MaterialBanner_onVisible$(MaterialBanner target) {
  return target.onVisible;
}

Function _MaterialBanner_createAnimationController$(m.Scope scope) =>
    MaterialBanner.createAnimationController;
Function _MaterialBanner_withAnimation$(
  m.Scope scope,
  MaterialBanner target,
) =>
    target.withAnimation;
Function _MaterialBanner_createState$(
  m.Scope scope,
  MaterialBanner target,
) =>
    target.createState;
MaterialBannerClosedReason _MaterialBannerClosedReason_dismiss$() {
  return MaterialBannerClosedReason.dismiss;
}

MaterialBannerClosedReason _MaterialBannerClosedReason_swipe$() {
  return MaterialBannerClosedReason.swipe;
}

MaterialBannerClosedReason _MaterialBannerClosedReason_hide$() {
  return MaterialBannerClosedReason.hide;
}

MaterialBannerClosedReason _MaterialBannerClosedReason_remove$() {
  return MaterialBannerClosedReason.remove;
}

List<MaterialBannerClosedReason> _MaterialBannerClosedReason_values$() {
  return MaterialBannerClosedReason.values;
}
