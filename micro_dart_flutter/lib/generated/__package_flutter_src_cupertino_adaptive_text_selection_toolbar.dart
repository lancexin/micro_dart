// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/adaptive_text_selection_toolbar.dart';
import 'package:flutter/foundation.dart' show defaultTargetPlatform;
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/desktop_text_selection_toolbar.dart';
import 'package:flutter/src/cupertino/desktop_text_selection_toolbar_button.dart';
import 'package:flutter/src/cupertino/text_selection_toolbar.dart';
import 'package:flutter/src/cupertino/text_selection_toolbar_button.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/adaptive_text_selection_toolbar.dart',
  {
    'CupertinoAdaptiveTextSelectionToolbar.':
        _CupertinoAdaptiveTextSelectionToolbar__$,
    'CupertinoAdaptiveTextSelectionToolbar.buttonItems':
        _CupertinoAdaptiveTextSelectionToolbar_buttonItems_$,
    'CupertinoAdaptiveTextSelectionToolbar.editable':
        _CupertinoAdaptiveTextSelectionToolbar_editable_$,
    'CupertinoAdaptiveTextSelectionToolbar.editableText':
        _CupertinoAdaptiveTextSelectionToolbar_editableText_$,
    'CupertinoAdaptiveTextSelectionToolbar.selectable':
        _CupertinoAdaptiveTextSelectionToolbar_selectable_$,
    'CupertinoAdaptiveTextSelectionToolbar.getAdaptiveButtons':
        _CupertinoAdaptiveTextSelectionToolbar_getAdaptiveButtons$,
  },
  {},
  {
    'CupertinoAdaptiveTextSelectionToolbar': m.ClassMirror(
      'CupertinoAdaptiveTextSelectionToolbar',
      {
        '#as': CupertinoAdaptiveTextSelectionToolbar_as$,
        '#is': CupertinoAdaptiveTextSelectionToolbar_is$,
        'anchors': _CupertinoAdaptiveTextSelectionToolbar_anchors$,
        'children': _CupertinoAdaptiveTextSelectionToolbar_children$,
        'buttonItems': _CupertinoAdaptiveTextSelectionToolbar_buttonItems$,
        'build': _CupertinoAdaptiveTextSelectionToolbar_build$,
      },
      {},
    )
  },
);
Function CupertinoAdaptiveTextSelectionToolbar_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoAdaptiveTextSelectionToolbar;
Function CupertinoAdaptiveTextSelectionToolbar_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoAdaptiveTextSelectionToolbar;
Function _CupertinoAdaptiveTextSelectionToolbar_anchors$(
  m.Scope scope$,
  CupertinoAdaptiveTextSelectionToolbar target$,
) =>
    () {
      return target$.anchors;
    };
Function _CupertinoAdaptiveTextSelectionToolbar_children$(
  m.Scope scope$,
  CupertinoAdaptiveTextSelectionToolbar target$,
) =>
    () {
      return target$.children;
    };
Function _CupertinoAdaptiveTextSelectionToolbar_buttonItems$(
  m.Scope scope$,
  CupertinoAdaptiveTextSelectionToolbar target$,
) =>
    () {
      return target$.buttonItems;
    };
Function _CupertinoAdaptiveTextSelectionToolbar__$(m.Scope scope$) => ({
      Key? key,
      required List? children,
      required TextSelectionToolbarAnchors anchors,
    }) {
      return CupertinoAdaptiveTextSelectionToolbar(
        anchors: anchors,
        children: children == null ? null : List.from(children),
        key: key,
      );
    };
Function _CupertinoAdaptiveTextSelectionToolbar_buttonItems_$(m.Scope scope$) =>
    CupertinoAdaptiveTextSelectionToolbar.buttonItems;
Function _CupertinoAdaptiveTextSelectionToolbar_editable_$(m.Scope scope$) => ({
      Key? key,
      required ClipboardStatus clipboardStatus,
      required m.FunctionPointer? onCopy,
      required m.FunctionPointer? onCut,
      required m.FunctionPointer? onPaste,
      required m.FunctionPointer? onSelectAll,
      required TextSelectionToolbarAnchors anchors,
    }) {
      void onCopyProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onCopy!,
            [],
            {},
          );
      void onCutProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onCut!,
            [],
            {},
          );
      void onPasteProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPaste!,
            [],
            {},
          );
      void onSelectAllProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onSelectAll!,
            [],
            {},
          );
      return CupertinoAdaptiveTextSelectionToolbar.editable(
        anchors: anchors,
        clipboardStatus: clipboardStatus,
        key: key,
        onCopy: onCopy == null ? null : onCopyProxy,
        onCut: onCut == null ? null : onCutProxy,
        onPaste: onPaste == null ? null : onPasteProxy,
        onSelectAll: onSelectAll == null ? null : onSelectAllProxy,
      );
    };
Function _CupertinoAdaptiveTextSelectionToolbar_editableText_$(
        m.Scope scope$) =>
    CupertinoAdaptiveTextSelectionToolbar.editableText;
Function _CupertinoAdaptiveTextSelectionToolbar_selectable_$(m.Scope scope$) =>
    ({
      Key? key,
      required m.FunctionPointer onCopy,
      required m.FunctionPointer onSelectAll,
      required SelectionGeometry selectionGeometry,
      required TextSelectionToolbarAnchors anchors,
    }) {
      void onCopyProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onCopy,
            [],
            {},
          );
      void onSelectAllProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onSelectAll,
            [],
            {},
          );
      return CupertinoAdaptiveTextSelectionToolbar.selectable(
        anchors: anchors,
        key: key,
        onCopy: onCopyProxy,
        onSelectAll: onSelectAllProxy,
        selectionGeometry: selectionGeometry,
      );
    };
Function _CupertinoAdaptiveTextSelectionToolbar_getAdaptiveButtons$(
        m.Scope scope$) =>
    CupertinoAdaptiveTextSelectionToolbar.getAdaptiveButtons;
Function _CupertinoAdaptiveTextSelectionToolbar_build$(
  m.Scope scope$,
  CupertinoAdaptiveTextSelectionToolbar target$,
) =>
    target$.build;
