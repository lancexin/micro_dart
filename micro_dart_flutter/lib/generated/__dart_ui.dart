// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'dart:ui';
import 'dart:async';
import 'dart:collection';
import 'dart:developer';
import 'dart:io';
import 'dart:isolate' show SendPort;
import 'dart:math';
import 'dart:nativewrappers';
import 'dart:typed_data';

const libraryMirror = m.LibraryMirror(
  'dart:ui',
  {
    'keepToString': _keepToString$,
    'channelBuffers': _channelBuffers$,
    'ChannelBuffers.kDefaultBufferSize': _ChannelBuffers_kDefaultBufferSize$,
    'ChannelBuffers.kControlChannelName': _ChannelBuffers_kControlChannelName$,
    'ChannelBuffers.': _ChannelBuffers__$,
    'ChannelBuffers.push': _ChannelBuffers_push$,
    'ChannelBuffers.setListener': _ChannelBuffers_setListener$,
    'ChannelBuffers.drain': _ChannelBuffers_drain$,
    'SceneBuilder.': _SceneBuilder__$,
    'Offset.zero': _Offset_zero$,
    'Offset.infinite': _Offset_infinite$,
    'Offset.': _Offset__$,
    'Offset.fromDirection': _Offset_fromDirection_$,
    'Offset.lerp': _Offset_lerp$,
    'Size.zero': _Size_zero$,
    'Size.infinite': _Size_infinite$,
    'Size.': _Size__$,
    'Size.copy': _Size_copy_$,
    'Size.square': _Size_square_$,
    'Size.fromWidth': _Size_fromWidth_$,
    'Size.fromHeight': _Size_fromHeight_$,
    'Size.fromRadius': _Size_fromRadius_$,
    'Size.lerp': _Size_lerp$,
    'Rect.zero': _Rect_zero$,
    'Rect.largest': _Rect_largest$,
    'Rect.fromLTRB': _Rect_fromLTRB_$,
    'Rect.fromLTWH': _Rect_fromLTWH_$,
    'Rect.fromCircle': _Rect_fromCircle_$,
    'Rect.fromCenter': _Rect_fromCenter_$,
    'Rect.fromPoints': _Rect_fromPoints_$,
    'Rect.lerp': _Rect_lerp$,
    'Radius.zero': _Radius_zero$,
    'Radius.circular': _Radius_circular_$,
    'Radius.elliptical': _Radius_elliptical_$,
    'Radius.lerp': _Radius_lerp$,
    'RRect.zero': _RRect_zero$,
    'RRect.fromLTRBXY': _RRect_fromLTRBXY_$,
    'RRect.fromLTRBR': _RRect_fromLTRBR_$,
    'RRect.fromRectXY': _RRect_fromRectXY_$,
    'RRect.fromRectAndRadius': _RRect_fromRectAndRadius_$,
    'RRect.fromLTRBAndCorners': _RRect_fromLTRBAndCorners_$,
    'RRect.fromRectAndCorners': _RRect_fromRectAndCorners_$,
    'RRect.lerp': _RRect_lerp$,
    'RSTransform.': _RSTransform__$,
    'RSTransform.fromComponents': _RSTransform_fromComponents_$,
    'IsolateNameServer.lookupPortByName': _IsolateNameServer_lookupPortByName$,
    'IsolateNameServer.registerPortWithName':
        _IsolateNameServer_registerPortWithName$,
    'IsolateNameServer.removePortNameMapping':
        _IsolateNameServer_removePortNameMapping$,
    'KeyData.': _KeyData__$,
    'KeyEventType.down': _KeyEventType_down$,
    'KeyEventType.up': _KeyEventType_up$,
    'KeyEventType.repeat': _KeyEventType_repeat$,
    'KeyEventType.values': _KeyEventType_values$,
    'lerpDouble': _lerpDouble$,
    'clampDouble': _clampDouble$,
    'DartPluginRegistrant.ensureInitialized':
        _DartPluginRegistrant_ensureInitialized$,
    'saveCompilationTrace': _saveCompilationTrace$,
    'Color.': _Color__$,
    'Color.fromARGB': _Color_fromARGB_$,
    'Color.fromRGBO': _Color_fromRGBO_$,
    'Color.lerp': _Color_lerp$,
    'Color.alphaBlend': _Color_alphaBlend$,
    'Color.getAlphaFromOpacity': _Color_getAlphaFromOpacity$,
    'Paint.enableDithering': _Paint_enableDithering$,
    'Paint.': _Paint__$,
    'Image.onCreate': _Image_onCreate$,
    'Image.onDispose': _Image_onDispose$,
    'TargetImageSize.': _TargetImageSize__$,
    'Path.': _Path__$,
    'Path.from': _Path_from_$,
    'Path.combine': _Path_combine$,
    'Tangent.': _Tangent__$,
    'Tangent.fromAngle': _Tangent_fromAngle_$,
    'MaskFilter.blur': _MaskFilter_blur_$,
    'ColorFilter.mode': _ColorFilter_mode_$,
    'ColorFilter.matrix': _ColorFilter_matrix_$,
    'ColorFilter.linearToSrgbGamma': _ColorFilter_linearToSrgbGamma_$,
    'ColorFilter.srgbToLinearGamma': _ColorFilter_srgbToLinearGamma_$,
    'ImageFilter.blur': _ImageFilter_blur_$,
    'ImageFilter.dilate': _ImageFilter_dilate_$,
    'ImageFilter.erode': _ImageFilter_erode_$,
    'ImageFilter.matrix': _ImageFilter_matrix_$,
    'ImageFilter.compose': _ImageFilter_compose_$,
    'Gradient.linear': _Gradient_linear_$,
    'Gradient.radial': _Gradient_radial_$,
    'Gradient.sweep': _Gradient_sweep_$,
    'ImageShader.': _ImageShader__$,
    'FragmentProgram.fromAsset': _FragmentProgram_fromAsset$,
    'Vertices.': _Vertices__$,
    'Vertices.raw': _Vertices_raw_$,
    'Canvas.': _Canvas__$,
    'Picture.onCreate': _Picture_onCreate$,
    'Picture.onDispose': _Picture_onDispose$,
    'PictureRecorder.': _PictureRecorder__$,
    'Shadow.': _Shadow__$,
    'Shadow.convertRadiusToSigma': _Shadow_convertRadiusToSigma$,
    'Shadow.lerp': _Shadow_lerp$,
    'Shadow.lerpList': _Shadow_lerpList$,
    'ImmutableBuffer.fromUint8List': _ImmutableBuffer_fromUint8List$,
    'ImmutableBuffer.fromAsset': _ImmutableBuffer_fromAsset$,
    'ImmutableBuffer.fromFilePath': _ImmutableBuffer_fromFilePath$,
    'ImageDescriptor.raw': _ImageDescriptor_raw_$,
    'ImageDescriptor.encoded': _ImageDescriptor_encoded$,
    'BlendMode.clear': _BlendMode_clear$,
    'BlendMode.src': _BlendMode_src$,
    'BlendMode.dst': _BlendMode_dst$,
    'BlendMode.srcOver': _BlendMode_srcOver$,
    'BlendMode.dstOver': _BlendMode_dstOver$,
    'BlendMode.srcIn': _BlendMode_srcIn$,
    'BlendMode.dstIn': _BlendMode_dstIn$,
    'BlendMode.srcOut': _BlendMode_srcOut$,
    'BlendMode.dstOut': _BlendMode_dstOut$,
    'BlendMode.srcATop': _BlendMode_srcATop$,
    'BlendMode.dstATop': _BlendMode_dstATop$,
    'BlendMode.xor': _BlendMode_xor$,
    'BlendMode.plus': _BlendMode_plus$,
    'BlendMode.modulate': _BlendMode_modulate$,
    'BlendMode.screen': _BlendMode_screen$,
    'BlendMode.overlay': _BlendMode_overlay$,
    'BlendMode.darken': _BlendMode_darken$,
    'BlendMode.lighten': _BlendMode_lighten$,
    'BlendMode.colorDodge': _BlendMode_colorDodge$,
    'BlendMode.colorBurn': _BlendMode_colorBurn$,
    'BlendMode.hardLight': _BlendMode_hardLight$,
    'BlendMode.softLight': _BlendMode_softLight$,
    'BlendMode.difference': _BlendMode_difference$,
    'BlendMode.exclusion': _BlendMode_exclusion$,
    'BlendMode.multiply': _BlendMode_multiply$,
    'BlendMode.hue': _BlendMode_hue$,
    'BlendMode.saturation': _BlendMode_saturation$,
    'BlendMode.color': _BlendMode_color$,
    'BlendMode.luminosity': _BlendMode_luminosity$,
    'BlendMode.values': _BlendMode_values$,
    'FilterQuality.none': _FilterQuality_none$,
    'FilterQuality.low': _FilterQuality_low$,
    'FilterQuality.medium': _FilterQuality_medium$,
    'FilterQuality.high': _FilterQuality_high$,
    'FilterQuality.values': _FilterQuality_values$,
    'StrokeCap.butt': _StrokeCap_butt$,
    'StrokeCap.round': _StrokeCap_round$,
    'StrokeCap.square': _StrokeCap_square$,
    'StrokeCap.values': _StrokeCap_values$,
    'StrokeJoin.miter': _StrokeJoin_miter$,
    'StrokeJoin.round': _StrokeJoin_round$,
    'StrokeJoin.bevel': _StrokeJoin_bevel$,
    'StrokeJoin.values': _StrokeJoin_values$,
    'PaintingStyle.fill': _PaintingStyle_fill$,
    'PaintingStyle.stroke': _PaintingStyle_stroke$,
    'PaintingStyle.values': _PaintingStyle_values$,
    'Clip.none': _Clip_none$,
    'Clip.hardEdge': _Clip_hardEdge$,
    'Clip.antiAlias': _Clip_antiAlias$,
    'Clip.antiAliasWithSaveLayer': _Clip_antiAliasWithSaveLayer$,
    'Clip.values': _Clip_values$,
    'ColorSpace.sRGB': _ColorSpace_sRGB$,
    'ColorSpace.extendedSRGB': _ColorSpace_extendedSRGB$,
    'ColorSpace.values': _ColorSpace_values$,
    'ImageByteFormat.rawRgba': _ImageByteFormat_rawRgba$,
    'ImageByteFormat.rawStraightRgba': _ImageByteFormat_rawStraightRgba$,
    'ImageByteFormat.rawUnmodified': _ImageByteFormat_rawUnmodified$,
    'ImageByteFormat.rawExtendedRgba128': _ImageByteFormat_rawExtendedRgba128$,
    'ImageByteFormat.png': _ImageByteFormat_png$,
    'ImageByteFormat.values': _ImageByteFormat_values$,
    'PixelFormat.rgba8888': _PixelFormat_rgba8888$,
    'PixelFormat.bgra8888': _PixelFormat_bgra8888$,
    'PixelFormat.rgbaFloat32': _PixelFormat_rgbaFloat32$,
    'PixelFormat.values': _PixelFormat_values$,
    'PathFillType.nonZero': _PathFillType_nonZero$,
    'PathFillType.evenOdd': _PathFillType_evenOdd$,
    'PathFillType.values': _PathFillType_values$,
    'PathOperation.difference': _PathOperation_difference$,
    'PathOperation.intersect': _PathOperation_intersect$,
    'PathOperation.union': _PathOperation_union$,
    'PathOperation.xor': _PathOperation_xor$,
    'PathOperation.reverseDifference': _PathOperation_reverseDifference$,
    'PathOperation.values': _PathOperation_values$,
    'BlurStyle.normal': _BlurStyle_normal$,
    'BlurStyle.solid': _BlurStyle_solid$,
    'BlurStyle.outer': _BlurStyle_outer$,
    'BlurStyle.inner': _BlurStyle_inner$,
    'BlurStyle.values': _BlurStyle_values$,
    'TileMode.clamp': _TileMode_clamp$,
    'TileMode.repeated': _TileMode_repeated$,
    'TileMode.mirror': _TileMode_mirror$,
    'TileMode.decal': _TileMode_decal$,
    'TileMode.values': _TileMode_values$,
    'VertexMode.triangles': _VertexMode_triangles$,
    'VertexMode.triangleStrip': _VertexMode_triangleStrip$,
    'VertexMode.triangleFan': _VertexMode_triangleFan$,
    'VertexMode.values': _VertexMode_values$,
    'PointMode.points': _PointMode_points$,
    'PointMode.lines': _PointMode_lines$,
    'PointMode.polygon': _PointMode_polygon$,
    'PointMode.values': _PointMode_values$,
    'ClipOp.difference': _ClipOp_difference$,
    'ClipOp.intersect': _ClipOp_intersect$,
    'ClipOp.values': _ClipOp_values$,
    'instantiateImageCodec': _instantiateImageCodec$,
    'instantiateImageCodecFromBuffer': _instantiateImageCodecFromBuffer$,
    'instantiateImageCodecWithSize': _instantiateImageCodecWithSize$,
    'decodeImageFromList': _decodeImageFromList$,
    'decodeImageFromPixels': _decodeImageFromPixels$,
    'RootIsolateToken.instance': _RootIsolateToken_instance$,
    'PlatformDispatcher.instance': _PlatformDispatcher_instance$,
    'PlatformDispatcher.sendPlatformMessage':
        _PlatformDispatcher_sendPlatformMessage$,
    'FrameTiming.': _FrameTiming__$,
    'ViewPadding.zero': _ViewPadding_zero$,
    'DisplayFeature.': _DisplayFeature__$,
    'Locale.': _Locale__$,
    'Locale.fromSubtags': _Locale_fromSubtags_$,
    'FramePhase.vsyncStart': _FramePhase_vsyncStart$,
    'FramePhase.buildStart': _FramePhase_buildStart$,
    'FramePhase.buildFinish': _FramePhase_buildFinish$,
    'FramePhase.rasterStart': _FramePhase_rasterStart$,
    'FramePhase.rasterFinish': _FramePhase_rasterFinish$,
    'FramePhase.rasterFinishWallTime': _FramePhase_rasterFinishWallTime$,
    'FramePhase.values': _FramePhase_values$,
    'AppLifecycleState.resumed': _AppLifecycleState_resumed$,
    'AppLifecycleState.inactive': _AppLifecycleState_inactive$,
    'AppLifecycleState.paused': _AppLifecycleState_paused$,
    'AppLifecycleState.detached': _AppLifecycleState_detached$,
    'AppLifecycleState.values': _AppLifecycleState_values$,
    'AppExitResponse.exit': _AppExitResponse_exit$,
    'AppExitResponse.cancel': _AppExitResponse_cancel$,
    'AppExitResponse.values': _AppExitResponse_values$,
    'AppExitType.cancelable': _AppExitType_cancelable$,
    'AppExitType.required': _AppExitType_required$,
    'AppExitType.values': _AppExitType_values$,
    'DisplayFeatureType.unknown': _DisplayFeatureType_unknown$,
    'DisplayFeatureType.fold': _DisplayFeatureType_fold$,
    'DisplayFeatureType.hinge': _DisplayFeatureType_hinge$,
    'DisplayFeatureType.cutout': _DisplayFeatureType_cutout$,
    'DisplayFeatureType.values': _DisplayFeatureType_values$,
    'DisplayFeatureState.unknown': _DisplayFeatureState_unknown$,
    'DisplayFeatureState.postureFlat': _DisplayFeatureState_postureFlat$,
    'DisplayFeatureState.postureHalfOpened':
        _DisplayFeatureState_postureHalfOpened$,
    'DisplayFeatureState.values': _DisplayFeatureState_values$,
    'DartPerformanceMode.balanced': _DartPerformanceMode_balanced$,
    'DartPerformanceMode.latency': _DartPerformanceMode_latency$,
    'DartPerformanceMode.throughput': _DartPerformanceMode_throughput$,
    'DartPerformanceMode.memory': _DartPerformanceMode_memory$,
    'DartPerformanceMode.values': _DartPerformanceMode_values$,
    'CallbackHandle.fromRawHandle': _CallbackHandle_fromRawHandle_$,
    'PluginUtilities.getCallbackHandle': _PluginUtilities_getCallbackHandle$,
    'PluginUtilities.getCallbackFromHandle':
        _PluginUtilities_getCallbackFromHandle$,
    'PointerData.': _PointerData__$,
    'PointerDataPacket.': _PointerDataPacket__$,
    'PointerChange.cancel': _PointerChange_cancel$,
    'PointerChange.add': _PointerChange_add$,
    'PointerChange.remove': _PointerChange_remove$,
    'PointerChange.hover': _PointerChange_hover$,
    'PointerChange.down': _PointerChange_down$,
    'PointerChange.move': _PointerChange_move$,
    'PointerChange.up': _PointerChange_up$,
    'PointerChange.panZoomStart': _PointerChange_panZoomStart$,
    'PointerChange.panZoomUpdate': _PointerChange_panZoomUpdate$,
    'PointerChange.panZoomEnd': _PointerChange_panZoomEnd$,
    'PointerChange.values': _PointerChange_values$,
    'PointerDeviceKind.touch': _PointerDeviceKind_touch$,
    'PointerDeviceKind.mouse': _PointerDeviceKind_mouse$,
    'PointerDeviceKind.stylus': _PointerDeviceKind_stylus$,
    'PointerDeviceKind.invertedStylus': _PointerDeviceKind_invertedStylus$,
    'PointerDeviceKind.trackpad': _PointerDeviceKind_trackpad$,
    'PointerDeviceKind.unknown': _PointerDeviceKind_unknown$,
    'PointerDeviceKind.values': _PointerDeviceKind_values$,
    'PointerSignalKind.none': _PointerSignalKind_none$,
    'PointerSignalKind.scroll': _PointerSignalKind_scroll$,
    'PointerSignalKind.scrollInertiaCancel':
        _PointerSignalKind_scrollInertiaCancel$,
    'PointerSignalKind.scale': _PointerSignalKind_scale$,
    'PointerSignalKind.stylusAuxiliaryAction':
        _PointerSignalKind_stylusAuxiliaryAction$,
    'PointerSignalKind.unknown': _PointerSignalKind_unknown$,
    'PointerSignalKind.values': _PointerSignalKind_values$,
    'PointerPreferredStylusAuxiliaryAction.ignore':
        _PointerPreferredStylusAuxiliaryAction_ignore$,
    'PointerPreferredStylusAuxiliaryAction.showColorPalette':
        _PointerPreferredStylusAuxiliaryAction_showColorPalette$,
    'PointerPreferredStylusAuxiliaryAction.switchEraser':
        _PointerPreferredStylusAuxiliaryAction_switchEraser$,
    'PointerPreferredStylusAuxiliaryAction.switchPrevious':
        _PointerPreferredStylusAuxiliaryAction_switchPrevious$,
    'PointerPreferredStylusAuxiliaryAction.unknown':
        _PointerPreferredStylusAuxiliaryAction_unknown$,
    'PointerPreferredStylusAuxiliaryAction.values':
        _PointerPreferredStylusAuxiliaryAction_values$,
    'SemanticsAction.tap': _SemanticsAction_tap$,
    'SemanticsAction.longPress': _SemanticsAction_longPress$,
    'SemanticsAction.scrollLeft': _SemanticsAction_scrollLeft$,
    'SemanticsAction.scrollRight': _SemanticsAction_scrollRight$,
    'SemanticsAction.scrollUp': _SemanticsAction_scrollUp$,
    'SemanticsAction.scrollDown': _SemanticsAction_scrollDown$,
    'SemanticsAction.increase': _SemanticsAction_increase$,
    'SemanticsAction.decrease': _SemanticsAction_decrease$,
    'SemanticsAction.showOnScreen': _SemanticsAction_showOnScreen$,
    'SemanticsAction.moveCursorForwardByCharacter':
        _SemanticsAction_moveCursorForwardByCharacter$,
    'SemanticsAction.moveCursorBackwardByCharacter':
        _SemanticsAction_moveCursorBackwardByCharacter$,
    'SemanticsAction.setText': _SemanticsAction_setText$,
    'SemanticsAction.setSelection': _SemanticsAction_setSelection$,
    'SemanticsAction.copy': _SemanticsAction_copy$,
    'SemanticsAction.cut': _SemanticsAction_cut$,
    'SemanticsAction.paste': _SemanticsAction_paste$,
    'SemanticsAction.didGainAccessibilityFocus':
        _SemanticsAction_didGainAccessibilityFocus$,
    'SemanticsAction.didLoseAccessibilityFocus':
        _SemanticsAction_didLoseAccessibilityFocus$,
    'SemanticsAction.customAction': _SemanticsAction_customAction$,
    'SemanticsAction.dismiss': _SemanticsAction_dismiss$,
    'SemanticsAction.moveCursorForwardByWord':
        _SemanticsAction_moveCursorForwardByWord$,
    'SemanticsAction.moveCursorBackwardByWord':
        _SemanticsAction_moveCursorBackwardByWord$,
    'SemanticsAction.values': _SemanticsAction_values$,
    'SemanticsFlag.hasCheckedState': _SemanticsFlag_hasCheckedState$,
    'SemanticsFlag.isChecked': _SemanticsFlag_isChecked$,
    'SemanticsFlag.isCheckStateMixed': _SemanticsFlag_isCheckStateMixed$,
    'SemanticsFlag.isSelected': _SemanticsFlag_isSelected$,
    'SemanticsFlag.isButton': _SemanticsFlag_isButton$,
    'SemanticsFlag.isTextField': _SemanticsFlag_isTextField$,
    'SemanticsFlag.isSlider': _SemanticsFlag_isSlider$,
    'SemanticsFlag.isKeyboardKey': _SemanticsFlag_isKeyboardKey$,
    'SemanticsFlag.isReadOnly': _SemanticsFlag_isReadOnly$,
    'SemanticsFlag.isLink': _SemanticsFlag_isLink$,
    'SemanticsFlag.isFocusable': _SemanticsFlag_isFocusable$,
    'SemanticsFlag.isFocused': _SemanticsFlag_isFocused$,
    'SemanticsFlag.hasEnabledState': _SemanticsFlag_hasEnabledState$,
    'SemanticsFlag.isEnabled': _SemanticsFlag_isEnabled$,
    'SemanticsFlag.isInMutuallyExclusiveGroup':
        _SemanticsFlag_isInMutuallyExclusiveGroup$,
    'SemanticsFlag.isHeader': _SemanticsFlag_isHeader$,
    'SemanticsFlag.isObscured': _SemanticsFlag_isObscured$,
    'SemanticsFlag.isMultiline': _SemanticsFlag_isMultiline$,
    'SemanticsFlag.scopesRoute': _SemanticsFlag_scopesRoute$,
    'SemanticsFlag.namesRoute': _SemanticsFlag_namesRoute$,
    'SemanticsFlag.isHidden': _SemanticsFlag_isHidden$,
    'SemanticsFlag.isImage': _SemanticsFlag_isImage$,
    'SemanticsFlag.isLiveRegion': _SemanticsFlag_isLiveRegion$,
    'SemanticsFlag.hasToggledState': _SemanticsFlag_hasToggledState$,
    'SemanticsFlag.isToggled': _SemanticsFlag_isToggled$,
    'SemanticsFlag.hasImplicitScrolling': _SemanticsFlag_hasImplicitScrolling$,
    'SemanticsFlag.values': _SemanticsFlag_values$,
    'SpellOutStringAttribute.': _SpellOutStringAttribute__$,
    'LocaleStringAttribute.': _LocaleStringAttribute__$,
    'SemanticsUpdateBuilder.': _SemanticsUpdateBuilder__$,
    'FontWeight.w100': _FontWeight_w100$,
    'FontWeight.w200': _FontWeight_w200$,
    'FontWeight.w300': _FontWeight_w300$,
    'FontWeight.w400': _FontWeight_w400$,
    'FontWeight.w500': _FontWeight_w500$,
    'FontWeight.w600': _FontWeight_w600$,
    'FontWeight.w700': _FontWeight_w700$,
    'FontWeight.w800': _FontWeight_w800$,
    'FontWeight.w900': _FontWeight_w900$,
    'FontWeight.normal': _FontWeight_normal$,
    'FontWeight.bold': _FontWeight_bold$,
    'FontWeight.values': _FontWeight_values$,
    'FontWeight.lerp': _FontWeight_lerp$,
    'FontFeature.': _FontFeature__$,
    'FontFeature.enable': _FontFeature_enable_$,
    'FontFeature.disable': _FontFeature_disable_$,
    'FontFeature.alternative': _FontFeature_alternative_$,
    'FontFeature.alternativeFractions': _FontFeature_alternativeFractions_$,
    'FontFeature.contextualAlternates': _FontFeature_contextualAlternates_$,
    'FontFeature.caseSensitiveForms': _FontFeature_caseSensitiveForms_$,
    'FontFeature.characterVariant': _FontFeature_characterVariant_$,
    'FontFeature.denominator': _FontFeature_denominator_$,
    'FontFeature.fractions': _FontFeature_fractions_$,
    'FontFeature.historicalForms': _FontFeature_historicalForms_$,
    'FontFeature.historicalLigatures': _FontFeature_historicalLigatures_$,
    'FontFeature.liningFigures': _FontFeature_liningFigures_$,
    'FontFeature.localeAware': _FontFeature_localeAware_$,
    'FontFeature.notationalForms': _FontFeature_notationalForms_$,
    'FontFeature.numerators': _FontFeature_numerators_$,
    'FontFeature.oldstyleFigures': _FontFeature_oldstyleFigures_$,
    'FontFeature.ordinalForms': _FontFeature_ordinalForms_$,
    'FontFeature.proportionalFigures': _FontFeature_proportionalFigures_$,
    'FontFeature.randomize': _FontFeature_randomize_$,
    'FontFeature.stylisticAlternates': _FontFeature_stylisticAlternates_$,
    'FontFeature.scientificInferiors': _FontFeature_scientificInferiors_$,
    'FontFeature.stylisticSet': _FontFeature_stylisticSet_$,
    'FontFeature.subscripts': _FontFeature_subscripts_$,
    'FontFeature.superscripts': _FontFeature_superscripts_$,
    'FontFeature.swash': _FontFeature_swash_$,
    'FontFeature.tabularFigures': _FontFeature_tabularFigures_$,
    'FontFeature.slashedZero': _FontFeature_slashedZero_$,
    'FontVariation.': _FontVariation__$,
    'TextDecoration.none': _TextDecoration_none$,
    'TextDecoration.underline': _TextDecoration_underline$,
    'TextDecoration.overline': _TextDecoration_overline$,
    'TextDecoration.lineThrough': _TextDecoration_lineThrough$,
    'TextDecoration.combine': _TextDecoration_combine_$,
    'TextHeightBehavior.': _TextHeightBehavior__$,
    'TextStyle.': _TextStyle__$,
    'ParagraphStyle.': _ParagraphStyle__$,
    'StrutStyle.': _StrutStyle__$,
    'TextBox.fromLTRBD': _TextBox_fromLTRBD_$,
    'TextPosition.': _TextPosition__$,
    'TextRange.empty': _TextRange_empty$,
    'TextRange.': _TextRange__$,
    'TextRange.collapsed': _TextRange_collapsed_$,
    'ParagraphConstraints.': _ParagraphConstraints__$,
    'LineMetrics.': _LineMetrics__$,
    'ParagraphBuilder.': _ParagraphBuilder__$,
    'FontStyle.normal': _FontStyle_normal$,
    'FontStyle.italic': _FontStyle_italic$,
    'FontStyle.values': _FontStyle_values$,
    'TextAlign.left': _TextAlign_left$,
    'TextAlign.right': _TextAlign_right$,
    'TextAlign.center': _TextAlign_center$,
    'TextAlign.justify': _TextAlign_justify$,
    'TextAlign.start': _TextAlign_start$,
    'TextAlign.end': _TextAlign_end$,
    'TextAlign.values': _TextAlign_values$,
    'TextBaseline.alphabetic': _TextBaseline_alphabetic$,
    'TextBaseline.ideographic': _TextBaseline_ideographic$,
    'TextBaseline.values': _TextBaseline_values$,
    'TextDecorationStyle.solid': _TextDecorationStyle_solid$,
    'TextDecorationStyle.double': _TextDecorationStyle_double$,
    'TextDecorationStyle.dotted': _TextDecorationStyle_dotted$,
    'TextDecorationStyle.dashed': _TextDecorationStyle_dashed$,
    'TextDecorationStyle.wavy': _TextDecorationStyle_wavy$,
    'TextDecorationStyle.values': _TextDecorationStyle_values$,
    'TextLeadingDistribution.proportional':
        _TextLeadingDistribution_proportional$,
    'TextLeadingDistribution.even': _TextLeadingDistribution_even$,
    'TextLeadingDistribution.values': _TextLeadingDistribution_values$,
    'TextDirection.rtl': _TextDirection_rtl$,
    'TextDirection.ltr': _TextDirection_ltr$,
    'TextDirection.values': _TextDirection_values$,
    'TextAffinity.upstream': _TextAffinity_upstream$,
    'TextAffinity.downstream': _TextAffinity_downstream$,
    'TextAffinity.values': _TextAffinity_values$,
    'BoxHeightStyle.tight': _BoxHeightStyle_tight$,
    'BoxHeightStyle.max': _BoxHeightStyle_max$,
    'BoxHeightStyle.includeLineSpacingMiddle':
        _BoxHeightStyle_includeLineSpacingMiddle$,
    'BoxHeightStyle.includeLineSpacingTop':
        _BoxHeightStyle_includeLineSpacingTop$,
    'BoxHeightStyle.includeLineSpacingBottom':
        _BoxHeightStyle_includeLineSpacingBottom$,
    'BoxHeightStyle.strut': _BoxHeightStyle_strut$,
    'BoxHeightStyle.values': _BoxHeightStyle_values$,
    'BoxWidthStyle.tight': _BoxWidthStyle_tight$,
    'BoxWidthStyle.max': _BoxWidthStyle_max$,
    'BoxWidthStyle.values': _BoxWidthStyle_values$,
    'PlaceholderAlignment.baseline': _PlaceholderAlignment_baseline$,
    'PlaceholderAlignment.aboveBaseline': _PlaceholderAlignment_aboveBaseline$,
    'PlaceholderAlignment.belowBaseline': _PlaceholderAlignment_belowBaseline$,
    'PlaceholderAlignment.top': _PlaceholderAlignment_top$,
    'PlaceholderAlignment.bottom': _PlaceholderAlignment_bottom$,
    'PlaceholderAlignment.middle': _PlaceholderAlignment_middle$,
    'PlaceholderAlignment.values': _PlaceholderAlignment_values$,
    'loadFontFromList': _loadFontFromList$,
    'window': _window$,
    'GestureSettings.': _GestureSettings__$,
    'Brightness.dark': _Brightness_dark$,
    'Brightness.light': _Brightness_light$,
    'Brightness.values': _Brightness_values$,
  },
  {
    'Paint.enableDithering': _Paint_enableDithering_set$,
    'Image.onCreate': _Image_onCreate_set$,
    'Image.onDispose': _Image_onDispose_set$,
    'Picture.onCreate': _Picture_onCreate_set$,
    'Picture.onDispose': _Picture_onDispose_set$,
  },
  {
    'ChannelBuffers': m.ClassMirror(
      'ChannelBuffers',
      {
        '#as': ChannelBuffers_as$,
        '#is': ChannelBuffers_is$,
        'clearListener': _ChannelBuffers_clearListener$,
        'handleMessage': _ChannelBuffers_handleMessage$,
        'resize': _ChannelBuffers_resize$,
        'allowOverflow': _ChannelBuffers_allowOverflow$,
      },
      {},
    ),
    'Scene': m.ClassMirror(
      'Scene',
      {
        '#as': Scene_as$,
        '#is': Scene_is$,
        'toImageSync': _Scene_toImageSync$,
        'toImage': _Scene_toImage$,
        'dispose': _Scene_dispose$,
      },
      {},
    ),
    'TransformEngineLayer': m.ClassMirror(
      'TransformEngineLayer',
      {
        '#as': TransformEngineLayer_as$,
        '#is': TransformEngineLayer_is$,
      },
      {},
    ),
    'OffsetEngineLayer': m.ClassMirror(
      'OffsetEngineLayer',
      {
        '#as': OffsetEngineLayer_as$,
        '#is': OffsetEngineLayer_is$,
      },
      {},
    ),
    'ClipRectEngineLayer': m.ClassMirror(
      'ClipRectEngineLayer',
      {
        '#as': ClipRectEngineLayer_as$,
        '#is': ClipRectEngineLayer_is$,
      },
      {},
    ),
    'ClipRRectEngineLayer': m.ClassMirror(
      'ClipRRectEngineLayer',
      {
        '#as': ClipRRectEngineLayer_as$,
        '#is': ClipRRectEngineLayer_is$,
      },
      {},
    ),
    'ClipPathEngineLayer': m.ClassMirror(
      'ClipPathEngineLayer',
      {
        '#as': ClipPathEngineLayer_as$,
        '#is': ClipPathEngineLayer_is$,
      },
      {},
    ),
    'OpacityEngineLayer': m.ClassMirror(
      'OpacityEngineLayer',
      {
        '#as': OpacityEngineLayer_as$,
        '#is': OpacityEngineLayer_is$,
      },
      {},
    ),
    'ColorFilterEngineLayer': m.ClassMirror(
      'ColorFilterEngineLayer',
      {
        '#as': ColorFilterEngineLayer_as$,
        '#is': ColorFilterEngineLayer_is$,
      },
      {},
    ),
    'ImageFilterEngineLayer': m.ClassMirror(
      'ImageFilterEngineLayer',
      {
        '#as': ImageFilterEngineLayer_as$,
        '#is': ImageFilterEngineLayer_is$,
      },
      {},
    ),
    'BackdropFilterEngineLayer': m.ClassMirror(
      'BackdropFilterEngineLayer',
      {
        '#as': BackdropFilterEngineLayer_as$,
        '#is': BackdropFilterEngineLayer_is$,
      },
      {},
    ),
    'ShaderMaskEngineLayer': m.ClassMirror(
      'ShaderMaskEngineLayer',
      {
        '#as': ShaderMaskEngineLayer_as$,
        '#is': ShaderMaskEngineLayer_is$,
      },
      {},
    ),
    'PhysicalShapeEngineLayer': m.ClassMirror(
      'PhysicalShapeEngineLayer',
      {
        '#as': PhysicalShapeEngineLayer_as$,
        '#is': PhysicalShapeEngineLayer_is$,
      },
      {},
    ),
    'SceneBuilder': m.ClassMirror(
      'SceneBuilder',
      {
        '#as': SceneBuilder_as$,
        '#is': SceneBuilder_is$,
        'pushTransform': _SceneBuilder_pushTransform$,
        'pushOffset': _SceneBuilder_pushOffset$,
        'pushClipRect': _SceneBuilder_pushClipRect$,
        'pushClipRRect': _SceneBuilder_pushClipRRect$,
        'pushClipPath': _SceneBuilder_pushClipPath$,
        'pushOpacity': _SceneBuilder_pushOpacity$,
        'pushColorFilter': _SceneBuilder_pushColorFilter$,
        'pushImageFilter': _SceneBuilder_pushImageFilter$,
        'pushBackdropFilter': _SceneBuilder_pushBackdropFilter$,
        'pushShaderMask': _SceneBuilder_pushShaderMask$,
        'pop': _SceneBuilder_pop$,
        'addRetained': _SceneBuilder_addRetained$,
        'addPerformanceOverlay': _SceneBuilder_addPerformanceOverlay$,
        'addPicture': _SceneBuilder_addPicture$,
        'addTexture': _SceneBuilder_addTexture$,
        'addPlatformView': _SceneBuilder_addPlatformView$,
        'setRasterizerTracingThreshold':
            _SceneBuilder_setRasterizerTracingThreshold$,
        'setCheckerboardRasterCacheImages':
            _SceneBuilder_setCheckerboardRasterCacheImages$,
        'setCheckerboardOffscreenLayers':
            _SceneBuilder_setCheckerboardOffscreenLayers$,
        'build': _SceneBuilder_build$,
      },
      {},
    ),
    'OffsetBase': m.ClassMirror(
      'OffsetBase',
      {
        '#as': OffsetBase_as$,
        '#is': OffsetBase_is$,
        'isInfinite': _OffsetBase_isInfinite$,
        'isFinite': _OffsetBase_isFinite$,
        'hashCode': _OffsetBase_hashCode$,
        '<': _OffsetBase_low$$,
        '<=': _OffsetBase_low_eq$$,
        '>': _OffsetBase_more$$,
        '>=': _OffsetBase_more_eq$$,
        '==': _OffsetBase_eq$$,
        'toString': _OffsetBase_toString$,
      },
      {},
    ),
    'Offset': m.ClassMirror(
      'Offset',
      {
        '#as': Offset_as$,
        '#is': Offset_is$,
        'dx': _Offset_dx$,
        'dy': _Offset_dy$,
        'distance': _Offset_distance$,
        'distanceSquared': _Offset_distanceSquared$,
        'direction': _Offset_direction$,
        'hashCode': _Offset_hashCode$,
        'scale': _Offset_scale$,
        'translate': _Offset_translate$,
        'unary-': _Offset_unary_minus$$,
        '-': _Offset_minus$$,
        '+': _Offset_plus$$,
        '*': _Offset_times$$,
        '/': _Offset_over$$,
        '~/': _Offset_division$$,
        '%': _Offset_surplus$$,
        '&': _Offset_bit_and$$,
        '==': _Offset_eq$$,
        'toString': _Offset_toString$,
      },
      {},
    ),
    'Size': m.ClassMirror(
      'Size',
      {
        '#as': Size_as$,
        '#is': Size_is$,
        'width': _Size_width$,
        'height': _Size_height$,
        'aspectRatio': _Size_aspectRatio$,
        'isEmpty': _Size_isEmpty$,
        'shortestSide': _Size_shortestSide$,
        'longestSide': _Size_longestSide$,
        'flipped': _Size_flipped$,
        'hashCode': _Size_hashCode$,
        '-': _Size_minus$$,
        '+': _Size_plus$$,
        '*': _Size_times$$,
        '/': _Size_over$$,
        '~/': _Size_division$$,
        '%': _Size_surplus$$,
        'topLeft': _Size_topLeft$,
        'topCenter': _Size_topCenter$,
        'topRight': _Size_topRight$,
        'centerLeft': _Size_centerLeft$,
        'center': _Size_center$,
        'centerRight': _Size_centerRight$,
        'bottomLeft': _Size_bottomLeft$,
        'bottomCenter': _Size_bottomCenter$,
        'bottomRight': _Size_bottomRight$,
        'contains': _Size_contains$,
        '==': _Size_eq$$,
        'toString': _Size_toString$,
      },
      {},
    ),
    'Rect': m.ClassMirror(
      'Rect',
      {
        '#as': Rect_as$,
        '#is': Rect_is$,
        'left': _Rect_left$,
        'top': _Rect_top$,
        'right': _Rect_right$,
        'bottom': _Rect_bottom$,
        'width': _Rect_width$,
        'height': _Rect_height$,
        'size': _Rect_size$,
        'hasNaN': _Rect_hasNaN$,
        'isInfinite': _Rect_isInfinite$,
        'isFinite': _Rect_isFinite$,
        'isEmpty': _Rect_isEmpty$,
        'shortestSide': _Rect_shortestSide$,
        'longestSide': _Rect_longestSide$,
        'topLeft': _Rect_topLeft$,
        'topCenter': _Rect_topCenter$,
        'topRight': _Rect_topRight$,
        'centerLeft': _Rect_centerLeft$,
        'center': _Rect_center$,
        'centerRight': _Rect_centerRight$,
        'bottomLeft': _Rect_bottomLeft$,
        'bottomCenter': _Rect_bottomCenter$,
        'bottomRight': _Rect_bottomRight$,
        'hashCode': _Rect_hashCode$,
        'shift': _Rect_shift$,
        'translate': _Rect_translate$,
        'inflate': _Rect_inflate$,
        'deflate': _Rect_deflate$,
        'intersect': _Rect_intersect$,
        'expandToInclude': _Rect_expandToInclude$,
        'overlaps': _Rect_overlaps$,
        'contains': _Rect_contains$,
        '==': _Rect_eq$$,
        'toString': _Rect_toString$,
      },
      {},
    ),
    'Radius': m.ClassMirror(
      'Radius',
      {
        '#as': Radius_as$,
        '#is': Radius_is$,
        'x': _Radius_x$,
        'y': _Radius_y$,
        'hashCode': _Radius_hashCode$,
        'clamp': _Radius_clamp$,
        'clampValues': _Radius_clampValues$,
        'unary-': _Radius_unary_minus$$,
        '-': _Radius_minus$$,
        '+': _Radius_plus$$,
        '*': _Radius_times$$,
        '/': _Radius_over$$,
        '~/': _Radius_division$$,
        '%': _Radius_surplus$$,
        '==': _Radius_eq$$,
        'toString': _Radius_toString$,
      },
      {},
    ),
    'RRect': m.ClassMirror(
      'RRect',
      {
        '#as': RRect_as$,
        '#is': RRect_is$,
        'left': _RRect_left$,
        'top': _RRect_top$,
        'right': _RRect_right$,
        'bottom': _RRect_bottom$,
        'tlRadiusX': _RRect_tlRadiusX$,
        'tlRadiusY': _RRect_tlRadiusY$,
        'trRadiusX': _RRect_trRadiusX$,
        'trRadiusY': _RRect_trRadiusY$,
        'brRadiusX': _RRect_brRadiusX$,
        'brRadiusY': _RRect_brRadiusY$,
        'blRadiusX': _RRect_blRadiusX$,
        'blRadiusY': _RRect_blRadiusY$,
        'tlRadius': _RRect_tlRadius$,
        'trRadius': _RRect_trRadius$,
        'brRadius': _RRect_brRadius$,
        'blRadius': _RRect_blRadius$,
        'width': _RRect_width$,
        'height': _RRect_height$,
        'outerRect': _RRect_outerRect$,
        'safeInnerRect': _RRect_safeInnerRect$,
        'middleRect': _RRect_middleRect$,
        'wideMiddleRect': _RRect_wideMiddleRect$,
        'tallMiddleRect': _RRect_tallMiddleRect$,
        'isEmpty': _RRect_isEmpty$,
        'isFinite': _RRect_isFinite$,
        'isRect': _RRect_isRect$,
        'isStadium': _RRect_isStadium$,
        'isEllipse': _RRect_isEllipse$,
        'isCircle': _RRect_isCircle$,
        'shortestSide': _RRect_shortestSide$,
        'longestSide': _RRect_longestSide$,
        'hasNaN': _RRect_hasNaN$,
        'center': _RRect_center$,
        'hashCode': _RRect_hashCode$,
        'shift': _RRect_shift$,
        'inflate': _RRect_inflate$,
        'deflate': _RRect_deflate$,
        'scaleRadii': _RRect_scaleRadii$,
        'contains': _RRect_contains$,
        '==': _RRect_eq$$,
        'toString': _RRect_toString$,
      },
      {},
    ),
    'RSTransform': m.ClassMirror(
      'RSTransform',
      {
        '#as': RSTransform_as$,
        '#is': RSTransform_is$,
        'scos': _RSTransform_scos$,
        'ssin': _RSTransform_ssin$,
        'tx': _RSTransform_tx$,
        'ty': _RSTransform_ty$,
      },
      {},
    ),
    'IsolateNameServer': m.ClassMirror(
      'IsolateNameServer',
      {
        '#as': IsolateNameServer_as$,
        '#is': IsolateNameServer_is$,
      },
      {},
    ),
    'KeyData': m.ClassMirror(
      'KeyData',
      {
        '#as': KeyData_as$,
        '#is': KeyData_is$,
        'timeStamp': _KeyData_timeStamp$,
        'type': _KeyData_type$,
        'physical': _KeyData_physical$,
        'logical': _KeyData_logical$,
        'character': _KeyData_character$,
        'synthesized': _KeyData_synthesized$,
        'toString': _KeyData_toString$,
        'toStringFull': _KeyData_toStringFull$,
      },
      {},
    ),
    'KeyEventType': m.ClassMirror(
      'KeyEventType',
      {},
      {},
    ),
    'DartPluginRegistrant': m.ClassMirror(
      'DartPluginRegistrant',
      {
        '#as': DartPluginRegistrant_as$,
        '#is': DartPluginRegistrant_is$,
      },
      {},
    ),
    'Color': m.ClassMirror(
      'Color',
      {
        '#as': Color_as$,
        '#is': Color_is$,
        'value': _Color_value$,
        'alpha': _Color_alpha$,
        'opacity': _Color_opacity$,
        'red': _Color_red$,
        'green': _Color_green$,
        'blue': _Color_blue$,
        'hashCode': _Color_hashCode$,
        'withAlpha': _Color_withAlpha$,
        'withOpacity': _Color_withOpacity$,
        'withRed': _Color_withRed$,
        'withGreen': _Color_withGreen$,
        'withBlue': _Color_withBlue$,
        'computeLuminance': _Color_computeLuminance$,
        '==': _Color_eq$$,
        'toString': _Color_toString$,
      },
      {},
    ),
    'Paint': m.ClassMirror(
      'Paint',
      {
        '#as': Paint_as$,
        '#is': Paint_is$,
        'isAntiAlias': _Paint_isAntiAlias$,
        'color': _Paint_color$,
        'blendMode': _Paint_blendMode$,
        'style': _Paint_style$,
        'strokeWidth': _Paint_strokeWidth$,
        'strokeCap': _Paint_strokeCap$,
        'strokeJoin': _Paint_strokeJoin$,
        'strokeMiterLimit': _Paint_strokeMiterLimit$,
        'maskFilter': _Paint_maskFilter$,
        'filterQuality': _Paint_filterQuality$,
        'shader': _Paint_shader$,
        'colorFilter': _Paint_colorFilter$,
        'imageFilter': _Paint_imageFilter$,
        'invertColors': _Paint_invertColors$,
        'toString': _Paint_toString$,
      },
      {
        'isAntiAlias': _Paint_isAntiAlias_set$,
        'color': _Paint_color_set$,
        'blendMode': _Paint_blendMode_set$,
        'style': _Paint_style_set$,
        'strokeWidth': _Paint_strokeWidth_set$,
        'strokeCap': _Paint_strokeCap_set$,
        'strokeJoin': _Paint_strokeJoin_set$,
        'strokeMiterLimit': _Paint_strokeMiterLimit_set$,
        'maskFilter': _Paint_maskFilter_set$,
        'filterQuality': _Paint_filterQuality_set$,
        'shader': _Paint_shader_set$,
        'colorFilter': _Paint_colorFilter_set$,
        'imageFilter': _Paint_imageFilter_set$,
        'invertColors': _Paint_invertColors_set$,
      },
    ),
    'Image': m.ClassMirror(
      'Image',
      {
        '#as': Image_as$,
        '#is': Image_is$,
        'width': _Image_width$,
        'height': _Image_height$,
        'debugDisposed': _Image_debugDisposed$,
        'colorSpace': _Image_colorSpace$,
        'dispose': _Image_dispose$,
        'toByteData': _Image_toByteData$,
        'debugGetOpenHandleStackTraces': _Image_debugGetOpenHandleStackTraces$,
        'clone': _Image_clone$,
        'isCloneOf': _Image_isCloneOf$,
        'toString': _Image_toString$,
      },
      {},
    ),
    'FrameInfo': m.ClassMirror(
      'FrameInfo',
      {
        '#as': FrameInfo_as$,
        '#is': FrameInfo_is$,
        'duration': _FrameInfo_duration$,
        'image': _FrameInfo_image$,
      },
      {},
    ),
    'Codec': m.ClassMirror(
      'Codec',
      {
        '#as': Codec_as$,
        '#is': Codec_is$,
        'frameCount': _Codec_frameCount$,
        'repetitionCount': _Codec_repetitionCount$,
        'getNextFrame': _Codec_getNextFrame$,
        'dispose': _Codec_dispose$,
      },
      {},
    ),
    'TargetImageSize': m.ClassMirror(
      'TargetImageSize',
      {
        '#as': TargetImageSize_as$,
        '#is': TargetImageSize_is$,
        'width': _TargetImageSize_width$,
        'height': _TargetImageSize_height$,
        'toString': _TargetImageSize_toString$,
      },
      {},
    ),
    'EngineLayer': m.ClassMirror(
      'EngineLayer',
      {
        '#as': EngineLayer_as$,
        '#is': EngineLayer_is$,
        'dispose': _EngineLayer_dispose$,
      },
      {},
    ),
    'Path': m.ClassMirror(
      'Path',
      {
        '#as': Path_as$,
        '#is': Path_is$,
        'fillType': _Path_fillType$,
        'moveTo': _Path_moveTo$,
        'relativeMoveTo': _Path_relativeMoveTo$,
        'lineTo': _Path_lineTo$,
        'relativeLineTo': _Path_relativeLineTo$,
        'quadraticBezierTo': _Path_quadraticBezierTo$,
        'relativeQuadraticBezierTo': _Path_relativeQuadraticBezierTo$,
        'cubicTo': _Path_cubicTo$,
        'relativeCubicTo': _Path_relativeCubicTo$,
        'conicTo': _Path_conicTo$,
        'relativeConicTo': _Path_relativeConicTo$,
        'arcTo': _Path_arcTo$,
        'arcToPoint': _Path_arcToPoint$,
        'relativeArcToPoint': _Path_relativeArcToPoint$,
        'addRect': _Path_addRect$,
        'addOval': _Path_addOval$,
        'addArc': _Path_addArc$,
        'addPolygon': _Path_addPolygon$,
        'addRRect': _Path_addRRect$,
        'addPath': _Path_addPath$,
        'extendWithPath': _Path_extendWithPath$,
        'close': _Path_close$,
        'reset': _Path_reset$,
        'contains': _Path_contains$,
        'shift': _Path_shift$,
        'transform': _Path_transform$,
        'getBounds': _Path_getBounds$,
        'computeMetrics': _Path_computeMetrics$,
      },
      {'fillType': _Path_fillType_set$},
    ),
    'Tangent': m.ClassMirror(
      'Tangent',
      {
        '#as': Tangent_as$,
        '#is': Tangent_is$,
        'position': _Tangent_position$,
        'vector': _Tangent_vector$,
        'angle': _Tangent_angle$,
      },
      {},
    ),
    'PathMetrics': m.ClassMirror(
      'PathMetrics',
      {
        '#as': PathMetrics_as$,
        '#is': PathMetrics_is$,
        'iterator': _PathMetrics_iterator$,
      },
      {},
    ),
    'PathMetricIterator': m.ClassMirror(
      'PathMetricIterator',
      {
        '#as': PathMetricIterator_as$,
        '#is': PathMetricIterator_is$,
        'current': _PathMetricIterator_current$,
        'moveNext': _PathMetricIterator_moveNext$,
      },
      {},
    ),
    'PathMetric': m.ClassMirror(
      'PathMetric',
      {
        '#as': PathMetric_as$,
        '#is': PathMetric_is$,
        'length': _PathMetric_length$,
        'isClosed': _PathMetric_isClosed$,
        'contourIndex': _PathMetric_contourIndex$,
        'getTangentForOffset': _PathMetric_getTangentForOffset$,
        'extractPath': _PathMetric_extractPath$,
        'toString': _PathMetric_toString$,
      },
      {},
    ),
    'MaskFilter': m.ClassMirror(
      'MaskFilter',
      {
        '#as': MaskFilter_as$,
        '#is': MaskFilter_is$,
        'hashCode': _MaskFilter_hashCode$,
        '==': _MaskFilter_eq$$,
        'toString': _MaskFilter_toString$,
      },
      {},
    ),
    'ColorFilter': m.ClassMirror(
      'ColorFilter',
      {
        '#as': ColorFilter_as$,
        '#is': ColorFilter_is$,
        'hashCode': _ColorFilter_hashCode$,
        '==': _ColorFilter_eq$$,
        'toString': _ColorFilter_toString$,
      },
      {},
    ),
    'ImageFilter': m.ClassMirror(
      'ImageFilter',
      {
        '#as': ImageFilter_as$,
        '#is': ImageFilter_is$,
      },
      {},
    ),
    'Shader': m.ClassMirror(
      'Shader',
      {
        '#as': Shader_as$,
        '#is': Shader_is$,
        'debugDisposed': _Shader_debugDisposed$,
        'dispose': _Shader_dispose$,
      },
      {},
    ),
    'Gradient': m.ClassMirror(
      'Gradient',
      {
        '#as': Gradient_as$,
        '#is': Gradient_is$,
      },
      {},
    ),
    'ImageShader': m.ClassMirror(
      'ImageShader',
      {
        '#as': ImageShader_as$,
        '#is': ImageShader_is$,
        'dispose': _ImageShader_dispose$,
      },
      {},
    ),
    'FragmentProgram': m.ClassMirror(
      'FragmentProgram',
      {
        '#as': FragmentProgram_as$,
        '#is': FragmentProgram_is$,
        'fragmentShader': _FragmentProgram_fragmentShader$,
      },
      {},
    ),
    'FragmentShader': m.ClassMirror(
      'FragmentShader',
      {
        '#as': FragmentShader_as$,
        '#is': FragmentShader_is$,
        'setFloat': _FragmentShader_setFloat$,
        'setImageSampler': _FragmentShader_setImageSampler$,
        'dispose': _FragmentShader_dispose$,
      },
      {},
    ),
    'Vertices': m.ClassMirror(
      'Vertices',
      {
        '#as': Vertices_as$,
        '#is': Vertices_is$,
        'debugDisposed': _Vertices_debugDisposed$,
        'dispose': _Vertices_dispose$,
      },
      {},
    ),
    'Canvas': m.ClassMirror(
      'Canvas',
      {
        '#as': Canvas_as$,
        '#is': Canvas_is$,
        'save': _Canvas_save$,
        'saveLayer': _Canvas_saveLayer$,
        'restore': _Canvas_restore$,
        'restoreToCount': _Canvas_restoreToCount$,
        'getSaveCount': _Canvas_getSaveCount$,
        'translate': _Canvas_translate$,
        'scale': _Canvas_scale$,
        'rotate': _Canvas_rotate$,
        'skew': _Canvas_skew$,
        'transform': _Canvas_transform$,
        'getTransform': _Canvas_getTransform$,
        'clipRect': _Canvas_clipRect$,
        'clipRRect': _Canvas_clipRRect$,
        'clipPath': _Canvas_clipPath$,
        'getLocalClipBounds': _Canvas_getLocalClipBounds$,
        'getDestinationClipBounds': _Canvas_getDestinationClipBounds$,
        'drawColor': _Canvas_drawColor$,
        'drawLine': _Canvas_drawLine$,
        'drawPaint': _Canvas_drawPaint$,
        'drawRect': _Canvas_drawRect$,
        'drawRRect': _Canvas_drawRRect$,
        'drawDRRect': _Canvas_drawDRRect$,
        'drawOval': _Canvas_drawOval$,
        'drawCircle': _Canvas_drawCircle$,
        'drawArc': _Canvas_drawArc$,
        'drawPath': _Canvas_drawPath$,
        'drawImage': _Canvas_drawImage$,
        'drawImageRect': _Canvas_drawImageRect$,
        'drawImageNine': _Canvas_drawImageNine$,
        'drawPicture': _Canvas_drawPicture$,
        'drawParagraph': _Canvas_drawParagraph$,
        'drawPoints': _Canvas_drawPoints$,
        'drawRawPoints': _Canvas_drawRawPoints$,
        'drawVertices': _Canvas_drawVertices$,
        'drawAtlas': _Canvas_drawAtlas$,
        'drawRawAtlas': _Canvas_drawRawAtlas$,
        'drawShadow': _Canvas_drawShadow$,
      },
      {},
    ),
    'Picture': m.ClassMirror(
      'Picture',
      {
        '#as': Picture_as$,
        '#is': Picture_is$,
        'debugDisposed': _Picture_debugDisposed$,
        'approximateBytesUsed': _Picture_approximateBytesUsed$,
        'toImage': _Picture_toImage$,
        'toImageSync': _Picture_toImageSync$,
        'dispose': _Picture_dispose$,
      },
      {},
    ),
    'PictureRecorder': m.ClassMirror(
      'PictureRecorder',
      {
        '#as': PictureRecorder_as$,
        '#is': PictureRecorder_is$,
        'isRecording': _PictureRecorder_isRecording$,
        'endRecording': _PictureRecorder_endRecording$,
      },
      {},
    ),
    'Shadow': m.ClassMirror(
      'Shadow',
      {
        '#as': Shadow_as$,
        '#is': Shadow_is$,
        'color': _Shadow_color$,
        'offset': _Shadow_offset$,
        'blurRadius': _Shadow_blurRadius$,
        'blurSigma': _Shadow_blurSigma$,
        'hashCode': _Shadow_hashCode$,
        'toPaint': _Shadow_toPaint$,
        'scale': _Shadow_scale$,
        '==': _Shadow_eq$$,
        'toString': _Shadow_toString$,
      },
      {},
    ),
    'ImmutableBuffer': m.ClassMirror(
      'ImmutableBuffer',
      {
        '#as': ImmutableBuffer_as$,
        '#is': ImmutableBuffer_is$,
        'length': _ImmutableBuffer_length$,
        'debugDisposed': _ImmutableBuffer_debugDisposed$,
        'dispose': _ImmutableBuffer_dispose$,
      },
      {},
    ),
    'ImageDescriptor': m.ClassMirror(
      'ImageDescriptor',
      {
        '#as': ImageDescriptor_as$,
        '#is': ImageDescriptor_is$,
        'width': _ImageDescriptor_width$,
        'height': _ImageDescriptor_height$,
        'bytesPerPixel': _ImageDescriptor_bytesPerPixel$,
        'dispose': _ImageDescriptor_dispose$,
        'instantiateCodec': _ImageDescriptor_instantiateCodec$,
      },
      {},
    ),
    'PictureRasterizationException': m.ClassMirror(
      'PictureRasterizationException',
      {
        '#as': PictureRasterizationException_as$,
        '#is': PictureRasterizationException_is$,
        'message': _PictureRasterizationException_message$,
        'stack': _PictureRasterizationException_stack$,
        'toString': _PictureRasterizationException_toString$,
      },
      {},
    ),
    'BlendMode': m.ClassMirror(
      'BlendMode',
      {},
      {},
    ),
    'FilterQuality': m.ClassMirror(
      'FilterQuality',
      {},
      {},
    ),
    'StrokeCap': m.ClassMirror(
      'StrokeCap',
      {},
      {},
    ),
    'StrokeJoin': m.ClassMirror(
      'StrokeJoin',
      {},
      {},
    ),
    'PaintingStyle': m.ClassMirror(
      'PaintingStyle',
      {},
      {},
    ),
    'Clip': m.ClassMirror(
      'Clip',
      {},
      {},
    ),
    'ColorSpace': m.ClassMirror(
      'ColorSpace',
      {},
      {},
    ),
    'ImageByteFormat': m.ClassMirror(
      'ImageByteFormat',
      {},
      {},
    ),
    'PixelFormat': m.ClassMirror(
      'PixelFormat',
      {},
      {},
    ),
    'PathFillType': m.ClassMirror(
      'PathFillType',
      {},
      {},
    ),
    'PathOperation': m.ClassMirror(
      'PathOperation',
      {},
      {},
    ),
    'BlurStyle': m.ClassMirror(
      'BlurStyle',
      {},
      {},
    ),
    'TileMode': m.ClassMirror(
      'TileMode',
      {},
      {},
    ),
    'VertexMode': m.ClassMirror(
      'VertexMode',
      {},
      {},
    ),
    'PointMode': m.ClassMirror(
      'PointMode',
      {},
      {},
    ),
    'ClipOp': m.ClassMirror(
      'ClipOp',
      {},
      {},
    ),
    'RootIsolateToken': m.ClassMirror(
      'RootIsolateToken',
      {
        '#as': RootIsolateToken_as$,
        '#is': RootIsolateToken_is$,
      },
      {},
    ),
    'PlatformDispatcher': m.ClassMirror(
      'PlatformDispatcher',
      {
        '#as': PlatformDispatcher_as$,
        '#is': PlatformDispatcher_is$,
        'onPlatformConfigurationChanged':
            _PlatformDispatcher_onPlatformConfigurationChanged$,
        'views': _PlatformDispatcher_views$,
        'implicitView': _PlatformDispatcher_implicitView$,
        'onMetricsChanged': _PlatformDispatcher_onMetricsChanged$,
        'onBeginFrame': _PlatformDispatcher_onBeginFrame$,
        'onDrawFrame': _PlatformDispatcher_onDrawFrame$,
        'onPointerDataPacket': _PlatformDispatcher_onPointerDataPacket$,
        'onKeyData': _PlatformDispatcher_onKeyData$,
        'onReportTimings': _PlatformDispatcher_onReportTimings$,
        'onPlatformMessage': _PlatformDispatcher_onPlatformMessage$,
        'accessibilityFeatures': _PlatformDispatcher_accessibilityFeatures$,
        'onAccessibilityFeaturesChanged':
            _PlatformDispatcher_onAccessibilityFeaturesChanged$,
        'locale': _PlatformDispatcher_locale$,
        'locales': _PlatformDispatcher_locales$,
        'onLocaleChanged': _PlatformDispatcher_onLocaleChanged$,
        'initialLifecycleState': _PlatformDispatcher_initialLifecycleState$,
        'alwaysUse24HourFormat': _PlatformDispatcher_alwaysUse24HourFormat$,
        'textScaleFactor': _PlatformDispatcher_textScaleFactor$,
        'onTextScaleFactorChanged':
            _PlatformDispatcher_onTextScaleFactorChanged$,
        'nativeSpellCheckServiceDefined':
            _PlatformDispatcher_nativeSpellCheckServiceDefined$,
        'brieflyShowPassword': _PlatformDispatcher_brieflyShowPassword$,
        'platformBrightness': _PlatformDispatcher_platformBrightness$,
        'onPlatformBrightnessChanged':
            _PlatformDispatcher_onPlatformBrightnessChanged$,
        'systemFontFamily': _PlatformDispatcher_systemFontFamily$,
        'onSystemFontFamilyChanged':
            _PlatformDispatcher_onSystemFontFamilyChanged$,
        'semanticsEnabled': _PlatformDispatcher_semanticsEnabled$,
        'onSemanticsEnabledChanged':
            _PlatformDispatcher_onSemanticsEnabledChanged$,
        'onSemanticsAction': _PlatformDispatcher_onSemanticsAction$,
        'frameData': _PlatformDispatcher_frameData$,
        'onFrameDataChanged': _PlatformDispatcher_onFrameDataChanged$,
        'onError': _PlatformDispatcher_onError$,
        'defaultRouteName': _PlatformDispatcher_defaultRouteName$,
        'sendPortPlatformMessage': _PlatformDispatcher_sendPortPlatformMessage$,
        'registerBackgroundIsolate':
            _PlatformDispatcher_registerBackgroundIsolate$,
        'setIsolateDebugName': _PlatformDispatcher_setIsolateDebugName$,
        'requestDartPerformanceMode':
            _PlatformDispatcher_requestDartPerformanceMode$,
        'getPersistentIsolateData':
            _PlatformDispatcher_getPersistentIsolateData$,
        'scheduleFrame': _PlatformDispatcher_scheduleFrame$,
        'computePlatformResolvedLocale':
            _PlatformDispatcher_computePlatformResolvedLocale$,
      },
      {
        'onPlatformConfigurationChanged':
            _PlatformDispatcher_onPlatformConfigurationChanged_set$,
        'onMetricsChanged': _PlatformDispatcher_onMetricsChanged_set$,
        'onBeginFrame': _PlatformDispatcher_onBeginFrame_set$,
        'onDrawFrame': _PlatformDispatcher_onDrawFrame_set$,
        'onPointerDataPacket': _PlatformDispatcher_onPointerDataPacket_set$,
        'onKeyData': _PlatformDispatcher_onKeyData_set$,
        'onReportTimings': _PlatformDispatcher_onReportTimings_set$,
        'onPlatformMessage': _PlatformDispatcher_onPlatformMessage_set$,
        'onAccessibilityFeaturesChanged':
            _PlatformDispatcher_onAccessibilityFeaturesChanged_set$,
        'onLocaleChanged': _PlatformDispatcher_onLocaleChanged_set$,
        'onTextScaleFactorChanged':
            _PlatformDispatcher_onTextScaleFactorChanged_set$,
        'onPlatformBrightnessChanged':
            _PlatformDispatcher_onPlatformBrightnessChanged_set$,
        'onSystemFontFamilyChanged':
            _PlatformDispatcher_onSystemFontFamilyChanged_set$,
        'onSemanticsEnabledChanged':
            _PlatformDispatcher_onSemanticsEnabledChanged_set$,
        'onSemanticsAction': _PlatformDispatcher_onSemanticsAction_set$,
        'onFrameDataChanged': _PlatformDispatcher_onFrameDataChanged_set$,
        'onError': _PlatformDispatcher_onError_set$,
      },
    ),
    'FrameTiming': m.ClassMirror(
      'FrameTiming',
      {
        '#as': FrameTiming_as$,
        '#is': FrameTiming_is$,
        'buildDuration': _FrameTiming_buildDuration$,
        'rasterDuration': _FrameTiming_rasterDuration$,
        'vsyncOverhead': _FrameTiming_vsyncOverhead$,
        'totalSpan': _FrameTiming_totalSpan$,
        'layerCacheCount': _FrameTiming_layerCacheCount$,
        'layerCacheBytes': _FrameTiming_layerCacheBytes$,
        'layerCacheMegabytes': _FrameTiming_layerCacheMegabytes$,
        'pictureCacheCount': _FrameTiming_pictureCacheCount$,
        'pictureCacheBytes': _FrameTiming_pictureCacheBytes$,
        'pictureCacheMegabytes': _FrameTiming_pictureCacheMegabytes$,
        'frameNumber': _FrameTiming_frameNumber$,
        'timestampInMicroseconds': _FrameTiming_timestampInMicroseconds$,
        'toString': _FrameTiming_toString$,
      },
      {},
    ),
    'ViewPadding': m.ClassMirror(
      'ViewPadding',
      {
        '#as': ViewPadding_as$,
        '#is': ViewPadding_is$,
        'left': _ViewPadding_left$,
        'top': _ViewPadding_top$,
        'right': _ViewPadding_right$,
        'bottom': _ViewPadding_bottom$,
        'toString': _ViewPadding_toString$,
      },
      {},
    ),
    'DisplayFeature': m.ClassMirror(
      'DisplayFeature',
      {
        '#as': DisplayFeature_as$,
        '#is': DisplayFeature_is$,
        'bounds': _DisplayFeature_bounds$,
        'type': _DisplayFeature_type$,
        'state': _DisplayFeature_state$,
        'hashCode': _DisplayFeature_hashCode$,
        '==': _DisplayFeature_eq$$,
        'toString': _DisplayFeature_toString$,
      },
      {},
    ),
    'Locale': m.ClassMirror(
      'Locale',
      {
        '#as': Locale_as$,
        '#is': Locale_is$,
        'scriptCode': _Locale_scriptCode$,
        'languageCode': _Locale_languageCode$,
        'countryCode': _Locale_countryCode$,
        'hashCode': _Locale_hashCode$,
        '==': _Locale_eq$$,
        'toString': _Locale_toString$,
        'toLanguageTag': _Locale_toLanguageTag$,
      },
      {},
    ),
    'FramePhase': m.ClassMirror(
      'FramePhase',
      {},
      {},
    ),
    'AppLifecycleState': m.ClassMirror(
      'AppLifecycleState',
      {},
      {},
    ),
    'AppExitResponse': m.ClassMirror(
      'AppExitResponse',
      {},
      {},
    ),
    'AppExitType': m.ClassMirror(
      'AppExitType',
      {},
      {},
    ),
    'DisplayFeatureType': m.ClassMirror(
      'DisplayFeatureType',
      {},
      {},
    ),
    'DisplayFeatureState': m.ClassMirror(
      'DisplayFeatureState',
      {},
      {},
    ),
    'DartPerformanceMode': m.ClassMirror(
      'DartPerformanceMode',
      {},
      {},
    ),
    'CallbackHandle': m.ClassMirror(
      'CallbackHandle',
      {
        '#as': CallbackHandle_as$,
        '#is': CallbackHandle_is$,
        'hashCode': _CallbackHandle_hashCode$,
        'toRawHandle': _CallbackHandle_toRawHandle$,
        '==': _CallbackHandle_eq$$,
      },
      {},
    ),
    'PluginUtilities': m.ClassMirror(
      'PluginUtilities',
      {
        '#as': PluginUtilities_as$,
        '#is': PluginUtilities_is$,
      },
      {},
    ),
    'PointerData': m.ClassMirror(
      'PointerData',
      {
        '#as': PointerData_as$,
        '#is': PointerData_is$,
        'embedderId': _PointerData_embedderId$,
        'timeStamp': _PointerData_timeStamp$,
        'change': _PointerData_change$,
        'kind': _PointerData_kind$,
        'signalKind': _PointerData_signalKind$,
        'device': _PointerData_device$,
        'pointerIdentifier': _PointerData_pointerIdentifier$,
        'physicalX': _PointerData_physicalX$,
        'physicalY': _PointerData_physicalY$,
        'physicalDeltaX': _PointerData_physicalDeltaX$,
        'physicalDeltaY': _PointerData_physicalDeltaY$,
        'buttons': _PointerData_buttons$,
        'obscured': _PointerData_obscured$,
        'synthesized': _PointerData_synthesized$,
        'pressure': _PointerData_pressure$,
        'pressureMin': _PointerData_pressureMin$,
        'pressureMax': _PointerData_pressureMax$,
        'distance': _PointerData_distance$,
        'distanceMax': _PointerData_distanceMax$,
        'size': _PointerData_size$,
        'radiusMajor': _PointerData_radiusMajor$,
        'radiusMinor': _PointerData_radiusMinor$,
        'radiusMin': _PointerData_radiusMin$,
        'radiusMax': _PointerData_radiusMax$,
        'orientation': _PointerData_orientation$,
        'tilt': _PointerData_tilt$,
        'platformData': _PointerData_platformData$,
        'scrollDeltaX': _PointerData_scrollDeltaX$,
        'scrollDeltaY': _PointerData_scrollDeltaY$,
        'panX': _PointerData_panX$,
        'panY': _PointerData_panY$,
        'panDeltaX': _PointerData_panDeltaX$,
        'panDeltaY': _PointerData_panDeltaY$,
        'scale': _PointerData_scale$,
        'rotation': _PointerData_rotation$,
        'preferredStylusAuxiliaryAction':
            _PointerData_preferredStylusAuxiliaryAction$,
        'toString': _PointerData_toString$,
        'toStringFull': _PointerData_toStringFull$,
      },
      {},
    ),
    'PointerDataPacket': m.ClassMirror(
      'PointerDataPacket',
      {
        '#as': PointerDataPacket_as$,
        '#is': PointerDataPacket_is$,
        'data': _PointerDataPacket_data$,
      },
      {},
    ),
    'PointerChange': m.ClassMirror(
      'PointerChange',
      {},
      {},
    ),
    'PointerDeviceKind': m.ClassMirror(
      'PointerDeviceKind',
      {},
      {},
    ),
    'PointerSignalKind': m.ClassMirror(
      'PointerSignalKind',
      {},
      {},
    ),
    'PointerPreferredStylusAuxiliaryAction': m.ClassMirror(
      'PointerPreferredStylusAuxiliaryAction',
      {},
      {},
    ),
    'SemanticsAction': m.ClassMirror(
      'SemanticsAction',
      {
        '#as': SemanticsAction_as$,
        '#is': SemanticsAction_is$,
        'index': _SemanticsAction_index$,
        'toString': _SemanticsAction_toString$,
      },
      {},
    ),
    'SemanticsFlag': m.ClassMirror(
      'SemanticsFlag',
      {
        '#as': SemanticsFlag_as$,
        '#is': SemanticsFlag_is$,
        'index': _SemanticsFlag_index$,
        'toString': _SemanticsFlag_toString$,
      },
      {},
    ),
    'StringAttribute': m.ClassMirror(
      'StringAttribute',
      {
        '#as': StringAttribute_as$,
        '#is': StringAttribute_is$,
        'range': _StringAttribute_range$,
        'copy': _StringAttribute_copy$,
      },
      {},
    ),
    'SpellOutStringAttribute': m.ClassMirror(
      'SpellOutStringAttribute',
      {
        '#as': SpellOutStringAttribute_as$,
        '#is': SpellOutStringAttribute_is$,
        'copy': _SpellOutStringAttribute_copy$,
        'toString': _SpellOutStringAttribute_toString$,
      },
      {},
    ),
    'LocaleStringAttribute': m.ClassMirror(
      'LocaleStringAttribute',
      {
        '#as': LocaleStringAttribute_as$,
        '#is': LocaleStringAttribute_is$,
        'locale': _LocaleStringAttribute_locale$,
        'copy': _LocaleStringAttribute_copy$,
        'toString': _LocaleStringAttribute_toString$,
      },
      {},
    ),
    'SemanticsUpdateBuilder': m.ClassMirror(
      'SemanticsUpdateBuilder',
      {
        '#as': SemanticsUpdateBuilder_as$,
        '#is': SemanticsUpdateBuilder_is$,
        'updateNode': _SemanticsUpdateBuilder_updateNode$,
        'updateCustomAction': _SemanticsUpdateBuilder_updateCustomAction$,
        'build': _SemanticsUpdateBuilder_build$,
      },
      {},
    ),
    'SemanticsUpdate': m.ClassMirror(
      'SemanticsUpdate',
      {
        '#as': SemanticsUpdate_as$,
        '#is': SemanticsUpdate_is$,
        'dispose': _SemanticsUpdate_dispose$,
      },
      {},
    ),
    'FontWeight': m.ClassMirror(
      'FontWeight',
      {
        '#as': FontWeight_as$,
        '#is': FontWeight_is$,
        'index': _FontWeight_index$,
        'value': _FontWeight_value$,
        'toString': _FontWeight_toString$,
      },
      {},
    ),
    'FontFeature': m.ClassMirror(
      'FontFeature',
      {
        '#as': FontFeature_as$,
        '#is': FontFeature_is$,
        'feature': _FontFeature_feature$,
        'value': _FontFeature_value$,
        'hashCode': _FontFeature_hashCode$,
        '==': _FontFeature_eq$$,
        'toString': _FontFeature_toString$,
      },
      {},
    ),
    'FontVariation': m.ClassMirror(
      'FontVariation',
      {
        '#as': FontVariation_as$,
        '#is': FontVariation_is$,
        'axis': _FontVariation_axis$,
        'value': _FontVariation_value$,
        'hashCode': _FontVariation_hashCode$,
        '==': _FontVariation_eq$$,
        'toString': _FontVariation_toString$,
      },
      {},
    ),
    'TextDecoration': m.ClassMirror(
      'TextDecoration',
      {
        '#as': TextDecoration_as$,
        '#is': TextDecoration_is$,
        'hashCode': _TextDecoration_hashCode$,
        'contains': _TextDecoration_contains$,
        '==': _TextDecoration_eq$$,
        'toString': _TextDecoration_toString$,
      },
      {},
    ),
    'TextHeightBehavior': m.ClassMirror(
      'TextHeightBehavior',
      {
        '#as': TextHeightBehavior_as$,
        '#is': TextHeightBehavior_is$,
        'applyHeightToFirstAscent':
            _TextHeightBehavior_applyHeightToFirstAscent$,
        'applyHeightToLastDescent':
            _TextHeightBehavior_applyHeightToLastDescent$,
        'leadingDistribution': _TextHeightBehavior_leadingDistribution$,
        'hashCode': _TextHeightBehavior_hashCode$,
        '==': _TextHeightBehavior_eq$$,
        'toString': _TextHeightBehavior_toString$,
      },
      {},
    ),
    'TextStyle': m.ClassMirror(
      'TextStyle',
      {
        '#as': TextStyle_as$,
        '#is': TextStyle_is$,
        'hashCode': _TextStyle_hashCode$,
        '==': _TextStyle_eq$$,
        'toString': _TextStyle_toString$,
      },
      {},
    ),
    'ParagraphStyle': m.ClassMirror(
      'ParagraphStyle',
      {
        '#as': ParagraphStyle_as$,
        '#is': ParagraphStyle_is$,
        'hashCode': _ParagraphStyle_hashCode$,
        '==': _ParagraphStyle_eq$$,
        'toString': _ParagraphStyle_toString$,
      },
      {},
    ),
    'StrutStyle': m.ClassMirror(
      'StrutStyle',
      {
        '#as': StrutStyle_as$,
        '#is': StrutStyle_is$,
        'hashCode': _StrutStyle_hashCode$,
        '==': _StrutStyle_eq$$,
      },
      {},
    ),
    'TextBox': m.ClassMirror(
      'TextBox',
      {
        '#as': TextBox_as$,
        '#is': TextBox_is$,
        'left': _TextBox_left$,
        'top': _TextBox_top$,
        'right': _TextBox_right$,
        'bottom': _TextBox_bottom$,
        'direction': _TextBox_direction$,
        'start': _TextBox_start$,
        'end': _TextBox_end$,
        'hashCode': _TextBox_hashCode$,
        'toRect': _TextBox_toRect$,
        '==': _TextBox_eq$$,
        'toString': _TextBox_toString$,
      },
      {},
    ),
    'TextPosition': m.ClassMirror(
      'TextPosition',
      {
        '#as': TextPosition_as$,
        '#is': TextPosition_is$,
        'offset': _TextPosition_offset$,
        'affinity': _TextPosition_affinity$,
        'hashCode': _TextPosition_hashCode$,
        '==': _TextPosition_eq$$,
        'toString': _TextPosition_toString$,
      },
      {},
    ),
    'TextRange': m.ClassMirror(
      'TextRange',
      {
        '#as': TextRange_as$,
        '#is': TextRange_is$,
        'start': _TextRange_start$,
        'end': _TextRange_end$,
        'isValid': _TextRange_isValid$,
        'isCollapsed': _TextRange_isCollapsed$,
        'isNormalized': _TextRange_isNormalized$,
        'hashCode': _TextRange_hashCode$,
        'textBefore': _TextRange_textBefore$,
        'textAfter': _TextRange_textAfter$,
        'textInside': _TextRange_textInside$,
        '==': _TextRange_eq$$,
        'toString': _TextRange_toString$,
      },
      {},
    ),
    'ParagraphConstraints': m.ClassMirror(
      'ParagraphConstraints',
      {
        '#as': ParagraphConstraints_as$,
        '#is': ParagraphConstraints_is$,
        'width': _ParagraphConstraints_width$,
        'hashCode': _ParagraphConstraints_hashCode$,
        '==': _ParagraphConstraints_eq$$,
        'toString': _ParagraphConstraints_toString$,
      },
      {},
    ),
    'LineMetrics': m.ClassMirror(
      'LineMetrics',
      {
        '#as': LineMetrics_as$,
        '#is': LineMetrics_is$,
        'hardBreak': _LineMetrics_hardBreak$,
        'ascent': _LineMetrics_ascent$,
        'descent': _LineMetrics_descent$,
        'unscaledAscent': _LineMetrics_unscaledAscent$,
        'height': _LineMetrics_height$,
        'width': _LineMetrics_width$,
        'left': _LineMetrics_left$,
        'baseline': _LineMetrics_baseline$,
        'lineNumber': _LineMetrics_lineNumber$,
        'hashCode': _LineMetrics_hashCode$,
        '==': _LineMetrics_eq$$,
        'toString': _LineMetrics_toString$,
      },
      {},
    ),
    'Paragraph': m.ClassMirror(
      'Paragraph',
      {
        '#as': Paragraph_as$,
        '#is': Paragraph_is$,
        'width': _Paragraph_width$,
        'height': _Paragraph_height$,
        'longestLine': _Paragraph_longestLine$,
        'minIntrinsicWidth': _Paragraph_minIntrinsicWidth$,
        'maxIntrinsicWidth': _Paragraph_maxIntrinsicWidth$,
        'alphabeticBaseline': _Paragraph_alphabeticBaseline$,
        'ideographicBaseline': _Paragraph_ideographicBaseline$,
        'didExceedMaxLines': _Paragraph_didExceedMaxLines$,
        'debugDisposed': _Paragraph_debugDisposed$,
        'layout': _Paragraph_layout$,
        'getBoxesForRange': _Paragraph_getBoxesForRange$,
        'getBoxesForPlaceholders': _Paragraph_getBoxesForPlaceholders$,
        'getPositionForOffset': _Paragraph_getPositionForOffset$,
        'getWordBoundary': _Paragraph_getWordBoundary$,
        'getLineBoundary': _Paragraph_getLineBoundary$,
        'computeLineMetrics': _Paragraph_computeLineMetrics$,
        'dispose': _Paragraph_dispose$,
      },
      {},
    ),
    'ParagraphBuilder': m.ClassMirror(
      'ParagraphBuilder',
      {
        '#as': ParagraphBuilder_as$,
        '#is': ParagraphBuilder_is$,
        'placeholderCount': _ParagraphBuilder_placeholderCount$,
        'placeholderScales': _ParagraphBuilder_placeholderScales$,
        'pushStyle': _ParagraphBuilder_pushStyle$,
        'pop': _ParagraphBuilder_pop$,
        'addText': _ParagraphBuilder_addText$,
        'addPlaceholder': _ParagraphBuilder_addPlaceholder$,
        'build': _ParagraphBuilder_build$,
      },
      {},
    ),
    'FontStyle': m.ClassMirror(
      'FontStyle',
      {},
      {},
    ),
    'TextAlign': m.ClassMirror(
      'TextAlign',
      {},
      {},
    ),
    'TextBaseline': m.ClassMirror(
      'TextBaseline',
      {},
      {},
    ),
    'TextDecorationStyle': m.ClassMirror(
      'TextDecorationStyle',
      {},
      {},
    ),
    'TextLeadingDistribution': m.ClassMirror(
      'TextLeadingDistribution',
      {},
      {},
    ),
    'TextDirection': m.ClassMirror(
      'TextDirection',
      {},
      {},
    ),
    'TextAffinity': m.ClassMirror(
      'TextAffinity',
      {},
      {},
    ),
    'BoxHeightStyle': m.ClassMirror(
      'BoxHeightStyle',
      {},
      {},
    ),
    'BoxWidthStyle': m.ClassMirror(
      'BoxWidthStyle',
      {},
      {},
    ),
    'PlaceholderAlignment': m.ClassMirror(
      'PlaceholderAlignment',
      {},
      {},
    ),
    'FlutterView': m.ClassMirror(
      'FlutterView',
      {
        '#as': FlutterView_as$,
        '#is': FlutterView_is$,
        'viewId': _FlutterView_viewId$,
        'platformDispatcher': _FlutterView_platformDispatcher$,
        'devicePixelRatio': _FlutterView_devicePixelRatio$,
        'physicalGeometry': _FlutterView_physicalGeometry$,
        'physicalSize': _FlutterView_physicalSize$,
        'viewInsets': _FlutterView_viewInsets$,
        'viewPadding': _FlutterView_viewPadding$,
        'systemGestureInsets': _FlutterView_systemGestureInsets$,
        'padding': _FlutterView_padding$,
        'gestureSettings': _FlutterView_gestureSettings$,
        'displayFeatures': _FlutterView_displayFeatures$,
        'render': _FlutterView_render$,
        'updateSemantics': _FlutterView_updateSemantics$,
      },
      {},
    ),
    'AccessibilityFeatures': m.ClassMirror(
      'AccessibilityFeatures',
      {
        '#as': AccessibilityFeatures_as$,
        '#is': AccessibilityFeatures_is$,
        'accessibleNavigation': _AccessibilityFeatures_accessibleNavigation$,
        'invertColors': _AccessibilityFeatures_invertColors$,
        'disableAnimations': _AccessibilityFeatures_disableAnimations$,
        'boldText': _AccessibilityFeatures_boldText$,
        'reduceMotion': _AccessibilityFeatures_reduceMotion$,
        'highContrast': _AccessibilityFeatures_highContrast$,
        'onOffSwitchLabels': _AccessibilityFeatures_onOffSwitchLabels$,
        'hashCode': _AccessibilityFeatures_hashCode$,
        'toString': _AccessibilityFeatures_toString$,
        '==': _AccessibilityFeatures_eq$$,
      },
      {},
    ),
    'FrameData': m.ClassMirror(
      'FrameData',
      {
        '#as': FrameData_as$,
        '#is': FrameData_is$,
        'frameNumber': _FrameData_frameNumber$,
      },
      {},
    ),
    'GestureSettings': m.ClassMirror(
      'GestureSettings',
      {
        '#as': GestureSettings_as$,
        '#is': GestureSettings_is$,
        'physicalTouchSlop': _GestureSettings_physicalTouchSlop$,
        'physicalDoubleTapSlop': _GestureSettings_physicalDoubleTapSlop$,
        'hashCode': _GestureSettings_hashCode$,
        'copyWith': _GestureSettings_copyWith$,
        '==': _GestureSettings_eq$$,
        'toString': _GestureSettings_toString$,
      },
      {},
    ),
    'Brightness': m.ClassMirror(
      'Brightness',
      {},
      {},
    ),
  },
);
pragma _keepToString$() {
  return keepToString;
}

ChannelBuffers _channelBuffers$() {
  return channelBuffers;
}

Function ChannelBuffers_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ChannelBuffers;
Function ChannelBuffers_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ChannelBuffers;
int _ChannelBuffers_kDefaultBufferSize$() {
  return ChannelBuffers.kDefaultBufferSize;
}

String _ChannelBuffers_kControlChannelName$() {
  return ChannelBuffers.kControlChannelName;
}

Function _ChannelBuffers__$(m.Scope scope$) => () {
      return ChannelBuffers();
    };
Function _ChannelBuffers_push$(
  m.Scope scope$,
  ChannelBuffers target$,
) =>
    (
      String name,
      ByteData? data,
      m.FunctionPointer callback,
    ) {
      void callbackProxy(ByteData? callback_data$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            callback,
            [callback_data$],
            {},
          );
      target$.push(
        name,
        data,
        callbackProxy,
      );
    };
Function _ChannelBuffers_setListener$(
  m.Scope scope$,
  ChannelBuffers target$,
) =>
    (
      String name,
      m.FunctionPointer callback,
    ) {
      void callbackProxy(
        ByteData? callback_data$,
        void Function(ByteData?) callback_callback$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            callback,
            [
              callback_data$,
              callback_callback$,
            ],
            {},
          );
      target$.setListener(
        name,
        callbackProxy,
      );
    };
Function _ChannelBuffers_clearListener$(
  m.Scope scope$,
  ChannelBuffers target$,
) =>
    target$.clearListener;
Function _ChannelBuffers_drain$(
  m.Scope scope$,
  ChannelBuffers target$,
) =>
    (
      String name,
      m.FunctionPointer callback,
    ) {
      Future<void> callbackProxy(
        ByteData? callback_data$,
        void Function(ByteData?) callback_callback$,
      ) async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            callback,
            [
              callback_data$,
              callback_callback$,
            ],
            {},
          );
      return target$.drain(
        name,
        callbackProxy,
      );
    };
Function _ChannelBuffers_handleMessage$(
  m.Scope scope$,
  ChannelBuffers target$,
) =>
    target$.handleMessage;
Function _ChannelBuffers_resize$(
  m.Scope scope$,
  ChannelBuffers target$,
) =>
    target$.resize;
Function _ChannelBuffers_allowOverflow$(
  m.Scope scope$,
  ChannelBuffers target$,
) =>
    target$.allowOverflow;
Function Scene_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Scene;
Function Scene_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Scene;
Function _Scene_toImageSync$(
  m.Scope scope$,
  Scene target$,
) =>
    target$.toImageSync;
Function _Scene_toImage$(
  m.Scope scope$,
  Scene target$,
) =>
    target$.toImage;
Function _Scene_dispose$(
  m.Scope scope$,
  Scene target$,
) =>
    target$.dispose;
Function TransformEngineLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TransformEngineLayer;
Function TransformEngineLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TransformEngineLayer;
Function OffsetEngineLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as OffsetEngineLayer;
Function OffsetEngineLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is OffsetEngineLayer;
Function ClipRectEngineLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ClipRectEngineLayer;
Function ClipRectEngineLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ClipRectEngineLayer;
Function ClipRRectEngineLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ClipRRectEngineLayer;
Function ClipRRectEngineLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ClipRRectEngineLayer;
Function ClipPathEngineLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ClipPathEngineLayer;
Function ClipPathEngineLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ClipPathEngineLayer;
Function OpacityEngineLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as OpacityEngineLayer;
Function OpacityEngineLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is OpacityEngineLayer;
Function ColorFilterEngineLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ColorFilterEngineLayer;
Function ColorFilterEngineLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ColorFilterEngineLayer;
Function ImageFilterEngineLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ImageFilterEngineLayer;
Function ImageFilterEngineLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ImageFilterEngineLayer;
Function BackdropFilterEngineLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as BackdropFilterEngineLayer;
Function BackdropFilterEngineLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is BackdropFilterEngineLayer;
Function ShaderMaskEngineLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ShaderMaskEngineLayer;
Function ShaderMaskEngineLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ShaderMaskEngineLayer;
Function PhysicalShapeEngineLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PhysicalShapeEngineLayer;
Function PhysicalShapeEngineLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PhysicalShapeEngineLayer;
Function SceneBuilder_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SceneBuilder;
Function SceneBuilder_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SceneBuilder;
Function _SceneBuilder__$(m.Scope scope$) => () {
      return SceneBuilder();
    };
Function _SceneBuilder_pushTransform$(
  m.Scope scope$,
  SceneBuilder target$,
) =>
    target$.pushTransform;
Function _SceneBuilder_pushOffset$(
  m.Scope scope$,
  SceneBuilder target$,
) =>
    target$.pushOffset;
Function _SceneBuilder_pushClipRect$(
  m.Scope scope$,
  SceneBuilder target$,
) =>
    target$.pushClipRect;
Function _SceneBuilder_pushClipRRect$(
  m.Scope scope$,
  SceneBuilder target$,
) =>
    target$.pushClipRRect;
Function _SceneBuilder_pushClipPath$(
  m.Scope scope$,
  SceneBuilder target$,
) =>
    target$.pushClipPath;
Function _SceneBuilder_pushOpacity$(
  m.Scope scope$,
  SceneBuilder target$,
) =>
    target$.pushOpacity;
Function _SceneBuilder_pushColorFilter$(
  m.Scope scope$,
  SceneBuilder target$,
) =>
    target$.pushColorFilter;
Function _SceneBuilder_pushImageFilter$(
  m.Scope scope$,
  SceneBuilder target$,
) =>
    target$.pushImageFilter;
Function _SceneBuilder_pushBackdropFilter$(
  m.Scope scope$,
  SceneBuilder target$,
) =>
    target$.pushBackdropFilter;
Function _SceneBuilder_pushShaderMask$(
  m.Scope scope$,
  SceneBuilder target$,
) =>
    target$.pushShaderMask;
Function _SceneBuilder_pop$(
  m.Scope scope$,
  SceneBuilder target$,
) =>
    target$.pop;
Function _SceneBuilder_addRetained$(
  m.Scope scope$,
  SceneBuilder target$,
) =>
    target$.addRetained;
Function _SceneBuilder_addPerformanceOverlay$(
  m.Scope scope$,
  SceneBuilder target$,
) =>
    target$.addPerformanceOverlay;
Function _SceneBuilder_addPicture$(
  m.Scope scope$,
  SceneBuilder target$,
) =>
    target$.addPicture;
Function _SceneBuilder_addTexture$(
  m.Scope scope$,
  SceneBuilder target$,
) =>
    target$.addTexture;
Function _SceneBuilder_addPlatformView$(
  m.Scope scope$,
  SceneBuilder target$,
) =>
    target$.addPlatformView;
Function _SceneBuilder_setRasterizerTracingThreshold$(
  m.Scope scope$,
  SceneBuilder target$,
) =>
    target$.setRasterizerTracingThreshold;
Function _SceneBuilder_setCheckerboardRasterCacheImages$(
  m.Scope scope$,
  SceneBuilder target$,
) =>
    target$.setCheckerboardRasterCacheImages;
Function _SceneBuilder_setCheckerboardOffscreenLayers$(
  m.Scope scope$,
  SceneBuilder target$,
) =>
    target$.setCheckerboardOffscreenLayers;
Function _SceneBuilder_build$(
  m.Scope scope$,
  SceneBuilder target$,
) =>
    target$.build;
Function OffsetBase_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as OffsetBase;
Function OffsetBase_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is OffsetBase;
Function _OffsetBase_isInfinite$(
  m.Scope scope$,
  OffsetBase target$,
) =>
    () {
      return target$.isInfinite;
    };
Function _OffsetBase_isFinite$(
  m.Scope scope$,
  OffsetBase target$,
) =>
    () {
      return target$.isFinite;
    };
Function _OffsetBase_hashCode$(
  m.Scope scope$,
  OffsetBase target$,
) =>
    () {
      return target$.hashCode;
    };
Function _OffsetBase_low$$(
  m.Scope scope$,
  OffsetBase target$,
) =>
    (OffsetBase other$) => target$ < other$;
Function _OffsetBase_low_eq$$(
  m.Scope scope$,
  OffsetBase target$,
) =>
    (OffsetBase other$) => target$ <= other$;
Function _OffsetBase_more$$(
  m.Scope scope$,
  OffsetBase target$,
) =>
    (OffsetBase other$) => target$ > other$;
Function _OffsetBase_more_eq$$(
  m.Scope scope$,
  OffsetBase target$,
) =>
    (OffsetBase other$) => target$ >= other$;
Function _OffsetBase_eq$$(
  m.Scope scope$,
  OffsetBase target$,
) =>
    (Object other$) => target$ == other$;
Function _OffsetBase_toString$(
  m.Scope scope$,
  OffsetBase target$,
) =>
    target$.toString;
Function Offset_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Offset;
Function Offset_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Offset;
Offset _Offset_zero$() {
  return Offset.zero;
}

Offset _Offset_infinite$() {
  return Offset.infinite;
}

Function _Offset_dx$(
  m.Scope scope$,
  Offset target$,
) =>
    () {
      return target$.dx;
    };
Function _Offset_dy$(
  m.Scope scope$,
  Offset target$,
) =>
    () {
      return target$.dy;
    };
Function _Offset_distance$(
  m.Scope scope$,
  Offset target$,
) =>
    () {
      return target$.distance;
    };
Function _Offset_distanceSquared$(
  m.Scope scope$,
  Offset target$,
) =>
    () {
      return target$.distanceSquared;
    };
Function _Offset_direction$(
  m.Scope scope$,
  Offset target$,
) =>
    () {
      return target$.direction;
    };
Function _Offset_hashCode$(
  m.Scope scope$,
  Offset target$,
) =>
    () {
      return target$.hashCode;
    };
Function _Offset__$(m.Scope scope$) => (
      double dx,
      double dy,
    ) {
      return Offset(
        dx,
        dy,
      );
    };
Function _Offset_fromDirection_$(m.Scope scope$) => Offset.fromDirection;
Function _Offset_scale$(
  m.Scope scope$,
  Offset target$,
) =>
    target$.scale;
Function _Offset_translate$(
  m.Scope scope$,
  Offset target$,
) =>
    target$.translate;
Function _Offset_unary_minus$$(
  m.Scope scope$,
  Offset target$,
) =>
    () => -target$;
Function _Offset_minus$$(
  m.Scope scope$,
  Offset target$,
) =>
    (Offset other$) => target$ - other$;
Function _Offset_plus$$(
  m.Scope scope$,
  Offset target$,
) =>
    (Offset other$) => target$ + other$;
Function _Offset_times$$(
  m.Scope scope$,
  Offset target$,
) =>
    (double other$) => target$ * other$;
Function _Offset_over$$(
  m.Scope scope$,
  Offset target$,
) =>
    (double other$) => target$ / other$;
Function _Offset_division$$(
  m.Scope scope$,
  Offset target$,
) =>
    (double other$) => target$ ~/ other$;
Function _Offset_surplus$$(
  m.Scope scope$,
  Offset target$,
) =>
    (double other$) => target$ % other$;
Function _Offset_bit_and$$(
  m.Scope scope$,
  Offset target$,
) =>
    (Size other$) => target$ & other$;
Function _Offset_lerp$(m.Scope scope$) => Offset.lerp;
Function _Offset_eq$$(
  m.Scope scope$,
  Offset target$,
) =>
    (Object other$) => target$ == other$;
Function _Offset_toString$(
  m.Scope scope$,
  Offset target$,
) =>
    target$.toString;
Function Size_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Size;
Function Size_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Size;
Size _Size_zero$() {
  return Size.zero;
}

Size _Size_infinite$() {
  return Size.infinite;
}

Function _Size_width$(
  m.Scope scope$,
  Size target$,
) =>
    () {
      return target$.width;
    };
Function _Size_height$(
  m.Scope scope$,
  Size target$,
) =>
    () {
      return target$.height;
    };
Function _Size_aspectRatio$(
  m.Scope scope$,
  Size target$,
) =>
    () {
      return target$.aspectRatio;
    };
Function _Size_isEmpty$(
  m.Scope scope$,
  Size target$,
) =>
    () {
      return target$.isEmpty;
    };
Function _Size_shortestSide$(
  m.Scope scope$,
  Size target$,
) =>
    () {
      return target$.shortestSide;
    };
Function _Size_longestSide$(
  m.Scope scope$,
  Size target$,
) =>
    () {
      return target$.longestSide;
    };
Function _Size_flipped$(
  m.Scope scope$,
  Size target$,
) =>
    () {
      return target$.flipped;
    };
Function _Size_hashCode$(
  m.Scope scope$,
  Size target$,
) =>
    () {
      return target$.hashCode;
    };
Function _Size__$(m.Scope scope$) => (
      double width,
      double height,
    ) {
      return Size(
        width,
        height,
      );
    };
Function _Size_copy_$(m.Scope scope$) => Size.copy;
Function _Size_square_$(m.Scope scope$) => Size.square;
Function _Size_fromWidth_$(m.Scope scope$) => Size.fromWidth;
Function _Size_fromHeight_$(m.Scope scope$) => Size.fromHeight;
Function _Size_fromRadius_$(m.Scope scope$) => Size.fromRadius;
Function _Size_minus$$(
  m.Scope scope$,
  Size target$,
) =>
    (OffsetBase other$) => target$ - other$;
Function _Size_plus$$(
  m.Scope scope$,
  Size target$,
) =>
    (Offset other$) => target$ + other$;
Function _Size_times$$(
  m.Scope scope$,
  Size target$,
) =>
    (double other$) => target$ * other$;
Function _Size_over$$(
  m.Scope scope$,
  Size target$,
) =>
    (double other$) => target$ / other$;
Function _Size_division$$(
  m.Scope scope$,
  Size target$,
) =>
    (double other$) => target$ ~/ other$;
Function _Size_surplus$$(
  m.Scope scope$,
  Size target$,
) =>
    (double other$) => target$ % other$;
Function _Size_topLeft$(
  m.Scope scope$,
  Size target$,
) =>
    target$.topLeft;
Function _Size_topCenter$(
  m.Scope scope$,
  Size target$,
) =>
    target$.topCenter;
Function _Size_topRight$(
  m.Scope scope$,
  Size target$,
) =>
    target$.topRight;
Function _Size_centerLeft$(
  m.Scope scope$,
  Size target$,
) =>
    target$.centerLeft;
Function _Size_center$(
  m.Scope scope$,
  Size target$,
) =>
    target$.center;
Function _Size_centerRight$(
  m.Scope scope$,
  Size target$,
) =>
    target$.centerRight;
Function _Size_bottomLeft$(
  m.Scope scope$,
  Size target$,
) =>
    target$.bottomLeft;
Function _Size_bottomCenter$(
  m.Scope scope$,
  Size target$,
) =>
    target$.bottomCenter;
Function _Size_bottomRight$(
  m.Scope scope$,
  Size target$,
) =>
    target$.bottomRight;
Function _Size_contains$(
  m.Scope scope$,
  Size target$,
) =>
    target$.contains;
Function _Size_lerp$(m.Scope scope$) => Size.lerp;
Function _Size_eq$$(
  m.Scope scope$,
  Size target$,
) =>
    (Object other$) => target$ == other$;
Function _Size_toString$(
  m.Scope scope$,
  Size target$,
) =>
    target$.toString;
Function Rect_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Rect;
Function Rect_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Rect;
Function _Rect_left$(
  m.Scope scope$,
  Rect target$,
) =>
    () {
      return target$.left;
    };
Function _Rect_top$(
  m.Scope scope$,
  Rect target$,
) =>
    () {
      return target$.top;
    };
Function _Rect_right$(
  m.Scope scope$,
  Rect target$,
) =>
    () {
      return target$.right;
    };
Function _Rect_bottom$(
  m.Scope scope$,
  Rect target$,
) =>
    () {
      return target$.bottom;
    };
Rect _Rect_zero$() {
  return Rect.zero;
}

Rect _Rect_largest$() {
  return Rect.largest;
}

Function _Rect_width$(
  m.Scope scope$,
  Rect target$,
) =>
    () {
      return target$.width;
    };
Function _Rect_height$(
  m.Scope scope$,
  Rect target$,
) =>
    () {
      return target$.height;
    };
Function _Rect_size$(
  m.Scope scope$,
  Rect target$,
) =>
    () {
      return target$.size;
    };
Function _Rect_hasNaN$(
  m.Scope scope$,
  Rect target$,
) =>
    () {
      return target$.hasNaN;
    };
Function _Rect_isInfinite$(
  m.Scope scope$,
  Rect target$,
) =>
    () {
      return target$.isInfinite;
    };
Function _Rect_isFinite$(
  m.Scope scope$,
  Rect target$,
) =>
    () {
      return target$.isFinite;
    };
Function _Rect_isEmpty$(
  m.Scope scope$,
  Rect target$,
) =>
    () {
      return target$.isEmpty;
    };
Function _Rect_shortestSide$(
  m.Scope scope$,
  Rect target$,
) =>
    () {
      return target$.shortestSide;
    };
Function _Rect_longestSide$(
  m.Scope scope$,
  Rect target$,
) =>
    () {
      return target$.longestSide;
    };
Function _Rect_topLeft$(
  m.Scope scope$,
  Rect target$,
) =>
    () {
      return target$.topLeft;
    };
Function _Rect_topCenter$(
  m.Scope scope$,
  Rect target$,
) =>
    () {
      return target$.topCenter;
    };
Function _Rect_topRight$(
  m.Scope scope$,
  Rect target$,
) =>
    () {
      return target$.topRight;
    };
Function _Rect_centerLeft$(
  m.Scope scope$,
  Rect target$,
) =>
    () {
      return target$.centerLeft;
    };
Function _Rect_center$(
  m.Scope scope$,
  Rect target$,
) =>
    () {
      return target$.center;
    };
Function _Rect_centerRight$(
  m.Scope scope$,
  Rect target$,
) =>
    () {
      return target$.centerRight;
    };
Function _Rect_bottomLeft$(
  m.Scope scope$,
  Rect target$,
) =>
    () {
      return target$.bottomLeft;
    };
Function _Rect_bottomCenter$(
  m.Scope scope$,
  Rect target$,
) =>
    () {
      return target$.bottomCenter;
    };
Function _Rect_bottomRight$(
  m.Scope scope$,
  Rect target$,
) =>
    () {
      return target$.bottomRight;
    };
Function _Rect_hashCode$(
  m.Scope scope$,
  Rect target$,
) =>
    () {
      return target$.hashCode;
    };
Function _Rect_fromLTRB_$(m.Scope scope$) => Rect.fromLTRB;
Function _Rect_fromLTWH_$(m.Scope scope$) => Rect.fromLTWH;
Function _Rect_fromCircle_$(m.Scope scope$) => Rect.fromCircle;
Function _Rect_fromCenter_$(m.Scope scope$) => Rect.fromCenter;
Function _Rect_fromPoints_$(m.Scope scope$) => Rect.fromPoints;
Function _Rect_shift$(
  m.Scope scope$,
  Rect target$,
) =>
    target$.shift;
Function _Rect_translate$(
  m.Scope scope$,
  Rect target$,
) =>
    target$.translate;
Function _Rect_inflate$(
  m.Scope scope$,
  Rect target$,
) =>
    target$.inflate;
Function _Rect_deflate$(
  m.Scope scope$,
  Rect target$,
) =>
    target$.deflate;
Function _Rect_intersect$(
  m.Scope scope$,
  Rect target$,
) =>
    target$.intersect;
Function _Rect_expandToInclude$(
  m.Scope scope$,
  Rect target$,
) =>
    target$.expandToInclude;
Function _Rect_overlaps$(
  m.Scope scope$,
  Rect target$,
) =>
    target$.overlaps;
Function _Rect_contains$(
  m.Scope scope$,
  Rect target$,
) =>
    target$.contains;
Function _Rect_lerp$(m.Scope scope$) => Rect.lerp;
Function _Rect_eq$$(
  m.Scope scope$,
  Rect target$,
) =>
    (Object other$) => target$ == other$;
Function _Rect_toString$(
  m.Scope scope$,
  Rect target$,
) =>
    target$.toString;
Function Radius_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Radius;
Function Radius_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Radius;
Function _Radius_x$(
  m.Scope scope$,
  Radius target$,
) =>
    () {
      return target$.x;
    };
Function _Radius_y$(
  m.Scope scope$,
  Radius target$,
) =>
    () {
      return target$.y;
    };
Radius _Radius_zero$() {
  return Radius.zero;
}

Function _Radius_hashCode$(
  m.Scope scope$,
  Radius target$,
) =>
    () {
      return target$.hashCode;
    };
Function _Radius_circular_$(m.Scope scope$) => Radius.circular;
Function _Radius_elliptical_$(m.Scope scope$) => Radius.elliptical;
Function _Radius_clamp$(
  m.Scope scope$,
  Radius target$,
) =>
    target$.clamp;
Function _Radius_clampValues$(
  m.Scope scope$,
  Radius target$,
) =>
    target$.clampValues;
Function _Radius_unary_minus$$(
  m.Scope scope$,
  Radius target$,
) =>
    () => -target$;
Function _Radius_minus$$(
  m.Scope scope$,
  Radius target$,
) =>
    (Radius other$) => target$ - other$;
Function _Radius_plus$$(
  m.Scope scope$,
  Radius target$,
) =>
    (Radius other$) => target$ + other$;
Function _Radius_times$$(
  m.Scope scope$,
  Radius target$,
) =>
    (double other$) => target$ * other$;
Function _Radius_over$$(
  m.Scope scope$,
  Radius target$,
) =>
    (double other$) => target$ / other$;
Function _Radius_division$$(
  m.Scope scope$,
  Radius target$,
) =>
    (double other$) => target$ ~/ other$;
Function _Radius_surplus$$(
  m.Scope scope$,
  Radius target$,
) =>
    (double other$) => target$ % other$;
Function _Radius_lerp$(m.Scope scope$) => Radius.lerp;
Function _Radius_eq$$(
  m.Scope scope$,
  Radius target$,
) =>
    (Object other$) => target$ == other$;
Function _Radius_toString$(
  m.Scope scope$,
  Radius target$,
) =>
    target$.toString;
Function RRect_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RRect;
Function RRect_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RRect;
Function _RRect_left$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.left;
    };
Function _RRect_top$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.top;
    };
Function _RRect_right$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.right;
    };
Function _RRect_bottom$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.bottom;
    };
Function _RRect_tlRadiusX$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.tlRadiusX;
    };
Function _RRect_tlRadiusY$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.tlRadiusY;
    };
Function _RRect_trRadiusX$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.trRadiusX;
    };
Function _RRect_trRadiusY$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.trRadiusY;
    };
Function _RRect_brRadiusX$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.brRadiusX;
    };
Function _RRect_brRadiusY$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.brRadiusY;
    };
Function _RRect_blRadiusX$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.blRadiusX;
    };
Function _RRect_blRadiusY$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.blRadiusY;
    };
RRect _RRect_zero$() {
  return RRect.zero;
}

Function _RRect_tlRadius$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.tlRadius;
    };
Function _RRect_trRadius$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.trRadius;
    };
Function _RRect_brRadius$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.brRadius;
    };
Function _RRect_blRadius$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.blRadius;
    };
Function _RRect_width$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.width;
    };
Function _RRect_height$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.height;
    };
Function _RRect_outerRect$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.outerRect;
    };
Function _RRect_safeInnerRect$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.safeInnerRect;
    };
Function _RRect_middleRect$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.middleRect;
    };
Function _RRect_wideMiddleRect$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.wideMiddleRect;
    };
Function _RRect_tallMiddleRect$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.tallMiddleRect;
    };
Function _RRect_isEmpty$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.isEmpty;
    };
Function _RRect_isFinite$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.isFinite;
    };
Function _RRect_isRect$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.isRect;
    };
Function _RRect_isStadium$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.isStadium;
    };
Function _RRect_isEllipse$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.isEllipse;
    };
Function _RRect_isCircle$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.isCircle;
    };
Function _RRect_shortestSide$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.shortestSide;
    };
Function _RRect_longestSide$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.longestSide;
    };
Function _RRect_hasNaN$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.hasNaN;
    };
Function _RRect_center$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.center;
    };
Function _RRect_hashCode$(
  m.Scope scope$,
  RRect target$,
) =>
    () {
      return target$.hashCode;
    };
Function _RRect_fromLTRBXY_$(m.Scope scope$) => RRect.fromLTRBXY;
Function _RRect_fromLTRBR_$(m.Scope scope$) => RRect.fromLTRBR;
Function _RRect_fromRectXY_$(m.Scope scope$) => RRect.fromRectXY;
Function _RRect_fromRectAndRadius_$(m.Scope scope$) => RRect.fromRectAndRadius;
Function _RRect_fromLTRBAndCorners_$(m.Scope scope$) =>
    RRect.fromLTRBAndCorners;
Function _RRect_fromRectAndCorners_$(m.Scope scope$) =>
    RRect.fromRectAndCorners;
Function _RRect_shift$(
  m.Scope scope$,
  RRect target$,
) =>
    target$.shift;
Function _RRect_inflate$(
  m.Scope scope$,
  RRect target$,
) =>
    target$.inflate;
Function _RRect_deflate$(
  m.Scope scope$,
  RRect target$,
) =>
    target$.deflate;
Function _RRect_scaleRadii$(
  m.Scope scope$,
  RRect target$,
) =>
    target$.scaleRadii;
Function _RRect_contains$(
  m.Scope scope$,
  RRect target$,
) =>
    target$.contains;
Function _RRect_lerp$(m.Scope scope$) => RRect.lerp;
Function _RRect_eq$$(
  m.Scope scope$,
  RRect target$,
) =>
    (Object other$) => target$ == other$;
Function _RRect_toString$(
  m.Scope scope$,
  RRect target$,
) =>
    target$.toString;
Function RSTransform_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RSTransform;
Function RSTransform_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RSTransform;
Function _RSTransform_scos$(
  m.Scope scope$,
  RSTransform target$,
) =>
    () {
      return target$.scos;
    };
Function _RSTransform_ssin$(
  m.Scope scope$,
  RSTransform target$,
) =>
    () {
      return target$.ssin;
    };
Function _RSTransform_tx$(
  m.Scope scope$,
  RSTransform target$,
) =>
    () {
      return target$.tx;
    };
Function _RSTransform_ty$(
  m.Scope scope$,
  RSTransform target$,
) =>
    () {
      return target$.ty;
    };
Function _RSTransform__$(m.Scope scope$) => (
      double scos,
      double ssin,
      double tx,
      double ty,
    ) {
      return RSTransform(
        scos,
        ssin,
        tx,
        ty,
      );
    };
Function _RSTransform_fromComponents_$(m.Scope scope$) =>
    RSTransform.fromComponents;
Function IsolateNameServer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as IsolateNameServer;
Function IsolateNameServer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is IsolateNameServer;
Function _IsolateNameServer_lookupPortByName$(m.Scope scope$) =>
    IsolateNameServer.lookupPortByName;
Function _IsolateNameServer_registerPortWithName$(m.Scope scope$) =>
    IsolateNameServer.registerPortWithName;
Function _IsolateNameServer_removePortNameMapping$(m.Scope scope$) =>
    IsolateNameServer.removePortNameMapping;
Function KeyData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as KeyData;
Function KeyData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is KeyData;
Function _KeyData_timeStamp$(
  m.Scope scope$,
  KeyData target$,
) =>
    () {
      return target$.timeStamp;
    };
Function _KeyData_type$(
  m.Scope scope$,
  KeyData target$,
) =>
    () {
      return target$.type;
    };
Function _KeyData_physical$(
  m.Scope scope$,
  KeyData target$,
) =>
    () {
      return target$.physical;
    };
Function _KeyData_logical$(
  m.Scope scope$,
  KeyData target$,
) =>
    () {
      return target$.logical;
    };
Function _KeyData_character$(
  m.Scope scope$,
  KeyData target$,
) =>
    () {
      return target$.character;
    };
Function _KeyData_synthesized$(
  m.Scope scope$,
  KeyData target$,
) =>
    () {
      return target$.synthesized;
    };
Function _KeyData__$(m.Scope scope$) => ({
      required Duration timeStamp,
      required KeyEventType type,
      required int physical,
      required int logical,
      required String? character,
      required bool synthesized,
    }) {
      return KeyData(
        character: character,
        logical: logical,
        physical: physical,
        synthesized: synthesized,
        timeStamp: timeStamp,
        type: type,
      );
    };
Function _KeyData_toString$(
  m.Scope scope$,
  KeyData target$,
) =>
    target$.toString;
Function _KeyData_toStringFull$(
  m.Scope scope$,
  KeyData target$,
) =>
    target$.toStringFull;
KeyEventType _KeyEventType_down$() {
  return KeyEventType.down;
}

KeyEventType _KeyEventType_up$() {
  return KeyEventType.up;
}

KeyEventType _KeyEventType_repeat$() {
  return KeyEventType.repeat;
}

List<KeyEventType> _KeyEventType_values$() {
  return KeyEventType.values;
}

Function _lerpDouble$(m.Scope scope$) => lerpDouble;
Function _clampDouble$(m.Scope scope$) => clampDouble;
Function DartPluginRegistrant_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DartPluginRegistrant;
Function DartPluginRegistrant_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DartPluginRegistrant;
Function _DartPluginRegistrant_ensureInitialized$(m.Scope scope$) =>
    DartPluginRegistrant.ensureInitialized;
Function _saveCompilationTrace$(m.Scope scope$) => saveCompilationTrace;
Function Color_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Color;
Function Color_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Color;
Function _Color_value$(
  m.Scope scope$,
  Color target$,
) =>
    () {
      return target$.value;
    };
Function _Color_alpha$(
  m.Scope scope$,
  Color target$,
) =>
    () {
      return target$.alpha;
    };
Function _Color_opacity$(
  m.Scope scope$,
  Color target$,
) =>
    () {
      return target$.opacity;
    };
Function _Color_red$(
  m.Scope scope$,
  Color target$,
) =>
    () {
      return target$.red;
    };
Function _Color_green$(
  m.Scope scope$,
  Color target$,
) =>
    () {
      return target$.green;
    };
Function _Color_blue$(
  m.Scope scope$,
  Color target$,
) =>
    () {
      return target$.blue;
    };
Function _Color_hashCode$(
  m.Scope scope$,
  Color target$,
) =>
    () {
      return target$.hashCode;
    };
Function _Color__$(m.Scope scope$) => (int value) {
      return Color(value);
    };
Function _Color_fromARGB_$(m.Scope scope$) => Color.fromARGB;
Function _Color_fromRGBO_$(m.Scope scope$) => Color.fromRGBO;
Function _Color_withAlpha$(
  m.Scope scope$,
  Color target$,
) =>
    target$.withAlpha;
Function _Color_withOpacity$(
  m.Scope scope$,
  Color target$,
) =>
    target$.withOpacity;
Function _Color_withRed$(
  m.Scope scope$,
  Color target$,
) =>
    target$.withRed;
Function _Color_withGreen$(
  m.Scope scope$,
  Color target$,
) =>
    target$.withGreen;
Function _Color_withBlue$(
  m.Scope scope$,
  Color target$,
) =>
    target$.withBlue;
Function _Color_computeLuminance$(
  m.Scope scope$,
  Color target$,
) =>
    target$.computeLuminance;
Function _Color_lerp$(m.Scope scope$) => Color.lerp;
Function _Color_alphaBlend$(m.Scope scope$) => Color.alphaBlend;
Function _Color_getAlphaFromOpacity$(m.Scope scope$) =>
    Color.getAlphaFromOpacity;
Function _Color_eq$$(
  m.Scope scope$,
  Color target$,
) =>
    (Object other$) => target$ == other$;
Function _Color_toString$(
  m.Scope scope$,
  Color target$,
) =>
    target$.toString;
Function Paint_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Paint;
Function Paint_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Paint;
bool _Paint_enableDithering$() {
  return Paint.enableDithering;
}

void _Paint_enableDithering_set$(bool other$) {
  Paint.enableDithering = other$;
}

Function _Paint_isAntiAlias$(
  m.Scope scope$,
  Paint target$,
) =>
    () {
      return target$.isAntiAlias;
    };
void _Paint_isAntiAlias_set$(
  m.Scope scope$,
  Paint target$,
) =>
    (dynamic other$) {
      target$.isAntiAlias = other$;
    };
Function _Paint_color$(
  m.Scope scope$,
  Paint target$,
) =>
    () {
      return target$.color;
    };
void _Paint_color_set$(
  m.Scope scope$,
  Paint target$,
) =>
    (dynamic other$) {
      target$.color = other$;
    };
Function _Paint_blendMode$(
  m.Scope scope$,
  Paint target$,
) =>
    () {
      return target$.blendMode;
    };
void _Paint_blendMode_set$(
  m.Scope scope$,
  Paint target$,
) =>
    (dynamic other$) {
      target$.blendMode = other$;
    };
Function _Paint_style$(
  m.Scope scope$,
  Paint target$,
) =>
    () {
      return target$.style;
    };
void _Paint_style_set$(
  m.Scope scope$,
  Paint target$,
) =>
    (dynamic other$) {
      target$.style = other$;
    };
Function _Paint_strokeWidth$(
  m.Scope scope$,
  Paint target$,
) =>
    () {
      return target$.strokeWidth;
    };
void _Paint_strokeWidth_set$(
  m.Scope scope$,
  Paint target$,
) =>
    (dynamic other$) {
      target$.strokeWidth = other$;
    };
Function _Paint_strokeCap$(
  m.Scope scope$,
  Paint target$,
) =>
    () {
      return target$.strokeCap;
    };
void _Paint_strokeCap_set$(
  m.Scope scope$,
  Paint target$,
) =>
    (dynamic other$) {
      target$.strokeCap = other$;
    };
Function _Paint_strokeJoin$(
  m.Scope scope$,
  Paint target$,
) =>
    () {
      return target$.strokeJoin;
    };
void _Paint_strokeJoin_set$(
  m.Scope scope$,
  Paint target$,
) =>
    (dynamic other$) {
      target$.strokeJoin = other$;
    };
Function _Paint_strokeMiterLimit$(
  m.Scope scope$,
  Paint target$,
) =>
    () {
      return target$.strokeMiterLimit;
    };
void _Paint_strokeMiterLimit_set$(
  m.Scope scope$,
  Paint target$,
) =>
    (dynamic other$) {
      target$.strokeMiterLimit = other$;
    };
Function _Paint_maskFilter$(
  m.Scope scope$,
  Paint target$,
) =>
    () {
      return target$.maskFilter;
    };
void _Paint_maskFilter_set$(
  m.Scope scope$,
  Paint target$,
) =>
    (dynamic other$) {
      target$.maskFilter = other$;
    };
Function _Paint_filterQuality$(
  m.Scope scope$,
  Paint target$,
) =>
    () {
      return target$.filterQuality;
    };
void _Paint_filterQuality_set$(
  m.Scope scope$,
  Paint target$,
) =>
    (dynamic other$) {
      target$.filterQuality = other$;
    };
Function _Paint_shader$(
  m.Scope scope$,
  Paint target$,
) =>
    () {
      return target$.shader;
    };
void _Paint_shader_set$(
  m.Scope scope$,
  Paint target$,
) =>
    (dynamic other$) {
      target$.shader = other$;
    };
Function _Paint_colorFilter$(
  m.Scope scope$,
  Paint target$,
) =>
    () {
      return target$.colorFilter;
    };
void _Paint_colorFilter_set$(
  m.Scope scope$,
  Paint target$,
) =>
    (dynamic other$) {
      target$.colorFilter = other$;
    };
Function _Paint_imageFilter$(
  m.Scope scope$,
  Paint target$,
) =>
    () {
      return target$.imageFilter;
    };
void _Paint_imageFilter_set$(
  m.Scope scope$,
  Paint target$,
) =>
    (dynamic other$) {
      target$.imageFilter = other$;
    };
Function _Paint_invertColors$(
  m.Scope scope$,
  Paint target$,
) =>
    () {
      return target$.invertColors;
    };
void _Paint_invertColors_set$(
  m.Scope scope$,
  Paint target$,
) =>
    (dynamic other$) {
      target$.invertColors = other$;
    };
Function _Paint__$(m.Scope scope$) => () {
      return Paint();
    };
Function _Paint_toString$(
  m.Scope scope$,
  Paint target$,
) =>
    target$.toString;
Function Image_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Image;
Function Image_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Image;
void Function(Image)? _Image_onCreate$() {
  return Image.onCreate;
}

Function _Image_onCreate_set$(m.Scope scope$) =>
    (m.FunctionPointer? _onCreate) {
      void _onCreateProxy(Image _onCreate_image$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            _onCreate!,
            [_onCreate_image$],
            {},
          );
      Image.onCreate = (_onCreate == null ? null : _onCreateProxy);
    };
void Function(Image)? _Image_onDispose$() {
  return Image.onDispose;
}

Function _Image_onDispose_set$(m.Scope scope$) =>
    (m.FunctionPointer? _onDispose) {
      void _onDisposeProxy(Image _onDispose_image$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            _onDispose!,
            [_onDispose_image$],
            {},
          );
      Image.onDispose = (_onDispose == null ? null : _onDisposeProxy);
    };
Function _Image_width$(
  m.Scope scope$,
  Image target$,
) =>
    () {
      return target$.width;
    };
Function _Image_height$(
  m.Scope scope$,
  Image target$,
) =>
    () {
      return target$.height;
    };
Function _Image_debugDisposed$(
  m.Scope scope$,
  Image target$,
) =>
    () {
      return target$.debugDisposed;
    };
Function _Image_colorSpace$(
  m.Scope scope$,
  Image target$,
) =>
    () {
      return target$.colorSpace;
    };
Function _Image_dispose$(
  m.Scope scope$,
  Image target$,
) =>
    target$.dispose;
Function _Image_toByteData$(
  m.Scope scope$,
  Image target$,
) =>
    target$.toByteData;
Function _Image_debugGetOpenHandleStackTraces$(
  m.Scope scope$,
  Image target$,
) =>
    target$.debugGetOpenHandleStackTraces;
Function _Image_clone$(
  m.Scope scope$,
  Image target$,
) =>
    target$.clone;
Function _Image_isCloneOf$(
  m.Scope scope$,
  Image target$,
) =>
    target$.isCloneOf;
Function _Image_toString$(
  m.Scope scope$,
  Image target$,
) =>
    target$.toString;
Function FrameInfo_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FrameInfo;
Function FrameInfo_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FrameInfo;
Function _FrameInfo_duration$(
  m.Scope scope$,
  FrameInfo target$,
) =>
    () {
      return target$.duration;
    };
Function _FrameInfo_image$(
  m.Scope scope$,
  FrameInfo target$,
) =>
    () {
      return target$.image;
    };
Function Codec_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Codec;
Function Codec_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Codec;
Function _Codec_frameCount$(
  m.Scope scope$,
  Codec target$,
) =>
    () {
      return target$.frameCount;
    };
Function _Codec_repetitionCount$(
  m.Scope scope$,
  Codec target$,
) =>
    () {
      return target$.repetitionCount;
    };
Function _Codec_getNextFrame$(
  m.Scope scope$,
  Codec target$,
) =>
    target$.getNextFrame;
Function _Codec_dispose$(
  m.Scope scope$,
  Codec target$,
) =>
    target$.dispose;
Function TargetImageSize_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TargetImageSize;
Function TargetImageSize_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TargetImageSize;
Function _TargetImageSize_width$(
  m.Scope scope$,
  TargetImageSize target$,
) =>
    () {
      return target$.width;
    };
Function _TargetImageSize_height$(
  m.Scope scope$,
  TargetImageSize target$,
) =>
    () {
      return target$.height;
    };
Function _TargetImageSize__$(m.Scope scope$) => ({
      int? width,
      int? height,
    }) {
      return TargetImageSize(
        height: height,
        width: width,
      );
    };
Function _TargetImageSize_toString$(
  m.Scope scope$,
  TargetImageSize target$,
) =>
    target$.toString;
Function EngineLayer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as EngineLayer;
Function EngineLayer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is EngineLayer;
Function _EngineLayer_dispose$(
  m.Scope scope$,
  EngineLayer target$,
) =>
    target$.dispose;
Function Path_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Path;
Function Path_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Path;
Function _Path_fillType$(
  m.Scope scope$,
  Path target$,
) =>
    () {
      return target$.fillType;
    };
void _Path_fillType_set$(
  m.Scope scope$,
  Path target$,
) =>
    (dynamic other$) {
      target$.fillType = other$;
    };
Function _Path__$(m.Scope scope$) => () {
      return Path();
    };
Function _Path_from_$(m.Scope scope$) => Path.from;
Function _Path_moveTo$(
  m.Scope scope$,
  Path target$,
) =>
    target$.moveTo;
Function _Path_relativeMoveTo$(
  m.Scope scope$,
  Path target$,
) =>
    target$.relativeMoveTo;
Function _Path_lineTo$(
  m.Scope scope$,
  Path target$,
) =>
    target$.lineTo;
Function _Path_relativeLineTo$(
  m.Scope scope$,
  Path target$,
) =>
    target$.relativeLineTo;
Function _Path_quadraticBezierTo$(
  m.Scope scope$,
  Path target$,
) =>
    target$.quadraticBezierTo;
Function _Path_relativeQuadraticBezierTo$(
  m.Scope scope$,
  Path target$,
) =>
    target$.relativeQuadraticBezierTo;
Function _Path_cubicTo$(
  m.Scope scope$,
  Path target$,
) =>
    target$.cubicTo;
Function _Path_relativeCubicTo$(
  m.Scope scope$,
  Path target$,
) =>
    target$.relativeCubicTo;
Function _Path_conicTo$(
  m.Scope scope$,
  Path target$,
) =>
    target$.conicTo;
Function _Path_relativeConicTo$(
  m.Scope scope$,
  Path target$,
) =>
    target$.relativeConicTo;
Function _Path_arcTo$(
  m.Scope scope$,
  Path target$,
) =>
    target$.arcTo;
Function _Path_arcToPoint$(
  m.Scope scope$,
  Path target$,
) =>
    target$.arcToPoint;
Function _Path_relativeArcToPoint$(
  m.Scope scope$,
  Path target$,
) =>
    target$.relativeArcToPoint;
Function _Path_addRect$(
  m.Scope scope$,
  Path target$,
) =>
    target$.addRect;
Function _Path_addOval$(
  m.Scope scope$,
  Path target$,
) =>
    target$.addOval;
Function _Path_addArc$(
  m.Scope scope$,
  Path target$,
) =>
    target$.addArc;
Function _Path_addPolygon$(
  m.Scope scope$,
  Path target$,
) =>
    target$.addPolygon;
Function _Path_addRRect$(
  m.Scope scope$,
  Path target$,
) =>
    target$.addRRect;
Function _Path_addPath$(
  m.Scope scope$,
  Path target$,
) =>
    target$.addPath;
Function _Path_extendWithPath$(
  m.Scope scope$,
  Path target$,
) =>
    target$.extendWithPath;
Function _Path_close$(
  m.Scope scope$,
  Path target$,
) =>
    target$.close;
Function _Path_reset$(
  m.Scope scope$,
  Path target$,
) =>
    target$.reset;
Function _Path_contains$(
  m.Scope scope$,
  Path target$,
) =>
    target$.contains;
Function _Path_shift$(
  m.Scope scope$,
  Path target$,
) =>
    target$.shift;
Function _Path_transform$(
  m.Scope scope$,
  Path target$,
) =>
    target$.transform;
Function _Path_getBounds$(
  m.Scope scope$,
  Path target$,
) =>
    target$.getBounds;
Function _Path_combine$(m.Scope scope$) => Path.combine;
Function _Path_computeMetrics$(
  m.Scope scope$,
  Path target$,
) =>
    target$.computeMetrics;
Function Tangent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Tangent;
Function Tangent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Tangent;
Function _Tangent_position$(
  m.Scope scope$,
  Tangent target$,
) =>
    () {
      return target$.position;
    };
Function _Tangent_vector$(
  m.Scope scope$,
  Tangent target$,
) =>
    () {
      return target$.vector;
    };
Function _Tangent_angle$(
  m.Scope scope$,
  Tangent target$,
) =>
    () {
      return target$.angle;
    };
Function _Tangent__$(m.Scope scope$) => (
      Offset position,
      Offset vector,
    ) {
      return Tangent(
        position,
        vector,
      );
    };
Function _Tangent_fromAngle_$(m.Scope scope$) => Tangent.fromAngle;
Function PathMetrics_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PathMetrics;
Function PathMetrics_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PathMetrics;
Function _PathMetrics_iterator$(
  m.Scope scope$,
  PathMetrics target$,
) =>
    () {
      return target$.iterator;
    };
Function PathMetricIterator_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PathMetricIterator;
Function PathMetricIterator_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PathMetricIterator;
Function _PathMetricIterator_current$(
  m.Scope scope$,
  PathMetricIterator target$,
) =>
    () {
      return target$.current;
    };
Function _PathMetricIterator_moveNext$(
  m.Scope scope$,
  PathMetricIterator target$,
) =>
    target$.moveNext;
Function PathMetric_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PathMetric;
Function PathMetric_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PathMetric;
Function _PathMetric_length$(
  m.Scope scope$,
  PathMetric target$,
) =>
    () {
      return target$.length;
    };
Function _PathMetric_isClosed$(
  m.Scope scope$,
  PathMetric target$,
) =>
    () {
      return target$.isClosed;
    };
Function _PathMetric_contourIndex$(
  m.Scope scope$,
  PathMetric target$,
) =>
    () {
      return target$.contourIndex;
    };
Function _PathMetric_getTangentForOffset$(
  m.Scope scope$,
  PathMetric target$,
) =>
    target$.getTangentForOffset;
Function _PathMetric_extractPath$(
  m.Scope scope$,
  PathMetric target$,
) =>
    target$.extractPath;
Function _PathMetric_toString$(
  m.Scope scope$,
  PathMetric target$,
) =>
    target$.toString;
Function MaskFilter_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MaskFilter;
Function MaskFilter_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MaskFilter;
Function _MaskFilter_hashCode$(
  m.Scope scope$,
  MaskFilter target$,
) =>
    () {
      return target$.hashCode;
    };
Function _MaskFilter_blur_$(m.Scope scope$) => MaskFilter.blur;
Function _MaskFilter_eq$$(
  m.Scope scope$,
  MaskFilter target$,
) =>
    (Object other$) => target$ == other$;
Function _MaskFilter_toString$(
  m.Scope scope$,
  MaskFilter target$,
) =>
    target$.toString;
Function ColorFilter_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ColorFilter;
Function ColorFilter_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ColorFilter;
Function _ColorFilter_hashCode$(
  m.Scope scope$,
  ColorFilter target$,
) =>
    () {
      return target$.hashCode;
    };
Function _ColorFilter_mode_$(m.Scope scope$) => ColorFilter.mode;
Function _ColorFilter_matrix_$(m.Scope scope$) => ColorFilter.matrix;
Function _ColorFilter_linearToSrgbGamma_$(m.Scope scope$) =>
    ColorFilter.linearToSrgbGamma;
Function _ColorFilter_srgbToLinearGamma_$(m.Scope scope$) =>
    ColorFilter.srgbToLinearGamma;
Function _ColorFilter_eq$$(
  m.Scope scope$,
  ColorFilter target$,
) =>
    (Object other$) => target$ == other$;
Function _ColorFilter_toString$(
  m.Scope scope$,
  ColorFilter target$,
) =>
    target$.toString;
Function ImageFilter_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ImageFilter;
Function ImageFilter_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ImageFilter;
Function _ImageFilter_blur_$(m.Scope scope$) => ImageFilter.blur;
Function _ImageFilter_dilate_$(m.Scope scope$) => ImageFilter.dilate;
Function _ImageFilter_erode_$(m.Scope scope$) => ImageFilter.erode;
Function _ImageFilter_matrix_$(m.Scope scope$) => ImageFilter.matrix;
Function _ImageFilter_compose_$(m.Scope scope$) => ImageFilter.compose;
Function Shader_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Shader;
Function Shader_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Shader;
Function _Shader_debugDisposed$(
  m.Scope scope$,
  Shader target$,
) =>
    () {
      return target$.debugDisposed;
    };
Function _Shader_dispose$(
  m.Scope scope$,
  Shader target$,
) =>
    target$.dispose;
Function Gradient_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Gradient;
Function Gradient_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Gradient;
Function _Gradient_linear_$(m.Scope scope$) => Gradient.linear;
Function _Gradient_radial_$(m.Scope scope$) => Gradient.radial;
Function _Gradient_sweep_$(m.Scope scope$) => Gradient.sweep;
Function ImageShader_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ImageShader;
Function ImageShader_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ImageShader;
Function _ImageShader__$(m.Scope scope$) => (
      Image image,
      TileMode tmx,
      TileMode tmy,
      Float64List matrix4, {
      FilterQuality? filterQuality,
    }) {
      return ImageShader(
        image,
        tmx,
        tmy,
        matrix4,
        filterQuality: filterQuality,
      );
    };
Function _ImageShader_dispose$(
  m.Scope scope$,
  ImageShader target$,
) =>
    target$.dispose;
Function FragmentProgram_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FragmentProgram;
Function FragmentProgram_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FragmentProgram;
Function _FragmentProgram_fromAsset$(m.Scope scope$) =>
    FragmentProgram.fromAsset;
Function _FragmentProgram_fragmentShader$(
  m.Scope scope$,
  FragmentProgram target$,
) =>
    target$.fragmentShader;
Function FragmentShader_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FragmentShader;
Function FragmentShader_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FragmentShader;
Function _FragmentShader_setFloat$(
  m.Scope scope$,
  FragmentShader target$,
) =>
    target$.setFloat;
Function _FragmentShader_setImageSampler$(
  m.Scope scope$,
  FragmentShader target$,
) =>
    target$.setImageSampler;
Function _FragmentShader_dispose$(
  m.Scope scope$,
  FragmentShader target$,
) =>
    target$.dispose;
Function Vertices_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Vertices;
Function Vertices_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Vertices;
Function _Vertices_debugDisposed$(
  m.Scope scope$,
  Vertices target$,
) =>
    () {
      return target$.debugDisposed;
    };
Function _Vertices__$(m.Scope scope$) => (
      VertexMode mode,
      List positions, {
      List? colors,
      List? textureCoordinates,
      List? indices,
    }) {
      return Vertices(
        mode,
        List.from(positions),
        colors: colors == null ? null : List.from(colors),
        indices: indices == null ? null : List.from(indices),
        textureCoordinates:
            textureCoordinates == null ? null : List.from(textureCoordinates),
      );
    };
Function _Vertices_raw_$(m.Scope scope$) => Vertices.raw;
Function _Vertices_dispose$(
  m.Scope scope$,
  Vertices target$,
) =>
    target$.dispose;
Function Canvas_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Canvas;
Function Canvas_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Canvas;
Function _Canvas__$(m.Scope scope$) => (
      PictureRecorder recorder, [
      Rect? cullRect,
    ]) {
      if (cullRect == null) {
        return Canvas(recorder);
      }
      return Canvas(
        recorder,
        cullRect!,
      );
    };
Function _Canvas_save$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.save;
Function _Canvas_saveLayer$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.saveLayer;
Function _Canvas_restore$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.restore;
Function _Canvas_restoreToCount$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.restoreToCount;
Function _Canvas_getSaveCount$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.getSaveCount;
Function _Canvas_translate$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.translate;
Function _Canvas_scale$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.scale;
Function _Canvas_rotate$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.rotate;
Function _Canvas_skew$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.skew;
Function _Canvas_transform$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.transform;
Function _Canvas_getTransform$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.getTransform;
Function _Canvas_clipRect$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.clipRect;
Function _Canvas_clipRRect$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.clipRRect;
Function _Canvas_clipPath$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.clipPath;
Function _Canvas_getLocalClipBounds$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.getLocalClipBounds;
Function _Canvas_getDestinationClipBounds$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.getDestinationClipBounds;
Function _Canvas_drawColor$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.drawColor;
Function _Canvas_drawLine$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.drawLine;
Function _Canvas_drawPaint$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.drawPaint;
Function _Canvas_drawRect$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.drawRect;
Function _Canvas_drawRRect$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.drawRRect;
Function _Canvas_drawDRRect$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.drawDRRect;
Function _Canvas_drawOval$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.drawOval;
Function _Canvas_drawCircle$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.drawCircle;
Function _Canvas_drawArc$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.drawArc;
Function _Canvas_drawPath$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.drawPath;
Function _Canvas_drawImage$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.drawImage;
Function _Canvas_drawImageRect$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.drawImageRect;
Function _Canvas_drawImageNine$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.drawImageNine;
Function _Canvas_drawPicture$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.drawPicture;
Function _Canvas_drawParagraph$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.drawParagraph;
Function _Canvas_drawPoints$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.drawPoints;
Function _Canvas_drawRawPoints$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.drawRawPoints;
Function _Canvas_drawVertices$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.drawVertices;
Function _Canvas_drawAtlas$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.drawAtlas;
Function _Canvas_drawRawAtlas$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.drawRawAtlas;
Function _Canvas_drawShadow$(
  m.Scope scope$,
  Canvas target$,
) =>
    target$.drawShadow;
Function Picture_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Picture;
Function Picture_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Picture;
void Function(Picture)? _Picture_onCreate$() {
  return Picture.onCreate;
}

Function _Picture_onCreate_set$(m.Scope scope$) =>
    (m.FunctionPointer? _onCreate) {
      void _onCreateProxy(Picture _onCreate_picture$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            _onCreate!,
            [_onCreate_picture$],
            {},
          );
      Picture.onCreate = (_onCreate == null ? null : _onCreateProxy);
    };
void Function(Picture)? _Picture_onDispose$() {
  return Picture.onDispose;
}

Function _Picture_onDispose_set$(m.Scope scope$) =>
    (m.FunctionPointer? _onDispose) {
      void _onDisposeProxy(Picture _onDispose_picture$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            _onDispose!,
            [_onDispose_picture$],
            {},
          );
      Picture.onDispose = (_onDispose == null ? null : _onDisposeProxy);
    };
Function _Picture_debugDisposed$(
  m.Scope scope$,
  Picture target$,
) =>
    () {
      return target$.debugDisposed;
    };
Function _Picture_approximateBytesUsed$(
  m.Scope scope$,
  Picture target$,
) =>
    () {
      return target$.approximateBytesUsed;
    };
Function _Picture_toImage$(
  m.Scope scope$,
  Picture target$,
) =>
    target$.toImage;
Function _Picture_toImageSync$(
  m.Scope scope$,
  Picture target$,
) =>
    target$.toImageSync;
Function _Picture_dispose$(
  m.Scope scope$,
  Picture target$,
) =>
    target$.dispose;
Function PictureRecorder_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PictureRecorder;
Function PictureRecorder_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PictureRecorder;
Function _PictureRecorder_isRecording$(
  m.Scope scope$,
  PictureRecorder target$,
) =>
    () {
      return target$.isRecording;
    };
Function _PictureRecorder__$(m.Scope scope$) => () {
      return PictureRecorder();
    };
Function _PictureRecorder_endRecording$(
  m.Scope scope$,
  PictureRecorder target$,
) =>
    target$.endRecording;
Function Shadow_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Shadow;
Function Shadow_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Shadow;
Function _Shadow_color$(
  m.Scope scope$,
  Shadow target$,
) =>
    () {
      return target$.color;
    };
Function _Shadow_offset$(
  m.Scope scope$,
  Shadow target$,
) =>
    () {
      return target$.offset;
    };
Function _Shadow_blurRadius$(
  m.Scope scope$,
  Shadow target$,
) =>
    () {
      return target$.blurRadius;
    };
Function _Shadow_blurSigma$(
  m.Scope scope$,
  Shadow target$,
) =>
    () {
      return target$.blurSigma;
    };
Function _Shadow_hashCode$(
  m.Scope scope$,
  Shadow target$,
) =>
    () {
      return target$.hashCode;
    };
Function _Shadow__$(m.Scope scope$) => ({
      Color? color,
      Offset? offset,
      double? blurRadius,
    }) {
      return Shadow(
        blurRadius: blurRadius ?? 0.0,
        color: color ?? const Color(0xFF000000),
        offset: offset ?? Offset.zero,
      );
    };
Function _Shadow_convertRadiusToSigma$(m.Scope scope$) =>
    Shadow.convertRadiusToSigma;
Function _Shadow_toPaint$(
  m.Scope scope$,
  Shadow target$,
) =>
    target$.toPaint;
Function _Shadow_scale$(
  m.Scope scope$,
  Shadow target$,
) =>
    target$.scale;
Function _Shadow_lerp$(m.Scope scope$) => Shadow.lerp;
Function _Shadow_lerpList$(m.Scope scope$) => Shadow.lerpList;
Function _Shadow_eq$$(
  m.Scope scope$,
  Shadow target$,
) =>
    (Object other$) => target$ == other$;
Function _Shadow_toString$(
  m.Scope scope$,
  Shadow target$,
) =>
    target$.toString;
Function ImmutableBuffer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ImmutableBuffer;
Function ImmutableBuffer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ImmutableBuffer;
Function _ImmutableBuffer_length$(
  m.Scope scope$,
  ImmutableBuffer target$,
) =>
    () {
      return target$.length;
    };
Function _ImmutableBuffer_debugDisposed$(
  m.Scope scope$,
  ImmutableBuffer target$,
) =>
    () {
      return target$.debugDisposed;
    };
Function _ImmutableBuffer_fromUint8List$(m.Scope scope$) =>
    ImmutableBuffer.fromUint8List;
Function _ImmutableBuffer_fromAsset$(m.Scope scope$) =>
    ImmutableBuffer.fromAsset;
Function _ImmutableBuffer_fromFilePath$(m.Scope scope$) =>
    ImmutableBuffer.fromFilePath;
Function _ImmutableBuffer_dispose$(
  m.Scope scope$,
  ImmutableBuffer target$,
) =>
    target$.dispose;
Function ImageDescriptor_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ImageDescriptor;
Function ImageDescriptor_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ImageDescriptor;
Function _ImageDescriptor_width$(
  m.Scope scope$,
  ImageDescriptor target$,
) =>
    () {
      return target$.width;
    };
Function _ImageDescriptor_height$(
  m.Scope scope$,
  ImageDescriptor target$,
) =>
    () {
      return target$.height;
    };
Function _ImageDescriptor_bytesPerPixel$(
  m.Scope scope$,
  ImageDescriptor target$,
) =>
    () {
      return target$.bytesPerPixel;
    };
Function _ImageDescriptor_raw_$(m.Scope scope$) => ImageDescriptor.raw;
Function _ImageDescriptor_encoded$(m.Scope scope$) => ImageDescriptor.encoded;
Function _ImageDescriptor_dispose$(
  m.Scope scope$,
  ImageDescriptor target$,
) =>
    target$.dispose;
Function _ImageDescriptor_instantiateCodec$(
  m.Scope scope$,
  ImageDescriptor target$,
) =>
    target$.instantiateCodec;
Function PictureRasterizationException_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PictureRasterizationException;
Function PictureRasterizationException_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PictureRasterizationException;
Function _PictureRasterizationException_message$(
  m.Scope scope$,
  PictureRasterizationException target$,
) =>
    () {
      return target$.message;
    };
Function _PictureRasterizationException_stack$(
  m.Scope scope$,
  PictureRasterizationException target$,
) =>
    () {
      return target$.stack;
    };
Function _PictureRasterizationException_toString$(
  m.Scope scope$,
  PictureRasterizationException target$,
) =>
    target$.toString;
BlendMode _BlendMode_clear$() {
  return BlendMode.clear;
}

BlendMode _BlendMode_src$() {
  return BlendMode.src;
}

BlendMode _BlendMode_dst$() {
  return BlendMode.dst;
}

BlendMode _BlendMode_srcOver$() {
  return BlendMode.srcOver;
}

BlendMode _BlendMode_dstOver$() {
  return BlendMode.dstOver;
}

BlendMode _BlendMode_srcIn$() {
  return BlendMode.srcIn;
}

BlendMode _BlendMode_dstIn$() {
  return BlendMode.dstIn;
}

BlendMode _BlendMode_srcOut$() {
  return BlendMode.srcOut;
}

BlendMode _BlendMode_dstOut$() {
  return BlendMode.dstOut;
}

BlendMode _BlendMode_srcATop$() {
  return BlendMode.srcATop;
}

BlendMode _BlendMode_dstATop$() {
  return BlendMode.dstATop;
}

BlendMode _BlendMode_xor$() {
  return BlendMode.xor;
}

BlendMode _BlendMode_plus$() {
  return BlendMode.plus;
}

BlendMode _BlendMode_modulate$() {
  return BlendMode.modulate;
}

BlendMode _BlendMode_screen$() {
  return BlendMode.screen;
}

BlendMode _BlendMode_overlay$() {
  return BlendMode.overlay;
}

BlendMode _BlendMode_darken$() {
  return BlendMode.darken;
}

BlendMode _BlendMode_lighten$() {
  return BlendMode.lighten;
}

BlendMode _BlendMode_colorDodge$() {
  return BlendMode.colorDodge;
}

BlendMode _BlendMode_colorBurn$() {
  return BlendMode.colorBurn;
}

BlendMode _BlendMode_hardLight$() {
  return BlendMode.hardLight;
}

BlendMode _BlendMode_softLight$() {
  return BlendMode.softLight;
}

BlendMode _BlendMode_difference$() {
  return BlendMode.difference;
}

BlendMode _BlendMode_exclusion$() {
  return BlendMode.exclusion;
}

BlendMode _BlendMode_multiply$() {
  return BlendMode.multiply;
}

BlendMode _BlendMode_hue$() {
  return BlendMode.hue;
}

BlendMode _BlendMode_saturation$() {
  return BlendMode.saturation;
}

BlendMode _BlendMode_color$() {
  return BlendMode.color;
}

BlendMode _BlendMode_luminosity$() {
  return BlendMode.luminosity;
}

List<BlendMode> _BlendMode_values$() {
  return BlendMode.values;
}

FilterQuality _FilterQuality_none$() {
  return FilterQuality.none;
}

FilterQuality _FilterQuality_low$() {
  return FilterQuality.low;
}

FilterQuality _FilterQuality_medium$() {
  return FilterQuality.medium;
}

FilterQuality _FilterQuality_high$() {
  return FilterQuality.high;
}

List<FilterQuality> _FilterQuality_values$() {
  return FilterQuality.values;
}

StrokeCap _StrokeCap_butt$() {
  return StrokeCap.butt;
}

StrokeCap _StrokeCap_round$() {
  return StrokeCap.round;
}

StrokeCap _StrokeCap_square$() {
  return StrokeCap.square;
}

List<StrokeCap> _StrokeCap_values$() {
  return StrokeCap.values;
}

StrokeJoin _StrokeJoin_miter$() {
  return StrokeJoin.miter;
}

StrokeJoin _StrokeJoin_round$() {
  return StrokeJoin.round;
}

StrokeJoin _StrokeJoin_bevel$() {
  return StrokeJoin.bevel;
}

List<StrokeJoin> _StrokeJoin_values$() {
  return StrokeJoin.values;
}

PaintingStyle _PaintingStyle_fill$() {
  return PaintingStyle.fill;
}

PaintingStyle _PaintingStyle_stroke$() {
  return PaintingStyle.stroke;
}

List<PaintingStyle> _PaintingStyle_values$() {
  return PaintingStyle.values;
}

Clip _Clip_none$() {
  return Clip.none;
}

Clip _Clip_hardEdge$() {
  return Clip.hardEdge;
}

Clip _Clip_antiAlias$() {
  return Clip.antiAlias;
}

Clip _Clip_antiAliasWithSaveLayer$() {
  return Clip.antiAliasWithSaveLayer;
}

List<Clip> _Clip_values$() {
  return Clip.values;
}

ColorSpace _ColorSpace_sRGB$() {
  return ColorSpace.sRGB;
}

ColorSpace _ColorSpace_extendedSRGB$() {
  return ColorSpace.extendedSRGB;
}

List<ColorSpace> _ColorSpace_values$() {
  return ColorSpace.values;
}

ImageByteFormat _ImageByteFormat_rawRgba$() {
  return ImageByteFormat.rawRgba;
}

ImageByteFormat _ImageByteFormat_rawStraightRgba$() {
  return ImageByteFormat.rawStraightRgba;
}

ImageByteFormat _ImageByteFormat_rawUnmodified$() {
  return ImageByteFormat.rawUnmodified;
}

ImageByteFormat _ImageByteFormat_rawExtendedRgba128$() {
  return ImageByteFormat.rawExtendedRgba128;
}

ImageByteFormat _ImageByteFormat_png$() {
  return ImageByteFormat.png;
}

List<ImageByteFormat> _ImageByteFormat_values$() {
  return ImageByteFormat.values;
}

PixelFormat _PixelFormat_rgba8888$() {
  return PixelFormat.rgba8888;
}

PixelFormat _PixelFormat_bgra8888$() {
  return PixelFormat.bgra8888;
}

PixelFormat _PixelFormat_rgbaFloat32$() {
  return PixelFormat.rgbaFloat32;
}

List<PixelFormat> _PixelFormat_values$() {
  return PixelFormat.values;
}

PathFillType _PathFillType_nonZero$() {
  return PathFillType.nonZero;
}

PathFillType _PathFillType_evenOdd$() {
  return PathFillType.evenOdd;
}

List<PathFillType> _PathFillType_values$() {
  return PathFillType.values;
}

PathOperation _PathOperation_difference$() {
  return PathOperation.difference;
}

PathOperation _PathOperation_intersect$() {
  return PathOperation.intersect;
}

PathOperation _PathOperation_union$() {
  return PathOperation.union;
}

PathOperation _PathOperation_xor$() {
  return PathOperation.xor;
}

PathOperation _PathOperation_reverseDifference$() {
  return PathOperation.reverseDifference;
}

List<PathOperation> _PathOperation_values$() {
  return PathOperation.values;
}

BlurStyle _BlurStyle_normal$() {
  return BlurStyle.normal;
}

BlurStyle _BlurStyle_solid$() {
  return BlurStyle.solid;
}

BlurStyle _BlurStyle_outer$() {
  return BlurStyle.outer;
}

BlurStyle _BlurStyle_inner$() {
  return BlurStyle.inner;
}

List<BlurStyle> _BlurStyle_values$() {
  return BlurStyle.values;
}

TileMode _TileMode_clamp$() {
  return TileMode.clamp;
}

TileMode _TileMode_repeated$() {
  return TileMode.repeated;
}

TileMode _TileMode_mirror$() {
  return TileMode.mirror;
}

TileMode _TileMode_decal$() {
  return TileMode.decal;
}

List<TileMode> _TileMode_values$() {
  return TileMode.values;
}

VertexMode _VertexMode_triangles$() {
  return VertexMode.triangles;
}

VertexMode _VertexMode_triangleStrip$() {
  return VertexMode.triangleStrip;
}

VertexMode _VertexMode_triangleFan$() {
  return VertexMode.triangleFan;
}

List<VertexMode> _VertexMode_values$() {
  return VertexMode.values;
}

PointMode _PointMode_points$() {
  return PointMode.points;
}

PointMode _PointMode_lines$() {
  return PointMode.lines;
}

PointMode _PointMode_polygon$() {
  return PointMode.polygon;
}

List<PointMode> _PointMode_values$() {
  return PointMode.values;
}

ClipOp _ClipOp_difference$() {
  return ClipOp.difference;
}

ClipOp _ClipOp_intersect$() {
  return ClipOp.intersect;
}

List<ClipOp> _ClipOp_values$() {
  return ClipOp.values;
}

Function _instantiateImageCodec$(m.Scope scope$) => instantiateImageCodec;
Function _instantiateImageCodecFromBuffer$(m.Scope scope$) =>
    instantiateImageCodecFromBuffer;
Function _instantiateImageCodecWithSize$(m.Scope scope$) => (
      ImmutableBuffer buffer, {
      m.FunctionPointer? getTargetSize,
    }) {
      TargetImageSize getTargetSizeProxy(
        int getTargetSize_intrinsicWidth$,
        int getTargetSize_intrinsicHeight$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            getTargetSize!,
            [
              getTargetSize_intrinsicWidth$,
              getTargetSize_intrinsicHeight$,
            ],
            {},
          );
      return instantiateImageCodecWithSize(
        buffer,
        getTargetSize: getTargetSize == null ? null : getTargetSizeProxy,
      );
    };
Function _decodeImageFromList$(m.Scope scope$) => (
      Uint8List list,
      m.FunctionPointer callback,
    ) {
      void callbackProxy(Image callback_result$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            callback,
            [callback_result$],
            {},
          );
      decodeImageFromList(
        list,
        callbackProxy,
      );
    };
Function _decodeImageFromPixels$(m.Scope scope$) => (
      Uint8List pixels,
      int width,
      int height,
      PixelFormat format,
      m.FunctionPointer callback, {
      int? rowBytes,
      int? targetWidth,
      int? targetHeight,
      bool? allowUpscaling,
    }) {
      void callbackProxy(Image callback_result$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            callback,
            [callback_result$],
            {},
          );
      decodeImageFromPixels(
        pixels,
        width,
        height,
        format,
        callbackProxy,
        allowUpscaling: allowUpscaling ?? true,
        rowBytes: rowBytes,
        targetHeight: targetHeight,
        targetWidth: targetWidth,
      );
    };
Function RootIsolateToken_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RootIsolateToken;
Function RootIsolateToken_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RootIsolateToken;
RootIsolateToken? _RootIsolateToken_instance$() {
  return RootIsolateToken.instance;
}

Function PlatformDispatcher_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PlatformDispatcher;
Function PlatformDispatcher_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PlatformDispatcher;
PlatformDispatcher _PlatformDispatcher_instance$() {
  return PlatformDispatcher.instance;
}

Function _PlatformDispatcher_onPlatformConfigurationChanged$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.onPlatformConfigurationChanged;
    };
Function _PlatformDispatcher_onPlatformConfigurationChanged_set$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    (m.FunctionPointer? callback) {
      void callbackProxy() => scope$.engine.callFunctionPointer(
            scope$,
            callback!,
            [],
            {},
          );
      target$.onPlatformConfigurationChanged =
          (callback == null ? null : callbackProxy);
    };
Function _PlatformDispatcher_views$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.views;
    };
Function _PlatformDispatcher_implicitView$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.implicitView;
    };
Function _PlatformDispatcher_onMetricsChanged$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.onMetricsChanged;
    };
Function _PlatformDispatcher_onMetricsChanged_set$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    (m.FunctionPointer? callback) {
      void callbackProxy() => scope$.engine.callFunctionPointer(
            scope$,
            callback!,
            [],
            {},
          );
      target$.onMetricsChanged = (callback == null ? null : callbackProxy);
    };
Function _PlatformDispatcher_onBeginFrame$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.onBeginFrame;
    };
Function _PlatformDispatcher_onBeginFrame_set$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    (m.FunctionPointer? callback) {
      void callbackProxy(Duration callback_duration$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            callback!,
            [callback_duration$],
            {},
          );
      target$.onBeginFrame = (callback == null ? null : callbackProxy);
    };
Function _PlatformDispatcher_onDrawFrame$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.onDrawFrame;
    };
Function _PlatformDispatcher_onDrawFrame_set$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    (m.FunctionPointer? callback) {
      void callbackProxy() => scope$.engine.callFunctionPointer(
            scope$,
            callback!,
            [],
            {},
          );
      target$.onDrawFrame = (callback == null ? null : callbackProxy);
    };
Function _PlatformDispatcher_onPointerDataPacket$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.onPointerDataPacket;
    };
Function _PlatformDispatcher_onPointerDataPacket_set$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    (m.FunctionPointer? callback) {
      void callbackProxy(PointerDataPacket callback_packet$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            callback!,
            [callback_packet$],
            {},
          );
      target$.onPointerDataPacket = (callback == null ? null : callbackProxy);
    };
Function _PlatformDispatcher_onKeyData$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.onKeyData;
    };
Function _PlatformDispatcher_onKeyData_set$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    (m.FunctionPointer? callback) {
      bool callbackProxy(KeyData callback_data$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            callback!,
            [callback_data$],
            {},
          );
      target$.onKeyData = (callback == null ? null : callbackProxy);
    };
Function _PlatformDispatcher_onReportTimings$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.onReportTimings;
    };
Function _PlatformDispatcher_onReportTimings_set$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    (m.FunctionPointer? callback) {
      void callbackProxy(List callback_timings$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            callback!,
            [callback_timings$],
            {},
          );
      target$.onReportTimings = (callback == null ? null : callbackProxy);
    };
Function _PlatformDispatcher_onPlatformMessage$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.onPlatformMessage;
    };
Function _PlatformDispatcher_onPlatformMessage_set$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    (m.FunctionPointer? callback) {
      void callbackProxy(
        String callback_name$,
        ByteData? callback_data$,
        void Function(ByteData?)? callback_callback$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            callback!,
            [
              callback_name$,
              callback_data$,
              callback_callback$,
            ],
            {},
          );
      target$.onPlatformMessage = (callback == null ? null : callbackProxy);
    };
Function _PlatformDispatcher_accessibilityFeatures$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.accessibilityFeatures;
    };
Function _PlatformDispatcher_onAccessibilityFeaturesChanged$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.onAccessibilityFeaturesChanged;
    };
Function _PlatformDispatcher_onAccessibilityFeaturesChanged_set$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    (m.FunctionPointer? callback) {
      void callbackProxy() => scope$.engine.callFunctionPointer(
            scope$,
            callback!,
            [],
            {},
          );
      target$.onAccessibilityFeaturesChanged =
          (callback == null ? null : callbackProxy);
    };
Function _PlatformDispatcher_locale$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.locale;
    };
Function _PlatformDispatcher_locales$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.locales;
    };
Function _PlatformDispatcher_onLocaleChanged$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.onLocaleChanged;
    };
Function _PlatformDispatcher_onLocaleChanged_set$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    (m.FunctionPointer? callback) {
      void callbackProxy() => scope$.engine.callFunctionPointer(
            scope$,
            callback!,
            [],
            {},
          );
      target$.onLocaleChanged = (callback == null ? null : callbackProxy);
    };
Function _PlatformDispatcher_initialLifecycleState$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.initialLifecycleState;
    };
Function _PlatformDispatcher_alwaysUse24HourFormat$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.alwaysUse24HourFormat;
    };
Function _PlatformDispatcher_textScaleFactor$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.textScaleFactor;
    };
Function _PlatformDispatcher_onTextScaleFactorChanged$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.onTextScaleFactorChanged;
    };
Function _PlatformDispatcher_onTextScaleFactorChanged_set$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    (m.FunctionPointer? callback) {
      void callbackProxy() => scope$.engine.callFunctionPointer(
            scope$,
            callback!,
            [],
            {},
          );
      target$.onTextScaleFactorChanged =
          (callback == null ? null : callbackProxy);
    };
Function _PlatformDispatcher_nativeSpellCheckServiceDefined$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.nativeSpellCheckServiceDefined;
    };
Function _PlatformDispatcher_brieflyShowPassword$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.brieflyShowPassword;
    };
Function _PlatformDispatcher_platformBrightness$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.platformBrightness;
    };
Function _PlatformDispatcher_onPlatformBrightnessChanged$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.onPlatformBrightnessChanged;
    };
Function _PlatformDispatcher_onPlatformBrightnessChanged_set$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    (m.FunctionPointer? callback) {
      void callbackProxy() => scope$.engine.callFunctionPointer(
            scope$,
            callback!,
            [],
            {},
          );
      target$.onPlatformBrightnessChanged =
          (callback == null ? null : callbackProxy);
    };
Function _PlatformDispatcher_systemFontFamily$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.systemFontFamily;
    };
Function _PlatformDispatcher_onSystemFontFamilyChanged$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.onSystemFontFamilyChanged;
    };
Function _PlatformDispatcher_onSystemFontFamilyChanged_set$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    (m.FunctionPointer? callback) {
      void callbackProxy() => scope$.engine.callFunctionPointer(
            scope$,
            callback!,
            [],
            {},
          );
      target$.onSystemFontFamilyChanged =
          (callback == null ? null : callbackProxy);
    };
Function _PlatformDispatcher_semanticsEnabled$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.semanticsEnabled;
    };
Function _PlatformDispatcher_onSemanticsEnabledChanged$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.onSemanticsEnabledChanged;
    };
Function _PlatformDispatcher_onSemanticsEnabledChanged_set$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    (m.FunctionPointer? callback) {
      void callbackProxy() => scope$.engine.callFunctionPointer(
            scope$,
            callback!,
            [],
            {},
          );
      target$.onSemanticsEnabledChanged =
          (callback == null ? null : callbackProxy);
    };
Function _PlatformDispatcher_onSemanticsAction$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.onSemanticsAction;
    };
Function _PlatformDispatcher_onSemanticsAction_set$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    (m.FunctionPointer? callback) {
      void callbackProxy(
        int callback_nodeId$,
        SemanticsAction callback_action$,
        ByteData? callback_args$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            callback!,
            [
              callback_nodeId$,
              callback_action$,
              callback_args$,
            ],
            {},
          );
      target$.onSemanticsAction = (callback == null ? null : callbackProxy);
    };
Function _PlatformDispatcher_frameData$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.frameData;
    };
Function _PlatformDispatcher_onFrameDataChanged$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.onFrameDataChanged;
    };
Function _PlatformDispatcher_onFrameDataChanged_set$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    (m.FunctionPointer? callback) {
      void callbackProxy() => scope$.engine.callFunctionPointer(
            scope$,
            callback!,
            [],
            {},
          );
      target$.onFrameDataChanged = (callback == null ? null : callbackProxy);
    };
Function _PlatformDispatcher_onError$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.onError;
    };
Function _PlatformDispatcher_onError_set$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    (m.FunctionPointer? callback) {
      bool callbackProxy(
        Object callback_exception$,
        StackTrace callback_stackTrace$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            callback!,
            [
              callback_exception$,
              callback_stackTrace$,
            ],
            {},
          );
      target$.onError = (callback == null ? null : callbackProxy);
    };
Function _PlatformDispatcher_defaultRouteName$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    () {
      return target$.defaultRouteName;
    };
Function _PlatformDispatcher_sendPlatformMessage$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    (
      String name,
      ByteData? data,
      m.FunctionPointer? callback,
    ) {
      void callbackProxy(ByteData? callback_data$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            callback!,
            [callback_data$],
            {},
          );
      target$.sendPlatformMessage(
        name,
        data,
        callback == null ? null : callbackProxy,
      );
    };
Function _PlatformDispatcher_sendPortPlatformMessage$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    target$.sendPortPlatformMessage;
Function _PlatformDispatcher_registerBackgroundIsolate$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    target$.registerBackgroundIsolate;
Function _PlatformDispatcher_setIsolateDebugName$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    target$.setIsolateDebugName;
Function _PlatformDispatcher_requestDartPerformanceMode$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    target$.requestDartPerformanceMode;
Function _PlatformDispatcher_getPersistentIsolateData$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    target$.getPersistentIsolateData;
Function _PlatformDispatcher_scheduleFrame$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    target$.scheduleFrame;
Function _PlatformDispatcher_computePlatformResolvedLocale$(
  m.Scope scope$,
  PlatformDispatcher target$,
) =>
    target$.computePlatformResolvedLocale;
Function FrameTiming_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FrameTiming;
Function FrameTiming_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FrameTiming;
Function _FrameTiming_buildDuration$(
  m.Scope scope$,
  FrameTiming target$,
) =>
    () {
      return target$.buildDuration;
    };
Function _FrameTiming_rasterDuration$(
  m.Scope scope$,
  FrameTiming target$,
) =>
    () {
      return target$.rasterDuration;
    };
Function _FrameTiming_vsyncOverhead$(
  m.Scope scope$,
  FrameTiming target$,
) =>
    () {
      return target$.vsyncOverhead;
    };
Function _FrameTiming_totalSpan$(
  m.Scope scope$,
  FrameTiming target$,
) =>
    () {
      return target$.totalSpan;
    };
Function _FrameTiming_layerCacheCount$(
  m.Scope scope$,
  FrameTiming target$,
) =>
    () {
      return target$.layerCacheCount;
    };
Function _FrameTiming_layerCacheBytes$(
  m.Scope scope$,
  FrameTiming target$,
) =>
    () {
      return target$.layerCacheBytes;
    };
Function _FrameTiming_layerCacheMegabytes$(
  m.Scope scope$,
  FrameTiming target$,
) =>
    () {
      return target$.layerCacheMegabytes;
    };
Function _FrameTiming_pictureCacheCount$(
  m.Scope scope$,
  FrameTiming target$,
) =>
    () {
      return target$.pictureCacheCount;
    };
Function _FrameTiming_pictureCacheBytes$(
  m.Scope scope$,
  FrameTiming target$,
) =>
    () {
      return target$.pictureCacheBytes;
    };
Function _FrameTiming_pictureCacheMegabytes$(
  m.Scope scope$,
  FrameTiming target$,
) =>
    () {
      return target$.pictureCacheMegabytes;
    };
Function _FrameTiming_frameNumber$(
  m.Scope scope$,
  FrameTiming target$,
) =>
    () {
      return target$.frameNumber;
    };
Function _FrameTiming__$(m.Scope scope$) => ({
      required int vsyncStart,
      required int buildStart,
      required int buildFinish,
      required int rasterStart,
      required int rasterFinish,
      required int rasterFinishWallTime,
      int? layerCacheCount,
      int? layerCacheBytes,
      int? pictureCacheCount,
      int? pictureCacheBytes,
      int? frameNumber,
    }) {
      return FrameTiming(
        buildFinish: buildFinish,
        buildStart: buildStart,
        frameNumber: frameNumber ?? -1,
        layerCacheBytes: layerCacheBytes ?? 0,
        layerCacheCount: layerCacheCount ?? 0,
        pictureCacheBytes: pictureCacheBytes ?? 0,
        pictureCacheCount: pictureCacheCount ?? 0,
        rasterFinish: rasterFinish,
        rasterFinishWallTime: rasterFinishWallTime,
        rasterStart: rasterStart,
        vsyncStart: vsyncStart,
      );
    };
Function _FrameTiming_timestampInMicroseconds$(
  m.Scope scope$,
  FrameTiming target$,
) =>
    target$.timestampInMicroseconds;
Function _FrameTiming_toString$(
  m.Scope scope$,
  FrameTiming target$,
) =>
    target$.toString;
Function ViewPadding_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ViewPadding;
Function ViewPadding_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ViewPadding;
Function _ViewPadding_left$(
  m.Scope scope$,
  ViewPadding target$,
) =>
    () {
      return target$.left;
    };
Function _ViewPadding_top$(
  m.Scope scope$,
  ViewPadding target$,
) =>
    () {
      return target$.top;
    };
Function _ViewPadding_right$(
  m.Scope scope$,
  ViewPadding target$,
) =>
    () {
      return target$.right;
    };
Function _ViewPadding_bottom$(
  m.Scope scope$,
  ViewPadding target$,
) =>
    () {
      return target$.bottom;
    };
ViewPadding _ViewPadding_zero$() {
  return ViewPadding.zero;
}

Function _ViewPadding_toString$(
  m.Scope scope$,
  ViewPadding target$,
) =>
    target$.toString;
Function DisplayFeature_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DisplayFeature;
Function DisplayFeature_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DisplayFeature;
Function _DisplayFeature_bounds$(
  m.Scope scope$,
  DisplayFeature target$,
) =>
    () {
      return target$.bounds;
    };
Function _DisplayFeature_type$(
  m.Scope scope$,
  DisplayFeature target$,
) =>
    () {
      return target$.type;
    };
Function _DisplayFeature_state$(
  m.Scope scope$,
  DisplayFeature target$,
) =>
    () {
      return target$.state;
    };
Function _DisplayFeature_hashCode$(
  m.Scope scope$,
  DisplayFeature target$,
) =>
    () {
      return target$.hashCode;
    };
Function _DisplayFeature__$(m.Scope scope$) => ({
      required Rect bounds,
      required DisplayFeatureType type,
      required DisplayFeatureState state,
    }) {
      return DisplayFeature(
        bounds: bounds,
        state: state,
        type: type,
      );
    };
Function _DisplayFeature_eq$$(
  m.Scope scope$,
  DisplayFeature target$,
) =>
    (Object other$) => target$ == other$;
Function _DisplayFeature_toString$(
  m.Scope scope$,
  DisplayFeature target$,
) =>
    target$.toString;
Function Locale_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Locale;
Function Locale_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Locale;
Function _Locale_scriptCode$(
  m.Scope scope$,
  Locale target$,
) =>
    () {
      return target$.scriptCode;
    };
Function _Locale_languageCode$(
  m.Scope scope$,
  Locale target$,
) =>
    () {
      return target$.languageCode;
    };
Function _Locale_countryCode$(
  m.Scope scope$,
  Locale target$,
) =>
    () {
      return target$.countryCode;
    };
Function _Locale_hashCode$(
  m.Scope scope$,
  Locale target$,
) =>
    () {
      return target$.hashCode;
    };
Function _Locale__$(m.Scope scope$) => (
      String _languageCode, [
      String? _countryCode,
    ]) {
      if (_countryCode == null) {
        return Locale(_languageCode);
      }
      return Locale(
        _languageCode,
        _countryCode!,
      );
    };
Function _Locale_fromSubtags_$(m.Scope scope$) => Locale.fromSubtags;
Function _Locale_eq$$(
  m.Scope scope$,
  Locale target$,
) =>
    (Object other$) => target$ == other$;
Function _Locale_toString$(
  m.Scope scope$,
  Locale target$,
) =>
    target$.toString;
Function _Locale_toLanguageTag$(
  m.Scope scope$,
  Locale target$,
) =>
    target$.toLanguageTag;
FramePhase _FramePhase_vsyncStart$() {
  return FramePhase.vsyncStart;
}

FramePhase _FramePhase_buildStart$() {
  return FramePhase.buildStart;
}

FramePhase _FramePhase_buildFinish$() {
  return FramePhase.buildFinish;
}

FramePhase _FramePhase_rasterStart$() {
  return FramePhase.rasterStart;
}

FramePhase _FramePhase_rasterFinish$() {
  return FramePhase.rasterFinish;
}

FramePhase _FramePhase_rasterFinishWallTime$() {
  return FramePhase.rasterFinishWallTime;
}

List<FramePhase> _FramePhase_values$() {
  return FramePhase.values;
}

AppLifecycleState _AppLifecycleState_resumed$() {
  return AppLifecycleState.resumed;
}

AppLifecycleState _AppLifecycleState_inactive$() {
  return AppLifecycleState.inactive;
}

AppLifecycleState _AppLifecycleState_paused$() {
  return AppLifecycleState.paused;
}

AppLifecycleState _AppLifecycleState_detached$() {
  return AppLifecycleState.detached;
}

List<AppLifecycleState> _AppLifecycleState_values$() {
  return AppLifecycleState.values;
}

AppExitResponse _AppExitResponse_exit$() {
  return AppExitResponse.exit;
}

AppExitResponse _AppExitResponse_cancel$() {
  return AppExitResponse.cancel;
}

List<AppExitResponse> _AppExitResponse_values$() {
  return AppExitResponse.values;
}

AppExitType _AppExitType_cancelable$() {
  return AppExitType.cancelable;
}

AppExitType _AppExitType_required$() {
  return AppExitType.required;
}

List<AppExitType> _AppExitType_values$() {
  return AppExitType.values;
}

DisplayFeatureType _DisplayFeatureType_unknown$() {
  return DisplayFeatureType.unknown;
}

DisplayFeatureType _DisplayFeatureType_fold$() {
  return DisplayFeatureType.fold;
}

DisplayFeatureType _DisplayFeatureType_hinge$() {
  return DisplayFeatureType.hinge;
}

DisplayFeatureType _DisplayFeatureType_cutout$() {
  return DisplayFeatureType.cutout;
}

List<DisplayFeatureType> _DisplayFeatureType_values$() {
  return DisplayFeatureType.values;
}

DisplayFeatureState _DisplayFeatureState_unknown$() {
  return DisplayFeatureState.unknown;
}

DisplayFeatureState _DisplayFeatureState_postureFlat$() {
  return DisplayFeatureState.postureFlat;
}

DisplayFeatureState _DisplayFeatureState_postureHalfOpened$() {
  return DisplayFeatureState.postureHalfOpened;
}

List<DisplayFeatureState> _DisplayFeatureState_values$() {
  return DisplayFeatureState.values;
}

DartPerformanceMode _DartPerformanceMode_balanced$() {
  return DartPerformanceMode.balanced;
}

DartPerformanceMode _DartPerformanceMode_latency$() {
  return DartPerformanceMode.latency;
}

DartPerformanceMode _DartPerformanceMode_throughput$() {
  return DartPerformanceMode.throughput;
}

DartPerformanceMode _DartPerformanceMode_memory$() {
  return DartPerformanceMode.memory;
}

List<DartPerformanceMode> _DartPerformanceMode_values$() {
  return DartPerformanceMode.values;
}

Function CallbackHandle_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CallbackHandle;
Function CallbackHandle_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CallbackHandle;
Function _CallbackHandle_hashCode$(
  m.Scope scope$,
  CallbackHandle target$,
) =>
    () {
      return target$.hashCode;
    };
Function _CallbackHandle_fromRawHandle_$(m.Scope scope$) =>
    CallbackHandle.fromRawHandle;
Function _CallbackHandle_toRawHandle$(
  m.Scope scope$,
  CallbackHandle target$,
) =>
    target$.toRawHandle;
Function _CallbackHandle_eq$$(
  m.Scope scope$,
  CallbackHandle target$,
) =>
    (Object other$) => target$ == other$;
Function PluginUtilities_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PluginUtilities;
Function PluginUtilities_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PluginUtilities;
Function _PluginUtilities_getCallbackHandle$(m.Scope scope$) =>
    PluginUtilities.getCallbackHandle;
Function _PluginUtilities_getCallbackFromHandle$(m.Scope scope$) =>
    PluginUtilities.getCallbackFromHandle;
Function PointerData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PointerData;
Function PointerData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PointerData;
Function _PointerData_embedderId$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.embedderId;
    };
Function _PointerData_timeStamp$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.timeStamp;
    };
Function _PointerData_change$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.change;
    };
Function _PointerData_kind$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.kind;
    };
Function _PointerData_signalKind$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.signalKind;
    };
Function _PointerData_device$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.device;
    };
Function _PointerData_pointerIdentifier$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.pointerIdentifier;
    };
Function _PointerData_physicalX$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.physicalX;
    };
Function _PointerData_physicalY$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.physicalY;
    };
Function _PointerData_physicalDeltaX$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.physicalDeltaX;
    };
Function _PointerData_physicalDeltaY$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.physicalDeltaY;
    };
Function _PointerData_buttons$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.buttons;
    };
Function _PointerData_obscured$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.obscured;
    };
Function _PointerData_synthesized$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.synthesized;
    };
Function _PointerData_pressure$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.pressure;
    };
Function _PointerData_pressureMin$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.pressureMin;
    };
Function _PointerData_pressureMax$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.pressureMax;
    };
Function _PointerData_distance$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.distance;
    };
Function _PointerData_distanceMax$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.distanceMax;
    };
Function _PointerData_size$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.size;
    };
Function _PointerData_radiusMajor$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.radiusMajor;
    };
Function _PointerData_radiusMinor$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.radiusMinor;
    };
Function _PointerData_radiusMin$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.radiusMin;
    };
Function _PointerData_radiusMax$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.radiusMax;
    };
Function _PointerData_orientation$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.orientation;
    };
Function _PointerData_tilt$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.tilt;
    };
Function _PointerData_platformData$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.platformData;
    };
Function _PointerData_scrollDeltaX$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.scrollDeltaX;
    };
Function _PointerData_scrollDeltaY$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.scrollDeltaY;
    };
Function _PointerData_panX$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.panX;
    };
Function _PointerData_panY$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.panY;
    };
Function _PointerData_panDeltaX$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.panDeltaX;
    };
Function _PointerData_panDeltaY$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.panDeltaY;
    };
Function _PointerData_scale$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.scale;
    };
Function _PointerData_rotation$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.rotation;
    };
Function _PointerData_preferredStylusAuxiliaryAction$(
  m.Scope scope$,
  PointerData target$,
) =>
    () {
      return target$.preferredStylusAuxiliaryAction;
    };
Function _PointerData__$(m.Scope scope$) => ({
      int? embedderId,
      Duration? timeStamp,
      PointerChange? change,
      PointerDeviceKind? kind,
      PointerSignalKind? signalKind,
      int? device,
      int? pointerIdentifier,
      double? physicalX,
      double? physicalY,
      double? physicalDeltaX,
      double? physicalDeltaY,
      int? buttons,
      bool? obscured,
      bool? synthesized,
      double? pressure,
      double? pressureMin,
      double? pressureMax,
      double? distance,
      double? distanceMax,
      double? size,
      double? radiusMajor,
      double? radiusMinor,
      double? radiusMin,
      double? radiusMax,
      double? orientation,
      double? tilt,
      int? platformData,
      double? scrollDeltaX,
      double? scrollDeltaY,
      double? panX,
      double? panY,
      double? panDeltaX,
      double? panDeltaY,
      double? scale,
      double? rotation,
      PointerPreferredStylusAuxiliaryAction? preferredStylusAuxiliaryAction,
    }) {
      return PointerData(
        buttons: buttons ?? 0,
        change: change ?? PointerChange.cancel,
        device: device ?? 0,
        distance: distance ?? 0.0,
        distanceMax: distanceMax ?? 0.0,
        embedderId: embedderId ?? 0,
        kind: kind ?? PointerDeviceKind.touch,
        obscured: obscured ?? false,
        orientation: orientation ?? 0.0,
        panDeltaX: panDeltaX ?? 0.0,
        panDeltaY: panDeltaY ?? 0.0,
        panX: panX ?? 0.0,
        panY: panY ?? 0.0,
        physicalDeltaX: physicalDeltaX ?? 0.0,
        physicalDeltaY: physicalDeltaY ?? 0.0,
        physicalX: physicalX ?? 0.0,
        physicalY: physicalY ?? 0.0,
        platformData: platformData ?? 0,
        pointerIdentifier: pointerIdentifier ?? 0,
        preferredStylusAuxiliaryAction: preferredStylusAuxiliaryAction ??
            PointerPreferredStylusAuxiliaryAction.ignore,
        pressure: pressure ?? 0.0,
        pressureMax: pressureMax ?? 0.0,
        pressureMin: pressureMin ?? 0.0,
        radiusMajor: radiusMajor ?? 0.0,
        radiusMax: radiusMax ?? 0.0,
        radiusMin: radiusMin ?? 0.0,
        radiusMinor: radiusMinor ?? 0.0,
        rotation: rotation ?? 0.0,
        scale: scale ?? 0.0,
        scrollDeltaX: scrollDeltaX ?? 0.0,
        scrollDeltaY: scrollDeltaY ?? 0.0,
        signalKind: signalKind,
        size: size ?? 0.0,
        synthesized: synthesized ?? false,
        tilt: tilt ?? 0.0,
        timeStamp: timeStamp ?? Duration.zero,
      );
    };
Function _PointerData_toString$(
  m.Scope scope$,
  PointerData target$,
) =>
    target$.toString;
Function _PointerData_toStringFull$(
  m.Scope scope$,
  PointerData target$,
) =>
    target$.toStringFull;
Function PointerDataPacket_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PointerDataPacket;
Function PointerDataPacket_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PointerDataPacket;
Function _PointerDataPacket_data$(
  m.Scope scope$,
  PointerDataPacket target$,
) =>
    () {
      return target$.data;
    };
Function _PointerDataPacket__$(m.Scope scope$) => ({List? data}) {
      return PointerDataPacket(
          data: data == null ? const <PointerData>[] : List.from(data));
    };
PointerChange _PointerChange_cancel$() {
  return PointerChange.cancel;
}

PointerChange _PointerChange_add$() {
  return PointerChange.add;
}

PointerChange _PointerChange_remove$() {
  return PointerChange.remove;
}

PointerChange _PointerChange_hover$() {
  return PointerChange.hover;
}

PointerChange _PointerChange_down$() {
  return PointerChange.down;
}

PointerChange _PointerChange_move$() {
  return PointerChange.move;
}

PointerChange _PointerChange_up$() {
  return PointerChange.up;
}

PointerChange _PointerChange_panZoomStart$() {
  return PointerChange.panZoomStart;
}

PointerChange _PointerChange_panZoomUpdate$() {
  return PointerChange.panZoomUpdate;
}

PointerChange _PointerChange_panZoomEnd$() {
  return PointerChange.panZoomEnd;
}

List<PointerChange> _PointerChange_values$() {
  return PointerChange.values;
}

PointerDeviceKind _PointerDeviceKind_touch$() {
  return PointerDeviceKind.touch;
}

PointerDeviceKind _PointerDeviceKind_mouse$() {
  return PointerDeviceKind.mouse;
}

PointerDeviceKind _PointerDeviceKind_stylus$() {
  return PointerDeviceKind.stylus;
}

PointerDeviceKind _PointerDeviceKind_invertedStylus$() {
  return PointerDeviceKind.invertedStylus;
}

PointerDeviceKind _PointerDeviceKind_trackpad$() {
  return PointerDeviceKind.trackpad;
}

PointerDeviceKind _PointerDeviceKind_unknown$() {
  return PointerDeviceKind.unknown;
}

List<PointerDeviceKind> _PointerDeviceKind_values$() {
  return PointerDeviceKind.values;
}

PointerSignalKind _PointerSignalKind_none$() {
  return PointerSignalKind.none;
}

PointerSignalKind _PointerSignalKind_scroll$() {
  return PointerSignalKind.scroll;
}

PointerSignalKind _PointerSignalKind_scrollInertiaCancel$() {
  return PointerSignalKind.scrollInertiaCancel;
}

PointerSignalKind _PointerSignalKind_scale$() {
  return PointerSignalKind.scale;
}

PointerSignalKind _PointerSignalKind_stylusAuxiliaryAction$() {
  return PointerSignalKind.stylusAuxiliaryAction;
}

PointerSignalKind _PointerSignalKind_unknown$() {
  return PointerSignalKind.unknown;
}

List<PointerSignalKind> _PointerSignalKind_values$() {
  return PointerSignalKind.values;
}

PointerPreferredStylusAuxiliaryAction
    _PointerPreferredStylusAuxiliaryAction_ignore$() {
  return PointerPreferredStylusAuxiliaryAction.ignore;
}

PointerPreferredStylusAuxiliaryAction
    _PointerPreferredStylusAuxiliaryAction_showColorPalette$() {
  return PointerPreferredStylusAuxiliaryAction.showColorPalette;
}

PointerPreferredStylusAuxiliaryAction
    _PointerPreferredStylusAuxiliaryAction_switchEraser$() {
  return PointerPreferredStylusAuxiliaryAction.switchEraser;
}

PointerPreferredStylusAuxiliaryAction
    _PointerPreferredStylusAuxiliaryAction_switchPrevious$() {
  return PointerPreferredStylusAuxiliaryAction.switchPrevious;
}

PointerPreferredStylusAuxiliaryAction
    _PointerPreferredStylusAuxiliaryAction_unknown$() {
  return PointerPreferredStylusAuxiliaryAction.unknown;
}

List<PointerPreferredStylusAuxiliaryAction>
    _PointerPreferredStylusAuxiliaryAction_values$() {
  return PointerPreferredStylusAuxiliaryAction.values;
}

Function SemanticsAction_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SemanticsAction;
Function SemanticsAction_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SemanticsAction;
Function _SemanticsAction_index$(
  m.Scope scope$,
  SemanticsAction target$,
) =>
    () {
      return target$.index;
    };
SemanticsAction _SemanticsAction_tap$() {
  return SemanticsAction.tap;
}

SemanticsAction _SemanticsAction_longPress$() {
  return SemanticsAction.longPress;
}

SemanticsAction _SemanticsAction_scrollLeft$() {
  return SemanticsAction.scrollLeft;
}

SemanticsAction _SemanticsAction_scrollRight$() {
  return SemanticsAction.scrollRight;
}

SemanticsAction _SemanticsAction_scrollUp$() {
  return SemanticsAction.scrollUp;
}

SemanticsAction _SemanticsAction_scrollDown$() {
  return SemanticsAction.scrollDown;
}

SemanticsAction _SemanticsAction_increase$() {
  return SemanticsAction.increase;
}

SemanticsAction _SemanticsAction_decrease$() {
  return SemanticsAction.decrease;
}

SemanticsAction _SemanticsAction_showOnScreen$() {
  return SemanticsAction.showOnScreen;
}

SemanticsAction _SemanticsAction_moveCursorForwardByCharacter$() {
  return SemanticsAction.moveCursorForwardByCharacter;
}

SemanticsAction _SemanticsAction_moveCursorBackwardByCharacter$() {
  return SemanticsAction.moveCursorBackwardByCharacter;
}

SemanticsAction _SemanticsAction_setText$() {
  return SemanticsAction.setText;
}

SemanticsAction _SemanticsAction_setSelection$() {
  return SemanticsAction.setSelection;
}

SemanticsAction _SemanticsAction_copy$() {
  return SemanticsAction.copy;
}

SemanticsAction _SemanticsAction_cut$() {
  return SemanticsAction.cut;
}

SemanticsAction _SemanticsAction_paste$() {
  return SemanticsAction.paste;
}

SemanticsAction _SemanticsAction_didGainAccessibilityFocus$() {
  return SemanticsAction.didGainAccessibilityFocus;
}

SemanticsAction _SemanticsAction_didLoseAccessibilityFocus$() {
  return SemanticsAction.didLoseAccessibilityFocus;
}

SemanticsAction _SemanticsAction_customAction$() {
  return SemanticsAction.customAction;
}

SemanticsAction _SemanticsAction_dismiss$() {
  return SemanticsAction.dismiss;
}

SemanticsAction _SemanticsAction_moveCursorForwardByWord$() {
  return SemanticsAction.moveCursorForwardByWord;
}

SemanticsAction _SemanticsAction_moveCursorBackwardByWord$() {
  return SemanticsAction.moveCursorBackwardByWord;
}

Map<int, SemanticsAction> _SemanticsAction_values$() {
  return SemanticsAction.values;
}

Function _SemanticsAction_toString$(
  m.Scope scope$,
  SemanticsAction target$,
) =>
    target$.toString;
Function SemanticsFlag_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SemanticsFlag;
Function SemanticsFlag_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SemanticsFlag;
Function _SemanticsFlag_index$(
  m.Scope scope$,
  SemanticsFlag target$,
) =>
    () {
      return target$.index;
    };
SemanticsFlag _SemanticsFlag_hasCheckedState$() {
  return SemanticsFlag.hasCheckedState;
}

SemanticsFlag _SemanticsFlag_isChecked$() {
  return SemanticsFlag.isChecked;
}

SemanticsFlag _SemanticsFlag_isCheckStateMixed$() {
  return SemanticsFlag.isCheckStateMixed;
}

SemanticsFlag _SemanticsFlag_isSelected$() {
  return SemanticsFlag.isSelected;
}

SemanticsFlag _SemanticsFlag_isButton$() {
  return SemanticsFlag.isButton;
}

SemanticsFlag _SemanticsFlag_isTextField$() {
  return SemanticsFlag.isTextField;
}

SemanticsFlag _SemanticsFlag_isSlider$() {
  return SemanticsFlag.isSlider;
}

SemanticsFlag _SemanticsFlag_isKeyboardKey$() {
  return SemanticsFlag.isKeyboardKey;
}

SemanticsFlag _SemanticsFlag_isReadOnly$() {
  return SemanticsFlag.isReadOnly;
}

SemanticsFlag _SemanticsFlag_isLink$() {
  return SemanticsFlag.isLink;
}

SemanticsFlag _SemanticsFlag_isFocusable$() {
  return SemanticsFlag.isFocusable;
}

SemanticsFlag _SemanticsFlag_isFocused$() {
  return SemanticsFlag.isFocused;
}

SemanticsFlag _SemanticsFlag_hasEnabledState$() {
  return SemanticsFlag.hasEnabledState;
}

SemanticsFlag _SemanticsFlag_isEnabled$() {
  return SemanticsFlag.isEnabled;
}

SemanticsFlag _SemanticsFlag_isInMutuallyExclusiveGroup$() {
  return SemanticsFlag.isInMutuallyExclusiveGroup;
}

SemanticsFlag _SemanticsFlag_isHeader$() {
  return SemanticsFlag.isHeader;
}

SemanticsFlag _SemanticsFlag_isObscured$() {
  return SemanticsFlag.isObscured;
}

SemanticsFlag _SemanticsFlag_isMultiline$() {
  return SemanticsFlag.isMultiline;
}

SemanticsFlag _SemanticsFlag_scopesRoute$() {
  return SemanticsFlag.scopesRoute;
}

SemanticsFlag _SemanticsFlag_namesRoute$() {
  return SemanticsFlag.namesRoute;
}

SemanticsFlag _SemanticsFlag_isHidden$() {
  return SemanticsFlag.isHidden;
}

SemanticsFlag _SemanticsFlag_isImage$() {
  return SemanticsFlag.isImage;
}

SemanticsFlag _SemanticsFlag_isLiveRegion$() {
  return SemanticsFlag.isLiveRegion;
}

SemanticsFlag _SemanticsFlag_hasToggledState$() {
  return SemanticsFlag.hasToggledState;
}

SemanticsFlag _SemanticsFlag_isToggled$() {
  return SemanticsFlag.isToggled;
}

SemanticsFlag _SemanticsFlag_hasImplicitScrolling$() {
  return SemanticsFlag.hasImplicitScrolling;
}

Map<int, SemanticsFlag> _SemanticsFlag_values$() {
  return SemanticsFlag.values;
}

Function _SemanticsFlag_toString$(
  m.Scope scope$,
  SemanticsFlag target$,
) =>
    target$.toString;
Function StringAttribute_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as StringAttribute;
Function StringAttribute_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is StringAttribute;
Function _StringAttribute_range$(
  m.Scope scope$,
  StringAttribute target$,
) =>
    () {
      return target$.range;
    };
Function _StringAttribute_copy$(
  m.Scope scope$,
  StringAttribute target$,
) =>
    target$.copy;
Function SpellOutStringAttribute_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SpellOutStringAttribute;
Function SpellOutStringAttribute_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SpellOutStringAttribute;
Function _SpellOutStringAttribute__$(m.Scope scope$) =>
    ({required TextRange range}) {
      return SpellOutStringAttribute(range: range);
    };
Function _SpellOutStringAttribute_copy$(
  m.Scope scope$,
  SpellOutStringAttribute target$,
) =>
    target$.copy;
Function _SpellOutStringAttribute_toString$(
  m.Scope scope$,
  SpellOutStringAttribute target$,
) =>
    target$.toString;
Function LocaleStringAttribute_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as LocaleStringAttribute;
Function LocaleStringAttribute_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is LocaleStringAttribute;
Function _LocaleStringAttribute_locale$(
  m.Scope scope$,
  LocaleStringAttribute target$,
) =>
    () {
      return target$.locale;
    };
Function _LocaleStringAttribute__$(m.Scope scope$) => ({
      required TextRange range,
      required Locale locale,
    }) {
      return LocaleStringAttribute(
        locale: locale,
        range: range,
      );
    };
Function _LocaleStringAttribute_copy$(
  m.Scope scope$,
  LocaleStringAttribute target$,
) =>
    target$.copy;
Function _LocaleStringAttribute_toString$(
  m.Scope scope$,
  LocaleStringAttribute target$,
) =>
    target$.toString;
Function SemanticsUpdateBuilder_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SemanticsUpdateBuilder;
Function SemanticsUpdateBuilder_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SemanticsUpdateBuilder;
Function _SemanticsUpdateBuilder__$(m.Scope scope$) => () {
      return SemanticsUpdateBuilder();
    };
Function _SemanticsUpdateBuilder_updateNode$(
  m.Scope scope$,
  SemanticsUpdateBuilder target$,
) =>
    target$.updateNode;
Function _SemanticsUpdateBuilder_updateCustomAction$(
  m.Scope scope$,
  SemanticsUpdateBuilder target$,
) =>
    target$.updateCustomAction;
Function _SemanticsUpdateBuilder_build$(
  m.Scope scope$,
  SemanticsUpdateBuilder target$,
) =>
    target$.build;
Function SemanticsUpdate_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SemanticsUpdate;
Function SemanticsUpdate_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SemanticsUpdate;
Function _SemanticsUpdate_dispose$(
  m.Scope scope$,
  SemanticsUpdate target$,
) =>
    target$.dispose;
Function FontWeight_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FontWeight;
Function FontWeight_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FontWeight;
Function _FontWeight_index$(
  m.Scope scope$,
  FontWeight target$,
) =>
    () {
      return target$.index;
    };
Function _FontWeight_value$(
  m.Scope scope$,
  FontWeight target$,
) =>
    () {
      return target$.value;
    };
FontWeight _FontWeight_w100$() {
  return FontWeight.w100;
}

FontWeight _FontWeight_w200$() {
  return FontWeight.w200;
}

FontWeight _FontWeight_w300$() {
  return FontWeight.w300;
}

FontWeight _FontWeight_w400$() {
  return FontWeight.w400;
}

FontWeight _FontWeight_w500$() {
  return FontWeight.w500;
}

FontWeight _FontWeight_w600$() {
  return FontWeight.w600;
}

FontWeight _FontWeight_w700$() {
  return FontWeight.w700;
}

FontWeight _FontWeight_w800$() {
  return FontWeight.w800;
}

FontWeight _FontWeight_w900$() {
  return FontWeight.w900;
}

FontWeight _FontWeight_normal$() {
  return FontWeight.normal;
}

FontWeight _FontWeight_bold$() {
  return FontWeight.bold;
}

List<FontWeight> _FontWeight_values$() {
  return FontWeight.values;
}

Function _FontWeight_lerp$(m.Scope scope$) => FontWeight.lerp;
Function _FontWeight_toString$(
  m.Scope scope$,
  FontWeight target$,
) =>
    target$.toString;
Function FontFeature_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FontFeature;
Function FontFeature_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FontFeature;
Function _FontFeature_feature$(
  m.Scope scope$,
  FontFeature target$,
) =>
    () {
      return target$.feature;
    };
Function _FontFeature_value$(
  m.Scope scope$,
  FontFeature target$,
) =>
    () {
      return target$.value;
    };
Function _FontFeature_hashCode$(
  m.Scope scope$,
  FontFeature target$,
) =>
    () {
      return target$.hashCode;
    };
Function _FontFeature__$(m.Scope scope$) => (
      String feature, [
      int? value,
    ]) {
      if (value == null) {
        return FontFeature(feature);
      }
      return FontFeature(
        feature,
        value!,
      );
    };
Function _FontFeature_enable_$(m.Scope scope$) => FontFeature.enable;
Function _FontFeature_disable_$(m.Scope scope$) => FontFeature.disable;
Function _FontFeature_alternative_$(m.Scope scope$) => FontFeature.alternative;
Function _FontFeature_alternativeFractions_$(m.Scope scope$) =>
    FontFeature.alternativeFractions;
Function _FontFeature_contextualAlternates_$(m.Scope scope$) =>
    FontFeature.contextualAlternates;
Function _FontFeature_caseSensitiveForms_$(m.Scope scope$) =>
    FontFeature.caseSensitiveForms;
Function _FontFeature_characterVariant_$(m.Scope scope$) =>
    FontFeature.characterVariant;
Function _FontFeature_denominator_$(m.Scope scope$) => FontFeature.denominator;
Function _FontFeature_fractions_$(m.Scope scope$) => FontFeature.fractions;
Function _FontFeature_historicalForms_$(m.Scope scope$) =>
    FontFeature.historicalForms;
Function _FontFeature_historicalLigatures_$(m.Scope scope$) =>
    FontFeature.historicalLigatures;
Function _FontFeature_liningFigures_$(m.Scope scope$) =>
    FontFeature.liningFigures;
Function _FontFeature_localeAware_$(m.Scope scope$) => FontFeature.localeAware;
Function _FontFeature_notationalForms_$(m.Scope scope$) =>
    FontFeature.notationalForms;
Function _FontFeature_numerators_$(m.Scope scope$) => FontFeature.numerators;
Function _FontFeature_oldstyleFigures_$(m.Scope scope$) =>
    FontFeature.oldstyleFigures;
Function _FontFeature_ordinalForms_$(m.Scope scope$) =>
    FontFeature.ordinalForms;
Function _FontFeature_proportionalFigures_$(m.Scope scope$) =>
    FontFeature.proportionalFigures;
Function _FontFeature_randomize_$(m.Scope scope$) => FontFeature.randomize;
Function _FontFeature_stylisticAlternates_$(m.Scope scope$) =>
    FontFeature.stylisticAlternates;
Function _FontFeature_scientificInferiors_$(m.Scope scope$) =>
    FontFeature.scientificInferiors;
Function _FontFeature_stylisticSet_$(m.Scope scope$) =>
    FontFeature.stylisticSet;
Function _FontFeature_subscripts_$(m.Scope scope$) => FontFeature.subscripts;
Function _FontFeature_superscripts_$(m.Scope scope$) =>
    FontFeature.superscripts;
Function _FontFeature_swash_$(m.Scope scope$) => FontFeature.swash;
Function _FontFeature_tabularFigures_$(m.Scope scope$) =>
    FontFeature.tabularFigures;
Function _FontFeature_slashedZero_$(m.Scope scope$) => FontFeature.slashedZero;
Function _FontFeature_eq$$(
  m.Scope scope$,
  FontFeature target$,
) =>
    (Object other$) => target$ == other$;
Function _FontFeature_toString$(
  m.Scope scope$,
  FontFeature target$,
) =>
    target$.toString;
Function FontVariation_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FontVariation;
Function FontVariation_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FontVariation;
Function _FontVariation_axis$(
  m.Scope scope$,
  FontVariation target$,
) =>
    () {
      return target$.axis;
    };
Function _FontVariation_value$(
  m.Scope scope$,
  FontVariation target$,
) =>
    () {
      return target$.value;
    };
Function _FontVariation_hashCode$(
  m.Scope scope$,
  FontVariation target$,
) =>
    () {
      return target$.hashCode;
    };
Function _FontVariation__$(m.Scope scope$) => (
      String axis,
      double value,
    ) {
      return FontVariation(
        axis,
        value,
      );
    };
Function _FontVariation_eq$$(
  m.Scope scope$,
  FontVariation target$,
) =>
    (Object other$) => target$ == other$;
Function _FontVariation_toString$(
  m.Scope scope$,
  FontVariation target$,
) =>
    target$.toString;
Function TextDecoration_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextDecoration;
Function TextDecoration_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextDecoration;
TextDecoration _TextDecoration_none$() {
  return TextDecoration.none;
}

TextDecoration _TextDecoration_underline$() {
  return TextDecoration.underline;
}

TextDecoration _TextDecoration_overline$() {
  return TextDecoration.overline;
}

TextDecoration _TextDecoration_lineThrough$() {
  return TextDecoration.lineThrough;
}

Function _TextDecoration_hashCode$(
  m.Scope scope$,
  TextDecoration target$,
) =>
    () {
      return target$.hashCode;
    };
Function _TextDecoration_combine_$(m.Scope scope$) => TextDecoration.combine;
Function _TextDecoration_contains$(
  m.Scope scope$,
  TextDecoration target$,
) =>
    target$.contains;
Function _TextDecoration_eq$$(
  m.Scope scope$,
  TextDecoration target$,
) =>
    (Object other$) => target$ == other$;
Function _TextDecoration_toString$(
  m.Scope scope$,
  TextDecoration target$,
) =>
    target$.toString;
Function TextHeightBehavior_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextHeightBehavior;
Function TextHeightBehavior_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextHeightBehavior;
Function _TextHeightBehavior_applyHeightToFirstAscent$(
  m.Scope scope$,
  TextHeightBehavior target$,
) =>
    () {
      return target$.applyHeightToFirstAscent;
    };
Function _TextHeightBehavior_applyHeightToLastDescent$(
  m.Scope scope$,
  TextHeightBehavior target$,
) =>
    () {
      return target$.applyHeightToLastDescent;
    };
Function _TextHeightBehavior_leadingDistribution$(
  m.Scope scope$,
  TextHeightBehavior target$,
) =>
    () {
      return target$.leadingDistribution;
    };
Function _TextHeightBehavior_hashCode$(
  m.Scope scope$,
  TextHeightBehavior target$,
) =>
    () {
      return target$.hashCode;
    };
Function _TextHeightBehavior__$(m.Scope scope$) => ({
      bool? applyHeightToFirstAscent,
      bool? applyHeightToLastDescent,
      TextLeadingDistribution? leadingDistribution,
    }) {
      return TextHeightBehavior(
        applyHeightToFirstAscent: applyHeightToFirstAscent ?? true,
        applyHeightToLastDescent: applyHeightToLastDescent ?? true,
        leadingDistribution:
            leadingDistribution ?? TextLeadingDistribution.proportional,
      );
    };
Function _TextHeightBehavior_eq$$(
  m.Scope scope$,
  TextHeightBehavior target$,
) =>
    (Object other$) => target$ == other$;
Function _TextHeightBehavior_toString$(
  m.Scope scope$,
  TextHeightBehavior target$,
) =>
    target$.toString;
Function TextStyle_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextStyle;
Function TextStyle_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextStyle;
Function _TextStyle_hashCode$(
  m.Scope scope$,
  TextStyle target$,
) =>
    () {
      return target$.hashCode;
    };
Function _TextStyle__$(m.Scope scope$) => ({
      Color? color,
      TextDecoration? decoration,
      Color? decorationColor,
      TextDecorationStyle? decorationStyle,
      double? decorationThickness,
      FontWeight? fontWeight,
      FontStyle? fontStyle,
      TextBaseline? textBaseline,
      String? fontFamily,
      List? fontFamilyFallback,
      double? fontSize,
      double? letterSpacing,
      double? wordSpacing,
      double? height,
      TextLeadingDistribution? leadingDistribution,
      Locale? locale,
      Paint? background,
      Paint? foreground,
      List? shadows,
      List? fontFeatures,
      List? fontVariations,
    }) {
      return TextStyle(
        background: background,
        color: color,
        decoration: decoration,
        decorationColor: decorationColor,
        decorationStyle: decorationStyle,
        decorationThickness: decorationThickness,
        fontFamily: fontFamily,
        fontFamilyFallback:
            fontFamilyFallback == null ? null : List.from(fontFamilyFallback),
        fontFeatures: fontFeatures == null ? null : List.from(fontFeatures),
        fontSize: fontSize,
        fontStyle: fontStyle,
        fontVariations:
            fontVariations == null ? null : List.from(fontVariations),
        fontWeight: fontWeight,
        foreground: foreground,
        height: height,
        leadingDistribution: leadingDistribution,
        letterSpacing: letterSpacing,
        locale: locale,
        shadows: shadows == null ? null : List.from(shadows),
        textBaseline: textBaseline,
        wordSpacing: wordSpacing,
      );
    };
Function _TextStyle_eq$$(
  m.Scope scope$,
  TextStyle target$,
) =>
    (Object other$) => target$ == other$;
Function _TextStyle_toString$(
  m.Scope scope$,
  TextStyle target$,
) =>
    target$.toString;
Function ParagraphStyle_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ParagraphStyle;
Function ParagraphStyle_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ParagraphStyle;
Function _ParagraphStyle_hashCode$(
  m.Scope scope$,
  ParagraphStyle target$,
) =>
    () {
      return target$.hashCode;
    };
Function _ParagraphStyle__$(m.Scope scope$) => ({
      TextAlign? textAlign,
      TextDirection? textDirection,
      int? maxLines,
      String? fontFamily,
      double? fontSize,
      double? height,
      TextHeightBehavior? textHeightBehavior,
      FontWeight? fontWeight,
      FontStyle? fontStyle,
      StrutStyle? strutStyle,
      String? ellipsis,
      Locale? locale,
    }) {
      return ParagraphStyle(
        ellipsis: ellipsis,
        fontFamily: fontFamily,
        fontSize: fontSize,
        fontStyle: fontStyle,
        fontWeight: fontWeight,
        height: height,
        locale: locale,
        maxLines: maxLines,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        textHeightBehavior: textHeightBehavior,
      );
    };
Function _ParagraphStyle_eq$$(
  m.Scope scope$,
  ParagraphStyle target$,
) =>
    (Object other$) => target$ == other$;
Function _ParagraphStyle_toString$(
  m.Scope scope$,
  ParagraphStyle target$,
) =>
    target$.toString;
Function StrutStyle_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as StrutStyle;
Function StrutStyle_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is StrutStyle;
Function _StrutStyle_hashCode$(
  m.Scope scope$,
  StrutStyle target$,
) =>
    () {
      return target$.hashCode;
    };
Function _StrutStyle__$(m.Scope scope$) => ({
      String? fontFamily,
      List? fontFamilyFallback,
      double? fontSize,
      double? height,
      TextLeadingDistribution? leadingDistribution,
      double? leading,
      FontWeight? fontWeight,
      FontStyle? fontStyle,
      bool? forceStrutHeight,
    }) {
      return StrutStyle(
        fontFamily: fontFamily,
        fontFamilyFallback:
            fontFamilyFallback == null ? null : List.from(fontFamilyFallback),
        fontSize: fontSize,
        fontStyle: fontStyle,
        fontWeight: fontWeight,
        forceStrutHeight: forceStrutHeight,
        height: height,
        leading: leading,
        leadingDistribution: leadingDistribution,
      );
    };
Function _StrutStyle_eq$$(
  m.Scope scope$,
  StrutStyle target$,
) =>
    (Object other$) => target$ == other$;
Function TextBox_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextBox;
Function TextBox_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextBox;
Function _TextBox_left$(
  m.Scope scope$,
  TextBox target$,
) =>
    () {
      return target$.left;
    };
Function _TextBox_top$(
  m.Scope scope$,
  TextBox target$,
) =>
    () {
      return target$.top;
    };
Function _TextBox_right$(
  m.Scope scope$,
  TextBox target$,
) =>
    () {
      return target$.right;
    };
Function _TextBox_bottom$(
  m.Scope scope$,
  TextBox target$,
) =>
    () {
      return target$.bottom;
    };
Function _TextBox_direction$(
  m.Scope scope$,
  TextBox target$,
) =>
    () {
      return target$.direction;
    };
Function _TextBox_start$(
  m.Scope scope$,
  TextBox target$,
) =>
    () {
      return target$.start;
    };
Function _TextBox_end$(
  m.Scope scope$,
  TextBox target$,
) =>
    () {
      return target$.end;
    };
Function _TextBox_hashCode$(
  m.Scope scope$,
  TextBox target$,
) =>
    () {
      return target$.hashCode;
    };
Function _TextBox_fromLTRBD_$(m.Scope scope$) => TextBox.fromLTRBD;
Function _TextBox_toRect$(
  m.Scope scope$,
  TextBox target$,
) =>
    target$.toRect;
Function _TextBox_eq$$(
  m.Scope scope$,
  TextBox target$,
) =>
    (Object other$) => target$ == other$;
Function _TextBox_toString$(
  m.Scope scope$,
  TextBox target$,
) =>
    target$.toString;
Function TextPosition_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextPosition;
Function TextPosition_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextPosition;
Function _TextPosition_offset$(
  m.Scope scope$,
  TextPosition target$,
) =>
    () {
      return target$.offset;
    };
Function _TextPosition_affinity$(
  m.Scope scope$,
  TextPosition target$,
) =>
    () {
      return target$.affinity;
    };
Function _TextPosition_hashCode$(
  m.Scope scope$,
  TextPosition target$,
) =>
    () {
      return target$.hashCode;
    };
Function _TextPosition__$(m.Scope scope$) => ({
      required int offset,
      TextAffinity? affinity,
    }) {
      return TextPosition(
        affinity: affinity ?? TextAffinity.downstream,
        offset: offset,
      );
    };
Function _TextPosition_eq$$(
  m.Scope scope$,
  TextPosition target$,
) =>
    (Object other$) => target$ == other$;
Function _TextPosition_toString$(
  m.Scope scope$,
  TextPosition target$,
) =>
    target$.toString;
Function TextRange_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TextRange;
Function TextRange_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TextRange;
TextRange _TextRange_empty$() {
  return TextRange.empty;
}

Function _TextRange_start$(
  m.Scope scope$,
  TextRange target$,
) =>
    () {
      return target$.start;
    };
Function _TextRange_end$(
  m.Scope scope$,
  TextRange target$,
) =>
    () {
      return target$.end;
    };
Function _TextRange_isValid$(
  m.Scope scope$,
  TextRange target$,
) =>
    () {
      return target$.isValid;
    };
Function _TextRange_isCollapsed$(
  m.Scope scope$,
  TextRange target$,
) =>
    () {
      return target$.isCollapsed;
    };
Function _TextRange_isNormalized$(
  m.Scope scope$,
  TextRange target$,
) =>
    () {
      return target$.isNormalized;
    };
Function _TextRange_hashCode$(
  m.Scope scope$,
  TextRange target$,
) =>
    () {
      return target$.hashCode;
    };
Function _TextRange__$(m.Scope scope$) => ({
      required int start,
      required int end,
    }) {
      return TextRange(
        end: end,
        start: start,
      );
    };
Function _TextRange_collapsed_$(m.Scope scope$) => TextRange.collapsed;
Function _TextRange_textBefore$(
  m.Scope scope$,
  TextRange target$,
) =>
    target$.textBefore;
Function _TextRange_textAfter$(
  m.Scope scope$,
  TextRange target$,
) =>
    target$.textAfter;
Function _TextRange_textInside$(
  m.Scope scope$,
  TextRange target$,
) =>
    target$.textInside;
Function _TextRange_eq$$(
  m.Scope scope$,
  TextRange target$,
) =>
    (Object other$) => target$ == other$;
Function _TextRange_toString$(
  m.Scope scope$,
  TextRange target$,
) =>
    target$.toString;
Function ParagraphConstraints_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ParagraphConstraints;
Function ParagraphConstraints_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ParagraphConstraints;
Function _ParagraphConstraints_width$(
  m.Scope scope$,
  ParagraphConstraints target$,
) =>
    () {
      return target$.width;
    };
Function _ParagraphConstraints_hashCode$(
  m.Scope scope$,
  ParagraphConstraints target$,
) =>
    () {
      return target$.hashCode;
    };
Function _ParagraphConstraints__$(m.Scope scope$) => ({required double width}) {
      return ParagraphConstraints(width: width);
    };
Function _ParagraphConstraints_eq$$(
  m.Scope scope$,
  ParagraphConstraints target$,
) =>
    (Object other$) => target$ == other$;
Function _ParagraphConstraints_toString$(
  m.Scope scope$,
  ParagraphConstraints target$,
) =>
    target$.toString;
Function LineMetrics_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as LineMetrics;
Function LineMetrics_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is LineMetrics;
Function _LineMetrics_hardBreak$(
  m.Scope scope$,
  LineMetrics target$,
) =>
    () {
      return target$.hardBreak;
    };
Function _LineMetrics_ascent$(
  m.Scope scope$,
  LineMetrics target$,
) =>
    () {
      return target$.ascent;
    };
Function _LineMetrics_descent$(
  m.Scope scope$,
  LineMetrics target$,
) =>
    () {
      return target$.descent;
    };
Function _LineMetrics_unscaledAscent$(
  m.Scope scope$,
  LineMetrics target$,
) =>
    () {
      return target$.unscaledAscent;
    };
Function _LineMetrics_height$(
  m.Scope scope$,
  LineMetrics target$,
) =>
    () {
      return target$.height;
    };
Function _LineMetrics_width$(
  m.Scope scope$,
  LineMetrics target$,
) =>
    () {
      return target$.width;
    };
Function _LineMetrics_left$(
  m.Scope scope$,
  LineMetrics target$,
) =>
    () {
      return target$.left;
    };
Function _LineMetrics_baseline$(
  m.Scope scope$,
  LineMetrics target$,
) =>
    () {
      return target$.baseline;
    };
Function _LineMetrics_lineNumber$(
  m.Scope scope$,
  LineMetrics target$,
) =>
    () {
      return target$.lineNumber;
    };
Function _LineMetrics_hashCode$(
  m.Scope scope$,
  LineMetrics target$,
) =>
    () {
      return target$.hashCode;
    };
Function _LineMetrics__$(m.Scope scope$) => ({
      required bool hardBreak,
      required double ascent,
      required double descent,
      required double unscaledAscent,
      required double height,
      required double width,
      required double left,
      required double baseline,
      required int lineNumber,
    }) {
      return LineMetrics(
        ascent: ascent,
        baseline: baseline,
        descent: descent,
        hardBreak: hardBreak,
        height: height,
        left: left,
        lineNumber: lineNumber,
        unscaledAscent: unscaledAscent,
        width: width,
      );
    };
Function _LineMetrics_eq$$(
  m.Scope scope$,
  LineMetrics target$,
) =>
    (Object other$) => target$ == other$;
Function _LineMetrics_toString$(
  m.Scope scope$,
  LineMetrics target$,
) =>
    target$.toString;
Function Paragraph_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Paragraph;
Function Paragraph_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Paragraph;
Function _Paragraph_width$(
  m.Scope scope$,
  Paragraph target$,
) =>
    () {
      return target$.width;
    };
Function _Paragraph_height$(
  m.Scope scope$,
  Paragraph target$,
) =>
    () {
      return target$.height;
    };
Function _Paragraph_longestLine$(
  m.Scope scope$,
  Paragraph target$,
) =>
    () {
      return target$.longestLine;
    };
Function _Paragraph_minIntrinsicWidth$(
  m.Scope scope$,
  Paragraph target$,
) =>
    () {
      return target$.minIntrinsicWidth;
    };
Function _Paragraph_maxIntrinsicWidth$(
  m.Scope scope$,
  Paragraph target$,
) =>
    () {
      return target$.maxIntrinsicWidth;
    };
Function _Paragraph_alphabeticBaseline$(
  m.Scope scope$,
  Paragraph target$,
) =>
    () {
      return target$.alphabeticBaseline;
    };
Function _Paragraph_ideographicBaseline$(
  m.Scope scope$,
  Paragraph target$,
) =>
    () {
      return target$.ideographicBaseline;
    };
Function _Paragraph_didExceedMaxLines$(
  m.Scope scope$,
  Paragraph target$,
) =>
    () {
      return target$.didExceedMaxLines;
    };
Function _Paragraph_debugDisposed$(
  m.Scope scope$,
  Paragraph target$,
) =>
    () {
      return target$.debugDisposed;
    };
Function _Paragraph_layout$(
  m.Scope scope$,
  Paragraph target$,
) =>
    target$.layout;
Function _Paragraph_getBoxesForRange$(
  m.Scope scope$,
  Paragraph target$,
) =>
    target$.getBoxesForRange;
Function _Paragraph_getBoxesForPlaceholders$(
  m.Scope scope$,
  Paragraph target$,
) =>
    target$.getBoxesForPlaceholders;
Function _Paragraph_getPositionForOffset$(
  m.Scope scope$,
  Paragraph target$,
) =>
    target$.getPositionForOffset;
Function _Paragraph_getWordBoundary$(
  m.Scope scope$,
  Paragraph target$,
) =>
    target$.getWordBoundary;
Function _Paragraph_getLineBoundary$(
  m.Scope scope$,
  Paragraph target$,
) =>
    target$.getLineBoundary;
Function _Paragraph_computeLineMetrics$(
  m.Scope scope$,
  Paragraph target$,
) =>
    target$.computeLineMetrics;
Function _Paragraph_dispose$(
  m.Scope scope$,
  Paragraph target$,
) =>
    target$.dispose;
Function ParagraphBuilder_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ParagraphBuilder;
Function ParagraphBuilder_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ParagraphBuilder;
Function _ParagraphBuilder_placeholderCount$(
  m.Scope scope$,
  ParagraphBuilder target$,
) =>
    () {
      return target$.placeholderCount;
    };
Function _ParagraphBuilder_placeholderScales$(
  m.Scope scope$,
  ParagraphBuilder target$,
) =>
    () {
      return target$.placeholderScales;
    };
Function _ParagraphBuilder__$(m.Scope scope$) => (ParagraphStyle style) {
      return ParagraphBuilder(style);
    };
Function _ParagraphBuilder_pushStyle$(
  m.Scope scope$,
  ParagraphBuilder target$,
) =>
    target$.pushStyle;
Function _ParagraphBuilder_pop$(
  m.Scope scope$,
  ParagraphBuilder target$,
) =>
    target$.pop;
Function _ParagraphBuilder_addText$(
  m.Scope scope$,
  ParagraphBuilder target$,
) =>
    target$.addText;
Function _ParagraphBuilder_addPlaceholder$(
  m.Scope scope$,
  ParagraphBuilder target$,
) =>
    target$.addPlaceholder;
Function _ParagraphBuilder_build$(
  m.Scope scope$,
  ParagraphBuilder target$,
) =>
    target$.build;
FontStyle _FontStyle_normal$() {
  return FontStyle.normal;
}

FontStyle _FontStyle_italic$() {
  return FontStyle.italic;
}

List<FontStyle> _FontStyle_values$() {
  return FontStyle.values;
}

TextAlign _TextAlign_left$() {
  return TextAlign.left;
}

TextAlign _TextAlign_right$() {
  return TextAlign.right;
}

TextAlign _TextAlign_center$() {
  return TextAlign.center;
}

TextAlign _TextAlign_justify$() {
  return TextAlign.justify;
}

TextAlign _TextAlign_start$() {
  return TextAlign.start;
}

TextAlign _TextAlign_end$() {
  return TextAlign.end;
}

List<TextAlign> _TextAlign_values$() {
  return TextAlign.values;
}

TextBaseline _TextBaseline_alphabetic$() {
  return TextBaseline.alphabetic;
}

TextBaseline _TextBaseline_ideographic$() {
  return TextBaseline.ideographic;
}

List<TextBaseline> _TextBaseline_values$() {
  return TextBaseline.values;
}

TextDecorationStyle _TextDecorationStyle_solid$() {
  return TextDecorationStyle.solid;
}

TextDecorationStyle _TextDecorationStyle_double$() {
  return TextDecorationStyle.double;
}

TextDecorationStyle _TextDecorationStyle_dotted$() {
  return TextDecorationStyle.dotted;
}

TextDecorationStyle _TextDecorationStyle_dashed$() {
  return TextDecorationStyle.dashed;
}

TextDecorationStyle _TextDecorationStyle_wavy$() {
  return TextDecorationStyle.wavy;
}

List<TextDecorationStyle> _TextDecorationStyle_values$() {
  return TextDecorationStyle.values;
}

TextLeadingDistribution _TextLeadingDistribution_proportional$() {
  return TextLeadingDistribution.proportional;
}

TextLeadingDistribution _TextLeadingDistribution_even$() {
  return TextLeadingDistribution.even;
}

List<TextLeadingDistribution> _TextLeadingDistribution_values$() {
  return TextLeadingDistribution.values;
}

TextDirection _TextDirection_rtl$() {
  return TextDirection.rtl;
}

TextDirection _TextDirection_ltr$() {
  return TextDirection.ltr;
}

List<TextDirection> _TextDirection_values$() {
  return TextDirection.values;
}

TextAffinity _TextAffinity_upstream$() {
  return TextAffinity.upstream;
}

TextAffinity _TextAffinity_downstream$() {
  return TextAffinity.downstream;
}

List<TextAffinity> _TextAffinity_values$() {
  return TextAffinity.values;
}

BoxHeightStyle _BoxHeightStyle_tight$() {
  return BoxHeightStyle.tight;
}

BoxHeightStyle _BoxHeightStyle_max$() {
  return BoxHeightStyle.max;
}

BoxHeightStyle _BoxHeightStyle_includeLineSpacingMiddle$() {
  return BoxHeightStyle.includeLineSpacingMiddle;
}

BoxHeightStyle _BoxHeightStyle_includeLineSpacingTop$() {
  return BoxHeightStyle.includeLineSpacingTop;
}

BoxHeightStyle _BoxHeightStyle_includeLineSpacingBottom$() {
  return BoxHeightStyle.includeLineSpacingBottom;
}

BoxHeightStyle _BoxHeightStyle_strut$() {
  return BoxHeightStyle.strut;
}

List<BoxHeightStyle> _BoxHeightStyle_values$() {
  return BoxHeightStyle.values;
}

BoxWidthStyle _BoxWidthStyle_tight$() {
  return BoxWidthStyle.tight;
}

BoxWidthStyle _BoxWidthStyle_max$() {
  return BoxWidthStyle.max;
}

List<BoxWidthStyle> _BoxWidthStyle_values$() {
  return BoxWidthStyle.values;
}

PlaceholderAlignment _PlaceholderAlignment_baseline$() {
  return PlaceholderAlignment.baseline;
}

PlaceholderAlignment _PlaceholderAlignment_aboveBaseline$() {
  return PlaceholderAlignment.aboveBaseline;
}

PlaceholderAlignment _PlaceholderAlignment_belowBaseline$() {
  return PlaceholderAlignment.belowBaseline;
}

PlaceholderAlignment _PlaceholderAlignment_top$() {
  return PlaceholderAlignment.top;
}

PlaceholderAlignment _PlaceholderAlignment_bottom$() {
  return PlaceholderAlignment.bottom;
}

PlaceholderAlignment _PlaceholderAlignment_middle$() {
  return PlaceholderAlignment.middle;
}

List<PlaceholderAlignment> _PlaceholderAlignment_values$() {
  return PlaceholderAlignment.values;
}

Function _loadFontFromList$(m.Scope scope$) => loadFontFromList;
SingletonFlutterWindow _window$() {
  return window;
}

Function FlutterView_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FlutterView;
Function FlutterView_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FlutterView;
Function _FlutterView_viewId$(
  m.Scope scope$,
  FlutterView target$,
) =>
    () {
      return target$.viewId;
    };
Function _FlutterView_platformDispatcher$(
  m.Scope scope$,
  FlutterView target$,
) =>
    () {
      return target$.platformDispatcher;
    };
Function _FlutterView_devicePixelRatio$(
  m.Scope scope$,
  FlutterView target$,
) =>
    () {
      return target$.devicePixelRatio;
    };
Function _FlutterView_physicalGeometry$(
  m.Scope scope$,
  FlutterView target$,
) =>
    () {
      return target$.physicalGeometry;
    };
Function _FlutterView_physicalSize$(
  m.Scope scope$,
  FlutterView target$,
) =>
    () {
      return target$.physicalSize;
    };
Function _FlutterView_viewInsets$(
  m.Scope scope$,
  FlutterView target$,
) =>
    () {
      return target$.viewInsets;
    };
Function _FlutterView_viewPadding$(
  m.Scope scope$,
  FlutterView target$,
) =>
    () {
      return target$.viewPadding;
    };
Function _FlutterView_systemGestureInsets$(
  m.Scope scope$,
  FlutterView target$,
) =>
    () {
      return target$.systemGestureInsets;
    };
Function _FlutterView_padding$(
  m.Scope scope$,
  FlutterView target$,
) =>
    () {
      return target$.padding;
    };
Function _FlutterView_gestureSettings$(
  m.Scope scope$,
  FlutterView target$,
) =>
    () {
      return target$.gestureSettings;
    };
Function _FlutterView_displayFeatures$(
  m.Scope scope$,
  FlutterView target$,
) =>
    () {
      return target$.displayFeatures;
    };
Function _FlutterView_render$(
  m.Scope scope$,
  FlutterView target$,
) =>
    target$.render;
Function _FlutterView_updateSemantics$(
  m.Scope scope$,
  FlutterView target$,
) =>
    target$.updateSemantics;
Function AccessibilityFeatures_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AccessibilityFeatures;
Function AccessibilityFeatures_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AccessibilityFeatures;
Function _AccessibilityFeatures_accessibleNavigation$(
  m.Scope scope$,
  AccessibilityFeatures target$,
) =>
    () {
      return target$.accessibleNavigation;
    };
Function _AccessibilityFeatures_invertColors$(
  m.Scope scope$,
  AccessibilityFeatures target$,
) =>
    () {
      return target$.invertColors;
    };
Function _AccessibilityFeatures_disableAnimations$(
  m.Scope scope$,
  AccessibilityFeatures target$,
) =>
    () {
      return target$.disableAnimations;
    };
Function _AccessibilityFeatures_boldText$(
  m.Scope scope$,
  AccessibilityFeatures target$,
) =>
    () {
      return target$.boldText;
    };
Function _AccessibilityFeatures_reduceMotion$(
  m.Scope scope$,
  AccessibilityFeatures target$,
) =>
    () {
      return target$.reduceMotion;
    };
Function _AccessibilityFeatures_highContrast$(
  m.Scope scope$,
  AccessibilityFeatures target$,
) =>
    () {
      return target$.highContrast;
    };
Function _AccessibilityFeatures_onOffSwitchLabels$(
  m.Scope scope$,
  AccessibilityFeatures target$,
) =>
    () {
      return target$.onOffSwitchLabels;
    };
Function _AccessibilityFeatures_hashCode$(
  m.Scope scope$,
  AccessibilityFeatures target$,
) =>
    () {
      return target$.hashCode;
    };
Function _AccessibilityFeatures_toString$(
  m.Scope scope$,
  AccessibilityFeatures target$,
) =>
    target$.toString;
Function _AccessibilityFeatures_eq$$(
  m.Scope scope$,
  AccessibilityFeatures target$,
) =>
    (Object other$) => target$ == other$;
Function FrameData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FrameData;
Function FrameData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FrameData;
Function _FrameData_frameNumber$(
  m.Scope scope$,
  FrameData target$,
) =>
    () {
      return target$.frameNumber;
    };
Function GestureSettings_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as GestureSettings;
Function GestureSettings_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is GestureSettings;
Function _GestureSettings_physicalTouchSlop$(
  m.Scope scope$,
  GestureSettings target$,
) =>
    () {
      return target$.physicalTouchSlop;
    };
Function _GestureSettings_physicalDoubleTapSlop$(
  m.Scope scope$,
  GestureSettings target$,
) =>
    () {
      return target$.physicalDoubleTapSlop;
    };
Function _GestureSettings_hashCode$(
  m.Scope scope$,
  GestureSettings target$,
) =>
    () {
      return target$.hashCode;
    };
Function _GestureSettings__$(m.Scope scope$) => ({
      double? physicalTouchSlop,
      double? physicalDoubleTapSlop,
    }) {
      return GestureSettings(
        physicalDoubleTapSlop: physicalDoubleTapSlop,
        physicalTouchSlop: physicalTouchSlop,
      );
    };
Function _GestureSettings_copyWith$(
  m.Scope scope$,
  GestureSettings target$,
) =>
    target$.copyWith;
Function _GestureSettings_eq$$(
  m.Scope scope$,
  GestureSettings target$,
) =>
    (Object other$) => target$ == other$;
Function _GestureSettings_toString$(
  m.Scope scope$,
  GestureSettings target$,
) =>
    target$.toString;
Brightness _Brightness_dark$() {
  return Brightness.dark;
}

Brightness _Brightness_light$() {
  return Brightness.light;
}

List<Brightness> _Brightness_values$() {
  return Brightness.values;
}
