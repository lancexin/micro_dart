// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/checkbox_list_tile.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/checkbox.dart';
import 'package:flutter/src/material/checkbox_theme.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'package:flutter/src/material/list_tile_theme.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/checkbox_list_tile.dart',
  {},
  {},
  {
    'CheckboxListTile': m.ClassMirror(
      'CheckboxListTile',
      {
        '#as': CheckboxListTile_as$,
        '#is': CheckboxListTile_is$,
        'value': _CheckboxListTile_value$,
        'onChanged': _CheckboxListTile_onChanged$,
        'mouseCursor': _CheckboxListTile_mouseCursor$,
        'activeColor': _CheckboxListTile_activeColor$,
        'fillColor': _CheckboxListTile_fillColor$,
        'checkColor': _CheckboxListTile_checkColor$,
        'hoverColor': _CheckboxListTile_hoverColor$,
        'overlayColor': _CheckboxListTile_overlayColor$,
        'splashRadius': _CheckboxListTile_splashRadius$,
        'materialTapTargetSize': _CheckboxListTile_materialTapTargetSize$,
        'visualDensity': _CheckboxListTile_visualDensity$,
        'focusNode': _CheckboxListTile_focusNode$,
        'autofocus': _CheckboxListTile_autofocus$,
        'shape': _CheckboxListTile_shape$,
        'side': _CheckboxListTile_side$,
        'isError': _CheckboxListTile_isError$,
        'tileColor': _CheckboxListTile_tileColor$,
        'title': _CheckboxListTile_title$,
        'subtitle': _CheckboxListTile_subtitle$,
        'secondary': _CheckboxListTile_secondary$,
        'isThreeLine': _CheckboxListTile_isThreeLine$,
        'dense': _CheckboxListTile_dense$,
        'selected': _CheckboxListTile_selected$,
        'controlAffinity': _CheckboxListTile_controlAffinity$,
        'contentPadding': _CheckboxListTile_contentPadding$,
        'tristate': _CheckboxListTile_tristate$,
        'checkboxShape': _CheckboxListTile_checkboxShape$,
        'selectedTileColor': _CheckboxListTile_selectedTileColor$,
        'onFocusChange': _CheckboxListTile_onFocusChange$,
        'enableFeedback': _CheckboxListTile_enableFeedback$,
        'enabled': _CheckboxListTile_enabled$,
        'build': _CheckboxListTile_build$,
      },
      {},
    )
  },
);
Function CheckboxListTile_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CheckboxListTile;
Function CheckboxListTile_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CheckboxListTile;
bool? _CheckboxListTile_value$(CheckboxListTile target) {
  return target.value;
}

void Function(bool?)? _CheckboxListTile_onChanged$(CheckboxListTile target) {
  return target.onChanged;
}

MouseCursor? _CheckboxListTile_mouseCursor$(CheckboxListTile target) {
  return target.mouseCursor;
}

Color? _CheckboxListTile_activeColor$(CheckboxListTile target) {
  return target.activeColor;
}

MaterialStateProperty<Color?>? _CheckboxListTile_fillColor$(
    CheckboxListTile target) {
  return target.fillColor;
}

Color? _CheckboxListTile_checkColor$(CheckboxListTile target) {
  return target.checkColor;
}

Color? _CheckboxListTile_hoverColor$(CheckboxListTile target) {
  return target.hoverColor;
}

MaterialStateProperty<Color?>? _CheckboxListTile_overlayColor$(
    CheckboxListTile target) {
  return target.overlayColor;
}

double? _CheckboxListTile_splashRadius$(CheckboxListTile target) {
  return target.splashRadius;
}

MaterialTapTargetSize? _CheckboxListTile_materialTapTargetSize$(
    CheckboxListTile target) {
  return target.materialTapTargetSize;
}

VisualDensity? _CheckboxListTile_visualDensity$(CheckboxListTile target) {
  return target.visualDensity;
}

FocusNode? _CheckboxListTile_focusNode$(CheckboxListTile target) {
  return target.focusNode;
}

bool _CheckboxListTile_autofocus$(CheckboxListTile target) {
  return target.autofocus;
}

ShapeBorder? _CheckboxListTile_shape$(CheckboxListTile target) {
  return target.shape;
}

BorderSide? _CheckboxListTile_side$(CheckboxListTile target) {
  return target.side;
}

bool _CheckboxListTile_isError$(CheckboxListTile target) {
  return target.isError;
}

Color? _CheckboxListTile_tileColor$(CheckboxListTile target) {
  return target.tileColor;
}

Widget? _CheckboxListTile_title$(CheckboxListTile target) {
  return target.title;
}

Widget? _CheckboxListTile_subtitle$(CheckboxListTile target) {
  return target.subtitle;
}

Widget? _CheckboxListTile_secondary$(CheckboxListTile target) {
  return target.secondary;
}

bool _CheckboxListTile_isThreeLine$(CheckboxListTile target) {
  return target.isThreeLine;
}

bool? _CheckboxListTile_dense$(CheckboxListTile target) {
  return target.dense;
}

bool _CheckboxListTile_selected$(CheckboxListTile target) {
  return target.selected;
}

ListTileControlAffinity _CheckboxListTile_controlAffinity$(
    CheckboxListTile target) {
  return target.controlAffinity;
}

EdgeInsetsGeometry? _CheckboxListTile_contentPadding$(CheckboxListTile target) {
  return target.contentPadding;
}

bool _CheckboxListTile_tristate$(CheckboxListTile target) {
  return target.tristate;
}

OutlinedBorder? _CheckboxListTile_checkboxShape$(CheckboxListTile target) {
  return target.checkboxShape;
}

Color? _CheckboxListTile_selectedTileColor$(CheckboxListTile target) {
  return target.selectedTileColor;
}

void Function(bool)? _CheckboxListTile_onFocusChange$(CheckboxListTile target) {
  return target.onFocusChange;
}

bool? _CheckboxListTile_enableFeedback$(CheckboxListTile target) {
  return target.enableFeedback;
}

bool? _CheckboxListTile_enabled$(CheckboxListTile target) {
  return target.enabled;
}

Function _CheckboxListTile_build$(
  m.Scope scope,
  CheckboxListTile target,
) =>
    target.build;
