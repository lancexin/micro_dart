// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/checkbox_list_tile.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/checkbox.dart';
import 'package:flutter/src/material/checkbox_theme.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'package:flutter/src/material/list_tile_theme.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/checkbox_list_tile.dart',
  {
    'CheckboxListTile.': _CheckboxListTile__$,
    'CheckboxListTile.adaptive': _CheckboxListTile_adaptive_$,
  },
  {},
  {
    'CheckboxListTile': m.ClassMirror(
      'CheckboxListTile',
      {
        '#as': CheckboxListTile_as$,
        '#is': CheckboxListTile_is$,
        'value': _CheckboxListTile_value$,
        'onChanged': _CheckboxListTile_onChanged$,
        'mouseCursor': _CheckboxListTile_mouseCursor$,
        'activeColor': _CheckboxListTile_activeColor$,
        'fillColor': _CheckboxListTile_fillColor$,
        'checkColor': _CheckboxListTile_checkColor$,
        'hoverColor': _CheckboxListTile_hoverColor$,
        'overlayColor': _CheckboxListTile_overlayColor$,
        'splashRadius': _CheckboxListTile_splashRadius$,
        'materialTapTargetSize': _CheckboxListTile_materialTapTargetSize$,
        'visualDensity': _CheckboxListTile_visualDensity$,
        'focusNode': _CheckboxListTile_focusNode$,
        'autofocus': _CheckboxListTile_autofocus$,
        'shape': _CheckboxListTile_shape$,
        'side': _CheckboxListTile_side$,
        'isError': _CheckboxListTile_isError$,
        'tileColor': _CheckboxListTile_tileColor$,
        'title': _CheckboxListTile_title$,
        'subtitle': _CheckboxListTile_subtitle$,
        'secondary': _CheckboxListTile_secondary$,
        'isThreeLine': _CheckboxListTile_isThreeLine$,
        'dense': _CheckboxListTile_dense$,
        'selected': _CheckboxListTile_selected$,
        'controlAffinity': _CheckboxListTile_controlAffinity$,
        'contentPadding': _CheckboxListTile_contentPadding$,
        'tristate': _CheckboxListTile_tristate$,
        'checkboxShape': _CheckboxListTile_checkboxShape$,
        'selectedTileColor': _CheckboxListTile_selectedTileColor$,
        'onFocusChange': _CheckboxListTile_onFocusChange$,
        'enableFeedback': _CheckboxListTile_enableFeedback$,
        'enabled': _CheckboxListTile_enabled$,
        'build': _CheckboxListTile_build$,
      },
      {},
    )
  },
);
Function CheckboxListTile_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CheckboxListTile;
Function CheckboxListTile_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CheckboxListTile;
Function _CheckboxListTile_value$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.value;
    };
Function _CheckboxListTile_onChanged$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.onChanged;
    };
Function _CheckboxListTile_mouseCursor$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.mouseCursor;
    };
Function _CheckboxListTile_activeColor$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.activeColor;
    };
Function _CheckboxListTile_fillColor$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.fillColor;
    };
Function _CheckboxListTile_checkColor$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.checkColor;
    };
Function _CheckboxListTile_hoverColor$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.hoverColor;
    };
Function _CheckboxListTile_overlayColor$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.overlayColor;
    };
Function _CheckboxListTile_splashRadius$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.splashRadius;
    };
Function _CheckboxListTile_materialTapTargetSize$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.materialTapTargetSize;
    };
Function _CheckboxListTile_visualDensity$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.visualDensity;
    };
Function _CheckboxListTile_focusNode$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.focusNode;
    };
Function _CheckboxListTile_autofocus$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.autofocus;
    };
Function _CheckboxListTile_shape$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.shape;
    };
Function _CheckboxListTile_side$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.side;
    };
Function _CheckboxListTile_isError$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.isError;
    };
Function _CheckboxListTile_tileColor$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.tileColor;
    };
Function _CheckboxListTile_title$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.title;
    };
Function _CheckboxListTile_subtitle$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.subtitle;
    };
Function _CheckboxListTile_secondary$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.secondary;
    };
Function _CheckboxListTile_isThreeLine$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.isThreeLine;
    };
Function _CheckboxListTile_dense$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.dense;
    };
Function _CheckboxListTile_selected$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.selected;
    };
Function _CheckboxListTile_controlAffinity$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.controlAffinity;
    };
Function _CheckboxListTile_contentPadding$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.contentPadding;
    };
Function _CheckboxListTile_tristate$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.tristate;
    };
Function _CheckboxListTile_checkboxShape$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.checkboxShape;
    };
Function _CheckboxListTile_selectedTileColor$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.selectedTileColor;
    };
Function _CheckboxListTile_onFocusChange$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.onFocusChange;
    };
Function _CheckboxListTile_enableFeedback$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.enableFeedback;
    };
Function _CheckboxListTile_enabled$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    () {
      return target$.enabled;
    };
Function _CheckboxListTile__$(m.Scope scope$) => ({
      Key? key,
      required bool? value,
      required m.FunctionPointer? onChanged,
      MouseCursor? mouseCursor,
      Color? activeColor,
      MaterialStateProperty<Color>? fillColor,
      Color? checkColor,
      Color? hoverColor,
      MaterialStateProperty<Color>? overlayColor,
      double? splashRadius,
      MaterialTapTargetSize? materialTapTargetSize,
      VisualDensity? visualDensity,
      FocusNode? focusNode,
      bool? autofocus,
      ShapeBorder? shape,
      BorderSide? side,
      bool? isError,
      bool? enabled,
      Color? tileColor,
      Widget? title,
      Widget? subtitle,
      bool? isThreeLine,
      bool? dense,
      Widget? secondary,
      bool? selected,
      ListTileControlAffinity? controlAffinity,
      EdgeInsetsGeometry? contentPadding,
      bool? tristate,
      OutlinedBorder? checkboxShape,
      Color? selectedTileColor,
      m.FunctionPointer? onFocusChange,
      bool? enableFeedback,
    }) {
      void onChangedProxy(bool? onChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChanged!,
            [onChanged_value$],
            {},
          );
      void onFocusChangeProxy(bool onFocusChange_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onFocusChange!,
            [onFocusChange_value$],
            {},
          );
      return CheckboxListTile(
        activeColor: activeColor,
        autofocus: autofocus ?? false,
        checkColor: checkColor,
        checkboxShape: checkboxShape,
        contentPadding: contentPadding,
        controlAffinity: controlAffinity ?? ListTileControlAffinity.platform,
        dense: dense,
        enableFeedback: enableFeedback,
        enabled: enabled,
        fillColor: fillColor,
        focusNode: focusNode,
        hoverColor: hoverColor,
        isError: isError ?? false,
        isThreeLine: isThreeLine ?? false,
        key: key,
        materialTapTargetSize: materialTapTargetSize,
        mouseCursor: mouseCursor,
        onChanged: onChanged == null ? null : onChangedProxy,
        onFocusChange: onFocusChange == null ? null : onFocusChangeProxy,
        overlayColor: overlayColor,
        secondary: secondary,
        selected: selected ?? false,
        selectedTileColor: selectedTileColor,
        shape: shape,
        side: side,
        splashRadius: splashRadius,
        subtitle: subtitle,
        tileColor: tileColor,
        title: title,
        tristate: tristate ?? false,
        value: value,
        visualDensity: visualDensity,
      );
    };
Function _CheckboxListTile_adaptive_$(m.Scope scope$) => ({
      Key? key,
      required bool? value,
      required m.FunctionPointer? onChanged,
      MouseCursor? mouseCursor,
      Color? activeColor,
      MaterialStateProperty<Color>? fillColor,
      Color? checkColor,
      Color? hoverColor,
      MaterialStateProperty<Color>? overlayColor,
      double? splashRadius,
      MaterialTapTargetSize? materialTapTargetSize,
      VisualDensity? visualDensity,
      FocusNode? focusNode,
      bool? autofocus,
      ShapeBorder? shape,
      BorderSide? side,
      bool? isError,
      bool? enabled,
      Color? tileColor,
      Widget? title,
      Widget? subtitle,
      bool? isThreeLine,
      bool? dense,
      Widget? secondary,
      bool? selected,
      ListTileControlAffinity? controlAffinity,
      EdgeInsetsGeometry? contentPadding,
      bool? tristate,
      OutlinedBorder? checkboxShape,
      Color? selectedTileColor,
      m.FunctionPointer? onFocusChange,
      bool? enableFeedback,
    }) {
      void onChangedProxy(bool? onChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChanged!,
            [onChanged_value$],
            {},
          );
      void onFocusChangeProxy(bool onFocusChange_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onFocusChange!,
            [onFocusChange_value$],
            {},
          );
      return CheckboxListTile.adaptive(
        activeColor: activeColor,
        autofocus: autofocus ?? false,
        checkColor: checkColor,
        checkboxShape: checkboxShape,
        contentPadding: contentPadding,
        controlAffinity: controlAffinity ?? ListTileControlAffinity.platform,
        dense: dense,
        enableFeedback: enableFeedback,
        enabled: enabled,
        fillColor: fillColor,
        focusNode: focusNode,
        hoverColor: hoverColor,
        isError: isError ?? false,
        isThreeLine: isThreeLine ?? false,
        key: key,
        materialTapTargetSize: materialTapTargetSize,
        mouseCursor: mouseCursor,
        onChanged: onChanged == null ? null : onChangedProxy,
        onFocusChange: onFocusChange == null ? null : onFocusChangeProxy,
        overlayColor: overlayColor,
        secondary: secondary,
        selected: selected ?? false,
        selectedTileColor: selectedTileColor,
        shape: shape,
        side: side,
        splashRadius: splashRadius,
        subtitle: subtitle,
        tileColor: tileColor,
        title: title,
        tristate: tristate ?? false,
        value: value,
        visualDensity: visualDensity,
      );
    };
Function _CheckboxListTile_build$(
  m.Scope scope$,
  CheckboxListTile target$,
) =>
    target$.build;
