// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/notification_listener.dart';
import 'package:flutter/src/widgets/scroll_metrics.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/scroll_notification.dart',
  {
    'ScrollStartNotification.': _ScrollStartNotification__$,
    'ScrollUpdateNotification.': _ScrollUpdateNotification__$,
    'OverscrollNotification.': _OverscrollNotification__$,
    'ScrollEndNotification.': _ScrollEndNotification__$,
    'UserScrollNotification.': _UserScrollNotification__$,
    'defaultScrollNotificationPredicate': _defaultScrollNotificationPredicate$,
  },
  {},
  {
    'ScrollNotification': m.ClassMirror(
      'ScrollNotification',
      {
        '#as': ScrollNotification_as$,
        '#is': ScrollNotification_is$,
        'metrics': _ScrollNotification_metrics$,
        'context': _ScrollNotification_context$,
        'debugFillDescription': _ScrollNotification_debugFillDescription$,
      },
      {},
    ),
    'ScrollStartNotification': m.ClassMirror(
      'ScrollStartNotification',
      {
        '#as': ScrollStartNotification_as$,
        '#is': ScrollStartNotification_is$,
        'dragDetails': _ScrollStartNotification_dragDetails$,
        'debugFillDescription': _ScrollStartNotification_debugFillDescription$,
      },
      {},
    ),
    'ScrollUpdateNotification': m.ClassMirror(
      'ScrollUpdateNotification',
      {
        '#as': ScrollUpdateNotification_as$,
        '#is': ScrollUpdateNotification_is$,
        'dragDetails': _ScrollUpdateNotification_dragDetails$,
        'scrollDelta': _ScrollUpdateNotification_scrollDelta$,
        'debugFillDescription': _ScrollUpdateNotification_debugFillDescription$,
      },
      {},
    ),
    'OverscrollNotification': m.ClassMirror(
      'OverscrollNotification',
      {
        '#as': OverscrollNotification_as$,
        '#is': OverscrollNotification_is$,
        'dragDetails': _OverscrollNotification_dragDetails$,
        'overscroll': _OverscrollNotification_overscroll$,
        'velocity': _OverscrollNotification_velocity$,
        'debugFillDescription': _OverscrollNotification_debugFillDescription$,
      },
      {},
    ),
    'ScrollEndNotification': m.ClassMirror(
      'ScrollEndNotification',
      {
        '#as': ScrollEndNotification_as$,
        '#is': ScrollEndNotification_is$,
        'dragDetails': _ScrollEndNotification_dragDetails$,
        'debugFillDescription': _ScrollEndNotification_debugFillDescription$,
      },
      {},
    ),
    'UserScrollNotification': m.ClassMirror(
      'UserScrollNotification',
      {
        '#as': UserScrollNotification_as$,
        '#is': UserScrollNotification_is$,
        'direction': _UserScrollNotification_direction$,
        'debugFillDescription': _UserScrollNotification_debugFillDescription$,
      },
      {},
    ),
  },
);
Function ScrollNotification_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ScrollNotification;
Function ScrollNotification_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ScrollNotification;
Function _ScrollNotification_metrics$(
  m.Scope scope$,
  ScrollNotification target$,
) =>
    () {
      return target$.metrics;
    };
Function _ScrollNotification_context$(
  m.Scope scope$,
  ScrollNotification target$,
) =>
    () {
      return target$.context;
    };
Function _ScrollNotification_debugFillDescription$(
  m.Scope scope$,
  ScrollNotification target$,
) =>
    target$.debugFillDescription;
Function ScrollStartNotification_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ScrollStartNotification;
Function ScrollStartNotification_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ScrollStartNotification;
Function _ScrollStartNotification_dragDetails$(
  m.Scope scope$,
  ScrollStartNotification target$,
) =>
    () {
      return target$.dragDetails;
    };
Function _ScrollStartNotification__$(m.Scope scope$) => ({
      required ScrollMetrics metrics,
      required BuildContext? context,
      DragStartDetails? dragDetails,
    }) {
      return ScrollStartNotification(
        context: context,
        dragDetails: dragDetails,
        metrics: metrics,
      );
    };
Function _ScrollStartNotification_debugFillDescription$(
  m.Scope scope$,
  ScrollStartNotification target$,
) =>
    target$.debugFillDescription;
Function ScrollUpdateNotification_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ScrollUpdateNotification;
Function ScrollUpdateNotification_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ScrollUpdateNotification;
Function _ScrollUpdateNotification_dragDetails$(
  m.Scope scope$,
  ScrollUpdateNotification target$,
) =>
    () {
      return target$.dragDetails;
    };
Function _ScrollUpdateNotification_scrollDelta$(
  m.Scope scope$,
  ScrollUpdateNotification target$,
) =>
    () {
      return target$.scrollDelta;
    };
Function _ScrollUpdateNotification__$(m.Scope scope$) => ({
      required ScrollMetrics metrics,
      required BuildContext context,
      DragUpdateDetails? dragDetails,
      double? scrollDelta,
      int? depth,
    }) {
      return ScrollUpdateNotification(
        context: context,
        depth: depth,
        dragDetails: dragDetails,
        metrics: metrics,
        scrollDelta: scrollDelta,
      );
    };
Function _ScrollUpdateNotification_debugFillDescription$(
  m.Scope scope$,
  ScrollUpdateNotification target$,
) =>
    target$.debugFillDescription;
Function OverscrollNotification_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as OverscrollNotification;
Function OverscrollNotification_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is OverscrollNotification;
Function _OverscrollNotification_dragDetails$(
  m.Scope scope$,
  OverscrollNotification target$,
) =>
    () {
      return target$.dragDetails;
    };
Function _OverscrollNotification_overscroll$(
  m.Scope scope$,
  OverscrollNotification target$,
) =>
    () {
      return target$.overscroll;
    };
Function _OverscrollNotification_velocity$(
  m.Scope scope$,
  OverscrollNotification target$,
) =>
    () {
      return target$.velocity;
    };
Function _OverscrollNotification__$(m.Scope scope$) => ({
      required ScrollMetrics metrics,
      required BuildContext context,
      DragUpdateDetails? dragDetails,
      required double overscroll,
      double? velocity,
    }) {
      return OverscrollNotification(
        context: context,
        dragDetails: dragDetails,
        metrics: metrics,
        overscroll: overscroll,
        velocity: velocity ?? 0.0,
      );
    };
Function _OverscrollNotification_debugFillDescription$(
  m.Scope scope$,
  OverscrollNotification target$,
) =>
    target$.debugFillDescription;
Function ScrollEndNotification_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ScrollEndNotification;
Function ScrollEndNotification_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ScrollEndNotification;
Function _ScrollEndNotification_dragDetails$(
  m.Scope scope$,
  ScrollEndNotification target$,
) =>
    () {
      return target$.dragDetails;
    };
Function _ScrollEndNotification__$(m.Scope scope$) => ({
      required ScrollMetrics metrics,
      required BuildContext context,
      DragEndDetails? dragDetails,
    }) {
      return ScrollEndNotification(
        context: context,
        dragDetails: dragDetails,
        metrics: metrics,
      );
    };
Function _ScrollEndNotification_debugFillDescription$(
  m.Scope scope$,
  ScrollEndNotification target$,
) =>
    target$.debugFillDescription;
Function UserScrollNotification_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as UserScrollNotification;
Function UserScrollNotification_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is UserScrollNotification;
Function _UserScrollNotification_direction$(
  m.Scope scope$,
  UserScrollNotification target$,
) =>
    () {
      return target$.direction;
    };
Function _UserScrollNotification__$(m.Scope scope$) => ({
      required ScrollMetrics metrics,
      required BuildContext context,
      required ScrollDirection direction,
    }) {
      return UserScrollNotification(
        context: context,
        direction: direction,
        metrics: metrics,
      );
    };
Function _UserScrollNotification_debugFillDescription$(
  m.Scope scope$,
  UserScrollNotification target$,
) =>
    target$.debugFillDescription;
Function _defaultScrollNotificationPredicate$(m.Scope scope$) =>
    defaultScrollNotificationPredicate;
