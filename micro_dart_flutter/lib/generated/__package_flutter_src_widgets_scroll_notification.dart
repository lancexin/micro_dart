// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/notification_listener.dart';
import 'package:flutter/src/widgets/scroll_metrics.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/scroll_notification.dart',
  {'defaultScrollNotificationPredicate': _defaultScrollNotificationPredicate$},
  {},
  {
    'ScrollNotification': m.ClassMirror(
      'ScrollNotification',
      {
        '#as': ScrollNotification_as$,
        '#is': ScrollNotification_is$,
        'metrics': _ScrollNotification_metrics$,
        'context': _ScrollNotification_context$,
        'debugFillDescription': _ScrollNotification_debugFillDescription$,
      },
      {},
    ),
    'ScrollStartNotification': m.ClassMirror(
      'ScrollStartNotification',
      {
        '#as': ScrollStartNotification_as$,
        '#is': ScrollStartNotification_is$,
        'dragDetails': _ScrollStartNotification_dragDetails$,
        'debugFillDescription': _ScrollStartNotification_debugFillDescription$,
      },
      {},
    ),
    'ScrollUpdateNotification': m.ClassMirror(
      'ScrollUpdateNotification',
      {
        '#as': ScrollUpdateNotification_as$,
        '#is': ScrollUpdateNotification_is$,
        'dragDetails': _ScrollUpdateNotification_dragDetails$,
        'scrollDelta': _ScrollUpdateNotification_scrollDelta$,
        'debugFillDescription': _ScrollUpdateNotification_debugFillDescription$,
      },
      {},
    ),
    'OverscrollNotification': m.ClassMirror(
      'OverscrollNotification',
      {
        '#as': OverscrollNotification_as$,
        '#is': OverscrollNotification_is$,
        'dragDetails': _OverscrollNotification_dragDetails$,
        'overscroll': _OverscrollNotification_overscroll$,
        'velocity': _OverscrollNotification_velocity$,
        'debugFillDescription': _OverscrollNotification_debugFillDescription$,
      },
      {},
    ),
    'ScrollEndNotification': m.ClassMirror(
      'ScrollEndNotification',
      {
        '#as': ScrollEndNotification_as$,
        '#is': ScrollEndNotification_is$,
        'dragDetails': _ScrollEndNotification_dragDetails$,
        'debugFillDescription': _ScrollEndNotification_debugFillDescription$,
      },
      {},
    ),
    'UserScrollNotification': m.ClassMirror(
      'UserScrollNotification',
      {
        '#as': UserScrollNotification_as$,
        '#is': UserScrollNotification_is$,
        'direction': _UserScrollNotification_direction$,
        'debugFillDescription': _UserScrollNotification_debugFillDescription$,
      },
      {},
    ),
  },
);
Function ScrollNotification_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ScrollNotification;
Function ScrollNotification_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ScrollNotification;
ScrollMetrics _ScrollNotification_metrics$(ScrollNotification target) {
  return target.metrics;
}

BuildContext? _ScrollNotification_context$(ScrollNotification target) {
  return target.context;
}

Function _ScrollNotification_debugFillDescription$(
  m.Scope scope,
  ScrollNotification target,
) =>
    target.debugFillDescription;
Function ScrollStartNotification_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ScrollStartNotification;
Function ScrollStartNotification_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ScrollStartNotification;
DragStartDetails? _ScrollStartNotification_dragDetails$(
    ScrollStartNotification target) {
  return target.dragDetails;
}

Function _ScrollStartNotification_debugFillDescription$(
  m.Scope scope,
  ScrollStartNotification target,
) =>
    target.debugFillDescription;
Function ScrollUpdateNotification_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ScrollUpdateNotification;
Function ScrollUpdateNotification_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ScrollUpdateNotification;
DragUpdateDetails? _ScrollUpdateNotification_dragDetails$(
    ScrollUpdateNotification target) {
  return target.dragDetails;
}

double? _ScrollUpdateNotification_scrollDelta$(
    ScrollUpdateNotification target) {
  return target.scrollDelta;
}

Function _ScrollUpdateNotification_debugFillDescription$(
  m.Scope scope,
  ScrollUpdateNotification target,
) =>
    target.debugFillDescription;
Function OverscrollNotification_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as OverscrollNotification;
Function OverscrollNotification_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is OverscrollNotification;
DragUpdateDetails? _OverscrollNotification_dragDetails$(
    OverscrollNotification target) {
  return target.dragDetails;
}

double _OverscrollNotification_overscroll$(OverscrollNotification target) {
  return target.overscroll;
}

double _OverscrollNotification_velocity$(OverscrollNotification target) {
  return target.velocity;
}

Function _OverscrollNotification_debugFillDescription$(
  m.Scope scope,
  OverscrollNotification target,
) =>
    target.debugFillDescription;
Function ScrollEndNotification_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ScrollEndNotification;
Function ScrollEndNotification_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ScrollEndNotification;
DragEndDetails? _ScrollEndNotification_dragDetails$(
    ScrollEndNotification target) {
  return target.dragDetails;
}

Function _ScrollEndNotification_debugFillDescription$(
  m.Scope scope,
  ScrollEndNotification target,
) =>
    target.debugFillDescription;
Function UserScrollNotification_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as UserScrollNotification;
Function UserScrollNotification_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is UserScrollNotification;
ScrollDirection _UserScrollNotification_direction$(
    UserScrollNotification target) {
  return target.direction;
}

Function _UserScrollNotification_debugFillDescription$(
  m.Scope scope,
  UserScrollNotification target,
) =>
    target.debugFillDescription;
Function _defaultScrollNotificationPredicate$(m.Scope scope) =>
    defaultScrollNotificationPredicate;
