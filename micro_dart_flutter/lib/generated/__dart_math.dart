// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'dart:math';

const libraryMirror = m.LibraryMirror(
  'dart:math',
  {
    'e': _e$,
    'ln10': _ln10$,
    'ln2': _ln2$,
    'log2e': _log2e$,
    'log10e': _log10e$,
    'pi': _pi$,
    'sqrt1_2': _sqrt1_2$,
    'sqrt2': _sqrt2$,
    'min': _min$,
    'max': _max$,
    'atan2': _atan2$,
    'pow': _pow$,
    'sin': _sin$,
    'cos': _cos$,
    'tan': _tan$,
    'acos': _acos$,
    'asin': _asin$,
    'atan': _atan$,
    'sqrt': _sqrt$,
    'exp': _exp$,
    'log': _log$,
  },
  {},
  {
    'Point': m.ClassMirror(
      'Point',
      {
        'x': _Point_x$,
        'y': _Point_y$,
        'hashCode': _Point_hashCode$,
        'magnitude': _Point_magnitude$,
        'toString': _Point_toString$,
        'distanceTo': _Point_distanceTo$,
        'squaredDistanceTo': _Point_squaredDistanceTo$,
      },
      {},
    ),
    'Random': m.ClassMirror(
      'Random',
      {
        'nextInt': _Random_nextInt$,
        'nextDouble': _Random_nextDouble$,
        'nextBool': _Random_nextBool$,
      },
      {},
    ),
    'Rectangle': m.ClassMirror(
      'Rectangle',
      {
        'left': _Rectangle_left$,
        'top': _Rectangle_top$,
        'width': _Rectangle_width$,
        'height': _Rectangle_height$,
      },
      {},
    ),
    'MutableRectangle': m.ClassMirror(
      'MutableRectangle',
      {
        'left': _MutableRectangle_left$,
        'top': _MutableRectangle_top$,
        'width': _MutableRectangle_width$,
        'height': _MutableRectangle_height$,
      },
      {
        'left': _MutableRectangle_left_set$,
        'top': _MutableRectangle_top_set$,
        'width': _MutableRectangle_width_set$,
        'height': _MutableRectangle_height_set$,
      },
    ),
  },
);
double _e$() {
  return e;
}

double _ln10$() {
  return ln10;
}

double _ln2$() {
  return ln2;
}

double _log2e$() {
  return log2e;
}

double _log10e$() {
  return log10e;
}

double _pi$() {
  return pi;
}

double _sqrt1_2$() {
  return sqrt1_2;
}

double _sqrt2$() {
  return sqrt2;
}

Function _min$<T extends num>(m.Scope scope) => min<T>;
Function _max$<T extends num>(m.Scope scope) => max<T>;
Function _atan2$(m.Scope scope) => atan2;
Function _pow$(m.Scope scope) => pow;
Function _sin$(m.Scope scope) => sin;
Function _cos$(m.Scope scope) => cos;
Function _tan$(m.Scope scope) => tan;
Function _acos$(m.Scope scope) => acos;
Function _asin$(m.Scope scope) => asin;
Function _atan$(m.Scope scope) => atan;
Function _sqrt$(m.Scope scope) => sqrt;
Function _exp$(m.Scope scope) => exp;
Function _log$(m.Scope scope) => log;
T _Point_x$<T extends num>(Point<T> target) {
  return target.x;
}

T _Point_y$<T extends num>(Point<T> target) {
  return target.y;
}

int _Point_hashCode$<T extends num>(Point<T> target) {
  return target.hashCode;
}

double _Point_magnitude$<T extends num>(Point<T> target) {
  return target.magnitude;
}

Function _Point_toString$<T extends num>(
  m.Scope scope,
  Point<T> target,
) =>
    target.toString;
Function _Point_distanceTo$<T extends num>(
  m.Scope scope,
  Point<T> target,
) =>
    target.distanceTo;
Function _Point_squaredDistanceTo$<T extends num>(
  m.Scope scope,
  Point<T> target,
) =>
    target.squaredDistanceTo;
Function _Random_nextInt$(
  m.Scope scope,
  Random target,
) =>
    target.nextInt;
Function _Random_nextDouble$(
  m.Scope scope,
  Random target,
) =>
    target.nextDouble;
Function _Random_nextBool$(
  m.Scope scope,
  Random target,
) =>
    target.nextBool;
T _Rectangle_left$<T extends num>(Rectangle<T> target) {
  return target.left;
}

T _Rectangle_top$<T extends num>(Rectangle<T> target) {
  return target.top;
}

T _Rectangle_width$<T extends num>(Rectangle<T> target) {
  return target.width;
}

T _Rectangle_height$<T extends num>(Rectangle<T> target) {
  return target.height;
}

T _MutableRectangle_left$<T extends num>(MutableRectangle<T> target) {
  return target.left;
}

void _MutableRectangle_left_set$<T extends num>(
  MutableRectangle<T> target,
  T other,
) {
  target.left = other;
}

T _MutableRectangle_top$<T extends num>(MutableRectangle<T> target) {
  return target.top;
}

void _MutableRectangle_top_set$<T extends num>(
  MutableRectangle<T> target,
  T other,
) {
  target.top = other;
}

T _MutableRectangle_width$<T extends num>(MutableRectangle<T> target) {
  return target.width;
}

void _MutableRectangle_width_set$<T extends num>(
  MutableRectangle<T> target,
  T other,
) {
  target.width = other;
}

T _MutableRectangle_height$<T extends num>(MutableRectangle<T> target) {
  return target.height;
}

void _MutableRectangle_height_set$<T extends num>(
  MutableRectangle<T> target,
  T other,
) {
  target.height = other;
}
