// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/text_editing_intents.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/actions.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/text_editing_intents.dart',
  {
    'DoNothingAndStopPropagationTextIntent.':
        _DoNothingAndStopPropagationTextIntent__$,
    'DeleteCharacterIntent.': _DeleteCharacterIntent__$,
    'DeleteToNextWordBoundaryIntent.': _DeleteToNextWordBoundaryIntent__$,
    'DeleteToLineBreakIntent.': _DeleteToLineBreakIntent__$,
    'ExtendSelectionByCharacterIntent.': _ExtendSelectionByCharacterIntent__$,
    'ExtendSelectionToNextWordBoundaryIntent.':
        _ExtendSelectionToNextWordBoundaryIntent__$,
    'ExtendSelectionToNextWordBoundaryOrCaretLocationIntent.':
        _ExtendSelectionToNextWordBoundaryOrCaretLocationIntent__$,
    'ExpandSelectionToDocumentBoundaryIntent.':
        _ExpandSelectionToDocumentBoundaryIntent__$,
    'ExpandSelectionToLineBreakIntent.': _ExpandSelectionToLineBreakIntent__$,
    'ExtendSelectionToLineBreakIntent.': _ExtendSelectionToLineBreakIntent__$,
    'ExtendSelectionVerticallyToAdjacentLineIntent.':
        _ExtendSelectionVerticallyToAdjacentLineIntent__$,
    'ExtendSelectionVerticallyToAdjacentPageIntent.':
        _ExtendSelectionVerticallyToAdjacentPageIntent__$,
    'ExtendSelectionToNextParagraphBoundaryIntent.':
        _ExtendSelectionToNextParagraphBoundaryIntent__$,
    'ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent.':
        _ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent__$,
    'ExtendSelectionToDocumentBoundaryIntent.':
        _ExtendSelectionToDocumentBoundaryIntent__$,
    'ScrollToDocumentBoundaryIntent.': _ScrollToDocumentBoundaryIntent__$,
    'ExtendSelectionByPageIntent.': _ExtendSelectionByPageIntent__$,
    'SelectAllTextIntent.': _SelectAllTextIntent__$,
    'CopySelectionTextIntent.copy': _CopySelectionTextIntent_copy$,
    'CopySelectionTextIntent.cut': _CopySelectionTextIntent_cut_$,
    'PasteTextIntent.': _PasteTextIntent__$,
    'RedoTextIntent.': _RedoTextIntent__$,
    'ReplaceTextIntent.': _ReplaceTextIntent__$,
    'UndoTextIntent.': _UndoTextIntent__$,
    'UpdateSelectionIntent.': _UpdateSelectionIntent__$,
    'TransposeCharactersIntent.': _TransposeCharactersIntent__$,
  },
  {},
  {
    'DoNothingAndStopPropagationTextIntent': m.ClassMirror(
      'DoNothingAndStopPropagationTextIntent',
      {
        '#as': DoNothingAndStopPropagationTextIntent_as$,
        '#is': DoNothingAndStopPropagationTextIntent_is$,
      },
      {},
    ),
    'DirectionalTextEditingIntent': m.ClassMirror(
      'DirectionalTextEditingIntent',
      {
        '#as': DirectionalTextEditingIntent_as$,
        '#is': DirectionalTextEditingIntent_is$,
        'forward': _DirectionalTextEditingIntent_forward$,
      },
      {},
    ),
    'DeleteCharacterIntent': m.ClassMirror(
      'DeleteCharacterIntent',
      {
        '#as': DeleteCharacterIntent_as$,
        '#is': DeleteCharacterIntent_is$,
      },
      {},
    ),
    'DeleteToNextWordBoundaryIntent': m.ClassMirror(
      'DeleteToNextWordBoundaryIntent',
      {
        '#as': DeleteToNextWordBoundaryIntent_as$,
        '#is': DeleteToNextWordBoundaryIntent_is$,
      },
      {},
    ),
    'DeleteToLineBreakIntent': m.ClassMirror(
      'DeleteToLineBreakIntent',
      {
        '#as': DeleteToLineBreakIntent_as$,
        '#is': DeleteToLineBreakIntent_is$,
      },
      {},
    ),
    'DirectionalCaretMovementIntent': m.ClassMirror(
      'DirectionalCaretMovementIntent',
      {
        '#as': DirectionalCaretMovementIntent_as$,
        '#is': DirectionalCaretMovementIntent_is$,
        'collapseSelection': _DirectionalCaretMovementIntent_collapseSelection$,
        'collapseAtReversal':
            _DirectionalCaretMovementIntent_collapseAtReversal$,
        'continuesAtWrap': _DirectionalCaretMovementIntent_continuesAtWrap$,
      },
      {},
    ),
    'ExtendSelectionByCharacterIntent': m.ClassMirror(
      'ExtendSelectionByCharacterIntent',
      {
        '#as': ExtendSelectionByCharacterIntent_as$,
        '#is': ExtendSelectionByCharacterIntent_is$,
      },
      {},
    ),
    'ExtendSelectionToNextWordBoundaryIntent': m.ClassMirror(
      'ExtendSelectionToNextWordBoundaryIntent',
      {
        '#as': ExtendSelectionToNextWordBoundaryIntent_as$,
        '#is': ExtendSelectionToNextWordBoundaryIntent_is$,
      },
      {},
    ),
    'ExtendSelectionToNextWordBoundaryOrCaretLocationIntent': m.ClassMirror(
      'ExtendSelectionToNextWordBoundaryOrCaretLocationIntent',
      {
        '#as': ExtendSelectionToNextWordBoundaryOrCaretLocationIntent_as$,
        '#is': ExtendSelectionToNextWordBoundaryOrCaretLocationIntent_is$,
      },
      {},
    ),
    'ExpandSelectionToDocumentBoundaryIntent': m.ClassMirror(
      'ExpandSelectionToDocumentBoundaryIntent',
      {
        '#as': ExpandSelectionToDocumentBoundaryIntent_as$,
        '#is': ExpandSelectionToDocumentBoundaryIntent_is$,
      },
      {},
    ),
    'ExpandSelectionToLineBreakIntent': m.ClassMirror(
      'ExpandSelectionToLineBreakIntent',
      {
        '#as': ExpandSelectionToLineBreakIntent_as$,
        '#is': ExpandSelectionToLineBreakIntent_is$,
      },
      {},
    ),
    'ExtendSelectionToLineBreakIntent': m.ClassMirror(
      'ExtendSelectionToLineBreakIntent',
      {
        '#as': ExtendSelectionToLineBreakIntent_as$,
        '#is': ExtendSelectionToLineBreakIntent_is$,
      },
      {},
    ),
    'ExtendSelectionVerticallyToAdjacentLineIntent': m.ClassMirror(
      'ExtendSelectionVerticallyToAdjacentLineIntent',
      {
        '#as': ExtendSelectionVerticallyToAdjacentLineIntent_as$,
        '#is': ExtendSelectionVerticallyToAdjacentLineIntent_is$,
      },
      {},
    ),
    'ExtendSelectionVerticallyToAdjacentPageIntent': m.ClassMirror(
      'ExtendSelectionVerticallyToAdjacentPageIntent',
      {
        '#as': ExtendSelectionVerticallyToAdjacentPageIntent_as$,
        '#is': ExtendSelectionVerticallyToAdjacentPageIntent_is$,
      },
      {},
    ),
    'ExtendSelectionToNextParagraphBoundaryIntent': m.ClassMirror(
      'ExtendSelectionToNextParagraphBoundaryIntent',
      {
        '#as': ExtendSelectionToNextParagraphBoundaryIntent_as$,
        '#is': ExtendSelectionToNextParagraphBoundaryIntent_is$,
      },
      {},
    ),
    'ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent':
        m.ClassMirror(
      'ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent',
      {
        '#as': ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent_as$,
        '#is': ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent_is$,
      },
      {},
    ),
    'ExtendSelectionToDocumentBoundaryIntent': m.ClassMirror(
      'ExtendSelectionToDocumentBoundaryIntent',
      {
        '#as': ExtendSelectionToDocumentBoundaryIntent_as$,
        '#is': ExtendSelectionToDocumentBoundaryIntent_is$,
      },
      {},
    ),
    'ScrollToDocumentBoundaryIntent': m.ClassMirror(
      'ScrollToDocumentBoundaryIntent',
      {
        '#as': ScrollToDocumentBoundaryIntent_as$,
        '#is': ScrollToDocumentBoundaryIntent_is$,
      },
      {},
    ),
    'ExtendSelectionByPageIntent': m.ClassMirror(
      'ExtendSelectionByPageIntent',
      {
        '#as': ExtendSelectionByPageIntent_as$,
        '#is': ExtendSelectionByPageIntent_is$,
      },
      {},
    ),
    'SelectAllTextIntent': m.ClassMirror(
      'SelectAllTextIntent',
      {
        '#as': SelectAllTextIntent_as$,
        '#is': SelectAllTextIntent_is$,
        'cause': _SelectAllTextIntent_cause$,
      },
      {},
    ),
    'CopySelectionTextIntent': m.ClassMirror(
      'CopySelectionTextIntent',
      {
        '#as': CopySelectionTextIntent_as$,
        '#is': CopySelectionTextIntent_is$,
        'cause': _CopySelectionTextIntent_cause$,
        'collapseSelection': _CopySelectionTextIntent_collapseSelection$,
      },
      {},
    ),
    'PasteTextIntent': m.ClassMirror(
      'PasteTextIntent',
      {
        '#as': PasteTextIntent_as$,
        '#is': PasteTextIntent_is$,
        'cause': _PasteTextIntent_cause$,
      },
      {},
    ),
    'RedoTextIntent': m.ClassMirror(
      'RedoTextIntent',
      {
        '#as': RedoTextIntent_as$,
        '#is': RedoTextIntent_is$,
        'cause': _RedoTextIntent_cause$,
      },
      {},
    ),
    'ReplaceTextIntent': m.ClassMirror(
      'ReplaceTextIntent',
      {
        '#as': ReplaceTextIntent_as$,
        '#is': ReplaceTextIntent_is$,
        'currentTextEditingValue': _ReplaceTextIntent_currentTextEditingValue$,
        'replacementText': _ReplaceTextIntent_replacementText$,
        'replacementRange': _ReplaceTextIntent_replacementRange$,
        'cause': _ReplaceTextIntent_cause$,
      },
      {},
    ),
    'UndoTextIntent': m.ClassMirror(
      'UndoTextIntent',
      {
        '#as': UndoTextIntent_as$,
        '#is': UndoTextIntent_is$,
        'cause': _UndoTextIntent_cause$,
      },
      {},
    ),
    'UpdateSelectionIntent': m.ClassMirror(
      'UpdateSelectionIntent',
      {
        '#as': UpdateSelectionIntent_as$,
        '#is': UpdateSelectionIntent_is$,
        'currentTextEditingValue':
            _UpdateSelectionIntent_currentTextEditingValue$,
        'newSelection': _UpdateSelectionIntent_newSelection$,
        'cause': _UpdateSelectionIntent_cause$,
      },
      {},
    ),
    'TransposeCharactersIntent': m.ClassMirror(
      'TransposeCharactersIntent',
      {
        '#as': TransposeCharactersIntent_as$,
        '#is': TransposeCharactersIntent_is$,
      },
      {},
    ),
  },
);
Function DoNothingAndStopPropagationTextIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DoNothingAndStopPropagationTextIntent;
Function DoNothingAndStopPropagationTextIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DoNothingAndStopPropagationTextIntent;
Function _DoNothingAndStopPropagationTextIntent__$(m.Scope scope$) => () {
      return DoNothingAndStopPropagationTextIntent();
    };
Function DirectionalTextEditingIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DirectionalTextEditingIntent;
Function DirectionalTextEditingIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DirectionalTextEditingIntent;
Function _DirectionalTextEditingIntent_forward$(
  m.Scope scope$,
  DirectionalTextEditingIntent target$,
) =>
    () {
      return target$.forward;
    };
Function DeleteCharacterIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DeleteCharacterIntent;
Function DeleteCharacterIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DeleteCharacterIntent;
Function _DeleteCharacterIntent__$(m.Scope scope$) =>
    ({required bool forward}) {
      return DeleteCharacterIntent(forward: forward);
    };
Function DeleteToNextWordBoundaryIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DeleteToNextWordBoundaryIntent;
Function DeleteToNextWordBoundaryIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DeleteToNextWordBoundaryIntent;
Function _DeleteToNextWordBoundaryIntent__$(m.Scope scope$) =>
    ({required bool forward}) {
      return DeleteToNextWordBoundaryIntent(forward: forward);
    };
Function DeleteToLineBreakIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DeleteToLineBreakIntent;
Function DeleteToLineBreakIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DeleteToLineBreakIntent;
Function _DeleteToLineBreakIntent__$(m.Scope scope$) =>
    ({required bool forward}) {
      return DeleteToLineBreakIntent(forward: forward);
    };
Function DirectionalCaretMovementIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DirectionalCaretMovementIntent;
Function DirectionalCaretMovementIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DirectionalCaretMovementIntent;
Function _DirectionalCaretMovementIntent_collapseSelection$(
  m.Scope scope$,
  DirectionalCaretMovementIntent target$,
) =>
    () {
      return target$.collapseSelection;
    };
Function _DirectionalCaretMovementIntent_collapseAtReversal$(
  m.Scope scope$,
  DirectionalCaretMovementIntent target$,
) =>
    () {
      return target$.collapseAtReversal;
    };
Function _DirectionalCaretMovementIntent_continuesAtWrap$(
  m.Scope scope$,
  DirectionalCaretMovementIntent target$,
) =>
    () {
      return target$.continuesAtWrap;
    };
Function ExtendSelectionByCharacterIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ExtendSelectionByCharacterIntent;
Function ExtendSelectionByCharacterIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ExtendSelectionByCharacterIntent;
Function _ExtendSelectionByCharacterIntent__$(m.Scope scope$) => ({
      required bool forward,
      required bool collapseSelection,
    }) {
      return ExtendSelectionByCharacterIntent(
        collapseSelection: collapseSelection,
        forward: forward,
      );
    };
Function ExtendSelectionToNextWordBoundaryIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ExtendSelectionToNextWordBoundaryIntent;
Function ExtendSelectionToNextWordBoundaryIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ExtendSelectionToNextWordBoundaryIntent;
Function _ExtendSelectionToNextWordBoundaryIntent__$(m.Scope scope$) => ({
      required bool forward,
      required bool collapseSelection,
    }) {
      return ExtendSelectionToNextWordBoundaryIntent(
        collapseSelection: collapseSelection,
        forward: forward,
      );
    };
Function ExtendSelectionToNextWordBoundaryOrCaretLocationIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ExtendSelectionToNextWordBoundaryOrCaretLocationIntent;
Function ExtendSelectionToNextWordBoundaryOrCaretLocationIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ExtendSelectionToNextWordBoundaryOrCaretLocationIntent;
Function _ExtendSelectionToNextWordBoundaryOrCaretLocationIntent__$(
        m.Scope scope$) =>
    ({required bool forward}) {
      return ExtendSelectionToNextWordBoundaryOrCaretLocationIntent(
          forward: forward);
    };
Function ExpandSelectionToDocumentBoundaryIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ExpandSelectionToDocumentBoundaryIntent;
Function ExpandSelectionToDocumentBoundaryIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ExpandSelectionToDocumentBoundaryIntent;
Function _ExpandSelectionToDocumentBoundaryIntent__$(m.Scope scope$) =>
    ({required bool forward}) {
      return ExpandSelectionToDocumentBoundaryIntent(forward: forward);
    };
Function ExpandSelectionToLineBreakIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ExpandSelectionToLineBreakIntent;
Function ExpandSelectionToLineBreakIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ExpandSelectionToLineBreakIntent;
Function _ExpandSelectionToLineBreakIntent__$(m.Scope scope$) =>
    ({required bool forward}) {
      return ExpandSelectionToLineBreakIntent(forward: forward);
    };
Function ExtendSelectionToLineBreakIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ExtendSelectionToLineBreakIntent;
Function ExtendSelectionToLineBreakIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ExtendSelectionToLineBreakIntent;
Function _ExtendSelectionToLineBreakIntent__$(m.Scope scope$) => ({
      required bool forward,
      required bool collapseSelection,
      bool? collapseAtReversal,
      bool? continuesAtWrap,
    }) {
      return ExtendSelectionToLineBreakIntent(
        collapseAtReversal: collapseAtReversal ?? false,
        collapseSelection: collapseSelection,
        continuesAtWrap: continuesAtWrap ?? false,
        forward: forward,
      );
    };
Function ExtendSelectionVerticallyToAdjacentLineIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ExtendSelectionVerticallyToAdjacentLineIntent;
Function ExtendSelectionVerticallyToAdjacentLineIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ExtendSelectionVerticallyToAdjacentLineIntent;
Function _ExtendSelectionVerticallyToAdjacentLineIntent__$(m.Scope scope$) => ({
      required bool forward,
      required bool collapseSelection,
    }) {
      return ExtendSelectionVerticallyToAdjacentLineIntent(
        collapseSelection: collapseSelection,
        forward: forward,
      );
    };
Function ExtendSelectionVerticallyToAdjacentPageIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ExtendSelectionVerticallyToAdjacentPageIntent;
Function ExtendSelectionVerticallyToAdjacentPageIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ExtendSelectionVerticallyToAdjacentPageIntent;
Function _ExtendSelectionVerticallyToAdjacentPageIntent__$(m.Scope scope$) => ({
      required bool forward,
      required bool collapseSelection,
    }) {
      return ExtendSelectionVerticallyToAdjacentPageIntent(
        collapseSelection: collapseSelection,
        forward: forward,
      );
    };
Function ExtendSelectionToNextParagraphBoundaryIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ExtendSelectionToNextParagraphBoundaryIntent;
Function ExtendSelectionToNextParagraphBoundaryIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ExtendSelectionToNextParagraphBoundaryIntent;
Function _ExtendSelectionToNextParagraphBoundaryIntent__$(m.Scope scope$) => ({
      required bool forward,
      required bool collapseSelection,
    }) {
      return ExtendSelectionToNextParagraphBoundaryIntent(
        collapseSelection: collapseSelection,
        forward: forward,
      );
    };
Function ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () =>
        target$ as ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent;
Function ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () =>
        target$ is ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent;
Function _ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent__$(
        m.Scope scope$) =>
    ({required bool forward}) {
      return ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent(
          forward: forward);
    };
Function ExtendSelectionToDocumentBoundaryIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ExtendSelectionToDocumentBoundaryIntent;
Function ExtendSelectionToDocumentBoundaryIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ExtendSelectionToDocumentBoundaryIntent;
Function _ExtendSelectionToDocumentBoundaryIntent__$(m.Scope scope$) => ({
      required bool forward,
      required bool collapseSelection,
    }) {
      return ExtendSelectionToDocumentBoundaryIntent(
        collapseSelection: collapseSelection,
        forward: forward,
      );
    };
Function ScrollToDocumentBoundaryIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ScrollToDocumentBoundaryIntent;
Function ScrollToDocumentBoundaryIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ScrollToDocumentBoundaryIntent;
Function _ScrollToDocumentBoundaryIntent__$(m.Scope scope$) =>
    ({required bool forward}) {
      return ScrollToDocumentBoundaryIntent(forward: forward);
    };
Function ExtendSelectionByPageIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ExtendSelectionByPageIntent;
Function ExtendSelectionByPageIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ExtendSelectionByPageIntent;
Function _ExtendSelectionByPageIntent__$(m.Scope scope$) =>
    ({required bool forward}) {
      return ExtendSelectionByPageIntent(forward: forward);
    };
Function SelectAllTextIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SelectAllTextIntent;
Function SelectAllTextIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SelectAllTextIntent;
Function _SelectAllTextIntent_cause$(
  m.Scope scope$,
  SelectAllTextIntent target$,
) =>
    () {
      return target$.cause;
    };
Function _SelectAllTextIntent__$(m.Scope scope$) =>
    (SelectionChangedCause cause) {
      return SelectAllTextIntent(cause);
    };
Function CopySelectionTextIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CopySelectionTextIntent;
Function CopySelectionTextIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CopySelectionTextIntent;
CopySelectionTextIntent _CopySelectionTextIntent_copy$() {
  return CopySelectionTextIntent.copy;
}

Function _CopySelectionTextIntent_cause$(
  m.Scope scope$,
  CopySelectionTextIntent target$,
) =>
    () {
      return target$.cause;
    };
Function _CopySelectionTextIntent_collapseSelection$(
  m.Scope scope$,
  CopySelectionTextIntent target$,
) =>
    () {
      return target$.collapseSelection;
    };
Function _CopySelectionTextIntent_cut_$(m.Scope scope$) =>
    CopySelectionTextIntent.cut;
Function PasteTextIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PasteTextIntent;
Function PasteTextIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PasteTextIntent;
Function _PasteTextIntent_cause$(
  m.Scope scope$,
  PasteTextIntent target$,
) =>
    () {
      return target$.cause;
    };
Function _PasteTextIntent__$(m.Scope scope$) => (SelectionChangedCause cause) {
      return PasteTextIntent(cause);
    };
Function RedoTextIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RedoTextIntent;
Function RedoTextIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RedoTextIntent;
Function _RedoTextIntent_cause$(
  m.Scope scope$,
  RedoTextIntent target$,
) =>
    () {
      return target$.cause;
    };
Function _RedoTextIntent__$(m.Scope scope$) => (SelectionChangedCause cause) {
      return RedoTextIntent(cause);
    };
Function ReplaceTextIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ReplaceTextIntent;
Function ReplaceTextIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ReplaceTextIntent;
Function _ReplaceTextIntent_currentTextEditingValue$(
  m.Scope scope$,
  ReplaceTextIntent target$,
) =>
    () {
      return target$.currentTextEditingValue;
    };
Function _ReplaceTextIntent_replacementText$(
  m.Scope scope$,
  ReplaceTextIntent target$,
) =>
    () {
      return target$.replacementText;
    };
Function _ReplaceTextIntent_replacementRange$(
  m.Scope scope$,
  ReplaceTextIntent target$,
) =>
    () {
      return target$.replacementRange;
    };
Function _ReplaceTextIntent_cause$(
  m.Scope scope$,
  ReplaceTextIntent target$,
) =>
    () {
      return target$.cause;
    };
Function _ReplaceTextIntent__$(m.Scope scope$) => (
      TextEditingValue currentTextEditingValue,
      String replacementText,
      TextRange replacementRange,
      SelectionChangedCause cause,
    ) {
      return ReplaceTextIntent(
        currentTextEditingValue,
        replacementText,
        replacementRange,
        cause,
      );
    };
Function UndoTextIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as UndoTextIntent;
Function UndoTextIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is UndoTextIntent;
Function _UndoTextIntent_cause$(
  m.Scope scope$,
  UndoTextIntent target$,
) =>
    () {
      return target$.cause;
    };
Function _UndoTextIntent__$(m.Scope scope$) => (SelectionChangedCause cause) {
      return UndoTextIntent(cause);
    };
Function UpdateSelectionIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as UpdateSelectionIntent;
Function UpdateSelectionIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is UpdateSelectionIntent;
Function _UpdateSelectionIntent_currentTextEditingValue$(
  m.Scope scope$,
  UpdateSelectionIntent target$,
) =>
    () {
      return target$.currentTextEditingValue;
    };
Function _UpdateSelectionIntent_newSelection$(
  m.Scope scope$,
  UpdateSelectionIntent target$,
) =>
    () {
      return target$.newSelection;
    };
Function _UpdateSelectionIntent_cause$(
  m.Scope scope$,
  UpdateSelectionIntent target$,
) =>
    () {
      return target$.cause;
    };
Function _UpdateSelectionIntent__$(m.Scope scope$) => (
      TextEditingValue currentTextEditingValue,
      TextSelection newSelection,
      SelectionChangedCause cause,
    ) {
      return UpdateSelectionIntent(
        currentTextEditingValue,
        newSelection,
        cause,
      );
    };
Function TransposeCharactersIntent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TransposeCharactersIntent;
Function TransposeCharactersIntent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TransposeCharactersIntent;
Function _TransposeCharactersIntent__$(m.Scope scope$) => () {
      return TransposeCharactersIntent();
    };
