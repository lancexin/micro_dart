// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/text_editing_intents.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/actions.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/text_editing_intents.dart',
  {'CopySelectionTextIntent.copy': _CopySelectionTextIntent_copy$},
  {},
  {
    'DoNothingAndStopPropagationTextIntent': m.ClassMirror(
      'DoNothingAndStopPropagationTextIntent',
      {},
      {},
    ),
    'DirectionalTextEditingIntent': m.ClassMirror(
      'DirectionalTextEditingIntent',
      {'forward': _DirectionalTextEditingIntent_forward$},
      {},
    ),
    'DeleteCharacterIntent': m.ClassMirror(
      'DeleteCharacterIntent',
      {},
      {},
    ),
    'DeleteToNextWordBoundaryIntent': m.ClassMirror(
      'DeleteToNextWordBoundaryIntent',
      {},
      {},
    ),
    'DeleteToLineBreakIntent': m.ClassMirror(
      'DeleteToLineBreakIntent',
      {},
      {},
    ),
    'DirectionalCaretMovementIntent': m.ClassMirror(
      'DirectionalCaretMovementIntent',
      {
        'collapseSelection': _DirectionalCaretMovementIntent_collapseSelection$,
        'collapseAtReversal':
            _DirectionalCaretMovementIntent_collapseAtReversal$,
        'continuesAtWrap': _DirectionalCaretMovementIntent_continuesAtWrap$,
      },
      {},
    ),
    'ExtendSelectionByCharacterIntent': m.ClassMirror(
      'ExtendSelectionByCharacterIntent',
      {},
      {},
    ),
    'ExtendSelectionToNextWordBoundaryIntent': m.ClassMirror(
      'ExtendSelectionToNextWordBoundaryIntent',
      {},
      {},
    ),
    'ExtendSelectionToNextWordBoundaryOrCaretLocationIntent': m.ClassMirror(
      'ExtendSelectionToNextWordBoundaryOrCaretLocationIntent',
      {},
      {},
    ),
    'ExpandSelectionToDocumentBoundaryIntent': m.ClassMirror(
      'ExpandSelectionToDocumentBoundaryIntent',
      {},
      {},
    ),
    'ExpandSelectionToLineBreakIntent': m.ClassMirror(
      'ExpandSelectionToLineBreakIntent',
      {},
      {},
    ),
    'ExtendSelectionToLineBreakIntent': m.ClassMirror(
      'ExtendSelectionToLineBreakIntent',
      {},
      {},
    ),
    'ExtendSelectionVerticallyToAdjacentLineIntent': m.ClassMirror(
      'ExtendSelectionVerticallyToAdjacentLineIntent',
      {},
      {},
    ),
    'ExtendSelectionVerticallyToAdjacentPageIntent': m.ClassMirror(
      'ExtendSelectionVerticallyToAdjacentPageIntent',
      {},
      {},
    ),
    'ExtendSelectionToNextParagraphBoundaryIntent': m.ClassMirror(
      'ExtendSelectionToNextParagraphBoundaryIntent',
      {},
      {},
    ),
    'ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent':
        m.ClassMirror(
      'ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent',
      {},
      {},
    ),
    'ExtendSelectionToDocumentBoundaryIntent': m.ClassMirror(
      'ExtendSelectionToDocumentBoundaryIntent',
      {},
      {},
    ),
    'ScrollToDocumentBoundaryIntent': m.ClassMirror(
      'ScrollToDocumentBoundaryIntent',
      {},
      {},
    ),
    'ExtendSelectionByPageIntent': m.ClassMirror(
      'ExtendSelectionByPageIntent',
      {},
      {},
    ),
    'SelectAllTextIntent': m.ClassMirror(
      'SelectAllTextIntent',
      {'cause': _SelectAllTextIntent_cause$},
      {},
    ),
    'CopySelectionTextIntent': m.ClassMirror(
      'CopySelectionTextIntent',
      {
        'cause': _CopySelectionTextIntent_cause$,
        'collapseSelection': _CopySelectionTextIntent_collapseSelection$,
      },
      {},
    ),
    'PasteTextIntent': m.ClassMirror(
      'PasteTextIntent',
      {'cause': _PasteTextIntent_cause$},
      {},
    ),
    'RedoTextIntent': m.ClassMirror(
      'RedoTextIntent',
      {'cause': _RedoTextIntent_cause$},
      {},
    ),
    'ReplaceTextIntent': m.ClassMirror(
      'ReplaceTextIntent',
      {
        'currentTextEditingValue': _ReplaceTextIntent_currentTextEditingValue$,
        'replacementText': _ReplaceTextIntent_replacementText$,
        'replacementRange': _ReplaceTextIntent_replacementRange$,
        'cause': _ReplaceTextIntent_cause$,
      },
      {},
    ),
    'UndoTextIntent': m.ClassMirror(
      'UndoTextIntent',
      {'cause': _UndoTextIntent_cause$},
      {},
    ),
    'UpdateSelectionIntent': m.ClassMirror(
      'UpdateSelectionIntent',
      {
        'currentTextEditingValue':
            _UpdateSelectionIntent_currentTextEditingValue$,
        'newSelection': _UpdateSelectionIntent_newSelection$,
        'cause': _UpdateSelectionIntent_cause$,
      },
      {},
    ),
    'TransposeCharactersIntent': m.ClassMirror(
      'TransposeCharactersIntent',
      {},
      {},
    ),
  },
);
bool _DirectionalTextEditingIntent_forward$(
    DirectionalTextEditingIntent target) {
  return target.forward;
}

bool _DirectionalCaretMovementIntent_collapseSelection$(
    DirectionalCaretMovementIntent target) {
  return target.collapseSelection;
}

bool _DirectionalCaretMovementIntent_collapseAtReversal$(
    DirectionalCaretMovementIntent target) {
  return target.collapseAtReversal;
}

bool _DirectionalCaretMovementIntent_continuesAtWrap$(
    DirectionalCaretMovementIntent target) {
  return target.continuesAtWrap;
}

SelectionChangedCause _SelectAllTextIntent_cause$(SelectAllTextIntent target) {
  return target.cause;
}

CopySelectionTextIntent _CopySelectionTextIntent_copy$() {
  return CopySelectionTextIntent.copy;
}

SelectionChangedCause _CopySelectionTextIntent_cause$(
    CopySelectionTextIntent target) {
  return target.cause;
}

bool _CopySelectionTextIntent_collapseSelection$(
    CopySelectionTextIntent target) {
  return target.collapseSelection;
}

SelectionChangedCause _PasteTextIntent_cause$(PasteTextIntent target) {
  return target.cause;
}

SelectionChangedCause _RedoTextIntent_cause$(RedoTextIntent target) {
  return target.cause;
}

TextEditingValue _ReplaceTextIntent_currentTextEditingValue$(
    ReplaceTextIntent target) {
  return target.currentTextEditingValue;
}

String _ReplaceTextIntent_replacementText$(ReplaceTextIntent target) {
  return target.replacementText;
}

TextRange _ReplaceTextIntent_replacementRange$(ReplaceTextIntent target) {
  return target.replacementRange;
}

SelectionChangedCause _ReplaceTextIntent_cause$(ReplaceTextIntent target) {
  return target.cause;
}

SelectionChangedCause _UndoTextIntent_cause$(UndoTextIntent target) {
  return target.cause;
}

TextEditingValue _UpdateSelectionIntent_currentTextEditingValue$(
    UpdateSelectionIntent target) {
  return target.currentTextEditingValue;
}

TextSelection _UpdateSelectionIntent_newSelection$(
    UpdateSelectionIntent target) {
  return target.newSelection;
}

SelectionChangedCause _UpdateSelectionIntent_cause$(
    UpdateSelectionIntent target) {
  return target.cause;
}
