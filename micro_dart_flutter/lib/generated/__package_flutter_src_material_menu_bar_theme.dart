// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/menu_bar_theme.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/menu_anchor.dart';
import 'package:flutter/src/material/menu_style.dart';
import 'package:flutter/src/material/menu_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/menu_bar_theme.dart',
  {
    'MenuBarThemeData.': _MenuBarThemeData__$,
    'MenuBarThemeData.lerp': _MenuBarThemeData_lerp$,
    'MenuBarTheme.': _MenuBarTheme__$,
    'MenuBarTheme.of': _MenuBarTheme_of$,
  },
  {},
  {
    'MenuBarThemeData': m.ClassMirror(
      'MenuBarThemeData',
      {
        '#as': MenuBarThemeData_as$,
        '#is': MenuBarThemeData_is$,
      },
      {},
    ),
    'MenuBarTheme': m.ClassMirror(
      'MenuBarTheme',
      {
        '#as': MenuBarTheme_as$,
        '#is': MenuBarTheme_is$,
        'data': _MenuBarTheme_data$,
        'wrap': _MenuBarTheme_wrap$,
        'updateShouldNotify': _MenuBarTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function MenuBarThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MenuBarThemeData;
Function MenuBarThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MenuBarThemeData;
Function _MenuBarThemeData__$(m.Scope scope$) => ({MenuStyle? style}) {
      return MenuBarThemeData(style: style);
    };
Function _MenuBarThemeData_lerp$(m.Scope scope$) => MenuBarThemeData.lerp;
Function MenuBarTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MenuBarTheme;
Function MenuBarTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MenuBarTheme;
Function _MenuBarTheme_data$(
  m.Scope scope$,
  MenuBarTheme target$,
) =>
    () {
      return target$.data;
    };
Function _MenuBarTheme__$(m.Scope scope$) => ({
      Key? key,
      required MenuBarThemeData data,
      required Widget child,
    }) {
      return MenuBarTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _MenuBarTheme_of$(m.Scope scope$) => MenuBarTheme.of;
Function _MenuBarTheme_wrap$(
  m.Scope scope$,
  MenuBarTheme target$,
) =>
    target$.wrap;
Function _MenuBarTheme_updateShouldNotify$(
  m.Scope scope$,
  MenuBarTheme target$,
) =>
    target$.updateShouldNotify;
