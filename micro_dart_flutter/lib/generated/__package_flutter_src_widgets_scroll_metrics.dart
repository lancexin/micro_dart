// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/scroll_metrics.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/scroll_metrics.dart',
  {},
  {},
  {
    'FixedScrollMetrics': m.ClassMirror(
      'FixedScrollMetrics',
      {
        'axisDirection': _FixedScrollMetrics_axisDirection$,
        'devicePixelRatio': _FixedScrollMetrics_devicePixelRatio$,
        'minScrollExtent': _FixedScrollMetrics_minScrollExtent$,
        'maxScrollExtent': _FixedScrollMetrics_maxScrollExtent$,
        'hasContentDimensions': _FixedScrollMetrics_hasContentDimensions$,
        'pixels': _FixedScrollMetrics_pixels$,
        'hasPixels': _FixedScrollMetrics_hasPixels$,
        'viewportDimension': _FixedScrollMetrics_viewportDimension$,
        'hasViewportDimension': _FixedScrollMetrics_hasViewportDimension$,
        'toString': _FixedScrollMetrics_toString$,
      },
      {},
    )
  },
);
AxisDirection _FixedScrollMetrics_axisDirection$(FixedScrollMetrics target) {
  return target.axisDirection;
}

double _FixedScrollMetrics_devicePixelRatio$(FixedScrollMetrics target) {
  return target.devicePixelRatio;
}

double _FixedScrollMetrics_minScrollExtent$(FixedScrollMetrics target) {
  return target.minScrollExtent;
}

double _FixedScrollMetrics_maxScrollExtent$(FixedScrollMetrics target) {
  return target.maxScrollExtent;
}

bool _FixedScrollMetrics_hasContentDimensions$(FixedScrollMetrics target) {
  return target.hasContentDimensions;
}

double _FixedScrollMetrics_pixels$(FixedScrollMetrics target) {
  return target.pixels;
}

bool _FixedScrollMetrics_hasPixels$(FixedScrollMetrics target) {
  return target.hasPixels;
}

double _FixedScrollMetrics_viewportDimension$(FixedScrollMetrics target) {
  return target.viewportDimension;
}

bool _FixedScrollMetrics_hasViewportDimension$(FixedScrollMetrics target) {
  return target.hasViewportDimension;
}

Function _FixedScrollMetrics_toString$(
  m.Scope scope,
  FixedScrollMetrics target,
) =>
    target.toString;
