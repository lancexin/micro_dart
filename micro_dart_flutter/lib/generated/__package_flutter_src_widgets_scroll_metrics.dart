// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/scroll_metrics.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/scroll_metrics.dart',
  {'FixedScrollMetrics.': _FixedScrollMetrics__$},
  {},
  {
    'FixedScrollMetrics': m.ClassMirror(
      'FixedScrollMetrics',
      {
        '#as': FixedScrollMetrics_as$,
        '#is': FixedScrollMetrics_is$,
        'axisDirection': _FixedScrollMetrics_axisDirection$,
        'devicePixelRatio': _FixedScrollMetrics_devicePixelRatio$,
        'minScrollExtent': _FixedScrollMetrics_minScrollExtent$,
        'maxScrollExtent': _FixedScrollMetrics_maxScrollExtent$,
        'hasContentDimensions': _FixedScrollMetrics_hasContentDimensions$,
        'pixels': _FixedScrollMetrics_pixels$,
        'hasPixels': _FixedScrollMetrics_hasPixels$,
        'viewportDimension': _FixedScrollMetrics_viewportDimension$,
        'hasViewportDimension': _FixedScrollMetrics_hasViewportDimension$,
        'toString': _FixedScrollMetrics_toString$,
      },
      {},
    )
  },
);
Function FixedScrollMetrics_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FixedScrollMetrics;
Function FixedScrollMetrics_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FixedScrollMetrics;
Function _FixedScrollMetrics_axisDirection$(
  m.Scope scope$,
  FixedScrollMetrics target$,
) =>
    () {
      return target$.axisDirection;
    };
Function _FixedScrollMetrics_devicePixelRatio$(
  m.Scope scope$,
  FixedScrollMetrics target$,
) =>
    () {
      return target$.devicePixelRatio;
    };
Function _FixedScrollMetrics_minScrollExtent$(
  m.Scope scope$,
  FixedScrollMetrics target$,
) =>
    () {
      return target$.minScrollExtent;
    };
Function _FixedScrollMetrics_maxScrollExtent$(
  m.Scope scope$,
  FixedScrollMetrics target$,
) =>
    () {
      return target$.maxScrollExtent;
    };
Function _FixedScrollMetrics_hasContentDimensions$(
  m.Scope scope$,
  FixedScrollMetrics target$,
) =>
    () {
      return target$.hasContentDimensions;
    };
Function _FixedScrollMetrics_pixels$(
  m.Scope scope$,
  FixedScrollMetrics target$,
) =>
    () {
      return target$.pixels;
    };
Function _FixedScrollMetrics_hasPixels$(
  m.Scope scope$,
  FixedScrollMetrics target$,
) =>
    () {
      return target$.hasPixels;
    };
Function _FixedScrollMetrics_viewportDimension$(
  m.Scope scope$,
  FixedScrollMetrics target$,
) =>
    () {
      return target$.viewportDimension;
    };
Function _FixedScrollMetrics_hasViewportDimension$(
  m.Scope scope$,
  FixedScrollMetrics target$,
) =>
    () {
      return target$.hasViewportDimension;
    };
Function _FixedScrollMetrics__$(m.Scope scope$) => ({
      required double? minScrollExtent,
      required double? maxScrollExtent,
      required double? pixels,
      required double? viewportDimension,
      required AxisDirection axisDirection,
      required double devicePixelRatio,
    }) {
      return FixedScrollMetrics(
        axisDirection: axisDirection,
        devicePixelRatio: devicePixelRatio,
        maxScrollExtent: maxScrollExtent,
        minScrollExtent: minScrollExtent,
        pixels: pixels,
        viewportDimension: viewportDimension,
      );
    };
Function _FixedScrollMetrics_toString$(
  m.Scope scope$,
  FixedScrollMetrics target$,
) =>
    target$.toString;
