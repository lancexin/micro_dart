// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/button_bar_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/button_bar_theme.dart',
  {
    'ButtonBarThemeData.lerp': _ButtonBarThemeData_lerp$,
    'ButtonBarTheme.of': _ButtonBarTheme_of$,
  },
  {},
  {
    'ButtonBarThemeData': m.ClassMirror(
      'ButtonBarThemeData',
      {
        'alignment': _ButtonBarThemeData_alignment$,
        'mainAxisSize': _ButtonBarThemeData_mainAxisSize$,
        'buttonTextTheme': _ButtonBarThemeData_buttonTextTheme$,
        'buttonMinWidth': _ButtonBarThemeData_buttonMinWidth$,
        'buttonHeight': _ButtonBarThemeData_buttonHeight$,
        'buttonPadding': _ButtonBarThemeData_buttonPadding$,
        'buttonAlignedDropdown': _ButtonBarThemeData_buttonAlignedDropdown$,
        'layoutBehavior': _ButtonBarThemeData_layoutBehavior$,
        'overflowDirection': _ButtonBarThemeData_overflowDirection$,
        'hashCode': _ButtonBarThemeData_hashCode$,
        'copyWith': _ButtonBarThemeData_copyWith$,
        'debugFillProperties': _ButtonBarThemeData_debugFillProperties$,
      },
      {},
    ),
    'ButtonBarTheme': m.ClassMirror(
      'ButtonBarTheme',
      {
        'data': _ButtonBarTheme_data$,
        'updateShouldNotify': _ButtonBarTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
MainAxisAlignment? _ButtonBarThemeData_alignment$(ButtonBarThemeData target) {
  return target.alignment;
}

MainAxisSize? _ButtonBarThemeData_mainAxisSize$(ButtonBarThemeData target) {
  return target.mainAxisSize;
}

ButtonTextTheme? _ButtonBarThemeData_buttonTextTheme$(
    ButtonBarThemeData target) {
  return target.buttonTextTheme;
}

double? _ButtonBarThemeData_buttonMinWidth$(ButtonBarThemeData target) {
  return target.buttonMinWidth;
}

double? _ButtonBarThemeData_buttonHeight$(ButtonBarThemeData target) {
  return target.buttonHeight;
}

EdgeInsetsGeometry? _ButtonBarThemeData_buttonPadding$(
    ButtonBarThemeData target) {
  return target.buttonPadding;
}

bool? _ButtonBarThemeData_buttonAlignedDropdown$(ButtonBarThemeData target) {
  return target.buttonAlignedDropdown;
}

ButtonBarLayoutBehavior? _ButtonBarThemeData_layoutBehavior$(
    ButtonBarThemeData target) {
  return target.layoutBehavior;
}

VerticalDirection? _ButtonBarThemeData_overflowDirection$(
    ButtonBarThemeData target) {
  return target.overflowDirection;
}

int _ButtonBarThemeData_hashCode$(ButtonBarThemeData target) {
  return target.hashCode;
}

Function _ButtonBarThemeData_copyWith$(
  m.Scope scope,
  ButtonBarThemeData target,
) =>
    target.copyWith;
Function _ButtonBarThemeData_lerp$(m.Scope scope) => ButtonBarThemeData.lerp;
Function _ButtonBarThemeData_debugFillProperties$(
  m.Scope scope,
  ButtonBarThemeData target,
) =>
    target.debugFillProperties;
ButtonBarThemeData _ButtonBarTheme_data$(ButtonBarTheme target) {
  return target.data;
}

Function _ButtonBarTheme_of$(m.Scope scope) => ButtonBarTheme.of;
Function _ButtonBarTheme_updateShouldNotify$(
  m.Scope scope,
  ButtonBarTheme target,
) =>
    target.updateShouldNotify;
