// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/button_bar_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/button_bar_theme.dart',
  {
    'ButtonBarThemeData.': _ButtonBarThemeData__$,
    'ButtonBarThemeData.lerp': _ButtonBarThemeData_lerp$,
    'ButtonBarTheme.': _ButtonBarTheme__$,
    'ButtonBarTheme.of': _ButtonBarTheme_of$,
  },
  {},
  {
    'ButtonBarThemeData': m.ClassMirror(
      'ButtonBarThemeData',
      {
        '#as': ButtonBarThemeData_as$,
        '#is': ButtonBarThemeData_is$,
        'alignment': _ButtonBarThemeData_alignment$,
        'mainAxisSize': _ButtonBarThemeData_mainAxisSize$,
        'buttonTextTheme': _ButtonBarThemeData_buttonTextTheme$,
        'buttonMinWidth': _ButtonBarThemeData_buttonMinWidth$,
        'buttonHeight': _ButtonBarThemeData_buttonHeight$,
        'buttonPadding': _ButtonBarThemeData_buttonPadding$,
        'buttonAlignedDropdown': _ButtonBarThemeData_buttonAlignedDropdown$,
        'layoutBehavior': _ButtonBarThemeData_layoutBehavior$,
        'overflowDirection': _ButtonBarThemeData_overflowDirection$,
        'hashCode': _ButtonBarThemeData_hashCode$,
        'copyWith': _ButtonBarThemeData_copyWith$,
        '==': _ButtonBarThemeData_eq$$,
        'debugFillProperties': _ButtonBarThemeData_debugFillProperties$,
      },
      {},
    ),
    'ButtonBarTheme': m.ClassMirror(
      'ButtonBarTheme',
      {
        '#as': ButtonBarTheme_as$,
        '#is': ButtonBarTheme_is$,
        'data': _ButtonBarTheme_data$,
        'updateShouldNotify': _ButtonBarTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function ButtonBarThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ButtonBarThemeData;
Function ButtonBarThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ButtonBarThemeData;
Function _ButtonBarThemeData_alignment$(
  m.Scope scope$,
  ButtonBarThemeData target$,
) =>
    () {
      return target$.alignment;
    };
Function _ButtonBarThemeData_mainAxisSize$(
  m.Scope scope$,
  ButtonBarThemeData target$,
) =>
    () {
      return target$.mainAxisSize;
    };
Function _ButtonBarThemeData_buttonTextTheme$(
  m.Scope scope$,
  ButtonBarThemeData target$,
) =>
    () {
      return target$.buttonTextTheme;
    };
Function _ButtonBarThemeData_buttonMinWidth$(
  m.Scope scope$,
  ButtonBarThemeData target$,
) =>
    () {
      return target$.buttonMinWidth;
    };
Function _ButtonBarThemeData_buttonHeight$(
  m.Scope scope$,
  ButtonBarThemeData target$,
) =>
    () {
      return target$.buttonHeight;
    };
Function _ButtonBarThemeData_buttonPadding$(
  m.Scope scope$,
  ButtonBarThemeData target$,
) =>
    () {
      return target$.buttonPadding;
    };
Function _ButtonBarThemeData_buttonAlignedDropdown$(
  m.Scope scope$,
  ButtonBarThemeData target$,
) =>
    () {
      return target$.buttonAlignedDropdown;
    };
Function _ButtonBarThemeData_layoutBehavior$(
  m.Scope scope$,
  ButtonBarThemeData target$,
) =>
    () {
      return target$.layoutBehavior;
    };
Function _ButtonBarThemeData_overflowDirection$(
  m.Scope scope$,
  ButtonBarThemeData target$,
) =>
    () {
      return target$.overflowDirection;
    };
Function _ButtonBarThemeData_hashCode$(
  m.Scope scope$,
  ButtonBarThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _ButtonBarThemeData__$(m.Scope scope$) => ({
      MainAxisAlignment? alignment,
      MainAxisSize? mainAxisSize,
      ButtonTextTheme? buttonTextTheme,
      double? buttonMinWidth,
      double? buttonHeight,
      EdgeInsetsGeometry? buttonPadding,
      bool? buttonAlignedDropdown,
      ButtonBarLayoutBehavior? layoutBehavior,
      VerticalDirection? overflowDirection,
    }) {
      return ButtonBarThemeData(
        alignment: alignment,
        buttonAlignedDropdown: buttonAlignedDropdown,
        buttonHeight: buttonHeight,
        buttonMinWidth: buttonMinWidth,
        buttonPadding: buttonPadding,
        buttonTextTheme: buttonTextTheme,
        layoutBehavior: layoutBehavior,
        mainAxisSize: mainAxisSize,
        overflowDirection: overflowDirection,
      );
    };
Function _ButtonBarThemeData_copyWith$(
  m.Scope scope$,
  ButtonBarThemeData target$,
) =>
    target$.copyWith;
Function _ButtonBarThemeData_lerp$(m.Scope scope$) => ButtonBarThemeData.lerp;
Function _ButtonBarThemeData_eq$$(
  m.Scope scope$,
  ButtonBarThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _ButtonBarThemeData_debugFillProperties$(
  m.Scope scope$,
  ButtonBarThemeData target$,
) =>
    target$.debugFillProperties;
Function ButtonBarTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ButtonBarTheme;
Function ButtonBarTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ButtonBarTheme;
Function _ButtonBarTheme_data$(
  m.Scope scope$,
  ButtonBarTheme target$,
) =>
    () {
      return target$.data;
    };
Function _ButtonBarTheme__$(m.Scope scope$) => ({
      Key? key,
      required ButtonBarThemeData data,
      required Widget child,
    }) {
      return ButtonBarTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _ButtonBarTheme_of$(m.Scope scope$) => ButtonBarTheme.of;
Function _ButtonBarTheme_updateShouldNotify$(
  m.Scope scope$,
  ButtonBarTheme target$,
) =>
    target$.updateShouldNotify;
