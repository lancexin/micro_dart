// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/divider_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/divider_theme.dart',
  {
    'DividerThemeData.': _DividerThemeData__$,
    'DividerThemeData.lerp': _DividerThemeData_lerp$,
    'DividerTheme.': _DividerTheme__$,
    'DividerTheme.of': _DividerTheme_of$,
  },
  {},
  {
    'DividerThemeData': m.ClassMirror(
      'DividerThemeData',
      {
        '#as': DividerThemeData_as$,
        '#is': DividerThemeData_is$,
        'color': _DividerThemeData_color$,
        'space': _DividerThemeData_space$,
        'thickness': _DividerThemeData_thickness$,
        'indent': _DividerThemeData_indent$,
        'endIndent': _DividerThemeData_endIndent$,
        'hashCode': _DividerThemeData_hashCode$,
        'copyWith': _DividerThemeData_copyWith$,
        '==': _DividerThemeData_eq$$,
        'debugFillProperties': _DividerThemeData_debugFillProperties$,
      },
      {},
    ),
    'DividerTheme': m.ClassMirror(
      'DividerTheme',
      {
        '#as': DividerTheme_as$,
        '#is': DividerTheme_is$,
        'data': _DividerTheme_data$,
        'wrap': _DividerTheme_wrap$,
        'updateShouldNotify': _DividerTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function DividerThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DividerThemeData;
Function DividerThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DividerThemeData;
Function _DividerThemeData_color$(
  m.Scope scope$,
  DividerThemeData target$,
) =>
    () {
      return target$.color;
    };
Function _DividerThemeData_space$(
  m.Scope scope$,
  DividerThemeData target$,
) =>
    () {
      return target$.space;
    };
Function _DividerThemeData_thickness$(
  m.Scope scope$,
  DividerThemeData target$,
) =>
    () {
      return target$.thickness;
    };
Function _DividerThemeData_indent$(
  m.Scope scope$,
  DividerThemeData target$,
) =>
    () {
      return target$.indent;
    };
Function _DividerThemeData_endIndent$(
  m.Scope scope$,
  DividerThemeData target$,
) =>
    () {
      return target$.endIndent;
    };
Function _DividerThemeData_hashCode$(
  m.Scope scope$,
  DividerThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _DividerThemeData__$(m.Scope scope$) => ({
      Color? color,
      double? space,
      double? thickness,
      double? indent,
      double? endIndent,
    }) {
      return DividerThemeData(
        color: color,
        endIndent: endIndent,
        indent: indent,
        space: space,
        thickness: thickness,
      );
    };
Function _DividerThemeData_copyWith$(
  m.Scope scope$,
  DividerThemeData target$,
) =>
    target$.copyWith;
Function _DividerThemeData_lerp$(m.Scope scope$) => DividerThemeData.lerp;
Function _DividerThemeData_eq$$(
  m.Scope scope$,
  DividerThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _DividerThemeData_debugFillProperties$(
  m.Scope scope$,
  DividerThemeData target$,
) =>
    target$.debugFillProperties;
Function DividerTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DividerTheme;
Function DividerTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DividerTheme;
Function _DividerTheme_data$(
  m.Scope scope$,
  DividerTheme target$,
) =>
    () {
      return target$.data;
    };
Function _DividerTheme__$(m.Scope scope$) => ({
      Key? key,
      required DividerThemeData data,
      required Widget child,
    }) {
      return DividerTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _DividerTheme_of$(m.Scope scope$) => DividerTheme.of;
Function _DividerTheme_wrap$(
  m.Scope scope$,
  DividerTheme target$,
) =>
    target$.wrap;
Function _DividerTheme_updateShouldNotify$(
  m.Scope scope$,
  DividerTheme target$,
) =>
    target$.updateShouldNotify;
