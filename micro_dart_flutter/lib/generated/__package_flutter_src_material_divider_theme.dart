// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/divider_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/divider_theme.dart',
  {
    'DividerThemeData.lerp': _DividerThemeData_lerp$,
    'DividerTheme.of': _DividerTheme_of$,
  },
  {},
  {
    'DividerThemeData': m.ClassMirror(
      'DividerThemeData',
      {
        '#as': DividerThemeData_as$,
        '#is': DividerThemeData_is$,
        'color': _DividerThemeData_color$,
        'space': _DividerThemeData_space$,
        'thickness': _DividerThemeData_thickness$,
        'indent': _DividerThemeData_indent$,
        'endIndent': _DividerThemeData_endIndent$,
        'hashCode': _DividerThemeData_hashCode$,
        'copyWith': _DividerThemeData_copyWith$,
        '==': _DividerThemeData_eq$$,
        'debugFillProperties': _DividerThemeData_debugFillProperties$,
      },
      {},
    ),
    'DividerTheme': m.ClassMirror(
      'DividerTheme',
      {
        '#as': DividerTheme_as$,
        '#is': DividerTheme_is$,
        'data': _DividerTheme_data$,
        'wrap': _DividerTheme_wrap$,
        'updateShouldNotify': _DividerTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function DividerThemeData_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DividerThemeData;
Function DividerThemeData_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DividerThemeData;
Color? _DividerThemeData_color$(DividerThemeData target) {
  return target.color;
}

double? _DividerThemeData_space$(DividerThemeData target) {
  return target.space;
}

double? _DividerThemeData_thickness$(DividerThemeData target) {
  return target.thickness;
}

double? _DividerThemeData_indent$(DividerThemeData target) {
  return target.indent;
}

double? _DividerThemeData_endIndent$(DividerThemeData target) {
  return target.endIndent;
}

int _DividerThemeData_hashCode$(DividerThemeData target) {
  return target.hashCode;
}

Function _DividerThemeData_copyWith$(
  m.Scope scope,
  DividerThemeData target,
) =>
    target.copyWith;
Function _DividerThemeData_lerp$(m.Scope scope) => DividerThemeData.lerp;
Function _DividerThemeData_eq$$(
  m.Scope scope,
  DividerThemeData target,
) =>
    (Object other) => target == other;
Function _DividerThemeData_debugFillProperties$(
  m.Scope scope,
  DividerThemeData target,
) =>
    target.debugFillProperties;
Function DividerTheme_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DividerTheme;
Function DividerTheme_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DividerTheme;
DividerThemeData _DividerTheme_data$(DividerTheme target) {
  return target.data;
}

Function _DividerTheme_of$(m.Scope scope) => DividerTheme.of;
Function _DividerTheme_wrap$(
  m.Scope scope,
  DividerTheme target,
) =>
    target.wrap;
Function _DividerTheme_updateShouldNotify$(
  m.Scope scope,
  DividerTheme target,
) =>
    target.updateShouldNotify;
