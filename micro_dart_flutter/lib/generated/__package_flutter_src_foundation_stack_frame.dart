// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/foundation/stack_frame.dart';
import 'package:meta/meta.dart';
import 'package:flutter/src/foundation/constants.dart';
import 'package:flutter/src/foundation/object.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/foundation/stack_frame.dart',
  {
    'StackFrame.asynchronousSuspension': _StackFrame_asynchronousSuspension$,
    'StackFrame.stackOverFlowElision': _StackFrame_stackOverFlowElision$,
    'StackFrame.fromStackTrace': _StackFrame_fromStackTrace$,
    'StackFrame.fromStackString': _StackFrame_fromStackString$,
    'StackFrame.fromStackTraceLine': _StackFrame_fromStackTraceLine$,
  },
  {},
  {
    'StackFrame': m.ClassMirror(
      'StackFrame',
      {
        '#as': StackFrame_as$,
        '#is': StackFrame_is$,
        'source': _StackFrame_source$,
        'number': _StackFrame_number$,
        'packageScheme': _StackFrame_packageScheme$,
        'package': _StackFrame_package$,
        'packagePath': _StackFrame_packagePath$,
        'line': _StackFrame_line$,
        'column': _StackFrame_column$,
        'className': _StackFrame_className$,
        'method': _StackFrame_method$,
        'isConstructor': _StackFrame_isConstructor$,
        'hashCode': _StackFrame_hashCode$,
        '==': _StackFrame_eq$$,
        'toString': _StackFrame_toString$,
      },
      {},
    )
  },
);
Function StackFrame_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as StackFrame;
Function StackFrame_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is StackFrame;
StackFrame _StackFrame_asynchronousSuspension$() {
  return StackFrame.asynchronousSuspension;
}

StackFrame _StackFrame_stackOverFlowElision$() {
  return StackFrame.stackOverFlowElision;
}

String _StackFrame_source$(StackFrame target) {
  return target.source;
}

int _StackFrame_number$(StackFrame target) {
  return target.number;
}

String _StackFrame_packageScheme$(StackFrame target) {
  return target.packageScheme;
}

String _StackFrame_package$(StackFrame target) {
  return target.package;
}

String _StackFrame_packagePath$(StackFrame target) {
  return target.packagePath;
}

int _StackFrame_line$(StackFrame target) {
  return target.line;
}

int _StackFrame_column$(StackFrame target) {
  return target.column;
}

String _StackFrame_className$(StackFrame target) {
  return target.className;
}

String _StackFrame_method$(StackFrame target) {
  return target.method;
}

bool _StackFrame_isConstructor$(StackFrame target) {
  return target.isConstructor;
}

int _StackFrame_hashCode$(StackFrame target) {
  return target.hashCode;
}

Function _StackFrame_fromStackTrace$(m.Scope scope) =>
    StackFrame.fromStackTrace;
Function _StackFrame_fromStackString$(m.Scope scope) =>
    StackFrame.fromStackString;
Function _StackFrame_fromStackTraceLine$(m.Scope scope) =>
    StackFrame.fromStackTraceLine;
Function _StackFrame_eq$$(
  m.Scope scope,
  StackFrame target,
) =>
    (Object other) => target == other;
Function _StackFrame_toString$(
  m.Scope scope,
  StackFrame target,
) =>
    target.toString;
