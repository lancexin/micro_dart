// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/foundation/stack_frame.dart';
import 'package:meta/meta.dart';
import 'package:flutter/src/foundation/constants.dart';
import 'package:flutter/src/foundation/object.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/foundation/stack_frame.dart',
  {
    'StackFrame.asynchronousSuspension': _StackFrame_asynchronousSuspension$,
    'StackFrame.stackOverFlowElision': _StackFrame_stackOverFlowElision$,
    'StackFrame.': _StackFrame__$,
    'StackFrame.fromStackTrace': _StackFrame_fromStackTrace$,
    'StackFrame.fromStackString': _StackFrame_fromStackString$,
    'StackFrame.fromStackTraceLine': _StackFrame_fromStackTraceLine$,
  },
  {},
  {
    'StackFrame': m.ClassMirror(
      'StackFrame',
      {
        '#as': StackFrame_as$,
        '#is': StackFrame_is$,
        'source': _StackFrame_source$,
        'number': _StackFrame_number$,
        'packageScheme': _StackFrame_packageScheme$,
        'package': _StackFrame_package$,
        'packagePath': _StackFrame_packagePath$,
        'line': _StackFrame_line$,
        'column': _StackFrame_column$,
        'className': _StackFrame_className$,
        'method': _StackFrame_method$,
        'isConstructor': _StackFrame_isConstructor$,
        'hashCode': _StackFrame_hashCode$,
        '==': _StackFrame_eq$$,
        'toString': _StackFrame_toString$,
      },
      {},
    )
  },
);
Function StackFrame_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as StackFrame;
Function StackFrame_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is StackFrame;
StackFrame _StackFrame_asynchronousSuspension$() {
  return StackFrame.asynchronousSuspension;
}

StackFrame _StackFrame_stackOverFlowElision$() {
  return StackFrame.stackOverFlowElision;
}

Function _StackFrame_source$(
  m.Scope scope$,
  StackFrame target$,
) =>
    () {
      return target$.source;
    };
Function _StackFrame_number$(
  m.Scope scope$,
  StackFrame target$,
) =>
    () {
      return target$.number;
    };
Function _StackFrame_packageScheme$(
  m.Scope scope$,
  StackFrame target$,
) =>
    () {
      return target$.packageScheme;
    };
Function _StackFrame_package$(
  m.Scope scope$,
  StackFrame target$,
) =>
    () {
      return target$.package;
    };
Function _StackFrame_packagePath$(
  m.Scope scope$,
  StackFrame target$,
) =>
    () {
      return target$.packagePath;
    };
Function _StackFrame_line$(
  m.Scope scope$,
  StackFrame target$,
) =>
    () {
      return target$.line;
    };
Function _StackFrame_column$(
  m.Scope scope$,
  StackFrame target$,
) =>
    () {
      return target$.column;
    };
Function _StackFrame_className$(
  m.Scope scope$,
  StackFrame target$,
) =>
    () {
      return target$.className;
    };
Function _StackFrame_method$(
  m.Scope scope$,
  StackFrame target$,
) =>
    () {
      return target$.method;
    };
Function _StackFrame_isConstructor$(
  m.Scope scope$,
  StackFrame target$,
) =>
    () {
      return target$.isConstructor;
    };
Function _StackFrame_hashCode$(
  m.Scope scope$,
  StackFrame target$,
) =>
    () {
      return target$.hashCode;
    };
Function _StackFrame__$(m.Scope scope$) => ({
      required int number,
      required int column,
      required int line,
      required String packageScheme,
      required String package,
      required String packagePath,
      String? className,
      required String method,
      bool? isConstructor,
      required String source,
    }) {
      return StackFrame(
        className: className ?? '',
        column: column,
        isConstructor: isConstructor ?? false,
        line: line,
        method: method,
        number: number,
        package: package,
        packagePath: packagePath,
        packageScheme: packageScheme,
        source: source,
      );
    };
Function _StackFrame_fromStackTrace$(m.Scope scope$) =>
    StackFrame.fromStackTrace;
Function _StackFrame_fromStackString$(m.Scope scope$) =>
    StackFrame.fromStackString;
Function _StackFrame_fromStackTraceLine$(m.Scope scope$) =>
    StackFrame.fromStackTraceLine;
Function _StackFrame_eq$$(
  m.Scope scope$,
  StackFrame target$,
) =>
    (Object other$) => target$ == other$;
Function _StackFrame_toString$(
  m.Scope scope$,
  StackFrame target$,
) =>
    target$.toString;
