// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/foundation/debug.dart';
import 'dart:ui' show Brightness;
import 'package:flutter/src/foundation/assertions.dart';
import 'package:flutter/src/foundation/platform.dart';
import 'package:flutter/src/foundation/print.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/foundation/debug.dart',
  {
    'debugInstrumentationEnabled': _debugInstrumentationEnabled$,
    'debugDoublePrecision': _debugDoublePrecision$,
    'debugBrightnessOverride': _debugBrightnessOverride$,
    'activeDevToolsServerAddress': _activeDevToolsServerAddress$,
    'connectedVmServiceUri': _connectedVmServiceUri$,
    'debugAssertAllFoundationVarsUnset': _debugAssertAllFoundationVarsUnset$,
    'debugInstrumentAction': _debugInstrumentAction$,
    'debugFormatDouble': _debugFormatDouble$,
  },
  {
    'debugInstrumentationEnabled': _debugInstrumentationEnabled_set$,
    'debugDoublePrecision': _debugDoublePrecision_set$,
    'debugBrightnessOverride': _debugBrightnessOverride_set$,
    'activeDevToolsServerAddress': _activeDevToolsServerAddress_set$,
    'connectedVmServiceUri': _connectedVmServiceUri_set$,
  },
  {},
);
bool _debugInstrumentationEnabled$() {
  return debugInstrumentationEnabled;
}

void _debugInstrumentationEnabled_set$(bool other$) {
  debugInstrumentationEnabled = other$;
}

int? _debugDoublePrecision$() {
  return debugDoublePrecision;
}

void _debugDoublePrecision_set$(int? other$) {
  debugDoublePrecision = other$;
}

Brightness? _debugBrightnessOverride$() {
  return debugBrightnessOverride;
}

void _debugBrightnessOverride_set$(Brightness? other$) {
  debugBrightnessOverride = other$;
}

String? _activeDevToolsServerAddress$() {
  return activeDevToolsServerAddress;
}

void _activeDevToolsServerAddress_set$(String? other$) {
  activeDevToolsServerAddress = other$;
}

String? _connectedVmServiceUri$() {
  return connectedVmServiceUri;
}

void _connectedVmServiceUri_set$(String? other$) {
  connectedVmServiceUri = other$;
}

Function _debugAssertAllFoundationVarsUnset$(m.Scope scope$) => (
      String reason, {
      m.FunctionPointer? debugPrintOverride,
    }) {
      void debugPrintOverrideProxy(
        String? debugPrintOverride_message$, {
        int? wrapWidth,
      }) =>
          scope$.engine.callFunctionPointer(
            scope$,
            debugPrintOverride!,
            [debugPrintOverride_message$],
            {'wrapWidth': wrapWidth},
          );
      return debugAssertAllFoundationVarsUnset(
        reason,
        debugPrintOverride: debugPrintOverride == null
            ? debugPrintThrottled
            : debugPrintOverrideProxy,
      );
    };
Function _debugInstrumentAction$(m.Scope scope$) => (
      String description,
      m.FunctionPointer action,
    ) {
      Future actionProxy() async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            action,
            [],
            {},
          );
      return debugInstrumentAction(
        description,
        actionProxy,
      );
    };
Function _debugFormatDouble$(m.Scope scope$) => debugFormatDouble;
