// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/date_picker.dart';
import 'dart:math';
import 'package:flutter/scheduler.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/localizations.dart';
import 'package:flutter/src/cupertino/picker.dart';
import 'package:flutter/src/cupertino/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/date_picker.dart',
  {
    'CupertinoDatePicker.': _CupertinoDatePicker__$,
    'CupertinoTimerPicker.': _CupertinoTimerPicker__$,
    'CupertinoDatePickerMode.time': _CupertinoDatePickerMode_time$,
    'CupertinoDatePickerMode.date': _CupertinoDatePickerMode_date$,
    'CupertinoDatePickerMode.dateAndTime':
        _CupertinoDatePickerMode_dateAndTime$,
    'CupertinoDatePickerMode.values': _CupertinoDatePickerMode_values$,
    'CupertinoTimerPickerMode.hm': _CupertinoTimerPickerMode_hm$,
    'CupertinoTimerPickerMode.ms': _CupertinoTimerPickerMode_ms$,
    'CupertinoTimerPickerMode.hms': _CupertinoTimerPickerMode_hms$,
    'CupertinoTimerPickerMode.values': _CupertinoTimerPickerMode_values$,
  },
  {},
  {
    'CupertinoDatePicker': m.ClassMirror(
      'CupertinoDatePicker',
      {
        '#as': CupertinoDatePicker_as$,
        '#is': CupertinoDatePicker_is$,
        'mode': _CupertinoDatePicker_mode$,
        'initialDateTime': _CupertinoDatePicker_initialDateTime$,
        'minimumDate': _CupertinoDatePicker_minimumDate$,
        'maximumDate': _CupertinoDatePicker_maximumDate$,
        'minimumYear': _CupertinoDatePicker_minimumYear$,
        'maximumYear': _CupertinoDatePicker_maximumYear$,
        'minuteInterval': _CupertinoDatePicker_minuteInterval$,
        'use24hFormat': _CupertinoDatePicker_use24hFormat$,
        'dateOrder': _CupertinoDatePicker_dateOrder$,
        'onDateTimeChanged': _CupertinoDatePicker_onDateTimeChanged$,
        'backgroundColor': _CupertinoDatePicker_backgroundColor$,
        'showDayOfWeek': _CupertinoDatePicker_showDayOfWeek$,
        'createState': _CupertinoDatePicker_createState$,
      },
      {},
    ),
    'CupertinoTimerPicker': m.ClassMirror(
      'CupertinoTimerPicker',
      {
        '#as': CupertinoTimerPicker_as$,
        '#is': CupertinoTimerPicker_is$,
        'mode': _CupertinoTimerPicker_mode$,
        'initialTimerDuration': _CupertinoTimerPicker_initialTimerDuration$,
        'minuteInterval': _CupertinoTimerPicker_minuteInterval$,
        'secondInterval': _CupertinoTimerPicker_secondInterval$,
        'onTimerDurationChanged': _CupertinoTimerPicker_onTimerDurationChanged$,
        'alignment': _CupertinoTimerPicker_alignment$,
        'backgroundColor': _CupertinoTimerPicker_backgroundColor$,
        'createState': _CupertinoTimerPicker_createState$,
      },
      {},
    ),
    'CupertinoDatePickerMode': m.ClassMirror(
      'CupertinoDatePickerMode',
      {},
      {},
    ),
    'CupertinoTimerPickerMode': m.ClassMirror(
      'CupertinoTimerPickerMode',
      {},
      {},
    ),
  },
);
Function CupertinoDatePicker_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoDatePicker;
Function CupertinoDatePicker_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoDatePicker;
Function _CupertinoDatePicker_mode$(
  m.Scope scope$,
  CupertinoDatePicker target$,
) =>
    () {
      return target$.mode;
    };
Function _CupertinoDatePicker_initialDateTime$(
  m.Scope scope$,
  CupertinoDatePicker target$,
) =>
    () {
      return target$.initialDateTime;
    };
Function _CupertinoDatePicker_minimumDate$(
  m.Scope scope$,
  CupertinoDatePicker target$,
) =>
    () {
      return target$.minimumDate;
    };
Function _CupertinoDatePicker_maximumDate$(
  m.Scope scope$,
  CupertinoDatePicker target$,
) =>
    () {
      return target$.maximumDate;
    };
Function _CupertinoDatePicker_minimumYear$(
  m.Scope scope$,
  CupertinoDatePicker target$,
) =>
    () {
      return target$.minimumYear;
    };
Function _CupertinoDatePicker_maximumYear$(
  m.Scope scope$,
  CupertinoDatePicker target$,
) =>
    () {
      return target$.maximumYear;
    };
Function _CupertinoDatePicker_minuteInterval$(
  m.Scope scope$,
  CupertinoDatePicker target$,
) =>
    () {
      return target$.minuteInterval;
    };
Function _CupertinoDatePicker_use24hFormat$(
  m.Scope scope$,
  CupertinoDatePicker target$,
) =>
    () {
      return target$.use24hFormat;
    };
Function _CupertinoDatePicker_dateOrder$(
  m.Scope scope$,
  CupertinoDatePicker target$,
) =>
    () {
      return target$.dateOrder;
    };
Function _CupertinoDatePicker_onDateTimeChanged$(
  m.Scope scope$,
  CupertinoDatePicker target$,
) =>
    () {
      return target$.onDateTimeChanged;
    };
Function _CupertinoDatePicker_backgroundColor$(
  m.Scope scope$,
  CupertinoDatePicker target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _CupertinoDatePicker_showDayOfWeek$(
  m.Scope scope$,
  CupertinoDatePicker target$,
) =>
    () {
      return target$.showDayOfWeek;
    };
Function _CupertinoDatePicker__$(m.Scope scope$) => ({
      Key? key,
      CupertinoDatePickerMode? mode,
      required m.FunctionPointer onDateTimeChanged,
      DateTime? initialDateTime,
      DateTime? minimumDate,
      DateTime? maximumDate,
      int? minimumYear,
      int? maximumYear,
      int? minuteInterval,
      bool? use24hFormat,
      DatePickerDateOrder? dateOrder,
      Color? backgroundColor,
      bool? showDayOfWeek,
    }) {
      void onDateTimeChangedProxy(DateTime onDateTimeChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onDateTimeChanged,
            [onDateTimeChanged_value$],
            {},
          );
      return CupertinoDatePicker(
        backgroundColor: backgroundColor,
        dateOrder: dateOrder,
        initialDateTime: initialDateTime,
        key: key,
        maximumDate: maximumDate,
        maximumYear: maximumYear,
        minimumDate: minimumDate,
        minimumYear: minimumYear ?? 1,
        minuteInterval: minuteInterval ?? 1,
        mode: mode ?? CupertinoDatePickerMode.dateAndTime,
        onDateTimeChanged: onDateTimeChangedProxy,
        showDayOfWeek: showDayOfWeek ?? false,
        use24hFormat: use24hFormat ?? false,
      );
    };
Function _CupertinoDatePicker_createState$(
  m.Scope scope$,
  CupertinoDatePicker target$,
) =>
    target$.createState;
Function CupertinoTimerPicker_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoTimerPicker;
Function CupertinoTimerPicker_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoTimerPicker;
Function _CupertinoTimerPicker_mode$(
  m.Scope scope$,
  CupertinoTimerPicker target$,
) =>
    () {
      return target$.mode;
    };
Function _CupertinoTimerPicker_initialTimerDuration$(
  m.Scope scope$,
  CupertinoTimerPicker target$,
) =>
    () {
      return target$.initialTimerDuration;
    };
Function _CupertinoTimerPicker_minuteInterval$(
  m.Scope scope$,
  CupertinoTimerPicker target$,
) =>
    () {
      return target$.minuteInterval;
    };
Function _CupertinoTimerPicker_secondInterval$(
  m.Scope scope$,
  CupertinoTimerPicker target$,
) =>
    () {
      return target$.secondInterval;
    };
Function _CupertinoTimerPicker_onTimerDurationChanged$(
  m.Scope scope$,
  CupertinoTimerPicker target$,
) =>
    () {
      return target$.onTimerDurationChanged;
    };
Function _CupertinoTimerPicker_alignment$(
  m.Scope scope$,
  CupertinoTimerPicker target$,
) =>
    () {
      return target$.alignment;
    };
Function _CupertinoTimerPicker_backgroundColor$(
  m.Scope scope$,
  CupertinoTimerPicker target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _CupertinoTimerPicker__$(m.Scope scope$) => ({
      Key? key,
      CupertinoTimerPickerMode? mode,
      Duration? initialTimerDuration,
      int? minuteInterval,
      int? secondInterval,
      AlignmentGeometry? alignment,
      Color? backgroundColor,
      required m.FunctionPointer onTimerDurationChanged,
    }) {
      void onTimerDurationChangedProxy(
              Duration onTimerDurationChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onTimerDurationChanged,
            [onTimerDurationChanged_value$],
            {},
          );
      return CupertinoTimerPicker(
        alignment: alignment ?? Alignment.center,
        backgroundColor: backgroundColor,
        initialTimerDuration: initialTimerDuration ?? Duration.zero,
        key: key,
        minuteInterval: minuteInterval ?? 1,
        mode: mode ?? CupertinoTimerPickerMode.hms,
        onTimerDurationChanged: onTimerDurationChangedProxy,
        secondInterval: secondInterval ?? 1,
      );
    };
Function _CupertinoTimerPicker_createState$(
  m.Scope scope$,
  CupertinoTimerPicker target$,
) =>
    target$.createState;
CupertinoDatePickerMode _CupertinoDatePickerMode_time$() {
  return CupertinoDatePickerMode.time;
}

CupertinoDatePickerMode _CupertinoDatePickerMode_date$() {
  return CupertinoDatePickerMode.date;
}

CupertinoDatePickerMode _CupertinoDatePickerMode_dateAndTime$() {
  return CupertinoDatePickerMode.dateAndTime;
}

List<CupertinoDatePickerMode> _CupertinoDatePickerMode_values$() {
  return CupertinoDatePickerMode.values;
}

CupertinoTimerPickerMode _CupertinoTimerPickerMode_hm$() {
  return CupertinoTimerPickerMode.hm;
}

CupertinoTimerPickerMode _CupertinoTimerPickerMode_ms$() {
  return CupertinoTimerPickerMode.ms;
}

CupertinoTimerPickerMode _CupertinoTimerPickerMode_hms$() {
  return CupertinoTimerPickerMode.hms;
}

List<CupertinoTimerPickerMode> _CupertinoTimerPickerMode_values$() {
  return CupertinoTimerPickerMode.values;
}
