// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/date_picker.dart';
import 'dart:math';
import 'package:flutter/scheduler.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/localizations.dart';
import 'package:flutter/src/cupertino/picker.dart';
import 'package:flutter/src/cupertino/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/date_picker.dart',
  {
    'CupertinoDatePickerMode.time': _CupertinoDatePickerMode_time$,
    'CupertinoDatePickerMode.date': _CupertinoDatePickerMode_date$,
    'CupertinoDatePickerMode.dateAndTime':
        _CupertinoDatePickerMode_dateAndTime$,
    'CupertinoDatePickerMode.values': _CupertinoDatePickerMode_values$,
    'CupertinoTimerPickerMode.hm': _CupertinoTimerPickerMode_hm$,
    'CupertinoTimerPickerMode.ms': _CupertinoTimerPickerMode_ms$,
    'CupertinoTimerPickerMode.hms': _CupertinoTimerPickerMode_hms$,
    'CupertinoTimerPickerMode.values': _CupertinoTimerPickerMode_values$,
  },
  {},
  {
    'CupertinoDatePicker': m.ClassMirror(
      'CupertinoDatePicker',
      {
        '#as': CupertinoDatePicker_as$,
        '#is': CupertinoDatePicker_is$,
        'mode': _CupertinoDatePicker_mode$,
        'initialDateTime': _CupertinoDatePicker_initialDateTime$,
        'minimumDate': _CupertinoDatePicker_minimumDate$,
        'maximumDate': _CupertinoDatePicker_maximumDate$,
        'minimumYear': _CupertinoDatePicker_minimumYear$,
        'maximumYear': _CupertinoDatePicker_maximumYear$,
        'minuteInterval': _CupertinoDatePicker_minuteInterval$,
        'use24hFormat': _CupertinoDatePicker_use24hFormat$,
        'dateOrder': _CupertinoDatePicker_dateOrder$,
        'onDateTimeChanged': _CupertinoDatePicker_onDateTimeChanged$,
        'backgroundColor': _CupertinoDatePicker_backgroundColor$,
        'showDayOfWeek': _CupertinoDatePicker_showDayOfWeek$,
        'createState': _CupertinoDatePicker_createState$,
      },
      {},
    ),
    'CupertinoTimerPicker': m.ClassMirror(
      'CupertinoTimerPicker',
      {
        '#as': CupertinoTimerPicker_as$,
        '#is': CupertinoTimerPicker_is$,
        'mode': _CupertinoTimerPicker_mode$,
        'initialTimerDuration': _CupertinoTimerPicker_initialTimerDuration$,
        'minuteInterval': _CupertinoTimerPicker_minuteInterval$,
        'secondInterval': _CupertinoTimerPicker_secondInterval$,
        'onTimerDurationChanged': _CupertinoTimerPicker_onTimerDurationChanged$,
        'alignment': _CupertinoTimerPicker_alignment$,
        'backgroundColor': _CupertinoTimerPicker_backgroundColor$,
        'createState': _CupertinoTimerPicker_createState$,
      },
      {},
    ),
    'CupertinoDatePickerMode': m.ClassMirror(
      'CupertinoDatePickerMode',
      {},
      {},
    ),
    'CupertinoTimerPickerMode': m.ClassMirror(
      'CupertinoTimerPickerMode',
      {},
      {},
    ),
  },
);
Function CupertinoDatePicker_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CupertinoDatePicker;
Function CupertinoDatePicker_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CupertinoDatePicker;
CupertinoDatePickerMode _CupertinoDatePicker_mode$(CupertinoDatePicker target) {
  return target.mode;
}

DateTime _CupertinoDatePicker_initialDateTime$(CupertinoDatePicker target) {
  return target.initialDateTime;
}

DateTime? _CupertinoDatePicker_minimumDate$(CupertinoDatePicker target) {
  return target.minimumDate;
}

DateTime? _CupertinoDatePicker_maximumDate$(CupertinoDatePicker target) {
  return target.maximumDate;
}

int _CupertinoDatePicker_minimumYear$(CupertinoDatePicker target) {
  return target.minimumYear;
}

int? _CupertinoDatePicker_maximumYear$(CupertinoDatePicker target) {
  return target.maximumYear;
}

int _CupertinoDatePicker_minuteInterval$(CupertinoDatePicker target) {
  return target.minuteInterval;
}

bool _CupertinoDatePicker_use24hFormat$(CupertinoDatePicker target) {
  return target.use24hFormat;
}

DatePickerDateOrder? _CupertinoDatePicker_dateOrder$(
    CupertinoDatePicker target) {
  return target.dateOrder;
}

void Function(DateTime) _CupertinoDatePicker_onDateTimeChanged$(
    CupertinoDatePicker target) {
  return target.onDateTimeChanged;
}

Color? _CupertinoDatePicker_backgroundColor$(CupertinoDatePicker target) {
  return target.backgroundColor;
}

bool _CupertinoDatePicker_showDayOfWeek$(CupertinoDatePicker target) {
  return target.showDayOfWeek;
}

Function _CupertinoDatePicker_createState$(
  m.Scope scope,
  CupertinoDatePicker target,
) =>
    target.createState;
Function CupertinoTimerPicker_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CupertinoTimerPicker;
Function CupertinoTimerPicker_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CupertinoTimerPicker;
CupertinoTimerPickerMode _CupertinoTimerPicker_mode$(
    CupertinoTimerPicker target) {
  return target.mode;
}

Duration _CupertinoTimerPicker_initialTimerDuration$(
    CupertinoTimerPicker target) {
  return target.initialTimerDuration;
}

int _CupertinoTimerPicker_minuteInterval$(CupertinoTimerPicker target) {
  return target.minuteInterval;
}

int _CupertinoTimerPicker_secondInterval$(CupertinoTimerPicker target) {
  return target.secondInterval;
}

void Function(Duration) _CupertinoTimerPicker_onTimerDurationChanged$(
    CupertinoTimerPicker target) {
  return target.onTimerDurationChanged;
}

AlignmentGeometry _CupertinoTimerPicker_alignment$(
    CupertinoTimerPicker target) {
  return target.alignment;
}

Color? _CupertinoTimerPicker_backgroundColor$(CupertinoTimerPicker target) {
  return target.backgroundColor;
}

Function _CupertinoTimerPicker_createState$(
  m.Scope scope,
  CupertinoTimerPicker target,
) =>
    target.createState;
CupertinoDatePickerMode _CupertinoDatePickerMode_time$() {
  return CupertinoDatePickerMode.time;
}

CupertinoDatePickerMode _CupertinoDatePickerMode_date$() {
  return CupertinoDatePickerMode.date;
}

CupertinoDatePickerMode _CupertinoDatePickerMode_dateAndTime$() {
  return CupertinoDatePickerMode.dateAndTime;
}

List<CupertinoDatePickerMode> _CupertinoDatePickerMode_values$() {
  return CupertinoDatePickerMode.values;
}

CupertinoTimerPickerMode _CupertinoTimerPickerMode_hm$() {
  return CupertinoTimerPickerMode.hm;
}

CupertinoTimerPickerMode _CupertinoTimerPickerMode_ms$() {
  return CupertinoTimerPickerMode.ms;
}

CupertinoTimerPickerMode _CupertinoTimerPickerMode_hms$() {
  return CupertinoTimerPickerMode.hms;
}

List<CupertinoTimerPickerMode> _CupertinoTimerPickerMode_values$() {
  return CupertinoTimerPickerMode.values;
}
