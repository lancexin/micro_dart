// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/flex.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/rendering/debug_overflow_indicator.dart';
import 'package:flutter/src/rendering/layer.dart';
import 'package:flutter/src/rendering/layout_helper.dart';
import 'package:flutter/src/rendering/object.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/flex.dart',
  {
    'FlexParentData.': _FlexParentData__$,
    'RenderFlex.': _RenderFlex__$,
    'FlexFit.tight': _FlexFit_tight$,
    'FlexFit.loose': _FlexFit_loose$,
    'FlexFit.values': _FlexFit_values$,
    'MainAxisSize.min': _MainAxisSize_min$,
    'MainAxisSize.max': _MainAxisSize_max$,
    'MainAxisSize.values': _MainAxisSize_values$,
    'MainAxisAlignment.start': _MainAxisAlignment_start$,
    'MainAxisAlignment.end': _MainAxisAlignment_end$,
    'MainAxisAlignment.center': _MainAxisAlignment_center$,
    'MainAxisAlignment.spaceBetween': _MainAxisAlignment_spaceBetween$,
    'MainAxisAlignment.spaceAround': _MainAxisAlignment_spaceAround$,
    'MainAxisAlignment.spaceEvenly': _MainAxisAlignment_spaceEvenly$,
    'MainAxisAlignment.values': _MainAxisAlignment_values$,
    'CrossAxisAlignment.start': _CrossAxisAlignment_start$,
    'CrossAxisAlignment.end': _CrossAxisAlignment_end$,
    'CrossAxisAlignment.center': _CrossAxisAlignment_center$,
    'CrossAxisAlignment.stretch': _CrossAxisAlignment_stretch$,
    'CrossAxisAlignment.baseline': _CrossAxisAlignment_baseline$,
    'CrossAxisAlignment.values': _CrossAxisAlignment_values$,
  },
  {},
  {
    'FlexParentData': m.ClassMirror(
      'FlexParentData',
      {
        '#as': FlexParentData_as$,
        '#is': FlexParentData_is$,
        'flex': _FlexParentData_flex$,
        'fit': _FlexParentData_fit$,
        'toString': _FlexParentData_toString$,
      },
      {
        'flex': _FlexParentData_flex_set$,
        'fit': _FlexParentData_fit_set$,
      },
    ),
    'RenderFlex': m.ClassMirror(
      'RenderFlex',
      {
        '#as': RenderFlex_as$,
        '#is': RenderFlex_is$,
        'direction': _RenderFlex_direction$,
        'mainAxisAlignment': _RenderFlex_mainAxisAlignment$,
        'mainAxisSize': _RenderFlex_mainAxisSize$,
        'crossAxisAlignment': _RenderFlex_crossAxisAlignment$,
        'textDirection': _RenderFlex_textDirection$,
        'verticalDirection': _RenderFlex_verticalDirection$,
        'textBaseline': _RenderFlex_textBaseline$,
        'clipBehavior': _RenderFlex_clipBehavior$,
        'setupParentData': _RenderFlex_setupParentData$,
        'computeMinIntrinsicWidth': _RenderFlex_computeMinIntrinsicWidth$,
        'computeMaxIntrinsicWidth': _RenderFlex_computeMaxIntrinsicWidth$,
        'computeMinIntrinsicHeight': _RenderFlex_computeMinIntrinsicHeight$,
        'computeMaxIntrinsicHeight': _RenderFlex_computeMaxIntrinsicHeight$,
        'computeDistanceToActualBaseline':
            _RenderFlex_computeDistanceToActualBaseline$,
        'computeDryLayout': _RenderFlex_computeDryLayout$,
        'performLayout': _RenderFlex_performLayout$,
        'hitTestChildren': _RenderFlex_hitTestChildren$,
        'paint': _RenderFlex_paint$,
        'dispose': _RenderFlex_dispose$,
        'describeApproximatePaintClip':
            _RenderFlex_describeApproximatePaintClip$,
        'toStringShort': _RenderFlex_toStringShort$,
        'debugFillProperties': _RenderFlex_debugFillProperties$,
      },
      {
        'direction': _RenderFlex_direction_set$,
        'mainAxisAlignment': _RenderFlex_mainAxisAlignment_set$,
        'mainAxisSize': _RenderFlex_mainAxisSize_set$,
        'crossAxisAlignment': _RenderFlex_crossAxisAlignment_set$,
        'textDirection': _RenderFlex_textDirection_set$,
        'verticalDirection': _RenderFlex_verticalDirection_set$,
        'textBaseline': _RenderFlex_textBaseline_set$,
        'clipBehavior': _RenderFlex_clipBehavior_set$,
      },
    ),
    'FlexFit': m.ClassMirror(
      'FlexFit',
      {},
      {},
    ),
    'MainAxisSize': m.ClassMirror(
      'MainAxisSize',
      {},
      {},
    ),
    'MainAxisAlignment': m.ClassMirror(
      'MainAxisAlignment',
      {},
      {},
    ),
    'CrossAxisAlignment': m.ClassMirror(
      'CrossAxisAlignment',
      {},
      {},
    ),
  },
);
Function FlexParentData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FlexParentData;
Function FlexParentData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FlexParentData;
Function _FlexParentData_flex$(
  m.Scope scope$,
  FlexParentData target$,
) =>
    () {
      return target$.flex;
    };
void _FlexParentData_flex_set$(
  m.Scope scope$,
  FlexParentData target$,
) =>
    (dynamic other$) {
      target$.flex = other$;
    };
Function _FlexParentData_fit$(
  m.Scope scope$,
  FlexParentData target$,
) =>
    () {
      return target$.fit;
    };
void _FlexParentData_fit_set$(
  m.Scope scope$,
  FlexParentData target$,
) =>
    (dynamic other$) {
      target$.fit = other$;
    };
Function _FlexParentData__$(m.Scope scope$) => () {
      return FlexParentData();
    };
Function _FlexParentData_toString$(
  m.Scope scope$,
  FlexParentData target$,
) =>
    target$.toString;
Function RenderFlex_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RenderFlex;
Function RenderFlex_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RenderFlex;
Function _RenderFlex_direction$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    () {
      return target$.direction;
    };
void _RenderFlex_direction_set$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    (dynamic other$) {
      target$.direction = other$;
    };
Function _RenderFlex_mainAxisAlignment$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    () {
      return target$.mainAxisAlignment;
    };
void _RenderFlex_mainAxisAlignment_set$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    (dynamic other$) {
      target$.mainAxisAlignment = other$;
    };
Function _RenderFlex_mainAxisSize$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    () {
      return target$.mainAxisSize;
    };
void _RenderFlex_mainAxisSize_set$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    (dynamic other$) {
      target$.mainAxisSize = other$;
    };
Function _RenderFlex_crossAxisAlignment$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    () {
      return target$.crossAxisAlignment;
    };
void _RenderFlex_crossAxisAlignment_set$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    (dynamic other$) {
      target$.crossAxisAlignment = other$;
    };
Function _RenderFlex_textDirection$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    () {
      return target$.textDirection;
    };
void _RenderFlex_textDirection_set$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    (dynamic other$) {
      target$.textDirection = other$;
    };
Function _RenderFlex_verticalDirection$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    () {
      return target$.verticalDirection;
    };
void _RenderFlex_verticalDirection_set$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    (dynamic other$) {
      target$.verticalDirection = other$;
    };
Function _RenderFlex_textBaseline$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    () {
      return target$.textBaseline;
    };
void _RenderFlex_textBaseline_set$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    (dynamic other$) {
      target$.textBaseline = other$;
    };
Function _RenderFlex_clipBehavior$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    () {
      return target$.clipBehavior;
    };
void _RenderFlex_clipBehavior_set$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    (dynamic other$) {
      target$.clipBehavior = other$;
    };
Function _RenderFlex__$(m.Scope scope$) => ({
      List? children,
      Axis? direction,
      MainAxisSize? mainAxisSize,
      MainAxisAlignment? mainAxisAlignment,
      CrossAxisAlignment? crossAxisAlignment,
      TextDirection? textDirection,
      VerticalDirection? verticalDirection,
      TextBaseline? textBaseline,
      Clip? clipBehavior,
    }) {
      return RenderFlex(
        children: children == null ? null : List.from(children),
        clipBehavior: clipBehavior ?? Clip.none,
        crossAxisAlignment: crossAxisAlignment ?? CrossAxisAlignment.center,
        direction: direction ?? Axis.horizontal,
        mainAxisAlignment: mainAxisAlignment ?? MainAxisAlignment.start,
        mainAxisSize: mainAxisSize ?? MainAxisSize.max,
        textBaseline: textBaseline,
        textDirection: textDirection,
        verticalDirection: verticalDirection ?? VerticalDirection.down,
      );
    };
Function _RenderFlex_setupParentData$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    target$.setupParentData;
Function _RenderFlex_computeMinIntrinsicWidth$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    target$.computeMinIntrinsicWidth;
Function _RenderFlex_computeMaxIntrinsicWidth$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    target$.computeMaxIntrinsicWidth;
Function _RenderFlex_computeMinIntrinsicHeight$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    target$.computeMinIntrinsicHeight;
Function _RenderFlex_computeMaxIntrinsicHeight$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    target$.computeMaxIntrinsicHeight;
Function _RenderFlex_computeDistanceToActualBaseline$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    target$.computeDistanceToActualBaseline;
Function _RenderFlex_computeDryLayout$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    target$.computeDryLayout;
Function _RenderFlex_performLayout$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    target$.performLayout;
Function _RenderFlex_hitTestChildren$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    target$.hitTestChildren;
Function _RenderFlex_paint$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    target$.paint;
Function _RenderFlex_dispose$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    target$.dispose;
Function _RenderFlex_describeApproximatePaintClip$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    target$.describeApproximatePaintClip;
Function _RenderFlex_toStringShort$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    target$.toStringShort;
Function _RenderFlex_debugFillProperties$(
  m.Scope scope$,
  RenderFlex target$,
) =>
    target$.debugFillProperties;
FlexFit _FlexFit_tight$() {
  return FlexFit.tight;
}

FlexFit _FlexFit_loose$() {
  return FlexFit.loose;
}

List<FlexFit> _FlexFit_values$() {
  return FlexFit.values;
}

MainAxisSize _MainAxisSize_min$() {
  return MainAxisSize.min;
}

MainAxisSize _MainAxisSize_max$() {
  return MainAxisSize.max;
}

List<MainAxisSize> _MainAxisSize_values$() {
  return MainAxisSize.values;
}

MainAxisAlignment _MainAxisAlignment_start$() {
  return MainAxisAlignment.start;
}

MainAxisAlignment _MainAxisAlignment_end$() {
  return MainAxisAlignment.end;
}

MainAxisAlignment _MainAxisAlignment_center$() {
  return MainAxisAlignment.center;
}

MainAxisAlignment _MainAxisAlignment_spaceBetween$() {
  return MainAxisAlignment.spaceBetween;
}

MainAxisAlignment _MainAxisAlignment_spaceAround$() {
  return MainAxisAlignment.spaceAround;
}

MainAxisAlignment _MainAxisAlignment_spaceEvenly$() {
  return MainAxisAlignment.spaceEvenly;
}

List<MainAxisAlignment> _MainAxisAlignment_values$() {
  return MainAxisAlignment.values;
}

CrossAxisAlignment _CrossAxisAlignment_start$() {
  return CrossAxisAlignment.start;
}

CrossAxisAlignment _CrossAxisAlignment_end$() {
  return CrossAxisAlignment.end;
}

CrossAxisAlignment _CrossAxisAlignment_center$() {
  return CrossAxisAlignment.center;
}

CrossAxisAlignment _CrossAxisAlignment_stretch$() {
  return CrossAxisAlignment.stretch;
}

CrossAxisAlignment _CrossAxisAlignment_baseline$() {
  return CrossAxisAlignment.baseline;
}

List<CrossAxisAlignment> _CrossAxisAlignment_values$() {
  return CrossAxisAlignment.values;
}
