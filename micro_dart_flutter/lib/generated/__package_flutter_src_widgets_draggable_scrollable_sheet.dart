// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/draggable_scrollable_sheet.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/binding.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/inherited_notifier.dart';
import 'package:flutter/src/widgets/layout_builder.dart';
import 'package:flutter/src/widgets/notification_listener.dart';
import 'package:flutter/src/widgets/scroll_activity.dart';
import 'package:flutter/src/widgets/scroll_context.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/scroll_position.dart';
import 'package:flutter/src/widgets/scroll_position_with_single_context.dart';
import 'package:flutter/src/widgets/scroll_simulation.dart';
import 'package:flutter/src/widgets/value_listenable_builder.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/draggable_scrollable_sheet.dart',
  {'DraggableScrollableActuator.reset': _DraggableScrollableActuator_reset$},
  {},
  {
    'DraggableScrollableController': m.ClassMirror(
      'DraggableScrollableController',
      {
        'size': _DraggableScrollableController_size$,
        'pixels': _DraggableScrollableController_pixels$,
        'isAttached': _DraggableScrollableController_isAttached$,
        'sizeToPixels': _DraggableScrollableController_sizeToPixels$,
        'pixelsToSize': _DraggableScrollableController_pixelsToSize$,
        'animateTo': _DraggableScrollableController_animateTo$,
        'jumpTo': _DraggableScrollableController_jumpTo$,
        'reset': _DraggableScrollableController_reset$,
      },
      {},
    ),
    'DraggableScrollableSheet': m.ClassMirror(
      'DraggableScrollableSheet',
      {
        'initialChildSize': _DraggableScrollableSheet_initialChildSize$,
        'minChildSize': _DraggableScrollableSheet_minChildSize$,
        'maxChildSize': _DraggableScrollableSheet_maxChildSize$,
        'expand': _DraggableScrollableSheet_expand$,
        'snap': _DraggableScrollableSheet_snap$,
        'snapSizes': _DraggableScrollableSheet_snapSizes$,
        'snapAnimationDuration':
            _DraggableScrollableSheet_snapAnimationDuration$,
        'controller': _DraggableScrollableSheet_controller$,
        'builder': _DraggableScrollableSheet_builder$,
        'createState': _DraggableScrollableSheet_createState$,
      },
      {},
    ),
    'DraggableScrollableNotification': m.ClassMirror(
      'DraggableScrollableNotification',
      {
        'extent': _DraggableScrollableNotification_extent$,
        'minExtent': _DraggableScrollableNotification_minExtent$,
        'maxExtent': _DraggableScrollableNotification_maxExtent$,
        'initialExtent': _DraggableScrollableNotification_initialExtent$,
        'context': _DraggableScrollableNotification_context$,
        'debugFillDescription':
            _DraggableScrollableNotification_debugFillDescription$,
      },
      {},
    ),
    'DraggableScrollableActuator': m.ClassMirror(
      'DraggableScrollableActuator',
      {
        'child': _DraggableScrollableActuator_child$,
        'build': _DraggableScrollableActuator_build$,
      },
      {},
    ),
  },
);
double _DraggableScrollableController_size$(
    DraggableScrollableController target) {
  return target.size;
}

double _DraggableScrollableController_pixels$(
    DraggableScrollableController target) {
  return target.pixels;
}

bool _DraggableScrollableController_isAttached$(
    DraggableScrollableController target) {
  return target.isAttached;
}

Function _DraggableScrollableController_sizeToPixels$(
  m.Scope scope,
  DraggableScrollableController target,
) =>
    target.sizeToPixels;
Function _DraggableScrollableController_pixelsToSize$(
  m.Scope scope,
  DraggableScrollableController target,
) =>
    target.pixelsToSize;
Function _DraggableScrollableController_animateTo$(
  m.Scope scope,
  DraggableScrollableController target,
) =>
    target.animateTo;
Function _DraggableScrollableController_jumpTo$(
  m.Scope scope,
  DraggableScrollableController target,
) =>
    target.jumpTo;
Function _DraggableScrollableController_reset$(
  m.Scope scope,
  DraggableScrollableController target,
) =>
    target.reset;
double _DraggableScrollableSheet_initialChildSize$(
    DraggableScrollableSheet target) {
  return target.initialChildSize;
}

double _DraggableScrollableSheet_minChildSize$(
    DraggableScrollableSheet target) {
  return target.minChildSize;
}

double _DraggableScrollableSheet_maxChildSize$(
    DraggableScrollableSheet target) {
  return target.maxChildSize;
}

bool _DraggableScrollableSheet_expand$(DraggableScrollableSheet target) {
  return target.expand;
}

bool _DraggableScrollableSheet_snap$(DraggableScrollableSheet target) {
  return target.snap;
}

List<double>? _DraggableScrollableSheet_snapSizes$(
    DraggableScrollableSheet target) {
  return target.snapSizes;
}

Duration? _DraggableScrollableSheet_snapAnimationDuration$(
    DraggableScrollableSheet target) {
  return target.snapAnimationDuration;
}

DraggableScrollableController? _DraggableScrollableSheet_controller$(
    DraggableScrollableSheet target) {
  return target.controller;
}

Widget Function(BuildContext, ScrollController)
    _DraggableScrollableSheet_builder$(DraggableScrollableSheet target) {
  return target.builder;
}

Function _DraggableScrollableSheet_createState$(
  m.Scope scope,
  DraggableScrollableSheet target,
) =>
    target.createState;
double _DraggableScrollableNotification_extent$(
    DraggableScrollableNotification target) {
  return target.extent;
}

double _DraggableScrollableNotification_minExtent$(
    DraggableScrollableNotification target) {
  return target.minExtent;
}

double _DraggableScrollableNotification_maxExtent$(
    DraggableScrollableNotification target) {
  return target.maxExtent;
}

double _DraggableScrollableNotification_initialExtent$(
    DraggableScrollableNotification target) {
  return target.initialExtent;
}

BuildContext _DraggableScrollableNotification_context$(
    DraggableScrollableNotification target) {
  return target.context;
}

Function _DraggableScrollableNotification_debugFillDescription$(
  m.Scope scope,
  DraggableScrollableNotification target,
) =>
    target.debugFillDescription;
Widget _DraggableScrollableActuator_child$(DraggableScrollableActuator target) {
  return target.child;
}

Function _DraggableScrollableActuator_reset$(m.Scope scope) =>
    DraggableScrollableActuator.reset;
Function _DraggableScrollableActuator_build$(
  m.Scope scope,
  DraggableScrollableActuator target,
) =>
    target.build;
