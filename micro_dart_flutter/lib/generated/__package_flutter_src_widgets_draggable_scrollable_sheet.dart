// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/draggable_scrollable_sheet.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/binding.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/inherited_notifier.dart';
import 'package:flutter/src/widgets/layout_builder.dart';
import 'package:flutter/src/widgets/notification_listener.dart';
import 'package:flutter/src/widgets/scroll_activity.dart';
import 'package:flutter/src/widgets/scroll_context.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/scroll_position.dart';
import 'package:flutter/src/widgets/scroll_position_with_single_context.dart';
import 'package:flutter/src/widgets/scroll_simulation.dart';
import 'package:flutter/src/widgets/value_listenable_builder.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/draggable_scrollable_sheet.dart',
  {
    'DraggableScrollableController.': _DraggableScrollableController__$,
    'DraggableScrollableSheet.': _DraggableScrollableSheet__$,
    'DraggableScrollableNotification.': _DraggableScrollableNotification__$,
    'DraggableScrollableActuator.': _DraggableScrollableActuator__$,
    'DraggableScrollableActuator.reset': _DraggableScrollableActuator_reset$,
  },
  {},
  {
    'DraggableScrollableController': m.ClassMirror(
      'DraggableScrollableController',
      {
        '#as': DraggableScrollableController_as$,
        '#is': DraggableScrollableController_is$,
        'size': _DraggableScrollableController_size$,
        'pixels': _DraggableScrollableController_pixels$,
        'isAttached': _DraggableScrollableController_isAttached$,
        'sizeToPixels': _DraggableScrollableController_sizeToPixels$,
        'pixelsToSize': _DraggableScrollableController_pixelsToSize$,
        'animateTo': _DraggableScrollableController_animateTo$,
        'jumpTo': _DraggableScrollableController_jumpTo$,
        'reset': _DraggableScrollableController_reset$,
      },
      {},
    ),
    'DraggableScrollableSheet': m.ClassMirror(
      'DraggableScrollableSheet',
      {
        '#as': DraggableScrollableSheet_as$,
        '#is': DraggableScrollableSheet_is$,
        'initialChildSize': _DraggableScrollableSheet_initialChildSize$,
        'minChildSize': _DraggableScrollableSheet_minChildSize$,
        'maxChildSize': _DraggableScrollableSheet_maxChildSize$,
        'expand': _DraggableScrollableSheet_expand$,
        'snap': _DraggableScrollableSheet_snap$,
        'snapSizes': _DraggableScrollableSheet_snapSizes$,
        'snapAnimationDuration':
            _DraggableScrollableSheet_snapAnimationDuration$,
        'controller': _DraggableScrollableSheet_controller$,
        'builder': _DraggableScrollableSheet_builder$,
        'createState': _DraggableScrollableSheet_createState$,
      },
      {},
    ),
    'DraggableScrollableNotification': m.ClassMirror(
      'DraggableScrollableNotification',
      {
        '#as': DraggableScrollableNotification_as$,
        '#is': DraggableScrollableNotification_is$,
        'extent': _DraggableScrollableNotification_extent$,
        'minExtent': _DraggableScrollableNotification_minExtent$,
        'maxExtent': _DraggableScrollableNotification_maxExtent$,
        'initialExtent': _DraggableScrollableNotification_initialExtent$,
        'context': _DraggableScrollableNotification_context$,
        'debugFillDescription':
            _DraggableScrollableNotification_debugFillDescription$,
      },
      {},
    ),
    'DraggableScrollableActuator': m.ClassMirror(
      'DraggableScrollableActuator',
      {
        '#as': DraggableScrollableActuator_as$,
        '#is': DraggableScrollableActuator_is$,
        'child': _DraggableScrollableActuator_child$,
        'build': _DraggableScrollableActuator_build$,
      },
      {},
    ),
  },
);
Function DraggableScrollableController_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DraggableScrollableController;
Function DraggableScrollableController_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DraggableScrollableController;
Function _DraggableScrollableController_size$(
  m.Scope scope$,
  DraggableScrollableController target$,
) =>
    () {
      return target$.size;
    };
Function _DraggableScrollableController_pixels$(
  m.Scope scope$,
  DraggableScrollableController target$,
) =>
    () {
      return target$.pixels;
    };
Function _DraggableScrollableController_isAttached$(
  m.Scope scope$,
  DraggableScrollableController target$,
) =>
    () {
      return target$.isAttached;
    };
Function _DraggableScrollableController__$(m.Scope scope$) => () {
      return DraggableScrollableController();
    };
Function _DraggableScrollableController_sizeToPixels$(
  m.Scope scope$,
  DraggableScrollableController target$,
) =>
    target$.sizeToPixels;
Function _DraggableScrollableController_pixelsToSize$(
  m.Scope scope$,
  DraggableScrollableController target$,
) =>
    target$.pixelsToSize;
Function _DraggableScrollableController_animateTo$(
  m.Scope scope$,
  DraggableScrollableController target$,
) =>
    target$.animateTo;
Function _DraggableScrollableController_jumpTo$(
  m.Scope scope$,
  DraggableScrollableController target$,
) =>
    target$.jumpTo;
Function _DraggableScrollableController_reset$(
  m.Scope scope$,
  DraggableScrollableController target$,
) =>
    target$.reset;
Function DraggableScrollableSheet_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DraggableScrollableSheet;
Function DraggableScrollableSheet_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DraggableScrollableSheet;
Function _DraggableScrollableSheet_initialChildSize$(
  m.Scope scope$,
  DraggableScrollableSheet target$,
) =>
    () {
      return target$.initialChildSize;
    };
Function _DraggableScrollableSheet_minChildSize$(
  m.Scope scope$,
  DraggableScrollableSheet target$,
) =>
    () {
      return target$.minChildSize;
    };
Function _DraggableScrollableSheet_maxChildSize$(
  m.Scope scope$,
  DraggableScrollableSheet target$,
) =>
    () {
      return target$.maxChildSize;
    };
Function _DraggableScrollableSheet_expand$(
  m.Scope scope$,
  DraggableScrollableSheet target$,
) =>
    () {
      return target$.expand;
    };
Function _DraggableScrollableSheet_snap$(
  m.Scope scope$,
  DraggableScrollableSheet target$,
) =>
    () {
      return target$.snap;
    };
Function _DraggableScrollableSheet_snapSizes$(
  m.Scope scope$,
  DraggableScrollableSheet target$,
) =>
    () {
      return target$.snapSizes;
    };
Function _DraggableScrollableSheet_snapAnimationDuration$(
  m.Scope scope$,
  DraggableScrollableSheet target$,
) =>
    () {
      return target$.snapAnimationDuration;
    };
Function _DraggableScrollableSheet_controller$(
  m.Scope scope$,
  DraggableScrollableSheet target$,
) =>
    () {
      return target$.controller;
    };
Function _DraggableScrollableSheet_builder$(
  m.Scope scope$,
  DraggableScrollableSheet target$,
) =>
    () {
      return target$.builder;
    };
Function _DraggableScrollableSheet__$(m.Scope scope$) => ({
      Key? key,
      double? initialChildSize,
      double? minChildSize,
      double? maxChildSize,
      bool? expand,
      bool? snap,
      List? snapSizes,
      Duration? snapAnimationDuration,
      DraggableScrollableController? controller,
      required m.FunctionPointer builder,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        ScrollController builder_scrollController$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [
              builder_context$,
              builder_scrollController$,
            ],
            {},
          );
      return DraggableScrollableSheet(
        builder: builderProxy,
        controller: controller,
        expand: expand ?? true,
        initialChildSize: initialChildSize ?? 0.5,
        key: key,
        maxChildSize: maxChildSize ?? 1.0,
        minChildSize: minChildSize ?? 0.25,
        snap: snap ?? false,
        snapAnimationDuration: snapAnimationDuration,
        snapSizes: snapSizes == null ? null : List.from(snapSizes),
      );
    };
Function _DraggableScrollableSheet_createState$(
  m.Scope scope$,
  DraggableScrollableSheet target$,
) =>
    target$.createState;
Function DraggableScrollableNotification_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DraggableScrollableNotification;
Function DraggableScrollableNotification_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DraggableScrollableNotification;
Function _DraggableScrollableNotification_extent$(
  m.Scope scope$,
  DraggableScrollableNotification target$,
) =>
    () {
      return target$.extent;
    };
Function _DraggableScrollableNotification_minExtent$(
  m.Scope scope$,
  DraggableScrollableNotification target$,
) =>
    () {
      return target$.minExtent;
    };
Function _DraggableScrollableNotification_maxExtent$(
  m.Scope scope$,
  DraggableScrollableNotification target$,
) =>
    () {
      return target$.maxExtent;
    };
Function _DraggableScrollableNotification_initialExtent$(
  m.Scope scope$,
  DraggableScrollableNotification target$,
) =>
    () {
      return target$.initialExtent;
    };
Function _DraggableScrollableNotification_context$(
  m.Scope scope$,
  DraggableScrollableNotification target$,
) =>
    () {
      return target$.context;
    };
Function _DraggableScrollableNotification__$(m.Scope scope$) => ({
      required double extent,
      required double minExtent,
      required double maxExtent,
      required double initialExtent,
      required BuildContext context,
    }) {
      return DraggableScrollableNotification(
        context: context,
        extent: extent,
        initialExtent: initialExtent,
        maxExtent: maxExtent,
        minExtent: minExtent,
      );
    };
Function _DraggableScrollableNotification_debugFillDescription$(
  m.Scope scope$,
  DraggableScrollableNotification target$,
) =>
    target$.debugFillDescription;
Function DraggableScrollableActuator_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DraggableScrollableActuator;
Function DraggableScrollableActuator_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DraggableScrollableActuator;
Function _DraggableScrollableActuator_child$(
  m.Scope scope$,
  DraggableScrollableActuator target$,
) =>
    () {
      return target$.child;
    };
Function _DraggableScrollableActuator__$(m.Scope scope$) => ({
      Key? key,
      required Widget child,
    }) {
      return DraggableScrollableActuator(
        child: child,
        key: key,
      );
    };
Function _DraggableScrollableActuator_reset$(m.Scope scope$) =>
    DraggableScrollableActuator.reset;
Function _DraggableScrollableActuator_build$(
  m.Scope scope$,
  DraggableScrollableActuator target$,
) =>
    target$.build;
