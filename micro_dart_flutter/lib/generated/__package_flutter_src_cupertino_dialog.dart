// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/dialog.dart';
import 'dart:math';
import 'dart:ui' show ImageFilter;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/interface_level.dart';
import 'package:flutter/src/cupertino/localizations.dart';
import 'package:flutter/src/cupertino/scrollbar.dart';
import 'package:flutter/src/cupertino/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/dialog.dart',
  {},
  {},
  {
    'CupertinoAlertDialog': m.ClassMirror(
      'CupertinoAlertDialog',
      {
        '#as': CupertinoAlertDialog_as$,
        '#is': CupertinoAlertDialog_is$,
        'title': _CupertinoAlertDialog_title$,
        'content': _CupertinoAlertDialog_content$,
        'actions': _CupertinoAlertDialog_actions$,
        'scrollController': _CupertinoAlertDialog_scrollController$,
        'actionScrollController': _CupertinoAlertDialog_actionScrollController$,
        'insetAnimationDuration': _CupertinoAlertDialog_insetAnimationDuration$,
        'insetAnimationCurve': _CupertinoAlertDialog_insetAnimationCurve$,
        'build': _CupertinoAlertDialog_build$,
      },
      {},
    ),
    'CupertinoPopupSurface': m.ClassMirror(
      'CupertinoPopupSurface',
      {
        '#as': CupertinoPopupSurface_as$,
        '#is': CupertinoPopupSurface_is$,
        'isSurfacePainted': _CupertinoPopupSurface_isSurfacePainted$,
        'child': _CupertinoPopupSurface_child$,
        'build': _CupertinoPopupSurface_build$,
      },
      {},
    ),
    'CupertinoActionSheet': m.ClassMirror(
      'CupertinoActionSheet',
      {
        '#as': CupertinoActionSheet_as$,
        '#is': CupertinoActionSheet_is$,
        'title': _CupertinoActionSheet_title$,
        'message': _CupertinoActionSheet_message$,
        'actions': _CupertinoActionSheet_actions$,
        'messageScrollController':
            _CupertinoActionSheet_messageScrollController$,
        'actionScrollController': _CupertinoActionSheet_actionScrollController$,
        'cancelButton': _CupertinoActionSheet_cancelButton$,
        'build': _CupertinoActionSheet_build$,
      },
      {},
    ),
    'CupertinoActionSheetAction': m.ClassMirror(
      'CupertinoActionSheetAction',
      {
        '#as': CupertinoActionSheetAction_as$,
        '#is': CupertinoActionSheetAction_is$,
        'onPressed': _CupertinoActionSheetAction_onPressed$,
        'isDefaultAction': _CupertinoActionSheetAction_isDefaultAction$,
        'isDestructiveAction': _CupertinoActionSheetAction_isDestructiveAction$,
        'child': _CupertinoActionSheetAction_child$,
        'build': _CupertinoActionSheetAction_build$,
      },
      {},
    ),
    'CupertinoDialogAction': m.ClassMirror(
      'CupertinoDialogAction',
      {
        '#as': CupertinoDialogAction_as$,
        '#is': CupertinoDialogAction_is$,
        'onPressed': _CupertinoDialogAction_onPressed$,
        'isDefaultAction': _CupertinoDialogAction_isDefaultAction$,
        'isDestructiveAction': _CupertinoDialogAction_isDestructiveAction$,
        'textStyle': _CupertinoDialogAction_textStyle$,
        'child': _CupertinoDialogAction_child$,
        'enabled': _CupertinoDialogAction_enabled$,
        'build': _CupertinoDialogAction_build$,
      },
      {},
    ),
  },
);
Function CupertinoAlertDialog_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CupertinoAlertDialog;
Function CupertinoAlertDialog_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CupertinoAlertDialog;
Widget? _CupertinoAlertDialog_title$(CupertinoAlertDialog target) {
  return target.title;
}

Widget? _CupertinoAlertDialog_content$(CupertinoAlertDialog target) {
  return target.content;
}

List<Widget> _CupertinoAlertDialog_actions$(CupertinoAlertDialog target) {
  return target.actions;
}

ScrollController? _CupertinoAlertDialog_scrollController$(
    CupertinoAlertDialog target) {
  return target.scrollController;
}

ScrollController? _CupertinoAlertDialog_actionScrollController$(
    CupertinoAlertDialog target) {
  return target.actionScrollController;
}

Duration _CupertinoAlertDialog_insetAnimationDuration$(
    CupertinoAlertDialog target) {
  return target.insetAnimationDuration;
}

Curve _CupertinoAlertDialog_insetAnimationCurve$(CupertinoAlertDialog target) {
  return target.insetAnimationCurve;
}

Function _CupertinoAlertDialog_build$(
  m.Scope scope,
  CupertinoAlertDialog target,
) =>
    target.build;
Function CupertinoPopupSurface_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CupertinoPopupSurface;
Function CupertinoPopupSurface_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CupertinoPopupSurface;
bool _CupertinoPopupSurface_isSurfacePainted$(CupertinoPopupSurface target) {
  return target.isSurfacePainted;
}

Widget? _CupertinoPopupSurface_child$(CupertinoPopupSurface target) {
  return target.child;
}

Function _CupertinoPopupSurface_build$(
  m.Scope scope,
  CupertinoPopupSurface target,
) =>
    target.build;
Function CupertinoActionSheet_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CupertinoActionSheet;
Function CupertinoActionSheet_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CupertinoActionSheet;
Widget? _CupertinoActionSheet_title$(CupertinoActionSheet target) {
  return target.title;
}

Widget? _CupertinoActionSheet_message$(CupertinoActionSheet target) {
  return target.message;
}

List<Widget>? _CupertinoActionSheet_actions$(CupertinoActionSheet target) {
  return target.actions;
}

ScrollController? _CupertinoActionSheet_messageScrollController$(
    CupertinoActionSheet target) {
  return target.messageScrollController;
}

ScrollController? _CupertinoActionSheet_actionScrollController$(
    CupertinoActionSheet target) {
  return target.actionScrollController;
}

Widget? _CupertinoActionSheet_cancelButton$(CupertinoActionSheet target) {
  return target.cancelButton;
}

Function _CupertinoActionSheet_build$(
  m.Scope scope,
  CupertinoActionSheet target,
) =>
    target.build;
Function CupertinoActionSheetAction_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CupertinoActionSheetAction;
Function CupertinoActionSheetAction_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CupertinoActionSheetAction;
void Function() _CupertinoActionSheetAction_onPressed$(
    CupertinoActionSheetAction target) {
  return target.onPressed;
}

bool _CupertinoActionSheetAction_isDefaultAction$(
    CupertinoActionSheetAction target) {
  return target.isDefaultAction;
}

bool _CupertinoActionSheetAction_isDestructiveAction$(
    CupertinoActionSheetAction target) {
  return target.isDestructiveAction;
}

Widget _CupertinoActionSheetAction_child$(CupertinoActionSheetAction target) {
  return target.child;
}

Function _CupertinoActionSheetAction_build$(
  m.Scope scope,
  CupertinoActionSheetAction target,
) =>
    target.build;
Function CupertinoDialogAction_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CupertinoDialogAction;
Function CupertinoDialogAction_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CupertinoDialogAction;
void Function()? _CupertinoDialogAction_onPressed$(
    CupertinoDialogAction target) {
  return target.onPressed;
}

bool _CupertinoDialogAction_isDefaultAction$(CupertinoDialogAction target) {
  return target.isDefaultAction;
}

bool _CupertinoDialogAction_isDestructiveAction$(CupertinoDialogAction target) {
  return target.isDestructiveAction;
}

TextStyle? _CupertinoDialogAction_textStyle$(CupertinoDialogAction target) {
  return target.textStyle;
}

Widget _CupertinoDialogAction_child$(CupertinoDialogAction target) {
  return target.child;
}

bool _CupertinoDialogAction_enabled$(CupertinoDialogAction target) {
  return target.enabled;
}

Function _CupertinoDialogAction_build$(
  m.Scope scope,
  CupertinoDialogAction target,
) =>
    target.build;
