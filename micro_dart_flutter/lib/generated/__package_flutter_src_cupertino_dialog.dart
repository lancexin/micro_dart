// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/dialog.dart';
import 'dart:math';
import 'dart:ui' show ImageFilter;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/interface_level.dart';
import 'package:flutter/src/cupertino/localizations.dart';
import 'package:flutter/src/cupertino/scrollbar.dart';
import 'package:flutter/src/cupertino/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/dialog.dart',
  {
    'CupertinoAlertDialog.': _CupertinoAlertDialog__$,
    'CupertinoPopupSurface.': _CupertinoPopupSurface__$,
    'CupertinoActionSheet.': _CupertinoActionSheet__$,
    'CupertinoActionSheetAction.': _CupertinoActionSheetAction__$,
    'CupertinoDialogAction.': _CupertinoDialogAction__$,
  },
  {},
  {
    'CupertinoAlertDialog': m.ClassMirror(
      'CupertinoAlertDialog',
      {
        '#as': CupertinoAlertDialog_as$,
        '#is': CupertinoAlertDialog_is$,
        'title': _CupertinoAlertDialog_title$,
        'content': _CupertinoAlertDialog_content$,
        'actions': _CupertinoAlertDialog_actions$,
        'scrollController': _CupertinoAlertDialog_scrollController$,
        'actionScrollController': _CupertinoAlertDialog_actionScrollController$,
        'insetAnimationDuration': _CupertinoAlertDialog_insetAnimationDuration$,
        'insetAnimationCurve': _CupertinoAlertDialog_insetAnimationCurve$,
        'build': _CupertinoAlertDialog_build$,
      },
      {},
    ),
    'CupertinoPopupSurface': m.ClassMirror(
      'CupertinoPopupSurface',
      {
        '#as': CupertinoPopupSurface_as$,
        '#is': CupertinoPopupSurface_is$,
        'isSurfacePainted': _CupertinoPopupSurface_isSurfacePainted$,
        'child': _CupertinoPopupSurface_child$,
        'build': _CupertinoPopupSurface_build$,
      },
      {},
    ),
    'CupertinoActionSheet': m.ClassMirror(
      'CupertinoActionSheet',
      {
        '#as': CupertinoActionSheet_as$,
        '#is': CupertinoActionSheet_is$,
        'title': _CupertinoActionSheet_title$,
        'message': _CupertinoActionSheet_message$,
        'actions': _CupertinoActionSheet_actions$,
        'messageScrollController':
            _CupertinoActionSheet_messageScrollController$,
        'actionScrollController': _CupertinoActionSheet_actionScrollController$,
        'cancelButton': _CupertinoActionSheet_cancelButton$,
        'build': _CupertinoActionSheet_build$,
      },
      {},
    ),
    'CupertinoActionSheetAction': m.ClassMirror(
      'CupertinoActionSheetAction',
      {
        '#as': CupertinoActionSheetAction_as$,
        '#is': CupertinoActionSheetAction_is$,
        'onPressed': _CupertinoActionSheetAction_onPressed$,
        'isDefaultAction': _CupertinoActionSheetAction_isDefaultAction$,
        'isDestructiveAction': _CupertinoActionSheetAction_isDestructiveAction$,
        'child': _CupertinoActionSheetAction_child$,
        'build': _CupertinoActionSheetAction_build$,
      },
      {},
    ),
    'CupertinoDialogAction': m.ClassMirror(
      'CupertinoDialogAction',
      {
        '#as': CupertinoDialogAction_as$,
        '#is': CupertinoDialogAction_is$,
        'onPressed': _CupertinoDialogAction_onPressed$,
        'isDefaultAction': _CupertinoDialogAction_isDefaultAction$,
        'isDestructiveAction': _CupertinoDialogAction_isDestructiveAction$,
        'textStyle': _CupertinoDialogAction_textStyle$,
        'child': _CupertinoDialogAction_child$,
        'enabled': _CupertinoDialogAction_enabled$,
        'build': _CupertinoDialogAction_build$,
      },
      {},
    ),
  },
);
Function CupertinoAlertDialog_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoAlertDialog;
Function CupertinoAlertDialog_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoAlertDialog;
Function _CupertinoAlertDialog_title$(
  m.Scope scope$,
  CupertinoAlertDialog target$,
) =>
    () {
      return target$.title;
    };
Function _CupertinoAlertDialog_content$(
  m.Scope scope$,
  CupertinoAlertDialog target$,
) =>
    () {
      return target$.content;
    };
Function _CupertinoAlertDialog_actions$(
  m.Scope scope$,
  CupertinoAlertDialog target$,
) =>
    () {
      return target$.actions;
    };
Function _CupertinoAlertDialog_scrollController$(
  m.Scope scope$,
  CupertinoAlertDialog target$,
) =>
    () {
      return target$.scrollController;
    };
Function _CupertinoAlertDialog_actionScrollController$(
  m.Scope scope$,
  CupertinoAlertDialog target$,
) =>
    () {
      return target$.actionScrollController;
    };
Function _CupertinoAlertDialog_insetAnimationDuration$(
  m.Scope scope$,
  CupertinoAlertDialog target$,
) =>
    () {
      return target$.insetAnimationDuration;
    };
Function _CupertinoAlertDialog_insetAnimationCurve$(
  m.Scope scope$,
  CupertinoAlertDialog target$,
) =>
    () {
      return target$.insetAnimationCurve;
    };
Function _CupertinoAlertDialog__$(m.Scope scope$) => ({
      Key? key,
      Widget? title,
      Widget? content,
      List? actions,
      ScrollController? scrollController,
      ScrollController? actionScrollController,
      Duration? insetAnimationDuration,
      Curve? insetAnimationCurve,
    }) {
      return CupertinoAlertDialog(
        actionScrollController: actionScrollController,
        actions: actions == null ? const <Widget>[] : List.from(actions),
        content: content,
        insetAnimationCurve: insetAnimationCurve ?? Curves.decelerate,
        insetAnimationDuration:
            insetAnimationDuration ?? const Duration(milliseconds: 100),
        key: key,
        scrollController: scrollController,
        title: title,
      );
    };
Function _CupertinoAlertDialog_build$(
  m.Scope scope$,
  CupertinoAlertDialog target$,
) =>
    target$.build;
Function CupertinoPopupSurface_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoPopupSurface;
Function CupertinoPopupSurface_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoPopupSurface;
Function _CupertinoPopupSurface_isSurfacePainted$(
  m.Scope scope$,
  CupertinoPopupSurface target$,
) =>
    () {
      return target$.isSurfacePainted;
    };
Function _CupertinoPopupSurface_child$(
  m.Scope scope$,
  CupertinoPopupSurface target$,
) =>
    () {
      return target$.child;
    };
Function _CupertinoPopupSurface__$(m.Scope scope$) => ({
      Key? key,
      bool? isSurfacePainted,
      Widget? child,
    }) {
      return CupertinoPopupSurface(
        child: child,
        isSurfacePainted: isSurfacePainted ?? true,
        key: key,
      );
    };
Function _CupertinoPopupSurface_build$(
  m.Scope scope$,
  CupertinoPopupSurface target$,
) =>
    target$.build;
Function CupertinoActionSheet_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoActionSheet;
Function CupertinoActionSheet_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoActionSheet;
Function _CupertinoActionSheet_title$(
  m.Scope scope$,
  CupertinoActionSheet target$,
) =>
    () {
      return target$.title;
    };
Function _CupertinoActionSheet_message$(
  m.Scope scope$,
  CupertinoActionSheet target$,
) =>
    () {
      return target$.message;
    };
Function _CupertinoActionSheet_actions$(
  m.Scope scope$,
  CupertinoActionSheet target$,
) =>
    () {
      return target$.actions;
    };
Function _CupertinoActionSheet_messageScrollController$(
  m.Scope scope$,
  CupertinoActionSheet target$,
) =>
    () {
      return target$.messageScrollController;
    };
Function _CupertinoActionSheet_actionScrollController$(
  m.Scope scope$,
  CupertinoActionSheet target$,
) =>
    () {
      return target$.actionScrollController;
    };
Function _CupertinoActionSheet_cancelButton$(
  m.Scope scope$,
  CupertinoActionSheet target$,
) =>
    () {
      return target$.cancelButton;
    };
Function _CupertinoActionSheet__$(m.Scope scope$) => ({
      Key? key,
      Widget? title,
      Widget? message,
      List? actions,
      ScrollController? messageScrollController,
      ScrollController? actionScrollController,
      Widget? cancelButton,
    }) {
      return CupertinoActionSheet(
        actionScrollController: actionScrollController,
        actions: actions == null ? null : List.from(actions),
        cancelButton: cancelButton,
        key: key,
        message: message,
        messageScrollController: messageScrollController,
        title: title,
      );
    };
Function _CupertinoActionSheet_build$(
  m.Scope scope$,
  CupertinoActionSheet target$,
) =>
    target$.build;
Function CupertinoActionSheetAction_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoActionSheetAction;
Function CupertinoActionSheetAction_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoActionSheetAction;
Function _CupertinoActionSheetAction_onPressed$(
  m.Scope scope$,
  CupertinoActionSheetAction target$,
) =>
    () {
      return target$.onPressed;
    };
Function _CupertinoActionSheetAction_isDefaultAction$(
  m.Scope scope$,
  CupertinoActionSheetAction target$,
) =>
    () {
      return target$.isDefaultAction;
    };
Function _CupertinoActionSheetAction_isDestructiveAction$(
  m.Scope scope$,
  CupertinoActionSheetAction target$,
) =>
    () {
      return target$.isDestructiveAction;
    };
Function _CupertinoActionSheetAction_child$(
  m.Scope scope$,
  CupertinoActionSheetAction target$,
) =>
    () {
      return target$.child;
    };
Function _CupertinoActionSheetAction__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer onPressed,
      bool? isDefaultAction,
      bool? isDestructiveAction,
      required Widget child,
    }) {
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed,
            [],
            {},
          );
      return CupertinoActionSheetAction(
        child: child,
        isDefaultAction: isDefaultAction ?? false,
        isDestructiveAction: isDestructiveAction ?? false,
        key: key,
        onPressed: onPressedProxy,
      );
    };
Function _CupertinoActionSheetAction_build$(
  m.Scope scope$,
  CupertinoActionSheetAction target$,
) =>
    target$.build;
Function CupertinoDialogAction_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoDialogAction;
Function CupertinoDialogAction_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoDialogAction;
Function _CupertinoDialogAction_onPressed$(
  m.Scope scope$,
  CupertinoDialogAction target$,
) =>
    () {
      return target$.onPressed;
    };
Function _CupertinoDialogAction_isDefaultAction$(
  m.Scope scope$,
  CupertinoDialogAction target$,
) =>
    () {
      return target$.isDefaultAction;
    };
Function _CupertinoDialogAction_isDestructiveAction$(
  m.Scope scope$,
  CupertinoDialogAction target$,
) =>
    () {
      return target$.isDestructiveAction;
    };
Function _CupertinoDialogAction_textStyle$(
  m.Scope scope$,
  CupertinoDialogAction target$,
) =>
    () {
      return target$.textStyle;
    };
Function _CupertinoDialogAction_child$(
  m.Scope scope$,
  CupertinoDialogAction target$,
) =>
    () {
      return target$.child;
    };
Function _CupertinoDialogAction_enabled$(
  m.Scope scope$,
  CupertinoDialogAction target$,
) =>
    () {
      return target$.enabled;
    };
Function _CupertinoDialogAction__$(m.Scope scope$) => ({
      Key? key,
      m.FunctionPointer? onPressed,
      bool? isDefaultAction,
      bool? isDestructiveAction,
      TextStyle? textStyle,
      required Widget child,
    }) {
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return CupertinoDialogAction(
        child: child,
        isDefaultAction: isDefaultAction ?? false,
        isDestructiveAction: isDestructiveAction ?? false,
        key: key,
        onPressed: onPressed == null ? null : onPressedProxy,
        textStyle: textStyle,
      );
    };
Function _CupertinoDialogAction_build$(
  m.Scope scope$,
  CupertinoDialogAction target$,
) =>
    target$.build;
