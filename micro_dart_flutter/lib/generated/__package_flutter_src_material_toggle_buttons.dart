// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/toggle_buttons.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/ink_ripple.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/text_button.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/material/toggle_buttons_theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/toggle_buttons.dart',
  {},
  {},
  {
    'ToggleButtons': m.ClassMirror(
      'ToggleButtons',
      {
        '#as': ToggleButtons_as$,
        '#is': ToggleButtons_is$,
        'children': _ToggleButtons_children$,
        'isSelected': _ToggleButtons_isSelected$,
        'onPressed': _ToggleButtons_onPressed$,
        'mouseCursor': _ToggleButtons_mouseCursor$,
        'tapTargetSize': _ToggleButtons_tapTargetSize$,
        'textStyle': _ToggleButtons_textStyle$,
        'constraints': _ToggleButtons_constraints$,
        'color': _ToggleButtons_color$,
        'selectedColor': _ToggleButtons_selectedColor$,
        'disabledColor': _ToggleButtons_disabledColor$,
        'fillColor': _ToggleButtons_fillColor$,
        'focusColor': _ToggleButtons_focusColor$,
        'highlightColor': _ToggleButtons_highlightColor$,
        'splashColor': _ToggleButtons_splashColor$,
        'hoverColor': _ToggleButtons_hoverColor$,
        'focusNodes': _ToggleButtons_focusNodes$,
        'renderBorder': _ToggleButtons_renderBorder$,
        'borderColor': _ToggleButtons_borderColor$,
        'selectedBorderColor': _ToggleButtons_selectedBorderColor$,
        'disabledBorderColor': _ToggleButtons_disabledBorderColor$,
        'borderWidth': _ToggleButtons_borderWidth$,
        'borderRadius': _ToggleButtons_borderRadius$,
        'direction': _ToggleButtons_direction$,
        'verticalDirection': _ToggleButtons_verticalDirection$,
        'build': _ToggleButtons_build$,
        'debugFillProperties': _ToggleButtons_debugFillProperties$,
      },
      {},
    )
  },
);
Function ToggleButtons_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ToggleButtons;
Function ToggleButtons_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ToggleButtons;
List<Widget> _ToggleButtons_children$(ToggleButtons target) {
  return target.children;
}

List<bool> _ToggleButtons_isSelected$(ToggleButtons target) {
  return target.isSelected;
}

void Function(int)? _ToggleButtons_onPressed$(ToggleButtons target) {
  return target.onPressed;
}

MouseCursor? _ToggleButtons_mouseCursor$(ToggleButtons target) {
  return target.mouseCursor;
}

MaterialTapTargetSize? _ToggleButtons_tapTargetSize$(ToggleButtons target) {
  return target.tapTargetSize;
}

TextStyle? _ToggleButtons_textStyle$(ToggleButtons target) {
  return target.textStyle;
}

BoxConstraints? _ToggleButtons_constraints$(ToggleButtons target) {
  return target.constraints;
}

Color? _ToggleButtons_color$(ToggleButtons target) {
  return target.color;
}

Color? _ToggleButtons_selectedColor$(ToggleButtons target) {
  return target.selectedColor;
}

Color? _ToggleButtons_disabledColor$(ToggleButtons target) {
  return target.disabledColor;
}

Color? _ToggleButtons_fillColor$(ToggleButtons target) {
  return target.fillColor;
}

Color? _ToggleButtons_focusColor$(ToggleButtons target) {
  return target.focusColor;
}

Color? _ToggleButtons_highlightColor$(ToggleButtons target) {
  return target.highlightColor;
}

Color? _ToggleButtons_splashColor$(ToggleButtons target) {
  return target.splashColor;
}

Color? _ToggleButtons_hoverColor$(ToggleButtons target) {
  return target.hoverColor;
}

List<FocusNode>? _ToggleButtons_focusNodes$(ToggleButtons target) {
  return target.focusNodes;
}

bool _ToggleButtons_renderBorder$(ToggleButtons target) {
  return target.renderBorder;
}

Color? _ToggleButtons_borderColor$(ToggleButtons target) {
  return target.borderColor;
}

Color? _ToggleButtons_selectedBorderColor$(ToggleButtons target) {
  return target.selectedBorderColor;
}

Color? _ToggleButtons_disabledBorderColor$(ToggleButtons target) {
  return target.disabledBorderColor;
}

double? _ToggleButtons_borderWidth$(ToggleButtons target) {
  return target.borderWidth;
}

BorderRadius? _ToggleButtons_borderRadius$(ToggleButtons target) {
  return target.borderRadius;
}

Axis _ToggleButtons_direction$(ToggleButtons target) {
  return target.direction;
}

VerticalDirection _ToggleButtons_verticalDirection$(ToggleButtons target) {
  return target.verticalDirection;
}

Function _ToggleButtons_build$(
  m.Scope scope,
  ToggleButtons target,
) =>
    target.build;
Function _ToggleButtons_debugFillProperties$(
  m.Scope scope,
  ToggleButtons target,
) =>
    target.debugFillProperties;
