// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/toggle_buttons.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/ink_ripple.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/text_button.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/material/toggle_buttons_theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/toggle_buttons.dart',
  {'ToggleButtons.': _ToggleButtons__$},
  {},
  {
    'ToggleButtons': m.ClassMirror(
      'ToggleButtons',
      {
        '#as': ToggleButtons_as$,
        '#is': ToggleButtons_is$,
        'children': _ToggleButtons_children$,
        'isSelected': _ToggleButtons_isSelected$,
        'onPressed': _ToggleButtons_onPressed$,
        'mouseCursor': _ToggleButtons_mouseCursor$,
        'tapTargetSize': _ToggleButtons_tapTargetSize$,
        'textStyle': _ToggleButtons_textStyle$,
        'constraints': _ToggleButtons_constraints$,
        'color': _ToggleButtons_color$,
        'selectedColor': _ToggleButtons_selectedColor$,
        'disabledColor': _ToggleButtons_disabledColor$,
        'fillColor': _ToggleButtons_fillColor$,
        'focusColor': _ToggleButtons_focusColor$,
        'highlightColor': _ToggleButtons_highlightColor$,
        'splashColor': _ToggleButtons_splashColor$,
        'hoverColor': _ToggleButtons_hoverColor$,
        'focusNodes': _ToggleButtons_focusNodes$,
        'renderBorder': _ToggleButtons_renderBorder$,
        'borderColor': _ToggleButtons_borderColor$,
        'selectedBorderColor': _ToggleButtons_selectedBorderColor$,
        'disabledBorderColor': _ToggleButtons_disabledBorderColor$,
        'borderWidth': _ToggleButtons_borderWidth$,
        'borderRadius': _ToggleButtons_borderRadius$,
        'direction': _ToggleButtons_direction$,
        'verticalDirection': _ToggleButtons_verticalDirection$,
        'build': _ToggleButtons_build$,
        'debugFillProperties': _ToggleButtons_debugFillProperties$,
      },
      {},
    )
  },
);
Function ToggleButtons_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ToggleButtons;
Function ToggleButtons_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ToggleButtons;
Function _ToggleButtons_children$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    () {
      return target$.children;
    };
Function _ToggleButtons_isSelected$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    () {
      return target$.isSelected;
    };
Function _ToggleButtons_onPressed$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    () {
      return target$.onPressed;
    };
Function _ToggleButtons_mouseCursor$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    () {
      return target$.mouseCursor;
    };
Function _ToggleButtons_tapTargetSize$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    () {
      return target$.tapTargetSize;
    };
Function _ToggleButtons_textStyle$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    () {
      return target$.textStyle;
    };
Function _ToggleButtons_constraints$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    () {
      return target$.constraints;
    };
Function _ToggleButtons_color$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    () {
      return target$.color;
    };
Function _ToggleButtons_selectedColor$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    () {
      return target$.selectedColor;
    };
Function _ToggleButtons_disabledColor$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    () {
      return target$.disabledColor;
    };
Function _ToggleButtons_fillColor$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    () {
      return target$.fillColor;
    };
Function _ToggleButtons_focusColor$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    () {
      return target$.focusColor;
    };
Function _ToggleButtons_highlightColor$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    () {
      return target$.highlightColor;
    };
Function _ToggleButtons_splashColor$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    () {
      return target$.splashColor;
    };
Function _ToggleButtons_hoverColor$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    () {
      return target$.hoverColor;
    };
Function _ToggleButtons_focusNodes$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    () {
      return target$.focusNodes;
    };
Function _ToggleButtons_renderBorder$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    () {
      return target$.renderBorder;
    };
Function _ToggleButtons_borderColor$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    () {
      return target$.borderColor;
    };
Function _ToggleButtons_selectedBorderColor$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    () {
      return target$.selectedBorderColor;
    };
Function _ToggleButtons_disabledBorderColor$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    () {
      return target$.disabledBorderColor;
    };
Function _ToggleButtons_borderWidth$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    () {
      return target$.borderWidth;
    };
Function _ToggleButtons_borderRadius$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    () {
      return target$.borderRadius;
    };
Function _ToggleButtons_direction$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    () {
      return target$.direction;
    };
Function _ToggleButtons_verticalDirection$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    () {
      return target$.verticalDirection;
    };
Function _ToggleButtons__$(m.Scope scope$) => ({
      Key? key,
      required List children,
      required List isSelected,
      m.FunctionPointer? onPressed,
      MouseCursor? mouseCursor,
      MaterialTapTargetSize? tapTargetSize,
      TextStyle? textStyle,
      BoxConstraints? constraints,
      Color? color,
      Color? selectedColor,
      Color? disabledColor,
      Color? fillColor,
      Color? focusColor,
      Color? highlightColor,
      Color? hoverColor,
      Color? splashColor,
      List? focusNodes,
      bool? renderBorder,
      Color? borderColor,
      Color? selectedBorderColor,
      Color? disabledBorderColor,
      BorderRadius? borderRadius,
      double? borderWidth,
      Axis? direction,
      VerticalDirection? verticalDirection,
    }) {
      void onPressedProxy(int onPressed_index$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [onPressed_index$],
            {},
          );
      return ToggleButtons(
        borderColor: borderColor,
        borderRadius: borderRadius,
        borderWidth: borderWidth,
        children: List.from(children),
        color: color,
        constraints: constraints,
        direction: direction ?? Axis.horizontal,
        disabledBorderColor: disabledBorderColor,
        disabledColor: disabledColor,
        fillColor: fillColor,
        focusColor: focusColor,
        focusNodes: focusNodes == null ? null : List.from(focusNodes),
        highlightColor: highlightColor,
        hoverColor: hoverColor,
        isSelected: List.from(isSelected),
        key: key,
        mouseCursor: mouseCursor,
        onPressed: onPressed == null ? null : onPressedProxy,
        renderBorder: renderBorder ?? true,
        selectedBorderColor: selectedBorderColor,
        selectedColor: selectedColor,
        splashColor: splashColor,
        tapTargetSize: tapTargetSize,
        textStyle: textStyle,
        verticalDirection: verticalDirection ?? VerticalDirection.down,
      );
    };
Function _ToggleButtons_build$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    target$.build;
Function _ToggleButtons_debugFillProperties$(
  m.Scope scope$,
  ToggleButtons target$,
) =>
    target$.debugFillProperties;
