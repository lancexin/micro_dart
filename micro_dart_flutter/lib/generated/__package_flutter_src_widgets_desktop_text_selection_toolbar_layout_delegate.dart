// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/desktop_text_selection_toolbar_layout_delegate.dart';
import 'package:flutter/rendering.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/desktop_text_selection_toolbar_layout_delegate.dart',
  {
    'DesktopTextSelectionToolbarLayoutDelegate.':
        _DesktopTextSelectionToolbarLayoutDelegate__$
  },
  {},
  {
    'DesktopTextSelectionToolbarLayoutDelegate': m.ClassMirror(
      'DesktopTextSelectionToolbarLayoutDelegate',
      {
        '#as': DesktopTextSelectionToolbarLayoutDelegate_as$,
        '#is': DesktopTextSelectionToolbarLayoutDelegate_is$,
        'anchor': _DesktopTextSelectionToolbarLayoutDelegate_anchor$,
        'getConstraintsForChild':
            _DesktopTextSelectionToolbarLayoutDelegate_getConstraintsForChild$,
        'getPositionForChild':
            _DesktopTextSelectionToolbarLayoutDelegate_getPositionForChild$,
        'shouldRelayout':
            _DesktopTextSelectionToolbarLayoutDelegate_shouldRelayout$,
      },
      {},
    )
  },
);
Function DesktopTextSelectionToolbarLayoutDelegate_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DesktopTextSelectionToolbarLayoutDelegate;
Function DesktopTextSelectionToolbarLayoutDelegate_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DesktopTextSelectionToolbarLayoutDelegate;
Function _DesktopTextSelectionToolbarLayoutDelegate_anchor$(
  m.Scope scope$,
  DesktopTextSelectionToolbarLayoutDelegate target$,
) =>
    () {
      return target$.anchor;
    };
Function _DesktopTextSelectionToolbarLayoutDelegate__$(m.Scope scope$) =>
    ({required Offset anchor}) {
      return DesktopTextSelectionToolbarLayoutDelegate(anchor: anchor);
    };
Function _DesktopTextSelectionToolbarLayoutDelegate_getConstraintsForChild$(
  m.Scope scope$,
  DesktopTextSelectionToolbarLayoutDelegate target$,
) =>
    target$.getConstraintsForChild;
Function _DesktopTextSelectionToolbarLayoutDelegate_getPositionForChild$(
  m.Scope scope$,
  DesktopTextSelectionToolbarLayoutDelegate target$,
) =>
    target$.getPositionForChild;
Function _DesktopTextSelectionToolbarLayoutDelegate_shouldRelayout$(
  m.Scope scope$,
  DesktopTextSelectionToolbarLayoutDelegate target$,
) =>
    target$.shouldRelayout;
