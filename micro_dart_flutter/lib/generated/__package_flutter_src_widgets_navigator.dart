// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/navigator.dart';
import 'dart:async';
import 'dart:collection';
import 'dart:convert';
import 'dart:developer';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/binding.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/focus_scope.dart';
import 'package:flutter/src/widgets/focus_traversal.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/heroes.dart';
import 'package:flutter/src/widgets/overlay.dart';
import 'package:flutter/src/widgets/restoration.dart';
import 'package:flutter/src/widgets/restoration_properties.dart';
import 'package:flutter/src/widgets/routes.dart';
import 'package:flutter/src/widgets/ticker_provider.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/navigator.dart',
  {
    'kDefaultRouteTraversalEdgeBehavior': _kDefaultRouteTraversalEdgeBehavior$,
    'RouteSettings.': _RouteSettings__$,
    'NavigatorObserver.': _NavigatorObserver__$,
    'HeroControllerScope.': _HeroControllerScope__$,
    'HeroControllerScope.none': _HeroControllerScope_none_$,
    'HeroControllerScope.maybeOf': _HeroControllerScope_maybeOf$,
    'HeroControllerScope.of': _HeroControllerScope_of$,
    'DefaultTransitionDelegate.': _DefaultTransitionDelegate__$,
    'Navigator.defaultRouteName': _Navigator_defaultRouteName$,
    'Navigator.': _Navigator__$,
    'Navigator.pushNamed': _Navigator_pushNamed$,
    'Navigator.restorablePushNamed': _Navigator_restorablePushNamed$,
    'Navigator.pushReplacementNamed': _Navigator_pushReplacementNamed$,
    'Navigator.restorablePushReplacementNamed':
        _Navigator_restorablePushReplacementNamed$,
    'Navigator.popAndPushNamed': _Navigator_popAndPushNamed$,
    'Navigator.restorablePopAndPushNamed':
        _Navigator_restorablePopAndPushNamed$,
    'Navigator.push': _Navigator_push$,
    'Navigator.pushReplacement': _Navigator_pushReplacement$,
    'Navigator.replace': _Navigator_replace$,
    'Navigator.replaceRouteBelow': _Navigator_replaceRouteBelow$,
    'Navigator.canPop': _Navigator_canPop$,
    'Navigator.maybePop': _Navigator_maybePop$,
    'Navigator.pop': _Navigator_pop$,
    'Navigator.removeRoute': _Navigator_removeRoute$,
    'Navigator.removeRouteBelow': _Navigator_removeRouteBelow$,
    'Navigator.of': _Navigator_of$,
    'Navigator.maybeOf': _Navigator_maybeOf$,
    'Navigator.defaultGenerateInitialRoutes':
        _Navigator_defaultGenerateInitialRoutes$,
    'NavigatorState.': _NavigatorState__$,
    'RestorableRouteFuture.': _RestorableRouteFuture__$,
    'RoutePopDisposition.pop': _RoutePopDisposition_pop$,
    'RoutePopDisposition.doNotPop': _RoutePopDisposition_doNotPop$,
    'RoutePopDisposition.bubble': _RoutePopDisposition_bubble$,
    'RoutePopDisposition.values': _RoutePopDisposition_values$,
  },
  {},
  {
    'Route': m.ClassMirror(
      'Route',
      {
        '#as': Route_as$,
        '#is': Route_is$,
        'navigator': _Route_navigator$,
        'settings': _Route_settings$,
        'restorationScopeId': _Route_restorationScopeId$,
        'overlayEntries': _Route_overlayEntries$,
        'willHandlePopInternally': _Route_willHandlePopInternally$,
        'currentResult': _Route_currentResult$,
        'popped': _Route_popped$,
        'isCurrent': _Route_isCurrent$,
        'isFirst': _Route_isFirst$,
        'hasActiveRouteBelow': _Route_hasActiveRouteBelow$,
        'isActive': _Route_isActive$,
        'install': _Route_install$,
        'didPush': _Route_didPush$,
        'didAdd': _Route_didAdd$,
        'didReplace': _Route_didReplace$,
        'willPop': _Route_willPop$,
        'didPop': _Route_didPop$,
        'didComplete': _Route_didComplete$,
        'didPopNext': _Route_didPopNext$,
        'didChangeNext': _Route_didChangeNext$,
        'didChangePrevious': _Route_didChangePrevious$,
        'changedInternalState': _Route_changedInternalState$,
        'changedExternalState': _Route_changedExternalState$,
        'dispose': _Route_dispose$,
      },
      {},
    ),
    'RouteSettings': m.ClassMirror(
      'RouteSettings',
      {
        '#as': RouteSettings_as$,
        '#is': RouteSettings_is$,
        'name': _RouteSettings_name$,
        'arguments': _RouteSettings_arguments$,
        'toString': _RouteSettings_toString$,
      },
      {},
    ),
    'Page': m.ClassMirror(
      'Page',
      {
        '#as': Page_as$,
        '#is': Page_is$,
        'key': _Page_key$,
        'restorationId': _Page_restorationId$,
        'canUpdate': _Page_canUpdate$,
        'createRoute': _Page_createRoute$,
        'toString': _Page_toString$,
      },
      {},
    ),
    'NavigatorObserver': m.ClassMirror(
      'NavigatorObserver',
      {
        '#as': NavigatorObserver_as$,
        '#is': NavigatorObserver_is$,
        'navigator': _NavigatorObserver_navigator$,
        'didPush': _NavigatorObserver_didPush$,
        'didPop': _NavigatorObserver_didPop$,
        'didRemove': _NavigatorObserver_didRemove$,
        'didReplace': _NavigatorObserver_didReplace$,
        'didStartUserGesture': _NavigatorObserver_didStartUserGesture$,
        'didStopUserGesture': _NavigatorObserver_didStopUserGesture$,
      },
      {},
    ),
    'HeroControllerScope': m.ClassMirror(
      'HeroControllerScope',
      {
        '#as': HeroControllerScope_as$,
        '#is': HeroControllerScope_is$,
        'controller': _HeroControllerScope_controller$,
        'updateShouldNotify': _HeroControllerScope_updateShouldNotify$,
      },
      {},
    ),
    'RouteTransitionRecord': m.ClassMirror(
      'RouteTransitionRecord',
      {
        '#as': RouteTransitionRecord_as$,
        '#is': RouteTransitionRecord_is$,
        'route': _RouteTransitionRecord_route$,
        'isWaitingForEnteringDecision':
            _RouteTransitionRecord_isWaitingForEnteringDecision$,
        'isWaitingForExitingDecision':
            _RouteTransitionRecord_isWaitingForExitingDecision$,
        'markForPush': _RouteTransitionRecord_markForPush$,
        'markForAdd': _RouteTransitionRecord_markForAdd$,
        'markForPop': _RouteTransitionRecord_markForPop$,
        'markForComplete': _RouteTransitionRecord_markForComplete$,
        'markForRemove': _RouteTransitionRecord_markForRemove$,
      },
      {},
    ),
    'TransitionDelegate': m.ClassMirror(
      'TransitionDelegate',
      {
        '#as': TransitionDelegate_as$,
        '#is': TransitionDelegate_is$,
        'resolve': _TransitionDelegate_resolve$,
      },
      {},
    ),
    'DefaultTransitionDelegate': m.ClassMirror(
      'DefaultTransitionDelegate',
      {
        '#as': DefaultTransitionDelegate_as$,
        '#is': DefaultTransitionDelegate_is$,
        'resolve': _DefaultTransitionDelegate_resolve$,
      },
      {},
    ),
    'Navigator': m.ClassMirror(
      'Navigator',
      {
        '#as': Navigator_as$,
        '#is': Navigator_is$,
        'pages': _Navigator_pages$,
        'onPopPage': _Navigator_onPopPage$,
        'transitionDelegate': _Navigator_transitionDelegate$,
        'initialRoute': _Navigator_initialRoute$,
        'onGenerateRoute': _Navigator_onGenerateRoute$,
        'onUnknownRoute': _Navigator_onUnknownRoute$,
        'observers': _Navigator_observers$,
        'restorationScopeId': _Navigator_restorationScopeId$,
        'routeTraversalEdgeBehavior': _Navigator_routeTraversalEdgeBehavior$,
        'onGenerateInitialRoutes': _Navigator_onGenerateInitialRoutes$,
        'reportsRouteUpdateToEngine': _Navigator_reportsRouteUpdateToEngine$,
        'clipBehavior': _Navigator_clipBehavior$,
        'requestFocus': _Navigator_requestFocus$,
        'pushNamedAndRemoveUntil': _Navigator_pushNamedAndRemoveUntil$,
        'restorablePushNamedAndRemoveUntil':
            _Navigator_restorablePushNamedAndRemoveUntil$,
        'restorablePush': _Navigator_restorablePush$,
        'restorablePushReplacement': _Navigator_restorablePushReplacement$,
        'pushAndRemoveUntil': _Navigator_pushAndRemoveUntil$,
        'restorablePushAndRemoveUntil':
            _Navigator_restorablePushAndRemoveUntil$,
        'restorableReplace': _Navigator_restorableReplace$,
        'restorableReplaceRouteBelow': _Navigator_restorableReplaceRouteBelow$,
        'popUntil': _Navigator_popUntil$,
        'createState': _Navigator_createState$,
      },
      {},
    ),
    'NavigatorState': m.ClassMirror(
      'NavigatorState',
      {
        '#as': NavigatorState_as$,
        '#is': NavigatorState_is$,
        'focusNode': _NavigatorState_focusNode$,
        'userGestureInProgressNotifier':
            _NavigatorState_userGestureInProgressNotifier$,
        'restorationId': _NavigatorState_restorationId$,
        'overlay': _NavigatorState_overlay$,
        'userGestureInProgress': _NavigatorState_userGestureInProgress$,
        'initState': _NavigatorState_initState$,
        'restoreState': _NavigatorState_restoreState$,
        'didToggleBucket': _NavigatorState_didToggleBucket$,
        'didChangeDependencies': _NavigatorState_didChangeDependencies$,
        'didUpdateWidget': _NavigatorState_didUpdateWidget$,
        'deactivate': _NavigatorState_deactivate$,
        'activate': _NavigatorState_activate$,
        'dispose': _NavigatorState_dispose$,
        'pushNamed': _NavigatorState_pushNamed$,
        'restorablePushNamed': _NavigatorState_restorablePushNamed$,
        'pushReplacementNamed': _NavigatorState_pushReplacementNamed$,
        'restorablePushReplacementNamed':
            _NavigatorState_restorablePushReplacementNamed$,
        'popAndPushNamed': _NavigatorState_popAndPushNamed$,
        'restorablePopAndPushNamed': _NavigatorState_restorablePopAndPushNamed$,
        'pushNamedAndRemoveUntil': _NavigatorState_pushNamedAndRemoveUntil$,
        'restorablePushNamedAndRemoveUntil':
            _NavigatorState_restorablePushNamedAndRemoveUntil$,
        'push': _NavigatorState_push$,
        'restorablePush': _NavigatorState_restorablePush$,
        'pushReplacement': _NavigatorState_pushReplacement$,
        'restorablePushReplacement': _NavigatorState_restorablePushReplacement$,
        'pushAndRemoveUntil': _NavigatorState_pushAndRemoveUntil$,
        'restorablePushAndRemoveUntil':
            _NavigatorState_restorablePushAndRemoveUntil$,
        'replace': _NavigatorState_replace$,
        'restorableReplace': _NavigatorState_restorableReplace$,
        'replaceRouteBelow': _NavigatorState_replaceRouteBelow$,
        'restorableReplaceRouteBelow':
            _NavigatorState_restorableReplaceRouteBelow$,
        'canPop': _NavigatorState_canPop$,
        'maybePop': _NavigatorState_maybePop$,
        'pop': _NavigatorState_pop$,
        'popUntil': _NavigatorState_popUntil$,
        'removeRoute': _NavigatorState_removeRoute$,
        'removeRouteBelow': _NavigatorState_removeRouteBelow$,
        'finalizeRoute': _NavigatorState_finalizeRoute$,
        'didStartUserGesture': _NavigatorState_didStartUserGesture$,
        'didStopUserGesture': _NavigatorState_didStopUserGesture$,
        'build': _NavigatorState_build$,
      },
      {},
    ),
    'RestorableRouteFuture': m.ClassMirror(
      'RestorableRouteFuture',
      {
        '#as': RestorableRouteFuture_as$,
        '#is': RestorableRouteFuture_is$,
        'navigatorFinder': _RestorableRouteFuture_navigatorFinder$,
        'onPresent': _RestorableRouteFuture_onPresent$,
        'onComplete': _RestorableRouteFuture_onComplete$,
        'isPresent': _RestorableRouteFuture_isPresent$,
        'route': _RestorableRouteFuture_route$,
        'enabled': _RestorableRouteFuture_enabled$,
        'present': _RestorableRouteFuture_present$,
        'createDefaultValue': _RestorableRouteFuture_createDefaultValue$,
        'initWithValue': _RestorableRouteFuture_initWithValue$,
        'toPrimitives': _RestorableRouteFuture_toPrimitives$,
        'fromPrimitives': _RestorableRouteFuture_fromPrimitives$,
        'dispose': _RestorableRouteFuture_dispose$,
      },
      {},
    ),
    'RoutePopDisposition': m.ClassMirror(
      'RoutePopDisposition',
      {},
      {},
    ),
  },
);
Function _kDefaultRouteTraversalEdgeBehavior$(m.Scope scope$) =>
    () => kDefaultRouteTraversalEdgeBehavior;
Function Route_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Route<T>;
Function Route_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Route<T>;
Function _Route_navigator$<T>(
  m.Scope scope$,
  Route<T> target$,
) =>
    () {
      return target$.navigator;
    };
Function _Route_settings$<T>(
  m.Scope scope$,
  Route<T> target$,
) =>
    () {
      return target$.settings;
    };
Function _Route_restorationScopeId$<T>(
  m.Scope scope$,
  Route<T> target$,
) =>
    () {
      return target$.restorationScopeId;
    };
Function _Route_overlayEntries$<T>(
  m.Scope scope$,
  Route<T> target$,
) =>
    () {
      return target$.overlayEntries;
    };
Function _Route_willHandlePopInternally$<T>(
  m.Scope scope$,
  Route<T> target$,
) =>
    () {
      return target$.willHandlePopInternally;
    };
Function _Route_currentResult$<T>(
  m.Scope scope$,
  Route<T> target$,
) =>
    () {
      return target$.currentResult;
    };
Function _Route_popped$<T>(
  m.Scope scope$,
  Route<T> target$,
) =>
    () {
      return target$.popped;
    };
Function _Route_isCurrent$<T>(
  m.Scope scope$,
  Route<T> target$,
) =>
    () {
      return target$.isCurrent;
    };
Function _Route_isFirst$<T>(
  m.Scope scope$,
  Route<T> target$,
) =>
    () {
      return target$.isFirst;
    };
Function _Route_hasActiveRouteBelow$<T>(
  m.Scope scope$,
  Route<T> target$,
) =>
    () {
      return target$.hasActiveRouteBelow;
    };
Function _Route_isActive$<T>(
  m.Scope scope$,
  Route<T> target$,
) =>
    () {
      return target$.isActive;
    };
Function _Route_install$<T>(
  m.Scope scope$,
  Route<T> target$,
) =>
    target$.install;
Function _Route_didPush$<T>(
  m.Scope scope$,
  Route<T> target$,
) =>
    target$.didPush;
Function _Route_didAdd$<T>(
  m.Scope scope$,
  Route<T> target$,
) =>
    target$.didAdd;
Function _Route_didReplace$<T>(
  m.Scope scope$,
  Route<T> target$,
) =>
    target$.didReplace;
Function _Route_willPop$<T>(
  m.Scope scope$,
  Route<T> target$,
) =>
    target$.willPop;
Function _Route_didPop$<T>(
  m.Scope scope$,
  Route<T> target$,
) =>
    target$.didPop;
Function _Route_didComplete$<T>(
  m.Scope scope$,
  Route<T> target$,
) =>
    target$.didComplete;
Function _Route_didPopNext$<T>(
  m.Scope scope$,
  Route<T> target$,
) =>
    target$.didPopNext;
Function _Route_didChangeNext$<T>(
  m.Scope scope$,
  Route<T> target$,
) =>
    target$.didChangeNext;
Function _Route_didChangePrevious$<T>(
  m.Scope scope$,
  Route<T> target$,
) =>
    target$.didChangePrevious;
Function _Route_changedInternalState$<T>(
  m.Scope scope$,
  Route<T> target$,
) =>
    target$.changedInternalState;
Function _Route_changedExternalState$<T>(
  m.Scope scope$,
  Route<T> target$,
) =>
    target$.changedExternalState;
Function _Route_dispose$<T>(
  m.Scope scope$,
  Route<T> target$,
) =>
    target$.dispose;
Function RouteSettings_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RouteSettings;
Function RouteSettings_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RouteSettings;
Function _RouteSettings_name$(
  m.Scope scope$,
  RouteSettings target$,
) =>
    () {
      return target$.name;
    };
Function _RouteSettings_arguments$(
  m.Scope scope$,
  RouteSettings target$,
) =>
    () {
      return target$.arguments;
    };
Function _RouteSettings__$(m.Scope scope$) => ({
      String? name,
      Object? arguments,
    }) {
      return RouteSettings(
        arguments: arguments,
        name: name,
      );
    };
Function _RouteSettings_toString$(
  m.Scope scope$,
  RouteSettings target$,
) =>
    target$.toString;
Function Page_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Page<T>;
Function Page_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Page<T>;
Function _Page_key$<T>(
  m.Scope scope$,
  Page<T> target$,
) =>
    () {
      return target$.key;
    };
Function _Page_restorationId$<T>(
  m.Scope scope$,
  Page<T> target$,
) =>
    () {
      return target$.restorationId;
    };
Function _Page_canUpdate$<T>(
  m.Scope scope$,
  Page<T> target$,
) =>
    target$.canUpdate;
Function _Page_createRoute$<T>(
  m.Scope scope$,
  Page<T> target$,
) =>
    target$.createRoute;
Function _Page_toString$<T>(
  m.Scope scope$,
  Page<T> target$,
) =>
    target$.toString;
Function NavigatorObserver_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as NavigatorObserver;
Function NavigatorObserver_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is NavigatorObserver;
Function _NavigatorObserver_navigator$(
  m.Scope scope$,
  NavigatorObserver target$,
) =>
    () {
      return target$.navigator;
    };
Function _NavigatorObserver__$(m.Scope scope$) => () {
      return NavigatorObserver();
    };
Function _NavigatorObserver_didPush$(
  m.Scope scope$,
  NavigatorObserver target$,
) =>
    target$.didPush;
Function _NavigatorObserver_didPop$(
  m.Scope scope$,
  NavigatorObserver target$,
) =>
    target$.didPop;
Function _NavigatorObserver_didRemove$(
  m.Scope scope$,
  NavigatorObserver target$,
) =>
    target$.didRemove;
Function _NavigatorObserver_didReplace$(
  m.Scope scope$,
  NavigatorObserver target$,
) =>
    target$.didReplace;
Function _NavigatorObserver_didStartUserGesture$(
  m.Scope scope$,
  NavigatorObserver target$,
) =>
    target$.didStartUserGesture;
Function _NavigatorObserver_didStopUserGesture$(
  m.Scope scope$,
  NavigatorObserver target$,
) =>
    target$.didStopUserGesture;
Function HeroControllerScope_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as HeroControllerScope;
Function HeroControllerScope_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is HeroControllerScope;
Function _HeroControllerScope_controller$(
  m.Scope scope$,
  HeroControllerScope target$,
) =>
    () {
      return target$.controller;
    };
Function _HeroControllerScope__$(m.Scope scope$) => ({
      Key? key,
      required HeroController controller,
      required Widget child,
    }) {
      return HeroControllerScope(
        child: child,
        controller: controller,
        key: key,
      );
    };
Function _HeroControllerScope_none_$(m.Scope scope$) =>
    HeroControllerScope.none;
Function _HeroControllerScope_maybeOf$(m.Scope scope$) =>
    HeroControllerScope.maybeOf;
Function _HeroControllerScope_of$(m.Scope scope$) => HeroControllerScope.of;
Function _HeroControllerScope_updateShouldNotify$(
  m.Scope scope$,
  HeroControllerScope target$,
) =>
    target$.updateShouldNotify;
Function RouteTransitionRecord_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RouteTransitionRecord;
Function RouteTransitionRecord_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RouteTransitionRecord;
Function _RouteTransitionRecord_route$(
  m.Scope scope$,
  RouteTransitionRecord target$,
) =>
    () {
      return target$.route;
    };
Function _RouteTransitionRecord_isWaitingForEnteringDecision$(
  m.Scope scope$,
  RouteTransitionRecord target$,
) =>
    () {
      return target$.isWaitingForEnteringDecision;
    };
Function _RouteTransitionRecord_isWaitingForExitingDecision$(
  m.Scope scope$,
  RouteTransitionRecord target$,
) =>
    () {
      return target$.isWaitingForExitingDecision;
    };
Function _RouteTransitionRecord_markForPush$(
  m.Scope scope$,
  RouteTransitionRecord target$,
) =>
    target$.markForPush;
Function _RouteTransitionRecord_markForAdd$(
  m.Scope scope$,
  RouteTransitionRecord target$,
) =>
    target$.markForAdd;
Function _RouteTransitionRecord_markForPop$(
  m.Scope scope$,
  RouteTransitionRecord target$,
) =>
    target$.markForPop;
Function _RouteTransitionRecord_markForComplete$(
  m.Scope scope$,
  RouteTransitionRecord target$,
) =>
    target$.markForComplete;
Function _RouteTransitionRecord_markForRemove$(
  m.Scope scope$,
  RouteTransitionRecord target$,
) =>
    target$.markForRemove;
Function TransitionDelegate_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TransitionDelegate<T>;
Function TransitionDelegate_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TransitionDelegate<T>;
Function _TransitionDelegate_resolve$<T>(
  m.Scope scope$,
  TransitionDelegate<T> target$,
) =>
    target$.resolve;
Function DefaultTransitionDelegate_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DefaultTransitionDelegate<T>;
Function DefaultTransitionDelegate_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DefaultTransitionDelegate<T>;
Function _DefaultTransitionDelegate__$(m.Scope scope$) => () {
      return DefaultTransitionDelegate();
    };
Function _DefaultTransitionDelegate_resolve$<T>(
  m.Scope scope$,
  DefaultTransitionDelegate<T> target$,
) =>
    target$.resolve;
Function Navigator_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Navigator;
Function Navigator_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Navigator;
Function _Navigator_pages$(
  m.Scope scope$,
  Navigator target$,
) =>
    () {
      return target$.pages;
    };
Function _Navigator_onPopPage$(
  m.Scope scope$,
  Navigator target$,
) =>
    () {
      return target$.onPopPage;
    };
Function _Navigator_transitionDelegate$(
  m.Scope scope$,
  Navigator target$,
) =>
    () {
      return target$.transitionDelegate;
    };
Function _Navigator_initialRoute$(
  m.Scope scope$,
  Navigator target$,
) =>
    () {
      return target$.initialRoute;
    };
Function _Navigator_onGenerateRoute$(
  m.Scope scope$,
  Navigator target$,
) =>
    () {
      return target$.onGenerateRoute;
    };
Function _Navigator_onUnknownRoute$(
  m.Scope scope$,
  Navigator target$,
) =>
    () {
      return target$.onUnknownRoute;
    };
Function _Navigator_observers$(
  m.Scope scope$,
  Navigator target$,
) =>
    () {
      return target$.observers;
    };
Function _Navigator_restorationScopeId$(
  m.Scope scope$,
  Navigator target$,
) =>
    () {
      return target$.restorationScopeId;
    };
Function _Navigator_routeTraversalEdgeBehavior$(
  m.Scope scope$,
  Navigator target$,
) =>
    () {
      return target$.routeTraversalEdgeBehavior;
    };
Function _Navigator_defaultRouteName$(m.Scope scope$) =>
    () => Navigator.defaultRouteName;
Function _Navigator_onGenerateInitialRoutes$(
  m.Scope scope$,
  Navigator target$,
) =>
    () {
      return target$.onGenerateInitialRoutes;
    };
Function _Navigator_reportsRouteUpdateToEngine$(
  m.Scope scope$,
  Navigator target$,
) =>
    () {
      return target$.reportsRouteUpdateToEngine;
    };
Function _Navigator_clipBehavior$(
  m.Scope scope$,
  Navigator target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _Navigator_requestFocus$(
  m.Scope scope$,
  Navigator target$,
) =>
    () {
      return target$.requestFocus;
    };
Function _Navigator__$(m.Scope scope$) => ({
      Key? key,
      List? pages,
      m.FunctionPointer? onPopPage,
      String? initialRoute,
      m.FunctionPointer? onGenerateInitialRoutes,
      m.FunctionPointer? onGenerateRoute,
      m.FunctionPointer? onUnknownRoute,
      TransitionDelegate<dynamic>? transitionDelegate,
      bool? reportsRouteUpdateToEngine,
      Clip? clipBehavior,
      List? observers,
      bool? requestFocus,
      String? restorationScopeId,
      TraversalEdgeBehavior? routeTraversalEdgeBehavior,
    }) {
      List<Route<dynamic>> onGenerateInitialRoutesProxy(
        NavigatorState onGenerateInitialRoutes_navigator$,
        String onGenerateInitialRoutes_initialRoute$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onGenerateInitialRoutes!,
            [
              onGenerateInitialRoutes_navigator$,
              onGenerateInitialRoutes_initialRoute$,
            ],
            {},
          );
      Route<dynamic>? onGenerateRouteProxy(
              RouteSettings onGenerateRoute_settings$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onGenerateRoute!,
            [onGenerateRoute_settings$],
            {},
          );
      bool onPopPageProxy(
        Route<dynamic> onPopPage_route$,
        dynamic onPopPage_result$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onPopPage!,
            [
              onPopPage_route$,
              onPopPage_result$,
            ],
            {},
          );
      Route<dynamic>? onUnknownRouteProxy(
              RouteSettings onUnknownRoute_settings$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onUnknownRoute!,
            [onUnknownRoute_settings$],
            {},
          );
      return Navigator(
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        initialRoute: initialRoute,
        key: key,
        observers: observers == null
            ? const <NavigatorObserver>[]
            : List.from(observers),
        onGenerateInitialRoutes: onGenerateInitialRoutes == null
            ? Navigator.defaultGenerateInitialRoutes
            : onGenerateInitialRoutesProxy,
        onGenerateRoute: onGenerateRoute == null ? null : onGenerateRouteProxy,
        onPopPage: onPopPage == null ? null : onPopPageProxy,
        onUnknownRoute: onUnknownRoute == null ? null : onUnknownRouteProxy,
        pages: pages == null ? const <Page<dynamic>>[] : List.from(pages),
        reportsRouteUpdateToEngine: reportsRouteUpdateToEngine ?? false,
        requestFocus: requestFocus ?? true,
        restorationScopeId: restorationScopeId,
        routeTraversalEdgeBehavior:
            routeTraversalEdgeBehavior ?? kDefaultRouteTraversalEdgeBehavior,
        transitionDelegate:
            transitionDelegate ?? const DefaultTransitionDelegate<dynamic>(),
      );
    };
Function _Navigator_pushNamed$<T extends Object?>(m.Scope scope$) =>
    Navigator.pushNamed<T>;
Function _Navigator_restorablePushNamed$<T extends Object?>(m.Scope scope$) =>
    Navigator.restorablePushNamed<T>;
Function
    _Navigator_pushReplacementNamed$<T extends Object?, TO extends Object?>(
            m.Scope scope$) =>
        Navigator.pushReplacementNamed<T, TO>;
Function _Navigator_restorablePushReplacementNamed$<T extends Object?,
        TO extends Object?>(m.Scope scope$) =>
    Navigator.restorablePushReplacementNamed<T, TO>;
Function _Navigator_popAndPushNamed$<T extends Object?, TO extends Object?>(
        m.Scope scope$) =>
    Navigator.popAndPushNamed<T, TO>;
Function _Navigator_restorablePopAndPushNamed$<T extends Object?,
        TO extends Object?>(m.Scope scope$) =>
    Navigator.restorablePopAndPushNamed<T, TO>;
Function _Navigator_pushNamedAndRemoveUntil$(m.Scope scope$) =>
    <T extends Object?>(
      BuildContext context,
      String newRouteName,
      m.FunctionPointer predicate, {
      Object? arguments,
    }) {
      bool predicateProxy(Route<dynamic> predicate_route$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            predicate,
            [predicate_route$],
            {},
          );
      return Navigator.pushNamedAndRemoveUntil(
        context,
        newRouteName,
        predicateProxy,
        arguments: arguments,
      );
    };
Function _Navigator_restorablePushNamedAndRemoveUntil$(m.Scope scope$) =>
    <T extends Object?>(
      BuildContext context,
      String newRouteName,
      m.FunctionPointer predicate, {
      Object? arguments,
    }) {
      bool predicateProxy(Route<dynamic> predicate_route$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            predicate,
            [predicate_route$],
            {},
          );
      return Navigator.restorablePushNamedAndRemoveUntil(
        context,
        newRouteName,
        predicateProxy,
        arguments: arguments,
      );
    };
Function _Navigator_push$<T extends Object?>(m.Scope scope$) =>
    Navigator.push<T>;
Function _Navigator_restorablePush$(m.Scope scope$) => <T extends Object?>(
      BuildContext context,
      m.FunctionPointer routeBuilder, {
      Object? arguments,
    }) {
      Route routeBuilderProxy(
        BuildContext routeBuilder_context$,
        Object? routeBuilder_arguments$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            routeBuilder,
            [
              routeBuilder_context$,
              routeBuilder_arguments$,
            ],
            {},
          );
      return Navigator.restorablePush(
        context,
        routeBuilderProxy,
        arguments: arguments,
      );
    };
Function _Navigator_pushReplacement$<T extends Object?, TO extends Object?>(
        m.Scope scope$) =>
    Navigator.pushReplacement<T, TO>;
Function _Navigator_restorablePushReplacement$(m.Scope scope$) =>
    <T extends Object?, TO extends Object?>(
      BuildContext context,
      m.FunctionPointer routeBuilder, {
      dynamic? result,
      Object? arguments,
    }) {
      Route routeBuilderProxy(
        BuildContext routeBuilder_context$,
        Object? routeBuilder_arguments$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            routeBuilder,
            [
              routeBuilder_context$,
              routeBuilder_arguments$,
            ],
            {},
          );
      return Navigator.restorablePushReplacement(
        context,
        routeBuilderProxy,
        arguments: arguments,
        result: result,
      );
    };
Function _Navigator_pushAndRemoveUntil$(m.Scope scope$) => <T extends Object?>(
      BuildContext context,
      Route<T> newRoute,
      m.FunctionPointer predicate,
    ) {
      bool predicateProxy(Route<dynamic> predicate_route$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            predicate,
            [predicate_route$],
            {},
          );
      return Navigator.pushAndRemoveUntil(
        context,
        newRoute,
        predicateProxy,
      );
    };
Function _Navigator_restorablePushAndRemoveUntil$(m.Scope scope$) =>
    <T extends Object?>(
      BuildContext context,
      m.FunctionPointer newRouteBuilder,
      m.FunctionPointer predicate, {
      Object? arguments,
    }) {
      Route newRouteBuilderProxy(
        BuildContext newRouteBuilder_context$,
        Object? newRouteBuilder_arguments$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            newRouteBuilder,
            [
              newRouteBuilder_context$,
              newRouteBuilder_arguments$,
            ],
            {},
          );
      bool predicateProxy(Route<dynamic> predicate_route$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            predicate,
            [predicate_route$],
            {},
          );
      return Navigator.restorablePushAndRemoveUntil(
        context,
        newRouteBuilderProxy,
        predicateProxy,
        arguments: arguments,
      );
    };
Function _Navigator_replace$<T extends Object?>(m.Scope scope$) =>
    Navigator.replace<T>;
Function _Navigator_restorableReplace$(m.Scope scope$) => <T extends Object?>(
      BuildContext context, {
      required Route<dynamic> oldRoute,
      required m.FunctionPointer newRouteBuilder,
      Object? arguments,
    }) {
      Route newRouteBuilderProxy(
        BuildContext newRouteBuilder_context$,
        Object? newRouteBuilder_arguments$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            newRouteBuilder,
            [
              newRouteBuilder_context$,
              newRouteBuilder_arguments$,
            ],
            {},
          );
      return Navigator.restorableReplace(
        context,
        arguments: arguments,
        newRouteBuilder: newRouteBuilderProxy,
        oldRoute: oldRoute,
      );
    };
Function _Navigator_replaceRouteBelow$<T extends Object?>(m.Scope scope$) =>
    Navigator.replaceRouteBelow<T>;
Function _Navigator_restorableReplaceRouteBelow$(m.Scope scope$) =>
    <T extends Object?>(
      BuildContext context, {
      required Route<dynamic> anchorRoute,
      required m.FunctionPointer newRouteBuilder,
      Object? arguments,
    }) {
      Route newRouteBuilderProxy(
        BuildContext newRouteBuilder_context$,
        Object? newRouteBuilder_arguments$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            newRouteBuilder,
            [
              newRouteBuilder_context$,
              newRouteBuilder_arguments$,
            ],
            {},
          );
      return Navigator.restorableReplaceRouteBelow(
        context,
        anchorRoute: anchorRoute,
        arguments: arguments,
        newRouteBuilder: newRouteBuilderProxy,
      );
    };
Function _Navigator_canPop$(m.Scope scope$) => Navigator.canPop;
Function _Navigator_maybePop$<T extends Object?>(m.Scope scope$) =>
    Navigator.maybePop<T>;
Function _Navigator_pop$<T extends Object?>(m.Scope scope$) => Navigator.pop<T>;
Function _Navigator_popUntil$(m.Scope scope$) => (
      BuildContext context,
      m.FunctionPointer predicate,
    ) {
      bool predicateProxy(Route<dynamic> predicate_route$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            predicate,
            [predicate_route$],
            {},
          );
      Navigator.popUntil(
        context,
        predicateProxy,
      );
    };
Function _Navigator_removeRoute$(m.Scope scope$) => Navigator.removeRoute;
Function _Navigator_removeRouteBelow$(m.Scope scope$) =>
    Navigator.removeRouteBelow;
Function _Navigator_of$(m.Scope scope$) => Navigator.of;
Function _Navigator_maybeOf$(m.Scope scope$) => Navigator.maybeOf;
Function _Navigator_defaultGenerateInitialRoutes$(m.Scope scope$) =>
    Navigator.defaultGenerateInitialRoutes;
Function _Navigator_createState$(
  m.Scope scope$,
  Navigator target$,
) =>
    target$.createState;
Function NavigatorState_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as NavigatorState;
Function NavigatorState_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is NavigatorState;
Function _NavigatorState_focusNode$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    () {
      return target$.focusNode;
    };
Function _NavigatorState_userGestureInProgressNotifier$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    () {
      return target$.userGestureInProgressNotifier;
    };
Function _NavigatorState_restorationId$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    () {
      return target$.restorationId;
    };
Function _NavigatorState_overlay$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    () {
      return target$.overlay;
    };
Function _NavigatorState_userGestureInProgress$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    () {
      return target$.userGestureInProgress;
    };
Function _NavigatorState__$(m.Scope scope$) => () {
      return NavigatorState();
    };
Function _NavigatorState_initState$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.initState;
Function _NavigatorState_restoreState$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.restoreState;
Function _NavigatorState_didToggleBucket$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.didToggleBucket;
Function _NavigatorState_didChangeDependencies$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.didChangeDependencies;
Function _NavigatorState_didUpdateWidget$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.didUpdateWidget;
Function _NavigatorState_deactivate$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.deactivate;
Function _NavigatorState_activate$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.activate;
Function _NavigatorState_dispose$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.dispose;
Function _NavigatorState_pushNamed$<T extends Object?>(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.pushNamed<T>;
Function _NavigatorState_restorablePushNamed$<T extends Object?>(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.restorablePushNamed<T>;
Function _NavigatorState_pushReplacementNamed$<T extends Object?,
        TO extends Object?>(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.pushReplacementNamed<T, TO>;
Function _NavigatorState_restorablePushReplacementNamed$<T extends Object?,
        TO extends Object?>(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.restorablePushReplacementNamed<T, TO>;
Function
    _NavigatorState_popAndPushNamed$<T extends Object?, TO extends Object?>(
  m.Scope scope$,
  NavigatorState target$,
) =>
        target$.popAndPushNamed<T, TO>;
Function _NavigatorState_restorablePopAndPushNamed$<T extends Object?,
        TO extends Object?>(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.restorablePopAndPushNamed<T, TO>;
Function _NavigatorState_pushNamedAndRemoveUntil$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    <T extends Object?>(
      String newRouteName,
      m.FunctionPointer predicate, {
      Object? arguments,
    }) {
      bool predicateProxy(Route<dynamic> predicate_route$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            predicate,
            [predicate_route$],
            {},
          );
      return target$.pushNamedAndRemoveUntil(
        newRouteName,
        predicateProxy,
        arguments: arguments,
      );
    };
Function _NavigatorState_restorablePushNamedAndRemoveUntil$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    <T extends Object?>(
      String newRouteName,
      m.FunctionPointer predicate, {
      Object? arguments,
    }) {
      bool predicateProxy(Route<dynamic> predicate_route$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            predicate,
            [predicate_route$],
            {},
          );
      return target$.restorablePushNamedAndRemoveUntil(
        newRouteName,
        predicateProxy,
        arguments: arguments,
      );
    };
Function _NavigatorState_push$<T extends Object?>(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.push<T>;
Function _NavigatorState_restorablePush$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    <T extends Object?>(
      m.FunctionPointer routeBuilder, {
      Object? arguments,
    }) {
      Route routeBuilderProxy(
        BuildContext routeBuilder_context$,
        Object? routeBuilder_arguments$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            routeBuilder,
            [
              routeBuilder_context$,
              routeBuilder_arguments$,
            ],
            {},
          );
      return target$.restorablePush(
        routeBuilderProxy,
        arguments: arguments,
      );
    };
Function
    _NavigatorState_pushReplacement$<T extends Object?, TO extends Object?>(
  m.Scope scope$,
  NavigatorState target$,
) =>
        target$.pushReplacement<T, TO>;
Function _NavigatorState_restorablePushReplacement$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    <T extends Object?, TO extends Object?>(
      m.FunctionPointer routeBuilder, {
      dynamic? result,
      Object? arguments,
    }) {
      Route routeBuilderProxy(
        BuildContext routeBuilder_context$,
        Object? routeBuilder_arguments$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            routeBuilder,
            [
              routeBuilder_context$,
              routeBuilder_arguments$,
            ],
            {},
          );
      return target$.restorablePushReplacement(
        routeBuilderProxy,
        arguments: arguments,
        result: result,
      );
    };
Function _NavigatorState_pushAndRemoveUntil$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    <T extends Object?>(
      Route<T> newRoute,
      m.FunctionPointer predicate,
    ) {
      bool predicateProxy(Route<dynamic> predicate_route$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            predicate,
            [predicate_route$],
            {},
          );
      return target$.pushAndRemoveUntil(
        newRoute,
        predicateProxy,
      );
    };
Function _NavigatorState_restorablePushAndRemoveUntil$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    <T extends Object?>(
      m.FunctionPointer newRouteBuilder,
      m.FunctionPointer predicate, {
      Object? arguments,
    }) {
      Route newRouteBuilderProxy(
        BuildContext newRouteBuilder_context$,
        Object? newRouteBuilder_arguments$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            newRouteBuilder,
            [
              newRouteBuilder_context$,
              newRouteBuilder_arguments$,
            ],
            {},
          );
      bool predicateProxy(Route<dynamic> predicate_route$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            predicate,
            [predicate_route$],
            {},
          );
      return target$.restorablePushAndRemoveUntil(
        newRouteBuilderProxy,
        predicateProxy,
        arguments: arguments,
      );
    };
Function _NavigatorState_replace$<T extends Object?>(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.replace<T>;
Function _NavigatorState_restorableReplace$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    <T extends Object?>({
      required Route<dynamic> oldRoute,
      required m.FunctionPointer newRouteBuilder,
      Object? arguments,
    }) {
      Route newRouteBuilderProxy(
        BuildContext newRouteBuilder_context$,
        Object? newRouteBuilder_arguments$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            newRouteBuilder,
            [
              newRouteBuilder_context$,
              newRouteBuilder_arguments$,
            ],
            {},
          );
      return target$.restorableReplace(
        arguments: arguments,
        newRouteBuilder: newRouteBuilderProxy,
        oldRoute: oldRoute,
      );
    };
Function _NavigatorState_replaceRouteBelow$<T extends Object?>(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.replaceRouteBelow<T>;
Function _NavigatorState_restorableReplaceRouteBelow$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    <T extends Object?>({
      required Route<dynamic> anchorRoute,
      required m.FunctionPointer newRouteBuilder,
      Object? arguments,
    }) {
      Route newRouteBuilderProxy(
        BuildContext newRouteBuilder_context$,
        Object? newRouteBuilder_arguments$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            newRouteBuilder,
            [
              newRouteBuilder_context$,
              newRouteBuilder_arguments$,
            ],
            {},
          );
      return target$.restorableReplaceRouteBelow(
        anchorRoute: anchorRoute,
        arguments: arguments,
        newRouteBuilder: newRouteBuilderProxy,
      );
    };
Function _NavigatorState_canPop$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.canPop;
Function _NavigatorState_maybePop$<T extends Object?>(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.maybePop<T>;
Function _NavigatorState_pop$<T extends Object?>(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.pop<T>;
Function _NavigatorState_popUntil$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    (m.FunctionPointer predicate) {
      bool predicateProxy(Route<dynamic> predicate_route$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            predicate,
            [predicate_route$],
            {},
          );
      target$.popUntil(predicateProxy);
    };
Function _NavigatorState_removeRoute$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.removeRoute;
Function _NavigatorState_removeRouteBelow$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.removeRouteBelow;
Function _NavigatorState_finalizeRoute$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.finalizeRoute;
Function _NavigatorState_didStartUserGesture$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.didStartUserGesture;
Function _NavigatorState_didStopUserGesture$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.didStopUserGesture;
Function _NavigatorState_build$(
  m.Scope scope$,
  NavigatorState target$,
) =>
    target$.build;
Function RestorableRouteFuture_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RestorableRouteFuture<T>;
Function RestorableRouteFuture_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RestorableRouteFuture<T>;
Function _RestorableRouteFuture_navigatorFinder$<T>(
  m.Scope scope$,
  RestorableRouteFuture<T> target$,
) =>
    () {
      return target$.navigatorFinder;
    };
Function _RestorableRouteFuture_onPresent$<T>(
  m.Scope scope$,
  RestorableRouteFuture<T> target$,
) =>
    () {
      return target$.onPresent;
    };
Function _RestorableRouteFuture_onComplete$<T>(
  m.Scope scope$,
  RestorableRouteFuture<T> target$,
) =>
    () {
      return target$.onComplete;
    };
Function _RestorableRouteFuture_isPresent$<T>(
  m.Scope scope$,
  RestorableRouteFuture<T> target$,
) =>
    () {
      return target$.isPresent;
    };
Function _RestorableRouteFuture_route$<T>(
  m.Scope scope$,
  RestorableRouteFuture<T> target$,
) =>
    () {
      return target$.route;
    };
Function _RestorableRouteFuture_enabled$<T>(
  m.Scope scope$,
  RestorableRouteFuture<T> target$,
) =>
    () {
      return target$.enabled;
    };
Function _RestorableRouteFuture__$(m.Scope scope$) => ({
      m.FunctionPointer? navigatorFinder,
      required m.FunctionPointer onPresent,
      m.FunctionPointer? onComplete,
    }) {
      NavigatorState navigatorFinderProxy(
              BuildContext navigatorFinder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            navigatorFinder!,
            [navigatorFinder_context$],
            {},
          );
      void onCompleteProxy(dynamic onComplete_result$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onComplete!,
            [onComplete_result$],
            {},
          );
      String onPresentProxy(
        NavigatorState onPresent_navigator$,
        Object? onPresent_arguments$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onPresent,
            [
              onPresent_navigator$,
              onPresent_arguments$,
            ],
            {},
          );
      return RestorableRouteFuture(
        navigatorFinder: navigatorFinder == null
            ? (BuildContext context) => Navigator.of(context)
            : navigatorFinderProxy,
        onComplete: onComplete == null ? null : onCompleteProxy,
        onPresent: onPresentProxy,
      );
    };
Function _RestorableRouteFuture_present$<T>(
  m.Scope scope$,
  RestorableRouteFuture<T> target$,
) =>
    target$.present;
Function _RestorableRouteFuture_createDefaultValue$<T>(
  m.Scope scope$,
  RestorableRouteFuture<T> target$,
) =>
    target$.createDefaultValue;
Function _RestorableRouteFuture_initWithValue$<T>(
  m.Scope scope$,
  RestorableRouteFuture<T> target$,
) =>
    target$.initWithValue;
Function _RestorableRouteFuture_toPrimitives$<T>(
  m.Scope scope$,
  RestorableRouteFuture<T> target$,
) =>
    target$.toPrimitives;
Function _RestorableRouteFuture_fromPrimitives$<T>(
  m.Scope scope$,
  RestorableRouteFuture<T> target$,
) =>
    target$.fromPrimitives;
Function _RestorableRouteFuture_dispose$<T>(
  m.Scope scope$,
  RestorableRouteFuture<T> target$,
) =>
    target$.dispose;
Function _RoutePopDisposition_pop$(m.Scope scope$) =>
    () => RoutePopDisposition.pop;
Function _RoutePopDisposition_doNotPop$(m.Scope scope$) =>
    () => RoutePopDisposition.doNotPop;
Function _RoutePopDisposition_bubble$(m.Scope scope$) =>
    () => RoutePopDisposition.bubble;
Function _RoutePopDisposition_values$(m.Scope scope$) =>
    () => RoutePopDisposition.values;
