// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/gestures/binding.dart';
import 'dart:async';
import 'dart:collection';
import 'dart:ui' show PointerDataPacket;
import 'package:flutter/foundation.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/src/gestures/arena.dart';
import 'package:flutter/src/gestures/converter.dart';
import 'package:flutter/src/gestures/debug.dart';
import 'package:flutter/src/gestures/events.dart';
import 'package:flutter/src/gestures/hit_test.dart';
import 'package:flutter/src/gestures/pointer_router.dart';
import 'package:flutter/src/gestures/pointer_signal_resolver.dart';
import 'package:flutter/src/gestures/resampler.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/gestures/binding.dart',
  {},
  {},
  {
    'SamplingClock': m.ClassMirror(
      'SamplingClock',
      {
        '#as': SamplingClock_as$,
        '#is': SamplingClock_is$,
        'now': _SamplingClock_now$,
        'stopwatch': _SamplingClock_stopwatch$,
      },
      {},
    ),
    'FlutterErrorDetailsForPointerEventDispatcher': m.ClassMirror(
      'FlutterErrorDetailsForPointerEventDispatcher',
      {
        '#as': FlutterErrorDetailsForPointerEventDispatcher_as$,
        '#is': FlutterErrorDetailsForPointerEventDispatcher_is$,
        'event': _FlutterErrorDetailsForPointerEventDispatcher_event$,
        'hitTestEntry':
            _FlutterErrorDetailsForPointerEventDispatcher_hitTestEntry$,
      },
      {},
    ),
  },
);
Function SamplingClock_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SamplingClock;
Function SamplingClock_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SamplingClock;
Function _SamplingClock_now$(
  m.Scope scope,
  SamplingClock target,
) =>
    target.now;
Function _SamplingClock_stopwatch$(
  m.Scope scope,
  SamplingClock target,
) =>
    target.stopwatch;
Function FlutterErrorDetailsForPointerEventDispatcher_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as FlutterErrorDetailsForPointerEventDispatcher;
Function FlutterErrorDetailsForPointerEventDispatcher_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is FlutterErrorDetailsForPointerEventDispatcher;
PointerEvent? _FlutterErrorDetailsForPointerEventDispatcher_event$(
    FlutterErrorDetailsForPointerEventDispatcher target) {
  return target.event;
}

HitTestEntry<HitTestTarget>?
    _FlutterErrorDetailsForPointerEventDispatcher_hitTestEntry$(
        FlutterErrorDetailsForPointerEventDispatcher target) {
  return target.hitTestEntry;
}
