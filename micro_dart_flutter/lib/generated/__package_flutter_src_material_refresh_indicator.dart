// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/refresh_indicator.dart';
import 'dart:async';
import 'dart:math';
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart' show clampDouble;
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/progress_indicator.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/refresh_indicator.dart',
  {
    'RefreshIndicator.': _RefreshIndicator__$,
    'RefreshIndicator.adaptive': _RefreshIndicator_adaptive_$,
    'RefreshIndicatorState.': _RefreshIndicatorState__$,
    'RefreshIndicatorTriggerMode.anywhere':
        _RefreshIndicatorTriggerMode_anywhere$,
    'RefreshIndicatorTriggerMode.onEdge': _RefreshIndicatorTriggerMode_onEdge$,
    'RefreshIndicatorTriggerMode.values': _RefreshIndicatorTriggerMode_values$,
  },
  {},
  {
    'RefreshIndicator': m.ClassMirror(
      'RefreshIndicator',
      {
        '#as': RefreshIndicator_as$,
        '#is': RefreshIndicator_is$,
        'child': _RefreshIndicator_child$,
        'displacement': _RefreshIndicator_displacement$,
        'edgeOffset': _RefreshIndicator_edgeOffset$,
        'onRefresh': _RefreshIndicator_onRefresh$,
        'color': _RefreshIndicator_color$,
        'backgroundColor': _RefreshIndicator_backgroundColor$,
        'notificationPredicate': _RefreshIndicator_notificationPredicate$,
        'semanticsLabel': _RefreshIndicator_semanticsLabel$,
        'semanticsValue': _RefreshIndicator_semanticsValue$,
        'strokeWidth': _RefreshIndicator_strokeWidth$,
        'triggerMode': _RefreshIndicator_triggerMode$,
        'createState': _RefreshIndicator_createState$,
      },
      {},
    ),
    'RefreshIndicatorState': m.ClassMirror(
      'RefreshIndicatorState',
      {
        '#as': RefreshIndicatorState_as$,
        '#is': RefreshIndicatorState_is$,
        'initState': _RefreshIndicatorState_initState$,
        'didChangeDependencies': _RefreshIndicatorState_didChangeDependencies$,
        'didUpdateWidget': _RefreshIndicatorState_didUpdateWidget$,
        'dispose': _RefreshIndicatorState_dispose$,
        'show': _RefreshIndicatorState_show$,
        'build': _RefreshIndicatorState_build$,
      },
      {},
    ),
    'RefreshIndicatorTriggerMode': m.ClassMirror(
      'RefreshIndicatorTriggerMode',
      {},
      {},
    ),
  },
);
Function RefreshIndicator_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RefreshIndicator;
Function RefreshIndicator_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RefreshIndicator;
Function _RefreshIndicator_child$(
  m.Scope scope$,
  RefreshIndicator target$,
) =>
    () {
      return target$.child;
    };
Function _RefreshIndicator_displacement$(
  m.Scope scope$,
  RefreshIndicator target$,
) =>
    () {
      return target$.displacement;
    };
Function _RefreshIndicator_edgeOffset$(
  m.Scope scope$,
  RefreshIndicator target$,
) =>
    () {
      return target$.edgeOffset;
    };
Function _RefreshIndicator_onRefresh$(
  m.Scope scope$,
  RefreshIndicator target$,
) =>
    () {
      return target$.onRefresh;
    };
Function _RefreshIndicator_color$(
  m.Scope scope$,
  RefreshIndicator target$,
) =>
    () {
      return target$.color;
    };
Function _RefreshIndicator_backgroundColor$(
  m.Scope scope$,
  RefreshIndicator target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _RefreshIndicator_notificationPredicate$(
  m.Scope scope$,
  RefreshIndicator target$,
) =>
    () {
      return target$.notificationPredicate;
    };
Function _RefreshIndicator_semanticsLabel$(
  m.Scope scope$,
  RefreshIndicator target$,
) =>
    () {
      return target$.semanticsLabel;
    };
Function _RefreshIndicator_semanticsValue$(
  m.Scope scope$,
  RefreshIndicator target$,
) =>
    () {
      return target$.semanticsValue;
    };
Function _RefreshIndicator_strokeWidth$(
  m.Scope scope$,
  RefreshIndicator target$,
) =>
    () {
      return target$.strokeWidth;
    };
Function _RefreshIndicator_triggerMode$(
  m.Scope scope$,
  RefreshIndicator target$,
) =>
    () {
      return target$.triggerMode;
    };
Function _RefreshIndicator__$(m.Scope scope$) => ({
      Key? key,
      required Widget child,
      double? displacement,
      double? edgeOffset,
      required m.FunctionPointer onRefresh,
      Color? color,
      Color? backgroundColor,
      m.FunctionPointer? notificationPredicate,
      String? semanticsLabel,
      String? semanticsValue,
      double? strokeWidth,
      RefreshIndicatorTriggerMode? triggerMode,
    }) {
      bool notificationPredicateProxy(
              ScrollNotification notificationPredicate_notification$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            notificationPredicate!,
            [notificationPredicate_notification$],
            {},
          );
      Future<void> onRefreshProxy() async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            onRefresh,
            [],
            {},
          );
      return RefreshIndicator(
        backgroundColor: backgroundColor,
        child: child,
        color: color,
        displacement: displacement ?? 40.0,
        edgeOffset: edgeOffset ?? 0.0,
        key: key,
        notificationPredicate: notificationPredicate == null
            ? defaultScrollNotificationPredicate
            : notificationPredicateProxy,
        onRefresh: onRefreshProxy,
        semanticsLabel: semanticsLabel,
        semanticsValue: semanticsValue,
        strokeWidth: strokeWidth ?? RefreshProgressIndicator.defaultStrokeWidth,
        triggerMode: triggerMode ?? RefreshIndicatorTriggerMode.onEdge,
      );
    };
Function _RefreshIndicator_adaptive_$(m.Scope scope$) => ({
      Key? key,
      required Widget child,
      double? displacement,
      double? edgeOffset,
      required m.FunctionPointer onRefresh,
      Color? color,
      Color? backgroundColor,
      m.FunctionPointer? notificationPredicate,
      String? semanticsLabel,
      String? semanticsValue,
      double? strokeWidth,
      RefreshIndicatorTriggerMode? triggerMode,
    }) {
      bool notificationPredicateProxy(
              ScrollNotification notificationPredicate_notification$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            notificationPredicate!,
            [notificationPredicate_notification$],
            {},
          );
      Future<void> onRefreshProxy() async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            onRefresh,
            [],
            {},
          );
      return RefreshIndicator.adaptive(
        backgroundColor: backgroundColor,
        child: child,
        color: color,
        displacement: displacement ?? 40.0,
        edgeOffset: edgeOffset ?? 0.0,
        key: key,
        notificationPredicate: notificationPredicate == null
            ? defaultScrollNotificationPredicate
            : notificationPredicateProxy,
        onRefresh: onRefreshProxy,
        semanticsLabel: semanticsLabel,
        semanticsValue: semanticsValue,
        strokeWidth: strokeWidth ?? RefreshProgressIndicator.defaultStrokeWidth,
        triggerMode: triggerMode ?? RefreshIndicatorTriggerMode.onEdge,
      );
    };
Function _RefreshIndicator_createState$(
  m.Scope scope$,
  RefreshIndicator target$,
) =>
    target$.createState;
Function RefreshIndicatorState_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RefreshIndicatorState;
Function RefreshIndicatorState_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RefreshIndicatorState;
Function _RefreshIndicatorState__$(m.Scope scope$) => () {
      return RefreshIndicatorState();
    };
Function _RefreshIndicatorState_initState$(
  m.Scope scope$,
  RefreshIndicatorState target$,
) =>
    target$.initState;
Function _RefreshIndicatorState_didChangeDependencies$(
  m.Scope scope$,
  RefreshIndicatorState target$,
) =>
    target$.didChangeDependencies;
Function _RefreshIndicatorState_didUpdateWidget$(
  m.Scope scope$,
  RefreshIndicatorState target$,
) =>
    target$.didUpdateWidget;
Function _RefreshIndicatorState_dispose$(
  m.Scope scope$,
  RefreshIndicatorState target$,
) =>
    target$.dispose;
Function _RefreshIndicatorState_show$(
  m.Scope scope$,
  RefreshIndicatorState target$,
) =>
    target$.show;
Function _RefreshIndicatorState_build$(
  m.Scope scope$,
  RefreshIndicatorState target$,
) =>
    target$.build;
Function _RefreshIndicatorTriggerMode_anywhere$(m.Scope scope$) =>
    () => RefreshIndicatorTriggerMode.anywhere;
Function _RefreshIndicatorTriggerMode_onEdge$(m.Scope scope$) =>
    () => RefreshIndicatorTriggerMode.onEdge;
Function _RefreshIndicatorTriggerMode_values$(m.Scope scope$) =>
    () => RefreshIndicatorTriggerMode.values;
