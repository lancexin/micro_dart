// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/refresh_indicator.dart';
import 'dart:async';
import 'dart:math';
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart' show clampDouble;
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/progress_indicator.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/refresh_indicator.dart',
  {
    'RefreshIndicatorTriggerMode.anywhere':
        _RefreshIndicatorTriggerMode_anywhere$,
    'RefreshIndicatorTriggerMode.onEdge': _RefreshIndicatorTriggerMode_onEdge$,
    'RefreshIndicatorTriggerMode.values': _RefreshIndicatorTriggerMode_values$,
  },
  {},
  {
    'RefreshIndicator': m.ClassMirror(
      'RefreshIndicator',
      {
        'child': _RefreshIndicator_child$,
        'displacement': _RefreshIndicator_displacement$,
        'edgeOffset': _RefreshIndicator_edgeOffset$,
        'onRefresh': _RefreshIndicator_onRefresh$,
        'color': _RefreshIndicator_color$,
        'backgroundColor': _RefreshIndicator_backgroundColor$,
        'notificationPredicate': _RefreshIndicator_notificationPredicate$,
        'semanticsLabel': _RefreshIndicator_semanticsLabel$,
        'semanticsValue': _RefreshIndicator_semanticsValue$,
        'strokeWidth': _RefreshIndicator_strokeWidth$,
        'triggerMode': _RefreshIndicator_triggerMode$,
        'createState': _RefreshIndicator_createState$,
      },
      {},
    ),
    'RefreshIndicatorState': m.ClassMirror(
      'RefreshIndicatorState',
      {
        'initState': _RefreshIndicatorState_initState$,
        'didChangeDependencies': _RefreshIndicatorState_didChangeDependencies$,
        'didUpdateWidget': _RefreshIndicatorState_didUpdateWidget$,
        'dispose': _RefreshIndicatorState_dispose$,
        'show': _RefreshIndicatorState_show$,
        'build': _RefreshIndicatorState_build$,
      },
      {},
    ),
    'RefreshIndicatorTriggerMode': m.ClassMirror(
      'RefreshIndicatorTriggerMode',
      {},
      {},
    ),
  },
);
Widget _RefreshIndicator_child$(RefreshIndicator target) {
  return target.child;
}

double _RefreshIndicator_displacement$(RefreshIndicator target) {
  return target.displacement;
}

double _RefreshIndicator_edgeOffset$(RefreshIndicator target) {
  return target.edgeOffset;
}

Future<void> Function() _RefreshIndicator_onRefresh$(RefreshIndicator target) {
  return target.onRefresh;
}

Color? _RefreshIndicator_color$(RefreshIndicator target) {
  return target.color;
}

Color? _RefreshIndicator_backgroundColor$(RefreshIndicator target) {
  return target.backgroundColor;
}

bool Function(ScrollNotification) _RefreshIndicator_notificationPredicate$(
    RefreshIndicator target) {
  return target.notificationPredicate;
}

String? _RefreshIndicator_semanticsLabel$(RefreshIndicator target) {
  return target.semanticsLabel;
}

String? _RefreshIndicator_semanticsValue$(RefreshIndicator target) {
  return target.semanticsValue;
}

double _RefreshIndicator_strokeWidth$(RefreshIndicator target) {
  return target.strokeWidth;
}

RefreshIndicatorTriggerMode _RefreshIndicator_triggerMode$(
    RefreshIndicator target) {
  return target.triggerMode;
}

Function _RefreshIndicator_createState$(
  m.Scope scope,
  RefreshIndicator target,
) =>
    target.createState;
Function _RefreshIndicatorState_initState$(
  m.Scope scope,
  RefreshIndicatorState target,
) =>
    target.initState;
Function _RefreshIndicatorState_didChangeDependencies$(
  m.Scope scope,
  RefreshIndicatorState target,
) =>
    target.didChangeDependencies;
Function _RefreshIndicatorState_didUpdateWidget$(
  m.Scope scope,
  RefreshIndicatorState target,
) =>
    target.didUpdateWidget;
Function _RefreshIndicatorState_dispose$(
  m.Scope scope,
  RefreshIndicatorState target,
) =>
    target.dispose;
Function _RefreshIndicatorState_show$(
  m.Scope scope,
  RefreshIndicatorState target,
) =>
    target.show;
Function _RefreshIndicatorState_build$(
  m.Scope scope,
  RefreshIndicatorState target,
) =>
    target.build;
RefreshIndicatorTriggerMode _RefreshIndicatorTriggerMode_anywhere$() {
  return RefreshIndicatorTriggerMode.anywhere;
}

RefreshIndicatorTriggerMode _RefreshIndicatorTriggerMode_onEdge$() {
  return RefreshIndicatorTriggerMode.onEdge;
}

List<RefreshIndicatorTriggerMode> _RefreshIndicatorTriggerMode_values$() {
  return RefreshIndicatorTriggerMode.values;
}
