// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/ink_highlight.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/ink_well.dart' show InteractiveInkFeature;
import 'package:flutter/src/material/material.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/ink_highlight.dart',
  {'InkHighlight.': _InkHighlight__$},
  {},
  {
    'InkHighlight': m.ClassMirror(
      'InkHighlight',
      {
        '#as': InkHighlight_as$,
        '#is': InkHighlight_is$,
        'active': _InkHighlight_active$,
        'activate': _InkHighlight_activate$,
        'deactivate': _InkHighlight_deactivate$,
        'dispose': _InkHighlight_dispose$,
        'paintFeature': _InkHighlight_paintFeature$,
      },
      {},
    )
  },
);
Function InkHighlight_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as InkHighlight;
Function InkHighlight_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is InkHighlight;
Function _InkHighlight_active$(
  m.Scope scope$,
  InkHighlight target$,
) =>
    () {
      return target$.active;
    };
Function _InkHighlight__$(m.Scope scope$) => ({
      required MaterialInkController controller,
      required RenderBox referenceBox,
      required Color color,
      required TextDirection textDirection,
      BoxShape? shape,
      double? radius,
      BorderRadius? borderRadius,
      ShapeBorder? customBorder,
      m.FunctionPointer? rectCallback,
      m.FunctionPointer? onRemoved,
      Duration? fadeDuration,
    }) {
      void onRemovedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onRemoved!,
            [],
            {},
          );
      Rect rectCallbackProxy() => scope$.engine.callFunctionPointer(
            scope$,
            rectCallback!,
            [],
            {},
          );
      return InkHighlight(
        borderRadius: borderRadius,
        color: color,
        controller: controller,
        customBorder: customBorder,
        fadeDuration: fadeDuration ?? const Duration(milliseconds: 200),
        onRemoved: onRemoved == null ? null : onRemovedProxy,
        radius: radius,
        rectCallback: rectCallback == null ? null : rectCallbackProxy,
        referenceBox: referenceBox,
        shape: shape ?? BoxShape.rectangle,
        textDirection: textDirection,
      );
    };
Function _InkHighlight_activate$(
  m.Scope scope$,
  InkHighlight target$,
) =>
    target$.activate;
Function _InkHighlight_deactivate$(
  m.Scope scope$,
  InkHighlight target$,
) =>
    target$.deactivate;
Function _InkHighlight_dispose$(
  m.Scope scope$,
  InkHighlight target$,
) =>
    target$.dispose;
Function _InkHighlight_paintFeature$(
  m.Scope scope$,
  InkHighlight target$,
) =>
    target$.paintFeature;
