// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/scroll_delegate.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/automatic_keep_alive.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/selection_container.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/scroll_delegate.dart',
  {
    'SliverChildBuilderDelegate.': _SliverChildBuilderDelegate__$,
    'SliverChildListDelegate.': _SliverChildListDelegate__$,
    'SliverChildListDelegate.fixed': _SliverChildListDelegate_fixed_$,
  },
  {},
  {
    'SliverChildDelegate': m.ClassMirror(
      'SliverChildDelegate',
      {
        '#as': SliverChildDelegate_as$,
        '#is': SliverChildDelegate_is$,
        'estimatedChildCount': _SliverChildDelegate_estimatedChildCount$,
        'build': _SliverChildDelegate_build$,
        'estimateMaxScrollOffset':
            _SliverChildDelegate_estimateMaxScrollOffset$,
        'didFinishLayout': _SliverChildDelegate_didFinishLayout$,
        'shouldRebuild': _SliverChildDelegate_shouldRebuild$,
        'findIndexByKey': _SliverChildDelegate_findIndexByKey$,
        'toString': _SliverChildDelegate_toString$,
        'debugFillDescription': _SliverChildDelegate_debugFillDescription$,
      },
      {},
    ),
    'SliverChildBuilderDelegate': m.ClassMirror(
      'SliverChildBuilderDelegate',
      {
        '#as': SliverChildBuilderDelegate_as$,
        '#is': SliverChildBuilderDelegate_is$,
        'builder': _SliverChildBuilderDelegate_builder$,
        'childCount': _SliverChildBuilderDelegate_childCount$,
        'addAutomaticKeepAlives':
            _SliverChildBuilderDelegate_addAutomaticKeepAlives$,
        'addRepaintBoundaries':
            _SliverChildBuilderDelegate_addRepaintBoundaries$,
        'addSemanticIndexes': _SliverChildBuilderDelegate_addSemanticIndexes$,
        'semanticIndexOffset': _SliverChildBuilderDelegate_semanticIndexOffset$,
        'semanticIndexCallback':
            _SliverChildBuilderDelegate_semanticIndexCallback$,
        'findChildIndexCallback':
            _SliverChildBuilderDelegate_findChildIndexCallback$,
        'estimatedChildCount': _SliverChildBuilderDelegate_estimatedChildCount$,
        'findIndexByKey': _SliverChildBuilderDelegate_findIndexByKey$,
        'build': _SliverChildBuilderDelegate_build$,
        'shouldRebuild': _SliverChildBuilderDelegate_shouldRebuild$,
      },
      {},
    ),
    'SliverChildListDelegate': m.ClassMirror(
      'SliverChildListDelegate',
      {
        '#as': SliverChildListDelegate_as$,
        '#is': SliverChildListDelegate_is$,
        'addAutomaticKeepAlives':
            _SliverChildListDelegate_addAutomaticKeepAlives$,
        'addRepaintBoundaries': _SliverChildListDelegate_addRepaintBoundaries$,
        'addSemanticIndexes': _SliverChildListDelegate_addSemanticIndexes$,
        'semanticIndexOffset': _SliverChildListDelegate_semanticIndexOffset$,
        'semanticIndexCallback':
            _SliverChildListDelegate_semanticIndexCallback$,
        'children': _SliverChildListDelegate_children$,
        'estimatedChildCount': _SliverChildListDelegate_estimatedChildCount$,
        'findIndexByKey': _SliverChildListDelegate_findIndexByKey$,
        'build': _SliverChildListDelegate_build$,
        'shouldRebuild': _SliverChildListDelegate_shouldRebuild$,
      },
      {},
    ),
  },
);
Function SliverChildDelegate_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverChildDelegate;
Function SliverChildDelegate_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverChildDelegate;
Function _SliverChildDelegate_estimatedChildCount$(
  m.Scope scope$,
  SliverChildDelegate target$,
) =>
    () {
      return target$.estimatedChildCount;
    };
Function _SliverChildDelegate_build$(
  m.Scope scope$,
  SliverChildDelegate target$,
) =>
    target$.build;
Function _SliverChildDelegate_estimateMaxScrollOffset$(
  m.Scope scope$,
  SliverChildDelegate target$,
) =>
    target$.estimateMaxScrollOffset;
Function _SliverChildDelegate_didFinishLayout$(
  m.Scope scope$,
  SliverChildDelegate target$,
) =>
    target$.didFinishLayout;
Function _SliverChildDelegate_shouldRebuild$(
  m.Scope scope$,
  SliverChildDelegate target$,
) =>
    target$.shouldRebuild;
Function _SliverChildDelegate_findIndexByKey$(
  m.Scope scope$,
  SliverChildDelegate target$,
) =>
    target$.findIndexByKey;
Function _SliverChildDelegate_toString$(
  m.Scope scope$,
  SliverChildDelegate target$,
) =>
    target$.toString;
Function _SliverChildDelegate_debugFillDescription$(
  m.Scope scope$,
  SliverChildDelegate target$,
) =>
    target$.debugFillDescription;
Function SliverChildBuilderDelegate_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverChildBuilderDelegate;
Function SliverChildBuilderDelegate_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverChildBuilderDelegate;
Function _SliverChildBuilderDelegate_builder$(
  m.Scope scope$,
  SliverChildBuilderDelegate target$,
) =>
    () {
      return target$.builder;
    };
Function _SliverChildBuilderDelegate_childCount$(
  m.Scope scope$,
  SliverChildBuilderDelegate target$,
) =>
    () {
      return target$.childCount;
    };
Function _SliverChildBuilderDelegate_addAutomaticKeepAlives$(
  m.Scope scope$,
  SliverChildBuilderDelegate target$,
) =>
    () {
      return target$.addAutomaticKeepAlives;
    };
Function _SliverChildBuilderDelegate_addRepaintBoundaries$(
  m.Scope scope$,
  SliverChildBuilderDelegate target$,
) =>
    () {
      return target$.addRepaintBoundaries;
    };
Function _SliverChildBuilderDelegate_addSemanticIndexes$(
  m.Scope scope$,
  SliverChildBuilderDelegate target$,
) =>
    () {
      return target$.addSemanticIndexes;
    };
Function _SliverChildBuilderDelegate_semanticIndexOffset$(
  m.Scope scope$,
  SliverChildBuilderDelegate target$,
) =>
    () {
      return target$.semanticIndexOffset;
    };
Function _SliverChildBuilderDelegate_semanticIndexCallback$(
  m.Scope scope$,
  SliverChildBuilderDelegate target$,
) =>
    () {
      return target$.semanticIndexCallback;
    };
Function _SliverChildBuilderDelegate_findChildIndexCallback$(
  m.Scope scope$,
  SliverChildBuilderDelegate target$,
) =>
    () {
      return target$.findChildIndexCallback;
    };
Function _SliverChildBuilderDelegate_estimatedChildCount$(
  m.Scope scope$,
  SliverChildBuilderDelegate target$,
) =>
    () {
      return target$.estimatedChildCount;
    };
Function _SliverChildBuilderDelegate__$(m.Scope scope$) => (
      m.FunctionPointer builder, {
      m.FunctionPointer? findChildIndexCallback,
      int? childCount,
      bool? addAutomaticKeepAlives,
      bool? addRepaintBoundaries,
      bool? addSemanticIndexes,
      m.FunctionPointer? semanticIndexCallback,
      int? semanticIndexOffset,
    }) {
      Widget? builderProxy(
        BuildContext builder_context$,
        int builder_index$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [
              builder_context$,
              builder_index$,
            ],
            {},
          );
      int? findChildIndexCallbackProxy(Key findChildIndexCallback_key$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            findChildIndexCallback!,
            [findChildIndexCallback_key$],
            {},
          );
      int? semanticIndexCallbackProxy(
        Widget semanticIndexCallback_widget$,
        int semanticIndexCallback_localIndex$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            semanticIndexCallback!,
            [
              semanticIndexCallback_widget$,
              semanticIndexCallback_localIndex$,
            ],
            {},
          );
      return SliverChildBuilderDelegate(
        builderProxy,
        addAutomaticKeepAlives: addAutomaticKeepAlives ?? true,
        addRepaintBoundaries: addRepaintBoundaries ?? true,
        addSemanticIndexes: addSemanticIndexes ?? true,
        childCount: childCount,
        findChildIndexCallback:
            findChildIndexCallback == null ? null : findChildIndexCallbackProxy,
        semanticIndexCallback: semanticIndexCallback == null
            ? (Widget _, int localIndex) => localIndex
            : semanticIndexCallbackProxy,
        semanticIndexOffset: semanticIndexOffset ?? 0,
      );
    };
Function _SliverChildBuilderDelegate_findIndexByKey$(
  m.Scope scope$,
  SliverChildBuilderDelegate target$,
) =>
    target$.findIndexByKey;
Function _SliverChildBuilderDelegate_build$(
  m.Scope scope$,
  SliverChildBuilderDelegate target$,
) =>
    target$.build;
Function _SliverChildBuilderDelegate_shouldRebuild$(
  m.Scope scope$,
  SliverChildBuilderDelegate target$,
) =>
    target$.shouldRebuild;
Function SliverChildListDelegate_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SliverChildListDelegate;
Function SliverChildListDelegate_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SliverChildListDelegate;
Function _SliverChildListDelegate_addAutomaticKeepAlives$(
  m.Scope scope$,
  SliverChildListDelegate target$,
) =>
    () {
      return target$.addAutomaticKeepAlives;
    };
Function _SliverChildListDelegate_addRepaintBoundaries$(
  m.Scope scope$,
  SliverChildListDelegate target$,
) =>
    () {
      return target$.addRepaintBoundaries;
    };
Function _SliverChildListDelegate_addSemanticIndexes$(
  m.Scope scope$,
  SliverChildListDelegate target$,
) =>
    () {
      return target$.addSemanticIndexes;
    };
Function _SliverChildListDelegate_semanticIndexOffset$(
  m.Scope scope$,
  SliverChildListDelegate target$,
) =>
    () {
      return target$.semanticIndexOffset;
    };
Function _SliverChildListDelegate_semanticIndexCallback$(
  m.Scope scope$,
  SliverChildListDelegate target$,
) =>
    () {
      return target$.semanticIndexCallback;
    };
Function _SliverChildListDelegate_children$(
  m.Scope scope$,
  SliverChildListDelegate target$,
) =>
    () {
      return target$.children;
    };
Function _SliverChildListDelegate_estimatedChildCount$(
  m.Scope scope$,
  SliverChildListDelegate target$,
) =>
    () {
      return target$.estimatedChildCount;
    };
Function _SliverChildListDelegate__$(m.Scope scope$) => (
      List children, {
      bool? addAutomaticKeepAlives,
      bool? addRepaintBoundaries,
      bool? addSemanticIndexes,
      m.FunctionPointer? semanticIndexCallback,
      int? semanticIndexOffset,
    }) {
      int? semanticIndexCallbackProxy(
        Widget semanticIndexCallback_widget$,
        int semanticIndexCallback_localIndex$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            semanticIndexCallback!,
            [
              semanticIndexCallback_widget$,
              semanticIndexCallback_localIndex$,
            ],
            {},
          );
      return SliverChildListDelegate(
        List.from(children),
        addAutomaticKeepAlives: addAutomaticKeepAlives ?? true,
        addRepaintBoundaries: addRepaintBoundaries ?? true,
        addSemanticIndexes: addSemanticIndexes ?? true,
        semanticIndexCallback: semanticIndexCallback == null
            ? (Widget _, int localIndex) => localIndex
            : semanticIndexCallbackProxy,
        semanticIndexOffset: semanticIndexOffset ?? 0,
      );
    };
Function _SliverChildListDelegate_fixed_$(m.Scope scope$) => (
      List children, {
      bool? addAutomaticKeepAlives,
      bool? addRepaintBoundaries,
      bool? addSemanticIndexes,
      m.FunctionPointer? semanticIndexCallback,
      int? semanticIndexOffset,
    }) {
      int? semanticIndexCallbackProxy(
        Widget semanticIndexCallback_widget$,
        int semanticIndexCallback_localIndex$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            semanticIndexCallback!,
            [
              semanticIndexCallback_widget$,
              semanticIndexCallback_localIndex$,
            ],
            {},
          );
      return SliverChildListDelegate.fixed(
        List.from(children),
        addAutomaticKeepAlives: addAutomaticKeepAlives ?? true,
        addRepaintBoundaries: addRepaintBoundaries ?? true,
        addSemanticIndexes: addSemanticIndexes ?? true,
        semanticIndexCallback: semanticIndexCallback == null
            ? (Widget _, int localIndex) => localIndex
            : semanticIndexCallbackProxy,
        semanticIndexOffset: semanticIndexOffset ?? 0,
      );
    };
Function _SliverChildListDelegate_findIndexByKey$(
  m.Scope scope$,
  SliverChildListDelegate target$,
) =>
    target$.findIndexByKey;
Function _SliverChildListDelegate_build$(
  m.Scope scope$,
  SliverChildListDelegate target$,
) =>
    target$.build;
Function _SliverChildListDelegate_shouldRebuild$(
  m.Scope scope$,
  SliverChildListDelegate target$,
) =>
    target$.shouldRebuild;
