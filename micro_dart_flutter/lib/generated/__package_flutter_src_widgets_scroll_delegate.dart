// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/scroll_delegate.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/automatic_keep_alive.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/selection_container.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/scroll_delegate.dart',
  {},
  {},
  {
    'SliverChildDelegate': m.ClassMirror(
      'SliverChildDelegate',
      {
        '#as': SliverChildDelegate_as$,
        '#is': SliverChildDelegate_is$,
        'estimatedChildCount': _SliverChildDelegate_estimatedChildCount$,
        'build': _SliverChildDelegate_build$,
        'estimateMaxScrollOffset':
            _SliverChildDelegate_estimateMaxScrollOffset$,
        'didFinishLayout': _SliverChildDelegate_didFinishLayout$,
        'shouldRebuild': _SliverChildDelegate_shouldRebuild$,
        'findIndexByKey': _SliverChildDelegate_findIndexByKey$,
        'toString': _SliverChildDelegate_toString$,
        'debugFillDescription': _SliverChildDelegate_debugFillDescription$,
      },
      {},
    ),
    'SliverChildBuilderDelegate': m.ClassMirror(
      'SliverChildBuilderDelegate',
      {
        '#as': SliverChildBuilderDelegate_as$,
        '#is': SliverChildBuilderDelegate_is$,
        'builder': _SliverChildBuilderDelegate_builder$,
        'childCount': _SliverChildBuilderDelegate_childCount$,
        'addAutomaticKeepAlives':
            _SliverChildBuilderDelegate_addAutomaticKeepAlives$,
        'addRepaintBoundaries':
            _SliverChildBuilderDelegate_addRepaintBoundaries$,
        'addSemanticIndexes': _SliverChildBuilderDelegate_addSemanticIndexes$,
        'semanticIndexOffset': _SliverChildBuilderDelegate_semanticIndexOffset$,
        'semanticIndexCallback':
            _SliverChildBuilderDelegate_semanticIndexCallback$,
        'findChildIndexCallback':
            _SliverChildBuilderDelegate_findChildIndexCallback$,
        'estimatedChildCount': _SliverChildBuilderDelegate_estimatedChildCount$,
        'findIndexByKey': _SliverChildBuilderDelegate_findIndexByKey$,
        'build': _SliverChildBuilderDelegate_build$,
        'shouldRebuild': _SliverChildBuilderDelegate_shouldRebuild$,
      },
      {},
    ),
    'SliverChildListDelegate': m.ClassMirror(
      'SliverChildListDelegate',
      {
        '#as': SliverChildListDelegate_as$,
        '#is': SliverChildListDelegate_is$,
        'addAutomaticKeepAlives':
            _SliverChildListDelegate_addAutomaticKeepAlives$,
        'addRepaintBoundaries': _SliverChildListDelegate_addRepaintBoundaries$,
        'addSemanticIndexes': _SliverChildListDelegate_addSemanticIndexes$,
        'semanticIndexOffset': _SliverChildListDelegate_semanticIndexOffset$,
        'semanticIndexCallback':
            _SliverChildListDelegate_semanticIndexCallback$,
        'children': _SliverChildListDelegate_children$,
        'estimatedChildCount': _SliverChildListDelegate_estimatedChildCount$,
        'findIndexByKey': _SliverChildListDelegate_findIndexByKey$,
        'build': _SliverChildListDelegate_build$,
        'shouldRebuild': _SliverChildListDelegate_shouldRebuild$,
      },
      {},
    ),
  },
);
Function SliverChildDelegate_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SliverChildDelegate;
Function SliverChildDelegate_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SliverChildDelegate;
int? _SliverChildDelegate_estimatedChildCount$(SliverChildDelegate target) {
  return target.estimatedChildCount;
}

Function _SliverChildDelegate_build$(
  m.Scope scope,
  SliverChildDelegate target,
) =>
    target.build;
Function _SliverChildDelegate_estimateMaxScrollOffset$(
  m.Scope scope,
  SliverChildDelegate target,
) =>
    target.estimateMaxScrollOffset;
Function _SliverChildDelegate_didFinishLayout$(
  m.Scope scope,
  SliverChildDelegate target,
) =>
    target.didFinishLayout;
Function _SliverChildDelegate_shouldRebuild$(
  m.Scope scope,
  SliverChildDelegate target,
) =>
    target.shouldRebuild;
Function _SliverChildDelegate_findIndexByKey$(
  m.Scope scope,
  SliverChildDelegate target,
) =>
    target.findIndexByKey;
Function _SliverChildDelegate_toString$(
  m.Scope scope,
  SliverChildDelegate target,
) =>
    target.toString;
Function _SliverChildDelegate_debugFillDescription$(
  m.Scope scope,
  SliverChildDelegate target,
) =>
    target.debugFillDescription;
Function SliverChildBuilderDelegate_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SliverChildBuilderDelegate;
Function SliverChildBuilderDelegate_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SliverChildBuilderDelegate;
Widget? Function(BuildContext, int) _SliverChildBuilderDelegate_builder$(
    SliverChildBuilderDelegate target) {
  return target.builder;
}

int? _SliverChildBuilderDelegate_childCount$(
    SliverChildBuilderDelegate target) {
  return target.childCount;
}

bool _SliverChildBuilderDelegate_addAutomaticKeepAlives$(
    SliverChildBuilderDelegate target) {
  return target.addAutomaticKeepAlives;
}

bool _SliverChildBuilderDelegate_addRepaintBoundaries$(
    SliverChildBuilderDelegate target) {
  return target.addRepaintBoundaries;
}

bool _SliverChildBuilderDelegate_addSemanticIndexes$(
    SliverChildBuilderDelegate target) {
  return target.addSemanticIndexes;
}

int _SliverChildBuilderDelegate_semanticIndexOffset$(
    SliverChildBuilderDelegate target) {
  return target.semanticIndexOffset;
}

int? Function(Widget, int) _SliverChildBuilderDelegate_semanticIndexCallback$(
    SliverChildBuilderDelegate target) {
  return target.semanticIndexCallback;
}

int? Function(Key)? _SliverChildBuilderDelegate_findChildIndexCallback$(
    SliverChildBuilderDelegate target) {
  return target.findChildIndexCallback;
}

int? _SliverChildBuilderDelegate_estimatedChildCount$(
    SliverChildBuilderDelegate target) {
  return target.estimatedChildCount;
}

Function _SliverChildBuilderDelegate_findIndexByKey$(
  m.Scope scope,
  SliverChildBuilderDelegate target,
) =>
    target.findIndexByKey;
Function _SliverChildBuilderDelegate_build$(
  m.Scope scope,
  SliverChildBuilderDelegate target,
) =>
    target.build;
Function _SliverChildBuilderDelegate_shouldRebuild$(
  m.Scope scope,
  SliverChildBuilderDelegate target,
) =>
    target.shouldRebuild;
Function SliverChildListDelegate_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SliverChildListDelegate;
Function SliverChildListDelegate_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SliverChildListDelegate;
bool _SliverChildListDelegate_addAutomaticKeepAlives$(
    SliverChildListDelegate target) {
  return target.addAutomaticKeepAlives;
}

bool _SliverChildListDelegate_addRepaintBoundaries$(
    SliverChildListDelegate target) {
  return target.addRepaintBoundaries;
}

bool _SliverChildListDelegate_addSemanticIndexes$(
    SliverChildListDelegate target) {
  return target.addSemanticIndexes;
}

int _SliverChildListDelegate_semanticIndexOffset$(
    SliverChildListDelegate target) {
  return target.semanticIndexOffset;
}

int? Function(Widget, int) _SliverChildListDelegate_semanticIndexCallback$(
    SliverChildListDelegate target) {
  return target.semanticIndexCallback;
}

List<Widget> _SliverChildListDelegate_children$(
    SliverChildListDelegate target) {
  return target.children;
}

int? _SliverChildListDelegate_estimatedChildCount$(
    SliverChildListDelegate target) {
  return target.estimatedChildCount;
}

Function _SliverChildListDelegate_findIndexByKey$(
  m.Scope scope,
  SliverChildListDelegate target,
) =>
    target.findIndexByKey;
Function _SliverChildListDelegate_build$(
  m.Scope scope,
  SliverChildListDelegate target,
) =>
    target.build;
Function _SliverChildListDelegate_shouldRebuild$(
  m.Scope scope,
  SliverChildListDelegate target,
) =>
    target.shouldRebuild;
