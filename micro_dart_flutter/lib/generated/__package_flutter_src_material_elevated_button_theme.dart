// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/elevated_button_theme.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/elevated_button_theme.dart',
  {
    'ElevatedButtonThemeData.': _ElevatedButtonThemeData__$,
    'ElevatedButtonThemeData.lerp': _ElevatedButtonThemeData_lerp$,
    'ElevatedButtonTheme.': _ElevatedButtonTheme__$,
    'ElevatedButtonTheme.of': _ElevatedButtonTheme_of$,
  },
  {},
  {
    'ElevatedButtonThemeData': m.ClassMirror(
      'ElevatedButtonThemeData',
      {
        '#as': ElevatedButtonThemeData_as$,
        '#is': ElevatedButtonThemeData_is$,
        'style': _ElevatedButtonThemeData_style$,
        'hashCode': _ElevatedButtonThemeData_hashCode$,
        '==': _ElevatedButtonThemeData_eq$$,
        'debugFillProperties': _ElevatedButtonThemeData_debugFillProperties$,
      },
      {},
    ),
    'ElevatedButtonTheme': m.ClassMirror(
      'ElevatedButtonTheme',
      {
        '#as': ElevatedButtonTheme_as$,
        '#is': ElevatedButtonTheme_is$,
        'data': _ElevatedButtonTheme_data$,
        'wrap': _ElevatedButtonTheme_wrap$,
        'updateShouldNotify': _ElevatedButtonTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function ElevatedButtonThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ElevatedButtonThemeData;
Function ElevatedButtonThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ElevatedButtonThemeData;
Function _ElevatedButtonThemeData_style$(
  m.Scope scope$,
  ElevatedButtonThemeData target$,
) =>
    () {
      return target$.style;
    };
Function _ElevatedButtonThemeData_hashCode$(
  m.Scope scope$,
  ElevatedButtonThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _ElevatedButtonThemeData__$(m.Scope scope$) => ({ButtonStyle? style}) {
      return ElevatedButtonThemeData(style: style);
    };
Function _ElevatedButtonThemeData_lerp$(m.Scope scope$) =>
    ElevatedButtonThemeData.lerp;
Function _ElevatedButtonThemeData_eq$$(
  m.Scope scope$,
  ElevatedButtonThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _ElevatedButtonThemeData_debugFillProperties$(
  m.Scope scope$,
  ElevatedButtonThemeData target$,
) =>
    target$.debugFillProperties;
Function ElevatedButtonTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ElevatedButtonTheme;
Function ElevatedButtonTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ElevatedButtonTheme;
Function _ElevatedButtonTheme_data$(
  m.Scope scope$,
  ElevatedButtonTheme target$,
) =>
    () {
      return target$.data;
    };
Function _ElevatedButtonTheme__$(m.Scope scope$) => ({
      Key? key,
      required ElevatedButtonThemeData data,
      required Widget child,
    }) {
      return ElevatedButtonTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _ElevatedButtonTheme_of$(m.Scope scope$) => ElevatedButtonTheme.of;
Function _ElevatedButtonTheme_wrap$(
  m.Scope scope$,
  ElevatedButtonTheme target$,
) =>
    target$.wrap;
Function _ElevatedButtonTheme_updateShouldNotify$(
  m.Scope scope$,
  ElevatedButtonTheme target$,
) =>
    target$.updateShouldNotify;
