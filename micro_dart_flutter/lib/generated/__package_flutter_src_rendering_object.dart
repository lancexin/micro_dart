// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/object.dart';
import 'dart:developer';
import 'dart:ui' show PictureRecorder;
import 'dart:ui';
import 'package:flutter/animation.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/semantics.dart';
import 'package:flutter/src/rendering/debug.dart';
import 'package:flutter/src/rendering/layer.dart';
import 'package:flutter/src/rendering/proxy_box.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/object.dart',
  {
    'PaintingContext.repaintCompositedChild':
        _PaintingContext_repaintCompositedChild$,
    'PaintingContext.updateLayerProperties':
        _PaintingContext_updateLayerProperties$,
    'PaintingContext.debugInstrumentRepaintCompositedChild':
        _PaintingContext_debugInstrumentRepaintCompositedChild$,
    'PaintingContext.addCompositionCallback':
        _PaintingContext_addCompositionCallback$,
    'PaintingContext.pushLayer': _PaintingContext_pushLayer$,
    'PaintingContext.pushClipRect': _PaintingContext_pushClipRect$,
    'PaintingContext.pushClipRRect': _PaintingContext_pushClipRRect$,
    'PaintingContext.pushClipPath': _PaintingContext_pushClipPath$,
    'PaintingContext.pushColorFilter': _PaintingContext_pushColorFilter$,
    'PaintingContext.pushTransform': _PaintingContext_pushTransform$,
    'PaintingContext.pushOpacity': _PaintingContext_pushOpacity$,
    'Constraints.debugAssertIsValid': _Constraints_debugAssertIsValid$,
    'PipelineOwner.ensureSemantics': _PipelineOwner_ensureSemantics$,
    'PipelineOwner.visitChildren': _PipelineOwner_visitChildren$,
    'RenderObject.debugCheckingIntrinsics':
        _RenderObject_debugCheckingIntrinsics$,
    'RenderObject.debugActiveLayout': _RenderObject_debugActiveLayout$,
    'RenderObject.debugActivePaint': _RenderObject_debugActivePaint$,
    'RenderObject.visitChildren': _RenderObject_visitChildren$,
    'RenderObject.invokeLayoutCallback': _RenderObject_invokeLayoutCallback$,
    'RenderObject.visitChildrenForSemantics':
        _RenderObject_visitChildrenForSemantics$,
  },
  {
    'RenderObject.debugCheckingIntrinsics':
        _RenderObject_debugCheckingIntrinsics_set$
  },
  {
    'ParentData': m.ClassMirror(
      'ParentData',
      {
        '#as': ParentData_as$,
        '#is': ParentData_is$,
        'detach': _ParentData_detach$,
        'toString': _ParentData_toString$,
      },
      {},
    ),
    'PaintingContext': m.ClassMirror(
      'PaintingContext',
      {
        '#as': PaintingContext_as$,
        '#is': PaintingContext_is$,
        'estimatedBounds': _PaintingContext_estimatedBounds$,
        'canvas': _PaintingContext_canvas$,
        'paintChild': _PaintingContext_paintChild$,
        'appendLayer': _PaintingContext_appendLayer$,
        'stopRecordingIfNeeded': _PaintingContext_stopRecordingIfNeeded$,
        'setIsComplexHint': _PaintingContext_setIsComplexHint$,
        'setWillChangeHint': _PaintingContext_setWillChangeHint$,
        'addLayer': _PaintingContext_addLayer$,
        'createChildContext': _PaintingContext_createChildContext$,
        'toString': _PaintingContext_toString$,
      },
      {},
    ),
    'Constraints': m.ClassMirror(
      'Constraints',
      {
        '#as': Constraints_as$,
        '#is': Constraints_is$,
        'isTight': _Constraints_isTight$,
        'isNormalized': _Constraints_isNormalized$,
      },
      {},
    ),
    'PipelineOwner': m.ClassMirror(
      'PipelineOwner',
      {
        '#as': PipelineOwner_as$,
        '#is': PipelineOwner_is$,
        'onNeedVisualUpdate': _PipelineOwner_onNeedVisualUpdate$,
        'onSemanticsOwnerCreated': _PipelineOwner_onSemanticsOwnerCreated$,
        'onSemanticsUpdate': _PipelineOwner_onSemanticsUpdate$,
        'onSemanticsOwnerDisposed': _PipelineOwner_onSemanticsOwnerDisposed$,
        'rootNode': _PipelineOwner_rootNode$,
        'debugDoingLayout': _PipelineOwner_debugDoingLayout$,
        'debugDoingPaint': _PipelineOwner_debugDoingPaint$,
        'semanticsOwner': _PipelineOwner_semanticsOwner$,
        'debugOutstandingSemanticsHandles':
            _PipelineOwner_debugOutstandingSemanticsHandles$,
        'requestVisualUpdate': _PipelineOwner_requestVisualUpdate$,
        'flushLayout': _PipelineOwner_flushLayout$,
        'flushCompositingBits': _PipelineOwner_flushCompositingBits$,
        'flushPaint': _PipelineOwner_flushPaint$,
        'flushSemantics': _PipelineOwner_flushSemantics$,
        'attach': _PipelineOwner_attach$,
        'detach': _PipelineOwner_detach$,
        'adoptChild': _PipelineOwner_adoptChild$,
        'dropChild': _PipelineOwner_dropChild$,
      },
      {'rootNode': _PipelineOwner_rootNode_set$},
    ),
    'PipelineManifold': m.ClassMirror(
      'PipelineManifold',
      {
        '#as': PipelineManifold_as$,
        '#is': PipelineManifold_is$,
        'semanticsEnabled': _PipelineManifold_semanticsEnabled$,
        'requestVisualUpdate': _PipelineManifold_requestVisualUpdate$,
      },
      {},
    ),
    'RenderObject': m.ClassMirror(
      'RenderObject',
      {
        '#as': RenderObject_as$,
        '#is': RenderObject_is$,
        'parentData': _RenderObject_parentData$,
        'debugCreator': _RenderObject_debugCreator$,
        'debugDisposed': _RenderObject_debugDisposed$,
        'debugDoingThisResize': _RenderObject_debugDoingThisResize$,
        'debugDoingThisLayout': _RenderObject_debugDoingThisLayout$,
        'debugCanParentUseSize': _RenderObject_debugCanParentUseSize$,
        'debugLayoutParent': _RenderObject_debugLayoutParent$,
        'owner': _RenderObject_owner$,
        'debugNeedsLayout': _RenderObject_debugNeedsLayout$,
        'debugDoingThisLayoutWithCallback':
            _RenderObject_debugDoingThisLayoutWithCallback$,
        'constraints': _RenderObject_constraints$,
        'sizedByParent': _RenderObject_sizedByParent$,
        'debugDoingThisPaint': _RenderObject_debugDoingThisPaint$,
        'isRepaintBoundary': _RenderObject_isRepaintBoundary$,
        'alwaysNeedsCompositing': _RenderObject_alwaysNeedsCompositing$,
        'layer': _RenderObject_layer$,
        'debugLayer': _RenderObject_debugLayer$,
        'needsCompositing': _RenderObject_needsCompositing$,
        'debugNeedsPaint': _RenderObject_debugNeedsPaint$,
        'debugNeedsCompositedLayerUpdate':
            _RenderObject_debugNeedsCompositedLayerUpdate$,
        'paintBounds': _RenderObject_paintBounds$,
        'semanticBounds': _RenderObject_semanticBounds$,
        'debugSemantics': _RenderObject_debugSemantics$,
        'reassemble': _RenderObject_reassemble$,
        'dispose': _RenderObject_dispose$,
        'setupParentData': _RenderObject_setupParentData$,
        'adoptChild': _RenderObject_adoptChild$,
        'dropChild': _RenderObject_dropChild$,
        'attach': _RenderObject_attach$,
        'debugAssertDoesMeetConstraints':
            _RenderObject_debugAssertDoesMeetConstraints$,
        'markNeedsLayout': _RenderObject_markNeedsLayout$,
        'markParentNeedsLayout': _RenderObject_markParentNeedsLayout$,
        'markNeedsLayoutForSizedByParentChange':
            _RenderObject_markNeedsLayoutForSizedByParentChange$,
        'scheduleInitialLayout': _RenderObject_scheduleInitialLayout$,
        'layout': _RenderObject_layout$,
        'debugResetSize': _RenderObject_debugResetSize$,
        'performResize': _RenderObject_performResize$,
        'performLayout': _RenderObject_performLayout$,
        'debugRegisterRepaintBoundaryPaint':
            _RenderObject_debugRegisterRepaintBoundaryPaint$,
        'updateCompositedLayer': _RenderObject_updateCompositedLayer$,
        'markNeedsCompositingBitsUpdate':
            _RenderObject_markNeedsCompositingBitsUpdate$,
        'markNeedsPaint': _RenderObject_markNeedsPaint$,
        'markNeedsCompositedLayerUpdate':
            _RenderObject_markNeedsCompositedLayerUpdate$,
        'scheduleInitialPaint': _RenderObject_scheduleInitialPaint$,
        'replaceRootLayer': _RenderObject_replaceRootLayer$,
        'debugPaint': _RenderObject_debugPaint$,
        'paint': _RenderObject_paint$,
        'applyPaintTransform': _RenderObject_applyPaintTransform$,
        'paintsChild': _RenderObject_paintsChild$,
        'getTransformTo': _RenderObject_getTransformTo$,
        'describeApproximatePaintClip':
            _RenderObject_describeApproximatePaintClip$,
        'describeSemanticsClip': _RenderObject_describeSemanticsClip$,
        'scheduleInitialSemantics': _RenderObject_scheduleInitialSemantics$,
        'describeSemanticsConfiguration':
            _RenderObject_describeSemanticsConfiguration$,
        'sendSemanticsEvent': _RenderObject_sendSemanticsEvent$,
        'clearSemantics': _RenderObject_clearSemantics$,
        'markNeedsSemanticsUpdate': _RenderObject_markNeedsSemanticsUpdate$,
        'assembleSemanticsNode': _RenderObject_assembleSemanticsNode$,
        'handleEvent': _RenderObject_handleEvent$,
        'toStringShort': _RenderObject_toStringShort$,
        'toString': _RenderObject_toString$,
        'toStringDeep': _RenderObject_toStringDeep$,
        'toStringShallow': _RenderObject_toStringShallow$,
        'debugFillProperties': _RenderObject_debugFillProperties$,
        'debugDescribeChildren': _RenderObject_debugDescribeChildren$,
        'showOnScreen': _RenderObject_showOnScreen$,
        'describeForError': _RenderObject_describeForError$,
      },
      {
        'parentData': _RenderObject_parentData_set$,
        'debugCreator': _RenderObject_debugCreator_set$,
        'layer': _RenderObject_layer_set$,
      },
    ),
    'DiagnosticsDebugCreator': m.ClassMirror(
      'DiagnosticsDebugCreator',
      {
        '#as': DiagnosticsDebugCreator_as$,
        '#is': DiagnosticsDebugCreator_is$,
      },
      {},
    ),
  },
);
Function ParentData_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ParentData;
Function ParentData_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ParentData;
Function _ParentData_detach$(
  m.Scope scope,
  ParentData target,
) =>
    target.detach;
Function _ParentData_toString$(
  m.Scope scope,
  ParentData target,
) =>
    target.toString;
Function PaintingContext_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as PaintingContext;
Function PaintingContext_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is PaintingContext;
Rect _PaintingContext_estimatedBounds$(PaintingContext target) {
  return target.estimatedBounds;
}

Canvas _PaintingContext_canvas$(PaintingContext target) {
  return target.canvas;
}

Function _PaintingContext_repaintCompositedChild$(m.Scope scope) =>
    PaintingContext.repaintCompositedChild;
Function _PaintingContext_updateLayerProperties$(m.Scope scope) =>
    PaintingContext.updateLayerProperties;
Function _PaintingContext_debugInstrumentRepaintCompositedChild$(
        m.Scope scope) =>
    PaintingContext.debugInstrumentRepaintCompositedChild;
Function _PaintingContext_paintChild$(
  m.Scope scope,
  PaintingContext target,
) =>
    target.paintChild;
Function _PaintingContext_appendLayer$(
  m.Scope scope,
  PaintingContext target,
) =>
    target.appendLayer;
Function _PaintingContext_addCompositionCallback$(
  m.Scope scope,
  PaintingContext target,
) =>
    (m.FunctionPointer callback) {
      void callbackProxy(Layer callback_$p0) =>
          scope.engine.callFunctionPointer(
            scope,
            callback,
            [callback_$p0],
            {},
          );
      return target.addCompositionCallback(callbackProxy);
    };
Function _PaintingContext_stopRecordingIfNeeded$(
  m.Scope scope,
  PaintingContext target,
) =>
    target.stopRecordingIfNeeded;
Function _PaintingContext_setIsComplexHint$(
  m.Scope scope,
  PaintingContext target,
) =>
    target.setIsComplexHint;
Function _PaintingContext_setWillChangeHint$(
  m.Scope scope,
  PaintingContext target,
) =>
    target.setWillChangeHint;
Function _PaintingContext_addLayer$(
  m.Scope scope,
  PaintingContext target,
) =>
    target.addLayer;
Function _PaintingContext_pushLayer$(
  m.Scope scope,
  PaintingContext target,
) =>
    (
      ContainerLayer childLayer,
      m.FunctionPointer painter,
      Offset offset, {
      Rect? childPaintBounds,
    }) {
      void painterProxy(
        PaintingContext painter_context,
        Offset painter_offset,
      ) =>
          scope.engine.callFunctionPointer(
            scope,
            painter,
            [
              painter_context,
              painter_offset,
            ],
            {},
          );
      target.pushLayer(
        childLayer,
        painterProxy,
        offset,
        childPaintBounds: childPaintBounds,
      );
    };
Function _PaintingContext_createChildContext$(
  m.Scope scope,
  PaintingContext target,
) =>
    target.createChildContext;
Function _PaintingContext_pushClipRect$(
  m.Scope scope,
  PaintingContext target,
) =>
    (
      bool needsCompositing,
      Offset offset,
      Rect clipRect,
      m.FunctionPointer painter, {
      Clip? clipBehavior,
      ClipRectLayer? oldLayer,
    }) {
      void painterProxy(
        PaintingContext painter_context,
        Offset painter_offset,
      ) =>
          scope.engine.callFunctionPointer(
            scope,
            painter,
            [
              painter_context,
              painter_offset,
            ],
            {},
          );
      return target.pushClipRect(
        needsCompositing,
        offset,
        clipRect,
        painterProxy,
        clipBehavior: clipBehavior == null ? Clip.hardEdge : clipBehavior,
        oldLayer: oldLayer,
      );
    };
Function _PaintingContext_pushClipRRect$(
  m.Scope scope,
  PaintingContext target,
) =>
    (
      bool needsCompositing,
      Offset offset,
      Rect bounds,
      RRect clipRRect,
      m.FunctionPointer painter, {
      Clip? clipBehavior,
      ClipRRectLayer? oldLayer,
    }) {
      void painterProxy(
        PaintingContext painter_context,
        Offset painter_offset,
      ) =>
          scope.engine.callFunctionPointer(
            scope,
            painter,
            [
              painter_context,
              painter_offset,
            ],
            {},
          );
      return target.pushClipRRect(
        needsCompositing,
        offset,
        bounds,
        clipRRect,
        painterProxy,
        clipBehavior: clipBehavior == null ? Clip.antiAlias : clipBehavior,
        oldLayer: oldLayer,
      );
    };
Function _PaintingContext_pushClipPath$(
  m.Scope scope,
  PaintingContext target,
) =>
    (
      bool needsCompositing,
      Offset offset,
      Rect bounds,
      Path clipPath,
      m.FunctionPointer painter, {
      Clip? clipBehavior,
      ClipPathLayer? oldLayer,
    }) {
      void painterProxy(
        PaintingContext painter_context,
        Offset painter_offset,
      ) =>
          scope.engine.callFunctionPointer(
            scope,
            painter,
            [
              painter_context,
              painter_offset,
            ],
            {},
          );
      return target.pushClipPath(
        needsCompositing,
        offset,
        bounds,
        clipPath,
        painterProxy,
        clipBehavior: clipBehavior == null ? Clip.antiAlias : clipBehavior,
        oldLayer: oldLayer,
      );
    };
Function _PaintingContext_pushColorFilter$(
  m.Scope scope,
  PaintingContext target,
) =>
    (
      Offset offset,
      ColorFilter colorFilter,
      m.FunctionPointer painter, {
      ColorFilterLayer? oldLayer,
    }) {
      void painterProxy(
        PaintingContext painter_context,
        Offset painter_offset,
      ) =>
          scope.engine.callFunctionPointer(
            scope,
            painter,
            [
              painter_context,
              painter_offset,
            ],
            {},
          );
      return target.pushColorFilter(
        offset,
        colorFilter,
        painterProxy,
        oldLayer: oldLayer,
      );
    };
Function _PaintingContext_pushTransform$(
  m.Scope scope,
  PaintingContext target,
) =>
    (
      bool needsCompositing,
      Offset offset,
      Matrix4 transform,
      m.FunctionPointer painter, {
      TransformLayer? oldLayer,
    }) {
      void painterProxy(
        PaintingContext painter_context,
        Offset painter_offset,
      ) =>
          scope.engine.callFunctionPointer(
            scope,
            painter,
            [
              painter_context,
              painter_offset,
            ],
            {},
          );
      return target.pushTransform(
        needsCompositing,
        offset,
        transform,
        painterProxy,
        oldLayer: oldLayer,
      );
    };
Function _PaintingContext_pushOpacity$(
  m.Scope scope,
  PaintingContext target,
) =>
    (
      Offset offset,
      int alpha,
      m.FunctionPointer painter, {
      OpacityLayer? oldLayer,
    }) {
      void painterProxy(
        PaintingContext painter_context,
        Offset painter_offset,
      ) =>
          scope.engine.callFunctionPointer(
            scope,
            painter,
            [
              painter_context,
              painter_offset,
            ],
            {},
          );
      return target.pushOpacity(
        offset,
        alpha,
        painterProxy,
        oldLayer: oldLayer,
      );
    };
Function _PaintingContext_toString$(
  m.Scope scope,
  PaintingContext target,
) =>
    target.toString;
Function Constraints_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Constraints;
Function Constraints_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Constraints;
bool _Constraints_isTight$(Constraints target) {
  return target.isTight;
}

bool _Constraints_isNormalized$(Constraints target) {
  return target.isNormalized;
}

Function _Constraints_debugAssertIsValid$(
  m.Scope scope,
  Constraints target,
) =>
    ({
      m.FunctionPointer? informationCollector,
      bool? isAppliedConstraint,
    }) {
      Iterable<DiagnosticsNode> informationCollectorProxy() =>
          scope.engine.callFunctionPointer(
            scope,
            informationCollector!,
            [],
            {},
          );
      return target.debugAssertIsValid(
        informationCollector:
            informationCollector == null ? null : informationCollectorProxy,
        isAppliedConstraint:
            isAppliedConstraint == null ? false : isAppliedConstraint,
      );
    };
Function PipelineOwner_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as PipelineOwner;
Function PipelineOwner_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is PipelineOwner;
void Function()? _PipelineOwner_onNeedVisualUpdate$(PipelineOwner target) {
  return target.onNeedVisualUpdate;
}

void Function()? _PipelineOwner_onSemanticsOwnerCreated$(PipelineOwner target) {
  return target.onSemanticsOwnerCreated;
}

void Function(SemanticsUpdate)? _PipelineOwner_onSemanticsUpdate$(
    PipelineOwner target) {
  return target.onSemanticsUpdate;
}

void Function()? _PipelineOwner_onSemanticsOwnerDisposed$(
    PipelineOwner target) {
  return target.onSemanticsOwnerDisposed;
}

AbstractNode? _PipelineOwner_rootNode$(PipelineOwner target) {
  return target.rootNode;
}

void _PipelineOwner_rootNode_set$(
  PipelineOwner target,
  AbstractNode? other,
) {
  target.rootNode = other;
}

bool _PipelineOwner_debugDoingLayout$(PipelineOwner target) {
  return target.debugDoingLayout;
}

bool _PipelineOwner_debugDoingPaint$(PipelineOwner target) {
  return target.debugDoingPaint;
}

SemanticsOwner? _PipelineOwner_semanticsOwner$(PipelineOwner target) {
  return target.semanticsOwner;
}

int _PipelineOwner_debugOutstandingSemanticsHandles$(PipelineOwner target) {
  return target.debugOutstandingSemanticsHandles;
}

Function _PipelineOwner_requestVisualUpdate$(
  m.Scope scope,
  PipelineOwner target,
) =>
    target.requestVisualUpdate;
Function _PipelineOwner_flushLayout$(
  m.Scope scope,
  PipelineOwner target,
) =>
    target.flushLayout;
Function _PipelineOwner_flushCompositingBits$(
  m.Scope scope,
  PipelineOwner target,
) =>
    target.flushCompositingBits;
Function _PipelineOwner_flushPaint$(
  m.Scope scope,
  PipelineOwner target,
) =>
    target.flushPaint;
Function _PipelineOwner_ensureSemantics$(
  m.Scope scope,
  PipelineOwner target,
) =>
    ({m.FunctionPointer? listener}) {
      void listenerProxy() => scope.engine.callFunctionPointer(
            scope,
            listener!,
            [],
            {},
          );
      return target.ensureSemantics(
          listener: listener == null ? null : listenerProxy);
    };
Function _PipelineOwner_flushSemantics$(
  m.Scope scope,
  PipelineOwner target,
) =>
    target.flushSemantics;
Function _PipelineOwner_attach$(
  m.Scope scope,
  PipelineOwner target,
) =>
    target.attach;
Function _PipelineOwner_detach$(
  m.Scope scope,
  PipelineOwner target,
) =>
    target.detach;
Function _PipelineOwner_adoptChild$(
  m.Scope scope,
  PipelineOwner target,
) =>
    target.adoptChild;
Function _PipelineOwner_dropChild$(
  m.Scope scope,
  PipelineOwner target,
) =>
    target.dropChild;
Function _PipelineOwner_visitChildren$(
  m.Scope scope,
  PipelineOwner target,
) =>
    (m.FunctionPointer visitor) {
      void visitorProxy(PipelineOwner visitor_child) =>
          scope.engine.callFunctionPointer(
            scope,
            visitor,
            [visitor_child],
            {},
          );
      target.visitChildren(visitorProxy);
    };
Function PipelineManifold_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as PipelineManifold;
Function PipelineManifold_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is PipelineManifold;
bool _PipelineManifold_semanticsEnabled$(PipelineManifold target) {
  return target.semanticsEnabled;
}

Function _PipelineManifold_requestVisualUpdate$(
  m.Scope scope,
  PipelineManifold target,
) =>
    target.requestVisualUpdate;
Function RenderObject_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderObject;
Function RenderObject_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderObject;
ParentData? _RenderObject_parentData$(RenderObject target) {
  return target.parentData;
}

void _RenderObject_parentData_set$(
  RenderObject target,
  ParentData? other,
) {
  target.parentData = other;
}

Object? _RenderObject_debugCreator$(RenderObject target) {
  return target.debugCreator;
}

void _RenderObject_debugCreator_set$(
  RenderObject target,
  Object? other,
) {
  target.debugCreator = other;
}

bool _RenderObject_debugCheckingIntrinsics$() {
  return RenderObject.debugCheckingIntrinsics;
}

void _RenderObject_debugCheckingIntrinsics_set$(bool other) {
  RenderObject.debugCheckingIntrinsics = other;
}

bool? _RenderObject_debugDisposed$(RenderObject target) {
  return target.debugDisposed;
}

bool _RenderObject_debugDoingThisResize$(RenderObject target) {
  return target.debugDoingThisResize;
}

bool _RenderObject_debugDoingThisLayout$(RenderObject target) {
  return target.debugDoingThisLayout;
}

RenderObject? _RenderObject_debugActiveLayout$() {
  return RenderObject.debugActiveLayout;
}

bool _RenderObject_debugCanParentUseSize$(RenderObject target) {
  return target.debugCanParentUseSize;
}

RenderObject? _RenderObject_debugLayoutParent$(RenderObject target) {
  return target.debugLayoutParent;
}

PipelineOwner? _RenderObject_owner$(RenderObject target) {
  return target.owner;
}

bool _RenderObject_debugNeedsLayout$(RenderObject target) {
  return target.debugNeedsLayout;
}

bool _RenderObject_debugDoingThisLayoutWithCallback$(RenderObject target) {
  return target.debugDoingThisLayoutWithCallback;
}

Constraints _RenderObject_constraints$(RenderObject target) {
  return target.constraints;
}

bool _RenderObject_sizedByParent$(RenderObject target) {
  return target.sizedByParent;
}

bool _RenderObject_debugDoingThisPaint$(RenderObject target) {
  return target.debugDoingThisPaint;
}

RenderObject? _RenderObject_debugActivePaint$() {
  return RenderObject.debugActivePaint;
}

bool _RenderObject_isRepaintBoundary$(RenderObject target) {
  return target.isRepaintBoundary;
}

bool _RenderObject_alwaysNeedsCompositing$(RenderObject target) {
  return target.alwaysNeedsCompositing;
}

ContainerLayer? _RenderObject_layer$(RenderObject target) {
  return target.layer;
}

void _RenderObject_layer_set$(
  RenderObject target,
  ContainerLayer? other,
) {
  target.layer = other;
}

ContainerLayer? _RenderObject_debugLayer$(RenderObject target) {
  return target.debugLayer;
}

bool _RenderObject_needsCompositing$(RenderObject target) {
  return target.needsCompositing;
}

bool _RenderObject_debugNeedsPaint$(RenderObject target) {
  return target.debugNeedsPaint;
}

bool _RenderObject_debugNeedsCompositedLayerUpdate$(RenderObject target) {
  return target.debugNeedsCompositedLayerUpdate;
}

Rect _RenderObject_paintBounds$(RenderObject target) {
  return target.paintBounds;
}

Rect _RenderObject_semanticBounds$(RenderObject target) {
  return target.semanticBounds;
}

SemanticsNode? _RenderObject_debugSemantics$(RenderObject target) {
  return target.debugSemantics;
}

Function _RenderObject_reassemble$(
  m.Scope scope,
  RenderObject target,
) =>
    target.reassemble;
Function _RenderObject_dispose$(
  m.Scope scope,
  RenderObject target,
) =>
    target.dispose;
Function _RenderObject_setupParentData$(
  m.Scope scope,
  RenderObject target,
) =>
    target.setupParentData;
Function _RenderObject_adoptChild$(
  m.Scope scope,
  RenderObject target,
) =>
    target.adoptChild;
Function _RenderObject_dropChild$(
  m.Scope scope,
  RenderObject target,
) =>
    target.dropChild;
Function _RenderObject_visitChildren$(
  m.Scope scope,
  RenderObject target,
) =>
    (m.FunctionPointer visitor) {
      void visitorProxy(RenderObject visitor_child) =>
          scope.engine.callFunctionPointer(
            scope,
            visitor,
            [visitor_child],
            {},
          );
      target.visitChildren(visitorProxy);
    };
Function _RenderObject_attach$(
  m.Scope scope,
  RenderObject target,
) =>
    target.attach;
Function _RenderObject_debugAssertDoesMeetConstraints$(
  m.Scope scope,
  RenderObject target,
) =>
    target.debugAssertDoesMeetConstraints;
Function _RenderObject_markNeedsLayout$(
  m.Scope scope,
  RenderObject target,
) =>
    target.markNeedsLayout;
Function _RenderObject_markParentNeedsLayout$(
  m.Scope scope,
  RenderObject target,
) =>
    target.markParentNeedsLayout;
Function _RenderObject_markNeedsLayoutForSizedByParentChange$(
  m.Scope scope,
  RenderObject target,
) =>
    target.markNeedsLayoutForSizedByParentChange;
Function _RenderObject_scheduleInitialLayout$(
  m.Scope scope,
  RenderObject target,
) =>
    target.scheduleInitialLayout;
Function _RenderObject_layout$(
  m.Scope scope,
  RenderObject target,
) =>
    target.layout;
Function _RenderObject_debugResetSize$(
  m.Scope scope,
  RenderObject target,
) =>
    target.debugResetSize;
Function _RenderObject_performResize$(
  m.Scope scope,
  RenderObject target,
) =>
    target.performResize;
Function _RenderObject_performLayout$(
  m.Scope scope,
  RenderObject target,
) =>
    target.performLayout;
Function _RenderObject_invokeLayoutCallback$(
  m.Scope scope,
  RenderObject target,
) =>
    <T extends Constraints>(m.FunctionPointer callback) {
      void callbackProxy(T callback_constraints) =>
          scope.engine.callFunctionPointer(
            scope,
            callback,
            [callback_constraints],
            {},
          );
      target.invokeLayoutCallback<T>(callbackProxy);
    };
Function _RenderObject_debugRegisterRepaintBoundaryPaint$(
  m.Scope scope,
  RenderObject target,
) =>
    target.debugRegisterRepaintBoundaryPaint;
Function _RenderObject_updateCompositedLayer$(
  m.Scope scope,
  RenderObject target,
) =>
    target.updateCompositedLayer;
Function _RenderObject_markNeedsCompositingBitsUpdate$(
  m.Scope scope,
  RenderObject target,
) =>
    target.markNeedsCompositingBitsUpdate;
Function _RenderObject_markNeedsPaint$(
  m.Scope scope,
  RenderObject target,
) =>
    target.markNeedsPaint;
Function _RenderObject_markNeedsCompositedLayerUpdate$(
  m.Scope scope,
  RenderObject target,
) =>
    target.markNeedsCompositedLayerUpdate;
Function _RenderObject_scheduleInitialPaint$(
  m.Scope scope,
  RenderObject target,
) =>
    target.scheduleInitialPaint;
Function _RenderObject_replaceRootLayer$(
  m.Scope scope,
  RenderObject target,
) =>
    target.replaceRootLayer;
Function _RenderObject_debugPaint$(
  m.Scope scope,
  RenderObject target,
) =>
    target.debugPaint;
Function _RenderObject_paint$(
  m.Scope scope,
  RenderObject target,
) =>
    target.paint;
Function _RenderObject_applyPaintTransform$(
  m.Scope scope,
  RenderObject target,
) =>
    target.applyPaintTransform;
Function _RenderObject_paintsChild$(
  m.Scope scope,
  RenderObject target,
) =>
    target.paintsChild;
Function _RenderObject_getTransformTo$(
  m.Scope scope,
  RenderObject target,
) =>
    target.getTransformTo;
Function _RenderObject_describeApproximatePaintClip$(
  m.Scope scope,
  RenderObject target,
) =>
    target.describeApproximatePaintClip;
Function _RenderObject_describeSemanticsClip$(
  m.Scope scope,
  RenderObject target,
) =>
    target.describeSemanticsClip;
Function _RenderObject_scheduleInitialSemantics$(
  m.Scope scope,
  RenderObject target,
) =>
    target.scheduleInitialSemantics;
Function _RenderObject_describeSemanticsConfiguration$(
  m.Scope scope,
  RenderObject target,
) =>
    target.describeSemanticsConfiguration;
Function _RenderObject_sendSemanticsEvent$(
  m.Scope scope,
  RenderObject target,
) =>
    target.sendSemanticsEvent;
Function _RenderObject_clearSemantics$(
  m.Scope scope,
  RenderObject target,
) =>
    target.clearSemantics;
Function _RenderObject_markNeedsSemanticsUpdate$(
  m.Scope scope,
  RenderObject target,
) =>
    target.markNeedsSemanticsUpdate;
Function _RenderObject_visitChildrenForSemantics$(
  m.Scope scope,
  RenderObject target,
) =>
    (m.FunctionPointer visitor) {
      void visitorProxy(RenderObject visitor_child) =>
          scope.engine.callFunctionPointer(
            scope,
            visitor,
            [visitor_child],
            {},
          );
      target.visitChildrenForSemantics(visitorProxy);
    };
Function _RenderObject_assembleSemanticsNode$(
  m.Scope scope,
  RenderObject target,
) =>
    target.assembleSemanticsNode;
Function _RenderObject_handleEvent$(
  m.Scope scope,
  RenderObject target,
) =>
    target.handleEvent;
Function _RenderObject_toStringShort$(
  m.Scope scope,
  RenderObject target,
) =>
    target.toStringShort;
Function _RenderObject_toString$(
  m.Scope scope,
  RenderObject target,
) =>
    target.toString;
Function _RenderObject_toStringDeep$(
  m.Scope scope,
  RenderObject target,
) =>
    target.toStringDeep;
Function _RenderObject_toStringShallow$(
  m.Scope scope,
  RenderObject target,
) =>
    target.toStringShallow;
Function _RenderObject_debugFillProperties$(
  m.Scope scope,
  RenderObject target,
) =>
    target.debugFillProperties;
Function _RenderObject_debugDescribeChildren$(
  m.Scope scope,
  RenderObject target,
) =>
    target.debugDescribeChildren;
Function _RenderObject_showOnScreen$(
  m.Scope scope,
  RenderObject target,
) =>
    target.showOnScreen;
Function _RenderObject_describeForError$(
  m.Scope scope,
  RenderObject target,
) =>
    target.describeForError;
Function DiagnosticsDebugCreator_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DiagnosticsDebugCreator;
Function DiagnosticsDebugCreator_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DiagnosticsDebugCreator;
