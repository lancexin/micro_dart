// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/animation/tween.dart';
import 'dart:ui' show Color, Rect, Size;
import 'package:flutter/foundation.dart';
import 'package:flutter/src/animation/animations.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/animation/tween.dart',
  {
    'Animatable.fromCallback': _Animatable_fromCallback_$,
    'Tween.': _Tween__$,
    'Tween.<double>': _Tween__double$,
    'ReverseTween.': _ReverseTween__$,
    'ColorTween.': _ColorTween__$,
    'SizeTween.': _SizeTween__$,
    'RectTween.': _RectTween__$,
    'IntTween.': _IntTween__$,
    'StepTween.': _StepTween__$,
    'ConstantTween.': _ConstantTween__$,
    'CurveTween.': _CurveTween__$,
  },
  {},
  {
    'Animatable': m.ClassMirror(
      'Animatable',
      {
        '#as': Animatable_as$,
        '#is': Animatable_is$,
        'transform': _Animatable_transform$,
        'evaluate': _Animatable_evaluate$,
        'animate': _Animatable_animate$,
        'chain': _Animatable_chain$,
      },
      {},
    ),
    'Tween': m.ClassMirror(
      'Tween',
      {
        '#as': Tween_as$,
        '#is': Tween_is$,
        'begin': _Tween_begin$,
        'end': _Tween_end$,
        'lerp': _Tween_lerp$,
        'transform': _Tween_transform$,
        'toString': _Tween_toString$,
      },
      {
        'begin': _Tween_begin_set$,
        'end': _Tween_end_set$,
      },
    ),
    'ReverseTween': m.ClassMirror(
      'ReverseTween',
      {
        '#as': ReverseTween_as$,
        '#is': ReverseTween_is$,
        'parent': _ReverseTween_parent$,
        'lerp': _ReverseTween_lerp$,
      },
      {},
    ),
    'ColorTween': m.ClassMirror(
      'ColorTween',
      {
        '#as': ColorTween_as$,
        '#is': ColorTween_is$,
        'lerp': _ColorTween_lerp$,
      },
      {},
    ),
    'SizeTween': m.ClassMirror(
      'SizeTween',
      {
        '#as': SizeTween_as$,
        '#is': SizeTween_is$,
        'lerp': _SizeTween_lerp$,
      },
      {},
    ),
    'RectTween': m.ClassMirror(
      'RectTween',
      {
        '#as': RectTween_as$,
        '#is': RectTween_is$,
        'lerp': _RectTween_lerp$,
      },
      {},
    ),
    'IntTween': m.ClassMirror(
      'IntTween',
      {
        '#as': IntTween_as$,
        '#is': IntTween_is$,
        'lerp': _IntTween_lerp$,
      },
      {},
    ),
    'StepTween': m.ClassMirror(
      'StepTween',
      {
        '#as': StepTween_as$,
        '#is': StepTween_is$,
        'lerp': _StepTween_lerp$,
      },
      {},
    ),
    'ConstantTween': m.ClassMirror(
      'ConstantTween',
      {
        '#as': ConstantTween_as$,
        '#is': ConstantTween_is$,
        'lerp': _ConstantTween_lerp$,
        'toString': _ConstantTween_toString$,
      },
      {},
    ),
    'CurveTween': m.ClassMirror(
      'CurveTween',
      {
        '#as': CurveTween_as$,
        '#is': CurveTween_is$,
        'curve': _CurveTween_curve$,
        'transform': _CurveTween_transform$,
        'toString': _CurveTween_toString$,
      },
      {'curve': _CurveTween_curve_set$},
    ),
  },
);
Function Animatable_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Animatable<T>;
Function Animatable_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Animatable<T>;
Function _Animatable_fromCallback_$(m.Scope scope$) =>
    (m.FunctionPointer callback) {
      dynamic callbackProxy(double callback_$p0$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            callback,
            [callback_$p0$],
            {},
          );
      return Animatable.fromCallback(callbackProxy);
    };
Function _Animatable_transform$<T>(
  m.Scope scope$,
  Animatable<T> target$,
) =>
    target$.transform;
Function _Animatable_evaluate$<T>(
  m.Scope scope$,
  Animatable<T> target$,
) =>
    target$.evaluate;
Function _Animatable_animate$<T>(
  m.Scope scope$,
  Animatable<T> target$,
) =>
    (Animation<double> parent) {
      return target$.animate(parent);
    };
Function _Animatable_chain$<T>(
  m.Scope scope$,
  Animatable<T> target$,
) =>
    target$.chain;
Function Tween_as$<T extends Object?>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Tween<T>;
Function Tween_is$<T extends Object?>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Tween<T>;
Function _Tween_begin$<T extends Object?>(
  m.Scope scope$,
  Tween<T> target$,
) =>
    () {
      return target$.begin;
    };
void _Tween_begin_set$<T extends Object?>(
  m.Scope scope$,
  Tween target$,
) =>
    (dynamic other$) {
      target$.begin = other$;
    };
Function _Tween_end$<T extends Object?>(
  m.Scope scope$,
  Tween<T> target$,
) =>
    () {
      return target$.end;
    };
void _Tween_end_set$<T extends Object?>(
  m.Scope scope$,
  Tween target$,
) =>
    (dynamic other$) {
      target$.end = other$;
    };
Function _Tween__$(m.Scope scope$) => <T extends Object?>({
      T? begin,
      T? end,
    }) {
      return Tween<T>(
        begin: begin,
        end: end,
      );
    };
Function _Tween__double$(m.Scope scope$) => ({
      double? begin,
      double? end,
    }) {
      return Tween<double>(
        begin: begin,
        end: end,
      );
    };
Function _Tween_lerp$<T extends Object?>(
  m.Scope scope$,
  Tween<T> target$,
) =>
    target$.lerp;
Function _Tween_transform$<T extends Object?>(
  m.Scope scope$,
  Tween<T> target$,
) =>
    target$.transform;
Function _Tween_toString$<T extends Object?>(
  m.Scope scope$,
  Tween<T> target$,
) =>
    target$.toString;
Function ReverseTween_as$<T extends Object?>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ReverseTween<T>;
Function ReverseTween_is$<T extends Object?>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ReverseTween<T>;
Function _ReverseTween_parent$<T extends Object?>(
  m.Scope scope$,
  ReverseTween<T> target$,
) =>
    () {
      return target$.parent;
    };
Function _ReverseTween__$(m.Scope scope$) =>
    <T extends Object?>(Tween<T> parent) {
      return ReverseTween<T>(parent);
    };
Function _ReverseTween_lerp$<T extends Object?>(
  m.Scope scope$,
  ReverseTween<T> target$,
) =>
    target$.lerp;
Function ColorTween_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ColorTween;
Function ColorTween_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ColorTween;
Function _ColorTween__$(m.Scope scope$) => ({
      Color? begin,
      Color? end,
    }) {
      return ColorTween(
        begin: begin,
        end: end,
      );
    };
Function _ColorTween_lerp$(
  m.Scope scope$,
  ColorTween target$,
) =>
    target$.lerp;
Function SizeTween_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SizeTween;
Function SizeTween_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SizeTween;
Function _SizeTween__$(m.Scope scope$) => ({
      Size? begin,
      Size? end,
    }) {
      return SizeTween(
        begin: begin,
        end: end,
      );
    };
Function _SizeTween_lerp$(
  m.Scope scope$,
  SizeTween target$,
) =>
    target$.lerp;
Function RectTween_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RectTween;
Function RectTween_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RectTween;
Function _RectTween__$(m.Scope scope$) => ({
      Rect? begin,
      Rect? end,
    }) {
      return RectTween(
        begin: begin,
        end: end,
      );
    };
Function _RectTween_lerp$(
  m.Scope scope$,
  RectTween target$,
) =>
    target$.lerp;
Function IntTween_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as IntTween;
Function IntTween_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is IntTween;
Function _IntTween__$(m.Scope scope$) => ({
      int? begin,
      int? end,
    }) {
      return IntTween(
        begin: begin,
        end: end,
      );
    };
Function _IntTween_lerp$(
  m.Scope scope$,
  IntTween target$,
) =>
    target$.lerp;
Function StepTween_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as StepTween;
Function StepTween_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is StepTween;
Function _StepTween__$(m.Scope scope$) => ({
      int? begin,
      int? end,
    }) {
      return StepTween(
        begin: begin,
        end: end,
      );
    };
Function _StepTween_lerp$(
  m.Scope scope$,
  StepTween target$,
) =>
    target$.lerp;
Function ConstantTween_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ConstantTween<T>;
Function ConstantTween_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ConstantTween<T>;
Function _ConstantTween__$(m.Scope scope$) => (dynamic value) {
      return ConstantTween(value);
    };
Function _ConstantTween_lerp$<T>(
  m.Scope scope$,
  ConstantTween<T> target$,
) =>
    target$.lerp;
Function _ConstantTween_toString$<T>(
  m.Scope scope$,
  ConstantTween<T> target$,
) =>
    target$.toString;
Function CurveTween_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CurveTween;
Function CurveTween_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CurveTween;
Function _CurveTween_curve$(
  m.Scope scope$,
  CurveTween target$,
) =>
    () {
      return target$.curve;
    };
void _CurveTween_curve_set$(
  m.Scope scope$,
  CurveTween target$,
) =>
    (dynamic other$) {
      target$.curve = other$;
    };
Function _CurveTween__$(m.Scope scope$) => ({required Curve curve}) {
      return CurveTween(curve: curve);
    };
Function _CurveTween_transform$(
  m.Scope scope$,
  CurveTween target$,
) =>
    target$.transform;
Function _CurveTween_toString$(
  m.Scope scope$,
  CurveTween target$,
) =>
    target$.toString;
