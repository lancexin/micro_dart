// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/animation/tween.dart';
import 'dart:ui' show Color, Rect, Size;
import 'package:flutter/foundation.dart';
import 'package:flutter/src/animation/animations.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/animation/tween.dart',
  {},
  {},
  {
    'Animatable': m.ClassMirror(
      'Animatable',
      {
        'transform': _Animatable_transform$,
        'evaluate': _Animatable_evaluate$,
        'animate': _Animatable_animate$,
        'chain': _Animatable_chain$,
      },
      {},
    ),
    'Tween': m.ClassMirror(
      'Tween',
      {
        'begin': _Tween_begin$,
        'end': _Tween_end$,
        'lerp': _Tween_lerp$,
        'transform': _Tween_transform$,
        'toString': _Tween_toString$,
      },
      {
        'begin': _Tween_begin_set$,
        'end': _Tween_end_set$,
      },
    ),
    'ReverseTween': m.ClassMirror(
      'ReverseTween',
      {
        'parent': _ReverseTween_parent$,
        'lerp': _ReverseTween_lerp$,
      },
      {},
    ),
    'ColorTween': m.ClassMirror(
      'ColorTween',
      {'lerp': _ColorTween_lerp$},
      {},
    ),
    'SizeTween': m.ClassMirror(
      'SizeTween',
      {'lerp': _SizeTween_lerp$},
      {},
    ),
    'RectTween': m.ClassMirror(
      'RectTween',
      {'lerp': _RectTween_lerp$},
      {},
    ),
    'IntTween': m.ClassMirror(
      'IntTween',
      {'lerp': _IntTween_lerp$},
      {},
    ),
    'StepTween': m.ClassMirror(
      'StepTween',
      {'lerp': _StepTween_lerp$},
      {},
    ),
    'ConstantTween': m.ClassMirror(
      'ConstantTween',
      {
        'lerp': _ConstantTween_lerp$,
        'toString': _ConstantTween_toString$,
      },
      {},
    ),
    'CurveTween': m.ClassMirror(
      'CurveTween',
      {
        'curve': _CurveTween_curve$,
        'transform': _CurveTween_transform$,
        'toString': _CurveTween_toString$,
      },
      {'curve': _CurveTween_curve_set$},
    ),
  },
);
Function _Animatable_transform$<T>(
  m.Scope scope,
  Animatable<T> target,
) =>
    target.transform;
Function _Animatable_evaluate$<T>(
  m.Scope scope,
  Animatable<T> target,
) =>
    target.evaluate;
Function _Animatable_animate$<T>(
  m.Scope scope,
  Animatable<T> target,
) =>
    target.animate;
Function _Animatable_chain$<T>(
  m.Scope scope,
  Animatable<T> target,
) =>
    target.chain;
T? _Tween_begin$<T extends Object?>(Tween<T> target) {
  return target.begin;
}

void _Tween_begin_set$<T extends Object?>(
  Tween<T> target,
  T? other,
) {
  target.begin = other;
}

T? _Tween_end$<T extends Object?>(Tween<T> target) {
  return target.end;
}

void _Tween_end_set$<T extends Object?>(
  Tween<T> target,
  T? other,
) {
  target.end = other;
}

Function _Tween_lerp$<T extends Object?>(
  m.Scope scope,
  Tween<T> target,
) =>
    target.lerp;
Function _Tween_transform$<T extends Object?>(
  m.Scope scope,
  Tween<T> target,
) =>
    target.transform;
Function _Tween_toString$<T extends Object?>(
  m.Scope scope,
  Tween<T> target,
) =>
    target.toString;
Tween<T> _ReverseTween_parent$<T extends Object?>(ReverseTween<T> target) {
  return target.parent;
}

Function _ReverseTween_lerp$<T extends Object?>(
  m.Scope scope,
  ReverseTween<T> target,
) =>
    target.lerp;
Function _ColorTween_lerp$(
  m.Scope scope,
  ColorTween target,
) =>
    target.lerp;
Function _SizeTween_lerp$(
  m.Scope scope,
  SizeTween target,
) =>
    target.lerp;
Function _RectTween_lerp$(
  m.Scope scope,
  RectTween target,
) =>
    target.lerp;
Function _IntTween_lerp$(
  m.Scope scope,
  IntTween target,
) =>
    target.lerp;
Function _StepTween_lerp$(
  m.Scope scope,
  StepTween target,
) =>
    target.lerp;
Function _ConstantTween_lerp$<T>(
  m.Scope scope,
  ConstantTween<T> target,
) =>
    target.lerp;
Function _ConstantTween_toString$<T>(
  m.Scope scope,
  ConstantTween<T> target,
) =>
    target.toString;
Curve _CurveTween_curve$(CurveTween target) {
  return target.curve;
}

void _CurveTween_curve_set$(
  CurveTween target,
  Curve other,
) {
  target.curve = other;
}

Function _CurveTween_transform$(
  m.Scope scope,
  CurveTween target,
) =>
    target.transform;
Function _CurveTween_toString$(
  m.Scope scope,
  CurveTween target,
) =>
    target.toString;
