// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/selection_container.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/selection_container.dart',
  {
    'SelectionContainer.': _SelectionContainer__$,
    'SelectionContainer.disabled': _SelectionContainer_disabled_$,
    'SelectionContainer.maybeOf': _SelectionContainer_maybeOf$,
    'SelectionRegistrarScope.': _SelectionRegistrarScope__$,
  },
  {},
  {
    'SelectionContainer': m.ClassMirror(
      'SelectionContainer',
      {
        '#as': SelectionContainer_as$,
        '#is': SelectionContainer_is$,
        'registrar': _SelectionContainer_registrar$,
        'child': _SelectionContainer_child$,
        'delegate': _SelectionContainer_delegate$,
        'createState': _SelectionContainer_createState$,
      },
      {},
    ),
    'SelectionRegistrarScope': m.ClassMirror(
      'SelectionRegistrarScope',
      {
        '#as': SelectionRegistrarScope_as$,
        '#is': SelectionRegistrarScope_is$,
        'registrar': _SelectionRegistrarScope_registrar$,
        'updateShouldNotify': _SelectionRegistrarScope_updateShouldNotify$,
      },
      {},
    ),
    'SelectionContainerDelegate': m.ClassMirror(
      'SelectionContainerDelegate',
      {
        '#as': SelectionContainerDelegate_as$,
        '#is': SelectionContainerDelegate_is$,
        'hasSize': _SelectionContainerDelegate_hasSize$,
        'containerSize': _SelectionContainerDelegate_containerSize$,
        'getTransformFrom': _SelectionContainerDelegate_getTransformFrom$,
        'getTransformTo': _SelectionContainerDelegate_getTransformTo$,
      },
      {},
    ),
  },
);
Function SelectionContainer_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SelectionContainer;
Function SelectionContainer_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SelectionContainer;
Function _SelectionContainer_registrar$(
  m.Scope scope$,
  SelectionContainer target$,
) =>
    () {
      return target$.registrar;
    };
Function _SelectionContainer_child$(
  m.Scope scope$,
  SelectionContainer target$,
) =>
    () {
      return target$.child;
    };
Function _SelectionContainer_delegate$(
  m.Scope scope$,
  SelectionContainer target$,
) =>
    () {
      return target$.delegate;
    };
Function _SelectionContainer__$(m.Scope scope$) => ({
      Key? key,
      SelectionRegistrar? registrar,
      required SelectionContainerDelegate delegate,
      required Widget child,
    }) {
      return SelectionContainer(
        child: child,
        delegate: delegate,
        key: key,
        registrar: registrar,
      );
    };
Function _SelectionContainer_disabled_$(m.Scope scope$) =>
    SelectionContainer.disabled;
Function _SelectionContainer_maybeOf$(m.Scope scope$) =>
    SelectionContainer.maybeOf;
Function _SelectionContainer_createState$(
  m.Scope scope$,
  SelectionContainer target$,
) =>
    target$.createState;
Function SelectionRegistrarScope_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SelectionRegistrarScope;
Function SelectionRegistrarScope_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SelectionRegistrarScope;
Function _SelectionRegistrarScope_registrar$(
  m.Scope scope$,
  SelectionRegistrarScope target$,
) =>
    () {
      return target$.registrar;
    };
Function _SelectionRegistrarScope__$(m.Scope scope$) => ({
      Key? key,
      required SelectionRegistrar registrar,
      required Widget child,
    }) {
      return SelectionRegistrarScope(
        child: child,
        key: key,
        registrar: registrar,
      );
    };
Function _SelectionRegistrarScope_updateShouldNotify$(
  m.Scope scope$,
  SelectionRegistrarScope target$,
) =>
    target$.updateShouldNotify;
Function SelectionContainerDelegate_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SelectionContainerDelegate;
Function SelectionContainerDelegate_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SelectionContainerDelegate;
Function _SelectionContainerDelegate_hasSize$(
  m.Scope scope$,
  SelectionContainerDelegate target$,
) =>
    () {
      return target$.hasSize;
    };
Function _SelectionContainerDelegate_containerSize$(
  m.Scope scope$,
  SelectionContainerDelegate target$,
) =>
    () {
      return target$.containerSize;
    };
Function _SelectionContainerDelegate_getTransformFrom$(
  m.Scope scope$,
  SelectionContainerDelegate target$,
) =>
    target$.getTransformFrom;
Function _SelectionContainerDelegate_getTransformTo$(
  m.Scope scope$,
  SelectionContainerDelegate target$,
) =>
    target$.getTransformTo;
