// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/selection_container.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/selection_container.dart',
  {'SelectionContainer.maybeOf': _SelectionContainer_maybeOf$},
  {},
  {
    'SelectionContainer': m.ClassMirror(
      'SelectionContainer',
      {
        'registrar': _SelectionContainer_registrar$,
        'child': _SelectionContainer_child$,
        'delegate': _SelectionContainer_delegate$,
        'createState': _SelectionContainer_createState$,
      },
      {},
    ),
    'SelectionRegistrarScope': m.ClassMirror(
      'SelectionRegistrarScope',
      {
        'registrar': _SelectionRegistrarScope_registrar$,
        'updateShouldNotify': _SelectionRegistrarScope_updateShouldNotify$,
      },
      {},
    ),
    'SelectionContainerDelegate': m.ClassMirror(
      'SelectionContainerDelegate',
      {
        'hasSize': _SelectionContainerDelegate_hasSize$,
        'containerSize': _SelectionContainerDelegate_containerSize$,
        'getTransformFrom': _SelectionContainerDelegate_getTransformFrom$,
        'getTransformTo': _SelectionContainerDelegate_getTransformTo$,
      },
      {},
    ),
  },
);
SelectionRegistrar? _SelectionContainer_registrar$(SelectionContainer target) {
  return target.registrar;
}

Widget _SelectionContainer_child$(SelectionContainer target) {
  return target.child;
}

SelectionContainerDelegate? _SelectionContainer_delegate$(
    SelectionContainer target) {
  return target.delegate;
}

Function _SelectionContainer_maybeOf$(m.Scope scope) =>
    SelectionContainer.maybeOf;
Function _SelectionContainer_createState$(
  m.Scope scope,
  SelectionContainer target,
) =>
    target.createState;
SelectionRegistrar? _SelectionRegistrarScope_registrar$(
    SelectionRegistrarScope target) {
  return target.registrar;
}

Function _SelectionRegistrarScope_updateShouldNotify$(
  m.Scope scope,
  SelectionRegistrarScope target,
) =>
    target.updateShouldNotify;
bool _SelectionContainerDelegate_hasSize$(SelectionContainerDelegate target) {
  return target.hasSize;
}

Size _SelectionContainerDelegate_containerSize$(
    SelectionContainerDelegate target) {
  return target.containerSize;
}

Function _SelectionContainerDelegate_getTransformFrom$(
  m.Scope scope,
  SelectionContainerDelegate target,
) =>
    target.getTransformFrom;
Function _SelectionContainerDelegate_getTransformTo$(
  m.Scope scope,
  SelectionContainerDelegate target,
) =>
    target.getTransformTo;
