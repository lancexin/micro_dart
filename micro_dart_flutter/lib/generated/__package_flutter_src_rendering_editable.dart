// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/editable.dart';
import 'dart:collection';
import 'dart:math';
import 'dart:ui'
    show
        BoxHeightStyle,
        BoxWidthStyle,
        LineMetrics,
        PlaceholderAlignment,
        TextBox;
import 'package:characters/characters.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/semantics.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/rendering/custom_paint.dart';
import 'package:flutter/src/rendering/layer.dart';
import 'package:flutter/src/rendering/object.dart';
import 'package:flutter/src/rendering/paragraph.dart';
import 'package:flutter/src/rendering/viewport_offset.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/editable.dart',
  {},
  {},
  {
    'TextSelectionPoint': m.ClassMirror(
      'TextSelectionPoint',
      {
        'point': _TextSelectionPoint_point$,
        'direction': _TextSelectionPoint_direction$,
        'hashCode': _TextSelectionPoint_hashCode$,
        'toString': _TextSelectionPoint_toString$,
      },
      {},
    ),
    'VerticalCaretMovementRun': m.ClassMirror(
      'VerticalCaretMovementRun',
      {
        'isValid': _VerticalCaretMovementRun_isValid$,
        'current': _VerticalCaretMovementRun_current$,
        'moveNext': _VerticalCaretMovementRun_moveNext$,
        'movePrevious': _VerticalCaretMovementRun_movePrevious$,
        'moveByOffset': _VerticalCaretMovementRun_moveByOffset$,
      },
      {},
    ),
    'RenderEditable': m.ClassMirror(
      'RenderEditable',
      {
        'onCaretChanged': _RenderEditable_onCaretChanged$,
        'ignorePointer': _RenderEditable_ignorePointer$,
        'textSelectionDelegate': _RenderEditable_textSelectionDelegate$,
        'floatingCursorAddedMargin': _RenderEditable_floatingCursorAddedMargin$,
        'foregroundPainter': _RenderEditable_foregroundPainter$,
        'painter': _RenderEditable_painter$,
        'textHeightBehavior': _RenderEditable_textHeightBehavior$,
        'textWidthBasis': _RenderEditable_textWidthBasis$,
        'devicePixelRatio': _RenderEditable_devicePixelRatio$,
        'obscuringCharacter': _RenderEditable_obscuringCharacter$,
        'obscureText': _RenderEditable_obscureText$,
        'selectionHeightStyle': _RenderEditable_selectionHeightStyle$,
        'selectionWidthStyle': _RenderEditable_selectionWidthStyle$,
        'selectionStartInViewport': _RenderEditable_selectionStartInViewport$,
        'selectionEndInViewport': _RenderEditable_selectionEndInViewport$,
        'plainText': _RenderEditable_plainText$,
        'text': _RenderEditable_text$,
        'textAlign': _RenderEditable_textAlign$,
        'textDirection': _RenderEditable_textDirection$,
        'locale': _RenderEditable_locale$,
        'strutStyle': _RenderEditable_strutStyle$,
        'cursorColor': _RenderEditable_cursorColor$,
        'backgroundCursorColor': _RenderEditable_backgroundCursorColor$,
        'showCursor': _RenderEditable_showCursor$,
        'hasFocus': _RenderEditable_hasFocus$,
        'forceLine': _RenderEditable_forceLine$,
        'readOnly': _RenderEditable_readOnly$,
        'maxLines': _RenderEditable_maxLines$,
        'minLines': _RenderEditable_minLines$,
        'expands': _RenderEditable_expands$,
        'selectionColor': _RenderEditable_selectionColor$,
        'textScaleFactor': _RenderEditable_textScaleFactor$,
        'selection': _RenderEditable_selection$,
        'offset': _RenderEditable_offset$,
        'cursorWidth': _RenderEditable_cursorWidth$,
        'cursorHeight': _RenderEditable_cursorHeight$,
        'paintCursorAboveText': _RenderEditable_paintCursorAboveText$,
        'cursorOffset': _RenderEditable_cursorOffset$,
        'cursorRadius': _RenderEditable_cursorRadius$,
        'startHandleLayerLink': _RenderEditable_startHandleLayerLink$,
        'endHandleLayerLink': _RenderEditable_endHandleLayerLink$,
        'enableInteractiveSelection':
            _RenderEditable_enableInteractiveSelection$,
        'selectionEnabled': _RenderEditable_selectionEnabled$,
        'promptRectColor': _RenderEditable_promptRectColor$,
        'maxScrollExtent': _RenderEditable_maxScrollExtent$,
        'clipBehavior': _RenderEditable_clipBehavior$,
        'preferredLineHeight': _RenderEditable_preferredLineHeight$,
        'lastSecondaryTapDownPosition':
            _RenderEditable_lastSecondaryTapDownPosition$,
        'wordBoundaries': _RenderEditable_wordBoundaries$,
        'setupParentData': _RenderEditable_setupParentData$,
        'dispose': _RenderEditable_dispose$,
        'debugAssertLayoutUpToDate': _RenderEditable_debugAssertLayoutUpToDate$,
        'getLineAtOffset': _RenderEditable_getLineAtOffset$,
        'getWordBoundary': _RenderEditable_getWordBoundary$,
        'getTextPositionAbove': _RenderEditable_getTextPositionAbove$,
        'getTextPositionBelow': _RenderEditable_getTextPositionBelow$,
        'markNeedsPaint': _RenderEditable_markNeedsPaint$,
        'markNeedsTextLayout': _RenderEditable_markNeedsTextLayout$,
        'systemFontsDidChange': _RenderEditable_systemFontsDidChange$,
        'setPromptRectRange': _RenderEditable_setPromptRectRange$,
        'getBoxesForSelection': _RenderEditable_getBoxesForSelection$,
        'describeSemanticsConfiguration':
            _RenderEditable_describeSemanticsConfiguration$,
        'assembleSemanticsNode': _RenderEditable_assembleSemanticsNode$,
        'attach': _RenderEditable_attach$,
        'detach': _RenderEditable_detach$,
        'redepthChildren': _RenderEditable_redepthChildren$,
        'getEndpointsForSelection': _RenderEditable_getEndpointsForSelection$,
        'getRectForComposingRange': _RenderEditable_getRectForComposingRange$,
        'getPositionForPoint': _RenderEditable_getPositionForPoint$,
        'getLocalRectForCaret': _RenderEditable_getLocalRectForCaret$,
        'computeMinIntrinsicWidth': _RenderEditable_computeMinIntrinsicWidth$,
        'computeMaxIntrinsicWidth': _RenderEditable_computeMaxIntrinsicWidth$,
        'computeMinIntrinsicHeight': _RenderEditable_computeMinIntrinsicHeight$,
        'computeMaxIntrinsicHeight': _RenderEditable_computeMaxIntrinsicHeight$,
        'computeDistanceToActualBaseline':
            _RenderEditable_computeDistanceToActualBaseline$,
        'hitTestSelf': _RenderEditable_hitTestSelf$,
        'hitTestChildren': _RenderEditable_hitTestChildren$,
        'handleEvent': _RenderEditable_handleEvent$,
        'handleSecondaryTapDown': _RenderEditable_handleSecondaryTapDown$,
        'handleTapDown': _RenderEditable_handleTapDown$,
        'handleTap': _RenderEditable_handleTap$,
        'handleDoubleTap': _RenderEditable_handleDoubleTap$,
        'handleLongPress': _RenderEditable_handleLongPress$,
        'selectPosition': _RenderEditable_selectPosition$,
        'selectPositionAt': _RenderEditable_selectPositionAt$,
        'selectWord': _RenderEditable_selectWord$,
        'selectWordsInRange': _RenderEditable_selectWordsInRange$,
        'selectWordEdge': _RenderEditable_selectWordEdge$,
        'computeDryLayout': _RenderEditable_computeDryLayout$,
        'performLayout': _RenderEditable_performLayout$,
        'calculateBoundedFloatingCursorOffset':
            _RenderEditable_calculateBoundedFloatingCursorOffset$,
        'setFloatingCursor': _RenderEditable_setFloatingCursor$,
        'startVerticalCaretMovement':
            _RenderEditable_startVerticalCaretMovement$,
        'paint': _RenderEditable_paint$,
        'describeApproximatePaintClip':
            _RenderEditable_describeApproximatePaintClip$,
        'debugFillProperties': _RenderEditable_debugFillProperties$,
        'debugDescribeChildren': _RenderEditable_debugDescribeChildren$,
      },
      {
        'onCaretChanged': _RenderEditable_onCaretChanged_set$,
        'ignorePointer': _RenderEditable_ignorePointer_set$,
        'textSelectionDelegate': _RenderEditable_textSelectionDelegate_set$,
        'floatingCursorAddedMargin':
            _RenderEditable_floatingCursorAddedMargin_set$,
        'foregroundPainter': _RenderEditable_foregroundPainter_set$,
        'painter': _RenderEditable_painter_set$,
        'textHeightBehavior': _RenderEditable_textHeightBehavior_set$,
        'textWidthBasis': _RenderEditable_textWidthBasis_set$,
        'devicePixelRatio': _RenderEditable_devicePixelRatio_set$,
        'obscuringCharacter': _RenderEditable_obscuringCharacter_set$,
        'obscureText': _RenderEditable_obscureText_set$,
        'selectionHeightStyle': _RenderEditable_selectionHeightStyle_set$,
        'selectionWidthStyle': _RenderEditable_selectionWidthStyle_set$,
        'text': _RenderEditable_text_set$,
        'textAlign': _RenderEditable_textAlign_set$,
        'textDirection': _RenderEditable_textDirection_set$,
        'locale': _RenderEditable_locale_set$,
        'strutStyle': _RenderEditable_strutStyle_set$,
        'cursorColor': _RenderEditable_cursorColor_set$,
        'backgroundCursorColor': _RenderEditable_backgroundCursorColor_set$,
        'showCursor': _RenderEditable_showCursor_set$,
        'hasFocus': _RenderEditable_hasFocus_set$,
        'forceLine': _RenderEditable_forceLine_set$,
        'readOnly': _RenderEditable_readOnly_set$,
        'maxLines': _RenderEditable_maxLines_set$,
        'minLines': _RenderEditable_minLines_set$,
        'expands': _RenderEditable_expands_set$,
        'selectionColor': _RenderEditable_selectionColor_set$,
        'textScaleFactor': _RenderEditable_textScaleFactor_set$,
        'selection': _RenderEditable_selection_set$,
        'offset': _RenderEditable_offset_set$,
        'cursorWidth': _RenderEditable_cursorWidth_set$,
        'cursorHeight': _RenderEditable_cursorHeight_set$,
        'paintCursorAboveText': _RenderEditable_paintCursorAboveText_set$,
        'cursorOffset': _RenderEditable_cursorOffset_set$,
        'cursorRadius': _RenderEditable_cursorRadius_set$,
        'startHandleLayerLink': _RenderEditable_startHandleLayerLink_set$,
        'endHandleLayerLink': _RenderEditable_endHandleLayerLink_set$,
        'enableInteractiveSelection':
            _RenderEditable_enableInteractiveSelection_set$,
        'promptRectColor': _RenderEditable_promptRectColor_set$,
        'clipBehavior': _RenderEditable_clipBehavior_set$,
      },
    ),
    'RenderEditablePainter': m.ClassMirror(
      'RenderEditablePainter',
      {
        'shouldRepaint': _RenderEditablePainter_shouldRepaint$,
        'paint': _RenderEditablePainter_paint$,
      },
      {},
    ),
  },
);
Offset _TextSelectionPoint_point$(TextSelectionPoint target) {
  return target.point;
}

TextDirection? _TextSelectionPoint_direction$(TextSelectionPoint target) {
  return target.direction;
}

int _TextSelectionPoint_hashCode$(TextSelectionPoint target) {
  return target.hashCode;
}

Function _TextSelectionPoint_toString$(
  m.Scope scope,
  TextSelectionPoint target,
) =>
    target.toString;
bool _VerticalCaretMovementRun_isValid$(VerticalCaretMovementRun target) {
  return target.isValid;
}

TextPosition _VerticalCaretMovementRun_current$(
    VerticalCaretMovementRun target) {
  return target.current;
}

Function _VerticalCaretMovementRun_moveNext$(
  m.Scope scope,
  VerticalCaretMovementRun target,
) =>
    target.moveNext;
Function _VerticalCaretMovementRun_movePrevious$(
  m.Scope scope,
  VerticalCaretMovementRun target,
) =>
    target.movePrevious;
Function _VerticalCaretMovementRun_moveByOffset$(
  m.Scope scope,
  VerticalCaretMovementRun target,
) =>
    target.moveByOffset;
void Function(Rect)? _RenderEditable_onCaretChanged$(RenderEditable target) {
  return target.onCaretChanged;
}

Function _RenderEditable_onCaretChanged_set$(
  m.Scope scope,
  RenderEditable target,
) =>
    (m.FunctionPointer? _onCaretChanged) {
      void _onCaretChangedProxy(Rect _onCaretChanged_caretRect) =>
          scope.engine.callFunctionPointer(
            scope,
            _onCaretChanged!,
            [_onCaretChanged_caretRect],
            {},
          );
      target.onCaretChanged =
          (_onCaretChanged == null ? null : _onCaretChangedProxy);
    };
bool _RenderEditable_ignorePointer$(RenderEditable target) {
  return target.ignorePointer;
}

void _RenderEditable_ignorePointer_set$(
  RenderEditable target,
  bool other,
) {
  target.ignorePointer = other;
}

TextSelectionDelegate _RenderEditable_textSelectionDelegate$(
    RenderEditable target) {
  return target.textSelectionDelegate;
}

void _RenderEditable_textSelectionDelegate_set$(
  RenderEditable target,
  TextSelectionDelegate other,
) {
  target.textSelectionDelegate = other;
}

EdgeInsets _RenderEditable_floatingCursorAddedMargin$(RenderEditable target) {
  return target.floatingCursorAddedMargin;
}

void _RenderEditable_floatingCursorAddedMargin_set$(
  RenderEditable target,
  EdgeInsets other,
) {
  target.floatingCursorAddedMargin = other;
}

RenderEditablePainter? _RenderEditable_foregroundPainter$(
    RenderEditable target) {
  return target.foregroundPainter;
}

void _RenderEditable_foregroundPainter_set$(
  RenderEditable target,
  RenderEditablePainter? other,
) {
  target.foregroundPainter = other;
}

RenderEditablePainter? _RenderEditable_painter$(RenderEditable target) {
  return target.painter;
}

void _RenderEditable_painter_set$(
  RenderEditable target,
  RenderEditablePainter? other,
) {
  target.painter = other;
}

TextHeightBehavior? _RenderEditable_textHeightBehavior$(RenderEditable target) {
  return target.textHeightBehavior;
}

void _RenderEditable_textHeightBehavior_set$(
  RenderEditable target,
  TextHeightBehavior? other,
) {
  target.textHeightBehavior = other;
}

TextWidthBasis _RenderEditable_textWidthBasis$(RenderEditable target) {
  return target.textWidthBasis;
}

void _RenderEditable_textWidthBasis_set$(
  RenderEditable target,
  TextWidthBasis other,
) {
  target.textWidthBasis = other;
}

double _RenderEditable_devicePixelRatio$(RenderEditable target) {
  return target.devicePixelRatio;
}

void _RenderEditable_devicePixelRatio_set$(
  RenderEditable target,
  double other,
) {
  target.devicePixelRatio = other;
}

String _RenderEditable_obscuringCharacter$(RenderEditable target) {
  return target.obscuringCharacter;
}

void _RenderEditable_obscuringCharacter_set$(
  RenderEditable target,
  String other,
) {
  target.obscuringCharacter = other;
}

bool _RenderEditable_obscureText$(RenderEditable target) {
  return target.obscureText;
}

void _RenderEditable_obscureText_set$(
  RenderEditable target,
  bool other,
) {
  target.obscureText = other;
}

BoxHeightStyle _RenderEditable_selectionHeightStyle$(RenderEditable target) {
  return target.selectionHeightStyle;
}

void _RenderEditable_selectionHeightStyle_set$(
  RenderEditable target,
  BoxHeightStyle other,
) {
  target.selectionHeightStyle = other;
}

BoxWidthStyle _RenderEditable_selectionWidthStyle$(RenderEditable target) {
  return target.selectionWidthStyle;
}

void _RenderEditable_selectionWidthStyle_set$(
  RenderEditable target,
  BoxWidthStyle other,
) {
  target.selectionWidthStyle = other;
}

ValueListenable<bool> _RenderEditable_selectionStartInViewport$(
    RenderEditable target) {
  return target.selectionStartInViewport;
}

ValueListenable<bool> _RenderEditable_selectionEndInViewport$(
    RenderEditable target) {
  return target.selectionEndInViewport;
}

String _RenderEditable_plainText$(RenderEditable target) {
  return target.plainText;
}

InlineSpan? _RenderEditable_text$(RenderEditable target) {
  return target.text;
}

void _RenderEditable_text_set$(
  RenderEditable target,
  InlineSpan? other,
) {
  target.text = other;
}

TextAlign _RenderEditable_textAlign$(RenderEditable target) {
  return target.textAlign;
}

void _RenderEditable_textAlign_set$(
  RenderEditable target,
  TextAlign other,
) {
  target.textAlign = other;
}

TextDirection _RenderEditable_textDirection$(RenderEditable target) {
  return target.textDirection;
}

void _RenderEditable_textDirection_set$(
  RenderEditable target,
  TextDirection other,
) {
  target.textDirection = other;
}

Locale? _RenderEditable_locale$(RenderEditable target) {
  return target.locale;
}

void _RenderEditable_locale_set$(
  RenderEditable target,
  Locale? other,
) {
  target.locale = other;
}

StrutStyle? _RenderEditable_strutStyle$(RenderEditable target) {
  return target.strutStyle;
}

void _RenderEditable_strutStyle_set$(
  RenderEditable target,
  StrutStyle? other,
) {
  target.strutStyle = other;
}

Color? _RenderEditable_cursorColor$(RenderEditable target) {
  return target.cursorColor;
}

void _RenderEditable_cursorColor_set$(
  RenderEditable target,
  Color? other,
) {
  target.cursorColor = other;
}

Color? _RenderEditable_backgroundCursorColor$(RenderEditable target) {
  return target.backgroundCursorColor;
}

void _RenderEditable_backgroundCursorColor_set$(
  RenderEditable target,
  Color? other,
) {
  target.backgroundCursorColor = other;
}

ValueNotifier<bool> _RenderEditable_showCursor$(RenderEditable target) {
  return target.showCursor;
}

void _RenderEditable_showCursor_set$(
  RenderEditable target,
  ValueNotifier<bool> other,
) {
  target.showCursor = other;
}

bool _RenderEditable_hasFocus$(RenderEditable target) {
  return target.hasFocus;
}

void _RenderEditable_hasFocus_set$(
  RenderEditable target,
  bool other,
) {
  target.hasFocus = other;
}

bool _RenderEditable_forceLine$(RenderEditable target) {
  return target.forceLine;
}

void _RenderEditable_forceLine_set$(
  RenderEditable target,
  bool other,
) {
  target.forceLine = other;
}

bool _RenderEditable_readOnly$(RenderEditable target) {
  return target.readOnly;
}

void _RenderEditable_readOnly_set$(
  RenderEditable target,
  bool other,
) {
  target.readOnly = other;
}

int? _RenderEditable_maxLines$(RenderEditable target) {
  return target.maxLines;
}

void _RenderEditable_maxLines_set$(
  RenderEditable target,
  int? other,
) {
  target.maxLines = other;
}

int? _RenderEditable_minLines$(RenderEditable target) {
  return target.minLines;
}

void _RenderEditable_minLines_set$(
  RenderEditable target,
  int? other,
) {
  target.minLines = other;
}

bool _RenderEditable_expands$(RenderEditable target) {
  return target.expands;
}

void _RenderEditable_expands_set$(
  RenderEditable target,
  bool other,
) {
  target.expands = other;
}

Color? _RenderEditable_selectionColor$(RenderEditable target) {
  return target.selectionColor;
}

void _RenderEditable_selectionColor_set$(
  RenderEditable target,
  Color? other,
) {
  target.selectionColor = other;
}

double _RenderEditable_textScaleFactor$(RenderEditable target) {
  return target.textScaleFactor;
}

void _RenderEditable_textScaleFactor_set$(
  RenderEditable target,
  double other,
) {
  target.textScaleFactor = other;
}

TextSelection? _RenderEditable_selection$(RenderEditable target) {
  return target.selection;
}

void _RenderEditable_selection_set$(
  RenderEditable target,
  TextSelection? other,
) {
  target.selection = other;
}

ViewportOffset _RenderEditable_offset$(RenderEditable target) {
  return target.offset;
}

void _RenderEditable_offset_set$(
  RenderEditable target,
  ViewportOffset other,
) {
  target.offset = other;
}

double _RenderEditable_cursorWidth$(RenderEditable target) {
  return target.cursorWidth;
}

void _RenderEditable_cursorWidth_set$(
  RenderEditable target,
  double other,
) {
  target.cursorWidth = other;
}

double _RenderEditable_cursorHeight$(RenderEditable target) {
  return target.cursorHeight;
}

void _RenderEditable_cursorHeight_set$(
  RenderEditable target,
  double? other,
) {
  target.cursorHeight = other;
}

bool _RenderEditable_paintCursorAboveText$(RenderEditable target) {
  return target.paintCursorAboveText;
}

void _RenderEditable_paintCursorAboveText_set$(
  RenderEditable target,
  bool other,
) {
  target.paintCursorAboveText = other;
}

Offset _RenderEditable_cursorOffset$(RenderEditable target) {
  return target.cursorOffset;
}

void _RenderEditable_cursorOffset_set$(
  RenderEditable target,
  Offset other,
) {
  target.cursorOffset = other;
}

Radius? _RenderEditable_cursorRadius$(RenderEditable target) {
  return target.cursorRadius;
}

void _RenderEditable_cursorRadius_set$(
  RenderEditable target,
  Radius? other,
) {
  target.cursorRadius = other;
}

LayerLink _RenderEditable_startHandleLayerLink$(RenderEditable target) {
  return target.startHandleLayerLink;
}

void _RenderEditable_startHandleLayerLink_set$(
  RenderEditable target,
  LayerLink other,
) {
  target.startHandleLayerLink = other;
}

LayerLink _RenderEditable_endHandleLayerLink$(RenderEditable target) {
  return target.endHandleLayerLink;
}

void _RenderEditable_endHandleLayerLink_set$(
  RenderEditable target,
  LayerLink other,
) {
  target.endHandleLayerLink = other;
}

bool? _RenderEditable_enableInteractiveSelection$(RenderEditable target) {
  return target.enableInteractiveSelection;
}

void _RenderEditable_enableInteractiveSelection_set$(
  RenderEditable target,
  bool? other,
) {
  target.enableInteractiveSelection = other;
}

bool _RenderEditable_selectionEnabled$(RenderEditable target) {
  return target.selectionEnabled;
}

Color? _RenderEditable_promptRectColor$(RenderEditable target) {
  return target.promptRectColor;
}

void _RenderEditable_promptRectColor_set$(
  RenderEditable target,
  Color? other,
) {
  target.promptRectColor = other;
}

double _RenderEditable_maxScrollExtent$(RenderEditable target) {
  return target.maxScrollExtent;
}

Clip _RenderEditable_clipBehavior$(RenderEditable target) {
  return target.clipBehavior;
}

void _RenderEditable_clipBehavior_set$(
  RenderEditable target,
  Clip other,
) {
  target.clipBehavior = other;
}

double _RenderEditable_preferredLineHeight$(RenderEditable target) {
  return target.preferredLineHeight;
}

Offset? _RenderEditable_lastSecondaryTapDownPosition$(RenderEditable target) {
  return target.lastSecondaryTapDownPosition;
}

WordBoundary _RenderEditable_wordBoundaries$(RenderEditable target) {
  return target.wordBoundaries;
}

Function _RenderEditable_setupParentData$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.setupParentData;
Function _RenderEditable_dispose$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.dispose;
Function _RenderEditable_debugAssertLayoutUpToDate$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.debugAssertLayoutUpToDate;
Function _RenderEditable_getLineAtOffset$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.getLineAtOffset;
Function _RenderEditable_getWordBoundary$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.getWordBoundary;
Function _RenderEditable_getTextPositionAbove$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.getTextPositionAbove;
Function _RenderEditable_getTextPositionBelow$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.getTextPositionBelow;
Function _RenderEditable_markNeedsPaint$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.markNeedsPaint;
Function _RenderEditable_markNeedsTextLayout$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.markNeedsTextLayout;
Function _RenderEditable_systemFontsDidChange$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.systemFontsDidChange;
Function _RenderEditable_setPromptRectRange$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.setPromptRectRange;
Function _RenderEditable_getBoxesForSelection$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.getBoxesForSelection;
Function _RenderEditable_describeSemanticsConfiguration$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.describeSemanticsConfiguration;
Function _RenderEditable_assembleSemanticsNode$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.assembleSemanticsNode;
Function _RenderEditable_attach$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.attach;
Function _RenderEditable_detach$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.detach;
Function _RenderEditable_redepthChildren$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.redepthChildren;
Function _RenderEditable_getEndpointsForSelection$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.getEndpointsForSelection;
Function _RenderEditable_getRectForComposingRange$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.getRectForComposingRange;
Function _RenderEditable_getPositionForPoint$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.getPositionForPoint;
Function _RenderEditable_getLocalRectForCaret$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.getLocalRectForCaret;
Function _RenderEditable_computeMinIntrinsicWidth$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.computeMinIntrinsicWidth;
Function _RenderEditable_computeMaxIntrinsicWidth$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.computeMaxIntrinsicWidth;
Function _RenderEditable_computeMinIntrinsicHeight$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.computeMinIntrinsicHeight;
Function _RenderEditable_computeMaxIntrinsicHeight$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.computeMaxIntrinsicHeight;
Function _RenderEditable_computeDistanceToActualBaseline$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.computeDistanceToActualBaseline;
Function _RenderEditable_hitTestSelf$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.hitTestSelf;
Function _RenderEditable_hitTestChildren$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.hitTestChildren;
Function _RenderEditable_handleEvent$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.handleEvent;
Function _RenderEditable_handleSecondaryTapDown$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.handleSecondaryTapDown;
Function _RenderEditable_handleTapDown$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.handleTapDown;
Function _RenderEditable_handleTap$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.handleTap;
Function _RenderEditable_handleDoubleTap$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.handleDoubleTap;
Function _RenderEditable_handleLongPress$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.handleLongPress;
Function _RenderEditable_selectPosition$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.selectPosition;
Function _RenderEditable_selectPositionAt$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.selectPositionAt;
Function _RenderEditable_selectWord$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.selectWord;
Function _RenderEditable_selectWordsInRange$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.selectWordsInRange;
Function _RenderEditable_selectWordEdge$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.selectWordEdge;
Function _RenderEditable_computeDryLayout$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.computeDryLayout;
Function _RenderEditable_performLayout$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.performLayout;
Function _RenderEditable_calculateBoundedFloatingCursorOffset$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.calculateBoundedFloatingCursorOffset;
Function _RenderEditable_setFloatingCursor$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.setFloatingCursor;
Function _RenderEditable_startVerticalCaretMovement$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.startVerticalCaretMovement;
Function _RenderEditable_paint$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.paint;
Function _RenderEditable_describeApproximatePaintClip$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.describeApproximatePaintClip;
Function _RenderEditable_debugFillProperties$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.debugFillProperties;
Function _RenderEditable_debugDescribeChildren$(
  m.Scope scope,
  RenderEditable target,
) =>
    target.debugDescribeChildren;
Function _RenderEditablePainter_shouldRepaint$(
  m.Scope scope,
  RenderEditablePainter target,
) =>
    target.shouldRepaint;
Function _RenderEditablePainter_paint$(
  m.Scope scope,
  RenderEditablePainter target,
) =>
    target.paint;
