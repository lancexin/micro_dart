// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/gestures/gesture_settings.dart';
import 'dart:ui';
import 'package:flutter/foundation.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/gestures/gesture_settings.dart',
  {
    'DeviceGestureSettings.': _DeviceGestureSettings__$,
    'DeviceGestureSettings.fromView': _DeviceGestureSettings_fromView_$,
  },
  {},
  {
    'DeviceGestureSettings': m.ClassMirror(
      'DeviceGestureSettings',
      {
        '#as': DeviceGestureSettings_as$,
        '#is': DeviceGestureSettings_is$,
        'touchSlop': _DeviceGestureSettings_touchSlop$,
        'panSlop': _DeviceGestureSettings_panSlop$,
        'hashCode': _DeviceGestureSettings_hashCode$,
        '==': _DeviceGestureSettings_eq$$,
        'toString': _DeviceGestureSettings_toString$,
      },
      {},
    )
  },
);
Function DeviceGestureSettings_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DeviceGestureSettings;
Function DeviceGestureSettings_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DeviceGestureSettings;
Function _DeviceGestureSettings_touchSlop$(
  m.Scope scope$,
  DeviceGestureSettings target$,
) =>
    () {
      return target$.touchSlop;
    };
Function _DeviceGestureSettings_panSlop$(
  m.Scope scope$,
  DeviceGestureSettings target$,
) =>
    () {
      return target$.panSlop;
    };
Function _DeviceGestureSettings_hashCode$(
  m.Scope scope$,
  DeviceGestureSettings target$,
) =>
    () {
      return target$.hashCode;
    };
Function _DeviceGestureSettings__$(m.Scope scope$) => ({double? touchSlop}) {
      return DeviceGestureSettings(touchSlop: touchSlop);
    };
Function _DeviceGestureSettings_fromView_$(m.Scope scope$) =>
    DeviceGestureSettings.fromView;
Function _DeviceGestureSettings_eq$$(
  m.Scope scope$,
  DeviceGestureSettings target$,
) =>
    (Object other$) => target$ == other$;
Function _DeviceGestureSettings_toString$(
  m.Scope scope$,
  DeviceGestureSettings target$,
) =>
    target$.toString;
