// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/text_span.dart';
import 'dart:ui'
    show
        Locale,
        LocaleStringAttribute,
        ParagraphBuilder,
        SpellOutStringAttribute,
        StringAttribute;
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/painting/inline_span.dart';
import 'package:flutter/src/painting/text_painter.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/text_span.dart',
  {},
  {},
  {
    'TextSpan': m.ClassMirror(
      'TextSpan',
      {
        'text': _TextSpan_text$,
        'children': _TextSpan_children$,
        'recognizer': _TextSpan_recognizer$,
        'mouseCursor': _TextSpan_mouseCursor$,
        'onEnter': _TextSpan_onEnter$,
        'onExit': _TextSpan_onExit$,
        'semanticsLabel': _TextSpan_semanticsLabel$,
        'locale': _TextSpan_locale$,
        'spellOut': _TextSpan_spellOut$,
        'cursor': _TextSpan_cursor$,
        'validForMouseTracker': _TextSpan_validForMouseTracker$,
        'hashCode': _TextSpan_hashCode$,
        'handleEvent': _TextSpan_handleEvent$,
        'build': _TextSpan_build$,
        'getSpanForPositionVisitor': _TextSpan_getSpanForPositionVisitor$,
        'computeToPlainText': _TextSpan_computeToPlainText$,
        'computeSemanticsInformation': _TextSpan_computeSemanticsInformation$,
        'codeUnitAtVisitor': _TextSpan_codeUnitAtVisitor$,
        'describeSemantics': _TextSpan_describeSemantics$,
        'debugAssertIsValid': _TextSpan_debugAssertIsValid$,
        'compareTo': _TextSpan_compareTo$,
        'toStringShort': _TextSpan_toStringShort$,
        'debugFillProperties': _TextSpan_debugFillProperties$,
        'debugDescribeChildren': _TextSpan_debugDescribeChildren$,
      },
      {},
    )
  },
);
String? _TextSpan_text$(TextSpan target) {
  return target.text;
}

List<InlineSpan>? _TextSpan_children$(TextSpan target) {
  return target.children;
}

GestureRecognizer? _TextSpan_recognizer$(TextSpan target) {
  return target.recognizer;
}

MouseCursor _TextSpan_mouseCursor$(TextSpan target) {
  return target.mouseCursor;
}

void Function(PointerEnterEvent)? _TextSpan_onEnter$(TextSpan target) {
  return target.onEnter;
}

void Function(PointerExitEvent)? _TextSpan_onExit$(TextSpan target) {
  return target.onExit;
}

String? _TextSpan_semanticsLabel$(TextSpan target) {
  return target.semanticsLabel;
}

Locale? _TextSpan_locale$(TextSpan target) {
  return target.locale;
}

bool? _TextSpan_spellOut$(TextSpan target) {
  return target.spellOut;
}

MouseCursor _TextSpan_cursor$(TextSpan target) {
  return target.cursor;
}

bool _TextSpan_validForMouseTracker$(TextSpan target) {
  return target.validForMouseTracker;
}

int _TextSpan_hashCode$(TextSpan target) {
  return target.hashCode;
}

Function _TextSpan_handleEvent$(
  m.Scope scope,
  TextSpan target,
) =>
    target.handleEvent;
Function _TextSpan_build$(
  m.Scope scope,
  TextSpan target,
) =>
    target.build;
Function _TextSpan_getSpanForPositionVisitor$(
  m.Scope scope,
  TextSpan target,
) =>
    target.getSpanForPositionVisitor;
Function _TextSpan_computeToPlainText$(
  m.Scope scope,
  TextSpan target,
) =>
    target.computeToPlainText;
Function _TextSpan_computeSemanticsInformation$(
  m.Scope scope,
  TextSpan target,
) =>
    target.computeSemanticsInformation;
Function _TextSpan_codeUnitAtVisitor$(
  m.Scope scope,
  TextSpan target,
) =>
    target.codeUnitAtVisitor;
Function _TextSpan_describeSemantics$(
  m.Scope scope,
  TextSpan target,
) =>
    target.describeSemantics;
Function _TextSpan_debugAssertIsValid$(
  m.Scope scope,
  TextSpan target,
) =>
    target.debugAssertIsValid;
Function _TextSpan_compareTo$(
  m.Scope scope,
  TextSpan target,
) =>
    target.compareTo;
Function _TextSpan_toStringShort$(
  m.Scope scope,
  TextSpan target,
) =>
    target.toStringShort;
Function _TextSpan_debugFillProperties$(
  m.Scope scope,
  TextSpan target,
) =>
    target.debugFillProperties;
Function _TextSpan_debugDescribeChildren$(
  m.Scope scope,
  TextSpan target,
) =>
    target.debugDescribeChildren;
