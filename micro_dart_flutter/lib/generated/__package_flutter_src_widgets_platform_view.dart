// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/platform_view.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/focus_scope.dart';
import 'package:flutter/src/widgets/framework.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/platform_view.dart',
  {
    'AndroidView.': _AndroidView__$,
    'UiKitView.': _UiKitView__$,
    'HtmlElementView.': _HtmlElementView__$,
    'PlatformViewLink.': _PlatformViewLink__$,
    'PlatformViewSurface.': _PlatformViewSurface__$,
    'AndroidViewSurface.': _AndroidViewSurface__$,
  },
  {},
  {
    'AndroidView': m.ClassMirror(
      'AndroidView',
      {
        '#as': AndroidView_as$,
        '#is': AndroidView_is$,
        'viewType': _AndroidView_viewType$,
        'onPlatformViewCreated': _AndroidView_onPlatformViewCreated$,
        'hitTestBehavior': _AndroidView_hitTestBehavior$,
        'layoutDirection': _AndroidView_layoutDirection$,
        'gestureRecognizers': _AndroidView_gestureRecognizers$,
        'creationParams': _AndroidView_creationParams$,
        'creationParamsCodec': _AndroidView_creationParamsCodec$,
        'clipBehavior': _AndroidView_clipBehavior$,
        'createState': _AndroidView_createState$,
      },
      {},
    ),
    'UiKitView': m.ClassMirror(
      'UiKitView',
      {
        '#as': UiKitView_as$,
        '#is': UiKitView_is$,
        'viewType': _UiKitView_viewType$,
        'onPlatformViewCreated': _UiKitView_onPlatformViewCreated$,
        'hitTestBehavior': _UiKitView_hitTestBehavior$,
        'layoutDirection': _UiKitView_layoutDirection$,
        'creationParams': _UiKitView_creationParams$,
        'creationParamsCodec': _UiKitView_creationParamsCodec$,
        'gestureRecognizers': _UiKitView_gestureRecognizers$,
        'createState': _UiKitView_createState$,
      },
      {},
    ),
    'HtmlElementView': m.ClassMirror(
      'HtmlElementView',
      {
        '#as': HtmlElementView_as$,
        '#is': HtmlElementView_is$,
        'viewType': _HtmlElementView_viewType$,
        'onPlatformViewCreated': _HtmlElementView_onPlatformViewCreated$,
        'build': _HtmlElementView_build$,
      },
      {},
    ),
    'PlatformViewCreationParams': m.ClassMirror(
      'PlatformViewCreationParams',
      {
        '#as': PlatformViewCreationParams_as$,
        '#is': PlatformViewCreationParams_is$,
        'id': _PlatformViewCreationParams_id$,
        'viewType': _PlatformViewCreationParams_viewType$,
        'onPlatformViewCreated':
            _PlatformViewCreationParams_onPlatformViewCreated$,
        'onFocusChanged': _PlatformViewCreationParams_onFocusChanged$,
      },
      {},
    ),
    'PlatformViewLink': m.ClassMirror(
      'PlatformViewLink',
      {
        '#as': PlatformViewLink_as$,
        '#is': PlatformViewLink_is$,
        'viewType': _PlatformViewLink_viewType$,
        'createState': _PlatformViewLink_createState$,
      },
      {},
    ),
    'PlatformViewSurface': m.ClassMirror(
      'PlatformViewSurface',
      {
        '#as': PlatformViewSurface_as$,
        '#is': PlatformViewSurface_is$,
        'controller': _PlatformViewSurface_controller$,
        'gestureRecognizers': _PlatformViewSurface_gestureRecognizers$,
        'hitTestBehavior': _PlatformViewSurface_hitTestBehavior$,
        'createRenderObject': _PlatformViewSurface_createRenderObject$,
        'updateRenderObject': _PlatformViewSurface_updateRenderObject$,
      },
      {},
    ),
    'AndroidViewSurface': m.ClassMirror(
      'AndroidViewSurface',
      {
        '#as': AndroidViewSurface_as$,
        '#is': AndroidViewSurface_is$,
        'controller': _AndroidViewSurface_controller$,
        'gestureRecognizers': _AndroidViewSurface_gestureRecognizers$,
        'hitTestBehavior': _AndroidViewSurface_hitTestBehavior$,
        'createState': _AndroidViewSurface_createState$,
      },
      {},
    ),
  },
);
Function AndroidView_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AndroidView;
Function AndroidView_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AndroidView;
Function _AndroidView_viewType$(
  m.Scope scope$,
  AndroidView target$,
) =>
    () {
      return target$.viewType;
    };
Function _AndroidView_onPlatformViewCreated$(
  m.Scope scope$,
  AndroidView target$,
) =>
    () {
      return target$.onPlatformViewCreated;
    };
Function _AndroidView_hitTestBehavior$(
  m.Scope scope$,
  AndroidView target$,
) =>
    () {
      return target$.hitTestBehavior;
    };
Function _AndroidView_layoutDirection$(
  m.Scope scope$,
  AndroidView target$,
) =>
    () {
      return target$.layoutDirection;
    };
Function _AndroidView_gestureRecognizers$(
  m.Scope scope$,
  AndroidView target$,
) =>
    () {
      return target$.gestureRecognizers;
    };
Function _AndroidView_creationParams$(
  m.Scope scope$,
  AndroidView target$,
) =>
    () {
      return target$.creationParams;
    };
Function _AndroidView_creationParamsCodec$(
  m.Scope scope$,
  AndroidView target$,
) =>
    () {
      return target$.creationParamsCodec;
    };
Function _AndroidView_clipBehavior$(
  m.Scope scope$,
  AndroidView target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _AndroidView__$(m.Scope scope$) => ({
      Key? key,
      required String viewType,
      m.FunctionPointer? onPlatformViewCreated,
      PlatformViewHitTestBehavior? hitTestBehavior,
      TextDirection? layoutDirection,
      Set? gestureRecognizers,
      dynamic? creationParams,
      MessageCodec<dynamic>? creationParamsCodec,
      Clip? clipBehavior,
    }) {
      void onPlatformViewCreatedProxy(int onPlatformViewCreated_id$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onPlatformViewCreated!,
            [onPlatformViewCreated_id$],
            {},
          );
      return AndroidView(
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        creationParams: creationParams,
        creationParamsCodec: creationParamsCodec,
        gestureRecognizers:
            gestureRecognizers == null ? null : Set.from(gestureRecognizers),
        hitTestBehavior: hitTestBehavior ?? PlatformViewHitTestBehavior.opaque,
        key: key,
        layoutDirection: layoutDirection,
        onPlatformViewCreated:
            onPlatformViewCreated == null ? null : onPlatformViewCreatedProxy,
        viewType: viewType,
      );
    };
Function _AndroidView_createState$(
  m.Scope scope$,
  AndroidView target$,
) =>
    target$.createState;
Function UiKitView_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as UiKitView;
Function UiKitView_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is UiKitView;
Function _UiKitView_viewType$(
  m.Scope scope$,
  UiKitView target$,
) =>
    () {
      return target$.viewType;
    };
Function _UiKitView_onPlatformViewCreated$(
  m.Scope scope$,
  UiKitView target$,
) =>
    () {
      return target$.onPlatformViewCreated;
    };
Function _UiKitView_hitTestBehavior$(
  m.Scope scope$,
  UiKitView target$,
) =>
    () {
      return target$.hitTestBehavior;
    };
Function _UiKitView_layoutDirection$(
  m.Scope scope$,
  UiKitView target$,
) =>
    () {
      return target$.layoutDirection;
    };
Function _UiKitView_creationParams$(
  m.Scope scope$,
  UiKitView target$,
) =>
    () {
      return target$.creationParams;
    };
Function _UiKitView_creationParamsCodec$(
  m.Scope scope$,
  UiKitView target$,
) =>
    () {
      return target$.creationParamsCodec;
    };
Function _UiKitView_gestureRecognizers$(
  m.Scope scope$,
  UiKitView target$,
) =>
    () {
      return target$.gestureRecognizers;
    };
Function _UiKitView__$(m.Scope scope$) => ({
      Key? key,
      required String viewType,
      m.FunctionPointer? onPlatformViewCreated,
      PlatformViewHitTestBehavior? hitTestBehavior,
      TextDirection? layoutDirection,
      dynamic? creationParams,
      MessageCodec<dynamic>? creationParamsCodec,
      Set? gestureRecognizers,
    }) {
      void onPlatformViewCreatedProxy(int onPlatformViewCreated_id$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onPlatformViewCreated!,
            [onPlatformViewCreated_id$],
            {},
          );
      return UiKitView(
        creationParams: creationParams,
        creationParamsCodec: creationParamsCodec,
        gestureRecognizers:
            gestureRecognizers == null ? null : Set.from(gestureRecognizers),
        hitTestBehavior: hitTestBehavior ?? PlatformViewHitTestBehavior.opaque,
        key: key,
        layoutDirection: layoutDirection,
        onPlatformViewCreated:
            onPlatformViewCreated == null ? null : onPlatformViewCreatedProxy,
        viewType: viewType,
      );
    };
Function _UiKitView_createState$(
  m.Scope scope$,
  UiKitView target$,
) =>
    target$.createState;
Function HtmlElementView_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as HtmlElementView;
Function HtmlElementView_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is HtmlElementView;
Function _HtmlElementView_viewType$(
  m.Scope scope$,
  HtmlElementView target$,
) =>
    () {
      return target$.viewType;
    };
Function _HtmlElementView_onPlatformViewCreated$(
  m.Scope scope$,
  HtmlElementView target$,
) =>
    () {
      return target$.onPlatformViewCreated;
    };
Function _HtmlElementView__$(m.Scope scope$) => ({
      Key? key,
      required String viewType,
      m.FunctionPointer? onPlatformViewCreated,
    }) {
      void onPlatformViewCreatedProxy(int onPlatformViewCreated_id$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onPlatformViewCreated!,
            [onPlatformViewCreated_id$],
            {},
          );
      return HtmlElementView(
        key: key,
        onPlatformViewCreated:
            onPlatformViewCreated == null ? null : onPlatformViewCreatedProxy,
        viewType: viewType,
      );
    };
Function _HtmlElementView_build$(
  m.Scope scope$,
  HtmlElementView target$,
) =>
    target$.build;
Function PlatformViewCreationParams_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PlatformViewCreationParams;
Function PlatformViewCreationParams_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PlatformViewCreationParams;
Function _PlatformViewCreationParams_id$(
  m.Scope scope$,
  PlatformViewCreationParams target$,
) =>
    () {
      return target$.id;
    };
Function _PlatformViewCreationParams_viewType$(
  m.Scope scope$,
  PlatformViewCreationParams target$,
) =>
    () {
      return target$.viewType;
    };
Function _PlatformViewCreationParams_onPlatformViewCreated$(
  m.Scope scope$,
  PlatformViewCreationParams target$,
) =>
    () {
      return target$.onPlatformViewCreated;
    };
Function _PlatformViewCreationParams_onFocusChanged$(
  m.Scope scope$,
  PlatformViewCreationParams target$,
) =>
    () {
      return target$.onFocusChanged;
    };
Function PlatformViewLink_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PlatformViewLink;
Function PlatformViewLink_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PlatformViewLink;
Function _PlatformViewLink_viewType$(
  m.Scope scope$,
  PlatformViewLink target$,
) =>
    () {
      return target$.viewType;
    };
Function _PlatformViewLink__$(m.Scope scope$) => ({
      Key? key,
      required m.FunctionPointer surfaceFactory,
      required m.FunctionPointer onCreatePlatformView,
      required String viewType,
    }) {
      PlatformViewController onCreatePlatformViewProxy(
              PlatformViewCreationParams onCreatePlatformView_params$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onCreatePlatformView,
            [onCreatePlatformView_params$],
            {},
          );
      Widget surfaceFactoryProxy(
        BuildContext surfaceFactory_context$,
        PlatformViewController surfaceFactory_controller$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            surfaceFactory,
            [
              surfaceFactory_context$,
              surfaceFactory_controller$,
            ],
            {},
          );
      return PlatformViewLink(
        key: key,
        onCreatePlatformView: onCreatePlatformViewProxy,
        surfaceFactory: surfaceFactoryProxy,
        viewType: viewType,
      );
    };
Function _PlatformViewLink_createState$(
  m.Scope scope$,
  PlatformViewLink target$,
) =>
    target$.createState;
Function PlatformViewSurface_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PlatformViewSurface;
Function PlatformViewSurface_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PlatformViewSurface;
Function _PlatformViewSurface_controller$(
  m.Scope scope$,
  PlatformViewSurface target$,
) =>
    () {
      return target$.controller;
    };
Function _PlatformViewSurface_gestureRecognizers$(
  m.Scope scope$,
  PlatformViewSurface target$,
) =>
    () {
      return target$.gestureRecognizers;
    };
Function _PlatformViewSurface_hitTestBehavior$(
  m.Scope scope$,
  PlatformViewSurface target$,
) =>
    () {
      return target$.hitTestBehavior;
    };
Function _PlatformViewSurface__$(m.Scope scope$) => ({
      Key? key,
      required PlatformViewController controller,
      required PlatformViewHitTestBehavior hitTestBehavior,
      required Set gestureRecognizers,
    }) {
      return PlatformViewSurface(
        controller: controller,
        gestureRecognizers: Set.from(gestureRecognizers),
        hitTestBehavior: hitTestBehavior,
        key: key,
      );
    };
Function _PlatformViewSurface_createRenderObject$(
  m.Scope scope$,
  PlatformViewSurface target$,
) =>
    target$.createRenderObject;
Function _PlatformViewSurface_updateRenderObject$(
  m.Scope scope$,
  PlatformViewSurface target$,
) =>
    target$.updateRenderObject;
Function AndroidViewSurface_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AndroidViewSurface;
Function AndroidViewSurface_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AndroidViewSurface;
Function _AndroidViewSurface_controller$(
  m.Scope scope$,
  AndroidViewSurface target$,
) =>
    () {
      return target$.controller;
    };
Function _AndroidViewSurface_gestureRecognizers$(
  m.Scope scope$,
  AndroidViewSurface target$,
) =>
    () {
      return target$.gestureRecognizers;
    };
Function _AndroidViewSurface_hitTestBehavior$(
  m.Scope scope$,
  AndroidViewSurface target$,
) =>
    () {
      return target$.hitTestBehavior;
    };
Function _AndroidViewSurface__$(m.Scope scope$) => ({
      Key? key,
      required AndroidViewController controller,
      required PlatformViewHitTestBehavior hitTestBehavior,
      required Set gestureRecognizers,
    }) {
      return AndroidViewSurface(
        controller: controller,
        gestureRecognizers: Set.from(gestureRecognizers),
        hitTestBehavior: hitTestBehavior,
        key: key,
      );
    };
Function _AndroidViewSurface_createState$(
  m.Scope scope$,
  AndroidViewSurface target$,
) =>
    target$.createState;
