// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/page_view.dart';
import 'dart:math';
import 'package:flutter/foundation.dart'
    show clampDouble, precisionErrorTolerance;
import 'package:flutter/gestures.dart' show DragStartBehavior;
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/notification_listener.dart';
import 'package:flutter/src/widgets/page_storage.dart';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/widgets/scroll_context.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_delegate.dart';
import 'package:flutter/src/widgets/scroll_metrics.dart';
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/scroll_position.dart';
import 'package:flutter/src/widgets/scroll_position_with_single_context.dart';
import 'package:flutter/src/widgets/scroll_view.dart';
import 'package:flutter/src/widgets/scrollable.dart';
import 'package:flutter/src/widgets/sliver_fill.dart';
import 'package:flutter/src/widgets/viewport.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/page_view.dart',
  {
    'PageController.': _PageController__$,
    'PageMetrics.': _PageMetrics__$,
    'PageScrollPhysics.': _PageScrollPhysics__$,
    'PageView.': _PageView__$,
    'PageView.builder': _PageView_builder_$,
    'PageView.custom': _PageView_custom_$,
  },
  {},
  {
    'PageController': m.ClassMirror(
      'PageController',
      {
        '#as': PageController_as$,
        '#is': PageController_is$,
        'initialPage': _PageController_initialPage$,
        'keepPage': _PageController_keepPage$,
        'viewportFraction': _PageController_viewportFraction$,
        'page': _PageController_page$,
        'animateToPage': _PageController_animateToPage$,
        'jumpToPage': _PageController_jumpToPage$,
        'nextPage': _PageController_nextPage$,
        'previousPage': _PageController_previousPage$,
        'createScrollPosition': _PageController_createScrollPosition$,
        'attach': _PageController_attach$,
      },
      {},
    ),
    'PageMetrics': m.ClassMirror(
      'PageMetrics',
      {
        '#as': PageMetrics_as$,
        '#is': PageMetrics_is$,
        'viewportFraction': _PageMetrics_viewportFraction$,
        'page': _PageMetrics_page$,
        'copyWith': _PageMetrics_copyWith$,
      },
      {},
    ),
    'PageScrollPhysics': m.ClassMirror(
      'PageScrollPhysics',
      {
        '#as': PageScrollPhysics_as$,
        '#is': PageScrollPhysics_is$,
        'allowImplicitScrolling': _PageScrollPhysics_allowImplicitScrolling$,
        'applyTo': _PageScrollPhysics_applyTo$,
        'createBallisticSimulation':
            _PageScrollPhysics_createBallisticSimulation$,
      },
      {},
    ),
    'PageView': m.ClassMirror(
      'PageView',
      {
        '#as': PageView_as$,
        '#is': PageView_is$,
        'allowImplicitScrolling': _PageView_allowImplicitScrolling$,
        'restorationId': _PageView_restorationId$,
        'scrollDirection': _PageView_scrollDirection$,
        'reverse': _PageView_reverse$,
        'controller': _PageView_controller$,
        'physics': _PageView_physics$,
        'pageSnapping': _PageView_pageSnapping$,
        'onPageChanged': _PageView_onPageChanged$,
        'childrenDelegate': _PageView_childrenDelegate$,
        'dragStartBehavior': _PageView_dragStartBehavior$,
        'clipBehavior': _PageView_clipBehavior$,
        'scrollBehavior': _PageView_scrollBehavior$,
        'padEnds': _PageView_padEnds$,
        'createState': _PageView_createState$,
      },
      {},
    ),
  },
);
Function PageController_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PageController;
Function PageController_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PageController;
Function _PageController_initialPage$(
  m.Scope scope$,
  PageController target$,
) =>
    () {
      return target$.initialPage;
    };
Function _PageController_keepPage$(
  m.Scope scope$,
  PageController target$,
) =>
    () {
      return target$.keepPage;
    };
Function _PageController_viewportFraction$(
  m.Scope scope$,
  PageController target$,
) =>
    () {
      return target$.viewportFraction;
    };
Function _PageController_page$(
  m.Scope scope$,
  PageController target$,
) =>
    () {
      return target$.page;
    };
Function _PageController__$(m.Scope scope$) => ({
      int? initialPage,
      bool? keepPage,
      double? viewportFraction,
    }) {
      return PageController(
        initialPage: initialPage ?? 0,
        keepPage: keepPage ?? true,
        viewportFraction: viewportFraction ?? 1.0,
      );
    };
Function _PageController_animateToPage$(
  m.Scope scope$,
  PageController target$,
) =>
    target$.animateToPage;
Function _PageController_jumpToPage$(
  m.Scope scope$,
  PageController target$,
) =>
    target$.jumpToPage;
Function _PageController_nextPage$(
  m.Scope scope$,
  PageController target$,
) =>
    target$.nextPage;
Function _PageController_previousPage$(
  m.Scope scope$,
  PageController target$,
) =>
    target$.previousPage;
Function _PageController_createScrollPosition$(
  m.Scope scope$,
  PageController target$,
) =>
    target$.createScrollPosition;
Function _PageController_attach$(
  m.Scope scope$,
  PageController target$,
) =>
    target$.attach;
Function PageMetrics_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PageMetrics;
Function PageMetrics_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PageMetrics;
Function _PageMetrics_viewportFraction$(
  m.Scope scope$,
  PageMetrics target$,
) =>
    () {
      return target$.viewportFraction;
    };
Function _PageMetrics_page$(
  m.Scope scope$,
  PageMetrics target$,
) =>
    () {
      return target$.page;
    };
Function _PageMetrics__$(m.Scope scope$) => ({
      required double? minScrollExtent,
      required double? maxScrollExtent,
      required double? pixels,
      required double? viewportDimension,
      required AxisDirection axisDirection,
      required double viewportFraction,
      required double devicePixelRatio,
    }) {
      return PageMetrics(
        axisDirection: axisDirection,
        devicePixelRatio: devicePixelRatio,
        maxScrollExtent: maxScrollExtent,
        minScrollExtent: minScrollExtent,
        pixels: pixels,
        viewportDimension: viewportDimension,
        viewportFraction: viewportFraction,
      );
    };
Function _PageMetrics_copyWith$(
  m.Scope scope$,
  PageMetrics target$,
) =>
    target$.copyWith;
Function PageScrollPhysics_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PageScrollPhysics;
Function PageScrollPhysics_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PageScrollPhysics;
Function _PageScrollPhysics_allowImplicitScrolling$(
  m.Scope scope$,
  PageScrollPhysics target$,
) =>
    () {
      return target$.allowImplicitScrolling;
    };
Function _PageScrollPhysics__$(m.Scope scope$) => ({ScrollPhysics? parent}) {
      return PageScrollPhysics(parent: parent);
    };
Function _PageScrollPhysics_applyTo$(
  m.Scope scope$,
  PageScrollPhysics target$,
) =>
    target$.applyTo;
Function _PageScrollPhysics_createBallisticSimulation$(
  m.Scope scope$,
  PageScrollPhysics target$,
) =>
    target$.createBallisticSimulation;
Function PageView_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PageView;
Function PageView_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PageView;
Function _PageView_allowImplicitScrolling$(
  m.Scope scope$,
  PageView target$,
) =>
    () {
      return target$.allowImplicitScrolling;
    };
Function _PageView_restorationId$(
  m.Scope scope$,
  PageView target$,
) =>
    () {
      return target$.restorationId;
    };
Function _PageView_scrollDirection$(
  m.Scope scope$,
  PageView target$,
) =>
    () {
      return target$.scrollDirection;
    };
Function _PageView_reverse$(
  m.Scope scope$,
  PageView target$,
) =>
    () {
      return target$.reverse;
    };
Function _PageView_controller$(
  m.Scope scope$,
  PageView target$,
) =>
    () {
      return target$.controller;
    };
Function _PageView_physics$(
  m.Scope scope$,
  PageView target$,
) =>
    () {
      return target$.physics;
    };
Function _PageView_pageSnapping$(
  m.Scope scope$,
  PageView target$,
) =>
    () {
      return target$.pageSnapping;
    };
Function _PageView_onPageChanged$(
  m.Scope scope$,
  PageView target$,
) =>
    () {
      return target$.onPageChanged;
    };
Function _PageView_childrenDelegate$(
  m.Scope scope$,
  PageView target$,
) =>
    () {
      return target$.childrenDelegate;
    };
Function _PageView_dragStartBehavior$(
  m.Scope scope$,
  PageView target$,
) =>
    () {
      return target$.dragStartBehavior;
    };
Function _PageView_clipBehavior$(
  m.Scope scope$,
  PageView target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _PageView_scrollBehavior$(
  m.Scope scope$,
  PageView target$,
) =>
    () {
      return target$.scrollBehavior;
    };
Function _PageView_padEnds$(
  m.Scope scope$,
  PageView target$,
) =>
    () {
      return target$.padEnds;
    };
Function _PageView__$(m.Scope scope$) => ({
      Key? key,
      Axis? scrollDirection,
      bool? reverse,
      PageController? controller,
      ScrollPhysics? physics,
      bool? pageSnapping,
      m.FunctionPointer? onPageChanged,
      List? children,
      DragStartBehavior? dragStartBehavior,
      bool? allowImplicitScrolling,
      String? restorationId,
      Clip? clipBehavior,
      ScrollBehavior? scrollBehavior,
      bool? padEnds,
    }) {
      void onPageChangedProxy(int onPageChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onPageChanged!,
            [onPageChanged_value$],
            {},
          );
      return PageView(
        allowImplicitScrolling: allowImplicitScrolling ?? false,
        children: children == null ? const <Widget>[] : List.from(children),
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        controller: controller,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        key: key,
        onPageChanged: onPageChanged == null ? null : onPageChangedProxy,
        padEnds: padEnds ?? true,
        pageSnapping: pageSnapping ?? true,
        physics: physics,
        restorationId: restorationId,
        reverse: reverse ?? false,
        scrollBehavior: scrollBehavior,
        scrollDirection: scrollDirection ?? Axis.horizontal,
      );
    };
Function _PageView_builder_$(m.Scope scope$) => ({
      Key? key,
      Axis? scrollDirection,
      bool? reverse,
      PageController? controller,
      ScrollPhysics? physics,
      bool? pageSnapping,
      m.FunctionPointer? onPageChanged,
      required m.FunctionPointer itemBuilder,
      m.FunctionPointer? findChildIndexCallback,
      int? itemCount,
      DragStartBehavior? dragStartBehavior,
      bool? allowImplicitScrolling,
      String? restorationId,
      Clip? clipBehavior,
      ScrollBehavior? scrollBehavior,
      bool? padEnds,
    }) {
      int? findChildIndexCallbackProxy(Key findChildIndexCallback_key$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            findChildIndexCallback!,
            [findChildIndexCallback_key$],
            {},
          );
      Widget? itemBuilderProxy(
        BuildContext itemBuilder_context$,
        int itemBuilder_index$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            itemBuilder,
            [
              itemBuilder_context$,
              itemBuilder_index$,
            ],
            {},
          );
      void onPageChangedProxy(int onPageChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onPageChanged!,
            [onPageChanged_value$],
            {},
          );
      return PageView.builder(
        allowImplicitScrolling: allowImplicitScrolling ?? false,
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        controller: controller,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        findChildIndexCallback:
            findChildIndexCallback == null ? null : findChildIndexCallbackProxy,
        itemBuilder: itemBuilderProxy,
        itemCount: itemCount,
        key: key,
        onPageChanged: onPageChanged == null ? null : onPageChangedProxy,
        padEnds: padEnds ?? true,
        pageSnapping: pageSnapping ?? true,
        physics: physics,
        restorationId: restorationId,
        reverse: reverse ?? false,
        scrollBehavior: scrollBehavior,
        scrollDirection: scrollDirection ?? Axis.horizontal,
      );
    };
Function _PageView_custom_$(m.Scope scope$) => ({
      Key? key,
      Axis? scrollDirection,
      bool? reverse,
      PageController? controller,
      ScrollPhysics? physics,
      bool? pageSnapping,
      m.FunctionPointer? onPageChanged,
      required SliverChildDelegate childrenDelegate,
      DragStartBehavior? dragStartBehavior,
      bool? allowImplicitScrolling,
      String? restorationId,
      Clip? clipBehavior,
      ScrollBehavior? scrollBehavior,
      bool? padEnds,
    }) {
      void onPageChangedProxy(int onPageChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onPageChanged!,
            [onPageChanged_value$],
            {},
          );
      return PageView.custom(
        allowImplicitScrolling: allowImplicitScrolling ?? false,
        childrenDelegate: childrenDelegate,
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        controller: controller,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        key: key,
        onPageChanged: onPageChanged == null ? null : onPageChangedProxy,
        padEnds: padEnds ?? true,
        pageSnapping: pageSnapping ?? true,
        physics: physics,
        restorationId: restorationId,
        reverse: reverse ?? false,
        scrollBehavior: scrollBehavior,
        scrollDirection: scrollDirection ?? Axis.horizontal,
      );
    };
Function _PageView_createState$(
  m.Scope scope$,
  PageView target$,
) =>
    target$.createState;
