// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/page_view.dart';
import 'dart:math';
import 'package:flutter/foundation.dart'
    show clampDouble, precisionErrorTolerance;
import 'package:flutter/gestures.dart' show DragStartBehavior;
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/notification_listener.dart';
import 'package:flutter/src/widgets/page_storage.dart';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/widgets/scroll_context.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_delegate.dart';
import 'package:flutter/src/widgets/scroll_metrics.dart';
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/scroll_position.dart';
import 'package:flutter/src/widgets/scroll_position_with_single_context.dart';
import 'package:flutter/src/widgets/scroll_view.dart';
import 'package:flutter/src/widgets/scrollable.dart';
import 'package:flutter/src/widgets/sliver_fill.dart';
import 'package:flutter/src/widgets/viewport.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/page_view.dart',
  {},
  {},
  {
    'PageController': m.ClassMirror(
      'PageController',
      {
        'initialPage': _PageController_initialPage$,
        'keepPage': _PageController_keepPage$,
        'viewportFraction': _PageController_viewportFraction$,
        'page': _PageController_page$,
        'animateToPage': _PageController_animateToPage$,
        'jumpToPage': _PageController_jumpToPage$,
        'nextPage': _PageController_nextPage$,
        'previousPage': _PageController_previousPage$,
        'createScrollPosition': _PageController_createScrollPosition$,
        'attach': _PageController_attach$,
      },
      {},
    ),
    'PageMetrics': m.ClassMirror(
      'PageMetrics',
      {
        'viewportFraction': _PageMetrics_viewportFraction$,
        'page': _PageMetrics_page$,
        'copyWith': _PageMetrics_copyWith$,
      },
      {},
    ),
    'PageScrollPhysics': m.ClassMirror(
      'PageScrollPhysics',
      {
        'allowImplicitScrolling': _PageScrollPhysics_allowImplicitScrolling$,
        'applyTo': _PageScrollPhysics_applyTo$,
        'createBallisticSimulation':
            _PageScrollPhysics_createBallisticSimulation$,
      },
      {},
    ),
    'PageView': m.ClassMirror(
      'PageView',
      {
        'allowImplicitScrolling': _PageView_allowImplicitScrolling$,
        'restorationId': _PageView_restorationId$,
        'scrollDirection': _PageView_scrollDirection$,
        'reverse': _PageView_reverse$,
        'controller': _PageView_controller$,
        'physics': _PageView_physics$,
        'pageSnapping': _PageView_pageSnapping$,
        'onPageChanged': _PageView_onPageChanged$,
        'childrenDelegate': _PageView_childrenDelegate$,
        'dragStartBehavior': _PageView_dragStartBehavior$,
        'clipBehavior': _PageView_clipBehavior$,
        'scrollBehavior': _PageView_scrollBehavior$,
        'padEnds': _PageView_padEnds$,
        'createState': _PageView_createState$,
      },
      {},
    ),
  },
);
int _PageController_initialPage$(PageController target) {
  return target.initialPage;
}

bool _PageController_keepPage$(PageController target) {
  return target.keepPage;
}

double _PageController_viewportFraction$(PageController target) {
  return target.viewportFraction;
}

double? _PageController_page$(PageController target) {
  return target.page;
}

Function _PageController_animateToPage$(
  m.Scope scope,
  PageController target,
) =>
    target.animateToPage;
Function _PageController_jumpToPage$(
  m.Scope scope,
  PageController target,
) =>
    target.jumpToPage;
Function _PageController_nextPage$(
  m.Scope scope,
  PageController target,
) =>
    target.nextPage;
Function _PageController_previousPage$(
  m.Scope scope,
  PageController target,
) =>
    target.previousPage;
Function _PageController_createScrollPosition$(
  m.Scope scope,
  PageController target,
) =>
    target.createScrollPosition;
Function _PageController_attach$(
  m.Scope scope,
  PageController target,
) =>
    target.attach;
double _PageMetrics_viewportFraction$(PageMetrics target) {
  return target.viewportFraction;
}

double? _PageMetrics_page$(PageMetrics target) {
  return target.page;
}

Function _PageMetrics_copyWith$(
  m.Scope scope,
  PageMetrics target,
) =>
    target.copyWith;
bool _PageScrollPhysics_allowImplicitScrolling$(PageScrollPhysics target) {
  return target.allowImplicitScrolling;
}

Function _PageScrollPhysics_applyTo$(
  m.Scope scope,
  PageScrollPhysics target,
) =>
    target.applyTo;
Function _PageScrollPhysics_createBallisticSimulation$(
  m.Scope scope,
  PageScrollPhysics target,
) =>
    target.createBallisticSimulation;
bool _PageView_allowImplicitScrolling$(PageView target) {
  return target.allowImplicitScrolling;
}

String? _PageView_restorationId$(PageView target) {
  return target.restorationId;
}

Axis _PageView_scrollDirection$(PageView target) {
  return target.scrollDirection;
}

bool _PageView_reverse$(PageView target) {
  return target.reverse;
}

PageController _PageView_controller$(PageView target) {
  return target.controller;
}

ScrollPhysics? _PageView_physics$(PageView target) {
  return target.physics;
}

bool _PageView_pageSnapping$(PageView target) {
  return target.pageSnapping;
}

void Function(int)? _PageView_onPageChanged$(PageView target) {
  return target.onPageChanged;
}

SliverChildDelegate _PageView_childrenDelegate$(PageView target) {
  return target.childrenDelegate;
}

DragStartBehavior _PageView_dragStartBehavior$(PageView target) {
  return target.dragStartBehavior;
}

Clip _PageView_clipBehavior$(PageView target) {
  return target.clipBehavior;
}

ScrollBehavior? _PageView_scrollBehavior$(PageView target) {
  return target.scrollBehavior;
}

bool _PageView_padEnds$(PageView target) {
  return target.padEnds;
}

Function _PageView_createState$(
  m.Scope scope,
  PageView target,
) =>
    target.createState;
