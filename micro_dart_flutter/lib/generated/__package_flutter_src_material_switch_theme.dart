// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/switch_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/switch_theme.dart',
  {
    'SwitchThemeData.lerp': _SwitchThemeData_lerp$,
    'SwitchTheme.of': _SwitchTheme_of$,
  },
  {},
  {
    'SwitchThemeData': m.ClassMirror(
      'SwitchThemeData',
      {
        'thumbColor': _SwitchThemeData_thumbColor$,
        'trackColor': _SwitchThemeData_trackColor$,
        'trackOutlineColor': _SwitchThemeData_trackOutlineColor$,
        'materialTapTargetSize': _SwitchThemeData_materialTapTargetSize$,
        'mouseCursor': _SwitchThemeData_mouseCursor$,
        'overlayColor': _SwitchThemeData_overlayColor$,
        'splashRadius': _SwitchThemeData_splashRadius$,
        'thumbIcon': _SwitchThemeData_thumbIcon$,
        'hashCode': _SwitchThemeData_hashCode$,
        'copyWith': _SwitchThemeData_copyWith$,
        'debugFillProperties': _SwitchThemeData_debugFillProperties$,
      },
      {},
    ),
    'SwitchTheme': m.ClassMirror(
      'SwitchTheme',
      {
        'data': _SwitchTheme_data$,
        'updateShouldNotify': _SwitchTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
MaterialStateProperty<Color?>? _SwitchThemeData_thumbColor$(
    SwitchThemeData target) {
  return target.thumbColor;
}

MaterialStateProperty<Color?>? _SwitchThemeData_trackColor$(
    SwitchThemeData target) {
  return target.trackColor;
}

MaterialStateProperty<Color?>? _SwitchThemeData_trackOutlineColor$(
    SwitchThemeData target) {
  return target.trackOutlineColor;
}

MaterialTapTargetSize? _SwitchThemeData_materialTapTargetSize$(
    SwitchThemeData target) {
  return target.materialTapTargetSize;
}

MaterialStateProperty<MouseCursor?>? _SwitchThemeData_mouseCursor$(
    SwitchThemeData target) {
  return target.mouseCursor;
}

MaterialStateProperty<Color?>? _SwitchThemeData_overlayColor$(
    SwitchThemeData target) {
  return target.overlayColor;
}

double? _SwitchThemeData_splashRadius$(SwitchThemeData target) {
  return target.splashRadius;
}

MaterialStateProperty<Icon?>? _SwitchThemeData_thumbIcon$(
    SwitchThemeData target) {
  return target.thumbIcon;
}

int _SwitchThemeData_hashCode$(SwitchThemeData target) {
  return target.hashCode;
}

Function _SwitchThemeData_copyWith$(
  m.Scope scope,
  SwitchThemeData target,
) =>
    target.copyWith;
Function _SwitchThemeData_lerp$(m.Scope scope) => SwitchThemeData.lerp;
Function _SwitchThemeData_debugFillProperties$(
  m.Scope scope,
  SwitchThemeData target,
) =>
    target.debugFillProperties;
SwitchThemeData _SwitchTheme_data$(SwitchTheme target) {
  return target.data;
}

Function _SwitchTheme_of$(m.Scope scope) => SwitchTheme.of;
Function _SwitchTheme_updateShouldNotify$(
  m.Scope scope,
  SwitchTheme target,
) =>
    target.updateShouldNotify;
