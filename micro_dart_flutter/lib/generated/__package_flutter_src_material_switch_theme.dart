// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/switch_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/switch_theme.dart',
  {
    'SwitchThemeData.': _SwitchThemeData__$,
    'SwitchThemeData.lerp': _SwitchThemeData_lerp$,
    'SwitchTheme.': _SwitchTheme__$,
    'SwitchTheme.of': _SwitchTheme_of$,
  },
  {},
  {
    'SwitchThemeData': m.ClassMirror(
      'SwitchThemeData',
      {
        '#as': SwitchThemeData_as$,
        '#is': SwitchThemeData_is$,
        'thumbColor': _SwitchThemeData_thumbColor$,
        'trackColor': _SwitchThemeData_trackColor$,
        'trackOutlineColor': _SwitchThemeData_trackOutlineColor$,
        'materialTapTargetSize': _SwitchThemeData_materialTapTargetSize$,
        'mouseCursor': _SwitchThemeData_mouseCursor$,
        'overlayColor': _SwitchThemeData_overlayColor$,
        'splashRadius': _SwitchThemeData_splashRadius$,
        'thumbIcon': _SwitchThemeData_thumbIcon$,
        'hashCode': _SwitchThemeData_hashCode$,
        'copyWith': _SwitchThemeData_copyWith$,
        '==': _SwitchThemeData_eq$$,
        'debugFillProperties': _SwitchThemeData_debugFillProperties$,
      },
      {},
    ),
    'SwitchTheme': m.ClassMirror(
      'SwitchTheme',
      {
        '#as': SwitchTheme_as$,
        '#is': SwitchTheme_is$,
        'data': _SwitchTheme_data$,
        'updateShouldNotify': _SwitchTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function SwitchThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SwitchThemeData;
Function SwitchThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SwitchThemeData;
Function _SwitchThemeData_thumbColor$(
  m.Scope scope$,
  SwitchThemeData target$,
) =>
    () {
      return target$.thumbColor;
    };
Function _SwitchThemeData_trackColor$(
  m.Scope scope$,
  SwitchThemeData target$,
) =>
    () {
      return target$.trackColor;
    };
Function _SwitchThemeData_trackOutlineColor$(
  m.Scope scope$,
  SwitchThemeData target$,
) =>
    () {
      return target$.trackOutlineColor;
    };
Function _SwitchThemeData_materialTapTargetSize$(
  m.Scope scope$,
  SwitchThemeData target$,
) =>
    () {
      return target$.materialTapTargetSize;
    };
Function _SwitchThemeData_mouseCursor$(
  m.Scope scope$,
  SwitchThemeData target$,
) =>
    () {
      return target$.mouseCursor;
    };
Function _SwitchThemeData_overlayColor$(
  m.Scope scope$,
  SwitchThemeData target$,
) =>
    () {
      return target$.overlayColor;
    };
Function _SwitchThemeData_splashRadius$(
  m.Scope scope$,
  SwitchThemeData target$,
) =>
    () {
      return target$.splashRadius;
    };
Function _SwitchThemeData_thumbIcon$(
  m.Scope scope$,
  SwitchThemeData target$,
) =>
    () {
      return target$.thumbIcon;
    };
Function _SwitchThemeData_hashCode$(
  m.Scope scope$,
  SwitchThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _SwitchThemeData__$(m.Scope scope$) => ({
      MaterialStateProperty<Color>? thumbColor,
      MaterialStateProperty<Color>? trackColor,
      MaterialStateProperty<Color>? trackOutlineColor,
      MaterialTapTargetSize? materialTapTargetSize,
      MaterialStateProperty<MouseCursor>? mouseCursor,
      MaterialStateProperty<Color>? overlayColor,
      double? splashRadius,
      MaterialStateProperty<Icon>? thumbIcon,
    }) {
      return SwitchThemeData(
        materialTapTargetSize: materialTapTargetSize,
        mouseCursor: mouseCursor,
        overlayColor: overlayColor,
        splashRadius: splashRadius,
        thumbColor: thumbColor,
        thumbIcon: thumbIcon,
        trackColor: trackColor,
        trackOutlineColor: trackOutlineColor,
      );
    };
Function _SwitchThemeData_copyWith$(
  m.Scope scope$,
  SwitchThemeData target$,
) =>
    target$.copyWith;
Function _SwitchThemeData_lerp$(m.Scope scope$) => SwitchThemeData.lerp;
Function _SwitchThemeData_eq$$(
  m.Scope scope$,
  SwitchThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _SwitchThemeData_debugFillProperties$(
  m.Scope scope$,
  SwitchThemeData target$,
) =>
    target$.debugFillProperties;
Function SwitchTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SwitchTheme;
Function SwitchTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SwitchTheme;
Function _SwitchTheme_data$(
  m.Scope scope$,
  SwitchTheme target$,
) =>
    () {
      return target$.data;
    };
Function _SwitchTheme__$(m.Scope scope$) => ({
      Key? key,
      required SwitchThemeData data,
      required Widget child,
    }) {
      return SwitchTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _SwitchTheme_of$(m.Scope scope$) => SwitchTheme.of;
Function _SwitchTheme_updateShouldNotify$(
  m.Scope scope$,
  SwitchTheme target$,
) =>
    target$.updateShouldNotify;
