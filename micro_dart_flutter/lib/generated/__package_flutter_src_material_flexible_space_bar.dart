// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/flexible_space_bar.dart';
import 'dart:math';
import 'dart:ui';
import 'package:flutter/foundation.dart' show clampDouble;
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/flexible_space_bar.dart',
  {
    'FlexibleSpaceBar.': _FlexibleSpaceBar__$,
    'FlexibleSpaceBar.createSettings': _FlexibleSpaceBar_createSettings$,
    'FlexibleSpaceBarSettings.': _FlexibleSpaceBarSettings__$,
    'CollapseMode.parallax': _CollapseMode_parallax$,
    'CollapseMode.pin': _CollapseMode_pin$,
    'CollapseMode.none': _CollapseMode_none$,
    'CollapseMode.values': _CollapseMode_values$,
    'StretchMode.zoomBackground': _StretchMode_zoomBackground$,
    'StretchMode.blurBackground': _StretchMode_blurBackground$,
    'StretchMode.fadeTitle': _StretchMode_fadeTitle$,
    'StretchMode.values': _StretchMode_values$,
  },
  {},
  {
    'FlexibleSpaceBar': m.ClassMirror(
      'FlexibleSpaceBar',
      {
        '#as': FlexibleSpaceBar_as$,
        '#is': FlexibleSpaceBar_is$,
        'title': _FlexibleSpaceBar_title$,
        'background': _FlexibleSpaceBar_background$,
        'centerTitle': _FlexibleSpaceBar_centerTitle$,
        'collapseMode': _FlexibleSpaceBar_collapseMode$,
        'stretchModes': _FlexibleSpaceBar_stretchModes$,
        'titlePadding': _FlexibleSpaceBar_titlePadding$,
        'expandedTitleScale': _FlexibleSpaceBar_expandedTitleScale$,
        'createState': _FlexibleSpaceBar_createState$,
      },
      {},
    ),
    'FlexibleSpaceBarSettings': m.ClassMirror(
      'FlexibleSpaceBarSettings',
      {
        '#as': FlexibleSpaceBarSettings_as$,
        '#is': FlexibleSpaceBarSettings_is$,
        'toolbarOpacity': _FlexibleSpaceBarSettings_toolbarOpacity$,
        'minExtent': _FlexibleSpaceBarSettings_minExtent$,
        'maxExtent': _FlexibleSpaceBarSettings_maxExtent$,
        'currentExtent': _FlexibleSpaceBarSettings_currentExtent$,
        'isScrolledUnder': _FlexibleSpaceBarSettings_isScrolledUnder$,
        'updateShouldNotify': _FlexibleSpaceBarSettings_updateShouldNotify$,
      },
      {},
    ),
    'CollapseMode': m.ClassMirror(
      'CollapseMode',
      {},
      {},
    ),
    'StretchMode': m.ClassMirror(
      'StretchMode',
      {},
      {},
    ),
  },
);
Function FlexibleSpaceBar_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FlexibleSpaceBar;
Function FlexibleSpaceBar_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FlexibleSpaceBar;
Function _FlexibleSpaceBar_title$(
  m.Scope scope$,
  FlexibleSpaceBar target$,
) =>
    () {
      return target$.title;
    };
Function _FlexibleSpaceBar_background$(
  m.Scope scope$,
  FlexibleSpaceBar target$,
) =>
    () {
      return target$.background;
    };
Function _FlexibleSpaceBar_centerTitle$(
  m.Scope scope$,
  FlexibleSpaceBar target$,
) =>
    () {
      return target$.centerTitle;
    };
Function _FlexibleSpaceBar_collapseMode$(
  m.Scope scope$,
  FlexibleSpaceBar target$,
) =>
    () {
      return target$.collapseMode;
    };
Function _FlexibleSpaceBar_stretchModes$(
  m.Scope scope$,
  FlexibleSpaceBar target$,
) =>
    () {
      return target$.stretchModes;
    };
Function _FlexibleSpaceBar_titlePadding$(
  m.Scope scope$,
  FlexibleSpaceBar target$,
) =>
    () {
      return target$.titlePadding;
    };
Function _FlexibleSpaceBar_expandedTitleScale$(
  m.Scope scope$,
  FlexibleSpaceBar target$,
) =>
    () {
      return target$.expandedTitleScale;
    };
Function _FlexibleSpaceBar__$(m.Scope scope$) => ({
      Key? key,
      Widget? title,
      Widget? background,
      bool? centerTitle,
      EdgeInsetsGeometry? titlePadding,
      CollapseMode? collapseMode,
      List? stretchModes,
      double? expandedTitleScale,
    }) {
      return FlexibleSpaceBar(
        background: background,
        centerTitle: centerTitle,
        collapseMode: collapseMode ?? CollapseMode.parallax,
        expandedTitleScale: expandedTitleScale ?? 1.5,
        key: key,
        stretchModes: stretchModes == null
            ? const <StretchMode>[StretchMode.zoomBackground]
            : List.from(stretchModes),
        title: title,
        titlePadding: titlePadding,
      );
    };
Function _FlexibleSpaceBar_createSettings$(m.Scope scope$) =>
    FlexibleSpaceBar.createSettings;
Function _FlexibleSpaceBar_createState$(
  m.Scope scope$,
  FlexibleSpaceBar target$,
) =>
    target$.createState;
Function FlexibleSpaceBarSettings_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FlexibleSpaceBarSettings;
Function FlexibleSpaceBarSettings_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FlexibleSpaceBarSettings;
Function _FlexibleSpaceBarSettings_toolbarOpacity$(
  m.Scope scope$,
  FlexibleSpaceBarSettings target$,
) =>
    () {
      return target$.toolbarOpacity;
    };
Function _FlexibleSpaceBarSettings_minExtent$(
  m.Scope scope$,
  FlexibleSpaceBarSettings target$,
) =>
    () {
      return target$.minExtent;
    };
Function _FlexibleSpaceBarSettings_maxExtent$(
  m.Scope scope$,
  FlexibleSpaceBarSettings target$,
) =>
    () {
      return target$.maxExtent;
    };
Function _FlexibleSpaceBarSettings_currentExtent$(
  m.Scope scope$,
  FlexibleSpaceBarSettings target$,
) =>
    () {
      return target$.currentExtent;
    };
Function _FlexibleSpaceBarSettings_isScrolledUnder$(
  m.Scope scope$,
  FlexibleSpaceBarSettings target$,
) =>
    () {
      return target$.isScrolledUnder;
    };
Function _FlexibleSpaceBarSettings__$(m.Scope scope$) => ({
      Key? key,
      required double toolbarOpacity,
      required double minExtent,
      required double maxExtent,
      required double currentExtent,
      required Widget child,
      bool? isScrolledUnder,
    }) {
      return FlexibleSpaceBarSettings(
        child: child,
        currentExtent: currentExtent,
        isScrolledUnder: isScrolledUnder,
        key: key,
        maxExtent: maxExtent,
        minExtent: minExtent,
        toolbarOpacity: toolbarOpacity,
      );
    };
Function _FlexibleSpaceBarSettings_updateShouldNotify$(
  m.Scope scope$,
  FlexibleSpaceBarSettings target$,
) =>
    target$.updateShouldNotify;
Function _CollapseMode_parallax$(m.Scope scope$) => () => CollapseMode.parallax;
Function _CollapseMode_pin$(m.Scope scope$) => () => CollapseMode.pin;
Function _CollapseMode_none$(m.Scope scope$) => () => CollapseMode.none;
Function _CollapseMode_values$(m.Scope scope$) => () => CollapseMode.values;
Function _StretchMode_zoomBackground$(m.Scope scope$) =>
    () => StretchMode.zoomBackground;
Function _StretchMode_blurBackground$(m.Scope scope$) =>
    () => StretchMode.blurBackground;
Function _StretchMode_fadeTitle$(m.Scope scope$) => () => StretchMode.fadeTitle;
Function _StretchMode_values$(m.Scope scope$) => () => StretchMode.values;
