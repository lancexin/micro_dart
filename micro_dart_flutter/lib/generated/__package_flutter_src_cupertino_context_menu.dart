// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/context_menu.dart';
import 'dart:math';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart' show kMinFlingVelocity;
import 'package:flutter/scheduler.dart';
import 'package:flutter/services.dart' show HapticFeedback;
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/context_menu.dart',
  {
    'CupertinoContextMenu.kOpenBorderRadius':
        _CupertinoContextMenu_kOpenBorderRadius$,
    'CupertinoContextMenu.kEndBoxShadow': _CupertinoContextMenu_kEndBoxShadow$,
    'CupertinoContextMenu.animationOpensAt':
        _CupertinoContextMenu_animationOpensAt$,
    'CupertinoContextMenu.': _CupertinoContextMenu__$,
    'CupertinoContextMenu.builder': _CupertinoContextMenu_builder_$,
  },
  {},
  {
    'CupertinoContextMenu': m.ClassMirror(
      'CupertinoContextMenu',
      {
        '#as': CupertinoContextMenu_as$,
        '#is': CupertinoContextMenu_is$,
        'builder': _CupertinoContextMenu_builder$,
        'child': _CupertinoContextMenu_child$,
        'actions': _CupertinoContextMenu_actions$,
        'enableHapticFeedback': _CupertinoContextMenu_enableHapticFeedback$,
        'previewBuilder': _CupertinoContextMenu_previewBuilder$,
        'createState': _CupertinoContextMenu_createState$,
      },
      {},
    )
  },
);
Function CupertinoContextMenu_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoContextMenu;
Function CupertinoContextMenu_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoContextMenu;
double _CupertinoContextMenu_kOpenBorderRadius$() {
  return CupertinoContextMenu.kOpenBorderRadius;
}

List<BoxShadow> _CupertinoContextMenu_kEndBoxShadow$() {
  return CupertinoContextMenu.kEndBoxShadow;
}

double _CupertinoContextMenu_animationOpensAt$() {
  return CupertinoContextMenu.animationOpensAt;
}

Function _CupertinoContextMenu_builder$(
  m.Scope scope$,
  CupertinoContextMenu target$,
) =>
    () {
      return target$.builder;
    };
Function _CupertinoContextMenu_child$(
  m.Scope scope$,
  CupertinoContextMenu target$,
) =>
    () {
      return target$.child;
    };
Function _CupertinoContextMenu_actions$(
  m.Scope scope$,
  CupertinoContextMenu target$,
) =>
    () {
      return target$.actions;
    };
Function _CupertinoContextMenu_enableHapticFeedback$(
  m.Scope scope$,
  CupertinoContextMenu target$,
) =>
    () {
      return target$.enableHapticFeedback;
    };
Function _CupertinoContextMenu_previewBuilder$(
  m.Scope scope$,
  CupertinoContextMenu target$,
) =>
    () {
      return target$.previewBuilder;
    };
Function _CupertinoContextMenu__$(m.Scope scope$) => ({
      Key? key,
      required List actions,
      required Widget child,
      bool? enableHapticFeedback,
      m.FunctionPointer? previewBuilder,
    }) {
      Widget previewBuilderProxy(
        BuildContext previewBuilder_context$,
        Animation<double> previewBuilder_animation$,
        Widget previewBuilder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            previewBuilder!,
            [
              previewBuilder_context$,
              previewBuilder_animation$,
              previewBuilder_child$,
            ],
            {},
          );
      return CupertinoContextMenu(
        actions: List.from(actions),
        child: child,
        enableHapticFeedback: enableHapticFeedback ?? false,
        key: key,
        previewBuilder: previewBuilder == null
            ? (BuildContext context, Animation<double> animation,
                Widget child) {
                return FittedBox(
                  fit: BoxFit.cover,
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(12.0 * animation.value),
                    child: child,
                  ),
                );
              }
            : previewBuilderProxy,
      );
    };
Function _CupertinoContextMenu_builder_$(m.Scope scope$) => ({
      Key? key,
      required List actions,
      required m.FunctionPointer builder,
      bool? enableHapticFeedback,
    }) {
      Widget builderProxy(
        BuildContext builder_context$,
        Animation<double> builder_animation$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [
              builder_context$,
              builder_animation$,
            ],
            {},
          );
      return CupertinoContextMenu.builder(
        actions: List.from(actions),
        builder: builderProxy,
        enableHapticFeedback: enableHapticFeedback ?? false,
        key: key,
      );
    };
Function _CupertinoContextMenu_createState$(
  m.Scope scope$,
  CupertinoContextMenu target$,
) =>
    target$.createState;
