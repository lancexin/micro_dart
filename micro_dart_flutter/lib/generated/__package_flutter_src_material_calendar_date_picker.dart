// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/calendar_date_picker.dart';
import 'dart:math';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/date.dart';
import 'package:flutter/src/material/date_picker_theme.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/divider.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/calendar_date_picker.dart',
  {},
  {},
  {
    'CalendarDatePicker': m.ClassMirror(
      'CalendarDatePicker',
      {
        'initialDate': _CalendarDatePicker_initialDate$,
        'firstDate': _CalendarDatePicker_firstDate$,
        'lastDate': _CalendarDatePicker_lastDate$,
        'currentDate': _CalendarDatePicker_currentDate$,
        'onDateChanged': _CalendarDatePicker_onDateChanged$,
        'onDisplayedMonthChanged': _CalendarDatePicker_onDisplayedMonthChanged$,
        'initialCalendarMode': _CalendarDatePicker_initialCalendarMode$,
        'selectableDayPredicate': _CalendarDatePicker_selectableDayPredicate$,
        'createState': _CalendarDatePicker_createState$,
      },
      {},
    ),
    'YearPicker': m.ClassMirror(
      'YearPicker',
      {
        'currentDate': _YearPicker_currentDate$,
        'firstDate': _YearPicker_firstDate$,
        'lastDate': _YearPicker_lastDate$,
        'initialDate': _YearPicker_initialDate$,
        'selectedDate': _YearPicker_selectedDate$,
        'onChanged': _YearPicker_onChanged$,
        'dragStartBehavior': _YearPicker_dragStartBehavior$,
        'createState': _YearPicker_createState$,
      },
      {},
    ),
  },
);
DateTime _CalendarDatePicker_initialDate$(CalendarDatePicker target) {
  return target.initialDate;
}

DateTime _CalendarDatePicker_firstDate$(CalendarDatePicker target) {
  return target.firstDate;
}

DateTime _CalendarDatePicker_lastDate$(CalendarDatePicker target) {
  return target.lastDate;
}

DateTime _CalendarDatePicker_currentDate$(CalendarDatePicker target) {
  return target.currentDate;
}

void Function(DateTime) _CalendarDatePicker_onDateChanged$(
    CalendarDatePicker target) {
  return target.onDateChanged;
}

void Function(DateTime)? _CalendarDatePicker_onDisplayedMonthChanged$(
    CalendarDatePicker target) {
  return target.onDisplayedMonthChanged;
}

DatePickerMode _CalendarDatePicker_initialCalendarMode$(
    CalendarDatePicker target) {
  return target.initialCalendarMode;
}

bool Function(DateTime)? _CalendarDatePicker_selectableDayPredicate$(
    CalendarDatePicker target) {
  return target.selectableDayPredicate;
}

Function _CalendarDatePicker_createState$(
  m.Scope scope,
  CalendarDatePicker target,
) =>
    target.createState;
DateTime _YearPicker_currentDate$(YearPicker target) {
  return target.currentDate;
}

DateTime _YearPicker_firstDate$(YearPicker target) {
  return target.firstDate;
}

DateTime _YearPicker_lastDate$(YearPicker target) {
  return target.lastDate;
}

DateTime _YearPicker_initialDate$(YearPicker target) {
  return target.initialDate;
}

DateTime _YearPicker_selectedDate$(YearPicker target) {
  return target.selectedDate;
}

void Function(DateTime) _YearPicker_onChanged$(YearPicker target) {
  return target.onChanged;
}

DragStartBehavior _YearPicker_dragStartBehavior$(YearPicker target) {
  return target.dragStartBehavior;
}

Function _YearPicker_createState$(
  m.Scope scope,
  YearPicker target,
) =>
    target.createState;
