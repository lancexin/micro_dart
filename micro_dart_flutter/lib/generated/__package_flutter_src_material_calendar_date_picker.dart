// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/calendar_date_picker.dart';
import 'dart:math';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/date.dart';
import 'package:flutter/src/material/date_picker_theme.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/divider.dart';
import 'package:flutter/src/material/icon_button.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/calendar_date_picker.dart',
  {
    'CalendarDatePicker.': _CalendarDatePicker__$,
    'YearPicker.': _YearPicker__$,
  },
  {},
  {
    'CalendarDatePicker': m.ClassMirror(
      'CalendarDatePicker',
      {
        '#as': CalendarDatePicker_as$,
        '#is': CalendarDatePicker_is$,
        'initialDate': _CalendarDatePicker_initialDate$,
        'firstDate': _CalendarDatePicker_firstDate$,
        'lastDate': _CalendarDatePicker_lastDate$,
        'currentDate': _CalendarDatePicker_currentDate$,
        'onDateChanged': _CalendarDatePicker_onDateChanged$,
        'onDisplayedMonthChanged': _CalendarDatePicker_onDisplayedMonthChanged$,
        'initialCalendarMode': _CalendarDatePicker_initialCalendarMode$,
        'selectableDayPredicate': _CalendarDatePicker_selectableDayPredicate$,
        'createState': _CalendarDatePicker_createState$,
      },
      {},
    ),
    'YearPicker': m.ClassMirror(
      'YearPicker',
      {
        '#as': YearPicker_as$,
        '#is': YearPicker_is$,
        'currentDate': _YearPicker_currentDate$,
        'firstDate': _YearPicker_firstDate$,
        'lastDate': _YearPicker_lastDate$,
        'initialDate': _YearPicker_initialDate$,
        'selectedDate': _YearPicker_selectedDate$,
        'onChanged': _YearPicker_onChanged$,
        'dragStartBehavior': _YearPicker_dragStartBehavior$,
        'createState': _YearPicker_createState$,
      },
      {},
    ),
  },
);
Function CalendarDatePicker_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CalendarDatePicker;
Function CalendarDatePicker_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CalendarDatePicker;
Function _CalendarDatePicker_initialDate$(
  m.Scope scope$,
  CalendarDatePicker target$,
) =>
    () {
      return target$.initialDate;
    };
Function _CalendarDatePicker_firstDate$(
  m.Scope scope$,
  CalendarDatePicker target$,
) =>
    () {
      return target$.firstDate;
    };
Function _CalendarDatePicker_lastDate$(
  m.Scope scope$,
  CalendarDatePicker target$,
) =>
    () {
      return target$.lastDate;
    };
Function _CalendarDatePicker_currentDate$(
  m.Scope scope$,
  CalendarDatePicker target$,
) =>
    () {
      return target$.currentDate;
    };
Function _CalendarDatePicker_onDateChanged$(
  m.Scope scope$,
  CalendarDatePicker target$,
) =>
    () {
      return target$.onDateChanged;
    };
Function _CalendarDatePicker_onDisplayedMonthChanged$(
  m.Scope scope$,
  CalendarDatePicker target$,
) =>
    () {
      return target$.onDisplayedMonthChanged;
    };
Function _CalendarDatePicker_initialCalendarMode$(
  m.Scope scope$,
  CalendarDatePicker target$,
) =>
    () {
      return target$.initialCalendarMode;
    };
Function _CalendarDatePicker_selectableDayPredicate$(
  m.Scope scope$,
  CalendarDatePicker target$,
) =>
    () {
      return target$.selectableDayPredicate;
    };
Function _CalendarDatePicker__$(m.Scope scope$) => ({
      Key? key,
      required DateTime initialDate,
      required DateTime firstDate,
      required DateTime lastDate,
      DateTime? currentDate,
      required m.FunctionPointer onDateChanged,
      m.FunctionPointer? onDisplayedMonthChanged,
      DatePickerMode? initialCalendarMode,
      m.FunctionPointer? selectableDayPredicate,
    }) {
      void onDateChangedProxy(DateTime onDateChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onDateChanged,
            [onDateChanged_value$],
            {},
          );
      void onDisplayedMonthChangedProxy(
              DateTime onDisplayedMonthChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onDisplayedMonthChanged!,
            [onDisplayedMonthChanged_value$],
            {},
          );
      bool selectableDayPredicateProxy(DateTime selectableDayPredicate_day$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            selectableDayPredicate!,
            [selectableDayPredicate_day$],
            {},
          );
      return CalendarDatePicker(
        currentDate: currentDate,
        firstDate: firstDate,
        initialCalendarMode: initialCalendarMode ?? DatePickerMode.day,
        initialDate: initialDate,
        key: key,
        lastDate: lastDate,
        onDateChanged: onDateChangedProxy,
        onDisplayedMonthChanged: onDisplayedMonthChanged == null
            ? null
            : onDisplayedMonthChangedProxy,
        selectableDayPredicate:
            selectableDayPredicate == null ? null : selectableDayPredicateProxy,
      );
    };
Function _CalendarDatePicker_createState$(
  m.Scope scope$,
  CalendarDatePicker target$,
) =>
    target$.createState;
Function YearPicker_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as YearPicker;
Function YearPicker_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is YearPicker;
Function _YearPicker_currentDate$(
  m.Scope scope$,
  YearPicker target$,
) =>
    () {
      return target$.currentDate;
    };
Function _YearPicker_firstDate$(
  m.Scope scope$,
  YearPicker target$,
) =>
    () {
      return target$.firstDate;
    };
Function _YearPicker_lastDate$(
  m.Scope scope$,
  YearPicker target$,
) =>
    () {
      return target$.lastDate;
    };
Function _YearPicker_initialDate$(
  m.Scope scope$,
  YearPicker target$,
) =>
    () {
      return target$.initialDate;
    };
Function _YearPicker_selectedDate$(
  m.Scope scope$,
  YearPicker target$,
) =>
    () {
      return target$.selectedDate;
    };
Function _YearPicker_onChanged$(
  m.Scope scope$,
  YearPicker target$,
) =>
    () {
      return target$.onChanged;
    };
Function _YearPicker_dragStartBehavior$(
  m.Scope scope$,
  YearPicker target$,
) =>
    () {
      return target$.dragStartBehavior;
    };
Function _YearPicker__$(m.Scope scope$) => ({
      Key? key,
      DateTime? currentDate,
      required DateTime firstDate,
      required DateTime lastDate,
      DateTime? initialDate,
      required DateTime selectedDate,
      required m.FunctionPointer onChanged,
      DragStartBehavior? dragStartBehavior,
    }) {
      void onChangedProxy(DateTime onChanged_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onChanged,
            [onChanged_value$],
            {},
          );
      return YearPicker(
        currentDate: currentDate,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        firstDate: firstDate,
        initialDate: initialDate,
        key: key,
        lastDate: lastDate,
        onChanged: onChangedProxy,
        selectedDate: selectedDate,
      );
    };
Function _YearPicker_createState$(
  m.Scope scope$,
  YearPicker target$,
) =>
    target$.createState;
