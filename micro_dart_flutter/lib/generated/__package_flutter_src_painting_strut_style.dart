// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/strut_style.dart';
import 'dart:ui' show TextLeadingDistribution;
import 'package:flutter/foundation.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/painting/text_style.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/strut_style.dart',
  {'StrutStyle.disabled': _StrutStyle_disabled$},
  {},
  {
    'StrutStyle': m.ClassMirror(
      'StrutStyle',
      {
        'fontFamily': _StrutStyle_fontFamily$,
        'fontSize': _StrutStyle_fontSize$,
        'height': _StrutStyle_height$,
        'leadingDistribution': _StrutStyle_leadingDistribution$,
        'fontWeight': _StrutStyle_fontWeight$,
        'fontStyle': _StrutStyle_fontStyle$,
        'leading': _StrutStyle_leading$,
        'forceStrutHeight': _StrutStyle_forceStrutHeight$,
        'debugLabel': _StrutStyle_debugLabel$,
        'fontFamilyFallback': _StrutStyle_fontFamilyFallback$,
        'hashCode': _StrutStyle_hashCode$,
        'compareTo': _StrutStyle_compareTo$,
        'inheritFromTextStyle': _StrutStyle_inheritFromTextStyle$,
        'toStringShort': _StrutStyle_toStringShort$,
        'debugFillProperties': _StrutStyle_debugFillProperties$,
      },
      {},
    )
  },
);
StrutStyle _StrutStyle_disabled$() {
  return StrutStyle.disabled;
}

String? _StrutStyle_fontFamily$(StrutStyle target) {
  return target.fontFamily;
}

double? _StrutStyle_fontSize$(StrutStyle target) {
  return target.fontSize;
}

double? _StrutStyle_height$(StrutStyle target) {
  return target.height;
}

TextLeadingDistribution? _StrutStyle_leadingDistribution$(StrutStyle target) {
  return target.leadingDistribution;
}

FontWeight? _StrutStyle_fontWeight$(StrutStyle target) {
  return target.fontWeight;
}

FontStyle? _StrutStyle_fontStyle$(StrutStyle target) {
  return target.fontStyle;
}

double? _StrutStyle_leading$(StrutStyle target) {
  return target.leading;
}

bool? _StrutStyle_forceStrutHeight$(StrutStyle target) {
  return target.forceStrutHeight;
}

String? _StrutStyle_debugLabel$(StrutStyle target) {
  return target.debugLabel;
}

List<String>? _StrutStyle_fontFamilyFallback$(StrutStyle target) {
  return target.fontFamilyFallback;
}

int _StrutStyle_hashCode$(StrutStyle target) {
  return target.hashCode;
}

Function _StrutStyle_compareTo$(
  m.Scope scope,
  StrutStyle target,
) =>
    target.compareTo;
Function _StrutStyle_inheritFromTextStyle$(
  m.Scope scope,
  StrutStyle target,
) =>
    target.inheritFromTextStyle;
Function _StrutStyle_toStringShort$(
  m.Scope scope,
  StrutStyle target,
) =>
    target.toStringShort;
Function _StrutStyle_debugFillProperties$(
  m.Scope scope,
  StrutStyle target,
) =>
    target.debugFillProperties;
