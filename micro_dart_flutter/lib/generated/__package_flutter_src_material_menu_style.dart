// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/menu_style.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/menu_anchor.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/menu_style.dart',
  {
    'MenuStyle.': _MenuStyle__$,
    'MenuStyle.lerp': _MenuStyle_lerp$,
  },
  {},
  {
    'MenuStyle': m.ClassMirror(
      'MenuStyle',
      {
        '#as': MenuStyle_as$,
        '#is': MenuStyle_is$,
        'backgroundColor': _MenuStyle_backgroundColor$,
        'shadowColor': _MenuStyle_shadowColor$,
        'surfaceTintColor': _MenuStyle_surfaceTintColor$,
        'elevation': _MenuStyle_elevation$,
        'padding': _MenuStyle_padding$,
        'minimumSize': _MenuStyle_minimumSize$,
        'fixedSize': _MenuStyle_fixedSize$,
        'maximumSize': _MenuStyle_maximumSize$,
        'side': _MenuStyle_side$,
        'shape': _MenuStyle_shape$,
        'mouseCursor': _MenuStyle_mouseCursor$,
        'visualDensity': _MenuStyle_visualDensity$,
        'alignment': _MenuStyle_alignment$,
        'hashCode': _MenuStyle_hashCode$,
        '==': _MenuStyle_eq$$,
        'copyWith': _MenuStyle_copyWith$,
        'merge': _MenuStyle_merge$,
        'debugFillProperties': _MenuStyle_debugFillProperties$,
      },
      {},
    )
  },
);
Function MenuStyle_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as MenuStyle;
Function MenuStyle_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is MenuStyle;
Function _MenuStyle_backgroundColor$(
  m.Scope scope$,
  MenuStyle target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _MenuStyle_shadowColor$(
  m.Scope scope$,
  MenuStyle target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _MenuStyle_surfaceTintColor$(
  m.Scope scope$,
  MenuStyle target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _MenuStyle_elevation$(
  m.Scope scope$,
  MenuStyle target$,
) =>
    () {
      return target$.elevation;
    };
Function _MenuStyle_padding$(
  m.Scope scope$,
  MenuStyle target$,
) =>
    () {
      return target$.padding;
    };
Function _MenuStyle_minimumSize$(
  m.Scope scope$,
  MenuStyle target$,
) =>
    () {
      return target$.minimumSize;
    };
Function _MenuStyle_fixedSize$(
  m.Scope scope$,
  MenuStyle target$,
) =>
    () {
      return target$.fixedSize;
    };
Function _MenuStyle_maximumSize$(
  m.Scope scope$,
  MenuStyle target$,
) =>
    () {
      return target$.maximumSize;
    };
Function _MenuStyle_side$(
  m.Scope scope$,
  MenuStyle target$,
) =>
    () {
      return target$.side;
    };
Function _MenuStyle_shape$(
  m.Scope scope$,
  MenuStyle target$,
) =>
    () {
      return target$.shape;
    };
Function _MenuStyle_mouseCursor$(
  m.Scope scope$,
  MenuStyle target$,
) =>
    () {
      return target$.mouseCursor;
    };
Function _MenuStyle_visualDensity$(
  m.Scope scope$,
  MenuStyle target$,
) =>
    () {
      return target$.visualDensity;
    };
Function _MenuStyle_alignment$(
  m.Scope scope$,
  MenuStyle target$,
) =>
    () {
      return target$.alignment;
    };
Function _MenuStyle_hashCode$(
  m.Scope scope$,
  MenuStyle target$,
) =>
    () {
      return target$.hashCode;
    };
Function _MenuStyle__$(m.Scope scope$) => ({
      MaterialStateProperty<Color>? backgroundColor,
      MaterialStateProperty<Color>? shadowColor,
      MaterialStateProperty<Color>? surfaceTintColor,
      MaterialStateProperty<double>? elevation,
      MaterialStateProperty<EdgeInsetsGeometry>? padding,
      MaterialStateProperty<Size>? minimumSize,
      MaterialStateProperty<Size>? fixedSize,
      MaterialStateProperty<Size>? maximumSize,
      MaterialStateProperty<BorderSide>? side,
      MaterialStateProperty<OutlinedBorder>? shape,
      MaterialStateProperty<MouseCursor>? mouseCursor,
      VisualDensity? visualDensity,
      AlignmentGeometry? alignment,
    }) {
      return MenuStyle(
        alignment: alignment,
        backgroundColor: backgroundColor,
        elevation: elevation,
        fixedSize: fixedSize,
        maximumSize: maximumSize,
        minimumSize: minimumSize,
        mouseCursor: mouseCursor,
        padding: padding,
        shadowColor: shadowColor,
        shape: shape,
        side: side,
        surfaceTintColor: surfaceTintColor,
        visualDensity: visualDensity,
      );
    };
Function _MenuStyle_eq$$(
  m.Scope scope$,
  MenuStyle target$,
) =>
    (Object other$) => target$ == other$;
Function _MenuStyle_copyWith$(
  m.Scope scope$,
  MenuStyle target$,
) =>
    target$.copyWith;
Function _MenuStyle_merge$(
  m.Scope scope$,
  MenuStyle target$,
) =>
    target$.merge;
Function _MenuStyle_lerp$(m.Scope scope$) => MenuStyle.lerp;
Function _MenuStyle_debugFillProperties$(
  m.Scope scope$,
  MenuStyle target$,
) =>
    target$.debugFillProperties;
