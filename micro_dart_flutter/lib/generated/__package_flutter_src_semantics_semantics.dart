// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/semantics/semantics.dart';
import 'dart:math';
import 'dart:ui';
import 'dart:ui'
    show
        Offset,
        Rect,
        SemanticsAction,
        SemanticsFlag,
        StringAttribute,
        TextDirection;
import 'package:collection/collection.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/painting.dart' show MatrixUtils, TransformProperty;
import 'package:flutter/services.dart';
import 'package:vector_math/vector_math_64.dart';
import 'package:flutter/src/semantics/binding.dart' show SemanticsBinding;
import 'package:flutter/src/semantics/semantics_event.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/semantics/semantics.dart',
  {
    'CustomSemanticsAction.getIdentifier':
        _CustomSemanticsAction_getIdentifier$,
    'CustomSemanticsAction.getAction': _CustomSemanticsAction_getAction$,
    'DebugSemanticsDumpOrder.inverseHitTest':
        _DebugSemanticsDumpOrder_inverseHitTest$,
    'DebugSemanticsDumpOrder.traversalOrder':
        _DebugSemanticsDumpOrder_traversalOrder$,
    'DebugSemanticsDumpOrder.values': _DebugSemanticsDumpOrder_values$,
    'debugResetSemanticsIdCounter': _debugResetSemanticsIdCounter$,
  },
  {},
  {
    'SemanticsTag': m.ClassMirror(
      'SemanticsTag',
      {
        'name': _SemanticsTag_name$,
        'toString': _SemanticsTag_toString$,
      },
      {},
    ),
    'ChildSemanticsConfigurationsResult': m.ClassMirror(
      'ChildSemanticsConfigurationsResult',
      {
        'mergeUp': _ChildSemanticsConfigurationsResult_mergeUp$,
        'siblingMergeGroups':
            _ChildSemanticsConfigurationsResult_siblingMergeGroups$,
      },
      {},
    ),
    'ChildSemanticsConfigurationsResultBuilder': m.ClassMirror(
      'ChildSemanticsConfigurationsResultBuilder',
      {
        'markAsMergeUp':
            _ChildSemanticsConfigurationsResultBuilder_markAsMergeUp$,
        'markAsSiblingMergeGroup':
            _ChildSemanticsConfigurationsResultBuilder_markAsSiblingMergeGroup$,
        'build': _ChildSemanticsConfigurationsResultBuilder_build$,
      },
      {},
    ),
    'CustomSemanticsAction': m.ClassMirror(
      'CustomSemanticsAction',
      {
        'label': _CustomSemanticsAction_label$,
        'hint': _CustomSemanticsAction_hint$,
        'action': _CustomSemanticsAction_action$,
        'hashCode': _CustomSemanticsAction_hashCode$,
        'toString': _CustomSemanticsAction_toString$,
      },
      {},
    ),
    'AttributedString': m.ClassMirror(
      'AttributedString',
      {
        'string': _AttributedString_string$,
        'attributes': _AttributedString_attributes$,
        'hashCode': _AttributedString_hashCode$,
        'toString': _AttributedString_toString$,
      },
      {},
    ),
    'AttributedStringProperty': m.ClassMirror(
      'AttributedStringProperty',
      {
        'showWhenEmpty': _AttributedStringProperty_showWhenEmpty$,
        'isInteresting': _AttributedStringProperty_isInteresting$,
        'valueToString': _AttributedStringProperty_valueToString$,
      },
      {},
    ),
    'SemanticsData': m.ClassMirror(
      'SemanticsData',
      {
        'flags': _SemanticsData_flags$,
        'actions': _SemanticsData_actions$,
        'attributedLabel': _SemanticsData_attributedLabel$,
        'attributedValue': _SemanticsData_attributedValue$,
        'attributedIncreasedValue': _SemanticsData_attributedIncreasedValue$,
        'attributedDecreasedValue': _SemanticsData_attributedDecreasedValue$,
        'attributedHint': _SemanticsData_attributedHint$,
        'tooltip': _SemanticsData_tooltip$,
        'textDirection': _SemanticsData_textDirection$,
        'textSelection': _SemanticsData_textSelection$,
        'scrollChildCount': _SemanticsData_scrollChildCount$,
        'scrollIndex': _SemanticsData_scrollIndex$,
        'scrollPosition': _SemanticsData_scrollPosition$,
        'scrollExtentMax': _SemanticsData_scrollExtentMax$,
        'scrollExtentMin': _SemanticsData_scrollExtentMin$,
        'platformViewId': _SemanticsData_platformViewId$,
        'maxValueLength': _SemanticsData_maxValueLength$,
        'currentValueLength': _SemanticsData_currentValueLength$,
        'rect': _SemanticsData_rect$,
        'tags': _SemanticsData_tags$,
        'transform': _SemanticsData_transform$,
        'elevation': _SemanticsData_elevation$,
        'thickness': _SemanticsData_thickness$,
        'customSemanticsActionIds': _SemanticsData_customSemanticsActionIds$,
        'label': _SemanticsData_label$,
        'value': _SemanticsData_value$,
        'increasedValue': _SemanticsData_increasedValue$,
        'decreasedValue': _SemanticsData_decreasedValue$,
        'hint': _SemanticsData_hint$,
        'hashCode': _SemanticsData_hashCode$,
        'hasFlag': _SemanticsData_hasFlag$,
        'hasAction': _SemanticsData_hasAction$,
        'toStringShort': _SemanticsData_toStringShort$,
        'debugFillProperties': _SemanticsData_debugFillProperties$,
      },
      {},
    ),
    'SemanticsHintOverrides': m.ClassMirror(
      'SemanticsHintOverrides',
      {
        'onTapHint': _SemanticsHintOverrides_onTapHint$,
        'onLongPressHint': _SemanticsHintOverrides_onLongPressHint$,
        'isNotEmpty': _SemanticsHintOverrides_isNotEmpty$,
        'hashCode': _SemanticsHintOverrides_hashCode$,
        'debugFillProperties': _SemanticsHintOverrides_debugFillProperties$,
      },
      {},
    ),
    'SemanticsProperties': m.ClassMirror(
      'SemanticsProperties',
      {
        'enabled': _SemanticsProperties_enabled$,
        'checked': _SemanticsProperties_checked$,
        'mixed': _SemanticsProperties_mixed$,
        'toggled': _SemanticsProperties_toggled$,
        'selected': _SemanticsProperties_selected$,
        'button': _SemanticsProperties_button$,
        'link': _SemanticsProperties_link$,
        'header': _SemanticsProperties_header$,
        'textField': _SemanticsProperties_textField$,
        'slider': _SemanticsProperties_slider$,
        'keyboardKey': _SemanticsProperties_keyboardKey$,
        'readOnly': _SemanticsProperties_readOnly$,
        'focusable': _SemanticsProperties_focusable$,
        'focused': _SemanticsProperties_focused$,
        'inMutuallyExclusiveGroup':
            _SemanticsProperties_inMutuallyExclusiveGroup$,
        'hidden': _SemanticsProperties_hidden$,
        'obscured': _SemanticsProperties_obscured$,
        'multiline': _SemanticsProperties_multiline$,
        'scopesRoute': _SemanticsProperties_scopesRoute$,
        'namesRoute': _SemanticsProperties_namesRoute$,
        'image': _SemanticsProperties_image$,
        'liveRegion': _SemanticsProperties_liveRegion$,
        'maxValueLength': _SemanticsProperties_maxValueLength$,
        'currentValueLength': _SemanticsProperties_currentValueLength$,
        'label': _SemanticsProperties_label$,
        'attributedLabel': _SemanticsProperties_attributedLabel$,
        'value': _SemanticsProperties_value$,
        'attributedValue': _SemanticsProperties_attributedValue$,
        'increasedValue': _SemanticsProperties_increasedValue$,
        'attributedIncreasedValue':
            _SemanticsProperties_attributedIncreasedValue$,
        'decreasedValue': _SemanticsProperties_decreasedValue$,
        'attributedDecreasedValue':
            _SemanticsProperties_attributedDecreasedValue$,
        'hint': _SemanticsProperties_hint$,
        'attributedHint': _SemanticsProperties_attributedHint$,
        'tooltip': _SemanticsProperties_tooltip$,
        'hintOverrides': _SemanticsProperties_hintOverrides$,
        'textDirection': _SemanticsProperties_textDirection$,
        'sortKey': _SemanticsProperties_sortKey$,
        'tagForChildren': _SemanticsProperties_tagForChildren$,
        'onTap': _SemanticsProperties_onTap$,
        'onLongPress': _SemanticsProperties_onLongPress$,
        'onScrollLeft': _SemanticsProperties_onScrollLeft$,
        'onScrollRight': _SemanticsProperties_onScrollRight$,
        'onScrollUp': _SemanticsProperties_onScrollUp$,
        'onScrollDown': _SemanticsProperties_onScrollDown$,
        'onIncrease': _SemanticsProperties_onIncrease$,
        'onDecrease': _SemanticsProperties_onDecrease$,
        'onCopy': _SemanticsProperties_onCopy$,
        'onCut': _SemanticsProperties_onCut$,
        'onPaste': _SemanticsProperties_onPaste$,
        'onMoveCursorForwardByCharacter':
            _SemanticsProperties_onMoveCursorForwardByCharacter$,
        'onMoveCursorBackwardByCharacter':
            _SemanticsProperties_onMoveCursorBackwardByCharacter$,
        'onMoveCursorForwardByWord':
            _SemanticsProperties_onMoveCursorForwardByWord$,
        'onMoveCursorBackwardByWord':
            _SemanticsProperties_onMoveCursorBackwardByWord$,
        'onSetSelection': _SemanticsProperties_onSetSelection$,
        'onSetText': _SemanticsProperties_onSetText$,
        'onDidGainAccessibilityFocus':
            _SemanticsProperties_onDidGainAccessibilityFocus$,
        'onDidLoseAccessibilityFocus':
            _SemanticsProperties_onDidLoseAccessibilityFocus$,
        'onDismiss': _SemanticsProperties_onDismiss$,
        'customSemanticsActions': _SemanticsProperties_customSemanticsActions$,
        'debugFillProperties': _SemanticsProperties_debugFillProperties$,
        'toStringShort': _SemanticsProperties_toStringShort$,
      },
      {},
    ),
    'SemanticsNode': m.ClassMirror(
      'SemanticsNode',
      {
        'key': _SemanticsNode_key$,
        'parentSemanticsClipRect': _SemanticsNode_parentSemanticsClipRect$,
        'parentPaintClipRect': _SemanticsNode_parentPaintClipRect$,
        'elevationAdjustment': _SemanticsNode_elevationAdjustment$,
        'indexInParent': _SemanticsNode_indexInParent$,
        'tags': _SemanticsNode_tags$,
        'id': _SemanticsNode_id$,
        'transform': _SemanticsNode_transform$,
        'rect': _SemanticsNode_rect$,
        'isInvisible': _SemanticsNode_isInvisible$,
        'isMergedIntoParent': _SemanticsNode_isMergedIntoParent$,
        'isPartOfNodeMerging': _SemanticsNode_isPartOfNodeMerging$,
        'mergeAllDescendantsIntoThisNode':
            _SemanticsNode_mergeAllDescendantsIntoThisNode$,
        'hasChildren': _SemanticsNode_hasChildren$,
        'childrenCount': _SemanticsNode_childrenCount$,
        'owner': _SemanticsNode_owner$,
        'parent': _SemanticsNode_parent$,
        'label': _SemanticsNode_label$,
        'attributedLabel': _SemanticsNode_attributedLabel$,
        'value': _SemanticsNode_value$,
        'attributedValue': _SemanticsNode_attributedValue$,
        'increasedValue': _SemanticsNode_increasedValue$,
        'attributedIncreasedValue': _SemanticsNode_attributedIncreasedValue$,
        'decreasedValue': _SemanticsNode_decreasedValue$,
        'attributedDecreasedValue': _SemanticsNode_attributedDecreasedValue$,
        'hint': _SemanticsNode_hint$,
        'attributedHint': _SemanticsNode_attributedHint$,
        'tooltip': _SemanticsNode_tooltip$,
        'elevation': _SemanticsNode_elevation$,
        'thickness': _SemanticsNode_thickness$,
        'hintOverrides': _SemanticsNode_hintOverrides$,
        'textDirection': _SemanticsNode_textDirection$,
        'sortKey': _SemanticsNode_sortKey$,
        'textSelection': _SemanticsNode_textSelection$,
        'isMultiline': _SemanticsNode_isMultiline$,
        'scrollChildCount': _SemanticsNode_scrollChildCount$,
        'scrollIndex': _SemanticsNode_scrollIndex$,
        'scrollPosition': _SemanticsNode_scrollPosition$,
        'scrollExtentMax': _SemanticsNode_scrollExtentMax$,
        'scrollExtentMin': _SemanticsNode_scrollExtentMin$,
        'platformViewId': _SemanticsNode_platformViewId$,
        'maxValueLength': _SemanticsNode_maxValueLength$,
        'currentValueLength': _SemanticsNode_currentValueLength$,
        'redepthChildren': _SemanticsNode_redepthChildren$,
        'attach': _SemanticsNode_attach$,
        'detach': _SemanticsNode_detach$,
        'isTagged': _SemanticsNode_isTagged$,
        'hasFlag': _SemanticsNode_hasFlag$,
        'updateWith': _SemanticsNode_updateWith$,
        'getSemanticsData': _SemanticsNode_getSemanticsData$,
        'sendEvent': _SemanticsNode_sendEvent$,
        'toStringShort': _SemanticsNode_toStringShort$,
        'debugFillProperties': _SemanticsNode_debugFillProperties$,
        'toStringDeep': _SemanticsNode_toStringDeep$,
        'toDiagnosticsNode': _SemanticsNode_toDiagnosticsNode$,
        'debugDescribeChildren': _SemanticsNode_debugDescribeChildren$,
        'debugListChildrenInOrder': _SemanticsNode_debugListChildrenInOrder$,
      },
      {
        'parentSemanticsClipRect': _SemanticsNode_parentSemanticsClipRect_set$,
        'parentPaintClipRect': _SemanticsNode_parentPaintClipRect_set$,
        'elevationAdjustment': _SemanticsNode_elevationAdjustment_set$,
        'indexInParent': _SemanticsNode_indexInParent_set$,
        'tags': _SemanticsNode_tags_set$,
        'transform': _SemanticsNode_transform_set$,
        'rect': _SemanticsNode_rect_set$,
        'isMergedIntoParent': _SemanticsNode_isMergedIntoParent_set$,
      },
    ),
    'SemanticsOwner': m.ClassMirror(
      'SemanticsOwner',
      {
        'onSemanticsUpdate': _SemanticsOwner_onSemanticsUpdate$,
        'rootSemanticsNode': _SemanticsOwner_rootSemanticsNode$,
        'dispose': _SemanticsOwner_dispose$,
        'sendSemanticsUpdate': _SemanticsOwner_sendSemanticsUpdate$,
        'performAction': _SemanticsOwner_performAction$,
        'performActionAt': _SemanticsOwner_performActionAt$,
        'toString': _SemanticsOwner_toString$,
      },
      {},
    ),
    'SemanticsConfiguration': m.ClassMirror(
      'SemanticsConfiguration',
      {
        'explicitChildNodes': _SemanticsConfiguration_explicitChildNodes$,
        'isBlockingSemanticsOfPreviouslyPaintedNodes':
            _SemanticsConfiguration_isBlockingSemanticsOfPreviouslyPaintedNodes$,
        'isSemanticBoundary': _SemanticsConfiguration_isSemanticBoundary$,
        'hasBeenAnnotated': _SemanticsConfiguration_hasBeenAnnotated$,
        'onTap': _SemanticsConfiguration_onTap$,
        'onLongPress': _SemanticsConfiguration_onLongPress$,
        'onScrollLeft': _SemanticsConfiguration_onScrollLeft$,
        'onDismiss': _SemanticsConfiguration_onDismiss$,
        'onScrollRight': _SemanticsConfiguration_onScrollRight$,
        'onScrollUp': _SemanticsConfiguration_onScrollUp$,
        'onScrollDown': _SemanticsConfiguration_onScrollDown$,
        'onIncrease': _SemanticsConfiguration_onIncrease$,
        'onDecrease': _SemanticsConfiguration_onDecrease$,
        'onCopy': _SemanticsConfiguration_onCopy$,
        'onCut': _SemanticsConfiguration_onCut$,
        'onPaste': _SemanticsConfiguration_onPaste$,
        'onShowOnScreen': _SemanticsConfiguration_onShowOnScreen$,
        'onMoveCursorForwardByCharacter':
            _SemanticsConfiguration_onMoveCursorForwardByCharacter$,
        'onMoveCursorBackwardByCharacter':
            _SemanticsConfiguration_onMoveCursorBackwardByCharacter$,
        'onMoveCursorForwardByWord':
            _SemanticsConfiguration_onMoveCursorForwardByWord$,
        'onMoveCursorBackwardByWord':
            _SemanticsConfiguration_onMoveCursorBackwardByWord$,
        'onSetSelection': _SemanticsConfiguration_onSetSelection$,
        'onSetText': _SemanticsConfiguration_onSetText$,
        'onDidGainAccessibilityFocus':
            _SemanticsConfiguration_onDidGainAccessibilityFocus$,
        'onDidLoseAccessibilityFocus':
            _SemanticsConfiguration_onDidLoseAccessibilityFocus$,
        'childConfigurationsDelegate':
            _SemanticsConfiguration_childConfigurationsDelegate$,
        'sortKey': _SemanticsConfiguration_sortKey$,
        'indexInParent': _SemanticsConfiguration_indexInParent$,
        'scrollChildCount': _SemanticsConfiguration_scrollChildCount$,
        'scrollIndex': _SemanticsConfiguration_scrollIndex$,
        'platformViewId': _SemanticsConfiguration_platformViewId$,
        'maxValueLength': _SemanticsConfiguration_maxValueLength$,
        'currentValueLength': _SemanticsConfiguration_currentValueLength$,
        'isMergingSemanticsOfDescendants':
            _SemanticsConfiguration_isMergingSemanticsOfDescendants$,
        'customSemanticsActions':
            _SemanticsConfiguration_customSemanticsActions$,
        'label': _SemanticsConfiguration_label$,
        'attributedLabel': _SemanticsConfiguration_attributedLabel$,
        'value': _SemanticsConfiguration_value$,
        'attributedValue': _SemanticsConfiguration_attributedValue$,
        'increasedValue': _SemanticsConfiguration_increasedValue$,
        'attributedIncreasedValue':
            _SemanticsConfiguration_attributedIncreasedValue$,
        'decreasedValue': _SemanticsConfiguration_decreasedValue$,
        'attributedDecreasedValue':
            _SemanticsConfiguration_attributedDecreasedValue$,
        'hint': _SemanticsConfiguration_hint$,
        'attributedHint': _SemanticsConfiguration_attributedHint$,
        'tooltip': _SemanticsConfiguration_tooltip$,
        'hintOverrides': _SemanticsConfiguration_hintOverrides$,
        'elevation': _SemanticsConfiguration_elevation$,
        'thickness': _SemanticsConfiguration_thickness$,
        'scopesRoute': _SemanticsConfiguration_scopesRoute$,
        'namesRoute': _SemanticsConfiguration_namesRoute$,
        'isImage': _SemanticsConfiguration_isImage$,
        'liveRegion': _SemanticsConfiguration_liveRegion$,
        'textDirection': _SemanticsConfiguration_textDirection$,
        'isSelected': _SemanticsConfiguration_isSelected$,
        'isEnabled': _SemanticsConfiguration_isEnabled$,
        'isChecked': _SemanticsConfiguration_isChecked$,
        'isCheckStateMixed': _SemanticsConfiguration_isCheckStateMixed$,
        'isToggled': _SemanticsConfiguration_isToggled$,
        'isInMutuallyExclusiveGroup':
            _SemanticsConfiguration_isInMutuallyExclusiveGroup$,
        'isFocusable': _SemanticsConfiguration_isFocusable$,
        'isFocused': _SemanticsConfiguration_isFocused$,
        'isButton': _SemanticsConfiguration_isButton$,
        'isLink': _SemanticsConfiguration_isLink$,
        'isHeader': _SemanticsConfiguration_isHeader$,
        'isSlider': _SemanticsConfiguration_isSlider$,
        'isKeyboardKey': _SemanticsConfiguration_isKeyboardKey$,
        'isHidden': _SemanticsConfiguration_isHidden$,
        'isTextField': _SemanticsConfiguration_isTextField$,
        'isReadOnly': _SemanticsConfiguration_isReadOnly$,
        'isObscured': _SemanticsConfiguration_isObscured$,
        'isMultiline': _SemanticsConfiguration_isMultiline$,
        'hasImplicitScrolling': _SemanticsConfiguration_hasImplicitScrolling$,
        'textSelection': _SemanticsConfiguration_textSelection$,
        'scrollPosition': _SemanticsConfiguration_scrollPosition$,
        'scrollExtentMax': _SemanticsConfiguration_scrollExtentMax$,
        'scrollExtentMin': _SemanticsConfiguration_scrollExtentMin$,
        'tagsForChildren': _SemanticsConfiguration_tagsForChildren$,
        'getActionHandler': _SemanticsConfiguration_getActionHandler$,
        'tagsChildrenWith': _SemanticsConfiguration_tagsChildrenWith$,
        'addTagForChildren': _SemanticsConfiguration_addTagForChildren$,
        'isCompatibleWith': _SemanticsConfiguration_isCompatibleWith$,
        'absorb': _SemanticsConfiguration_absorb$,
        'copy': _SemanticsConfiguration_copy$,
      },
      {
        'explicitChildNodes': _SemanticsConfiguration_explicitChildNodes_set$,
        'isBlockingSemanticsOfPreviouslyPaintedNodes':
            _SemanticsConfiguration_isBlockingSemanticsOfPreviouslyPaintedNodes_set$,
        'isSemanticBoundary': _SemanticsConfiguration_isSemanticBoundary_set$,
        'onTap': _SemanticsConfiguration_onTap_set$,
        'onLongPress': _SemanticsConfiguration_onLongPress_set$,
        'onScrollLeft': _SemanticsConfiguration_onScrollLeft_set$,
        'onDismiss': _SemanticsConfiguration_onDismiss_set$,
        'onScrollRight': _SemanticsConfiguration_onScrollRight_set$,
        'onScrollUp': _SemanticsConfiguration_onScrollUp_set$,
        'onScrollDown': _SemanticsConfiguration_onScrollDown_set$,
        'onIncrease': _SemanticsConfiguration_onIncrease_set$,
        'onDecrease': _SemanticsConfiguration_onDecrease_set$,
        'onCopy': _SemanticsConfiguration_onCopy_set$,
        'onCut': _SemanticsConfiguration_onCut_set$,
        'onPaste': _SemanticsConfiguration_onPaste_set$,
        'onShowOnScreen': _SemanticsConfiguration_onShowOnScreen_set$,
        'onMoveCursorForwardByCharacter':
            _SemanticsConfiguration_onMoveCursorForwardByCharacter_set$,
        'onMoveCursorBackwardByCharacter':
            _SemanticsConfiguration_onMoveCursorBackwardByCharacter_set$,
        'onMoveCursorForwardByWord':
            _SemanticsConfiguration_onMoveCursorForwardByWord_set$,
        'onMoveCursorBackwardByWord':
            _SemanticsConfiguration_onMoveCursorBackwardByWord_set$,
        'onSetSelection': _SemanticsConfiguration_onSetSelection_set$,
        'onSetText': _SemanticsConfiguration_onSetText_set$,
        'onDidGainAccessibilityFocus':
            _SemanticsConfiguration_onDidGainAccessibilityFocus_set$,
        'onDidLoseAccessibilityFocus':
            _SemanticsConfiguration_onDidLoseAccessibilityFocus_set$,
        'childConfigurationsDelegate':
            _SemanticsConfiguration_childConfigurationsDelegate_set$,
        'sortKey': _SemanticsConfiguration_sortKey_set$,
        'indexInParent': _SemanticsConfiguration_indexInParent_set$,
        'scrollChildCount': _SemanticsConfiguration_scrollChildCount_set$,
        'scrollIndex': _SemanticsConfiguration_scrollIndex_set$,
        'platformViewId': _SemanticsConfiguration_platformViewId_set$,
        'maxValueLength': _SemanticsConfiguration_maxValueLength_set$,
        'currentValueLength': _SemanticsConfiguration_currentValueLength_set$,
        'isMergingSemanticsOfDescendants':
            _SemanticsConfiguration_isMergingSemanticsOfDescendants_set$,
        'customSemanticsActions':
            _SemanticsConfiguration_customSemanticsActions_set$,
        'label': _SemanticsConfiguration_label_set$,
        'attributedLabel': _SemanticsConfiguration_attributedLabel_set$,
        'value': _SemanticsConfiguration_value_set$,
        'attributedValue': _SemanticsConfiguration_attributedValue_set$,
        'increasedValue': _SemanticsConfiguration_increasedValue_set$,
        'attributedIncreasedValue':
            _SemanticsConfiguration_attributedIncreasedValue_set$,
        'decreasedValue': _SemanticsConfiguration_decreasedValue_set$,
        'attributedDecreasedValue':
            _SemanticsConfiguration_attributedDecreasedValue_set$,
        'hint': _SemanticsConfiguration_hint_set$,
        'attributedHint': _SemanticsConfiguration_attributedHint_set$,
        'tooltip': _SemanticsConfiguration_tooltip_set$,
        'hintOverrides': _SemanticsConfiguration_hintOverrides_set$,
        'elevation': _SemanticsConfiguration_elevation_set$,
        'thickness': _SemanticsConfiguration_thickness_set$,
        'scopesRoute': _SemanticsConfiguration_scopesRoute_set$,
        'namesRoute': _SemanticsConfiguration_namesRoute_set$,
        'isImage': _SemanticsConfiguration_isImage_set$,
        'liveRegion': _SemanticsConfiguration_liveRegion_set$,
        'textDirection': _SemanticsConfiguration_textDirection_set$,
        'isSelected': _SemanticsConfiguration_isSelected_set$,
        'isEnabled': _SemanticsConfiguration_isEnabled_set$,
        'isChecked': _SemanticsConfiguration_isChecked_set$,
        'isCheckStateMixed': _SemanticsConfiguration_isCheckStateMixed_set$,
        'isToggled': _SemanticsConfiguration_isToggled_set$,
        'isInMutuallyExclusiveGroup':
            _SemanticsConfiguration_isInMutuallyExclusiveGroup_set$,
        'isFocusable': _SemanticsConfiguration_isFocusable_set$,
        'isFocused': _SemanticsConfiguration_isFocused_set$,
        'isButton': _SemanticsConfiguration_isButton_set$,
        'isLink': _SemanticsConfiguration_isLink_set$,
        'isHeader': _SemanticsConfiguration_isHeader_set$,
        'isSlider': _SemanticsConfiguration_isSlider_set$,
        'isKeyboardKey': _SemanticsConfiguration_isKeyboardKey_set$,
        'isHidden': _SemanticsConfiguration_isHidden_set$,
        'isTextField': _SemanticsConfiguration_isTextField_set$,
        'isReadOnly': _SemanticsConfiguration_isReadOnly_set$,
        'isObscured': _SemanticsConfiguration_isObscured_set$,
        'isMultiline': _SemanticsConfiguration_isMultiline_set$,
        'hasImplicitScrolling':
            _SemanticsConfiguration_hasImplicitScrolling_set$,
        'textSelection': _SemanticsConfiguration_textSelection_set$,
        'scrollPosition': _SemanticsConfiguration_scrollPosition_set$,
        'scrollExtentMax': _SemanticsConfiguration_scrollExtentMax_set$,
        'scrollExtentMin': _SemanticsConfiguration_scrollExtentMin_set$,
      },
    ),
    'SemanticsSortKey': m.ClassMirror(
      'SemanticsSortKey',
      {
        'name': _SemanticsSortKey_name$,
        'compareTo': _SemanticsSortKey_compareTo$,
        'doCompare': _SemanticsSortKey_doCompare$,
        'debugFillProperties': _SemanticsSortKey_debugFillProperties$,
      },
      {},
    ),
    'OrdinalSortKey': m.ClassMirror(
      'OrdinalSortKey',
      {
        'order': _OrdinalSortKey_order$,
        'doCompare': _OrdinalSortKey_doCompare$,
        'debugFillProperties': _OrdinalSortKey_debugFillProperties$,
      },
      {},
    ),
    'DebugSemanticsDumpOrder': m.ClassMirror(
      'DebugSemanticsDumpOrder',
      {},
      {},
    ),
  },
);
String _SemanticsTag_name$(SemanticsTag target) {
  return target.name;
}

Function _SemanticsTag_toString$(
  m.Scope scope,
  SemanticsTag target,
) =>
    target.toString;
List<SemanticsConfiguration> _ChildSemanticsConfigurationsResult_mergeUp$(
    ChildSemanticsConfigurationsResult target) {
  return target.mergeUp;
}

List<List<SemanticsConfiguration>>
    _ChildSemanticsConfigurationsResult_siblingMergeGroups$(
        ChildSemanticsConfigurationsResult target) {
  return target.siblingMergeGroups;
}

Function _ChildSemanticsConfigurationsResultBuilder_markAsMergeUp$(
  m.Scope scope,
  ChildSemanticsConfigurationsResultBuilder target,
) =>
    target.markAsMergeUp;
Function _ChildSemanticsConfigurationsResultBuilder_markAsSiblingMergeGroup$(
  m.Scope scope,
  ChildSemanticsConfigurationsResultBuilder target,
) =>
    target.markAsSiblingMergeGroup;
Function _ChildSemanticsConfigurationsResultBuilder_build$(
  m.Scope scope,
  ChildSemanticsConfigurationsResultBuilder target,
) =>
    target.build;
String? _CustomSemanticsAction_label$(CustomSemanticsAction target) {
  return target.label;
}

String? _CustomSemanticsAction_hint$(CustomSemanticsAction target) {
  return target.hint;
}

SemanticsAction? _CustomSemanticsAction_action$(CustomSemanticsAction target) {
  return target.action;
}

int _CustomSemanticsAction_hashCode$(CustomSemanticsAction target) {
  return target.hashCode;
}

Function _CustomSemanticsAction_toString$(
  m.Scope scope,
  CustomSemanticsAction target,
) =>
    target.toString;
Function _CustomSemanticsAction_getIdentifier$(m.Scope scope) =>
    CustomSemanticsAction.getIdentifier;
Function _CustomSemanticsAction_getAction$(m.Scope scope) =>
    CustomSemanticsAction.getAction;
String _AttributedString_string$(AttributedString target) {
  return target.string;
}

List<StringAttribute> _AttributedString_attributes$(AttributedString target) {
  return target.attributes;
}

int _AttributedString_hashCode$(AttributedString target) {
  return target.hashCode;
}

Function _AttributedString_toString$(
  m.Scope scope,
  AttributedString target,
) =>
    target.toString;
bool _AttributedStringProperty_showWhenEmpty$(AttributedStringProperty target) {
  return target.showWhenEmpty;
}

bool _AttributedStringProperty_isInteresting$(AttributedStringProperty target) {
  return target.isInteresting;
}

Function _AttributedStringProperty_valueToString$(
  m.Scope scope,
  AttributedStringProperty target,
) =>
    target.valueToString;
int _SemanticsData_flags$(SemanticsData target) {
  return target.flags;
}

int _SemanticsData_actions$(SemanticsData target) {
  return target.actions;
}

AttributedString _SemanticsData_attributedLabel$(SemanticsData target) {
  return target.attributedLabel;
}

AttributedString _SemanticsData_attributedValue$(SemanticsData target) {
  return target.attributedValue;
}

AttributedString _SemanticsData_attributedIncreasedValue$(
    SemanticsData target) {
  return target.attributedIncreasedValue;
}

AttributedString _SemanticsData_attributedDecreasedValue$(
    SemanticsData target) {
  return target.attributedDecreasedValue;
}

AttributedString _SemanticsData_attributedHint$(SemanticsData target) {
  return target.attributedHint;
}

String _SemanticsData_tooltip$(SemanticsData target) {
  return target.tooltip;
}

TextDirection? _SemanticsData_textDirection$(SemanticsData target) {
  return target.textDirection;
}

TextSelection? _SemanticsData_textSelection$(SemanticsData target) {
  return target.textSelection;
}

int? _SemanticsData_scrollChildCount$(SemanticsData target) {
  return target.scrollChildCount;
}

int? _SemanticsData_scrollIndex$(SemanticsData target) {
  return target.scrollIndex;
}

double? _SemanticsData_scrollPosition$(SemanticsData target) {
  return target.scrollPosition;
}

double? _SemanticsData_scrollExtentMax$(SemanticsData target) {
  return target.scrollExtentMax;
}

double? _SemanticsData_scrollExtentMin$(SemanticsData target) {
  return target.scrollExtentMin;
}

int? _SemanticsData_platformViewId$(SemanticsData target) {
  return target.platformViewId;
}

int? _SemanticsData_maxValueLength$(SemanticsData target) {
  return target.maxValueLength;
}

int? _SemanticsData_currentValueLength$(SemanticsData target) {
  return target.currentValueLength;
}

Rect _SemanticsData_rect$(SemanticsData target) {
  return target.rect;
}

Set<SemanticsTag>? _SemanticsData_tags$(SemanticsData target) {
  return target.tags;
}

Matrix4? _SemanticsData_transform$(SemanticsData target) {
  return target.transform;
}

double _SemanticsData_elevation$(SemanticsData target) {
  return target.elevation;
}

double _SemanticsData_thickness$(SemanticsData target) {
  return target.thickness;
}

List<int>? _SemanticsData_customSemanticsActionIds$(SemanticsData target) {
  return target.customSemanticsActionIds;
}

String _SemanticsData_label$(SemanticsData target) {
  return target.label;
}

String _SemanticsData_value$(SemanticsData target) {
  return target.value;
}

String _SemanticsData_increasedValue$(SemanticsData target) {
  return target.increasedValue;
}

String _SemanticsData_decreasedValue$(SemanticsData target) {
  return target.decreasedValue;
}

String _SemanticsData_hint$(SemanticsData target) {
  return target.hint;
}

int _SemanticsData_hashCode$(SemanticsData target) {
  return target.hashCode;
}

Function _SemanticsData_hasFlag$(
  m.Scope scope,
  SemanticsData target,
) =>
    target.hasFlag;
Function _SemanticsData_hasAction$(
  m.Scope scope,
  SemanticsData target,
) =>
    target.hasAction;
Function _SemanticsData_toStringShort$(
  m.Scope scope,
  SemanticsData target,
) =>
    target.toStringShort;
Function _SemanticsData_debugFillProperties$(
  m.Scope scope,
  SemanticsData target,
) =>
    target.debugFillProperties;
String? _SemanticsHintOverrides_onTapHint$(SemanticsHintOverrides target) {
  return target.onTapHint;
}

String? _SemanticsHintOverrides_onLongPressHint$(
    SemanticsHintOverrides target) {
  return target.onLongPressHint;
}

bool _SemanticsHintOverrides_isNotEmpty$(SemanticsHintOverrides target) {
  return target.isNotEmpty;
}

int _SemanticsHintOverrides_hashCode$(SemanticsHintOverrides target) {
  return target.hashCode;
}

Function _SemanticsHintOverrides_debugFillProperties$(
  m.Scope scope,
  SemanticsHintOverrides target,
) =>
    target.debugFillProperties;
bool? _SemanticsProperties_enabled$(SemanticsProperties target) {
  return target.enabled;
}

bool? _SemanticsProperties_checked$(SemanticsProperties target) {
  return target.checked;
}

bool? _SemanticsProperties_mixed$(SemanticsProperties target) {
  return target.mixed;
}

bool? _SemanticsProperties_toggled$(SemanticsProperties target) {
  return target.toggled;
}

bool? _SemanticsProperties_selected$(SemanticsProperties target) {
  return target.selected;
}

bool? _SemanticsProperties_button$(SemanticsProperties target) {
  return target.button;
}

bool? _SemanticsProperties_link$(SemanticsProperties target) {
  return target.link;
}

bool? _SemanticsProperties_header$(SemanticsProperties target) {
  return target.header;
}

bool? _SemanticsProperties_textField$(SemanticsProperties target) {
  return target.textField;
}

bool? _SemanticsProperties_slider$(SemanticsProperties target) {
  return target.slider;
}

bool? _SemanticsProperties_keyboardKey$(SemanticsProperties target) {
  return target.keyboardKey;
}

bool? _SemanticsProperties_readOnly$(SemanticsProperties target) {
  return target.readOnly;
}

bool? _SemanticsProperties_focusable$(SemanticsProperties target) {
  return target.focusable;
}

bool? _SemanticsProperties_focused$(SemanticsProperties target) {
  return target.focused;
}

bool? _SemanticsProperties_inMutuallyExclusiveGroup$(
    SemanticsProperties target) {
  return target.inMutuallyExclusiveGroup;
}

bool? _SemanticsProperties_hidden$(SemanticsProperties target) {
  return target.hidden;
}

bool? _SemanticsProperties_obscured$(SemanticsProperties target) {
  return target.obscured;
}

bool? _SemanticsProperties_multiline$(SemanticsProperties target) {
  return target.multiline;
}

bool? _SemanticsProperties_scopesRoute$(SemanticsProperties target) {
  return target.scopesRoute;
}

bool? _SemanticsProperties_namesRoute$(SemanticsProperties target) {
  return target.namesRoute;
}

bool? _SemanticsProperties_image$(SemanticsProperties target) {
  return target.image;
}

bool? _SemanticsProperties_liveRegion$(SemanticsProperties target) {
  return target.liveRegion;
}

int? _SemanticsProperties_maxValueLength$(SemanticsProperties target) {
  return target.maxValueLength;
}

int? _SemanticsProperties_currentValueLength$(SemanticsProperties target) {
  return target.currentValueLength;
}

String? _SemanticsProperties_label$(SemanticsProperties target) {
  return target.label;
}

AttributedString? _SemanticsProperties_attributedLabel$(
    SemanticsProperties target) {
  return target.attributedLabel;
}

String? _SemanticsProperties_value$(SemanticsProperties target) {
  return target.value;
}

AttributedString? _SemanticsProperties_attributedValue$(
    SemanticsProperties target) {
  return target.attributedValue;
}

String? _SemanticsProperties_increasedValue$(SemanticsProperties target) {
  return target.increasedValue;
}

AttributedString? _SemanticsProperties_attributedIncreasedValue$(
    SemanticsProperties target) {
  return target.attributedIncreasedValue;
}

String? _SemanticsProperties_decreasedValue$(SemanticsProperties target) {
  return target.decreasedValue;
}

AttributedString? _SemanticsProperties_attributedDecreasedValue$(
    SemanticsProperties target) {
  return target.attributedDecreasedValue;
}

String? _SemanticsProperties_hint$(SemanticsProperties target) {
  return target.hint;
}

AttributedString? _SemanticsProperties_attributedHint$(
    SemanticsProperties target) {
  return target.attributedHint;
}

String? _SemanticsProperties_tooltip$(SemanticsProperties target) {
  return target.tooltip;
}

SemanticsHintOverrides? _SemanticsProperties_hintOverrides$(
    SemanticsProperties target) {
  return target.hintOverrides;
}

TextDirection? _SemanticsProperties_textDirection$(SemanticsProperties target) {
  return target.textDirection;
}

SemanticsSortKey? _SemanticsProperties_sortKey$(SemanticsProperties target) {
  return target.sortKey;
}

SemanticsTag? _SemanticsProperties_tagForChildren$(SemanticsProperties target) {
  return target.tagForChildren;
}

void Function()? _SemanticsProperties_onTap$(SemanticsProperties target) {
  return target.onTap;
}

void Function()? _SemanticsProperties_onLongPress$(SemanticsProperties target) {
  return target.onLongPress;
}

void Function()? _SemanticsProperties_onScrollLeft$(
    SemanticsProperties target) {
  return target.onScrollLeft;
}

void Function()? _SemanticsProperties_onScrollRight$(
    SemanticsProperties target) {
  return target.onScrollRight;
}

void Function()? _SemanticsProperties_onScrollUp$(SemanticsProperties target) {
  return target.onScrollUp;
}

void Function()? _SemanticsProperties_onScrollDown$(
    SemanticsProperties target) {
  return target.onScrollDown;
}

void Function()? _SemanticsProperties_onIncrease$(SemanticsProperties target) {
  return target.onIncrease;
}

void Function()? _SemanticsProperties_onDecrease$(SemanticsProperties target) {
  return target.onDecrease;
}

void Function()? _SemanticsProperties_onCopy$(SemanticsProperties target) {
  return target.onCopy;
}

void Function()? _SemanticsProperties_onCut$(SemanticsProperties target) {
  return target.onCut;
}

void Function()? _SemanticsProperties_onPaste$(SemanticsProperties target) {
  return target.onPaste;
}

void Function(bool)? _SemanticsProperties_onMoveCursorForwardByCharacter$(
    SemanticsProperties target) {
  return target.onMoveCursorForwardByCharacter;
}

void Function(bool)? _SemanticsProperties_onMoveCursorBackwardByCharacter$(
    SemanticsProperties target) {
  return target.onMoveCursorBackwardByCharacter;
}

void Function(bool)? _SemanticsProperties_onMoveCursorForwardByWord$(
    SemanticsProperties target) {
  return target.onMoveCursorForwardByWord;
}

void Function(bool)? _SemanticsProperties_onMoveCursorBackwardByWord$(
    SemanticsProperties target) {
  return target.onMoveCursorBackwardByWord;
}

void Function(TextSelection)? _SemanticsProperties_onSetSelection$(
    SemanticsProperties target) {
  return target.onSetSelection;
}

void Function(String)? _SemanticsProperties_onSetText$(
    SemanticsProperties target) {
  return target.onSetText;
}

void Function()? _SemanticsProperties_onDidGainAccessibilityFocus$(
    SemanticsProperties target) {
  return target.onDidGainAccessibilityFocus;
}

void Function()? _SemanticsProperties_onDidLoseAccessibilityFocus$(
    SemanticsProperties target) {
  return target.onDidLoseAccessibilityFocus;
}

void Function()? _SemanticsProperties_onDismiss$(SemanticsProperties target) {
  return target.onDismiss;
}

Map<CustomSemanticsAction, void Function()>?
    _SemanticsProperties_customSemanticsActions$(SemanticsProperties target) {
  return target.customSemanticsActions;
}

Function _SemanticsProperties_debugFillProperties$(
  m.Scope scope,
  SemanticsProperties target,
) =>
    target.debugFillProperties;
Function _SemanticsProperties_toStringShort$(
  m.Scope scope,
  SemanticsProperties target,
) =>
    target.toStringShort;
Key? _SemanticsNode_key$(SemanticsNode target) {
  return target.key;
}

Rect? _SemanticsNode_parentSemanticsClipRect$(SemanticsNode target) {
  return target.parentSemanticsClipRect;
}

void _SemanticsNode_parentSemanticsClipRect_set$(
  SemanticsNode target,
  Rect? other,
) {
  target.parentSemanticsClipRect = other;
}

Rect? _SemanticsNode_parentPaintClipRect$(SemanticsNode target) {
  return target.parentPaintClipRect;
}

void _SemanticsNode_parentPaintClipRect_set$(
  SemanticsNode target,
  Rect? other,
) {
  target.parentPaintClipRect = other;
}

double? _SemanticsNode_elevationAdjustment$(SemanticsNode target) {
  return target.elevationAdjustment;
}

void _SemanticsNode_elevationAdjustment_set$(
  SemanticsNode target,
  double? other,
) {
  target.elevationAdjustment = other;
}

int? _SemanticsNode_indexInParent$(SemanticsNode target) {
  return target.indexInParent;
}

void _SemanticsNode_indexInParent_set$(
  SemanticsNode target,
  int? other,
) {
  target.indexInParent = other;
}

Set<SemanticsTag>? _SemanticsNode_tags$(SemanticsNode target) {
  return target.tags;
}

void _SemanticsNode_tags_set$(
  SemanticsNode target,
  Set<SemanticsTag>? other,
) {
  target.tags = other;
}

int _SemanticsNode_id$(SemanticsNode target) {
  return target.id;
}

Matrix4? _SemanticsNode_transform$(SemanticsNode target) {
  return target.transform;
}

void _SemanticsNode_transform_set$(
  SemanticsNode target,
  Matrix4? other,
) {
  target.transform = other;
}

Rect _SemanticsNode_rect$(SemanticsNode target) {
  return target.rect;
}

void _SemanticsNode_rect_set$(
  SemanticsNode target,
  Rect other,
) {
  target.rect = other;
}

bool _SemanticsNode_isInvisible$(SemanticsNode target) {
  return target.isInvisible;
}

bool _SemanticsNode_isMergedIntoParent$(SemanticsNode target) {
  return target.isMergedIntoParent;
}

void _SemanticsNode_isMergedIntoParent_set$(
  SemanticsNode target,
  bool other,
) {
  target.isMergedIntoParent = other;
}

bool _SemanticsNode_isPartOfNodeMerging$(SemanticsNode target) {
  return target.isPartOfNodeMerging;
}

bool _SemanticsNode_mergeAllDescendantsIntoThisNode$(SemanticsNode target) {
  return target.mergeAllDescendantsIntoThisNode;
}

bool _SemanticsNode_hasChildren$(SemanticsNode target) {
  return target.hasChildren;
}

int _SemanticsNode_childrenCount$(SemanticsNode target) {
  return target.childrenCount;
}

SemanticsOwner? _SemanticsNode_owner$(SemanticsNode target) {
  return target.owner;
}

SemanticsNode? _SemanticsNode_parent$(SemanticsNode target) {
  return target.parent;
}

String _SemanticsNode_label$(SemanticsNode target) {
  return target.label;
}

AttributedString _SemanticsNode_attributedLabel$(SemanticsNode target) {
  return target.attributedLabel;
}

String _SemanticsNode_value$(SemanticsNode target) {
  return target.value;
}

AttributedString _SemanticsNode_attributedValue$(SemanticsNode target) {
  return target.attributedValue;
}

String _SemanticsNode_increasedValue$(SemanticsNode target) {
  return target.increasedValue;
}

AttributedString _SemanticsNode_attributedIncreasedValue$(
    SemanticsNode target) {
  return target.attributedIncreasedValue;
}

String _SemanticsNode_decreasedValue$(SemanticsNode target) {
  return target.decreasedValue;
}

AttributedString _SemanticsNode_attributedDecreasedValue$(
    SemanticsNode target) {
  return target.attributedDecreasedValue;
}

String _SemanticsNode_hint$(SemanticsNode target) {
  return target.hint;
}

AttributedString _SemanticsNode_attributedHint$(SemanticsNode target) {
  return target.attributedHint;
}

String _SemanticsNode_tooltip$(SemanticsNode target) {
  return target.tooltip;
}

double _SemanticsNode_elevation$(SemanticsNode target) {
  return target.elevation;
}

double _SemanticsNode_thickness$(SemanticsNode target) {
  return target.thickness;
}

SemanticsHintOverrides? _SemanticsNode_hintOverrides$(SemanticsNode target) {
  return target.hintOverrides;
}

TextDirection? _SemanticsNode_textDirection$(SemanticsNode target) {
  return target.textDirection;
}

SemanticsSortKey? _SemanticsNode_sortKey$(SemanticsNode target) {
  return target.sortKey;
}

TextSelection? _SemanticsNode_textSelection$(SemanticsNode target) {
  return target.textSelection;
}

bool? _SemanticsNode_isMultiline$(SemanticsNode target) {
  return target.isMultiline;
}

int? _SemanticsNode_scrollChildCount$(SemanticsNode target) {
  return target.scrollChildCount;
}

int? _SemanticsNode_scrollIndex$(SemanticsNode target) {
  return target.scrollIndex;
}

double? _SemanticsNode_scrollPosition$(SemanticsNode target) {
  return target.scrollPosition;
}

double? _SemanticsNode_scrollExtentMax$(SemanticsNode target) {
  return target.scrollExtentMax;
}

double? _SemanticsNode_scrollExtentMin$(SemanticsNode target) {
  return target.scrollExtentMin;
}

int? _SemanticsNode_platformViewId$(SemanticsNode target) {
  return target.platformViewId;
}

int? _SemanticsNode_maxValueLength$(SemanticsNode target) {
  return target.maxValueLength;
}

int? _SemanticsNode_currentValueLength$(SemanticsNode target) {
  return target.currentValueLength;
}

Function _SemanticsNode_redepthChildren$(
  m.Scope scope,
  SemanticsNode target,
) =>
    target.redepthChildren;
Function _SemanticsNode_attach$(
  m.Scope scope,
  SemanticsNode target,
) =>
    target.attach;
Function _SemanticsNode_detach$(
  m.Scope scope,
  SemanticsNode target,
) =>
    target.detach;
Function _SemanticsNode_isTagged$(
  m.Scope scope,
  SemanticsNode target,
) =>
    target.isTagged;
Function _SemanticsNode_hasFlag$(
  m.Scope scope,
  SemanticsNode target,
) =>
    target.hasFlag;
Function _SemanticsNode_updateWith$(
  m.Scope scope,
  SemanticsNode target,
) =>
    target.updateWith;
Function _SemanticsNode_getSemanticsData$(
  m.Scope scope,
  SemanticsNode target,
) =>
    target.getSemanticsData;
Function _SemanticsNode_sendEvent$(
  m.Scope scope,
  SemanticsNode target,
) =>
    target.sendEvent;
Function _SemanticsNode_toStringShort$(
  m.Scope scope,
  SemanticsNode target,
) =>
    target.toStringShort;
Function _SemanticsNode_debugFillProperties$(
  m.Scope scope,
  SemanticsNode target,
) =>
    target.debugFillProperties;
Function _SemanticsNode_toStringDeep$(
  m.Scope scope,
  SemanticsNode target,
) =>
    target.toStringDeep;
Function _SemanticsNode_toDiagnosticsNode$(
  m.Scope scope,
  SemanticsNode target,
) =>
    target.toDiagnosticsNode;
Function _SemanticsNode_debugDescribeChildren$(
  m.Scope scope,
  SemanticsNode target,
) =>
    target.debugDescribeChildren;
Function _SemanticsNode_debugListChildrenInOrder$(
  m.Scope scope,
  SemanticsNode target,
) =>
    target.debugListChildrenInOrder;
void Function(SemanticsUpdate) _SemanticsOwner_onSemanticsUpdate$(
    SemanticsOwner target) {
  return target.onSemanticsUpdate;
}

SemanticsNode? _SemanticsOwner_rootSemanticsNode$(SemanticsOwner target) {
  return target.rootSemanticsNode;
}

Function _SemanticsOwner_dispose$(
  m.Scope scope,
  SemanticsOwner target,
) =>
    target.dispose;
Function _SemanticsOwner_sendSemanticsUpdate$(
  m.Scope scope,
  SemanticsOwner target,
) =>
    target.sendSemanticsUpdate;
Function _SemanticsOwner_performAction$(
  m.Scope scope,
  SemanticsOwner target,
) =>
    target.performAction;
Function _SemanticsOwner_performActionAt$(
  m.Scope scope,
  SemanticsOwner target,
) =>
    target.performActionAt;
Function _SemanticsOwner_toString$(
  m.Scope scope,
  SemanticsOwner target,
) =>
    target.toString;
bool _SemanticsConfiguration_explicitChildNodes$(
    SemanticsConfiguration target) {
  return target.explicitChildNodes;
}

void _SemanticsConfiguration_explicitChildNodes_set$(
  SemanticsConfiguration target,
  bool other,
) {
  target.explicitChildNodes = other;
}

bool _SemanticsConfiguration_isBlockingSemanticsOfPreviouslyPaintedNodes$(
    SemanticsConfiguration target) {
  return target.isBlockingSemanticsOfPreviouslyPaintedNodes;
}

void _SemanticsConfiguration_isBlockingSemanticsOfPreviouslyPaintedNodes_set$(
  SemanticsConfiguration target,
  bool other,
) {
  target.isBlockingSemanticsOfPreviouslyPaintedNodes = other;
}

bool _SemanticsConfiguration_isSemanticBoundary$(
    SemanticsConfiguration target) {
  return target.isSemanticBoundary;
}

void _SemanticsConfiguration_isSemanticBoundary_set$(
  SemanticsConfiguration target,
  bool other,
) {
  target.isSemanticBoundary = other;
}

bool _SemanticsConfiguration_hasBeenAnnotated$(SemanticsConfiguration target) {
  return target.hasBeenAnnotated;
}

void Function()? _SemanticsConfiguration_onTap$(SemanticsConfiguration target) {
  return target.onTap;
}

Function _SemanticsConfiguration_onTap_set$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope.engine.callFunctionPointer(
            scope,
            value!,
            [],
            {},
          );
      target.onTap = (value == null ? null : valueProxy);
    };
void Function()? _SemanticsConfiguration_onLongPress$(
    SemanticsConfiguration target) {
  return target.onLongPress;
}

Function _SemanticsConfiguration_onLongPress_set$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope.engine.callFunctionPointer(
            scope,
            value!,
            [],
            {},
          );
      target.onLongPress = (value == null ? null : valueProxy);
    };
void Function()? _SemanticsConfiguration_onScrollLeft$(
    SemanticsConfiguration target) {
  return target.onScrollLeft;
}

Function _SemanticsConfiguration_onScrollLeft_set$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope.engine.callFunctionPointer(
            scope,
            value!,
            [],
            {},
          );
      target.onScrollLeft = (value == null ? null : valueProxy);
    };
void Function()? _SemanticsConfiguration_onDismiss$(
    SemanticsConfiguration target) {
  return target.onDismiss;
}

Function _SemanticsConfiguration_onDismiss_set$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope.engine.callFunctionPointer(
            scope,
            value!,
            [],
            {},
          );
      target.onDismiss = (value == null ? null : valueProxy);
    };
void Function()? _SemanticsConfiguration_onScrollRight$(
    SemanticsConfiguration target) {
  return target.onScrollRight;
}

Function _SemanticsConfiguration_onScrollRight_set$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope.engine.callFunctionPointer(
            scope,
            value!,
            [],
            {},
          );
      target.onScrollRight = (value == null ? null : valueProxy);
    };
void Function()? _SemanticsConfiguration_onScrollUp$(
    SemanticsConfiguration target) {
  return target.onScrollUp;
}

Function _SemanticsConfiguration_onScrollUp_set$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope.engine.callFunctionPointer(
            scope,
            value!,
            [],
            {},
          );
      target.onScrollUp = (value == null ? null : valueProxy);
    };
void Function()? _SemanticsConfiguration_onScrollDown$(
    SemanticsConfiguration target) {
  return target.onScrollDown;
}

Function _SemanticsConfiguration_onScrollDown_set$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope.engine.callFunctionPointer(
            scope,
            value!,
            [],
            {},
          );
      target.onScrollDown = (value == null ? null : valueProxy);
    };
void Function()? _SemanticsConfiguration_onIncrease$(
    SemanticsConfiguration target) {
  return target.onIncrease;
}

Function _SemanticsConfiguration_onIncrease_set$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope.engine.callFunctionPointer(
            scope,
            value!,
            [],
            {},
          );
      target.onIncrease = (value == null ? null : valueProxy);
    };
void Function()? _SemanticsConfiguration_onDecrease$(
    SemanticsConfiguration target) {
  return target.onDecrease;
}

Function _SemanticsConfiguration_onDecrease_set$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope.engine.callFunctionPointer(
            scope,
            value!,
            [],
            {},
          );
      target.onDecrease = (value == null ? null : valueProxy);
    };
void Function()? _SemanticsConfiguration_onCopy$(
    SemanticsConfiguration target) {
  return target.onCopy;
}

Function _SemanticsConfiguration_onCopy_set$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope.engine.callFunctionPointer(
            scope,
            value!,
            [],
            {},
          );
      target.onCopy = (value == null ? null : valueProxy);
    };
void Function()? _SemanticsConfiguration_onCut$(SemanticsConfiguration target) {
  return target.onCut;
}

Function _SemanticsConfiguration_onCut_set$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope.engine.callFunctionPointer(
            scope,
            value!,
            [],
            {},
          );
      target.onCut = (value == null ? null : valueProxy);
    };
void Function()? _SemanticsConfiguration_onPaste$(
    SemanticsConfiguration target) {
  return target.onPaste;
}

Function _SemanticsConfiguration_onPaste_set$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope.engine.callFunctionPointer(
            scope,
            value!,
            [],
            {},
          );
      target.onPaste = (value == null ? null : valueProxy);
    };
void Function()? _SemanticsConfiguration_onShowOnScreen$(
    SemanticsConfiguration target) {
  return target.onShowOnScreen;
}

Function _SemanticsConfiguration_onShowOnScreen_set$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope.engine.callFunctionPointer(
            scope,
            value!,
            [],
            {},
          );
      target.onShowOnScreen = (value == null ? null : valueProxy);
    };
void Function(bool)? _SemanticsConfiguration_onMoveCursorForwardByCharacter$(
    SemanticsConfiguration target) {
  return target.onMoveCursorForwardByCharacter;
}

Function _SemanticsConfiguration_onMoveCursorForwardByCharacter_set$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    (m.FunctionPointer? value) {
      void valueProxy(bool value_extendSelection) =>
          scope.engine.callFunctionPointer(
            scope,
            value!,
            [value_extendSelection],
            {},
          );
      target.onMoveCursorForwardByCharacter =
          (value == null ? null : valueProxy);
    };
void Function(bool)? _SemanticsConfiguration_onMoveCursorBackwardByCharacter$(
    SemanticsConfiguration target) {
  return target.onMoveCursorBackwardByCharacter;
}

Function _SemanticsConfiguration_onMoveCursorBackwardByCharacter_set$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    (m.FunctionPointer? value) {
      void valueProxy(bool value_extendSelection) =>
          scope.engine.callFunctionPointer(
            scope,
            value!,
            [value_extendSelection],
            {},
          );
      target.onMoveCursorBackwardByCharacter =
          (value == null ? null : valueProxy);
    };
void Function(bool)? _SemanticsConfiguration_onMoveCursorForwardByWord$(
    SemanticsConfiguration target) {
  return target.onMoveCursorForwardByWord;
}

Function _SemanticsConfiguration_onMoveCursorForwardByWord_set$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    (m.FunctionPointer? value) {
      void valueProxy(bool value_extendSelection) =>
          scope.engine.callFunctionPointer(
            scope,
            value!,
            [value_extendSelection],
            {},
          );
      target.onMoveCursorForwardByWord = (value == null ? null : valueProxy);
    };
void Function(bool)? _SemanticsConfiguration_onMoveCursorBackwardByWord$(
    SemanticsConfiguration target) {
  return target.onMoveCursorBackwardByWord;
}

Function _SemanticsConfiguration_onMoveCursorBackwardByWord_set$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    (m.FunctionPointer? value) {
      void valueProxy(bool value_extendSelection) =>
          scope.engine.callFunctionPointer(
            scope,
            value!,
            [value_extendSelection],
            {},
          );
      target.onMoveCursorBackwardByWord = (value == null ? null : valueProxy);
    };
void Function(TextSelection)? _SemanticsConfiguration_onSetSelection$(
    SemanticsConfiguration target) {
  return target.onSetSelection;
}

Function _SemanticsConfiguration_onSetSelection_set$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    (m.FunctionPointer? value) {
      void valueProxy(TextSelection value_selection) =>
          scope.engine.callFunctionPointer(
            scope,
            value!,
            [value_selection],
            {},
          );
      target.onSetSelection = (value == null ? null : valueProxy);
    };
void Function(String)? _SemanticsConfiguration_onSetText$(
    SemanticsConfiguration target) {
  return target.onSetText;
}

Function _SemanticsConfiguration_onSetText_set$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    (m.FunctionPointer? value) {
      void valueProxy(String value_text) => scope.engine.callFunctionPointer(
            scope,
            value!,
            [value_text],
            {},
          );
      target.onSetText = (value == null ? null : valueProxy);
    };
void Function()? _SemanticsConfiguration_onDidGainAccessibilityFocus$(
    SemanticsConfiguration target) {
  return target.onDidGainAccessibilityFocus;
}

Function _SemanticsConfiguration_onDidGainAccessibilityFocus_set$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope.engine.callFunctionPointer(
            scope,
            value!,
            [],
            {},
          );
      target.onDidGainAccessibilityFocus = (value == null ? null : valueProxy);
    };
void Function()? _SemanticsConfiguration_onDidLoseAccessibilityFocus$(
    SemanticsConfiguration target) {
  return target.onDidLoseAccessibilityFocus;
}

Function _SemanticsConfiguration_onDidLoseAccessibilityFocus_set$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope.engine.callFunctionPointer(
            scope,
            value!,
            [],
            {},
          );
      target.onDidLoseAccessibilityFocus = (value == null ? null : valueProxy);
    };
ChildSemanticsConfigurationsResult Function(List<SemanticsConfiguration>)?
    _SemanticsConfiguration_childConfigurationsDelegate$(
        SemanticsConfiguration target) {
  return target.childConfigurationsDelegate;
}

Function _SemanticsConfiguration_childConfigurationsDelegate_set$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    (m.FunctionPointer? value) {
      ChildSemanticsConfigurationsResult valueProxy(
              List<SemanticsConfiguration> value_$p0) =>
          scope.engine.callFunctionPointer(
            scope,
            value!,
            [value_$p0],
            {},
          );
      target.childConfigurationsDelegate = (value == null ? null : valueProxy);
    };
SemanticsSortKey? _SemanticsConfiguration_sortKey$(
    SemanticsConfiguration target) {
  return target.sortKey;
}

void _SemanticsConfiguration_sortKey_set$(
  SemanticsConfiguration target,
  SemanticsSortKey? other,
) {
  target.sortKey = other;
}

int? _SemanticsConfiguration_indexInParent$(SemanticsConfiguration target) {
  return target.indexInParent;
}

void _SemanticsConfiguration_indexInParent_set$(
  SemanticsConfiguration target,
  int? other,
) {
  target.indexInParent = other;
}

int? _SemanticsConfiguration_scrollChildCount$(SemanticsConfiguration target) {
  return target.scrollChildCount;
}

void _SemanticsConfiguration_scrollChildCount_set$(
  SemanticsConfiguration target,
  int? other,
) {
  target.scrollChildCount = other;
}

int? _SemanticsConfiguration_scrollIndex$(SemanticsConfiguration target) {
  return target.scrollIndex;
}

void _SemanticsConfiguration_scrollIndex_set$(
  SemanticsConfiguration target,
  int? other,
) {
  target.scrollIndex = other;
}

int? _SemanticsConfiguration_platformViewId$(SemanticsConfiguration target) {
  return target.platformViewId;
}

void _SemanticsConfiguration_platformViewId_set$(
  SemanticsConfiguration target,
  int? other,
) {
  target.platformViewId = other;
}

int? _SemanticsConfiguration_maxValueLength$(SemanticsConfiguration target) {
  return target.maxValueLength;
}

void _SemanticsConfiguration_maxValueLength_set$(
  SemanticsConfiguration target,
  int? other,
) {
  target.maxValueLength = other;
}

int? _SemanticsConfiguration_currentValueLength$(
    SemanticsConfiguration target) {
  return target.currentValueLength;
}

void _SemanticsConfiguration_currentValueLength_set$(
  SemanticsConfiguration target,
  int? other,
) {
  target.currentValueLength = other;
}

bool _SemanticsConfiguration_isMergingSemanticsOfDescendants$(
    SemanticsConfiguration target) {
  return target.isMergingSemanticsOfDescendants;
}

void _SemanticsConfiguration_isMergingSemanticsOfDescendants_set$(
  SemanticsConfiguration target,
  bool other,
) {
  target.isMergingSemanticsOfDescendants = other;
}

Map<CustomSemanticsAction, void Function()>
    _SemanticsConfiguration_customSemanticsActions$(
        SemanticsConfiguration target) {
  return target.customSemanticsActions;
}

void _SemanticsConfiguration_customSemanticsActions_set$(
  SemanticsConfiguration target,
  Map<CustomSemanticsAction, void Function()> other,
) {
  target.customSemanticsActions = other;
}

String _SemanticsConfiguration_label$(SemanticsConfiguration target) {
  return target.label;
}

void _SemanticsConfiguration_label_set$(
  SemanticsConfiguration target,
  String other,
) {
  target.label = other;
}

AttributedString _SemanticsConfiguration_attributedLabel$(
    SemanticsConfiguration target) {
  return target.attributedLabel;
}

void _SemanticsConfiguration_attributedLabel_set$(
  SemanticsConfiguration target,
  AttributedString other,
) {
  target.attributedLabel = other;
}

String _SemanticsConfiguration_value$(SemanticsConfiguration target) {
  return target.value;
}

void _SemanticsConfiguration_value_set$(
  SemanticsConfiguration target,
  String other,
) {
  target.value = other;
}

AttributedString _SemanticsConfiguration_attributedValue$(
    SemanticsConfiguration target) {
  return target.attributedValue;
}

void _SemanticsConfiguration_attributedValue_set$(
  SemanticsConfiguration target,
  AttributedString other,
) {
  target.attributedValue = other;
}

String _SemanticsConfiguration_increasedValue$(SemanticsConfiguration target) {
  return target.increasedValue;
}

void _SemanticsConfiguration_increasedValue_set$(
  SemanticsConfiguration target,
  String other,
) {
  target.increasedValue = other;
}

AttributedString _SemanticsConfiguration_attributedIncreasedValue$(
    SemanticsConfiguration target) {
  return target.attributedIncreasedValue;
}

void _SemanticsConfiguration_attributedIncreasedValue_set$(
  SemanticsConfiguration target,
  AttributedString other,
) {
  target.attributedIncreasedValue = other;
}

String _SemanticsConfiguration_decreasedValue$(SemanticsConfiguration target) {
  return target.decreasedValue;
}

void _SemanticsConfiguration_decreasedValue_set$(
  SemanticsConfiguration target,
  String other,
) {
  target.decreasedValue = other;
}

AttributedString _SemanticsConfiguration_attributedDecreasedValue$(
    SemanticsConfiguration target) {
  return target.attributedDecreasedValue;
}

void _SemanticsConfiguration_attributedDecreasedValue_set$(
  SemanticsConfiguration target,
  AttributedString other,
) {
  target.attributedDecreasedValue = other;
}

String _SemanticsConfiguration_hint$(SemanticsConfiguration target) {
  return target.hint;
}

void _SemanticsConfiguration_hint_set$(
  SemanticsConfiguration target,
  String other,
) {
  target.hint = other;
}

AttributedString _SemanticsConfiguration_attributedHint$(
    SemanticsConfiguration target) {
  return target.attributedHint;
}

void _SemanticsConfiguration_attributedHint_set$(
  SemanticsConfiguration target,
  AttributedString other,
) {
  target.attributedHint = other;
}

String _SemanticsConfiguration_tooltip$(SemanticsConfiguration target) {
  return target.tooltip;
}

void _SemanticsConfiguration_tooltip_set$(
  SemanticsConfiguration target,
  String other,
) {
  target.tooltip = other;
}

SemanticsHintOverrides? _SemanticsConfiguration_hintOverrides$(
    SemanticsConfiguration target) {
  return target.hintOverrides;
}

void _SemanticsConfiguration_hintOverrides_set$(
  SemanticsConfiguration target,
  SemanticsHintOverrides? other,
) {
  target.hintOverrides = other;
}

double _SemanticsConfiguration_elevation$(SemanticsConfiguration target) {
  return target.elevation;
}

void _SemanticsConfiguration_elevation_set$(
  SemanticsConfiguration target,
  double other,
) {
  target.elevation = other;
}

double _SemanticsConfiguration_thickness$(SemanticsConfiguration target) {
  return target.thickness;
}

void _SemanticsConfiguration_thickness_set$(
  SemanticsConfiguration target,
  double other,
) {
  target.thickness = other;
}

bool _SemanticsConfiguration_scopesRoute$(SemanticsConfiguration target) {
  return target.scopesRoute;
}

void _SemanticsConfiguration_scopesRoute_set$(
  SemanticsConfiguration target,
  bool other,
) {
  target.scopesRoute = other;
}

bool _SemanticsConfiguration_namesRoute$(SemanticsConfiguration target) {
  return target.namesRoute;
}

void _SemanticsConfiguration_namesRoute_set$(
  SemanticsConfiguration target,
  bool other,
) {
  target.namesRoute = other;
}

bool _SemanticsConfiguration_isImage$(SemanticsConfiguration target) {
  return target.isImage;
}

void _SemanticsConfiguration_isImage_set$(
  SemanticsConfiguration target,
  bool other,
) {
  target.isImage = other;
}

bool _SemanticsConfiguration_liveRegion$(SemanticsConfiguration target) {
  return target.liveRegion;
}

void _SemanticsConfiguration_liveRegion_set$(
  SemanticsConfiguration target,
  bool other,
) {
  target.liveRegion = other;
}

TextDirection? _SemanticsConfiguration_textDirection$(
    SemanticsConfiguration target) {
  return target.textDirection;
}

void _SemanticsConfiguration_textDirection_set$(
  SemanticsConfiguration target,
  TextDirection? other,
) {
  target.textDirection = other;
}

bool _SemanticsConfiguration_isSelected$(SemanticsConfiguration target) {
  return target.isSelected;
}

void _SemanticsConfiguration_isSelected_set$(
  SemanticsConfiguration target,
  bool other,
) {
  target.isSelected = other;
}

bool? _SemanticsConfiguration_isEnabled$(SemanticsConfiguration target) {
  return target.isEnabled;
}

void _SemanticsConfiguration_isEnabled_set$(
  SemanticsConfiguration target,
  bool? other,
) {
  target.isEnabled = other;
}

bool? _SemanticsConfiguration_isChecked$(SemanticsConfiguration target) {
  return target.isChecked;
}

void _SemanticsConfiguration_isChecked_set$(
  SemanticsConfiguration target,
  bool? other,
) {
  target.isChecked = other;
}

bool? _SemanticsConfiguration_isCheckStateMixed$(
    SemanticsConfiguration target) {
  return target.isCheckStateMixed;
}

void _SemanticsConfiguration_isCheckStateMixed_set$(
  SemanticsConfiguration target,
  bool? other,
) {
  target.isCheckStateMixed = other;
}

bool? _SemanticsConfiguration_isToggled$(SemanticsConfiguration target) {
  return target.isToggled;
}

void _SemanticsConfiguration_isToggled_set$(
  SemanticsConfiguration target,
  bool? other,
) {
  target.isToggled = other;
}

bool _SemanticsConfiguration_isInMutuallyExclusiveGroup$(
    SemanticsConfiguration target) {
  return target.isInMutuallyExclusiveGroup;
}

void _SemanticsConfiguration_isInMutuallyExclusiveGroup_set$(
  SemanticsConfiguration target,
  bool other,
) {
  target.isInMutuallyExclusiveGroup = other;
}

bool _SemanticsConfiguration_isFocusable$(SemanticsConfiguration target) {
  return target.isFocusable;
}

void _SemanticsConfiguration_isFocusable_set$(
  SemanticsConfiguration target,
  bool other,
) {
  target.isFocusable = other;
}

bool _SemanticsConfiguration_isFocused$(SemanticsConfiguration target) {
  return target.isFocused;
}

void _SemanticsConfiguration_isFocused_set$(
  SemanticsConfiguration target,
  bool other,
) {
  target.isFocused = other;
}

bool _SemanticsConfiguration_isButton$(SemanticsConfiguration target) {
  return target.isButton;
}

void _SemanticsConfiguration_isButton_set$(
  SemanticsConfiguration target,
  bool other,
) {
  target.isButton = other;
}

bool _SemanticsConfiguration_isLink$(SemanticsConfiguration target) {
  return target.isLink;
}

void _SemanticsConfiguration_isLink_set$(
  SemanticsConfiguration target,
  bool other,
) {
  target.isLink = other;
}

bool _SemanticsConfiguration_isHeader$(SemanticsConfiguration target) {
  return target.isHeader;
}

void _SemanticsConfiguration_isHeader_set$(
  SemanticsConfiguration target,
  bool other,
) {
  target.isHeader = other;
}

bool _SemanticsConfiguration_isSlider$(SemanticsConfiguration target) {
  return target.isSlider;
}

void _SemanticsConfiguration_isSlider_set$(
  SemanticsConfiguration target,
  bool other,
) {
  target.isSlider = other;
}

bool _SemanticsConfiguration_isKeyboardKey$(SemanticsConfiguration target) {
  return target.isKeyboardKey;
}

void _SemanticsConfiguration_isKeyboardKey_set$(
  SemanticsConfiguration target,
  bool other,
) {
  target.isKeyboardKey = other;
}

bool _SemanticsConfiguration_isHidden$(SemanticsConfiguration target) {
  return target.isHidden;
}

void _SemanticsConfiguration_isHidden_set$(
  SemanticsConfiguration target,
  bool other,
) {
  target.isHidden = other;
}

bool _SemanticsConfiguration_isTextField$(SemanticsConfiguration target) {
  return target.isTextField;
}

void _SemanticsConfiguration_isTextField_set$(
  SemanticsConfiguration target,
  bool other,
) {
  target.isTextField = other;
}

bool _SemanticsConfiguration_isReadOnly$(SemanticsConfiguration target) {
  return target.isReadOnly;
}

void _SemanticsConfiguration_isReadOnly_set$(
  SemanticsConfiguration target,
  bool other,
) {
  target.isReadOnly = other;
}

bool _SemanticsConfiguration_isObscured$(SemanticsConfiguration target) {
  return target.isObscured;
}

void _SemanticsConfiguration_isObscured_set$(
  SemanticsConfiguration target,
  bool other,
) {
  target.isObscured = other;
}

bool _SemanticsConfiguration_isMultiline$(SemanticsConfiguration target) {
  return target.isMultiline;
}

void _SemanticsConfiguration_isMultiline_set$(
  SemanticsConfiguration target,
  bool other,
) {
  target.isMultiline = other;
}

bool _SemanticsConfiguration_hasImplicitScrolling$(
    SemanticsConfiguration target) {
  return target.hasImplicitScrolling;
}

void _SemanticsConfiguration_hasImplicitScrolling_set$(
  SemanticsConfiguration target,
  bool other,
) {
  target.hasImplicitScrolling = other;
}

TextSelection? _SemanticsConfiguration_textSelection$(
    SemanticsConfiguration target) {
  return target.textSelection;
}

void _SemanticsConfiguration_textSelection_set$(
  SemanticsConfiguration target,
  TextSelection? other,
) {
  target.textSelection = other;
}

double? _SemanticsConfiguration_scrollPosition$(SemanticsConfiguration target) {
  return target.scrollPosition;
}

void _SemanticsConfiguration_scrollPosition_set$(
  SemanticsConfiguration target,
  double? other,
) {
  target.scrollPosition = other;
}

double? _SemanticsConfiguration_scrollExtentMax$(
    SemanticsConfiguration target) {
  return target.scrollExtentMax;
}

void _SemanticsConfiguration_scrollExtentMax_set$(
  SemanticsConfiguration target,
  double? other,
) {
  target.scrollExtentMax = other;
}

double? _SemanticsConfiguration_scrollExtentMin$(
    SemanticsConfiguration target) {
  return target.scrollExtentMin;
}

void _SemanticsConfiguration_scrollExtentMin_set$(
  SemanticsConfiguration target,
  double? other,
) {
  target.scrollExtentMin = other;
}

Iterable<SemanticsTag>? _SemanticsConfiguration_tagsForChildren$(
    SemanticsConfiguration target) {
  return target.tagsForChildren;
}

Function _SemanticsConfiguration_getActionHandler$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    target.getActionHandler;
Function _SemanticsConfiguration_tagsChildrenWith$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    target.tagsChildrenWith;
Function _SemanticsConfiguration_addTagForChildren$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    target.addTagForChildren;
Function _SemanticsConfiguration_isCompatibleWith$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    target.isCompatibleWith;
Function _SemanticsConfiguration_absorb$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    target.absorb;
Function _SemanticsConfiguration_copy$(
  m.Scope scope,
  SemanticsConfiguration target,
) =>
    target.copy;
String? _SemanticsSortKey_name$(SemanticsSortKey target) {
  return target.name;
}

Function _SemanticsSortKey_compareTo$(
  m.Scope scope,
  SemanticsSortKey target,
) =>
    target.compareTo;
Function _SemanticsSortKey_doCompare$(
  m.Scope scope,
  SemanticsSortKey target,
) =>
    target.doCompare;
Function _SemanticsSortKey_debugFillProperties$(
  m.Scope scope,
  SemanticsSortKey target,
) =>
    target.debugFillProperties;
double _OrdinalSortKey_order$(OrdinalSortKey target) {
  return target.order;
}

Function _OrdinalSortKey_doCompare$(
  m.Scope scope,
  OrdinalSortKey target,
) =>
    target.doCompare;
Function _OrdinalSortKey_debugFillProperties$(
  m.Scope scope,
  OrdinalSortKey target,
) =>
    target.debugFillProperties;
DebugSemanticsDumpOrder _DebugSemanticsDumpOrder_inverseHitTest$() {
  return DebugSemanticsDumpOrder.inverseHitTest;
}

DebugSemanticsDumpOrder _DebugSemanticsDumpOrder_traversalOrder$() {
  return DebugSemanticsDumpOrder.traversalOrder;
}

List<DebugSemanticsDumpOrder> _DebugSemanticsDumpOrder_values$() {
  return DebugSemanticsDumpOrder.values;
}

Function _debugResetSemanticsIdCounter$(m.Scope scope) =>
    debugResetSemanticsIdCounter;
