// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/semantics/semantics.dart';
import 'dart:math';
import 'dart:ui';
import 'dart:ui'
    show
        Offset,
        Rect,
        SemanticsAction,
        SemanticsFlag,
        StringAttribute,
        TextDirection;
import 'package:collection/collection.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/painting.dart' show MatrixUtils, TransformProperty;
import 'package:flutter/services.dart';
import 'package:vector_math/vector_math_64.dart';
import 'package:flutter/src/semantics/binding.dart' show SemanticsBinding;
import 'package:flutter/src/semantics/semantics_event.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/semantics/semantics.dart',
  {
    'SemanticsTag.': _SemanticsTag__$,
    'ChildSemanticsConfigurationsResultBuilder.':
        _ChildSemanticsConfigurationsResultBuilder__$,
    'CustomSemanticsAction.': _CustomSemanticsAction__$,
    'CustomSemanticsAction.overridingAction':
        _CustomSemanticsAction_overridingAction_$,
    'CustomSemanticsAction.getIdentifier':
        _CustomSemanticsAction_getIdentifier$,
    'CustomSemanticsAction.getAction': _CustomSemanticsAction_getAction$,
    'AttributedString.': _AttributedString__$,
    'AttributedStringProperty.': _AttributedStringProperty__$,
    'SemanticsData.': _SemanticsData__$,
    'SemanticsHintOverrides.': _SemanticsHintOverrides__$,
    'SemanticsProperties.': _SemanticsProperties__$,
    'SemanticsNode.': _SemanticsNode__$,
    'SemanticsNode.root': _SemanticsNode_root_$,
    'SemanticsOwner.': _SemanticsOwner__$,
    'SemanticsConfiguration.': _SemanticsConfiguration__$,
    'OrdinalSortKey.': _OrdinalSortKey__$,
    'DebugSemanticsDumpOrder.inverseHitTest':
        _DebugSemanticsDumpOrder_inverseHitTest$,
    'DebugSemanticsDumpOrder.traversalOrder':
        _DebugSemanticsDumpOrder_traversalOrder$,
    'DebugSemanticsDumpOrder.values': _DebugSemanticsDumpOrder_values$,
    'debugResetSemanticsIdCounter': _debugResetSemanticsIdCounter$,
  },
  {},
  {
    'SemanticsTag': m.ClassMirror(
      'SemanticsTag',
      {
        '#as': SemanticsTag_as$,
        '#is': SemanticsTag_is$,
        'name': _SemanticsTag_name$,
        'toString': _SemanticsTag_toString$,
      },
      {},
    ),
    'ChildSemanticsConfigurationsResult': m.ClassMirror(
      'ChildSemanticsConfigurationsResult',
      {
        '#as': ChildSemanticsConfigurationsResult_as$,
        '#is': ChildSemanticsConfigurationsResult_is$,
        'mergeUp': _ChildSemanticsConfigurationsResult_mergeUp$,
        'siblingMergeGroups':
            _ChildSemanticsConfigurationsResult_siblingMergeGroups$,
      },
      {},
    ),
    'ChildSemanticsConfigurationsResultBuilder': m.ClassMirror(
      'ChildSemanticsConfigurationsResultBuilder',
      {
        '#as': ChildSemanticsConfigurationsResultBuilder_as$,
        '#is': ChildSemanticsConfigurationsResultBuilder_is$,
        'markAsMergeUp':
            _ChildSemanticsConfigurationsResultBuilder_markAsMergeUp$,
        'markAsSiblingMergeGroup':
            _ChildSemanticsConfigurationsResultBuilder_markAsSiblingMergeGroup$,
        'build': _ChildSemanticsConfigurationsResultBuilder_build$,
      },
      {},
    ),
    'CustomSemanticsAction': m.ClassMirror(
      'CustomSemanticsAction',
      {
        '#as': CustomSemanticsAction_as$,
        '#is': CustomSemanticsAction_is$,
        'label': _CustomSemanticsAction_label$,
        'hint': _CustomSemanticsAction_hint$,
        'action': _CustomSemanticsAction_action$,
        'hashCode': _CustomSemanticsAction_hashCode$,
        '==': _CustomSemanticsAction_eq$$,
        'toString': _CustomSemanticsAction_toString$,
      },
      {},
    ),
    'AttributedString': m.ClassMirror(
      'AttributedString',
      {
        '#as': AttributedString_as$,
        '#is': AttributedString_is$,
        'string': _AttributedString_string$,
        'attributes': _AttributedString_attributes$,
        'hashCode': _AttributedString_hashCode$,
        '+': _AttributedString_plus$$,
        '==': _AttributedString_eq$$,
        'toString': _AttributedString_toString$,
      },
      {},
    ),
    'AttributedStringProperty': m.ClassMirror(
      'AttributedStringProperty',
      {
        '#as': AttributedStringProperty_as$,
        '#is': AttributedStringProperty_is$,
        'showWhenEmpty': _AttributedStringProperty_showWhenEmpty$,
        'isInteresting': _AttributedStringProperty_isInteresting$,
        'valueToString': _AttributedStringProperty_valueToString$,
      },
      {},
    ),
    'SemanticsData': m.ClassMirror(
      'SemanticsData',
      {
        '#as': SemanticsData_as$,
        '#is': SemanticsData_is$,
        'flags': _SemanticsData_flags$,
        'actions': _SemanticsData_actions$,
        'attributedLabel': _SemanticsData_attributedLabel$,
        'attributedValue': _SemanticsData_attributedValue$,
        'attributedIncreasedValue': _SemanticsData_attributedIncreasedValue$,
        'attributedDecreasedValue': _SemanticsData_attributedDecreasedValue$,
        'attributedHint': _SemanticsData_attributedHint$,
        'tooltip': _SemanticsData_tooltip$,
        'textDirection': _SemanticsData_textDirection$,
        'textSelection': _SemanticsData_textSelection$,
        'scrollChildCount': _SemanticsData_scrollChildCount$,
        'scrollIndex': _SemanticsData_scrollIndex$,
        'scrollPosition': _SemanticsData_scrollPosition$,
        'scrollExtentMax': _SemanticsData_scrollExtentMax$,
        'scrollExtentMin': _SemanticsData_scrollExtentMin$,
        'platformViewId': _SemanticsData_platformViewId$,
        'maxValueLength': _SemanticsData_maxValueLength$,
        'currentValueLength': _SemanticsData_currentValueLength$,
        'rect': _SemanticsData_rect$,
        'tags': _SemanticsData_tags$,
        'transform': _SemanticsData_transform$,
        'elevation': _SemanticsData_elevation$,
        'thickness': _SemanticsData_thickness$,
        'customSemanticsActionIds': _SemanticsData_customSemanticsActionIds$,
        'label': _SemanticsData_label$,
        'value': _SemanticsData_value$,
        'increasedValue': _SemanticsData_increasedValue$,
        'decreasedValue': _SemanticsData_decreasedValue$,
        'hint': _SemanticsData_hint$,
        'hashCode': _SemanticsData_hashCode$,
        'hasFlag': _SemanticsData_hasFlag$,
        'hasAction': _SemanticsData_hasAction$,
        'toStringShort': _SemanticsData_toStringShort$,
        'debugFillProperties': _SemanticsData_debugFillProperties$,
        '==': _SemanticsData_eq$$,
      },
      {},
    ),
    'SemanticsHintOverrides': m.ClassMirror(
      'SemanticsHintOverrides',
      {
        '#as': SemanticsHintOverrides_as$,
        '#is': SemanticsHintOverrides_is$,
        'onTapHint': _SemanticsHintOverrides_onTapHint$,
        'onLongPressHint': _SemanticsHintOverrides_onLongPressHint$,
        'isNotEmpty': _SemanticsHintOverrides_isNotEmpty$,
        'hashCode': _SemanticsHintOverrides_hashCode$,
        '==': _SemanticsHintOverrides_eq$$,
        'debugFillProperties': _SemanticsHintOverrides_debugFillProperties$,
      },
      {},
    ),
    'SemanticsProperties': m.ClassMirror(
      'SemanticsProperties',
      {
        '#as': SemanticsProperties_as$,
        '#is': SemanticsProperties_is$,
        'enabled': _SemanticsProperties_enabled$,
        'checked': _SemanticsProperties_checked$,
        'mixed': _SemanticsProperties_mixed$,
        'toggled': _SemanticsProperties_toggled$,
        'selected': _SemanticsProperties_selected$,
        'button': _SemanticsProperties_button$,
        'link': _SemanticsProperties_link$,
        'header': _SemanticsProperties_header$,
        'textField': _SemanticsProperties_textField$,
        'slider': _SemanticsProperties_slider$,
        'keyboardKey': _SemanticsProperties_keyboardKey$,
        'readOnly': _SemanticsProperties_readOnly$,
        'focusable': _SemanticsProperties_focusable$,
        'focused': _SemanticsProperties_focused$,
        'inMutuallyExclusiveGroup':
            _SemanticsProperties_inMutuallyExclusiveGroup$,
        'hidden': _SemanticsProperties_hidden$,
        'obscured': _SemanticsProperties_obscured$,
        'multiline': _SemanticsProperties_multiline$,
        'scopesRoute': _SemanticsProperties_scopesRoute$,
        'namesRoute': _SemanticsProperties_namesRoute$,
        'image': _SemanticsProperties_image$,
        'liveRegion': _SemanticsProperties_liveRegion$,
        'maxValueLength': _SemanticsProperties_maxValueLength$,
        'currentValueLength': _SemanticsProperties_currentValueLength$,
        'label': _SemanticsProperties_label$,
        'attributedLabel': _SemanticsProperties_attributedLabel$,
        'value': _SemanticsProperties_value$,
        'attributedValue': _SemanticsProperties_attributedValue$,
        'increasedValue': _SemanticsProperties_increasedValue$,
        'attributedIncreasedValue':
            _SemanticsProperties_attributedIncreasedValue$,
        'decreasedValue': _SemanticsProperties_decreasedValue$,
        'attributedDecreasedValue':
            _SemanticsProperties_attributedDecreasedValue$,
        'hint': _SemanticsProperties_hint$,
        'attributedHint': _SemanticsProperties_attributedHint$,
        'tooltip': _SemanticsProperties_tooltip$,
        'hintOverrides': _SemanticsProperties_hintOverrides$,
        'textDirection': _SemanticsProperties_textDirection$,
        'sortKey': _SemanticsProperties_sortKey$,
        'tagForChildren': _SemanticsProperties_tagForChildren$,
        'onTap': _SemanticsProperties_onTap$,
        'onLongPress': _SemanticsProperties_onLongPress$,
        'onScrollLeft': _SemanticsProperties_onScrollLeft$,
        'onScrollRight': _SemanticsProperties_onScrollRight$,
        'onScrollUp': _SemanticsProperties_onScrollUp$,
        'onScrollDown': _SemanticsProperties_onScrollDown$,
        'onIncrease': _SemanticsProperties_onIncrease$,
        'onDecrease': _SemanticsProperties_onDecrease$,
        'onCopy': _SemanticsProperties_onCopy$,
        'onCut': _SemanticsProperties_onCut$,
        'onPaste': _SemanticsProperties_onPaste$,
        'onMoveCursorForwardByCharacter':
            _SemanticsProperties_onMoveCursorForwardByCharacter$,
        'onMoveCursorBackwardByCharacter':
            _SemanticsProperties_onMoveCursorBackwardByCharacter$,
        'onMoveCursorForwardByWord':
            _SemanticsProperties_onMoveCursorForwardByWord$,
        'onMoveCursorBackwardByWord':
            _SemanticsProperties_onMoveCursorBackwardByWord$,
        'onSetSelection': _SemanticsProperties_onSetSelection$,
        'onSetText': _SemanticsProperties_onSetText$,
        'onDidGainAccessibilityFocus':
            _SemanticsProperties_onDidGainAccessibilityFocus$,
        'onDidLoseAccessibilityFocus':
            _SemanticsProperties_onDidLoseAccessibilityFocus$,
        'onDismiss': _SemanticsProperties_onDismiss$,
        'customSemanticsActions': _SemanticsProperties_customSemanticsActions$,
        'debugFillProperties': _SemanticsProperties_debugFillProperties$,
        'toStringShort': _SemanticsProperties_toStringShort$,
      },
      {},
    ),
    'SemanticsNode': m.ClassMirror(
      'SemanticsNode',
      {
        '#as': SemanticsNode_as$,
        '#is': SemanticsNode_is$,
        'key': _SemanticsNode_key$,
        'parentSemanticsClipRect': _SemanticsNode_parentSemanticsClipRect$,
        'parentPaintClipRect': _SemanticsNode_parentPaintClipRect$,
        'elevationAdjustment': _SemanticsNode_elevationAdjustment$,
        'indexInParent': _SemanticsNode_indexInParent$,
        'tags': _SemanticsNode_tags$,
        'id': _SemanticsNode_id$,
        'transform': _SemanticsNode_transform$,
        'rect': _SemanticsNode_rect$,
        'isInvisible': _SemanticsNode_isInvisible$,
        'isMergedIntoParent': _SemanticsNode_isMergedIntoParent$,
        'isPartOfNodeMerging': _SemanticsNode_isPartOfNodeMerging$,
        'mergeAllDescendantsIntoThisNode':
            _SemanticsNode_mergeAllDescendantsIntoThisNode$,
        'hasChildren': _SemanticsNode_hasChildren$,
        'childrenCount': _SemanticsNode_childrenCount$,
        'owner': _SemanticsNode_owner$,
        'parent': _SemanticsNode_parent$,
        'label': _SemanticsNode_label$,
        'attributedLabel': _SemanticsNode_attributedLabel$,
        'value': _SemanticsNode_value$,
        'attributedValue': _SemanticsNode_attributedValue$,
        'increasedValue': _SemanticsNode_increasedValue$,
        'attributedIncreasedValue': _SemanticsNode_attributedIncreasedValue$,
        'decreasedValue': _SemanticsNode_decreasedValue$,
        'attributedDecreasedValue': _SemanticsNode_attributedDecreasedValue$,
        'hint': _SemanticsNode_hint$,
        'attributedHint': _SemanticsNode_attributedHint$,
        'tooltip': _SemanticsNode_tooltip$,
        'elevation': _SemanticsNode_elevation$,
        'thickness': _SemanticsNode_thickness$,
        'hintOverrides': _SemanticsNode_hintOverrides$,
        'textDirection': _SemanticsNode_textDirection$,
        'sortKey': _SemanticsNode_sortKey$,
        'textSelection': _SemanticsNode_textSelection$,
        'isMultiline': _SemanticsNode_isMultiline$,
        'scrollChildCount': _SemanticsNode_scrollChildCount$,
        'scrollIndex': _SemanticsNode_scrollIndex$,
        'scrollPosition': _SemanticsNode_scrollPosition$,
        'scrollExtentMax': _SemanticsNode_scrollExtentMax$,
        'scrollExtentMin': _SemanticsNode_scrollExtentMin$,
        'platformViewId': _SemanticsNode_platformViewId$,
        'maxValueLength': _SemanticsNode_maxValueLength$,
        'currentValueLength': _SemanticsNode_currentValueLength$,
        'visitChildren': _SemanticsNode_visitChildren$,
        'redepthChildren': _SemanticsNode_redepthChildren$,
        'attach': _SemanticsNode_attach$,
        'detach': _SemanticsNode_detach$,
        'isTagged': _SemanticsNode_isTagged$,
        'hasFlag': _SemanticsNode_hasFlag$,
        'updateWith': _SemanticsNode_updateWith$,
        'getSemanticsData': _SemanticsNode_getSemanticsData$,
        'sendEvent': _SemanticsNode_sendEvent$,
        'toStringShort': _SemanticsNode_toStringShort$,
        'debugFillProperties': _SemanticsNode_debugFillProperties$,
        'toStringDeep': _SemanticsNode_toStringDeep$,
        'toDiagnosticsNode': _SemanticsNode_toDiagnosticsNode$,
        'debugDescribeChildren': _SemanticsNode_debugDescribeChildren$,
        'debugListChildrenInOrder': _SemanticsNode_debugListChildrenInOrder$,
      },
      {
        'parentSemanticsClipRect': _SemanticsNode_parentSemanticsClipRect_set$,
        'parentPaintClipRect': _SemanticsNode_parentPaintClipRect_set$,
        'elevationAdjustment': _SemanticsNode_elevationAdjustment_set$,
        'indexInParent': _SemanticsNode_indexInParent_set$,
        'tags': _SemanticsNode_tags_set$,
        'transform': _SemanticsNode_transform_set$,
        'rect': _SemanticsNode_rect_set$,
        'isMergedIntoParent': _SemanticsNode_isMergedIntoParent_set$,
      },
    ),
    'SemanticsOwner': m.ClassMirror(
      'SemanticsOwner',
      {
        '#as': SemanticsOwner_as$,
        '#is': SemanticsOwner_is$,
        'onSemanticsUpdate': _SemanticsOwner_onSemanticsUpdate$,
        'rootSemanticsNode': _SemanticsOwner_rootSemanticsNode$,
        'dispose': _SemanticsOwner_dispose$,
        'sendSemanticsUpdate': _SemanticsOwner_sendSemanticsUpdate$,
        'performAction': _SemanticsOwner_performAction$,
        'performActionAt': _SemanticsOwner_performActionAt$,
        'toString': _SemanticsOwner_toString$,
      },
      {},
    ),
    'SemanticsConfiguration': m.ClassMirror(
      'SemanticsConfiguration',
      {
        '#as': SemanticsConfiguration_as$,
        '#is': SemanticsConfiguration_is$,
        'explicitChildNodes': _SemanticsConfiguration_explicitChildNodes$,
        'isBlockingSemanticsOfPreviouslyPaintedNodes':
            _SemanticsConfiguration_isBlockingSemanticsOfPreviouslyPaintedNodes$,
        'isSemanticBoundary': _SemanticsConfiguration_isSemanticBoundary$,
        'hasBeenAnnotated': _SemanticsConfiguration_hasBeenAnnotated$,
        'onTap': _SemanticsConfiguration_onTap$,
        'onLongPress': _SemanticsConfiguration_onLongPress$,
        'onScrollLeft': _SemanticsConfiguration_onScrollLeft$,
        'onDismiss': _SemanticsConfiguration_onDismiss$,
        'onScrollRight': _SemanticsConfiguration_onScrollRight$,
        'onScrollUp': _SemanticsConfiguration_onScrollUp$,
        'onScrollDown': _SemanticsConfiguration_onScrollDown$,
        'onIncrease': _SemanticsConfiguration_onIncrease$,
        'onDecrease': _SemanticsConfiguration_onDecrease$,
        'onCopy': _SemanticsConfiguration_onCopy$,
        'onCut': _SemanticsConfiguration_onCut$,
        'onPaste': _SemanticsConfiguration_onPaste$,
        'onShowOnScreen': _SemanticsConfiguration_onShowOnScreen$,
        'onMoveCursorForwardByCharacter':
            _SemanticsConfiguration_onMoveCursorForwardByCharacter$,
        'onMoveCursorBackwardByCharacter':
            _SemanticsConfiguration_onMoveCursorBackwardByCharacter$,
        'onMoveCursorForwardByWord':
            _SemanticsConfiguration_onMoveCursorForwardByWord$,
        'onMoveCursorBackwardByWord':
            _SemanticsConfiguration_onMoveCursorBackwardByWord$,
        'onSetSelection': _SemanticsConfiguration_onSetSelection$,
        'onSetText': _SemanticsConfiguration_onSetText$,
        'onDidGainAccessibilityFocus':
            _SemanticsConfiguration_onDidGainAccessibilityFocus$,
        'onDidLoseAccessibilityFocus':
            _SemanticsConfiguration_onDidLoseAccessibilityFocus$,
        'childConfigurationsDelegate':
            _SemanticsConfiguration_childConfigurationsDelegate$,
        'sortKey': _SemanticsConfiguration_sortKey$,
        'indexInParent': _SemanticsConfiguration_indexInParent$,
        'scrollChildCount': _SemanticsConfiguration_scrollChildCount$,
        'scrollIndex': _SemanticsConfiguration_scrollIndex$,
        'platformViewId': _SemanticsConfiguration_platformViewId$,
        'maxValueLength': _SemanticsConfiguration_maxValueLength$,
        'currentValueLength': _SemanticsConfiguration_currentValueLength$,
        'isMergingSemanticsOfDescendants':
            _SemanticsConfiguration_isMergingSemanticsOfDescendants$,
        'customSemanticsActions':
            _SemanticsConfiguration_customSemanticsActions$,
        'label': _SemanticsConfiguration_label$,
        'attributedLabel': _SemanticsConfiguration_attributedLabel$,
        'value': _SemanticsConfiguration_value$,
        'attributedValue': _SemanticsConfiguration_attributedValue$,
        'increasedValue': _SemanticsConfiguration_increasedValue$,
        'attributedIncreasedValue':
            _SemanticsConfiguration_attributedIncreasedValue$,
        'decreasedValue': _SemanticsConfiguration_decreasedValue$,
        'attributedDecreasedValue':
            _SemanticsConfiguration_attributedDecreasedValue$,
        'hint': _SemanticsConfiguration_hint$,
        'attributedHint': _SemanticsConfiguration_attributedHint$,
        'tooltip': _SemanticsConfiguration_tooltip$,
        'hintOverrides': _SemanticsConfiguration_hintOverrides$,
        'elevation': _SemanticsConfiguration_elevation$,
        'thickness': _SemanticsConfiguration_thickness$,
        'scopesRoute': _SemanticsConfiguration_scopesRoute$,
        'namesRoute': _SemanticsConfiguration_namesRoute$,
        'isImage': _SemanticsConfiguration_isImage$,
        'liveRegion': _SemanticsConfiguration_liveRegion$,
        'textDirection': _SemanticsConfiguration_textDirection$,
        'isSelected': _SemanticsConfiguration_isSelected$,
        'isEnabled': _SemanticsConfiguration_isEnabled$,
        'isChecked': _SemanticsConfiguration_isChecked$,
        'isCheckStateMixed': _SemanticsConfiguration_isCheckStateMixed$,
        'isToggled': _SemanticsConfiguration_isToggled$,
        'isInMutuallyExclusiveGroup':
            _SemanticsConfiguration_isInMutuallyExclusiveGroup$,
        'isFocusable': _SemanticsConfiguration_isFocusable$,
        'isFocused': _SemanticsConfiguration_isFocused$,
        'isButton': _SemanticsConfiguration_isButton$,
        'isLink': _SemanticsConfiguration_isLink$,
        'isHeader': _SemanticsConfiguration_isHeader$,
        'isSlider': _SemanticsConfiguration_isSlider$,
        'isKeyboardKey': _SemanticsConfiguration_isKeyboardKey$,
        'isHidden': _SemanticsConfiguration_isHidden$,
        'isTextField': _SemanticsConfiguration_isTextField$,
        'isReadOnly': _SemanticsConfiguration_isReadOnly$,
        'isObscured': _SemanticsConfiguration_isObscured$,
        'isMultiline': _SemanticsConfiguration_isMultiline$,
        'hasImplicitScrolling': _SemanticsConfiguration_hasImplicitScrolling$,
        'textSelection': _SemanticsConfiguration_textSelection$,
        'scrollPosition': _SemanticsConfiguration_scrollPosition$,
        'scrollExtentMax': _SemanticsConfiguration_scrollExtentMax$,
        'scrollExtentMin': _SemanticsConfiguration_scrollExtentMin$,
        'tagsForChildren': _SemanticsConfiguration_tagsForChildren$,
        'getActionHandler': _SemanticsConfiguration_getActionHandler$,
        'tagsChildrenWith': _SemanticsConfiguration_tagsChildrenWith$,
        'addTagForChildren': _SemanticsConfiguration_addTagForChildren$,
        'isCompatibleWith': _SemanticsConfiguration_isCompatibleWith$,
        'absorb': _SemanticsConfiguration_absorb$,
        'copy': _SemanticsConfiguration_copy$,
      },
      {
        'explicitChildNodes': _SemanticsConfiguration_explicitChildNodes_set$,
        'isBlockingSemanticsOfPreviouslyPaintedNodes':
            _SemanticsConfiguration_isBlockingSemanticsOfPreviouslyPaintedNodes_set$,
        'isSemanticBoundary': _SemanticsConfiguration_isSemanticBoundary_set$,
        'onTap': _SemanticsConfiguration_onTap_set$,
        'onLongPress': _SemanticsConfiguration_onLongPress_set$,
        'onScrollLeft': _SemanticsConfiguration_onScrollLeft_set$,
        'onDismiss': _SemanticsConfiguration_onDismiss_set$,
        'onScrollRight': _SemanticsConfiguration_onScrollRight_set$,
        'onScrollUp': _SemanticsConfiguration_onScrollUp_set$,
        'onScrollDown': _SemanticsConfiguration_onScrollDown_set$,
        'onIncrease': _SemanticsConfiguration_onIncrease_set$,
        'onDecrease': _SemanticsConfiguration_onDecrease_set$,
        'onCopy': _SemanticsConfiguration_onCopy_set$,
        'onCut': _SemanticsConfiguration_onCut_set$,
        'onPaste': _SemanticsConfiguration_onPaste_set$,
        'onShowOnScreen': _SemanticsConfiguration_onShowOnScreen_set$,
        'onMoveCursorForwardByCharacter':
            _SemanticsConfiguration_onMoveCursorForwardByCharacter_set$,
        'onMoveCursorBackwardByCharacter':
            _SemanticsConfiguration_onMoveCursorBackwardByCharacter_set$,
        'onMoveCursorForwardByWord':
            _SemanticsConfiguration_onMoveCursorForwardByWord_set$,
        'onMoveCursorBackwardByWord':
            _SemanticsConfiguration_onMoveCursorBackwardByWord_set$,
        'onSetSelection': _SemanticsConfiguration_onSetSelection_set$,
        'onSetText': _SemanticsConfiguration_onSetText_set$,
        'onDidGainAccessibilityFocus':
            _SemanticsConfiguration_onDidGainAccessibilityFocus_set$,
        'onDidLoseAccessibilityFocus':
            _SemanticsConfiguration_onDidLoseAccessibilityFocus_set$,
        'childConfigurationsDelegate':
            _SemanticsConfiguration_childConfigurationsDelegate_set$,
        'sortKey': _SemanticsConfiguration_sortKey_set$,
        'indexInParent': _SemanticsConfiguration_indexInParent_set$,
        'scrollChildCount': _SemanticsConfiguration_scrollChildCount_set$,
        'scrollIndex': _SemanticsConfiguration_scrollIndex_set$,
        'platformViewId': _SemanticsConfiguration_platformViewId_set$,
        'maxValueLength': _SemanticsConfiguration_maxValueLength_set$,
        'currentValueLength': _SemanticsConfiguration_currentValueLength_set$,
        'isMergingSemanticsOfDescendants':
            _SemanticsConfiguration_isMergingSemanticsOfDescendants_set$,
        'customSemanticsActions':
            _SemanticsConfiguration_customSemanticsActions_set$,
        'label': _SemanticsConfiguration_label_set$,
        'attributedLabel': _SemanticsConfiguration_attributedLabel_set$,
        'value': _SemanticsConfiguration_value_set$,
        'attributedValue': _SemanticsConfiguration_attributedValue_set$,
        'increasedValue': _SemanticsConfiguration_increasedValue_set$,
        'attributedIncreasedValue':
            _SemanticsConfiguration_attributedIncreasedValue_set$,
        'decreasedValue': _SemanticsConfiguration_decreasedValue_set$,
        'attributedDecreasedValue':
            _SemanticsConfiguration_attributedDecreasedValue_set$,
        'hint': _SemanticsConfiguration_hint_set$,
        'attributedHint': _SemanticsConfiguration_attributedHint_set$,
        'tooltip': _SemanticsConfiguration_tooltip_set$,
        'hintOverrides': _SemanticsConfiguration_hintOverrides_set$,
        'elevation': _SemanticsConfiguration_elevation_set$,
        'thickness': _SemanticsConfiguration_thickness_set$,
        'scopesRoute': _SemanticsConfiguration_scopesRoute_set$,
        'namesRoute': _SemanticsConfiguration_namesRoute_set$,
        'isImage': _SemanticsConfiguration_isImage_set$,
        'liveRegion': _SemanticsConfiguration_liveRegion_set$,
        'textDirection': _SemanticsConfiguration_textDirection_set$,
        'isSelected': _SemanticsConfiguration_isSelected_set$,
        'isEnabled': _SemanticsConfiguration_isEnabled_set$,
        'isChecked': _SemanticsConfiguration_isChecked_set$,
        'isCheckStateMixed': _SemanticsConfiguration_isCheckStateMixed_set$,
        'isToggled': _SemanticsConfiguration_isToggled_set$,
        'isInMutuallyExclusiveGroup':
            _SemanticsConfiguration_isInMutuallyExclusiveGroup_set$,
        'isFocusable': _SemanticsConfiguration_isFocusable_set$,
        'isFocused': _SemanticsConfiguration_isFocused_set$,
        'isButton': _SemanticsConfiguration_isButton_set$,
        'isLink': _SemanticsConfiguration_isLink_set$,
        'isHeader': _SemanticsConfiguration_isHeader_set$,
        'isSlider': _SemanticsConfiguration_isSlider_set$,
        'isKeyboardKey': _SemanticsConfiguration_isKeyboardKey_set$,
        'isHidden': _SemanticsConfiguration_isHidden_set$,
        'isTextField': _SemanticsConfiguration_isTextField_set$,
        'isReadOnly': _SemanticsConfiguration_isReadOnly_set$,
        'isObscured': _SemanticsConfiguration_isObscured_set$,
        'isMultiline': _SemanticsConfiguration_isMultiline_set$,
        'hasImplicitScrolling':
            _SemanticsConfiguration_hasImplicitScrolling_set$,
        'textSelection': _SemanticsConfiguration_textSelection_set$,
        'scrollPosition': _SemanticsConfiguration_scrollPosition_set$,
        'scrollExtentMax': _SemanticsConfiguration_scrollExtentMax_set$,
        'scrollExtentMin': _SemanticsConfiguration_scrollExtentMin_set$,
      },
    ),
    'SemanticsSortKey': m.ClassMirror(
      'SemanticsSortKey',
      {
        '#as': SemanticsSortKey_as$,
        '#is': SemanticsSortKey_is$,
        'name': _SemanticsSortKey_name$,
        'compareTo': _SemanticsSortKey_compareTo$,
        'doCompare': _SemanticsSortKey_doCompare$,
        'debugFillProperties': _SemanticsSortKey_debugFillProperties$,
      },
      {},
    ),
    'OrdinalSortKey': m.ClassMirror(
      'OrdinalSortKey',
      {
        '#as': OrdinalSortKey_as$,
        '#is': OrdinalSortKey_is$,
        'order': _OrdinalSortKey_order$,
        'doCompare': _OrdinalSortKey_doCompare$,
        'debugFillProperties': _OrdinalSortKey_debugFillProperties$,
      },
      {},
    ),
    'DebugSemanticsDumpOrder': m.ClassMirror(
      'DebugSemanticsDumpOrder',
      {},
      {},
    ),
  },
);
Function SemanticsTag_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SemanticsTag;
Function SemanticsTag_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SemanticsTag;
Function _SemanticsTag_name$(
  m.Scope scope$,
  SemanticsTag target$,
) =>
    () {
      return target$.name;
    };
Function _SemanticsTag__$(m.Scope scope$) => (String name) {
      return SemanticsTag(name);
    };
Function _SemanticsTag_toString$(
  m.Scope scope$,
  SemanticsTag target$,
) =>
    target$.toString;
Function ChildSemanticsConfigurationsResult_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ChildSemanticsConfigurationsResult;
Function ChildSemanticsConfigurationsResult_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ChildSemanticsConfigurationsResult;
Function _ChildSemanticsConfigurationsResult_mergeUp$(
  m.Scope scope$,
  ChildSemanticsConfigurationsResult target$,
) =>
    () {
      return target$.mergeUp;
    };
Function _ChildSemanticsConfigurationsResult_siblingMergeGroups$(
  m.Scope scope$,
  ChildSemanticsConfigurationsResult target$,
) =>
    () {
      return target$.siblingMergeGroups;
    };
Function ChildSemanticsConfigurationsResultBuilder_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ChildSemanticsConfigurationsResultBuilder;
Function ChildSemanticsConfigurationsResultBuilder_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ChildSemanticsConfigurationsResultBuilder;
Function _ChildSemanticsConfigurationsResultBuilder__$(m.Scope scope$) => () {
      return ChildSemanticsConfigurationsResultBuilder();
    };
Function _ChildSemanticsConfigurationsResultBuilder_markAsMergeUp$(
  m.Scope scope$,
  ChildSemanticsConfigurationsResultBuilder target$,
) =>
    target$.markAsMergeUp;
Function _ChildSemanticsConfigurationsResultBuilder_markAsSiblingMergeGroup$(
  m.Scope scope$,
  ChildSemanticsConfigurationsResultBuilder target$,
) =>
    target$.markAsSiblingMergeGroup;
Function _ChildSemanticsConfigurationsResultBuilder_build$(
  m.Scope scope$,
  ChildSemanticsConfigurationsResultBuilder target$,
) =>
    target$.build;
Function CustomSemanticsAction_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CustomSemanticsAction;
Function CustomSemanticsAction_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CustomSemanticsAction;
Function _CustomSemanticsAction_label$(
  m.Scope scope$,
  CustomSemanticsAction target$,
) =>
    () {
      return target$.label;
    };
Function _CustomSemanticsAction_hint$(
  m.Scope scope$,
  CustomSemanticsAction target$,
) =>
    () {
      return target$.hint;
    };
Function _CustomSemanticsAction_action$(
  m.Scope scope$,
  CustomSemanticsAction target$,
) =>
    () {
      return target$.action;
    };
Function _CustomSemanticsAction_hashCode$(
  m.Scope scope$,
  CustomSemanticsAction target$,
) =>
    () {
      return target$.hashCode;
    };
Function _CustomSemanticsAction__$(m.Scope scope$) =>
    ({required String label}) {
      return CustomSemanticsAction(label: label);
    };
Function _CustomSemanticsAction_overridingAction_$(m.Scope scope$) =>
    CustomSemanticsAction.overridingAction;
Function _CustomSemanticsAction_eq$$(
  m.Scope scope$,
  CustomSemanticsAction target$,
) =>
    (Object other$) => target$ == other$;
Function _CustomSemanticsAction_toString$(
  m.Scope scope$,
  CustomSemanticsAction target$,
) =>
    target$.toString;
Function _CustomSemanticsAction_getIdentifier$(m.Scope scope$) =>
    CustomSemanticsAction.getIdentifier;
Function _CustomSemanticsAction_getAction$(m.Scope scope$) =>
    CustomSemanticsAction.getAction;
Function AttributedString_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AttributedString;
Function AttributedString_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AttributedString;
Function _AttributedString_string$(
  m.Scope scope$,
  AttributedString target$,
) =>
    () {
      return target$.string;
    };
Function _AttributedString_attributes$(
  m.Scope scope$,
  AttributedString target$,
) =>
    () {
      return target$.attributes;
    };
Function _AttributedString_hashCode$(
  m.Scope scope$,
  AttributedString target$,
) =>
    () {
      return target$.hashCode;
    };
Function _AttributedString__$(m.Scope scope$) => (
      String string, {
      List? attributes,
    }) {
      return AttributedString(
        string,
        attributes: attributes == null
            ? const <StringAttribute>[]
            : List.from(attributes),
      );
    };
Function _AttributedString_plus$$(
  m.Scope scope$,
  AttributedString target$,
) =>
    (AttributedString other$) => target$ + other$;
Function _AttributedString_eq$$(
  m.Scope scope$,
  AttributedString target$,
) =>
    (Object other$) => target$ == other$;
Function _AttributedString_toString$(
  m.Scope scope$,
  AttributedString target$,
) =>
    target$.toString;
Function AttributedStringProperty_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AttributedStringProperty;
Function AttributedStringProperty_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AttributedStringProperty;
Function _AttributedStringProperty_showWhenEmpty$(
  m.Scope scope$,
  AttributedStringProperty target$,
) =>
    () {
      return target$.showWhenEmpty;
    };
Function _AttributedStringProperty_isInteresting$(
  m.Scope scope$,
  AttributedStringProperty target$,
) =>
    () {
      return target$.isInteresting;
    };
Function _AttributedStringProperty__$(m.Scope scope$) => (
      String name,
      AttributedString? value, {
      bool? showName,
      bool? showWhenEmpty,
      Object? defaultValue,
      DiagnosticLevel? level,
      String? description,
    }) {
      return AttributedStringProperty(
        name,
        value,
        defaultValue: defaultValue ?? kNoDefaultValue,
        description: description,
        level: level ?? DiagnosticLevel.info,
        showName: showName ?? true,
        showWhenEmpty: showWhenEmpty ?? false,
      );
    };
Function _AttributedStringProperty_valueToString$(
  m.Scope scope$,
  AttributedStringProperty target$,
) =>
    target$.valueToString;
Function SemanticsData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SemanticsData;
Function SemanticsData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SemanticsData;
Function _SemanticsData_flags$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.flags;
    };
Function _SemanticsData_actions$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.actions;
    };
Function _SemanticsData_attributedLabel$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.attributedLabel;
    };
Function _SemanticsData_attributedValue$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.attributedValue;
    };
Function _SemanticsData_attributedIncreasedValue$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.attributedIncreasedValue;
    };
Function _SemanticsData_attributedDecreasedValue$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.attributedDecreasedValue;
    };
Function _SemanticsData_attributedHint$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.attributedHint;
    };
Function _SemanticsData_tooltip$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.tooltip;
    };
Function _SemanticsData_textDirection$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.textDirection;
    };
Function _SemanticsData_textSelection$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.textSelection;
    };
Function _SemanticsData_scrollChildCount$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.scrollChildCount;
    };
Function _SemanticsData_scrollIndex$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.scrollIndex;
    };
Function _SemanticsData_scrollPosition$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.scrollPosition;
    };
Function _SemanticsData_scrollExtentMax$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.scrollExtentMax;
    };
Function _SemanticsData_scrollExtentMin$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.scrollExtentMin;
    };
Function _SemanticsData_platformViewId$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.platformViewId;
    };
Function _SemanticsData_maxValueLength$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.maxValueLength;
    };
Function _SemanticsData_currentValueLength$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.currentValueLength;
    };
Function _SemanticsData_rect$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.rect;
    };
Function _SemanticsData_tags$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.tags;
    };
Function _SemanticsData_transform$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.transform;
    };
Function _SemanticsData_elevation$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.elevation;
    };
Function _SemanticsData_thickness$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.thickness;
    };
Function _SemanticsData_customSemanticsActionIds$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.customSemanticsActionIds;
    };
Function _SemanticsData_label$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.label;
    };
Function _SemanticsData_value$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.value;
    };
Function _SemanticsData_increasedValue$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.increasedValue;
    };
Function _SemanticsData_decreasedValue$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.decreasedValue;
    };
Function _SemanticsData_hint$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.hint;
    };
Function _SemanticsData_hashCode$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _SemanticsData__$(m.Scope scope$) => ({
      required int flags,
      required int actions,
      required AttributedString attributedLabel,
      required AttributedString attributedValue,
      required AttributedString attributedIncreasedValue,
      required AttributedString attributedDecreasedValue,
      required AttributedString attributedHint,
      required String tooltip,
      required TextDirection? textDirection,
      required Rect rect,
      required double elevation,
      required double thickness,
      required TextSelection? textSelection,
      required int? scrollIndex,
      required int? scrollChildCount,
      required double? scrollPosition,
      required double? scrollExtentMax,
      required double? scrollExtentMin,
      required int? platformViewId,
      required int? maxValueLength,
      required int? currentValueLength,
      Set? tags,
      Matrix4? transform,
      List? customSemanticsActionIds,
    }) {
      return SemanticsData(
        actions: actions,
        attributedDecreasedValue: attributedDecreasedValue,
        attributedHint: attributedHint,
        attributedIncreasedValue: attributedIncreasedValue,
        attributedLabel: attributedLabel,
        attributedValue: attributedValue,
        currentValueLength: currentValueLength,
        customSemanticsActionIds: customSemanticsActionIds == null
            ? null
            : List.from(customSemanticsActionIds),
        elevation: elevation,
        flags: flags,
        maxValueLength: maxValueLength,
        platformViewId: platformViewId,
        rect: rect,
        scrollChildCount: scrollChildCount,
        scrollExtentMax: scrollExtentMax,
        scrollExtentMin: scrollExtentMin,
        scrollIndex: scrollIndex,
        scrollPosition: scrollPosition,
        tags: tags == null ? null : Set.from(tags),
        textDirection: textDirection,
        textSelection: textSelection,
        thickness: thickness,
        tooltip: tooltip,
        transform: transform,
      );
    };
Function _SemanticsData_hasFlag$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    target$.hasFlag;
Function _SemanticsData_hasAction$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    target$.hasAction;
Function _SemanticsData_toStringShort$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    target$.toStringShort;
Function _SemanticsData_debugFillProperties$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    target$.debugFillProperties;
Function _SemanticsData_eq$$(
  m.Scope scope$,
  SemanticsData target$,
) =>
    (Object other$) => target$ == other$;
Function SemanticsHintOverrides_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SemanticsHintOverrides;
Function SemanticsHintOverrides_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SemanticsHintOverrides;
Function _SemanticsHintOverrides_onTapHint$(
  m.Scope scope$,
  SemanticsHintOverrides target$,
) =>
    () {
      return target$.onTapHint;
    };
Function _SemanticsHintOverrides_onLongPressHint$(
  m.Scope scope$,
  SemanticsHintOverrides target$,
) =>
    () {
      return target$.onLongPressHint;
    };
Function _SemanticsHintOverrides_isNotEmpty$(
  m.Scope scope$,
  SemanticsHintOverrides target$,
) =>
    () {
      return target$.isNotEmpty;
    };
Function _SemanticsHintOverrides_hashCode$(
  m.Scope scope$,
  SemanticsHintOverrides target$,
) =>
    () {
      return target$.hashCode;
    };
Function _SemanticsHintOverrides__$(m.Scope scope$) => ({
      String? onTapHint,
      String? onLongPressHint,
    }) {
      return SemanticsHintOverrides(
        onLongPressHint: onLongPressHint,
        onTapHint: onTapHint,
      );
    };
Function _SemanticsHintOverrides_eq$$(
  m.Scope scope$,
  SemanticsHintOverrides target$,
) =>
    (Object other$) => target$ == other$;
Function _SemanticsHintOverrides_debugFillProperties$(
  m.Scope scope$,
  SemanticsHintOverrides target$,
) =>
    target$.debugFillProperties;
Function SemanticsProperties_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SemanticsProperties;
Function SemanticsProperties_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SemanticsProperties;
Function _SemanticsProperties_enabled$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.enabled;
    };
Function _SemanticsProperties_checked$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.checked;
    };
Function _SemanticsProperties_mixed$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.mixed;
    };
Function _SemanticsProperties_toggled$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.toggled;
    };
Function _SemanticsProperties_selected$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.selected;
    };
Function _SemanticsProperties_button$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.button;
    };
Function _SemanticsProperties_link$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.link;
    };
Function _SemanticsProperties_header$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.header;
    };
Function _SemanticsProperties_textField$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.textField;
    };
Function _SemanticsProperties_slider$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.slider;
    };
Function _SemanticsProperties_keyboardKey$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.keyboardKey;
    };
Function _SemanticsProperties_readOnly$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.readOnly;
    };
Function _SemanticsProperties_focusable$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.focusable;
    };
Function _SemanticsProperties_focused$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.focused;
    };
Function _SemanticsProperties_inMutuallyExclusiveGroup$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.inMutuallyExclusiveGroup;
    };
Function _SemanticsProperties_hidden$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.hidden;
    };
Function _SemanticsProperties_obscured$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.obscured;
    };
Function _SemanticsProperties_multiline$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.multiline;
    };
Function _SemanticsProperties_scopesRoute$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.scopesRoute;
    };
Function _SemanticsProperties_namesRoute$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.namesRoute;
    };
Function _SemanticsProperties_image$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.image;
    };
Function _SemanticsProperties_liveRegion$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.liveRegion;
    };
Function _SemanticsProperties_maxValueLength$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.maxValueLength;
    };
Function _SemanticsProperties_currentValueLength$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.currentValueLength;
    };
Function _SemanticsProperties_label$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.label;
    };
Function _SemanticsProperties_attributedLabel$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.attributedLabel;
    };
Function _SemanticsProperties_value$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.value;
    };
Function _SemanticsProperties_attributedValue$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.attributedValue;
    };
Function _SemanticsProperties_increasedValue$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.increasedValue;
    };
Function _SemanticsProperties_attributedIncreasedValue$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.attributedIncreasedValue;
    };
Function _SemanticsProperties_decreasedValue$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.decreasedValue;
    };
Function _SemanticsProperties_attributedDecreasedValue$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.attributedDecreasedValue;
    };
Function _SemanticsProperties_hint$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.hint;
    };
Function _SemanticsProperties_attributedHint$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.attributedHint;
    };
Function _SemanticsProperties_tooltip$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.tooltip;
    };
Function _SemanticsProperties_hintOverrides$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.hintOverrides;
    };
Function _SemanticsProperties_textDirection$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.textDirection;
    };
Function _SemanticsProperties_sortKey$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.sortKey;
    };
Function _SemanticsProperties_tagForChildren$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.tagForChildren;
    };
Function _SemanticsProperties_onTap$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.onTap;
    };
Function _SemanticsProperties_onLongPress$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.onLongPress;
    };
Function _SemanticsProperties_onScrollLeft$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.onScrollLeft;
    };
Function _SemanticsProperties_onScrollRight$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.onScrollRight;
    };
Function _SemanticsProperties_onScrollUp$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.onScrollUp;
    };
Function _SemanticsProperties_onScrollDown$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.onScrollDown;
    };
Function _SemanticsProperties_onIncrease$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.onIncrease;
    };
Function _SemanticsProperties_onDecrease$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.onDecrease;
    };
Function _SemanticsProperties_onCopy$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.onCopy;
    };
Function _SemanticsProperties_onCut$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.onCut;
    };
Function _SemanticsProperties_onPaste$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.onPaste;
    };
Function _SemanticsProperties_onMoveCursorForwardByCharacter$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.onMoveCursorForwardByCharacter;
    };
Function _SemanticsProperties_onMoveCursorBackwardByCharacter$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.onMoveCursorBackwardByCharacter;
    };
Function _SemanticsProperties_onMoveCursorForwardByWord$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.onMoveCursorForwardByWord;
    };
Function _SemanticsProperties_onMoveCursorBackwardByWord$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.onMoveCursorBackwardByWord;
    };
Function _SemanticsProperties_onSetSelection$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.onSetSelection;
    };
Function _SemanticsProperties_onSetText$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.onSetText;
    };
Function _SemanticsProperties_onDidGainAccessibilityFocus$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.onDidGainAccessibilityFocus;
    };
Function _SemanticsProperties_onDidLoseAccessibilityFocus$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.onDidLoseAccessibilityFocus;
    };
Function _SemanticsProperties_onDismiss$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.onDismiss;
    };
Function _SemanticsProperties_customSemanticsActions$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    () {
      return target$.customSemanticsActions;
    };
Function _SemanticsProperties__$(m.Scope scope$) => ({
      bool? enabled,
      bool? checked,
      bool? mixed,
      bool? selected,
      bool? toggled,
      bool? button,
      bool? link,
      bool? header,
      bool? textField,
      bool? slider,
      bool? keyboardKey,
      bool? readOnly,
      bool? focusable,
      bool? focused,
      bool? inMutuallyExclusiveGroup,
      bool? hidden,
      bool? obscured,
      bool? multiline,
      bool? scopesRoute,
      bool? namesRoute,
      bool? image,
      bool? liveRegion,
      int? maxValueLength,
      int? currentValueLength,
      String? label,
      AttributedString? attributedLabel,
      String? value,
      AttributedString? attributedValue,
      String? increasedValue,
      AttributedString? attributedIncreasedValue,
      String? decreasedValue,
      AttributedString? attributedDecreasedValue,
      String? hint,
      String? tooltip,
      AttributedString? attributedHint,
      SemanticsHintOverrides? hintOverrides,
      TextDirection? textDirection,
      SemanticsSortKey? sortKey,
      SemanticsTag? tagForChildren,
      m.FunctionPointer? onTap,
      m.FunctionPointer? onLongPress,
      m.FunctionPointer? onScrollLeft,
      m.FunctionPointer? onScrollRight,
      m.FunctionPointer? onScrollUp,
      m.FunctionPointer? onScrollDown,
      m.FunctionPointer? onIncrease,
      m.FunctionPointer? onDecrease,
      m.FunctionPointer? onCopy,
      m.FunctionPointer? onCut,
      m.FunctionPointer? onPaste,
      m.FunctionPointer? onMoveCursorForwardByCharacter,
      m.FunctionPointer? onMoveCursorBackwardByCharacter,
      m.FunctionPointer? onMoveCursorForwardByWord,
      m.FunctionPointer? onMoveCursorBackwardByWord,
      m.FunctionPointer? onSetSelection,
      m.FunctionPointer? onSetText,
      m.FunctionPointer? onDidGainAccessibilityFocus,
      m.FunctionPointer? onDidLoseAccessibilityFocus,
      m.FunctionPointer? onDismiss,
      Map? customSemanticsActions,
    }) {
      void onCopyProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onCopy!,
            [],
            {},
          );
      void onCutProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onCut!,
            [],
            {},
          );
      void onDecreaseProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onDecrease!,
            [],
            {},
          );
      void onDidGainAccessibilityFocusProxy() =>
          scope$.engine.callFunctionPointer(
            scope$,
            onDidGainAccessibilityFocus!,
            [],
            {},
          );
      void onDidLoseAccessibilityFocusProxy() =>
          scope$.engine.callFunctionPointer(
            scope$,
            onDidLoseAccessibilityFocus!,
            [],
            {},
          );
      void onDismissProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onDismiss!,
            [],
            {},
          );
      void onIncreaseProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onIncrease!,
            [],
            {},
          );
      void onLongPressProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onLongPress!,
            [],
            {},
          );
      void onMoveCursorBackwardByCharacterProxy(
              bool onMoveCursorBackwardByCharacter_extendSelection$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onMoveCursorBackwardByCharacter!,
            [onMoveCursorBackwardByCharacter_extendSelection$],
            {},
          );
      void onMoveCursorBackwardByWordProxy(
              bool onMoveCursorBackwardByWord_extendSelection$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onMoveCursorBackwardByWord!,
            [onMoveCursorBackwardByWord_extendSelection$],
            {},
          );
      void onMoveCursorForwardByCharacterProxy(
              bool onMoveCursorForwardByCharacter_extendSelection$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onMoveCursorForwardByCharacter!,
            [onMoveCursorForwardByCharacter_extendSelection$],
            {},
          );
      void onMoveCursorForwardByWordProxy(
              bool onMoveCursorForwardByWord_extendSelection$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onMoveCursorForwardByWord!,
            [onMoveCursorForwardByWord_extendSelection$],
            {},
          );
      void onPasteProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPaste!,
            [],
            {},
          );
      void onScrollDownProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onScrollDown!,
            [],
            {},
          );
      void onScrollLeftProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onScrollLeft!,
            [],
            {},
          );
      void onScrollRightProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onScrollRight!,
            [],
            {},
          );
      void onScrollUpProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onScrollUp!,
            [],
            {},
          );
      void onSetSelectionProxy(TextSelection onSetSelection_selection$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSetSelection!,
            [onSetSelection_selection$],
            {},
          );
      void onSetTextProxy(String onSetText_text$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSetText!,
            [onSetText_text$],
            {},
          );
      void onTapProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onTap!,
            [],
            {},
          );
      return SemanticsProperties(
        attributedDecreasedValue: attributedDecreasedValue,
        attributedHint: attributedHint,
        attributedIncreasedValue: attributedIncreasedValue,
        attributedLabel: attributedLabel,
        attributedValue: attributedValue,
        button: button,
        checked: checked,
        currentValueLength: currentValueLength,
        customSemanticsActions: customSemanticsActions == null
            ? null
            : Map.from(customSemanticsActions),
        decreasedValue: decreasedValue,
        enabled: enabled,
        focusable: focusable,
        focused: focused,
        header: header,
        hidden: hidden,
        hint: hint,
        hintOverrides: hintOverrides,
        image: image,
        inMutuallyExclusiveGroup: inMutuallyExclusiveGroup,
        increasedValue: increasedValue,
        keyboardKey: keyboardKey,
        label: label,
        link: link,
        liveRegion: liveRegion,
        maxValueLength: maxValueLength,
        mixed: mixed,
        multiline: multiline,
        namesRoute: namesRoute,
        obscured: obscured,
        onCopy: onCopy == null ? null : onCopyProxy,
        onCut: onCut == null ? null : onCutProxy,
        onDecrease: onDecrease == null ? null : onDecreaseProxy,
        onDidGainAccessibilityFocus: onDidGainAccessibilityFocus == null
            ? null
            : onDidGainAccessibilityFocusProxy,
        onDidLoseAccessibilityFocus: onDidLoseAccessibilityFocus == null
            ? null
            : onDidLoseAccessibilityFocusProxy,
        onDismiss: onDismiss == null ? null : onDismissProxy,
        onIncrease: onIncrease == null ? null : onIncreaseProxy,
        onLongPress: onLongPress == null ? null : onLongPressProxy,
        onMoveCursorBackwardByCharacter: onMoveCursorBackwardByCharacter == null
            ? null
            : onMoveCursorBackwardByCharacterProxy,
        onMoveCursorBackwardByWord: onMoveCursorBackwardByWord == null
            ? null
            : onMoveCursorBackwardByWordProxy,
        onMoveCursorForwardByCharacter: onMoveCursorForwardByCharacter == null
            ? null
            : onMoveCursorForwardByCharacterProxy,
        onMoveCursorForwardByWord: onMoveCursorForwardByWord == null
            ? null
            : onMoveCursorForwardByWordProxy,
        onPaste: onPaste == null ? null : onPasteProxy,
        onScrollDown: onScrollDown == null ? null : onScrollDownProxy,
        onScrollLeft: onScrollLeft == null ? null : onScrollLeftProxy,
        onScrollRight: onScrollRight == null ? null : onScrollRightProxy,
        onScrollUp: onScrollUp == null ? null : onScrollUpProxy,
        onSetSelection: onSetSelection == null ? null : onSetSelectionProxy,
        onSetText: onSetText == null ? null : onSetTextProxy,
        onTap: onTap == null ? null : onTapProxy,
        readOnly: readOnly,
        scopesRoute: scopesRoute,
        selected: selected,
        slider: slider,
        sortKey: sortKey,
        tagForChildren: tagForChildren,
        textDirection: textDirection,
        textField: textField,
        toggled: toggled,
        tooltip: tooltip,
        value: value,
      );
    };
Function _SemanticsProperties_debugFillProperties$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    target$.debugFillProperties;
Function _SemanticsProperties_toStringShort$(
  m.Scope scope$,
  SemanticsProperties target$,
) =>
    target$.toStringShort;
Function SemanticsNode_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SemanticsNode;
Function SemanticsNode_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SemanticsNode;
Function _SemanticsNode_key$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.key;
    };
Function _SemanticsNode_parentSemanticsClipRect$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.parentSemanticsClipRect;
    };
void _SemanticsNode_parentSemanticsClipRect_set$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    (dynamic other$) {
      target$.parentSemanticsClipRect = other$;
    };
Function _SemanticsNode_parentPaintClipRect$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.parentPaintClipRect;
    };
void _SemanticsNode_parentPaintClipRect_set$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    (dynamic other$) {
      target$.parentPaintClipRect = other$;
    };
Function _SemanticsNode_elevationAdjustment$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.elevationAdjustment;
    };
void _SemanticsNode_elevationAdjustment_set$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    (dynamic other$) {
      target$.elevationAdjustment = other$;
    };
Function _SemanticsNode_indexInParent$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.indexInParent;
    };
void _SemanticsNode_indexInParent_set$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    (dynamic other$) {
      target$.indexInParent = other$;
    };
Function _SemanticsNode_tags$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.tags;
    };
void _SemanticsNode_tags_set$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    (dynamic other$) {
      target$.tags = other$;
    };
Function _SemanticsNode_id$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.id;
    };
Function _SemanticsNode_transform$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.transform;
    };
void _SemanticsNode_transform_set$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    (dynamic other$) {
      target$.transform = other$;
    };
Function _SemanticsNode_rect$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.rect;
    };
void _SemanticsNode_rect_set$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    (dynamic other$) {
      target$.rect = other$;
    };
Function _SemanticsNode_isInvisible$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.isInvisible;
    };
Function _SemanticsNode_isMergedIntoParent$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.isMergedIntoParent;
    };
void _SemanticsNode_isMergedIntoParent_set$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    (dynamic other$) {
      target$.isMergedIntoParent = other$;
    };
Function _SemanticsNode_isPartOfNodeMerging$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.isPartOfNodeMerging;
    };
Function _SemanticsNode_mergeAllDescendantsIntoThisNode$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.mergeAllDescendantsIntoThisNode;
    };
Function _SemanticsNode_hasChildren$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.hasChildren;
    };
Function _SemanticsNode_childrenCount$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.childrenCount;
    };
Function _SemanticsNode_owner$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.owner;
    };
Function _SemanticsNode_parent$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.parent;
    };
Function _SemanticsNode_label$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.label;
    };
Function _SemanticsNode_attributedLabel$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.attributedLabel;
    };
Function _SemanticsNode_value$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.value;
    };
Function _SemanticsNode_attributedValue$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.attributedValue;
    };
Function _SemanticsNode_increasedValue$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.increasedValue;
    };
Function _SemanticsNode_attributedIncreasedValue$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.attributedIncreasedValue;
    };
Function _SemanticsNode_decreasedValue$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.decreasedValue;
    };
Function _SemanticsNode_attributedDecreasedValue$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.attributedDecreasedValue;
    };
Function _SemanticsNode_hint$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.hint;
    };
Function _SemanticsNode_attributedHint$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.attributedHint;
    };
Function _SemanticsNode_tooltip$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.tooltip;
    };
Function _SemanticsNode_elevation$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.elevation;
    };
Function _SemanticsNode_thickness$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.thickness;
    };
Function _SemanticsNode_hintOverrides$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.hintOverrides;
    };
Function _SemanticsNode_textDirection$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.textDirection;
    };
Function _SemanticsNode_sortKey$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.sortKey;
    };
Function _SemanticsNode_textSelection$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.textSelection;
    };
Function _SemanticsNode_isMultiline$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.isMultiline;
    };
Function _SemanticsNode_scrollChildCount$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.scrollChildCount;
    };
Function _SemanticsNode_scrollIndex$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.scrollIndex;
    };
Function _SemanticsNode_scrollPosition$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.scrollPosition;
    };
Function _SemanticsNode_scrollExtentMax$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.scrollExtentMax;
    };
Function _SemanticsNode_scrollExtentMin$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.scrollExtentMin;
    };
Function _SemanticsNode_platformViewId$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.platformViewId;
    };
Function _SemanticsNode_maxValueLength$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.maxValueLength;
    };
Function _SemanticsNode_currentValueLength$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    () {
      return target$.currentValueLength;
    };
Function _SemanticsNode__$(m.Scope scope$) => ({
      Key? key,
      m.FunctionPointer? showOnScreen,
    }) {
      void showOnScreenProxy() => scope$.engine.callFunctionPointer(
            scope$,
            showOnScreen!,
            [],
            {},
          );
      return SemanticsNode(
        key: key,
        showOnScreen: showOnScreen == null ? null : showOnScreenProxy,
      );
    };
Function _SemanticsNode_root_$(m.Scope scope$) => ({
      Key? key,
      m.FunctionPointer? showOnScreen,
      required SemanticsOwner owner,
    }) {
      void showOnScreenProxy() => scope$.engine.callFunctionPointer(
            scope$,
            showOnScreen!,
            [],
            {},
          );
      return SemanticsNode.root(
        key: key,
        owner: owner,
        showOnScreen: showOnScreen == null ? null : showOnScreenProxy,
      );
    };
Function _SemanticsNode_visitChildren$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    (m.FunctionPointer visitor) {
      bool visitorProxy(SemanticsNode visitor_node$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            visitor,
            [visitor_node$],
            {},
          );
      target$.visitChildren(visitorProxy);
    };
Function _SemanticsNode_redepthChildren$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    target$.redepthChildren;
Function _SemanticsNode_attach$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    target$.attach;
Function _SemanticsNode_detach$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    target$.detach;
Function _SemanticsNode_isTagged$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    target$.isTagged;
Function _SemanticsNode_hasFlag$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    target$.hasFlag;
Function _SemanticsNode_updateWith$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    target$.updateWith;
Function _SemanticsNode_getSemanticsData$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    target$.getSemanticsData;
Function _SemanticsNode_sendEvent$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    target$.sendEvent;
Function _SemanticsNode_toStringShort$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    target$.toStringShort;
Function _SemanticsNode_debugFillProperties$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    target$.debugFillProperties;
Function _SemanticsNode_toStringDeep$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    target$.toStringDeep;
Function _SemanticsNode_toDiagnosticsNode$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    target$.toDiagnosticsNode;
Function _SemanticsNode_debugDescribeChildren$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    target$.debugDescribeChildren;
Function _SemanticsNode_debugListChildrenInOrder$(
  m.Scope scope$,
  SemanticsNode target$,
) =>
    target$.debugListChildrenInOrder;
Function SemanticsOwner_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SemanticsOwner;
Function SemanticsOwner_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SemanticsOwner;
Function _SemanticsOwner_onSemanticsUpdate$(
  m.Scope scope$,
  SemanticsOwner target$,
) =>
    () {
      return target$.onSemanticsUpdate;
    };
Function _SemanticsOwner_rootSemanticsNode$(
  m.Scope scope$,
  SemanticsOwner target$,
) =>
    () {
      return target$.rootSemanticsNode;
    };
Function _SemanticsOwner__$(m.Scope scope$) =>
    ({required m.FunctionPointer onSemanticsUpdate}) {
      void onSemanticsUpdateProxy(SemanticsUpdate onSemanticsUpdate_update$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onSemanticsUpdate,
            [onSemanticsUpdate_update$],
            {},
          );
      return SemanticsOwner(onSemanticsUpdate: onSemanticsUpdateProxy);
    };
Function _SemanticsOwner_dispose$(
  m.Scope scope$,
  SemanticsOwner target$,
) =>
    target$.dispose;
Function _SemanticsOwner_sendSemanticsUpdate$(
  m.Scope scope$,
  SemanticsOwner target$,
) =>
    target$.sendSemanticsUpdate;
Function _SemanticsOwner_performAction$(
  m.Scope scope$,
  SemanticsOwner target$,
) =>
    target$.performAction;
Function _SemanticsOwner_performActionAt$(
  m.Scope scope$,
  SemanticsOwner target$,
) =>
    target$.performActionAt;
Function _SemanticsOwner_toString$(
  m.Scope scope$,
  SemanticsOwner target$,
) =>
    target$.toString;
Function SemanticsConfiguration_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SemanticsConfiguration;
Function SemanticsConfiguration_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SemanticsConfiguration;
Function _SemanticsConfiguration_explicitChildNodes$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.explicitChildNodes;
    };
void _SemanticsConfiguration_explicitChildNodes_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.explicitChildNodes = other$;
    };
Function _SemanticsConfiguration_isBlockingSemanticsOfPreviouslyPaintedNodes$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.isBlockingSemanticsOfPreviouslyPaintedNodes;
    };
void _SemanticsConfiguration_isBlockingSemanticsOfPreviouslyPaintedNodes_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.isBlockingSemanticsOfPreviouslyPaintedNodes = other$;
    };
Function _SemanticsConfiguration_isSemanticBoundary$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.isSemanticBoundary;
    };
void _SemanticsConfiguration_isSemanticBoundary_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.isSemanticBoundary = other$;
    };
Function _SemanticsConfiguration_hasBeenAnnotated$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.hasBeenAnnotated;
    };
Function _SemanticsConfiguration_onTap$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.onTap;
    };
Function _SemanticsConfiguration_onTap_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope$.engine.callFunctionPointer(
            scope$,
            value!,
            [],
            {},
          );
      target$.onTap = (value == null ? null : valueProxy);
    };
Function _SemanticsConfiguration_onLongPress$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.onLongPress;
    };
Function _SemanticsConfiguration_onLongPress_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope$.engine.callFunctionPointer(
            scope$,
            value!,
            [],
            {},
          );
      target$.onLongPress = (value == null ? null : valueProxy);
    };
Function _SemanticsConfiguration_onScrollLeft$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.onScrollLeft;
    };
Function _SemanticsConfiguration_onScrollLeft_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope$.engine.callFunctionPointer(
            scope$,
            value!,
            [],
            {},
          );
      target$.onScrollLeft = (value == null ? null : valueProxy);
    };
Function _SemanticsConfiguration_onDismiss$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.onDismiss;
    };
Function _SemanticsConfiguration_onDismiss_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope$.engine.callFunctionPointer(
            scope$,
            value!,
            [],
            {},
          );
      target$.onDismiss = (value == null ? null : valueProxy);
    };
Function _SemanticsConfiguration_onScrollRight$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.onScrollRight;
    };
Function _SemanticsConfiguration_onScrollRight_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope$.engine.callFunctionPointer(
            scope$,
            value!,
            [],
            {},
          );
      target$.onScrollRight = (value == null ? null : valueProxy);
    };
Function _SemanticsConfiguration_onScrollUp$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.onScrollUp;
    };
Function _SemanticsConfiguration_onScrollUp_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope$.engine.callFunctionPointer(
            scope$,
            value!,
            [],
            {},
          );
      target$.onScrollUp = (value == null ? null : valueProxy);
    };
Function _SemanticsConfiguration_onScrollDown$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.onScrollDown;
    };
Function _SemanticsConfiguration_onScrollDown_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope$.engine.callFunctionPointer(
            scope$,
            value!,
            [],
            {},
          );
      target$.onScrollDown = (value == null ? null : valueProxy);
    };
Function _SemanticsConfiguration_onIncrease$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.onIncrease;
    };
Function _SemanticsConfiguration_onIncrease_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope$.engine.callFunctionPointer(
            scope$,
            value!,
            [],
            {},
          );
      target$.onIncrease = (value == null ? null : valueProxy);
    };
Function _SemanticsConfiguration_onDecrease$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.onDecrease;
    };
Function _SemanticsConfiguration_onDecrease_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope$.engine.callFunctionPointer(
            scope$,
            value!,
            [],
            {},
          );
      target$.onDecrease = (value == null ? null : valueProxy);
    };
Function _SemanticsConfiguration_onCopy$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.onCopy;
    };
Function _SemanticsConfiguration_onCopy_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope$.engine.callFunctionPointer(
            scope$,
            value!,
            [],
            {},
          );
      target$.onCopy = (value == null ? null : valueProxy);
    };
Function _SemanticsConfiguration_onCut$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.onCut;
    };
Function _SemanticsConfiguration_onCut_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope$.engine.callFunctionPointer(
            scope$,
            value!,
            [],
            {},
          );
      target$.onCut = (value == null ? null : valueProxy);
    };
Function _SemanticsConfiguration_onPaste$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.onPaste;
    };
Function _SemanticsConfiguration_onPaste_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope$.engine.callFunctionPointer(
            scope$,
            value!,
            [],
            {},
          );
      target$.onPaste = (value == null ? null : valueProxy);
    };
Function _SemanticsConfiguration_onShowOnScreen$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.onShowOnScreen;
    };
Function _SemanticsConfiguration_onShowOnScreen_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope$.engine.callFunctionPointer(
            scope$,
            value!,
            [],
            {},
          );
      target$.onShowOnScreen = (value == null ? null : valueProxy);
    };
Function _SemanticsConfiguration_onMoveCursorForwardByCharacter$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.onMoveCursorForwardByCharacter;
    };
Function _SemanticsConfiguration_onMoveCursorForwardByCharacter_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (m.FunctionPointer? value) {
      void valueProxy(bool value_extendSelection$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            value!,
            [value_extendSelection$],
            {},
          );
      target$.onMoveCursorForwardByCharacter =
          (value == null ? null : valueProxy);
    };
Function _SemanticsConfiguration_onMoveCursorBackwardByCharacter$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.onMoveCursorBackwardByCharacter;
    };
Function _SemanticsConfiguration_onMoveCursorBackwardByCharacter_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (m.FunctionPointer? value) {
      void valueProxy(bool value_extendSelection$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            value!,
            [value_extendSelection$],
            {},
          );
      target$.onMoveCursorBackwardByCharacter =
          (value == null ? null : valueProxy);
    };
Function _SemanticsConfiguration_onMoveCursorForwardByWord$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.onMoveCursorForwardByWord;
    };
Function _SemanticsConfiguration_onMoveCursorForwardByWord_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (m.FunctionPointer? value) {
      void valueProxy(bool value_extendSelection$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            value!,
            [value_extendSelection$],
            {},
          );
      target$.onMoveCursorForwardByWord = (value == null ? null : valueProxy);
    };
Function _SemanticsConfiguration_onMoveCursorBackwardByWord$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.onMoveCursorBackwardByWord;
    };
Function _SemanticsConfiguration_onMoveCursorBackwardByWord_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (m.FunctionPointer? value) {
      void valueProxy(bool value_extendSelection$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            value!,
            [value_extendSelection$],
            {},
          );
      target$.onMoveCursorBackwardByWord = (value == null ? null : valueProxy);
    };
Function _SemanticsConfiguration_onSetSelection$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.onSetSelection;
    };
Function _SemanticsConfiguration_onSetSelection_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (m.FunctionPointer? value) {
      void valueProxy(TextSelection value_selection$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            value!,
            [value_selection$],
            {},
          );
      target$.onSetSelection = (value == null ? null : valueProxy);
    };
Function _SemanticsConfiguration_onSetText$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.onSetText;
    };
Function _SemanticsConfiguration_onSetText_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (m.FunctionPointer? value) {
      void valueProxy(String value_text$) => scope$.engine.callFunctionPointer(
            scope$,
            value!,
            [value_text$],
            {},
          );
      target$.onSetText = (value == null ? null : valueProxy);
    };
Function _SemanticsConfiguration_onDidGainAccessibilityFocus$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.onDidGainAccessibilityFocus;
    };
Function _SemanticsConfiguration_onDidGainAccessibilityFocus_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope$.engine.callFunctionPointer(
            scope$,
            value!,
            [],
            {},
          );
      target$.onDidGainAccessibilityFocus = (value == null ? null : valueProxy);
    };
Function _SemanticsConfiguration_onDidLoseAccessibilityFocus$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.onDidLoseAccessibilityFocus;
    };
Function _SemanticsConfiguration_onDidLoseAccessibilityFocus_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (m.FunctionPointer? value) {
      void valueProxy() => scope$.engine.callFunctionPointer(
            scope$,
            value!,
            [],
            {},
          );
      target$.onDidLoseAccessibilityFocus = (value == null ? null : valueProxy);
    };
Function _SemanticsConfiguration_childConfigurationsDelegate$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.childConfigurationsDelegate;
    };
Function _SemanticsConfiguration_childConfigurationsDelegate_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (m.FunctionPointer? value) {
      ChildSemanticsConfigurationsResult valueProxy(List value_$p0$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            value!,
            [value_$p0$],
            {},
          );
      target$.childConfigurationsDelegate = (value == null ? null : valueProxy);
    };
Function _SemanticsConfiguration_sortKey$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.sortKey;
    };
void _SemanticsConfiguration_sortKey_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.sortKey = other$;
    };
Function _SemanticsConfiguration_indexInParent$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.indexInParent;
    };
void _SemanticsConfiguration_indexInParent_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.indexInParent = other$;
    };
Function _SemanticsConfiguration_scrollChildCount$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.scrollChildCount;
    };
void _SemanticsConfiguration_scrollChildCount_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.scrollChildCount = other$;
    };
Function _SemanticsConfiguration_scrollIndex$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.scrollIndex;
    };
void _SemanticsConfiguration_scrollIndex_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.scrollIndex = other$;
    };
Function _SemanticsConfiguration_platformViewId$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.platformViewId;
    };
void _SemanticsConfiguration_platformViewId_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.platformViewId = other$;
    };
Function _SemanticsConfiguration_maxValueLength$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.maxValueLength;
    };
void _SemanticsConfiguration_maxValueLength_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.maxValueLength = other$;
    };
Function _SemanticsConfiguration_currentValueLength$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.currentValueLength;
    };
void _SemanticsConfiguration_currentValueLength_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.currentValueLength = other$;
    };
Function _SemanticsConfiguration_isMergingSemanticsOfDescendants$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.isMergingSemanticsOfDescendants;
    };
void _SemanticsConfiguration_isMergingSemanticsOfDescendants_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.isMergingSemanticsOfDescendants = other$;
    };
Function _SemanticsConfiguration_customSemanticsActions$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.customSemanticsActions;
    };
void _SemanticsConfiguration_customSemanticsActions_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.customSemanticsActions = other$;
    };
Function _SemanticsConfiguration_label$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.label;
    };
void _SemanticsConfiguration_label_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.label = other$;
    };
Function _SemanticsConfiguration_attributedLabel$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.attributedLabel;
    };
void _SemanticsConfiguration_attributedLabel_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.attributedLabel = other$;
    };
Function _SemanticsConfiguration_value$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.value;
    };
void _SemanticsConfiguration_value_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.value = other$;
    };
Function _SemanticsConfiguration_attributedValue$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.attributedValue;
    };
void _SemanticsConfiguration_attributedValue_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.attributedValue = other$;
    };
Function _SemanticsConfiguration_increasedValue$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.increasedValue;
    };
void _SemanticsConfiguration_increasedValue_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.increasedValue = other$;
    };
Function _SemanticsConfiguration_attributedIncreasedValue$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.attributedIncreasedValue;
    };
void _SemanticsConfiguration_attributedIncreasedValue_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.attributedIncreasedValue = other$;
    };
Function _SemanticsConfiguration_decreasedValue$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.decreasedValue;
    };
void _SemanticsConfiguration_decreasedValue_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.decreasedValue = other$;
    };
Function _SemanticsConfiguration_attributedDecreasedValue$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.attributedDecreasedValue;
    };
void _SemanticsConfiguration_attributedDecreasedValue_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.attributedDecreasedValue = other$;
    };
Function _SemanticsConfiguration_hint$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.hint;
    };
void _SemanticsConfiguration_hint_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.hint = other$;
    };
Function _SemanticsConfiguration_attributedHint$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.attributedHint;
    };
void _SemanticsConfiguration_attributedHint_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.attributedHint = other$;
    };
Function _SemanticsConfiguration_tooltip$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.tooltip;
    };
void _SemanticsConfiguration_tooltip_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.tooltip = other$;
    };
Function _SemanticsConfiguration_hintOverrides$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.hintOverrides;
    };
void _SemanticsConfiguration_hintOverrides_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.hintOverrides = other$;
    };
Function _SemanticsConfiguration_elevation$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.elevation;
    };
void _SemanticsConfiguration_elevation_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.elevation = other$;
    };
Function _SemanticsConfiguration_thickness$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.thickness;
    };
void _SemanticsConfiguration_thickness_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.thickness = other$;
    };
Function _SemanticsConfiguration_scopesRoute$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.scopesRoute;
    };
void _SemanticsConfiguration_scopesRoute_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.scopesRoute = other$;
    };
Function _SemanticsConfiguration_namesRoute$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.namesRoute;
    };
void _SemanticsConfiguration_namesRoute_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.namesRoute = other$;
    };
Function _SemanticsConfiguration_isImage$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.isImage;
    };
void _SemanticsConfiguration_isImage_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.isImage = other$;
    };
Function _SemanticsConfiguration_liveRegion$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.liveRegion;
    };
void _SemanticsConfiguration_liveRegion_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.liveRegion = other$;
    };
Function _SemanticsConfiguration_textDirection$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.textDirection;
    };
void _SemanticsConfiguration_textDirection_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.textDirection = other$;
    };
Function _SemanticsConfiguration_isSelected$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.isSelected;
    };
void _SemanticsConfiguration_isSelected_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.isSelected = other$;
    };
Function _SemanticsConfiguration_isEnabled$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.isEnabled;
    };
void _SemanticsConfiguration_isEnabled_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.isEnabled = other$;
    };
Function _SemanticsConfiguration_isChecked$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.isChecked;
    };
void _SemanticsConfiguration_isChecked_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.isChecked = other$;
    };
Function _SemanticsConfiguration_isCheckStateMixed$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.isCheckStateMixed;
    };
void _SemanticsConfiguration_isCheckStateMixed_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.isCheckStateMixed = other$;
    };
Function _SemanticsConfiguration_isToggled$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.isToggled;
    };
void _SemanticsConfiguration_isToggled_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.isToggled = other$;
    };
Function _SemanticsConfiguration_isInMutuallyExclusiveGroup$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.isInMutuallyExclusiveGroup;
    };
void _SemanticsConfiguration_isInMutuallyExclusiveGroup_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.isInMutuallyExclusiveGroup = other$;
    };
Function _SemanticsConfiguration_isFocusable$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.isFocusable;
    };
void _SemanticsConfiguration_isFocusable_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.isFocusable = other$;
    };
Function _SemanticsConfiguration_isFocused$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.isFocused;
    };
void _SemanticsConfiguration_isFocused_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.isFocused = other$;
    };
Function _SemanticsConfiguration_isButton$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.isButton;
    };
void _SemanticsConfiguration_isButton_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.isButton = other$;
    };
Function _SemanticsConfiguration_isLink$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.isLink;
    };
void _SemanticsConfiguration_isLink_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.isLink = other$;
    };
Function _SemanticsConfiguration_isHeader$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.isHeader;
    };
void _SemanticsConfiguration_isHeader_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.isHeader = other$;
    };
Function _SemanticsConfiguration_isSlider$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.isSlider;
    };
void _SemanticsConfiguration_isSlider_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.isSlider = other$;
    };
Function _SemanticsConfiguration_isKeyboardKey$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.isKeyboardKey;
    };
void _SemanticsConfiguration_isKeyboardKey_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.isKeyboardKey = other$;
    };
Function _SemanticsConfiguration_isHidden$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.isHidden;
    };
void _SemanticsConfiguration_isHidden_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.isHidden = other$;
    };
Function _SemanticsConfiguration_isTextField$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.isTextField;
    };
void _SemanticsConfiguration_isTextField_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.isTextField = other$;
    };
Function _SemanticsConfiguration_isReadOnly$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.isReadOnly;
    };
void _SemanticsConfiguration_isReadOnly_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.isReadOnly = other$;
    };
Function _SemanticsConfiguration_isObscured$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.isObscured;
    };
void _SemanticsConfiguration_isObscured_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.isObscured = other$;
    };
Function _SemanticsConfiguration_isMultiline$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.isMultiline;
    };
void _SemanticsConfiguration_isMultiline_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.isMultiline = other$;
    };
Function _SemanticsConfiguration_hasImplicitScrolling$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.hasImplicitScrolling;
    };
void _SemanticsConfiguration_hasImplicitScrolling_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.hasImplicitScrolling = other$;
    };
Function _SemanticsConfiguration_textSelection$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.textSelection;
    };
void _SemanticsConfiguration_textSelection_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.textSelection = other$;
    };
Function _SemanticsConfiguration_scrollPosition$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.scrollPosition;
    };
void _SemanticsConfiguration_scrollPosition_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.scrollPosition = other$;
    };
Function _SemanticsConfiguration_scrollExtentMax$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.scrollExtentMax;
    };
void _SemanticsConfiguration_scrollExtentMax_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.scrollExtentMax = other$;
    };
Function _SemanticsConfiguration_scrollExtentMin$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.scrollExtentMin;
    };
void _SemanticsConfiguration_scrollExtentMin_set$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    (dynamic other$) {
      target$.scrollExtentMin = other$;
    };
Function _SemanticsConfiguration_tagsForChildren$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    () {
      return target$.tagsForChildren;
    };
Function _SemanticsConfiguration__$(m.Scope scope$) => () {
      return SemanticsConfiguration();
    };
Function _SemanticsConfiguration_getActionHandler$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    target$.getActionHandler;
Function _SemanticsConfiguration_tagsChildrenWith$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    target$.tagsChildrenWith;
Function _SemanticsConfiguration_addTagForChildren$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    target$.addTagForChildren;
Function _SemanticsConfiguration_isCompatibleWith$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    target$.isCompatibleWith;
Function _SemanticsConfiguration_absorb$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    target$.absorb;
Function _SemanticsConfiguration_copy$(
  m.Scope scope$,
  SemanticsConfiguration target$,
) =>
    target$.copy;
Function SemanticsSortKey_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SemanticsSortKey;
Function SemanticsSortKey_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SemanticsSortKey;
Function _SemanticsSortKey_name$(
  m.Scope scope$,
  SemanticsSortKey target$,
) =>
    () {
      return target$.name;
    };
Function _SemanticsSortKey_compareTo$(
  m.Scope scope$,
  SemanticsSortKey target$,
) =>
    target$.compareTo;
Function _SemanticsSortKey_doCompare$(
  m.Scope scope$,
  SemanticsSortKey target$,
) =>
    target$.doCompare;
Function _SemanticsSortKey_debugFillProperties$(
  m.Scope scope$,
  SemanticsSortKey target$,
) =>
    target$.debugFillProperties;
Function OrdinalSortKey_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as OrdinalSortKey;
Function OrdinalSortKey_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is OrdinalSortKey;
Function _OrdinalSortKey_order$(
  m.Scope scope$,
  OrdinalSortKey target$,
) =>
    () {
      return target$.order;
    };
Function _OrdinalSortKey__$(m.Scope scope$) => (
      double order, {
      String? name,
    }) {
      return OrdinalSortKey(
        order,
        name: name,
      );
    };
Function _OrdinalSortKey_doCompare$(
  m.Scope scope$,
  OrdinalSortKey target$,
) =>
    target$.doCompare;
Function _OrdinalSortKey_debugFillProperties$(
  m.Scope scope$,
  OrdinalSortKey target$,
) =>
    target$.debugFillProperties;
Function _DebugSemanticsDumpOrder_inverseHitTest$(m.Scope scope$) =>
    () => DebugSemanticsDumpOrder.inverseHitTest;
Function _DebugSemanticsDumpOrder_traversalOrder$(m.Scope scope$) =>
    () => DebugSemanticsDumpOrder.traversalOrder;
Function _DebugSemanticsDumpOrder_values$(m.Scope scope$) =>
    () => DebugSemanticsDumpOrder.values;
Function _debugResetSemanticsIdCounter$(m.Scope scope$) =>
    debugResetSemanticsIdCounter;
