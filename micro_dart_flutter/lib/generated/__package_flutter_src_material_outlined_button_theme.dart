// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/outlined_button_theme.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/outlined_button_theme.dart',
  {
    'OutlinedButtonThemeData.': _OutlinedButtonThemeData__$,
    'OutlinedButtonThemeData.lerp': _OutlinedButtonThemeData_lerp$,
    'OutlinedButtonTheme.': _OutlinedButtonTheme__$,
    'OutlinedButtonTheme.of': _OutlinedButtonTheme_of$,
  },
  {},
  {
    'OutlinedButtonThemeData': m.ClassMirror(
      'OutlinedButtonThemeData',
      {
        '#as': OutlinedButtonThemeData_as$,
        '#is': OutlinedButtonThemeData_is$,
        'style': _OutlinedButtonThemeData_style$,
        'hashCode': _OutlinedButtonThemeData_hashCode$,
        '==': _OutlinedButtonThemeData_eq$$,
        'debugFillProperties': _OutlinedButtonThemeData_debugFillProperties$,
      },
      {},
    ),
    'OutlinedButtonTheme': m.ClassMirror(
      'OutlinedButtonTheme',
      {
        '#as': OutlinedButtonTheme_as$,
        '#is': OutlinedButtonTheme_is$,
        'data': _OutlinedButtonTheme_data$,
        'wrap': _OutlinedButtonTheme_wrap$,
        'updateShouldNotify': _OutlinedButtonTheme_updateShouldNotify$,
      },
      {},
    ),
  },
);
Function OutlinedButtonThemeData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as OutlinedButtonThemeData;
Function OutlinedButtonThemeData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is OutlinedButtonThemeData;
Function _OutlinedButtonThemeData_style$(
  m.Scope scope$,
  OutlinedButtonThemeData target$,
) =>
    () {
      return target$.style;
    };
Function _OutlinedButtonThemeData_hashCode$(
  m.Scope scope$,
  OutlinedButtonThemeData target$,
) =>
    () {
      return target$.hashCode;
    };
Function _OutlinedButtonThemeData__$(m.Scope scope$) => ({ButtonStyle? style}) {
      return OutlinedButtonThemeData(style: style);
    };
Function _OutlinedButtonThemeData_lerp$(m.Scope scope$) =>
    OutlinedButtonThemeData.lerp;
Function _OutlinedButtonThemeData_eq$$(
  m.Scope scope$,
  OutlinedButtonThemeData target$,
) =>
    (Object other$) => target$ == other$;
Function _OutlinedButtonThemeData_debugFillProperties$(
  m.Scope scope$,
  OutlinedButtonThemeData target$,
) =>
    target$.debugFillProperties;
Function OutlinedButtonTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as OutlinedButtonTheme;
Function OutlinedButtonTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is OutlinedButtonTheme;
Function _OutlinedButtonTheme_data$(
  m.Scope scope$,
  OutlinedButtonTheme target$,
) =>
    () {
      return target$.data;
    };
Function _OutlinedButtonTheme__$(m.Scope scope$) => ({
      Key? key,
      required OutlinedButtonThemeData data,
      required Widget child,
    }) {
      return OutlinedButtonTheme(
        child: child,
        data: data,
        key: key,
      );
    };
Function _OutlinedButtonTheme_of$(m.Scope scope$) => OutlinedButtonTheme.of;
Function _OutlinedButtonTheme_wrap$(
  m.Scope scope$,
  OutlinedButtonTheme target$,
) =>
    target$.wrap;
Function _OutlinedButtonTheme_updateShouldNotify$(
  m.Scope scope$,
  OutlinedButtonTheme target$,
) =>
    target$.updateShouldNotify;
