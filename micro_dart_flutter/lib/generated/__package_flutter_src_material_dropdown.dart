// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/dropdown.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_theme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/scrollbar.dart';
import 'package:flutter/src/material/shadows.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/dropdown.dart',
  {'DropdownButtonHideUnderline.at': _DropdownButtonHideUnderline_at$},
  {},
  {
    'DropdownMenuItem': m.ClassMirror(
      'DropdownMenuItem',
      {
        '#as': DropdownMenuItem_as$,
        '#is': DropdownMenuItem_is$,
        'onTap': _DropdownMenuItem_onTap$,
        'value': _DropdownMenuItem_value$,
        'enabled': _DropdownMenuItem_enabled$,
      },
      {},
    ),
    'DropdownButtonHideUnderline': m.ClassMirror(
      'DropdownButtonHideUnderline',
      {
        '#as': DropdownButtonHideUnderline_as$,
        '#is': DropdownButtonHideUnderline_is$,
        'updateShouldNotify': _DropdownButtonHideUnderline_updateShouldNotify$,
      },
      {},
    ),
    'DropdownButton': m.ClassMirror(
      'DropdownButton',
      {
        '#as': DropdownButton_as$,
        '#is': DropdownButton_is$,
        'items': _DropdownButton_items$,
        'value': _DropdownButton_value$,
        'hint': _DropdownButton_hint$,
        'disabledHint': _DropdownButton_disabledHint$,
        'onChanged': _DropdownButton_onChanged$,
        'onTap': _DropdownButton_onTap$,
        'selectedItemBuilder': _DropdownButton_selectedItemBuilder$,
        'elevation': _DropdownButton_elevation$,
        'style': _DropdownButton_style$,
        'underline': _DropdownButton_underline$,
        'icon': _DropdownButton_icon$,
        'iconDisabledColor': _DropdownButton_iconDisabledColor$,
        'iconEnabledColor': _DropdownButton_iconEnabledColor$,
        'iconSize': _DropdownButton_iconSize$,
        'isDense': _DropdownButton_isDense$,
        'isExpanded': _DropdownButton_isExpanded$,
        'itemHeight': _DropdownButton_itemHeight$,
        'focusColor': _DropdownButton_focusColor$,
        'focusNode': _DropdownButton_focusNode$,
        'autofocus': _DropdownButton_autofocus$,
        'dropdownColor': _DropdownButton_dropdownColor$,
        'padding': _DropdownButton_padding$,
        'menuMaxHeight': _DropdownButton_menuMaxHeight$,
        'enableFeedback': _DropdownButton_enableFeedback$,
        'alignment': _DropdownButton_alignment$,
        'borderRadius': _DropdownButton_borderRadius$,
        'createState': _DropdownButton_createState$,
      },
      {},
    ),
    'DropdownButtonFormField': m.ClassMirror(
      'DropdownButtonFormField',
      {
        '#as': DropdownButtonFormField_as$,
        '#is': DropdownButtonFormField_is$,
        'onChanged': _DropdownButtonFormField_onChanged$,
        'decoration': _DropdownButtonFormField_decoration$,
        'createState': _DropdownButtonFormField_createState$,
      },
      {},
    ),
  },
);
Function DropdownMenuItem_as$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DropdownMenuItem<T>;
Function DropdownMenuItem_is$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DropdownMenuItem<T>;
void Function()? _DropdownMenuItem_onTap$<T>(DropdownMenuItem<T> target) {
  return target.onTap;
}

T? _DropdownMenuItem_value$<T>(DropdownMenuItem<T> target) {
  return target.value;
}

bool _DropdownMenuItem_enabled$<T>(DropdownMenuItem<T> target) {
  return target.enabled;
}

Function DropdownButtonHideUnderline_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DropdownButtonHideUnderline;
Function DropdownButtonHideUnderline_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DropdownButtonHideUnderline;
Function _DropdownButtonHideUnderline_at$(m.Scope scope) =>
    DropdownButtonHideUnderline.at;
Function _DropdownButtonHideUnderline_updateShouldNotify$(
  m.Scope scope,
  DropdownButtonHideUnderline target,
) =>
    target.updateShouldNotify;
Function DropdownButton_as$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DropdownButton<T>;
Function DropdownButton_is$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DropdownButton<T>;
List<DropdownMenuItem<T>>? _DropdownButton_items$<T>(DropdownButton<T> target) {
  return target.items;
}

T? _DropdownButton_value$<T>(DropdownButton<T> target) {
  return target.value;
}

Widget? _DropdownButton_hint$<T>(DropdownButton<T> target) {
  return target.hint;
}

Widget? _DropdownButton_disabledHint$<T>(DropdownButton<T> target) {
  return target.disabledHint;
}

void Function(T?)? _DropdownButton_onChanged$<T>(DropdownButton<T> target) {
  return target.onChanged;
}

void Function()? _DropdownButton_onTap$<T>(DropdownButton<T> target) {
  return target.onTap;
}

List<Widget> Function(BuildContext)? _DropdownButton_selectedItemBuilder$<T>(
    DropdownButton<T> target) {
  return target.selectedItemBuilder;
}

int _DropdownButton_elevation$<T>(DropdownButton<T> target) {
  return target.elevation;
}

TextStyle? _DropdownButton_style$<T>(DropdownButton<T> target) {
  return target.style;
}

Widget? _DropdownButton_underline$<T>(DropdownButton<T> target) {
  return target.underline;
}

Widget? _DropdownButton_icon$<T>(DropdownButton<T> target) {
  return target.icon;
}

Color? _DropdownButton_iconDisabledColor$<T>(DropdownButton<T> target) {
  return target.iconDisabledColor;
}

Color? _DropdownButton_iconEnabledColor$<T>(DropdownButton<T> target) {
  return target.iconEnabledColor;
}

double _DropdownButton_iconSize$<T>(DropdownButton<T> target) {
  return target.iconSize;
}

bool _DropdownButton_isDense$<T>(DropdownButton<T> target) {
  return target.isDense;
}

bool _DropdownButton_isExpanded$<T>(DropdownButton<T> target) {
  return target.isExpanded;
}

double? _DropdownButton_itemHeight$<T>(DropdownButton<T> target) {
  return target.itemHeight;
}

Color? _DropdownButton_focusColor$<T>(DropdownButton<T> target) {
  return target.focusColor;
}

FocusNode? _DropdownButton_focusNode$<T>(DropdownButton<T> target) {
  return target.focusNode;
}

bool _DropdownButton_autofocus$<T>(DropdownButton<T> target) {
  return target.autofocus;
}

Color? _DropdownButton_dropdownColor$<T>(DropdownButton<T> target) {
  return target.dropdownColor;
}

EdgeInsetsGeometry? _DropdownButton_padding$<T>(DropdownButton<T> target) {
  return target.padding;
}

double? _DropdownButton_menuMaxHeight$<T>(DropdownButton<T> target) {
  return target.menuMaxHeight;
}

bool? _DropdownButton_enableFeedback$<T>(DropdownButton<T> target) {
  return target.enableFeedback;
}

AlignmentGeometry _DropdownButton_alignment$<T>(DropdownButton<T> target) {
  return target.alignment;
}

BorderRadius? _DropdownButton_borderRadius$<T>(DropdownButton<T> target) {
  return target.borderRadius;
}

Function _DropdownButton_createState$<T>(
  m.Scope scope,
  DropdownButton<T> target,
) =>
    target.createState;
Function DropdownButtonFormField_as$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DropdownButtonFormField<T>;
Function DropdownButtonFormField_is$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DropdownButtonFormField<T>;
void Function(T?)? _DropdownButtonFormField_onChanged$<T>(
    DropdownButtonFormField<T> target) {
  return target.onChanged;
}

InputDecoration _DropdownButtonFormField_decoration$<T>(
    DropdownButtonFormField<T> target) {
  return target.decoration;
}

Function _DropdownButtonFormField_createState$<T>(
  m.Scope scope,
  DropdownButtonFormField<T> target,
) =>
    target.createState;
