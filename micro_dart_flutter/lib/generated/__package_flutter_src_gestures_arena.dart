// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/gestures/arena.dart';
import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter/src/gestures/debug.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/gestures/arena.dart',
  {
    'GestureDisposition.accepted': _GestureDisposition_accepted$,
    'GestureDisposition.rejected': _GestureDisposition_rejected$,
    'GestureDisposition.values': _GestureDisposition_values$,
  },
  {},
  {
    'GestureArenaMember': m.ClassMirror(
      'GestureArenaMember',
      {
        '#as': GestureArenaMember_as$,
        '#is': GestureArenaMember_is$,
        'acceptGesture': _GestureArenaMember_acceptGesture$,
        'rejectGesture': _GestureArenaMember_rejectGesture$,
      },
      {},
    ),
    'GestureArenaEntry': m.ClassMirror(
      'GestureArenaEntry',
      {
        '#as': GestureArenaEntry_as$,
        '#is': GestureArenaEntry_is$,
        'resolve': _GestureArenaEntry_resolve$,
      },
      {},
    ),
    'GestureArenaManager': m.ClassMirror(
      'GestureArenaManager',
      {
        '#as': GestureArenaManager_as$,
        '#is': GestureArenaManager_is$,
        'add': _GestureArenaManager_add$,
        'close': _GestureArenaManager_close$,
        'sweep': _GestureArenaManager_sweep$,
        'hold': _GestureArenaManager_hold$,
        'release': _GestureArenaManager_release$,
      },
      {},
    ),
    'GestureDisposition': m.ClassMirror(
      'GestureDisposition',
      {},
      {},
    ),
  },
);
Function GestureArenaMember_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as GestureArenaMember;
Function GestureArenaMember_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is GestureArenaMember;
Function _GestureArenaMember_acceptGesture$(
  m.Scope scope,
  GestureArenaMember target,
) =>
    target.acceptGesture;
Function _GestureArenaMember_rejectGesture$(
  m.Scope scope,
  GestureArenaMember target,
) =>
    target.rejectGesture;
Function GestureArenaEntry_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as GestureArenaEntry;
Function GestureArenaEntry_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is GestureArenaEntry;
Function _GestureArenaEntry_resolve$(
  m.Scope scope,
  GestureArenaEntry target,
) =>
    target.resolve;
Function GestureArenaManager_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as GestureArenaManager;
Function GestureArenaManager_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is GestureArenaManager;
Function _GestureArenaManager_add$(
  m.Scope scope,
  GestureArenaManager target,
) =>
    target.add;
Function _GestureArenaManager_close$(
  m.Scope scope,
  GestureArenaManager target,
) =>
    target.close;
Function _GestureArenaManager_sweep$(
  m.Scope scope,
  GestureArenaManager target,
) =>
    target.sweep;
Function _GestureArenaManager_hold$(
  m.Scope scope,
  GestureArenaManager target,
) =>
    target.hold;
Function _GestureArenaManager_release$(
  m.Scope scope,
  GestureArenaManager target,
) =>
    target.release;
GestureDisposition _GestureDisposition_accepted$() {
  return GestureDisposition.accepted;
}

GestureDisposition _GestureDisposition_rejected$() {
  return GestureDisposition.rejected;
}

List<GestureDisposition> _GestureDisposition_values$() {
  return GestureDisposition.values;
}
