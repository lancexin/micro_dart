// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/route.dart';
import 'dart:math';
import 'dart:ui' show ImageFilter, lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/interface_level.dart';
import 'package:flutter/src/cupertino/localizations.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/route.dart',
  {
    'kCupertinoModalBarrierColor': _kCupertinoModalBarrierColor$,
    'showCupertinoModalPopup': _showCupertinoModalPopup$,
    'showCupertinoDialog': _showCupertinoDialog$,
  },
  {},
  {
    'CupertinoPageRoute': m.ClassMirror(
      'CupertinoPageRoute',
      {
        '#as': CupertinoPageRoute_as$,
        '#is': CupertinoPageRoute_is$,
        'builder': _CupertinoPageRoute_builder$,
        'title': _CupertinoPageRoute_title$,
        'maintainState': _CupertinoPageRoute_maintainState$,
        'debugLabel': _CupertinoPageRoute_debugLabel$,
        'buildContent': _CupertinoPageRoute_buildContent$,
      },
      {},
    ),
    'CupertinoPage': m.ClassMirror(
      'CupertinoPage',
      {
        '#as': CupertinoPage_as$,
        '#is': CupertinoPage_is$,
        'child': _CupertinoPage_child$,
        'title': _CupertinoPage_title$,
        'maintainState': _CupertinoPage_maintainState$,
        'fullscreenDialog': _CupertinoPage_fullscreenDialog$,
        'allowSnapshotting': _CupertinoPage_allowSnapshotting$,
        'createRoute': _CupertinoPage_createRoute$,
      },
      {},
    ),
    'CupertinoPageTransition': m.ClassMirror(
      'CupertinoPageTransition',
      {
        '#as': CupertinoPageTransition_as$,
        '#is': CupertinoPageTransition_is$,
        'child': _CupertinoPageTransition_child$,
        'build': _CupertinoPageTransition_build$,
      },
      {},
    ),
    'CupertinoFullscreenDialogTransition': m.ClassMirror(
      'CupertinoFullscreenDialogTransition',
      {
        '#as': CupertinoFullscreenDialogTransition_as$,
        '#is': CupertinoFullscreenDialogTransition_is$,
        'child': _CupertinoFullscreenDialogTransition_child$,
        'build': _CupertinoFullscreenDialogTransition_build$,
      },
      {},
    ),
    'CupertinoModalPopupRoute': m.ClassMirror(
      'CupertinoModalPopupRoute',
      {
        '#as': CupertinoModalPopupRoute_as$,
        '#is': CupertinoModalPopupRoute_is$,
        'builder': _CupertinoModalPopupRoute_builder$,
        'barrierLabel': _CupertinoModalPopupRoute_barrierLabel$,
        'barrierColor': _CupertinoModalPopupRoute_barrierColor$,
        'anchorPoint': _CupertinoModalPopupRoute_anchorPoint$,
        'barrierDismissible': _CupertinoModalPopupRoute_barrierDismissible$,
        'semanticsDismissible': _CupertinoModalPopupRoute_semanticsDismissible$,
        'transitionDuration': _CupertinoModalPopupRoute_transitionDuration$,
        'createAnimation': _CupertinoModalPopupRoute_createAnimation$,
        'buildPage': _CupertinoModalPopupRoute_buildPage$,
        'buildTransitions': _CupertinoModalPopupRoute_buildTransitions$,
      },
      {},
    ),
    'CupertinoDialogRoute': m.ClassMirror(
      'CupertinoDialogRoute',
      {
        '#as': CupertinoDialogRoute_as$,
        '#is': CupertinoDialogRoute_is$,
      },
      {},
    ),
  },
);
Color _kCupertinoModalBarrierColor$() {
  return kCupertinoModalBarrierColor;
}

Function CupertinoPageRoute_as$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CupertinoPageRoute<T>;
Function CupertinoPageRoute_is$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CupertinoPageRoute<T>;
Widget Function(BuildContext) _CupertinoPageRoute_builder$<T>(
    CupertinoPageRoute<T> target) {
  return target.builder;
}

String? _CupertinoPageRoute_title$<T>(CupertinoPageRoute<T> target) {
  return target.title;
}

bool _CupertinoPageRoute_maintainState$<T>(CupertinoPageRoute<T> target) {
  return target.maintainState;
}

String _CupertinoPageRoute_debugLabel$<T>(CupertinoPageRoute<T> target) {
  return target.debugLabel;
}

Function _CupertinoPageRoute_buildContent$<T>(
  m.Scope scope,
  CupertinoPageRoute<T> target,
) =>
    target.buildContent;
Function CupertinoPage_as$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CupertinoPage<T>;
Function CupertinoPage_is$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CupertinoPage<T>;
Widget _CupertinoPage_child$<T>(CupertinoPage<T> target) {
  return target.child;
}

String? _CupertinoPage_title$<T>(CupertinoPage<T> target) {
  return target.title;
}

bool _CupertinoPage_maintainState$<T>(CupertinoPage<T> target) {
  return target.maintainState;
}

bool _CupertinoPage_fullscreenDialog$<T>(CupertinoPage<T> target) {
  return target.fullscreenDialog;
}

bool _CupertinoPage_allowSnapshotting$<T>(CupertinoPage<T> target) {
  return target.allowSnapshotting;
}

Function _CupertinoPage_createRoute$<T>(
  m.Scope scope,
  CupertinoPage<T> target,
) =>
    target.createRoute;
Function CupertinoPageTransition_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CupertinoPageTransition;
Function CupertinoPageTransition_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CupertinoPageTransition;
Widget _CupertinoPageTransition_child$(CupertinoPageTransition target) {
  return target.child;
}

Function _CupertinoPageTransition_build$(
  m.Scope scope,
  CupertinoPageTransition target,
) =>
    target.build;
Function CupertinoFullscreenDialogTransition_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CupertinoFullscreenDialogTransition;
Function CupertinoFullscreenDialogTransition_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CupertinoFullscreenDialogTransition;
Widget _CupertinoFullscreenDialogTransition_child$(
    CupertinoFullscreenDialogTransition target) {
  return target.child;
}

Function _CupertinoFullscreenDialogTransition_build$(
  m.Scope scope,
  CupertinoFullscreenDialogTransition target,
) =>
    target.build;
Function CupertinoModalPopupRoute_as$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CupertinoModalPopupRoute<T>;
Function CupertinoModalPopupRoute_is$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CupertinoModalPopupRoute<T>;
Widget Function(BuildContext) _CupertinoModalPopupRoute_builder$<T>(
    CupertinoModalPopupRoute<T> target) {
  return target.builder;
}

String _CupertinoModalPopupRoute_barrierLabel$<T>(
    CupertinoModalPopupRoute<T> target) {
  return target.barrierLabel;
}

Color? _CupertinoModalPopupRoute_barrierColor$<T>(
    CupertinoModalPopupRoute<T> target) {
  return target.barrierColor;
}

Offset? _CupertinoModalPopupRoute_anchorPoint$<T>(
    CupertinoModalPopupRoute<T> target) {
  return target.anchorPoint;
}

bool _CupertinoModalPopupRoute_barrierDismissible$<T>(
    CupertinoModalPopupRoute<T> target) {
  return target.barrierDismissible;
}

bool _CupertinoModalPopupRoute_semanticsDismissible$<T>(
    CupertinoModalPopupRoute<T> target) {
  return target.semanticsDismissible;
}

Duration _CupertinoModalPopupRoute_transitionDuration$<T>(
    CupertinoModalPopupRoute<T> target) {
  return target.transitionDuration;
}

Function _CupertinoModalPopupRoute_createAnimation$<T>(
  m.Scope scope,
  CupertinoModalPopupRoute<T> target,
) =>
    target.createAnimation;
Function _CupertinoModalPopupRoute_buildPage$<T>(
  m.Scope scope,
  CupertinoModalPopupRoute<T> target,
) =>
    target.buildPage;
Function _CupertinoModalPopupRoute_buildTransitions$<T>(
  m.Scope scope,
  CupertinoModalPopupRoute<T> target,
) =>
    target.buildTransitions;
Function CupertinoDialogRoute_as$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target as CupertinoDialogRoute<T>;
Function CupertinoDialogRoute_is$<T>(
  m.Scope scope,
  dynamic target,
) =>
    () => target is CupertinoDialogRoute<T>;
Function _showCupertinoModalPopup$(m.Scope scope) => <T>({
      Offset? anchorPoint,
      Color? barrierColor,
      bool? barrierDismissible,
      required m.FunctionPointer builder,
      required BuildContext context,
      ImageFilter? filter,
      RouteSettings? routeSettings,
      bool? semanticsDismissible,
      bool? useRootNavigator,
    }) {
      Widget builderProxy(BuildContext builder_context) =>
          scope.engine.callFunctionPointer(
            scope,
            builder,
            [builder_context],
            {},
          );
      return showCupertinoModalPopup<T>(
        anchorPoint: anchorPoint,
        barrierColor:
            barrierColor == null ? kCupertinoModalBarrierColor : barrierColor,
        barrierDismissible:
            barrierDismissible == null ? true : barrierDismissible,
        builder: builderProxy,
        context: context,
        filter: filter,
        routeSettings: routeSettings,
        semanticsDismissible:
            semanticsDismissible == null ? false : semanticsDismissible,
        useRootNavigator: useRootNavigator == null ? true : useRootNavigator,
      );
    };
Function _showCupertinoDialog$(m.Scope scope) => <T>({
      Offset? anchorPoint,
      bool? barrierDismissible,
      String? barrierLabel,
      required m.FunctionPointer builder,
      required BuildContext context,
      RouteSettings? routeSettings,
      bool? useRootNavigator,
    }) {
      Widget builderProxy(BuildContext builder_context) =>
          scope.engine.callFunctionPointer(
            scope,
            builder,
            [builder_context],
            {},
          );
      return showCupertinoDialog<T>(
        anchorPoint: anchorPoint,
        barrierDismissible:
            barrierDismissible == null ? false : barrierDismissible,
        barrierLabel: barrierLabel,
        builder: builderProxy,
        context: context,
        routeSettings: routeSettings,
        useRootNavigator: useRootNavigator == null ? true : useRootNavigator,
      );
    };
