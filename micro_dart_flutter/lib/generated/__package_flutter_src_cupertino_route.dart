// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/cupertino/route.dart';
import 'dart:math';
import 'dart:ui' show ImageFilter, lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/cupertino/colors.dart';
import 'package:flutter/src/cupertino/interface_level.dart';
import 'package:flutter/src/cupertino/localizations.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/cupertino/route.dart',
  {
    'kCupertinoModalBarrierColor': _kCupertinoModalBarrierColor$,
    'CupertinoPageRoute.': _CupertinoPageRoute__$,
    'CupertinoPage.': _CupertinoPage__$,
    'CupertinoPageTransition.': _CupertinoPageTransition__$,
    'CupertinoFullscreenDialogTransition.':
        _CupertinoFullscreenDialogTransition__$,
    'CupertinoModalPopupRoute.': _CupertinoModalPopupRoute__$,
    'CupertinoDialogRoute.': _CupertinoDialogRoute__$,
    'showCupertinoModalPopup': _showCupertinoModalPopup$,
    'showCupertinoDialog': _showCupertinoDialog$,
  },
  {},
  {
    'CupertinoPageRoute': m.ClassMirror(
      'CupertinoPageRoute',
      {
        '#as': CupertinoPageRoute_as$,
        '#is': CupertinoPageRoute_is$,
        'builder': _CupertinoPageRoute_builder$,
        'title': _CupertinoPageRoute_title$,
        'maintainState': _CupertinoPageRoute_maintainState$,
        'debugLabel': _CupertinoPageRoute_debugLabel$,
        'buildContent': _CupertinoPageRoute_buildContent$,
      },
      {},
    ),
    'CupertinoPage': m.ClassMirror(
      'CupertinoPage',
      {
        '#as': CupertinoPage_as$,
        '#is': CupertinoPage_is$,
        'child': _CupertinoPage_child$,
        'title': _CupertinoPage_title$,
        'maintainState': _CupertinoPage_maintainState$,
        'fullscreenDialog': _CupertinoPage_fullscreenDialog$,
        'allowSnapshotting': _CupertinoPage_allowSnapshotting$,
        'createRoute': _CupertinoPage_createRoute$,
      },
      {},
    ),
    'CupertinoPageTransition': m.ClassMirror(
      'CupertinoPageTransition',
      {
        '#as': CupertinoPageTransition_as$,
        '#is': CupertinoPageTransition_is$,
        'child': _CupertinoPageTransition_child$,
        'build': _CupertinoPageTransition_build$,
      },
      {},
    ),
    'CupertinoFullscreenDialogTransition': m.ClassMirror(
      'CupertinoFullscreenDialogTransition',
      {
        '#as': CupertinoFullscreenDialogTransition_as$,
        '#is': CupertinoFullscreenDialogTransition_is$,
        'child': _CupertinoFullscreenDialogTransition_child$,
        'build': _CupertinoFullscreenDialogTransition_build$,
      },
      {},
    ),
    'CupertinoModalPopupRoute': m.ClassMirror(
      'CupertinoModalPopupRoute',
      {
        '#as': CupertinoModalPopupRoute_as$,
        '#is': CupertinoModalPopupRoute_is$,
        'builder': _CupertinoModalPopupRoute_builder$,
        'barrierLabel': _CupertinoModalPopupRoute_barrierLabel$,
        'barrierColor': _CupertinoModalPopupRoute_barrierColor$,
        'anchorPoint': _CupertinoModalPopupRoute_anchorPoint$,
        'barrierDismissible': _CupertinoModalPopupRoute_barrierDismissible$,
        'semanticsDismissible': _CupertinoModalPopupRoute_semanticsDismissible$,
        'transitionDuration': _CupertinoModalPopupRoute_transitionDuration$,
        'createAnimation': _CupertinoModalPopupRoute_createAnimation$,
        'buildPage': _CupertinoModalPopupRoute_buildPage$,
        'buildTransitions': _CupertinoModalPopupRoute_buildTransitions$,
      },
      {},
    ),
    'CupertinoDialogRoute': m.ClassMirror(
      'CupertinoDialogRoute',
      {
        '#as': CupertinoDialogRoute_as$,
        '#is': CupertinoDialogRoute_is$,
      },
      {},
    ),
  },
);
Function _kCupertinoModalBarrierColor$(m.Scope scope$) =>
    () => kCupertinoModalBarrierColor;
Function CupertinoPageRoute_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoPageRoute<T>;
Function CupertinoPageRoute_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoPageRoute<T>;
Function _CupertinoPageRoute_builder$<T>(
  m.Scope scope$,
  CupertinoPageRoute<T> target$,
) =>
    () {
      return target$.builder;
    };
Function _CupertinoPageRoute_title$<T>(
  m.Scope scope$,
  CupertinoPageRoute<T> target$,
) =>
    () {
      return target$.title;
    };
Function _CupertinoPageRoute_maintainState$<T>(
  m.Scope scope$,
  CupertinoPageRoute<T> target$,
) =>
    () {
      return target$.maintainState;
    };
Function _CupertinoPageRoute_debugLabel$<T>(
  m.Scope scope$,
  CupertinoPageRoute<T> target$,
) =>
    () {
      return target$.debugLabel;
    };
Function _CupertinoPageRoute__$(m.Scope scope$) => ({
      required m.FunctionPointer builder,
      String? title,
      RouteSettings? settings,
      bool? maintainState,
      bool? fullscreenDialog,
      bool? allowSnapshotting,
    }) {
      Widget builderProxy(BuildContext builder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [builder_context$],
            {},
          );
      return CupertinoPageRoute(
        allowSnapshotting: allowSnapshotting ?? true,
        builder: builderProxy,
        fullscreenDialog: fullscreenDialog ?? false,
        maintainState: maintainState ?? true,
        settings: settings,
        title: title,
      );
    };
Function _CupertinoPageRoute_buildContent$<T>(
  m.Scope scope$,
  CupertinoPageRoute<T> target$,
) =>
    target$.buildContent;
Function CupertinoPage_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoPage<T>;
Function CupertinoPage_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoPage<T>;
Function _CupertinoPage_child$<T>(
  m.Scope scope$,
  CupertinoPage<T> target$,
) =>
    () {
      return target$.child;
    };
Function _CupertinoPage_title$<T>(
  m.Scope scope$,
  CupertinoPage<T> target$,
) =>
    () {
      return target$.title;
    };
Function _CupertinoPage_maintainState$<T>(
  m.Scope scope$,
  CupertinoPage<T> target$,
) =>
    () {
      return target$.maintainState;
    };
Function _CupertinoPage_fullscreenDialog$<T>(
  m.Scope scope$,
  CupertinoPage<T> target$,
) =>
    () {
      return target$.fullscreenDialog;
    };
Function _CupertinoPage_allowSnapshotting$<T>(
  m.Scope scope$,
  CupertinoPage<T> target$,
) =>
    () {
      return target$.allowSnapshotting;
    };
Function _CupertinoPage__$(m.Scope scope$) => ({
      required Widget child,
      bool? maintainState,
      String? title,
      bool? fullscreenDialog,
      bool? allowSnapshotting,
      LocalKey? key,
      String? name,
      Object? arguments,
      String? restorationId,
    }) {
      return CupertinoPage(
        allowSnapshotting: allowSnapshotting ?? true,
        arguments: arguments,
        child: child,
        fullscreenDialog: fullscreenDialog ?? false,
        key: key,
        maintainState: maintainState ?? true,
        name: name,
        restorationId: restorationId,
        title: title,
      );
    };
Function _CupertinoPage_createRoute$<T>(
  m.Scope scope$,
  CupertinoPage<T> target$,
) =>
    target$.createRoute;
Function CupertinoPageTransition_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoPageTransition;
Function CupertinoPageTransition_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoPageTransition;
Function _CupertinoPageTransition_child$(
  m.Scope scope$,
  CupertinoPageTransition target$,
) =>
    () {
      return target$.child;
    };
Function _CupertinoPageTransition__$(m.Scope scope$) => ({
      Key? key,
      required Animation<double> primaryRouteAnimation,
      required Animation<double> secondaryRouteAnimation,
      required Widget child,
      required bool linearTransition,
    }) {
      return CupertinoPageTransition(
        child: child,
        key: key,
        linearTransition: linearTransition,
        primaryRouteAnimation: primaryRouteAnimation,
        secondaryRouteAnimation: secondaryRouteAnimation,
      );
    };
Function _CupertinoPageTransition_build$(
  m.Scope scope$,
  CupertinoPageTransition target$,
) =>
    target$.build;
Function CupertinoFullscreenDialogTransition_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoFullscreenDialogTransition;
Function CupertinoFullscreenDialogTransition_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoFullscreenDialogTransition;
Function _CupertinoFullscreenDialogTransition_child$(
  m.Scope scope$,
  CupertinoFullscreenDialogTransition target$,
) =>
    () {
      return target$.child;
    };
Function _CupertinoFullscreenDialogTransition__$(m.Scope scope$) => ({
      Key? key,
      required Animation<double> primaryRouteAnimation,
      required Animation<double> secondaryRouteAnimation,
      required Widget child,
      required bool linearTransition,
    }) {
      return CupertinoFullscreenDialogTransition(
        child: child,
        key: key,
        linearTransition: linearTransition,
        primaryRouteAnimation: primaryRouteAnimation,
        secondaryRouteAnimation: secondaryRouteAnimation,
      );
    };
Function _CupertinoFullscreenDialogTransition_build$(
  m.Scope scope$,
  CupertinoFullscreenDialogTransition target$,
) =>
    target$.build;
Function CupertinoModalPopupRoute_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoModalPopupRoute<T>;
Function CupertinoModalPopupRoute_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoModalPopupRoute<T>;
Function _CupertinoModalPopupRoute_builder$<T>(
  m.Scope scope$,
  CupertinoModalPopupRoute<T> target$,
) =>
    () {
      return target$.builder;
    };
Function _CupertinoModalPopupRoute_barrierLabel$<T>(
  m.Scope scope$,
  CupertinoModalPopupRoute<T> target$,
) =>
    () {
      return target$.barrierLabel;
    };
Function _CupertinoModalPopupRoute_barrierColor$<T>(
  m.Scope scope$,
  CupertinoModalPopupRoute<T> target$,
) =>
    () {
      return target$.barrierColor;
    };
Function _CupertinoModalPopupRoute_anchorPoint$<T>(
  m.Scope scope$,
  CupertinoModalPopupRoute<T> target$,
) =>
    () {
      return target$.anchorPoint;
    };
Function _CupertinoModalPopupRoute_barrierDismissible$<T>(
  m.Scope scope$,
  CupertinoModalPopupRoute<T> target$,
) =>
    () {
      return target$.barrierDismissible;
    };
Function _CupertinoModalPopupRoute_semanticsDismissible$<T>(
  m.Scope scope$,
  CupertinoModalPopupRoute<T> target$,
) =>
    () {
      return target$.semanticsDismissible;
    };
Function _CupertinoModalPopupRoute_transitionDuration$<T>(
  m.Scope scope$,
  CupertinoModalPopupRoute<T> target$,
) =>
    () {
      return target$.transitionDuration;
    };
Function _CupertinoModalPopupRoute__$(m.Scope scope$) => ({
      required m.FunctionPointer builder,
      String? barrierLabel,
      Color? barrierColor,
      bool? barrierDismissible,
      bool? semanticsDismissible,
      ImageFilter? filter,
      RouteSettings? settings,
      Offset? anchorPoint,
    }) {
      Widget builderProxy(BuildContext builder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [builder_context$],
            {},
          );
      return CupertinoModalPopupRoute(
        anchorPoint: anchorPoint,
        barrierColor: barrierColor ?? kCupertinoModalBarrierColor,
        barrierDismissible: barrierDismissible ?? true,
        barrierLabel: barrierLabel ?? 'Dismiss',
        builder: builderProxy,
        filter: filter,
        semanticsDismissible: semanticsDismissible ?? false,
        settings: settings,
      );
    };
Function _CupertinoModalPopupRoute_createAnimation$<T>(
  m.Scope scope$,
  CupertinoModalPopupRoute<T> target$,
) =>
    target$.createAnimation;
Function _CupertinoModalPopupRoute_buildPage$<T>(
  m.Scope scope$,
  CupertinoModalPopupRoute<T> target$,
) =>
    target$.buildPage;
Function _CupertinoModalPopupRoute_buildTransitions$<T>(
  m.Scope scope$,
  CupertinoModalPopupRoute<T> target$,
) =>
    target$.buildTransitions;
Function CupertinoDialogRoute_as$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CupertinoDialogRoute<T>;
Function CupertinoDialogRoute_is$<T>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CupertinoDialogRoute<T>;
Function _CupertinoDialogRoute__$(m.Scope scope$) => ({
      required m.FunctionPointer builder,
      required BuildContext context,
      bool? barrierDismissible,
      Color? barrierColor,
      String? barrierLabel,
      Duration? transitionDuration,
      m.FunctionPointer? transitionBuilder,
      RouteSettings? settings,
      Offset? anchorPoint,
    }) {
      Widget builderProxy(BuildContext builder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [builder_context$],
            {},
          );
      Widget transitionBuilderProxy(
        BuildContext transitionBuilder_context$,
        Animation<double> transitionBuilder_animation$,
        Animation<double> transitionBuilder_secondaryAnimation$,
        Widget transitionBuilder_child$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            transitionBuilder!,
            [
              transitionBuilder_context$,
              transitionBuilder_animation$,
              transitionBuilder_secondaryAnimation$,
              transitionBuilder_child$,
            ],
            {},
          );
      return CupertinoDialogRoute(
        anchorPoint: anchorPoint,
        barrierColor: barrierColor,
        barrierDismissible: barrierDismissible ?? true,
        barrierLabel: barrierLabel,
        builder: builderProxy,
        context: context,
        settings: settings,
        transitionBuilder: transitionBuilder == null
            ? (BuildContext context, Animation<double> animation,
                Animation<double> secondaryAnimation, Widget child) {
                final CurvedAnimation fadeAnimation = CurvedAnimation(
                  parent: animation,
                  curve: Curves.easeInOut,
                );
                if (animation.status == AnimationStatus.reverse) {
                  return FadeTransition(
                    opacity: fadeAnimation,
                    child: child,
                  );
                }
                return FadeTransition(
                  opacity: fadeAnimation,
                  child: ScaleTransition(
                    scale: animation.drive(Tween<double>(begin: 1.3, end: 1.0)),
                    child: child,
                  ),
                );
              }
            : transitionBuilderProxy,
        transitionDuration:
            transitionDuration ?? const Duration(milliseconds: 250),
      );
    };
Function _showCupertinoModalPopup$(m.Scope scope$) => ({
      required BuildContext context,
      required m.FunctionPointer builder,
      ImageFilter? filter,
      Color? barrierColor,
      bool? barrierDismissible,
      bool? useRootNavigator,
      bool? semanticsDismissible,
      RouteSettings? routeSettings,
      Offset? anchorPoint,
    }) {
      Widget builderProxy(BuildContext builder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [builder_context$],
            {},
          );
      return showCupertinoModalPopup(
        anchorPoint: anchorPoint,
        barrierColor: barrierColor ?? kCupertinoModalBarrierColor,
        barrierDismissible: barrierDismissible ?? true,
        builder: builderProxy,
        context: context,
        filter: filter,
        routeSettings: routeSettings,
        semanticsDismissible: semanticsDismissible ?? false,
        useRootNavigator: useRootNavigator ?? true,
      );
    };
Function _showCupertinoDialog$(m.Scope scope$) => ({
      required BuildContext context,
      required m.FunctionPointer builder,
      String? barrierLabel,
      bool? useRootNavigator,
      bool? barrierDismissible,
      RouteSettings? routeSettings,
      Offset? anchorPoint,
    }) {
      Widget builderProxy(BuildContext builder_context$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            builder,
            [builder_context$],
            {},
          );
      return showCupertinoDialog(
        anchorPoint: anchorPoint,
        barrierDismissible: barrierDismissible ?? false,
        barrierLabel: barrierLabel,
        builder: builderProxy,
        context: context,
        routeSettings: routeSettings,
        useRootNavigator: useRootNavigator ?? true,
      );
    };
