// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/foundation/binding.dart';
import 'dart:async';
import 'dart:convert' show json;
import 'dart:developer';
import 'dart:io' show exit;
import 'dart:ui'
    show Brightness, PlatformDispatcher, SingletonFlutterWindow, window;
import 'package:meta/meta.dart';
import 'package:flutter/src/foundation/assertions.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/foundation/constants.dart';
import 'package:flutter/src/foundation/debug.dart';
import 'package:flutter/src/foundation/object.dart';
import 'package:flutter/src/foundation/platform.dart';
import 'package:flutter/src/foundation/print.dart';
import 'package:flutter/src/foundation/service_extensions.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/foundation/binding.dart',
  {
    'BindingBase.debugReassembleConfig': _BindingBase_debugReassembleConfig$,
    'BindingBase.debugZoneErrorsAreFatal':
        _BindingBase_debugZoneErrorsAreFatal$,
    'BindingBase.checkInstance': _BindingBase_checkInstance$,
    'BindingBase.debugBindingType': _BindingBase_debugBindingType$,
  },
  {
    'BindingBase.debugReassembleConfig':
        _BindingBase_debugReassembleConfig_set$,
    'BindingBase.debugZoneErrorsAreFatal':
        _BindingBase_debugZoneErrorsAreFatal_set$,
  },
  {
    'BindingBase': m.ClassMirror(
      'BindingBase',
      {
        'platformDispatcher': _BindingBase_platformDispatcher$,
        'locked': _BindingBase_locked$,
        'initInstances': _BindingBase_initInstances$,
        'debugCheckZone': _BindingBase_debugCheckZone$,
        'initServiceExtensions': _BindingBase_initServiceExtensions$,
        'unlocked': _BindingBase_unlocked$,
        'reassembleApplication': _BindingBase_reassembleApplication$,
        'performReassemble': _BindingBase_performReassemble$,
        'postEvent': _BindingBase_postEvent$,
        'toString': _BindingBase_toString$,
      },
      {},
    ),
    'DebugReassembleConfig': m.ClassMirror(
      'DebugReassembleConfig',
      {'widgetName': _DebugReassembleConfig_widgetName$},
      {},
    ),
  },
);
DebugReassembleConfig? _BindingBase_debugReassembleConfig$() {
  return BindingBase.debugReassembleConfig;
}

void _BindingBase_debugReassembleConfig_set$(DebugReassembleConfig? other) {
  BindingBase.debugReassembleConfig = other;
}

bool _BindingBase_debugZoneErrorsAreFatal$() {
  return BindingBase.debugZoneErrorsAreFatal;
}

void _BindingBase_debugZoneErrorsAreFatal_set$(bool other) {
  BindingBase.debugZoneErrorsAreFatal = other;
}

PlatformDispatcher _BindingBase_platformDispatcher$(BindingBase target) {
  return target.platformDispatcher;
}

bool _BindingBase_locked$(BindingBase target) {
  return target.locked;
}

Function _BindingBase_initInstances$(
  m.Scope scope,
  BindingBase target,
) =>
    target.initInstances;
Function _BindingBase_checkInstance$<T extends BindingBase>(m.Scope scope) =>
    BindingBase.checkInstance<T>;
Function _BindingBase_debugBindingType$(m.Scope scope) =>
    BindingBase.debugBindingType;
Function _BindingBase_debugCheckZone$(
  m.Scope scope,
  BindingBase target,
) =>
    target.debugCheckZone;
Function _BindingBase_initServiceExtensions$(
  m.Scope scope,
  BindingBase target,
) =>
    target.initServiceExtensions;
Function _BindingBase_unlocked$(
  m.Scope scope,
  BindingBase target,
) =>
    target.unlocked;
Function _BindingBase_reassembleApplication$(
  m.Scope scope,
  BindingBase target,
) =>
    target.reassembleApplication;
Function _BindingBase_performReassemble$(
  m.Scope scope,
  BindingBase target,
) =>
    target.performReassemble;
Function _BindingBase_postEvent$(
  m.Scope scope,
  BindingBase target,
) =>
    target.postEvent;
Function _BindingBase_toString$(
  m.Scope scope,
  BindingBase target,
) =>
    target.toString;
String? _DebugReassembleConfig_widgetName$(DebugReassembleConfig target) {
  return target.widgetName;
}
