// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/foundation/binding.dart';
import 'dart:async';
import 'dart:convert' show json;
import 'dart:developer';
import 'dart:io' show exit;
import 'dart:ui'
    show Brightness, PlatformDispatcher, SingletonFlutterWindow, window;
import 'package:meta/meta.dart';
import 'package:flutter/src/foundation/assertions.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/foundation/constants.dart';
import 'package:flutter/src/foundation/debug.dart';
import 'package:flutter/src/foundation/object.dart';
import 'package:flutter/src/foundation/platform.dart';
import 'package:flutter/src/foundation/print.dart';
import 'package:flutter/src/foundation/service_extensions.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/foundation/binding.dart',
  {
    'BindingBase.debugReassembleConfig': _BindingBase_debugReassembleConfig$,
    'BindingBase.debugZoneErrorsAreFatal':
        _BindingBase_debugZoneErrorsAreFatal$,
    'BindingBase.checkInstance': _BindingBase_checkInstance$,
    'BindingBase.debugBindingType': _BindingBase_debugBindingType$,
    'DebugReassembleConfig.': _DebugReassembleConfig__$,
  },
  {
    'BindingBase.debugReassembleConfig':
        _BindingBase_debugReassembleConfig_set$,
    'BindingBase.debugZoneErrorsAreFatal':
        _BindingBase_debugZoneErrorsAreFatal_set$,
  },
  {
    'BindingBase': m.ClassMirror(
      'BindingBase',
      {
        '#as': BindingBase_as$,
        '#is': BindingBase_is$,
        'platformDispatcher': _BindingBase_platformDispatcher$,
        'locked': _BindingBase_locked$,
        'initInstances': _BindingBase_initInstances$,
        'debugCheckZone': _BindingBase_debugCheckZone$,
        'initServiceExtensions': _BindingBase_initServiceExtensions$,
        'lockEvents': _BindingBase_lockEvents$,
        'unlocked': _BindingBase_unlocked$,
        'reassembleApplication': _BindingBase_reassembleApplication$,
        'performReassemble': _BindingBase_performReassemble$,
        'registerSignalServiceExtension':
            _BindingBase_registerSignalServiceExtension$,
        'registerBoolServiceExtension':
            _BindingBase_registerBoolServiceExtension$,
        'registerNumericServiceExtension':
            _BindingBase_registerNumericServiceExtension$,
        'postEvent': _BindingBase_postEvent$,
        'registerStringServiceExtension':
            _BindingBase_registerStringServiceExtension$,
        'registerServiceExtension': _BindingBase_registerServiceExtension$,
        'toString': _BindingBase_toString$,
      },
      {},
    ),
    'DebugReassembleConfig': m.ClassMirror(
      'DebugReassembleConfig',
      {
        '#as': DebugReassembleConfig_as$,
        '#is': DebugReassembleConfig_is$,
        'widgetName': _DebugReassembleConfig_widgetName$,
      },
      {},
    ),
  },
);
Function BindingBase_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as BindingBase;
Function BindingBase_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is BindingBase;
Function _BindingBase_debugReassembleConfig$(m.Scope scope$) =>
    () => BindingBase.debugReassembleConfig;
void _BindingBase_debugReassembleConfig_set$(DebugReassembleConfig? other$) {
  BindingBase.debugReassembleConfig = other$;
}

Function _BindingBase_debugZoneErrorsAreFatal$(m.Scope scope$) =>
    () => BindingBase.debugZoneErrorsAreFatal;
void _BindingBase_debugZoneErrorsAreFatal_set$(bool other$) {
  BindingBase.debugZoneErrorsAreFatal = other$;
}

Function _BindingBase_platformDispatcher$(
  m.Scope scope$,
  BindingBase target$,
) =>
    () {
      return target$.platformDispatcher;
    };
Function _BindingBase_locked$(
  m.Scope scope$,
  BindingBase target$,
) =>
    () {
      return target$.locked;
    };
Function _BindingBase_initInstances$(
  m.Scope scope$,
  BindingBase target$,
) =>
    target$.initInstances;
Function _BindingBase_checkInstance$<T extends BindingBase>(m.Scope scope$) =>
    BindingBase.checkInstance<T>;
Function _BindingBase_debugBindingType$(m.Scope scope$) =>
    BindingBase.debugBindingType;
Function _BindingBase_debugCheckZone$(
  m.Scope scope$,
  BindingBase target$,
) =>
    target$.debugCheckZone;
Function _BindingBase_initServiceExtensions$(
  m.Scope scope$,
  BindingBase target$,
) =>
    target$.initServiceExtensions;
Function _BindingBase_lockEvents$(
  m.Scope scope$,
  BindingBase target$,
) =>
    (m.FunctionPointer callback) {
      Future<void> callbackProxy() async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            callback,
            [],
            {},
          );
      return target$.lockEvents(callbackProxy);
    };
Function _BindingBase_unlocked$(
  m.Scope scope$,
  BindingBase target$,
) =>
    target$.unlocked;
Function _BindingBase_reassembleApplication$(
  m.Scope scope$,
  BindingBase target$,
) =>
    target$.reassembleApplication;
Function _BindingBase_performReassemble$(
  m.Scope scope$,
  BindingBase target$,
) =>
    target$.performReassemble;
Function _BindingBase_registerSignalServiceExtension$(
  m.Scope scope$,
  BindingBase target$,
) =>
    ({
      required String name,
      required m.FunctionPointer callback,
    }) {
      Future<void> callbackProxy() async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            callback,
            [],
            {},
          );
      target$.registerSignalServiceExtension(
        callback: callbackProxy,
        name: name,
      );
    };
Function _BindingBase_registerBoolServiceExtension$(
  m.Scope scope$,
  BindingBase target$,
) =>
    ({
      required String name,
      required m.FunctionPointer getter,
      required m.FunctionPointer setter,
    }) {
      Future<bool> getterProxy() async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            getter,
            [],
            {},
          );
      Future<void> setterProxy(bool setter_value$) async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            setter,
            [setter_value$],
            {},
          );
      target$.registerBoolServiceExtension(
        getter: getterProxy,
        name: name,
        setter: setterProxy,
      );
    };
Function _BindingBase_registerNumericServiceExtension$(
  m.Scope scope$,
  BindingBase target$,
) =>
    ({
      required String name,
      required m.FunctionPointer getter,
      required m.FunctionPointer setter,
    }) {
      Future<double> getterProxy() async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            getter,
            [],
            {},
          );
      Future<void> setterProxy(double setter_value$) async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            setter,
            [setter_value$],
            {},
          );
      target$.registerNumericServiceExtension(
        getter: getterProxy,
        name: name,
        setter: setterProxy,
      );
    };
Function _BindingBase_postEvent$(
  m.Scope scope$,
  BindingBase target$,
) =>
    target$.postEvent;
Function _BindingBase_registerStringServiceExtension$(
  m.Scope scope$,
  BindingBase target$,
) =>
    ({
      required String name,
      required m.FunctionPointer getter,
      required m.FunctionPointer setter,
    }) {
      Future<String> getterProxy() async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            getter,
            [],
            {},
          );
      Future<void> setterProxy(String setter_value$) async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            setter,
            [setter_value$],
            {},
          );
      target$.registerStringServiceExtension(
        getter: getterProxy,
        name: name,
        setter: setterProxy,
      );
    };
Function _BindingBase_registerServiceExtension$(
  m.Scope scope$,
  BindingBase target$,
) =>
    ({
      required String name,
      required m.FunctionPointer callback,
    }) {
      Future<Map<String, dynamic>> callbackProxy(
              Map callback_parameters$) async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            callback,
            [callback_parameters$],
            {},
          );
      target$.registerServiceExtension(
        callback: callbackProxy,
        name: name,
      );
    };
Function _BindingBase_toString$(
  m.Scope scope$,
  BindingBase target$,
) =>
    target$.toString;
Function DebugReassembleConfig_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DebugReassembleConfig;
Function DebugReassembleConfig_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DebugReassembleConfig;
Function _DebugReassembleConfig_widgetName$(
  m.Scope scope$,
  DebugReassembleConfig target$,
) =>
    () {
      return target$.widgetName;
    };
Function _DebugReassembleConfig__$(m.Scope scope$) => ({String? widgetName}) {
      return DebugReassembleConfig(widgetName: widgetName);
    };
