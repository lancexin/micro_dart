// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/reorderable_list.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/reorderable_list.dart',
  {},
  {},
  {
    'ReorderableListView': m.ClassMirror(
      'ReorderableListView',
      {
        '#as': ReorderableListView_as$,
        '#is': ReorderableListView_is$,
        'itemBuilder': _ReorderableListView_itemBuilder$,
        'itemCount': _ReorderableListView_itemCount$,
        'onReorder': _ReorderableListView_onReorder$,
        'onReorderStart': _ReorderableListView_onReorderStart$,
        'onReorderEnd': _ReorderableListView_onReorderEnd$,
        'proxyDecorator': _ReorderableListView_proxyDecorator$,
        'buildDefaultDragHandles':
            _ReorderableListView_buildDefaultDragHandles$,
        'padding': _ReorderableListView_padding$,
        'header': _ReorderableListView_header$,
        'footer': _ReorderableListView_footer$,
        'scrollDirection': _ReorderableListView_scrollDirection$,
        'reverse': _ReorderableListView_reverse$,
        'scrollController': _ReorderableListView_scrollController$,
        'primary': _ReorderableListView_primary$,
        'physics': _ReorderableListView_physics$,
        'shrinkWrap': _ReorderableListView_shrinkWrap$,
        'anchor': _ReorderableListView_anchor$,
        'cacheExtent': _ReorderableListView_cacheExtent$,
        'dragStartBehavior': _ReorderableListView_dragStartBehavior$,
        'keyboardDismissBehavior':
            _ReorderableListView_keyboardDismissBehavior$,
        'restorationId': _ReorderableListView_restorationId$,
        'clipBehavior': _ReorderableListView_clipBehavior$,
        'itemExtent': _ReorderableListView_itemExtent$,
        'prototypeItem': _ReorderableListView_prototypeItem$,
        'createState': _ReorderableListView_createState$,
      },
      {},
    )
  },
);
Function ReorderableListView_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ReorderableListView;
Function ReorderableListView_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ReorderableListView;
Widget Function(BuildContext, int) _ReorderableListView_itemBuilder$(
    ReorderableListView target) {
  return target.itemBuilder;
}

int _ReorderableListView_itemCount$(ReorderableListView target) {
  return target.itemCount;
}

void Function(int, int) _ReorderableListView_onReorder$(
    ReorderableListView target) {
  return target.onReorder;
}

void Function(int)? _ReorderableListView_onReorderStart$(
    ReorderableListView target) {
  return target.onReorderStart;
}

void Function(int)? _ReorderableListView_onReorderEnd$(
    ReorderableListView target) {
  return target.onReorderEnd;
}

Widget Function(Widget, int, Animation<double>)?
    _ReorderableListView_proxyDecorator$(ReorderableListView target) {
  return target.proxyDecorator;
}

bool _ReorderableListView_buildDefaultDragHandles$(ReorderableListView target) {
  return target.buildDefaultDragHandles;
}

EdgeInsets? _ReorderableListView_padding$(ReorderableListView target) {
  return target.padding;
}

Widget? _ReorderableListView_header$(ReorderableListView target) {
  return target.header;
}

Widget? _ReorderableListView_footer$(ReorderableListView target) {
  return target.footer;
}

Axis _ReorderableListView_scrollDirection$(ReorderableListView target) {
  return target.scrollDirection;
}

bool _ReorderableListView_reverse$(ReorderableListView target) {
  return target.reverse;
}

ScrollController? _ReorderableListView_scrollController$(
    ReorderableListView target) {
  return target.scrollController;
}

bool? _ReorderableListView_primary$(ReorderableListView target) {
  return target.primary;
}

ScrollPhysics? _ReorderableListView_physics$(ReorderableListView target) {
  return target.physics;
}

bool _ReorderableListView_shrinkWrap$(ReorderableListView target) {
  return target.shrinkWrap;
}

double _ReorderableListView_anchor$(ReorderableListView target) {
  return target.anchor;
}

double? _ReorderableListView_cacheExtent$(ReorderableListView target) {
  return target.cacheExtent;
}

DragStartBehavior _ReorderableListView_dragStartBehavior$(
    ReorderableListView target) {
  return target.dragStartBehavior;
}

ScrollViewKeyboardDismissBehavior _ReorderableListView_keyboardDismissBehavior$(
    ReorderableListView target) {
  return target.keyboardDismissBehavior;
}

String? _ReorderableListView_restorationId$(ReorderableListView target) {
  return target.restorationId;
}

Clip _ReorderableListView_clipBehavior$(ReorderableListView target) {
  return target.clipBehavior;
}

double? _ReorderableListView_itemExtent$(ReorderableListView target) {
  return target.itemExtent;
}

Widget? _ReorderableListView_prototypeItem$(ReorderableListView target) {
  return target.prototypeItem;
}

Function _ReorderableListView_createState$(
  m.Scope scope,
  ReorderableListView target,
) =>
    target.createState;
