// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/rounded_rectangle_border.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/painting/border_radius.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/painting/circle_border.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/rounded_rectangle_border.dart',
  {'RoundedRectangleBorder.': _RoundedRectangleBorder__$},
  {},
  {
    'RoundedRectangleBorder': m.ClassMirror(
      'RoundedRectangleBorder',
      {
        '#as': RoundedRectangleBorder_as$,
        '#is': RoundedRectangleBorder_is$,
        'borderRadius': _RoundedRectangleBorder_borderRadius$,
        'preferPaintInterior': _RoundedRectangleBorder_preferPaintInterior$,
        'hashCode': _RoundedRectangleBorder_hashCode$,
        'scale': _RoundedRectangleBorder_scale$,
        'lerpFrom': _RoundedRectangleBorder_lerpFrom$,
        'lerpTo': _RoundedRectangleBorder_lerpTo$,
        'copyWith': _RoundedRectangleBorder_copyWith$,
        'getInnerPath': _RoundedRectangleBorder_getInnerPath$,
        'getOuterPath': _RoundedRectangleBorder_getOuterPath$,
        'paintInterior': _RoundedRectangleBorder_paintInterior$,
        'paint': _RoundedRectangleBorder_paint$,
        '==': _RoundedRectangleBorder_eq$$,
        'toString': _RoundedRectangleBorder_toString$,
      },
      {},
    )
  },
);
Function RoundedRectangleBorder_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RoundedRectangleBorder;
Function RoundedRectangleBorder_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RoundedRectangleBorder;
Function _RoundedRectangleBorder_borderRadius$(
  m.Scope scope$,
  RoundedRectangleBorder target$,
) =>
    () {
      return target$.borderRadius;
    };
Function _RoundedRectangleBorder_preferPaintInterior$(
  m.Scope scope$,
  RoundedRectangleBorder target$,
) =>
    () {
      return target$.preferPaintInterior;
    };
Function _RoundedRectangleBorder_hashCode$(
  m.Scope scope$,
  RoundedRectangleBorder target$,
) =>
    () {
      return target$.hashCode;
    };
Function _RoundedRectangleBorder__$(m.Scope scope$) => ({
      BorderSide? side,
      BorderRadiusGeometry? borderRadius,
    }) {
      return RoundedRectangleBorder(
        borderRadius: borderRadius ?? BorderRadius.zero,
        side: side ?? BorderSide.none,
      );
    };
Function _RoundedRectangleBorder_scale$(
  m.Scope scope$,
  RoundedRectangleBorder target$,
) =>
    target$.scale;
Function _RoundedRectangleBorder_lerpFrom$(
  m.Scope scope$,
  RoundedRectangleBorder target$,
) =>
    target$.lerpFrom;
Function _RoundedRectangleBorder_lerpTo$(
  m.Scope scope$,
  RoundedRectangleBorder target$,
) =>
    target$.lerpTo;
Function _RoundedRectangleBorder_copyWith$(
  m.Scope scope$,
  RoundedRectangleBorder target$,
) =>
    target$.copyWith;
Function _RoundedRectangleBorder_getInnerPath$(
  m.Scope scope$,
  RoundedRectangleBorder target$,
) =>
    target$.getInnerPath;
Function _RoundedRectangleBorder_getOuterPath$(
  m.Scope scope$,
  RoundedRectangleBorder target$,
) =>
    target$.getOuterPath;
Function _RoundedRectangleBorder_paintInterior$(
  m.Scope scope$,
  RoundedRectangleBorder target$,
) =>
    target$.paintInterior;
Function _RoundedRectangleBorder_paint$(
  m.Scope scope$,
  RoundedRectangleBorder target$,
) =>
    target$.paint;
Function _RoundedRectangleBorder_eq$$(
  m.Scope scope$,
  RoundedRectangleBorder target$,
) =>
    (Object other$) => target$ == other$;
Function _RoundedRectangleBorder_toString$(
  m.Scope scope$,
  RoundedRectangleBorder target$,
) =>
    target$.toString;
