// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/default_selection_style.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/inherited_theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/default_selection_style.dart',
  {
    'DefaultSelectionStyle.defaultColor': _DefaultSelectionStyle_defaultColor$,
    'DefaultSelectionStyle.of': _DefaultSelectionStyle_of$,
  },
  {},
  {
    'DefaultSelectionStyle': m.ClassMirror(
      'DefaultSelectionStyle',
      {
        'cursorColor': _DefaultSelectionStyle_cursorColor$,
        'selectionColor': _DefaultSelectionStyle_selectionColor$,
        'wrap': _DefaultSelectionStyle_wrap$,
        'updateShouldNotify': _DefaultSelectionStyle_updateShouldNotify$,
      },
      {},
    )
  },
);
Color _DefaultSelectionStyle_defaultColor$() {
  return DefaultSelectionStyle.defaultColor;
}

Color? _DefaultSelectionStyle_cursorColor$(DefaultSelectionStyle target) {
  return target.cursorColor;
}

Color? _DefaultSelectionStyle_selectionColor$(DefaultSelectionStyle target) {
  return target.selectionColor;
}

Function _DefaultSelectionStyle_of$(m.Scope scope) => DefaultSelectionStyle.of;
Function _DefaultSelectionStyle_wrap$(
  m.Scope scope,
  DefaultSelectionStyle target,
) =>
    target.wrap;
Function _DefaultSelectionStyle_updateShouldNotify$(
  m.Scope scope,
  DefaultSelectionStyle target,
) =>
    target.updateShouldNotify;
