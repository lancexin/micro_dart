// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/framework.dart';
import 'dart:async';
import 'dart:collection';
import 'dart:developer';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/binding.dart';
import 'package:flutter/src/widgets/debug.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/inherited_model.dart';
import 'package:flutter/src/widgets/notification_listener.dart';
import 'package:flutter/src/widgets/widget_inspector.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/framework.dart',
  {
    'Widget.canUpdate': _Widget_canUpdate$,
    'Element.describeElements': _Element_describeElements$,
    'ErrorWidget.builder': _ErrorWidget_builder$,
  },
  {'ErrorWidget.builder': _ErrorWidget_builder_set$},
  {
    'ObjectKey': m.ClassMirror(
      'ObjectKey',
      {
        'value': _ObjectKey_value$,
        'hashCode': _ObjectKey_hashCode$,
        'toString': _ObjectKey_toString$,
      },
      {},
    ),
    'GlobalKey': m.ClassMirror(
      'GlobalKey',
      {
        'currentContext': _GlobalKey_currentContext$,
        'currentWidget': _GlobalKey_currentWidget$,
        'currentState': _GlobalKey_currentState$,
      },
      {},
    ),
    'LabeledGlobalKey': m.ClassMirror(
      'LabeledGlobalKey',
      {'toString': _LabeledGlobalKey_toString$},
      {},
    ),
    'GlobalObjectKey': m.ClassMirror(
      'GlobalObjectKey',
      {
        'value': _GlobalObjectKey_value$,
        'hashCode': _GlobalObjectKey_hashCode$,
        'toString': _GlobalObjectKey_toString$,
      },
      {},
    ),
    'Widget': m.ClassMirror(
      'Widget',
      {
        'key': _Widget_key$,
        'hashCode': _Widget_hashCode$,
        'createElement': _Widget_createElement$,
        'toStringShort': _Widget_toStringShort$,
        'debugFillProperties': _Widget_debugFillProperties$,
      },
      {},
    ),
    'StatelessWidget': m.ClassMirror(
      'StatelessWidget',
      {
        'createElement': _StatelessWidget_createElement$,
        'build': _StatelessWidget_build$,
      },
      {},
    ),
    'StatefulWidget': m.ClassMirror(
      'StatefulWidget',
      {
        'createElement': _StatefulWidget_createElement$,
        'createState': _StatefulWidget_createState$,
      },
      {},
    ),
    'State': m.ClassMirror(
      'State',
      {
        'widget': _State_widget$,
        'context': _State_context$,
        'mounted': _State_mounted$,
        'initState': _State_initState$,
        'didUpdateWidget': _State_didUpdateWidget$,
        'reassemble': _State_reassemble$,
        'deactivate': _State_deactivate$,
        'activate': _State_activate$,
        'dispose': _State_dispose$,
        'build': _State_build$,
        'didChangeDependencies': _State_didChangeDependencies$,
        'debugFillProperties': _State_debugFillProperties$,
      },
      {},
    ),
    'ProxyWidget': m.ClassMirror(
      'ProxyWidget',
      {'child': _ProxyWidget_child$},
      {},
    ),
    'ParentDataWidget': m.ClassMirror(
      'ParentDataWidget',
      {
        'debugTypicalAncestorWidgetClass':
            _ParentDataWidget_debugTypicalAncestorWidgetClass$,
        'createElement': _ParentDataWidget_createElement$,
        'debugIsValidRenderObject': _ParentDataWidget_debugIsValidRenderObject$,
        'applyParentData': _ParentDataWidget_applyParentData$,
        'debugCanApplyOutOfTurn': _ParentDataWidget_debugCanApplyOutOfTurn$,
      },
      {},
    ),
    'InheritedWidget': m.ClassMirror(
      'InheritedWidget',
      {
        'createElement': _InheritedWidget_createElement$,
        'updateShouldNotify': _InheritedWidget_updateShouldNotify$,
      },
      {},
    ),
    'RenderObjectWidget': m.ClassMirror(
      'RenderObjectWidget',
      {
        'createElement': _RenderObjectWidget_createElement$,
        'createRenderObject': _RenderObjectWidget_createRenderObject$,
        'updateRenderObject': _RenderObjectWidget_updateRenderObject$,
        'didUnmountRenderObject': _RenderObjectWidget_didUnmountRenderObject$,
      },
      {},
    ),
    'LeafRenderObjectWidget': m.ClassMirror(
      'LeafRenderObjectWidget',
      {'createElement': _LeafRenderObjectWidget_createElement$},
      {},
    ),
    'SingleChildRenderObjectWidget': m.ClassMirror(
      'SingleChildRenderObjectWidget',
      {
        'child': _SingleChildRenderObjectWidget_child$,
        'createElement': _SingleChildRenderObjectWidget_createElement$,
      },
      {},
    ),
    'MultiChildRenderObjectWidget': m.ClassMirror(
      'MultiChildRenderObjectWidget',
      {
        'children': _MultiChildRenderObjectWidget_children$,
        'createElement': _MultiChildRenderObjectWidget_createElement$,
      },
      {},
    ),
    'BuildContext': m.ClassMirror(
      'BuildContext',
      {
        'widget': _BuildContext_widget$,
        'owner': _BuildContext_owner$,
        'mounted': _BuildContext_mounted$,
        'debugDoingBuild': _BuildContext_debugDoingBuild$,
        'size': _BuildContext_size$,
        'findRenderObject': _BuildContext_findRenderObject$,
        'dependOnInheritedElement': _BuildContext_dependOnInheritedElement$,
        'dependOnInheritedWidgetOfExactType':
            _BuildContext_dependOnInheritedWidgetOfExactType$,
        'getInheritedWidgetOfExactType':
            _BuildContext_getInheritedWidgetOfExactType$,
        'getElementForInheritedWidgetOfExactType':
            _BuildContext_getElementForInheritedWidgetOfExactType$,
        'findAncestorWidgetOfExactType':
            _BuildContext_findAncestorWidgetOfExactType$,
        'findAncestorStateOfType': _BuildContext_findAncestorStateOfType$,
        'findRootAncestorStateOfType':
            _BuildContext_findRootAncestorStateOfType$,
        'findAncestorRenderObjectOfType':
            _BuildContext_findAncestorRenderObjectOfType$,
        'dispatchNotification': _BuildContext_dispatchNotification$,
        'describeElement': _BuildContext_describeElement$,
        'describeWidget': _BuildContext_describeWidget$,
        'describeMissingAncestor': _BuildContext_describeMissingAncestor$,
        'describeOwnershipChain': _BuildContext_describeOwnershipChain$,
      },
      {},
    ),
    'BuildOwner': m.ClassMirror(
      'BuildOwner',
      {
        'onBuildScheduled': _BuildOwner_onBuildScheduled$,
        'focusManager': _BuildOwner_focusManager$,
        'debugBuilding': _BuildOwner_debugBuilding$,
        'globalKeyCount': _BuildOwner_globalKeyCount$,
        'scheduleBuildFor': _BuildOwner_scheduleBuildFor$,
        'finalizeTree': _BuildOwner_finalizeTree$,
        'reassemble': _BuildOwner_reassemble$,
      },
      {
        'onBuildScheduled': _BuildOwner_onBuildScheduled_set$,
        'focusManager': _BuildOwner_focusManager_set$,
      },
    ),
    'Element': m.ClassMirror(
      'Element',
      {
        'slot': _Element_slot$,
        'depth': _Element_depth$,
        'widget': _Element_widget$,
        'mounted': _Element_mounted$,
        'debugIsDefunct': _Element_debugIsDefunct$,
        'debugIsActive': _Element_debugIsActive$,
        'owner': _Element_owner$,
        'renderObject': _Element_renderObject$,
        'size': _Element_size$,
        'dirty': _Element_dirty$,
        'reassemble': _Element_reassemble$,
        'describeMissingAncestor': _Element_describeMissingAncestor$,
        'describeElement': _Element_describeElement$,
        'describeWidget': _Element_describeWidget$,
        'describeOwnershipChain': _Element_describeOwnershipChain$,
        'updateChild': _Element_updateChild$,
        'mount': _Element_mount$,
        'update': _Element_update$,
        'updateSlotForChild': _Element_updateSlotForChild$,
        'detachRenderObject': _Element_detachRenderObject$,
        'attachRenderObject': _Element_attachRenderObject$,
        'inflateWidget': _Element_inflateWidget$,
        'deactivateChild': _Element_deactivateChild$,
        'forgetChild': _Element_forgetChild$,
        'activate': _Element_activate$,
        'deactivate': _Element_deactivate$,
        'debugDeactivated': _Element_debugDeactivated$,
        'unmount': _Element_unmount$,
        'findRenderObject': _Element_findRenderObject$,
        'doesDependOnInheritedElement': _Element_doesDependOnInheritedElement$,
        'dependOnInheritedElement': _Element_dependOnInheritedElement$,
        'dependOnInheritedWidgetOfExactType':
            _Element_dependOnInheritedWidgetOfExactType$,
        'getInheritedWidgetOfExactType':
            _Element_getInheritedWidgetOfExactType$,
        'getElementForInheritedWidgetOfExactType':
            _Element_getElementForInheritedWidgetOfExactType$,
        'attachNotificationTree': _Element_attachNotificationTree$,
        'findAncestorWidgetOfExactType':
            _Element_findAncestorWidgetOfExactType$,
        'findAncestorStateOfType': _Element_findAncestorStateOfType$,
        'findRootAncestorStateOfType': _Element_findRootAncestorStateOfType$,
        'findAncestorRenderObjectOfType':
            _Element_findAncestorRenderObjectOfType$,
        'didChangeDependencies': _Element_didChangeDependencies$,
        'debugGetCreatorChain': _Element_debugGetCreatorChain$,
        'debugGetDiagnosticChain': _Element_debugGetDiagnosticChain$,
        'dispatchNotification': _Element_dispatchNotification$,
        'toStringShort': _Element_toStringShort$,
        'toDiagnosticsNode': _Element_toDiagnosticsNode$,
        'debugFillProperties': _Element_debugFillProperties$,
        'debugDescribeChildren': _Element_debugDescribeChildren$,
        'markNeedsBuild': _Element_markNeedsBuild$,
        'rebuild': _Element_rebuild$,
        'performRebuild': _Element_performRebuild$,
      },
      {},
    ),
    'ErrorWidget': m.ClassMirror(
      'ErrorWidget',
      {
        'message': _ErrorWidget_message$,
        'createRenderObject': _ErrorWidget_createRenderObject$,
        'debugFillProperties': _ErrorWidget_debugFillProperties$,
      },
      {},
    ),
    'ComponentElement': m.ClassMirror(
      'ComponentElement',
      {
        'debugDoingBuild': _ComponentElement_debugDoingBuild$,
        'mount': _ComponentElement_mount$,
        'performRebuild': _ComponentElement_performRebuild$,
        'build': _ComponentElement_build$,
        'forgetChild': _ComponentElement_forgetChild$,
      },
      {},
    ),
    'StatelessElement': m.ClassMirror(
      'StatelessElement',
      {
        'build': _StatelessElement_build$,
        'update': _StatelessElement_update$,
      },
      {},
    ),
    'StatefulElement': m.ClassMirror(
      'StatefulElement',
      {
        'state': _StatefulElement_state$,
        'build': _StatefulElement_build$,
        'reassemble': _StatefulElement_reassemble$,
        'performRebuild': _StatefulElement_performRebuild$,
        'update': _StatefulElement_update$,
        'activate': _StatefulElement_activate$,
        'deactivate': _StatefulElement_deactivate$,
        'unmount': _StatefulElement_unmount$,
        'dependOnInheritedElement': _StatefulElement_dependOnInheritedElement$,
        'didChangeDependencies': _StatefulElement_didChangeDependencies$,
        'toDiagnosticsNode': _StatefulElement_toDiagnosticsNode$,
        'debugFillProperties': _StatefulElement_debugFillProperties$,
      },
      {},
    ),
    'ProxyElement': m.ClassMirror(
      'ProxyElement',
      {
        'build': _ProxyElement_build$,
        'update': _ProxyElement_update$,
        'updated': _ProxyElement_updated$,
        'notifyClients': _ProxyElement_notifyClients$,
      },
      {},
    ),
    'ParentDataElement': m.ClassMirror(
      'ParentDataElement',
      {
        'applyWidgetOutOfTurn': _ParentDataElement_applyWidgetOutOfTurn$,
        'notifyClients': _ParentDataElement_notifyClients$,
      },
      {},
    ),
    'InheritedElement': m.ClassMirror(
      'InheritedElement',
      {
        'debugDeactivated': _InheritedElement_debugDeactivated$,
        'getDependencies': _InheritedElement_getDependencies$,
        'setDependencies': _InheritedElement_setDependencies$,
        'updateDependencies': _InheritedElement_updateDependencies$,
        'notifyDependent': _InheritedElement_notifyDependent$,
        'updated': _InheritedElement_updated$,
        'notifyClients': _InheritedElement_notifyClients$,
      },
      {},
    ),
    'RenderObjectElement': m.ClassMirror(
      'RenderObjectElement',
      {
        'renderObject': _RenderObjectElement_renderObject$,
        'debugDoingBuild': _RenderObjectElement_debugDoingBuild$,
        'mount': _RenderObjectElement_mount$,
        'update': _RenderObjectElement_update$,
        'performRebuild': _RenderObjectElement_performRebuild$,
        'updateChildren': _RenderObjectElement_updateChildren$,
        'deactivate': _RenderObjectElement_deactivate$,
        'unmount': _RenderObjectElement_unmount$,
        'attachRenderObject': _RenderObjectElement_attachRenderObject$,
        'detachRenderObject': _RenderObjectElement_detachRenderObject$,
        'insertRenderObjectChild':
            _RenderObjectElement_insertRenderObjectChild$,
        'moveRenderObjectChild': _RenderObjectElement_moveRenderObjectChild$,
        'removeRenderObjectChild':
            _RenderObjectElement_removeRenderObjectChild$,
        'debugFillProperties': _RenderObjectElement_debugFillProperties$,
      },
      {},
    ),
    'LeafRenderObjectElement': m.ClassMirror(
      'LeafRenderObjectElement',
      {
        'forgetChild': _LeafRenderObjectElement_forgetChild$,
        'insertRenderObjectChild':
            _LeafRenderObjectElement_insertRenderObjectChild$,
        'moveRenderObjectChild':
            _LeafRenderObjectElement_moveRenderObjectChild$,
        'removeRenderObjectChild':
            _LeafRenderObjectElement_removeRenderObjectChild$,
        'debugDescribeChildren':
            _LeafRenderObjectElement_debugDescribeChildren$,
      },
      {},
    ),
    'SingleChildRenderObjectElement': m.ClassMirror(
      'SingleChildRenderObjectElement',
      {
        'forgetChild': _SingleChildRenderObjectElement_forgetChild$,
        'mount': _SingleChildRenderObjectElement_mount$,
        'update': _SingleChildRenderObjectElement_update$,
        'insertRenderObjectChild':
            _SingleChildRenderObjectElement_insertRenderObjectChild$,
        'moveRenderObjectChild':
            _SingleChildRenderObjectElement_moveRenderObjectChild$,
        'removeRenderObjectChild':
            _SingleChildRenderObjectElement_removeRenderObjectChild$,
      },
      {},
    ),
    'MultiChildRenderObjectElement': m.ClassMirror(
      'MultiChildRenderObjectElement',
      {
        'renderObject': _MultiChildRenderObjectElement_renderObject$,
        'children': _MultiChildRenderObjectElement_children$,
        'insertRenderObjectChild':
            _MultiChildRenderObjectElement_insertRenderObjectChild$,
        'moveRenderObjectChild':
            _MultiChildRenderObjectElement_moveRenderObjectChild$,
        'removeRenderObjectChild':
            _MultiChildRenderObjectElement_removeRenderObjectChild$,
        'forgetChild': _MultiChildRenderObjectElement_forgetChild$,
        'inflateWidget': _MultiChildRenderObjectElement_inflateWidget$,
        'mount': _MultiChildRenderObjectElement_mount$,
        'update': _MultiChildRenderObjectElement_update$,
      },
      {},
    ),
    'DebugCreator': m.ClassMirror(
      'DebugCreator',
      {
        'element': _DebugCreator_element$,
        'toString': _DebugCreator_toString$,
      },
      {},
    ),
    'IndexedSlot': m.ClassMirror(
      'IndexedSlot',
      {
        'value': _IndexedSlot_value$,
        'index': _IndexedSlot_index$,
        'hashCode': _IndexedSlot_hashCode$,
      },
      {},
    ),
  },
);
Object? _ObjectKey_value$(ObjectKey target) {
  return target.value;
}

int _ObjectKey_hashCode$(ObjectKey target) {
  return target.hashCode;
}

Function _ObjectKey_toString$(
  m.Scope scope,
  ObjectKey target,
) =>
    target.toString;
BuildContext? _GlobalKey_currentContext$<T extends State<StatefulWidget>>(
    GlobalKey<T> target) {
  return target.currentContext;
}

Widget? _GlobalKey_currentWidget$<T extends State<StatefulWidget>>(
    GlobalKey<T> target) {
  return target.currentWidget;
}

T? _GlobalKey_currentState$<T extends State<StatefulWidget>>(
    GlobalKey<T> target) {
  return target.currentState;
}

Function _LabeledGlobalKey_toString$<T extends State<StatefulWidget>>(
  m.Scope scope,
  LabeledGlobalKey<T> target,
) =>
    target.toString;
Object _GlobalObjectKey_value$<T extends State<StatefulWidget>>(
    GlobalObjectKey<T> target) {
  return target.value;
}

int _GlobalObjectKey_hashCode$<T extends State<StatefulWidget>>(
    GlobalObjectKey<T> target) {
  return target.hashCode;
}

Function _GlobalObjectKey_toString$<T extends State<StatefulWidget>>(
  m.Scope scope,
  GlobalObjectKey<T> target,
) =>
    target.toString;
Key? _Widget_key$(Widget target) {
  return target.key;
}

int _Widget_hashCode$(Widget target) {
  return target.hashCode;
}

Function _Widget_createElement$(
  m.Scope scope,
  Widget target,
) =>
    target.createElement;
Function _Widget_toStringShort$(
  m.Scope scope,
  Widget target,
) =>
    target.toStringShort;
Function _Widget_debugFillProperties$(
  m.Scope scope,
  Widget target,
) =>
    target.debugFillProperties;
Function _Widget_canUpdate$(m.Scope scope) => Widget.canUpdate;
Function _StatelessWidget_createElement$(
  m.Scope scope,
  StatelessWidget target,
) =>
    target.createElement;
Function _StatelessWidget_build$(
  m.Scope scope,
  StatelessWidget target,
) =>
    target.build;
Function _StatefulWidget_createElement$(
  m.Scope scope,
  StatefulWidget target,
) =>
    target.createElement;
Function _StatefulWidget_createState$(
  m.Scope scope,
  StatefulWidget target,
) =>
    target.createState;
T _State_widget$<T extends StatefulWidget>(State<T> target) {
  return target.widget;
}

BuildContext _State_context$<T extends StatefulWidget>(State<T> target) {
  return target.context;
}

bool _State_mounted$<T extends StatefulWidget>(State<T> target) {
  return target.mounted;
}

Function _State_initState$<T extends StatefulWidget>(
  m.Scope scope,
  State<T> target,
) =>
    target.initState;
Function _State_didUpdateWidget$<T extends StatefulWidget>(
  m.Scope scope,
  State<T> target,
) =>
    target.didUpdateWidget;
Function _State_reassemble$<T extends StatefulWidget>(
  m.Scope scope,
  State<T> target,
) =>
    target.reassemble;
Function _State_deactivate$<T extends StatefulWidget>(
  m.Scope scope,
  State<T> target,
) =>
    target.deactivate;
Function _State_activate$<T extends StatefulWidget>(
  m.Scope scope,
  State<T> target,
) =>
    target.activate;
Function _State_dispose$<T extends StatefulWidget>(
  m.Scope scope,
  State<T> target,
) =>
    target.dispose;
Function _State_build$<T extends StatefulWidget>(
  m.Scope scope,
  State<T> target,
) =>
    target.build;
Function _State_didChangeDependencies$<T extends StatefulWidget>(
  m.Scope scope,
  State<T> target,
) =>
    target.didChangeDependencies;
Function _State_debugFillProperties$<T extends StatefulWidget>(
  m.Scope scope,
  State<T> target,
) =>
    target.debugFillProperties;
Widget _ProxyWidget_child$(ProxyWidget target) {
  return target.child;
}

Type _ParentDataWidget_debugTypicalAncestorWidgetClass$<T extends ParentData>(
    ParentDataWidget<T> target) {
  return target.debugTypicalAncestorWidgetClass;
}

Function _ParentDataWidget_createElement$<T extends ParentData>(
  m.Scope scope,
  ParentDataWidget<T> target,
) =>
    target.createElement;
Function _ParentDataWidget_debugIsValidRenderObject$<T extends ParentData>(
  m.Scope scope,
  ParentDataWidget<T> target,
) =>
    target.debugIsValidRenderObject;
Function _ParentDataWidget_applyParentData$<T extends ParentData>(
  m.Scope scope,
  ParentDataWidget<T> target,
) =>
    target.applyParentData;
Function _ParentDataWidget_debugCanApplyOutOfTurn$<T extends ParentData>(
  m.Scope scope,
  ParentDataWidget<T> target,
) =>
    target.debugCanApplyOutOfTurn;
Function _InheritedWidget_createElement$(
  m.Scope scope,
  InheritedWidget target,
) =>
    target.createElement;
Function _InheritedWidget_updateShouldNotify$(
  m.Scope scope,
  InheritedWidget target,
) =>
    target.updateShouldNotify;
Function _RenderObjectWidget_createElement$(
  m.Scope scope,
  RenderObjectWidget target,
) =>
    target.createElement;
Function _RenderObjectWidget_createRenderObject$(
  m.Scope scope,
  RenderObjectWidget target,
) =>
    target.createRenderObject;
Function _RenderObjectWidget_updateRenderObject$(
  m.Scope scope,
  RenderObjectWidget target,
) =>
    target.updateRenderObject;
Function _RenderObjectWidget_didUnmountRenderObject$(
  m.Scope scope,
  RenderObjectWidget target,
) =>
    target.didUnmountRenderObject;
Function _LeafRenderObjectWidget_createElement$(
  m.Scope scope,
  LeafRenderObjectWidget target,
) =>
    target.createElement;
Widget? _SingleChildRenderObjectWidget_child$(
    SingleChildRenderObjectWidget target) {
  return target.child;
}

Function _SingleChildRenderObjectWidget_createElement$(
  m.Scope scope,
  SingleChildRenderObjectWidget target,
) =>
    target.createElement;
List<Widget> _MultiChildRenderObjectWidget_children$(
    MultiChildRenderObjectWidget target) {
  return target.children;
}

Function _MultiChildRenderObjectWidget_createElement$(
  m.Scope scope,
  MultiChildRenderObjectWidget target,
) =>
    target.createElement;
Widget _BuildContext_widget$(BuildContext target) {
  return target.widget;
}

BuildOwner? _BuildContext_owner$(BuildContext target) {
  return target.owner;
}

bool _BuildContext_mounted$(BuildContext target) {
  return target.mounted;
}

bool _BuildContext_debugDoingBuild$(BuildContext target) {
  return target.debugDoingBuild;
}

Size? _BuildContext_size$(BuildContext target) {
  return target.size;
}

Function _BuildContext_findRenderObject$(
  m.Scope scope,
  BuildContext target,
) =>
    target.findRenderObject;
Function _BuildContext_dependOnInheritedElement$(
  m.Scope scope,
  BuildContext target,
) =>
    target.dependOnInheritedElement;
Function _BuildContext_dependOnInheritedWidgetOfExactType$<
        T extends InheritedWidget>(
  m.Scope scope,
  BuildContext target,
) =>
    target.dependOnInheritedWidgetOfExactType<T>;
Function
    _BuildContext_getInheritedWidgetOfExactType$<T extends InheritedWidget>(
  m.Scope scope,
  BuildContext target,
) =>
        target.getInheritedWidgetOfExactType<T>;
Function _BuildContext_getElementForInheritedWidgetOfExactType$<
        T extends InheritedWidget>(
  m.Scope scope,
  BuildContext target,
) =>
    target.getElementForInheritedWidgetOfExactType<T>;
Function _BuildContext_findAncestorWidgetOfExactType$<T extends Widget>(
  m.Scope scope,
  BuildContext target,
) =>
    target.findAncestorWidgetOfExactType<T>;
Function
    _BuildContext_findAncestorStateOfType$<T extends State<StatefulWidget>>(
  m.Scope scope,
  BuildContext target,
) =>
        target.findAncestorStateOfType<T>;
Function
    _BuildContext_findRootAncestorStateOfType$<T extends State<StatefulWidget>>(
  m.Scope scope,
  BuildContext target,
) =>
        target.findRootAncestorStateOfType<T>;
Function _BuildContext_findAncestorRenderObjectOfType$<T extends RenderObject>(
  m.Scope scope,
  BuildContext target,
) =>
    target.findAncestorRenderObjectOfType<T>;
Function _BuildContext_dispatchNotification$(
  m.Scope scope,
  BuildContext target,
) =>
    target.dispatchNotification;
Function _BuildContext_describeElement$(
  m.Scope scope,
  BuildContext target,
) =>
    target.describeElement;
Function _BuildContext_describeWidget$(
  m.Scope scope,
  BuildContext target,
) =>
    target.describeWidget;
Function _BuildContext_describeMissingAncestor$(
  m.Scope scope,
  BuildContext target,
) =>
    target.describeMissingAncestor;
Function _BuildContext_describeOwnershipChain$(
  m.Scope scope,
  BuildContext target,
) =>
    target.describeOwnershipChain;
void Function()? _BuildOwner_onBuildScheduled$(BuildOwner target) {
  return target.onBuildScheduled;
}

Function _BuildOwner_onBuildScheduled_set$(
  m.Scope scope,
  BuildOwner target,
) =>
    (m.FunctionPointer? _onBuildScheduled) {
      void _onBuildScheduledProxy() => scope.engine.callFunctionPointer(
            scope,
            _onBuildScheduled!,
            [],
            {},
          );
      target.onBuildScheduled =
          (_onBuildScheduled == null ? null : _onBuildScheduledProxy);
    };
FocusManager _BuildOwner_focusManager$(BuildOwner target) {
  return target.focusManager;
}

void _BuildOwner_focusManager_set$(
  BuildOwner target,
  FocusManager other,
) {
  target.focusManager = other;
}

bool _BuildOwner_debugBuilding$(BuildOwner target) {
  return target.debugBuilding;
}

int _BuildOwner_globalKeyCount$(BuildOwner target) {
  return target.globalKeyCount;
}

Function _BuildOwner_scheduleBuildFor$(
  m.Scope scope,
  BuildOwner target,
) =>
    target.scheduleBuildFor;
Function _BuildOwner_finalizeTree$(
  m.Scope scope,
  BuildOwner target,
) =>
    target.finalizeTree;
Function _BuildOwner_reassemble$(
  m.Scope scope,
  BuildOwner target,
) =>
    target.reassemble;
Object? _Element_slot$(Element target) {
  return target.slot;
}

int _Element_depth$(Element target) {
  return target.depth;
}

Widget _Element_widget$(Element target) {
  return target.widget;
}

bool _Element_mounted$(Element target) {
  return target.mounted;
}

bool _Element_debugIsDefunct$(Element target) {
  return target.debugIsDefunct;
}

bool _Element_debugIsActive$(Element target) {
  return target.debugIsActive;
}

BuildOwner? _Element_owner$(Element target) {
  return target.owner;
}

RenderObject? _Element_renderObject$(Element target) {
  return target.renderObject;
}

Size? _Element_size$(Element target) {
  return target.size;
}

bool _Element_dirty$(Element target) {
  return target.dirty;
}

Function _Element_reassemble$(
  m.Scope scope,
  Element target,
) =>
    target.reassemble;
Function _Element_describeMissingAncestor$(
  m.Scope scope,
  Element target,
) =>
    target.describeMissingAncestor;
Function _Element_describeElements$(m.Scope scope) => Element.describeElements;
Function _Element_describeElement$(
  m.Scope scope,
  Element target,
) =>
    target.describeElement;
Function _Element_describeWidget$(
  m.Scope scope,
  Element target,
) =>
    target.describeWidget;
Function _Element_describeOwnershipChain$(
  m.Scope scope,
  Element target,
) =>
    target.describeOwnershipChain;
Function _Element_updateChild$(
  m.Scope scope,
  Element target,
) =>
    target.updateChild;
Function _Element_mount$(
  m.Scope scope,
  Element target,
) =>
    target.mount;
Function _Element_update$(
  m.Scope scope,
  Element target,
) =>
    target.update;
Function _Element_updateSlotForChild$(
  m.Scope scope,
  Element target,
) =>
    target.updateSlotForChild;
Function _Element_detachRenderObject$(
  m.Scope scope,
  Element target,
) =>
    target.detachRenderObject;
Function _Element_attachRenderObject$(
  m.Scope scope,
  Element target,
) =>
    target.attachRenderObject;
Function _Element_inflateWidget$(
  m.Scope scope,
  Element target,
) =>
    target.inflateWidget;
Function _Element_deactivateChild$(
  m.Scope scope,
  Element target,
) =>
    target.deactivateChild;
Function _Element_forgetChild$(
  m.Scope scope,
  Element target,
) =>
    target.forgetChild;
Function _Element_activate$(
  m.Scope scope,
  Element target,
) =>
    target.activate;
Function _Element_deactivate$(
  m.Scope scope,
  Element target,
) =>
    target.deactivate;
Function _Element_debugDeactivated$(
  m.Scope scope,
  Element target,
) =>
    target.debugDeactivated;
Function _Element_unmount$(
  m.Scope scope,
  Element target,
) =>
    target.unmount;
Function _Element_findRenderObject$(
  m.Scope scope,
  Element target,
) =>
    target.findRenderObject;
Function _Element_doesDependOnInheritedElement$(
  m.Scope scope,
  Element target,
) =>
    target.doesDependOnInheritedElement;
Function _Element_dependOnInheritedElement$(
  m.Scope scope,
  Element target,
) =>
    target.dependOnInheritedElement;
Function
    _Element_dependOnInheritedWidgetOfExactType$<T extends InheritedWidget>(
  m.Scope scope,
  Element target,
) =>
        target.dependOnInheritedWidgetOfExactType<T>;
Function _Element_getInheritedWidgetOfExactType$<T extends InheritedWidget>(
  m.Scope scope,
  Element target,
) =>
    target.getInheritedWidgetOfExactType<T>;
Function _Element_getElementForInheritedWidgetOfExactType$<
        T extends InheritedWidget>(
  m.Scope scope,
  Element target,
) =>
    target.getElementForInheritedWidgetOfExactType<T>;
Function _Element_attachNotificationTree$(
  m.Scope scope,
  Element target,
) =>
    target.attachNotificationTree;
Function _Element_findAncestorWidgetOfExactType$<T extends Widget>(
  m.Scope scope,
  Element target,
) =>
    target.findAncestorWidgetOfExactType<T>;
Function _Element_findAncestorStateOfType$<T extends State<StatefulWidget>>(
  m.Scope scope,
  Element target,
) =>
    target.findAncestorStateOfType<T>;
Function _Element_findRootAncestorStateOfType$<T extends State<StatefulWidget>>(
  m.Scope scope,
  Element target,
) =>
    target.findRootAncestorStateOfType<T>;
Function _Element_findAncestorRenderObjectOfType$<T extends RenderObject>(
  m.Scope scope,
  Element target,
) =>
    target.findAncestorRenderObjectOfType<T>;
Function _Element_didChangeDependencies$(
  m.Scope scope,
  Element target,
) =>
    target.didChangeDependencies;
Function _Element_debugGetCreatorChain$(
  m.Scope scope,
  Element target,
) =>
    target.debugGetCreatorChain;
Function _Element_debugGetDiagnosticChain$(
  m.Scope scope,
  Element target,
) =>
    target.debugGetDiagnosticChain;
Function _Element_dispatchNotification$(
  m.Scope scope,
  Element target,
) =>
    target.dispatchNotification;
Function _Element_toStringShort$(
  m.Scope scope,
  Element target,
) =>
    target.toStringShort;
Function _Element_toDiagnosticsNode$(
  m.Scope scope,
  Element target,
) =>
    target.toDiagnosticsNode;
Function _Element_debugFillProperties$(
  m.Scope scope,
  Element target,
) =>
    target.debugFillProperties;
Function _Element_debugDescribeChildren$(
  m.Scope scope,
  Element target,
) =>
    target.debugDescribeChildren;
Function _Element_markNeedsBuild$(
  m.Scope scope,
  Element target,
) =>
    target.markNeedsBuild;
Function _Element_rebuild$(
  m.Scope scope,
  Element target,
) =>
    target.rebuild;
Function _Element_performRebuild$(
  m.Scope scope,
  Element target,
) =>
    target.performRebuild;
Widget Function(FlutterErrorDetails) _ErrorWidget_builder$() {
  return ErrorWidget.builder;
}

Function _ErrorWidget_builder_set$(m.Scope scope) =>
    (m.FunctionPointer _builder) {
      Widget _builderProxy(FlutterErrorDetails _builder_details) =>
          scope.engine.callFunctionPointer(
            scope,
            _builder,
            [_builder_details],
            {},
          );
      ErrorWidget.builder = (_builderProxy);
    };
String _ErrorWidget_message$(ErrorWidget target) {
  return target.message;
}

Function _ErrorWidget_createRenderObject$(
  m.Scope scope,
  ErrorWidget target,
) =>
    target.createRenderObject;
Function _ErrorWidget_debugFillProperties$(
  m.Scope scope,
  ErrorWidget target,
) =>
    target.debugFillProperties;
bool _ComponentElement_debugDoingBuild$(ComponentElement target) {
  return target.debugDoingBuild;
}

Function _ComponentElement_mount$(
  m.Scope scope,
  ComponentElement target,
) =>
    target.mount;
Function _ComponentElement_performRebuild$(
  m.Scope scope,
  ComponentElement target,
) =>
    target.performRebuild;
Function _ComponentElement_build$(
  m.Scope scope,
  ComponentElement target,
) =>
    target.build;
Function _ComponentElement_forgetChild$(
  m.Scope scope,
  ComponentElement target,
) =>
    target.forgetChild;
Function _StatelessElement_build$(
  m.Scope scope,
  StatelessElement target,
) =>
    target.build;
Function _StatelessElement_update$(
  m.Scope scope,
  StatelessElement target,
) =>
    target.update;
State<StatefulWidget> _StatefulElement_state$(StatefulElement target) {
  return target.state;
}

Function _StatefulElement_build$(
  m.Scope scope,
  StatefulElement target,
) =>
    target.build;
Function _StatefulElement_reassemble$(
  m.Scope scope,
  StatefulElement target,
) =>
    target.reassemble;
Function _StatefulElement_performRebuild$(
  m.Scope scope,
  StatefulElement target,
) =>
    target.performRebuild;
Function _StatefulElement_update$(
  m.Scope scope,
  StatefulElement target,
) =>
    target.update;
Function _StatefulElement_activate$(
  m.Scope scope,
  StatefulElement target,
) =>
    target.activate;
Function _StatefulElement_deactivate$(
  m.Scope scope,
  StatefulElement target,
) =>
    target.deactivate;
Function _StatefulElement_unmount$(
  m.Scope scope,
  StatefulElement target,
) =>
    target.unmount;
Function _StatefulElement_dependOnInheritedElement$(
  m.Scope scope,
  StatefulElement target,
) =>
    target.dependOnInheritedElement;
Function _StatefulElement_didChangeDependencies$(
  m.Scope scope,
  StatefulElement target,
) =>
    target.didChangeDependencies;
Function _StatefulElement_toDiagnosticsNode$(
  m.Scope scope,
  StatefulElement target,
) =>
    target.toDiagnosticsNode;
Function _StatefulElement_debugFillProperties$(
  m.Scope scope,
  StatefulElement target,
) =>
    target.debugFillProperties;
Function _ProxyElement_build$(
  m.Scope scope,
  ProxyElement target,
) =>
    target.build;
Function _ProxyElement_update$(
  m.Scope scope,
  ProxyElement target,
) =>
    target.update;
Function _ProxyElement_updated$(
  m.Scope scope,
  ProxyElement target,
) =>
    target.updated;
Function _ProxyElement_notifyClients$(
  m.Scope scope,
  ProxyElement target,
) =>
    target.notifyClients;
Function _ParentDataElement_applyWidgetOutOfTurn$<T extends ParentData>(
  m.Scope scope,
  ParentDataElement<T> target,
) =>
    target.applyWidgetOutOfTurn;
Function _ParentDataElement_notifyClients$<T extends ParentData>(
  m.Scope scope,
  ParentDataElement<T> target,
) =>
    target.notifyClients;
Function _InheritedElement_debugDeactivated$(
  m.Scope scope,
  InheritedElement target,
) =>
    target.debugDeactivated;
Function _InheritedElement_getDependencies$(
  m.Scope scope,
  InheritedElement target,
) =>
    target.getDependencies;
Function _InheritedElement_setDependencies$(
  m.Scope scope,
  InheritedElement target,
) =>
    target.setDependencies;
Function _InheritedElement_updateDependencies$(
  m.Scope scope,
  InheritedElement target,
) =>
    target.updateDependencies;
Function _InheritedElement_notifyDependent$(
  m.Scope scope,
  InheritedElement target,
) =>
    target.notifyDependent;
Function _InheritedElement_updated$(
  m.Scope scope,
  InheritedElement target,
) =>
    target.updated;
Function _InheritedElement_notifyClients$(
  m.Scope scope,
  InheritedElement target,
) =>
    target.notifyClients;
RenderObject _RenderObjectElement_renderObject$(RenderObjectElement target) {
  return target.renderObject;
}

bool _RenderObjectElement_debugDoingBuild$(RenderObjectElement target) {
  return target.debugDoingBuild;
}

Function _RenderObjectElement_mount$(
  m.Scope scope,
  RenderObjectElement target,
) =>
    target.mount;
Function _RenderObjectElement_update$(
  m.Scope scope,
  RenderObjectElement target,
) =>
    target.update;
Function _RenderObjectElement_performRebuild$(
  m.Scope scope,
  RenderObjectElement target,
) =>
    target.performRebuild;
Function _RenderObjectElement_updateChildren$(
  m.Scope scope,
  RenderObjectElement target,
) =>
    target.updateChildren;
Function _RenderObjectElement_deactivate$(
  m.Scope scope,
  RenderObjectElement target,
) =>
    target.deactivate;
Function _RenderObjectElement_unmount$(
  m.Scope scope,
  RenderObjectElement target,
) =>
    target.unmount;
Function _RenderObjectElement_attachRenderObject$(
  m.Scope scope,
  RenderObjectElement target,
) =>
    target.attachRenderObject;
Function _RenderObjectElement_detachRenderObject$(
  m.Scope scope,
  RenderObjectElement target,
) =>
    target.detachRenderObject;
Function _RenderObjectElement_insertRenderObjectChild$(
  m.Scope scope,
  RenderObjectElement target,
) =>
    target.insertRenderObjectChild;
Function _RenderObjectElement_moveRenderObjectChild$(
  m.Scope scope,
  RenderObjectElement target,
) =>
    target.moveRenderObjectChild;
Function _RenderObjectElement_removeRenderObjectChild$(
  m.Scope scope,
  RenderObjectElement target,
) =>
    target.removeRenderObjectChild;
Function _RenderObjectElement_debugFillProperties$(
  m.Scope scope,
  RenderObjectElement target,
) =>
    target.debugFillProperties;
Function _LeafRenderObjectElement_forgetChild$(
  m.Scope scope,
  LeafRenderObjectElement target,
) =>
    target.forgetChild;
Function _LeafRenderObjectElement_insertRenderObjectChild$(
  m.Scope scope,
  LeafRenderObjectElement target,
) =>
    target.insertRenderObjectChild;
Function _LeafRenderObjectElement_moveRenderObjectChild$(
  m.Scope scope,
  LeafRenderObjectElement target,
) =>
    target.moveRenderObjectChild;
Function _LeafRenderObjectElement_removeRenderObjectChild$(
  m.Scope scope,
  LeafRenderObjectElement target,
) =>
    target.removeRenderObjectChild;
Function _LeafRenderObjectElement_debugDescribeChildren$(
  m.Scope scope,
  LeafRenderObjectElement target,
) =>
    target.debugDescribeChildren;
Function _SingleChildRenderObjectElement_forgetChild$(
  m.Scope scope,
  SingleChildRenderObjectElement target,
) =>
    target.forgetChild;
Function _SingleChildRenderObjectElement_mount$(
  m.Scope scope,
  SingleChildRenderObjectElement target,
) =>
    target.mount;
Function _SingleChildRenderObjectElement_update$(
  m.Scope scope,
  SingleChildRenderObjectElement target,
) =>
    target.update;
Function _SingleChildRenderObjectElement_insertRenderObjectChild$(
  m.Scope scope,
  SingleChildRenderObjectElement target,
) =>
    target.insertRenderObjectChild;
Function _SingleChildRenderObjectElement_moveRenderObjectChild$(
  m.Scope scope,
  SingleChildRenderObjectElement target,
) =>
    target.moveRenderObjectChild;
Function _SingleChildRenderObjectElement_removeRenderObjectChild$(
  m.Scope scope,
  SingleChildRenderObjectElement target,
) =>
    target.removeRenderObjectChild;
ContainerRenderObjectMixin<RenderObject, ContainerParentDataMixin<RenderObject>>
    _MultiChildRenderObjectElement_renderObject$(
        MultiChildRenderObjectElement target) {
  return target.renderObject;
}

Iterable<Element> _MultiChildRenderObjectElement_children$(
    MultiChildRenderObjectElement target) {
  return target.children;
}

Function _MultiChildRenderObjectElement_insertRenderObjectChild$(
  m.Scope scope,
  MultiChildRenderObjectElement target,
) =>
    target.insertRenderObjectChild;
Function _MultiChildRenderObjectElement_moveRenderObjectChild$(
  m.Scope scope,
  MultiChildRenderObjectElement target,
) =>
    target.moveRenderObjectChild;
Function _MultiChildRenderObjectElement_removeRenderObjectChild$(
  m.Scope scope,
  MultiChildRenderObjectElement target,
) =>
    target.removeRenderObjectChild;
Function _MultiChildRenderObjectElement_forgetChild$(
  m.Scope scope,
  MultiChildRenderObjectElement target,
) =>
    target.forgetChild;
Function _MultiChildRenderObjectElement_inflateWidget$(
  m.Scope scope,
  MultiChildRenderObjectElement target,
) =>
    target.inflateWidget;
Function _MultiChildRenderObjectElement_mount$(
  m.Scope scope,
  MultiChildRenderObjectElement target,
) =>
    target.mount;
Function _MultiChildRenderObjectElement_update$(
  m.Scope scope,
  MultiChildRenderObjectElement target,
) =>
    target.update;
Element _DebugCreator_element$(DebugCreator target) {
  return target.element;
}

Function _DebugCreator_toString$(
  m.Scope scope,
  DebugCreator target,
) =>
    target.toString;
T _IndexedSlot_value$<T extends Element?>(IndexedSlot<T> target) {
  return target.value;
}

int _IndexedSlot_index$<T extends Element?>(IndexedSlot<T> target) {
  return target.index;
}

int _IndexedSlot_hashCode$<T extends Element?>(IndexedSlot<T> target) {
  return target.hashCode;
}
