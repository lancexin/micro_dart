// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/flow.dart';
import 'dart:ui' show Color;
import 'package:flutter/foundation.dart';
import 'package:vector_math/vector_math_64.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/rendering/layer.dart';
import 'package:flutter/src/rendering/object.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/flow.dart',
  {
    'FlowParentData.': _FlowParentData__$,
    'RenderFlow.': _RenderFlow__$,
  },
  {},
  {
    'FlowPaintingContext': m.ClassMirror(
      'FlowPaintingContext',
      {
        '#as': FlowPaintingContext_as$,
        '#is': FlowPaintingContext_is$,
        'size': _FlowPaintingContext_size$,
        'childCount': _FlowPaintingContext_childCount$,
        'getChildSize': _FlowPaintingContext_getChildSize$,
        'paintChild': _FlowPaintingContext_paintChild$,
      },
      {},
    ),
    'FlowDelegate': m.ClassMirror(
      'FlowDelegate',
      {
        '#as': FlowDelegate_as$,
        '#is': FlowDelegate_is$,
        'getSize': _FlowDelegate_getSize$,
        'getConstraintsForChild': _FlowDelegate_getConstraintsForChild$,
        'paintChildren': _FlowDelegate_paintChildren$,
        'shouldRelayout': _FlowDelegate_shouldRelayout$,
        'shouldRepaint': _FlowDelegate_shouldRepaint$,
        'toString': _FlowDelegate_toString$,
      },
      {},
    ),
    'FlowParentData': m.ClassMirror(
      'FlowParentData',
      {
        '#as': FlowParentData_as$,
        '#is': FlowParentData_is$,
      },
      {},
    ),
    'RenderFlow': m.ClassMirror(
      'RenderFlow',
      {
        '#as': RenderFlow_as$,
        '#is': RenderFlow_is$,
        'delegate': _RenderFlow_delegate$,
        'clipBehavior': _RenderFlow_clipBehavior$,
        'isRepaintBoundary': _RenderFlow_isRepaintBoundary$,
        'setupParentData': _RenderFlow_setupParentData$,
        'attach': _RenderFlow_attach$,
        'detach': _RenderFlow_detach$,
        'computeMinIntrinsicWidth': _RenderFlow_computeMinIntrinsicWidth$,
        'computeMaxIntrinsicWidth': _RenderFlow_computeMaxIntrinsicWidth$,
        'computeMinIntrinsicHeight': _RenderFlow_computeMinIntrinsicHeight$,
        'computeMaxIntrinsicHeight': _RenderFlow_computeMaxIntrinsicHeight$,
        'computeDryLayout': _RenderFlow_computeDryLayout$,
        'performLayout': _RenderFlow_performLayout$,
        'getChildSize': _RenderFlow_getChildSize$,
        'paintChild': _RenderFlow_paintChild$,
        'paint': _RenderFlow_paint$,
        'dispose': _RenderFlow_dispose$,
        'hitTestChildren': _RenderFlow_hitTestChildren$,
        'applyPaintTransform': _RenderFlow_applyPaintTransform$,
      },
      {
        'delegate': _RenderFlow_delegate_set$,
        'clipBehavior': _RenderFlow_clipBehavior_set$,
      },
    ),
  },
);
Function FlowPaintingContext_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FlowPaintingContext;
Function FlowPaintingContext_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FlowPaintingContext;
Function _FlowPaintingContext_size$(
  m.Scope scope$,
  FlowPaintingContext target$,
) =>
    () {
      return target$.size;
    };
Function _FlowPaintingContext_childCount$(
  m.Scope scope$,
  FlowPaintingContext target$,
) =>
    () {
      return target$.childCount;
    };
Function _FlowPaintingContext_getChildSize$(
  m.Scope scope$,
  FlowPaintingContext target$,
) =>
    target$.getChildSize;
Function _FlowPaintingContext_paintChild$(
  m.Scope scope$,
  FlowPaintingContext target$,
) =>
    target$.paintChild;
Function FlowDelegate_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FlowDelegate;
Function FlowDelegate_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FlowDelegate;
Function _FlowDelegate_getSize$(
  m.Scope scope$,
  FlowDelegate target$,
) =>
    target$.getSize;
Function _FlowDelegate_getConstraintsForChild$(
  m.Scope scope$,
  FlowDelegate target$,
) =>
    target$.getConstraintsForChild;
Function _FlowDelegate_paintChildren$(
  m.Scope scope$,
  FlowDelegate target$,
) =>
    target$.paintChildren;
Function _FlowDelegate_shouldRelayout$(
  m.Scope scope$,
  FlowDelegate target$,
) =>
    target$.shouldRelayout;
Function _FlowDelegate_shouldRepaint$(
  m.Scope scope$,
  FlowDelegate target$,
) =>
    target$.shouldRepaint;
Function _FlowDelegate_toString$(
  m.Scope scope$,
  FlowDelegate target$,
) =>
    target$.toString;
Function FlowParentData_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FlowParentData;
Function FlowParentData_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FlowParentData;
Function _FlowParentData__$(m.Scope scope$) => () {
      return FlowParentData();
    };
Function RenderFlow_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RenderFlow;
Function RenderFlow_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RenderFlow;
Function _RenderFlow_delegate$(
  m.Scope scope$,
  RenderFlow target$,
) =>
    () {
      return target$.delegate;
    };
void _RenderFlow_delegate_set$(
  m.Scope scope$,
  RenderFlow target$,
) =>
    (dynamic other$) {
      target$.delegate = other$;
    };
Function _RenderFlow_clipBehavior$(
  m.Scope scope$,
  RenderFlow target$,
) =>
    () {
      return target$.clipBehavior;
    };
void _RenderFlow_clipBehavior_set$(
  m.Scope scope$,
  RenderFlow target$,
) =>
    (dynamic other$) {
      target$.clipBehavior = other$;
    };
Function _RenderFlow_isRepaintBoundary$(
  m.Scope scope$,
  RenderFlow target$,
) =>
    () {
      return target$.isRepaintBoundary;
    };
Function _RenderFlow__$(m.Scope scope$) => ({
      List? children,
      required FlowDelegate delegate,
      Clip? clipBehavior,
    }) {
      return RenderFlow(
        children: children == null ? null : List.from(children),
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        delegate: delegate,
      );
    };
Function _RenderFlow_setupParentData$(
  m.Scope scope$,
  RenderFlow target$,
) =>
    target$.setupParentData;
Function _RenderFlow_attach$(
  m.Scope scope$,
  RenderFlow target$,
) =>
    target$.attach;
Function _RenderFlow_detach$(
  m.Scope scope$,
  RenderFlow target$,
) =>
    target$.detach;
Function _RenderFlow_computeMinIntrinsicWidth$(
  m.Scope scope$,
  RenderFlow target$,
) =>
    target$.computeMinIntrinsicWidth;
Function _RenderFlow_computeMaxIntrinsicWidth$(
  m.Scope scope$,
  RenderFlow target$,
) =>
    target$.computeMaxIntrinsicWidth;
Function _RenderFlow_computeMinIntrinsicHeight$(
  m.Scope scope$,
  RenderFlow target$,
) =>
    target$.computeMinIntrinsicHeight;
Function _RenderFlow_computeMaxIntrinsicHeight$(
  m.Scope scope$,
  RenderFlow target$,
) =>
    target$.computeMaxIntrinsicHeight;
Function _RenderFlow_computeDryLayout$(
  m.Scope scope$,
  RenderFlow target$,
) =>
    target$.computeDryLayout;
Function _RenderFlow_performLayout$(
  m.Scope scope$,
  RenderFlow target$,
) =>
    target$.performLayout;
Function _RenderFlow_getChildSize$(
  m.Scope scope$,
  RenderFlow target$,
) =>
    target$.getChildSize;
Function _RenderFlow_paintChild$(
  m.Scope scope$,
  RenderFlow target$,
) =>
    target$.paintChild;
Function _RenderFlow_paint$(
  m.Scope scope$,
  RenderFlow target$,
) =>
    target$.paint;
Function _RenderFlow_dispose$(
  m.Scope scope$,
  RenderFlow target$,
) =>
    target$.dispose;
Function _RenderFlow_hitTestChildren$(
  m.Scope scope$,
  RenderFlow target$,
) =>
    target$.hitTestChildren;
Function _RenderFlow_applyPaintTransform$(
  m.Scope scope$,
  RenderFlow target$,
) =>
    target$.applyPaintTransform;
