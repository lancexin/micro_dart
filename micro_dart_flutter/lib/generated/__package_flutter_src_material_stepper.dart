// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/stepper.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/text_button.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/stepper.dart',
  {
    'ControlsDetails.': _ControlsDetails__$,
    'Step.': _Step__$,
    'Stepper.': _Stepper__$,
    'StepState.indexed': _StepState_indexed$,
    'StepState.editing': _StepState_editing$,
    'StepState.complete': _StepState_complete$,
    'StepState.disabled': _StepState_disabled$,
    'StepState.error': _StepState_error$,
    'StepState.values': _StepState_values$,
    'StepperType.vertical': _StepperType_vertical$,
    'StepperType.horizontal': _StepperType_horizontal$,
    'StepperType.values': _StepperType_values$,
  },
  {},
  {
    'ControlsDetails': m.ClassMirror(
      'ControlsDetails',
      {
        '#as': ControlsDetails_as$,
        '#is': ControlsDetails_is$,
        'currentStep': _ControlsDetails_currentStep$,
        'stepIndex': _ControlsDetails_stepIndex$,
        'onStepContinue': _ControlsDetails_onStepContinue$,
        'onStepCancel': _ControlsDetails_onStepCancel$,
        'isActive': _ControlsDetails_isActive$,
      },
      {},
    ),
    'Step': m.ClassMirror(
      'Step',
      {
        '#as': Step_as$,
        '#is': Step_is$,
        'title': _Step_title$,
        'subtitle': _Step_subtitle$,
        'content': _Step_content$,
        'state': _Step_state$,
        'isActive': _Step_isActive$,
        'label': _Step_label$,
      },
      {},
    ),
    'Stepper': m.ClassMirror(
      'Stepper',
      {
        '#as': Stepper_as$,
        '#is': Stepper_is$,
        'steps': _Stepper_steps$,
        'physics': _Stepper_physics$,
        'type': _Stepper_type$,
        'currentStep': _Stepper_currentStep$,
        'onStepTapped': _Stepper_onStepTapped$,
        'onStepContinue': _Stepper_onStepContinue$,
        'onStepCancel': _Stepper_onStepCancel$,
        'controlsBuilder': _Stepper_controlsBuilder$,
        'elevation': _Stepper_elevation$,
        'margin': _Stepper_margin$,
        'stepIconBuilder': _Stepper_stepIconBuilder$,
        'createState': _Stepper_createState$,
      },
      {},
    ),
    'StepState': m.ClassMirror(
      'StepState',
      {},
      {},
    ),
    'StepperType': m.ClassMirror(
      'StepperType',
      {},
      {},
    ),
  },
);
Function ControlsDetails_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ControlsDetails;
Function ControlsDetails_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ControlsDetails;
Function _ControlsDetails_currentStep$(
  m.Scope scope$,
  ControlsDetails target$,
) =>
    () {
      return target$.currentStep;
    };
Function _ControlsDetails_stepIndex$(
  m.Scope scope$,
  ControlsDetails target$,
) =>
    () {
      return target$.stepIndex;
    };
Function _ControlsDetails_onStepContinue$(
  m.Scope scope$,
  ControlsDetails target$,
) =>
    () {
      return target$.onStepContinue;
    };
Function _ControlsDetails_onStepCancel$(
  m.Scope scope$,
  ControlsDetails target$,
) =>
    () {
      return target$.onStepCancel;
    };
Function _ControlsDetails_isActive$(
  m.Scope scope$,
  ControlsDetails target$,
) =>
    () {
      return target$.isActive;
    };
Function _ControlsDetails__$(m.Scope scope$) => ({
      required int currentStep,
      required int stepIndex,
      m.FunctionPointer? onStepCancel,
      m.FunctionPointer? onStepContinue,
    }) {
      void onStepCancelProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onStepCancel!,
            [],
            {},
          );
      void onStepContinueProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onStepContinue!,
            [],
            {},
          );
      return ControlsDetails(
        currentStep: currentStep,
        onStepCancel: onStepCancel == null ? null : onStepCancelProxy,
        onStepContinue: onStepContinue == null ? null : onStepContinueProxy,
        stepIndex: stepIndex,
      );
    };
Function Step_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Step;
Function Step_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Step;
Function _Step_title$(
  m.Scope scope$,
  Step target$,
) =>
    () {
      return target$.title;
    };
Function _Step_subtitle$(
  m.Scope scope$,
  Step target$,
) =>
    () {
      return target$.subtitle;
    };
Function _Step_content$(
  m.Scope scope$,
  Step target$,
) =>
    () {
      return target$.content;
    };
Function _Step_state$(
  m.Scope scope$,
  Step target$,
) =>
    () {
      return target$.state;
    };
Function _Step_isActive$(
  m.Scope scope$,
  Step target$,
) =>
    () {
      return target$.isActive;
    };
Function _Step_label$(
  m.Scope scope$,
  Step target$,
) =>
    () {
      return target$.label;
    };
Function _Step__$(m.Scope scope$) => ({
      required Widget title,
      Widget? subtitle,
      required Widget content,
      StepState? state,
      bool? isActive,
      Widget? label,
    }) {
      return Step(
        content: content,
        isActive: isActive ?? false,
        label: label,
        state: state ?? StepState.indexed,
        subtitle: subtitle,
        title: title,
      );
    };
Function Stepper_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Stepper;
Function Stepper_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Stepper;
Function _Stepper_steps$(
  m.Scope scope$,
  Stepper target$,
) =>
    () {
      return target$.steps;
    };
Function _Stepper_physics$(
  m.Scope scope$,
  Stepper target$,
) =>
    () {
      return target$.physics;
    };
Function _Stepper_type$(
  m.Scope scope$,
  Stepper target$,
) =>
    () {
      return target$.type;
    };
Function _Stepper_currentStep$(
  m.Scope scope$,
  Stepper target$,
) =>
    () {
      return target$.currentStep;
    };
Function _Stepper_onStepTapped$(
  m.Scope scope$,
  Stepper target$,
) =>
    () {
      return target$.onStepTapped;
    };
Function _Stepper_onStepContinue$(
  m.Scope scope$,
  Stepper target$,
) =>
    () {
      return target$.onStepContinue;
    };
Function _Stepper_onStepCancel$(
  m.Scope scope$,
  Stepper target$,
) =>
    () {
      return target$.onStepCancel;
    };
Function _Stepper_controlsBuilder$(
  m.Scope scope$,
  Stepper target$,
) =>
    () {
      return target$.controlsBuilder;
    };
Function _Stepper_elevation$(
  m.Scope scope$,
  Stepper target$,
) =>
    () {
      return target$.elevation;
    };
Function _Stepper_margin$(
  m.Scope scope$,
  Stepper target$,
) =>
    () {
      return target$.margin;
    };
Function _Stepper_stepIconBuilder$(
  m.Scope scope$,
  Stepper target$,
) =>
    () {
      return target$.stepIconBuilder;
    };
Function _Stepper__$(m.Scope scope$) => ({
      Key? key,
      required List steps,
      ScrollPhysics? physics,
      StepperType? type,
      int? currentStep,
      m.FunctionPointer? onStepTapped,
      m.FunctionPointer? onStepContinue,
      m.FunctionPointer? onStepCancel,
      m.FunctionPointer? controlsBuilder,
      double? elevation,
      EdgeInsetsGeometry? margin,
      m.FunctionPointer? stepIconBuilder,
    }) {
      Widget controlsBuilderProxy(
        BuildContext controlsBuilder_context$,
        ControlsDetails controlsBuilder_details$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            controlsBuilder!,
            [
              controlsBuilder_context$,
              controlsBuilder_details$,
            ],
            {},
          );
      void onStepCancelProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onStepCancel!,
            [],
            {},
          );
      void onStepContinueProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onStepContinue!,
            [],
            {},
          );
      void onStepTappedProxy(int onStepTapped_value$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onStepTapped!,
            [onStepTapped_value$],
            {},
          );
      Widget? stepIconBuilderProxy(
        int stepIconBuilder_stepIndex$,
        StepState stepIconBuilder_stepState$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            stepIconBuilder!,
            [
              stepIconBuilder_stepIndex$,
              stepIconBuilder_stepState$,
            ],
            {},
          );
      return Stepper(
        controlsBuilder: controlsBuilder == null ? null : controlsBuilderProxy,
        currentStep: currentStep ?? 0,
        elevation: elevation,
        key: key,
        margin: margin,
        onStepCancel: onStepCancel == null ? null : onStepCancelProxy,
        onStepContinue: onStepContinue == null ? null : onStepContinueProxy,
        onStepTapped: onStepTapped == null ? null : onStepTappedProxy,
        physics: physics,
        stepIconBuilder: stepIconBuilder == null ? null : stepIconBuilderProxy,
        steps: List.from(steps),
        type: type ?? StepperType.vertical,
      );
    };
Function _Stepper_createState$(
  m.Scope scope$,
  Stepper target$,
) =>
    target$.createState;
StepState _StepState_indexed$() {
  return StepState.indexed;
}

StepState _StepState_editing$() {
  return StepState.editing;
}

StepState _StepState_complete$() {
  return StepState.complete;
}

StepState _StepState_disabled$() {
  return StepState.disabled;
}

StepState _StepState_error$() {
  return StepState.error;
}

List<StepState> _StepState_values$() {
  return StepState.values;
}

StepperType _StepperType_vertical$() {
  return StepperType.vertical;
}

StepperType _StepperType_horizontal$() {
  return StepperType.horizontal;
}

List<StepperType> _StepperType_values$() {
  return StepperType.values;
}
