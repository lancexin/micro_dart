// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/stepper.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_localizations.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/text_button.dart';
import 'package:flutter/src/material/text_theme.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/stepper.dart',
  {
    'StepState.indexed': _StepState_indexed$,
    'StepState.editing': _StepState_editing$,
    'StepState.complete': _StepState_complete$,
    'StepState.disabled': _StepState_disabled$,
    'StepState.error': _StepState_error$,
    'StepState.values': _StepState_values$,
    'StepperType.vertical': _StepperType_vertical$,
    'StepperType.horizontal': _StepperType_horizontal$,
    'StepperType.values': _StepperType_values$,
  },
  {},
  {
    'ControlsDetails': m.ClassMirror(
      'ControlsDetails',
      {
        '#as': ControlsDetails_as$,
        '#is': ControlsDetails_is$,
        'currentStep': _ControlsDetails_currentStep$,
        'stepIndex': _ControlsDetails_stepIndex$,
        'onStepContinue': _ControlsDetails_onStepContinue$,
        'onStepCancel': _ControlsDetails_onStepCancel$,
        'isActive': _ControlsDetails_isActive$,
      },
      {},
    ),
    'Step': m.ClassMirror(
      'Step',
      {
        '#as': Step_as$,
        '#is': Step_is$,
        'title': _Step_title$,
        'subtitle': _Step_subtitle$,
        'content': _Step_content$,
        'state': _Step_state$,
        'isActive': _Step_isActive$,
        'label': _Step_label$,
      },
      {},
    ),
    'Stepper': m.ClassMirror(
      'Stepper',
      {
        '#as': Stepper_as$,
        '#is': Stepper_is$,
        'steps': _Stepper_steps$,
        'physics': _Stepper_physics$,
        'type': _Stepper_type$,
        'currentStep': _Stepper_currentStep$,
        'onStepTapped': _Stepper_onStepTapped$,
        'onStepContinue': _Stepper_onStepContinue$,
        'onStepCancel': _Stepper_onStepCancel$,
        'controlsBuilder': _Stepper_controlsBuilder$,
        'elevation': _Stepper_elevation$,
        'margin': _Stepper_margin$,
        'stepIconBuilder': _Stepper_stepIconBuilder$,
        'createState': _Stepper_createState$,
      },
      {},
    ),
    'StepState': m.ClassMirror(
      'StepState',
      {},
      {},
    ),
    'StepperType': m.ClassMirror(
      'StepperType',
      {},
      {},
    ),
  },
);
Function ControlsDetails_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as ControlsDetails;
Function ControlsDetails_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is ControlsDetails;
int _ControlsDetails_currentStep$(ControlsDetails target) {
  return target.currentStep;
}

int _ControlsDetails_stepIndex$(ControlsDetails target) {
  return target.stepIndex;
}

void Function()? _ControlsDetails_onStepContinue$(ControlsDetails target) {
  return target.onStepContinue;
}

void Function()? _ControlsDetails_onStepCancel$(ControlsDetails target) {
  return target.onStepCancel;
}

bool _ControlsDetails_isActive$(ControlsDetails target) {
  return target.isActive;
}

Function Step_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Step;
Function Step_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Step;
Widget _Step_title$(Step target) {
  return target.title;
}

Widget? _Step_subtitle$(Step target) {
  return target.subtitle;
}

Widget _Step_content$(Step target) {
  return target.content;
}

StepState _Step_state$(Step target) {
  return target.state;
}

bool _Step_isActive$(Step target) {
  return target.isActive;
}

Widget? _Step_label$(Step target) {
  return target.label;
}

Function Stepper_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Stepper;
Function Stepper_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Stepper;
List<Step> _Stepper_steps$(Stepper target) {
  return target.steps;
}

ScrollPhysics? _Stepper_physics$(Stepper target) {
  return target.physics;
}

StepperType _Stepper_type$(Stepper target) {
  return target.type;
}

int _Stepper_currentStep$(Stepper target) {
  return target.currentStep;
}

void Function(int)? _Stepper_onStepTapped$(Stepper target) {
  return target.onStepTapped;
}

void Function()? _Stepper_onStepContinue$(Stepper target) {
  return target.onStepContinue;
}

void Function()? _Stepper_onStepCancel$(Stepper target) {
  return target.onStepCancel;
}

Widget Function(BuildContext, ControlsDetails)? _Stepper_controlsBuilder$(
    Stepper target) {
  return target.controlsBuilder;
}

double? _Stepper_elevation$(Stepper target) {
  return target.elevation;
}

EdgeInsetsGeometry? _Stepper_margin$(Stepper target) {
  return target.margin;
}

Widget? Function(int, StepState)? _Stepper_stepIconBuilder$(Stepper target) {
  return target.stepIconBuilder;
}

Function _Stepper_createState$(
  m.Scope scope,
  Stepper target,
) =>
    target.createState;
StepState _StepState_indexed$() {
  return StepState.indexed;
}

StepState _StepState_editing$() {
  return StepState.editing;
}

StepState _StepState_complete$() {
  return StepState.complete;
}

StepState _StepState_disabled$() {
  return StepState.disabled;
}

StepState _StepState_error$() {
  return StepState.error;
}

List<StepState> _StepState_values$() {
  return StepState.values;
}

StepperType _StepperType_vertical$() {
  return StepperType.vertical;
}

StepperType _StepperType_horizontal$() {
  return StepperType.horizontal;
}

List<StepperType> _StepperType_values$() {
  return StepperType.values;
}
