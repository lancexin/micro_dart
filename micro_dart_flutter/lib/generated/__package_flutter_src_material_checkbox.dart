// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/checkbox.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/src/material/checkbox_theme.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/material/toggleable.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/checkbox.dart',
  {'Checkbox.width': _Checkbox_width$},
  {},
  {
    'Checkbox': m.ClassMirror(
      'Checkbox',
      {
        'value': _Checkbox_value$,
        'onChanged': _Checkbox_onChanged$,
        'mouseCursor': _Checkbox_mouseCursor$,
        'activeColor': _Checkbox_activeColor$,
        'fillColor': _Checkbox_fillColor$,
        'checkColor': _Checkbox_checkColor$,
        'tristate': _Checkbox_tristate$,
        'materialTapTargetSize': _Checkbox_materialTapTargetSize$,
        'visualDensity': _Checkbox_visualDensity$,
        'focusColor': _Checkbox_focusColor$,
        'hoverColor': _Checkbox_hoverColor$,
        'overlayColor': _Checkbox_overlayColor$,
        'splashRadius': _Checkbox_splashRadius$,
        'focusNode': _Checkbox_focusNode$,
        'autofocus': _Checkbox_autofocus$,
        'shape': _Checkbox_shape$,
        'side': _Checkbox_side$,
        'isError': _Checkbox_isError$,
        'createState': _Checkbox_createState$,
      },
      {},
    )
  },
);
bool? _Checkbox_value$(Checkbox target) {
  return target.value;
}

void Function(bool?)? _Checkbox_onChanged$(Checkbox target) {
  return target.onChanged;
}

MouseCursor? _Checkbox_mouseCursor$(Checkbox target) {
  return target.mouseCursor;
}

Color? _Checkbox_activeColor$(Checkbox target) {
  return target.activeColor;
}

MaterialStateProperty<Color?>? _Checkbox_fillColor$(Checkbox target) {
  return target.fillColor;
}

Color? _Checkbox_checkColor$(Checkbox target) {
  return target.checkColor;
}

bool _Checkbox_tristate$(Checkbox target) {
  return target.tristate;
}

MaterialTapTargetSize? _Checkbox_materialTapTargetSize$(Checkbox target) {
  return target.materialTapTargetSize;
}

VisualDensity? _Checkbox_visualDensity$(Checkbox target) {
  return target.visualDensity;
}

Color? _Checkbox_focusColor$(Checkbox target) {
  return target.focusColor;
}

Color? _Checkbox_hoverColor$(Checkbox target) {
  return target.hoverColor;
}

MaterialStateProperty<Color?>? _Checkbox_overlayColor$(Checkbox target) {
  return target.overlayColor;
}

double? _Checkbox_splashRadius$(Checkbox target) {
  return target.splashRadius;
}

FocusNode? _Checkbox_focusNode$(Checkbox target) {
  return target.focusNode;
}

bool _Checkbox_autofocus$(Checkbox target) {
  return target.autofocus;
}

OutlinedBorder? _Checkbox_shape$(Checkbox target) {
  return target.shape;
}

BorderSide? _Checkbox_side$(Checkbox target) {
  return target.side;
}

bool _Checkbox_isError$(Checkbox target) {
  return target.isError;
}

double _Checkbox_width$() {
  return Checkbox.width;
}

Function _Checkbox_createState$(
  m.Scope scope,
  Checkbox target,
) =>
    target.createState;
