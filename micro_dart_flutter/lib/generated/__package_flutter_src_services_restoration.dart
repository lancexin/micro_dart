// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/restoration.dart';
import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/src/services/message_codecs.dart';
import 'package:flutter/src/services/system_channels.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/restoration.dart',
  {
    'RestorationManager.': _RestorationManager__$,
    'RestorationBucket.empty': _RestorationBucket_empty_$,
    'RestorationBucket.root': _RestorationBucket_root_$,
    'RestorationBucket.child': _RestorationBucket_child_$,
    'debugIsSerializableForRestoration': _debugIsSerializableForRestoration$,
  },
  {},
  {
    'RestorationManager': m.ClassMirror(
      'RestorationManager',
      {
        '#as': RestorationManager_as$,
        '#is': RestorationManager_is$,
        'rootBucket': _RestorationManager_rootBucket$,
        'isReplacing': _RestorationManager_isReplacing$,
        'initChannels': _RestorationManager_initChannels$,
        'handleRestorationUpdateFromEngine':
            _RestorationManager_handleRestorationUpdateFromEngine$,
        'sendToEngine': _RestorationManager_sendToEngine$,
        'scheduleSerializationFor':
            _RestorationManager_scheduleSerializationFor$,
        'unscheduleSerializationFor':
            _RestorationManager_unscheduleSerializationFor$,
        'flushData': _RestorationManager_flushData$,
      },
      {},
    ),
    'RestorationBucket': m.ClassMirror(
      'RestorationBucket',
      {
        '#as': RestorationBucket_as$,
        '#is': RestorationBucket_is$,
        'debugOwner': _RestorationBucket_debugOwner$,
        'isReplacing': _RestorationBucket_isReplacing$,
        'restorationId': _RestorationBucket_restorationId$,
        'read': _RestorationBucket_read$,
        'write': _RestorationBucket_write$,
        'remove': _RestorationBucket_remove$,
        'contains': _RestorationBucket_contains$,
        'claimChild': _RestorationBucket_claimChild$,
        'adoptChild': _RestorationBucket_adoptChild$,
        'finalize': _RestorationBucket_finalize$,
        'rename': _RestorationBucket_rename$,
        'dispose': _RestorationBucket_dispose$,
        'toString': _RestorationBucket_toString$,
      },
      {},
    ),
  },
);
Function RestorationManager_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RestorationManager;
Function RestorationManager_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RestorationManager;
Function _RestorationManager_rootBucket$(
  m.Scope scope$,
  RestorationManager target$,
) =>
    () {
      return target$.rootBucket;
    };
Function _RestorationManager_isReplacing$(
  m.Scope scope$,
  RestorationManager target$,
) =>
    () {
      return target$.isReplacing;
    };
Function _RestorationManager__$(m.Scope scope$) => () {
      return RestorationManager();
    };
Function _RestorationManager_initChannels$(
  m.Scope scope$,
  RestorationManager target$,
) =>
    target$.initChannels;
Function _RestorationManager_handleRestorationUpdateFromEngine$(
  m.Scope scope$,
  RestorationManager target$,
) =>
    target$.handleRestorationUpdateFromEngine;
Function _RestorationManager_sendToEngine$(
  m.Scope scope$,
  RestorationManager target$,
) =>
    target$.sendToEngine;
Function _RestorationManager_scheduleSerializationFor$(
  m.Scope scope$,
  RestorationManager target$,
) =>
    target$.scheduleSerializationFor;
Function _RestorationManager_unscheduleSerializationFor$(
  m.Scope scope$,
  RestorationManager target$,
) =>
    target$.unscheduleSerializationFor;
Function _RestorationManager_flushData$(
  m.Scope scope$,
  RestorationManager target$,
) =>
    target$.flushData;
Function RestorationBucket_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RestorationBucket;
Function RestorationBucket_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RestorationBucket;
Function _RestorationBucket_debugOwner$(
  m.Scope scope$,
  RestorationBucket target$,
) =>
    () {
      return target$.debugOwner;
    };
Function _RestorationBucket_isReplacing$(
  m.Scope scope$,
  RestorationBucket target$,
) =>
    () {
      return target$.isReplacing;
    };
Function _RestorationBucket_restorationId$(
  m.Scope scope$,
  RestorationBucket target$,
) =>
    () {
      return target$.restorationId;
    };
Function _RestorationBucket_empty_$(m.Scope scope$) => RestorationBucket.empty;
Function _RestorationBucket_root_$(m.Scope scope$) => RestorationBucket.root;
Function _RestorationBucket_child_$(m.Scope scope$) => RestorationBucket.child;
Function _RestorationBucket_read$<P>(
  m.Scope scope$,
  RestorationBucket target$,
) =>
    target$.read<P>;
Function _RestorationBucket_write$<P>(
  m.Scope scope$,
  RestorationBucket target$,
) =>
    target$.write<P>;
Function _RestorationBucket_remove$<P>(
  m.Scope scope$,
  RestorationBucket target$,
) =>
    target$.remove<P>;
Function _RestorationBucket_contains$(
  m.Scope scope$,
  RestorationBucket target$,
) =>
    target$.contains;
Function _RestorationBucket_claimChild$(
  m.Scope scope$,
  RestorationBucket target$,
) =>
    target$.claimChild;
Function _RestorationBucket_adoptChild$(
  m.Scope scope$,
  RestorationBucket target$,
) =>
    target$.adoptChild;
Function _RestorationBucket_finalize$(
  m.Scope scope$,
  RestorationBucket target$,
) =>
    target$.finalize;
Function _RestorationBucket_rename$(
  m.Scope scope$,
  RestorationBucket target$,
) =>
    target$.rename;
Function _RestorationBucket_dispose$(
  m.Scope scope$,
  RestorationBucket target$,
) =>
    target$.dispose;
Function _RestorationBucket_toString$(
  m.Scope scope$,
  RestorationBucket target$,
) =>
    target$.toString;
Function _debugIsSerializableForRestoration$(m.Scope scope$) =>
    debugIsSerializableForRestoration;
