// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/painting/image_resolution.dart';
import 'dart:async';
import 'dart:collection';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/painting/image_provider.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/painting/image_resolution.dart',
  {'AssetImage.': _AssetImage__$},
  {},
  {
    'AssetImage': m.ClassMirror(
      'AssetImage',
      {
        '#as': AssetImage_as$,
        '#is': AssetImage_is$,
        'assetName': _AssetImage_assetName$,
        'bundle': _AssetImage_bundle$,
        'package': _AssetImage_package$,
        'keyName': _AssetImage_keyName$,
        'hashCode': _AssetImage_hashCode$,
        'obtainKey': _AssetImage_obtainKey$,
        '==': _AssetImage_eq$$,
        'toString': _AssetImage_toString$,
      },
      {},
    )
  },
);
Function AssetImage_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AssetImage;
Function AssetImage_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AssetImage;
Function _AssetImage_assetName$(
  m.Scope scope$,
  AssetImage target$,
) =>
    () {
      return target$.assetName;
    };
Function _AssetImage_bundle$(
  m.Scope scope$,
  AssetImage target$,
) =>
    () {
      return target$.bundle;
    };
Function _AssetImage_package$(
  m.Scope scope$,
  AssetImage target$,
) =>
    () {
      return target$.package;
    };
Function _AssetImage_keyName$(
  m.Scope scope$,
  AssetImage target$,
) =>
    () {
      return target$.keyName;
    };
Function _AssetImage_hashCode$(
  m.Scope scope$,
  AssetImage target$,
) =>
    () {
      return target$.hashCode;
    };
Function _AssetImage__$(m.Scope scope$) => (
      String assetName, {
      AssetBundle? bundle,
      String? package,
    }) {
      return AssetImage(
        assetName,
        bundle: bundle,
        package: package,
      );
    };
Function _AssetImage_obtainKey$(
  m.Scope scope$,
  AssetImage target$,
) =>
    target$.obtainKey;
Function _AssetImage_eq$$(
  m.Scope scope$,
  AssetImage target$,
) =>
    (Object other$) => target$ == other$;
Function _AssetImage_toString$(
  m.Scope scope$,
  AssetImage target$,
) =>
    target$.toString;
