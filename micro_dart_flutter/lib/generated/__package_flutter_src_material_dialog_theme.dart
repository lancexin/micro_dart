// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/dialog_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/dialog_theme.dart',
  {
    'DialogTheme.of': _DialogTheme_of$,
    'DialogTheme.lerp': _DialogTheme_lerp$,
  },
  {},
  {
    'DialogTheme': m.ClassMirror(
      'DialogTheme',
      {
        '#as': DialogTheme_as$,
        '#is': DialogTheme_is$,
        'backgroundColor': _DialogTheme_backgroundColor$,
        'elevation': _DialogTheme_elevation$,
        'shadowColor': _DialogTheme_shadowColor$,
        'surfaceTintColor': _DialogTheme_surfaceTintColor$,
        'shape': _DialogTheme_shape$,
        'alignment': _DialogTheme_alignment$,
        'titleTextStyle': _DialogTheme_titleTextStyle$,
        'contentTextStyle': _DialogTheme_contentTextStyle$,
        'actionsPadding': _DialogTheme_actionsPadding$,
        'iconColor': _DialogTheme_iconColor$,
        'hashCode': _DialogTheme_hashCode$,
        'copyWith': _DialogTheme_copyWith$,
        '==': _DialogTheme_eq$$,
        'debugFillProperties': _DialogTheme_debugFillProperties$,
      },
      {},
    )
  },
);
Function DialogTheme_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DialogTheme;
Function DialogTheme_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DialogTheme;
Color? _DialogTheme_backgroundColor$(DialogTheme target) {
  return target.backgroundColor;
}

double? _DialogTheme_elevation$(DialogTheme target) {
  return target.elevation;
}

Color? _DialogTheme_shadowColor$(DialogTheme target) {
  return target.shadowColor;
}

Color? _DialogTheme_surfaceTintColor$(DialogTheme target) {
  return target.surfaceTintColor;
}

ShapeBorder? _DialogTheme_shape$(DialogTheme target) {
  return target.shape;
}

AlignmentGeometry? _DialogTheme_alignment$(DialogTheme target) {
  return target.alignment;
}

TextStyle? _DialogTheme_titleTextStyle$(DialogTheme target) {
  return target.titleTextStyle;
}

TextStyle? _DialogTheme_contentTextStyle$(DialogTheme target) {
  return target.contentTextStyle;
}

EdgeInsetsGeometry? _DialogTheme_actionsPadding$(DialogTheme target) {
  return target.actionsPadding;
}

Color? _DialogTheme_iconColor$(DialogTheme target) {
  return target.iconColor;
}

int _DialogTheme_hashCode$(DialogTheme target) {
  return target.hashCode;
}

Function _DialogTheme_copyWith$(
  m.Scope scope,
  DialogTheme target,
) =>
    target.copyWith;
Function _DialogTheme_of$(m.Scope scope) => DialogTheme.of;
Function _DialogTheme_lerp$(m.Scope scope) => DialogTheme.lerp;
Function _DialogTheme_eq$$(
  m.Scope scope,
  DialogTheme target,
) =>
    (Object other) => target == other;
Function _DialogTheme_debugFillProperties$(
  m.Scope scope,
  DialogTheme target,
) =>
    target.debugFillProperties;
