// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/dialog_theme.dart';
import 'dart:ui' show lerpDouble;
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/theme.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/dialog_theme.dart',
  {
    'DialogTheme.': _DialogTheme__$,
    'DialogTheme.of': _DialogTheme_of$,
    'DialogTheme.lerp': _DialogTheme_lerp$,
  },
  {},
  {
    'DialogTheme': m.ClassMirror(
      'DialogTheme',
      {
        '#as': DialogTheme_as$,
        '#is': DialogTheme_is$,
        'backgroundColor': _DialogTheme_backgroundColor$,
        'elevation': _DialogTheme_elevation$,
        'shadowColor': _DialogTheme_shadowColor$,
        'surfaceTintColor': _DialogTheme_surfaceTintColor$,
        'shape': _DialogTheme_shape$,
        'alignment': _DialogTheme_alignment$,
        'titleTextStyle': _DialogTheme_titleTextStyle$,
        'contentTextStyle': _DialogTheme_contentTextStyle$,
        'actionsPadding': _DialogTheme_actionsPadding$,
        'iconColor': _DialogTheme_iconColor$,
        'hashCode': _DialogTheme_hashCode$,
        'copyWith': _DialogTheme_copyWith$,
        '==': _DialogTheme_eq$$,
        'debugFillProperties': _DialogTheme_debugFillProperties$,
      },
      {},
    )
  },
);
Function DialogTheme_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as DialogTheme;
Function DialogTheme_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is DialogTheme;
Function _DialogTheme_backgroundColor$(
  m.Scope scope$,
  DialogTheme target$,
) =>
    () {
      return target$.backgroundColor;
    };
Function _DialogTheme_elevation$(
  m.Scope scope$,
  DialogTheme target$,
) =>
    () {
      return target$.elevation;
    };
Function _DialogTheme_shadowColor$(
  m.Scope scope$,
  DialogTheme target$,
) =>
    () {
      return target$.shadowColor;
    };
Function _DialogTheme_surfaceTintColor$(
  m.Scope scope$,
  DialogTheme target$,
) =>
    () {
      return target$.surfaceTintColor;
    };
Function _DialogTheme_shape$(
  m.Scope scope$,
  DialogTheme target$,
) =>
    () {
      return target$.shape;
    };
Function _DialogTheme_alignment$(
  m.Scope scope$,
  DialogTheme target$,
) =>
    () {
      return target$.alignment;
    };
Function _DialogTheme_titleTextStyle$(
  m.Scope scope$,
  DialogTheme target$,
) =>
    () {
      return target$.titleTextStyle;
    };
Function _DialogTheme_contentTextStyle$(
  m.Scope scope$,
  DialogTheme target$,
) =>
    () {
      return target$.contentTextStyle;
    };
Function _DialogTheme_actionsPadding$(
  m.Scope scope$,
  DialogTheme target$,
) =>
    () {
      return target$.actionsPadding;
    };
Function _DialogTheme_iconColor$(
  m.Scope scope$,
  DialogTheme target$,
) =>
    () {
      return target$.iconColor;
    };
Function _DialogTheme_hashCode$(
  m.Scope scope$,
  DialogTheme target$,
) =>
    () {
      return target$.hashCode;
    };
Function _DialogTheme__$(m.Scope scope$) => ({
      Color? backgroundColor,
      double? elevation,
      Color? shadowColor,
      Color? surfaceTintColor,
      ShapeBorder? shape,
      AlignmentGeometry? alignment,
      Color? iconColor,
      TextStyle? titleTextStyle,
      TextStyle? contentTextStyle,
      EdgeInsetsGeometry? actionsPadding,
    }) {
      return DialogTheme(
        actionsPadding: actionsPadding,
        alignment: alignment,
        backgroundColor: backgroundColor,
        contentTextStyle: contentTextStyle,
        elevation: elevation,
        iconColor: iconColor,
        shadowColor: shadowColor,
        shape: shape,
        surfaceTintColor: surfaceTintColor,
        titleTextStyle: titleTextStyle,
      );
    };
Function _DialogTheme_copyWith$(
  m.Scope scope$,
  DialogTheme target$,
) =>
    target$.copyWith;
Function _DialogTheme_of$(m.Scope scope$) => DialogTheme.of;
Function _DialogTheme_lerp$(m.Scope scope$) => DialogTheme.lerp;
Function _DialogTheme_eq$$(
  m.Scope scope$,
  DialogTheme target$,
) =>
    (Object other$) => target$ == other$;
Function _DialogTheme_debugFillProperties$(
  m.Scope scope$,
  DialogTheme target$,
) =>
    target$.debugFillProperties;
