// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/icon_button.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/button_style_button.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/icon_button_theme.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/material/tooltip.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/icon_button.dart',
  {'IconButton.styleFrom': _IconButton_styleFrom$},
  {},
  {
    'IconButton': m.ClassMirror(
      'IconButton',
      {
        '#as': IconButton_as$,
        '#is': IconButton_is$,
        'iconSize': _IconButton_iconSize$,
        'visualDensity': _IconButton_visualDensity$,
        'padding': _IconButton_padding$,
        'alignment': _IconButton_alignment$,
        'splashRadius': _IconButton_splashRadius$,
        'icon': _IconButton_icon$,
        'focusColor': _IconButton_focusColor$,
        'hoverColor': _IconButton_hoverColor$,
        'color': _IconButton_color$,
        'splashColor': _IconButton_splashColor$,
        'highlightColor': _IconButton_highlightColor$,
        'disabledColor': _IconButton_disabledColor$,
        'onPressed': _IconButton_onPressed$,
        'mouseCursor': _IconButton_mouseCursor$,
        'focusNode': _IconButton_focusNode$,
        'autofocus': _IconButton_autofocus$,
        'tooltip': _IconButton_tooltip$,
        'enableFeedback': _IconButton_enableFeedback$,
        'constraints': _IconButton_constraints$,
        'style': _IconButton_style$,
        'isSelected': _IconButton_isSelected$,
        'selectedIcon': _IconButton_selectedIcon$,
        'build': _IconButton_build$,
        'debugFillProperties': _IconButton_debugFillProperties$,
      },
      {},
    )
  },
);
Function IconButton_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as IconButton;
Function IconButton_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is IconButton;
double? _IconButton_iconSize$(IconButton target) {
  return target.iconSize;
}

VisualDensity? _IconButton_visualDensity$(IconButton target) {
  return target.visualDensity;
}

EdgeInsetsGeometry? _IconButton_padding$(IconButton target) {
  return target.padding;
}

AlignmentGeometry? _IconButton_alignment$(IconButton target) {
  return target.alignment;
}

double? _IconButton_splashRadius$(IconButton target) {
  return target.splashRadius;
}

Widget _IconButton_icon$(IconButton target) {
  return target.icon;
}

Color? _IconButton_focusColor$(IconButton target) {
  return target.focusColor;
}

Color? _IconButton_hoverColor$(IconButton target) {
  return target.hoverColor;
}

Color? _IconButton_color$(IconButton target) {
  return target.color;
}

Color? _IconButton_splashColor$(IconButton target) {
  return target.splashColor;
}

Color? _IconButton_highlightColor$(IconButton target) {
  return target.highlightColor;
}

Color? _IconButton_disabledColor$(IconButton target) {
  return target.disabledColor;
}

void Function()? _IconButton_onPressed$(IconButton target) {
  return target.onPressed;
}

MouseCursor? _IconButton_mouseCursor$(IconButton target) {
  return target.mouseCursor;
}

FocusNode? _IconButton_focusNode$(IconButton target) {
  return target.focusNode;
}

bool _IconButton_autofocus$(IconButton target) {
  return target.autofocus;
}

String? _IconButton_tooltip$(IconButton target) {
  return target.tooltip;
}

bool? _IconButton_enableFeedback$(IconButton target) {
  return target.enableFeedback;
}

BoxConstraints? _IconButton_constraints$(IconButton target) {
  return target.constraints;
}

ButtonStyle? _IconButton_style$(IconButton target) {
  return target.style;
}

bool? _IconButton_isSelected$(IconButton target) {
  return target.isSelected;
}

Widget? _IconButton_selectedIcon$(IconButton target) {
  return target.selectedIcon;
}

Function _IconButton_styleFrom$(m.Scope scope) => IconButton.styleFrom;
Function _IconButton_build$(
  m.Scope scope,
  IconButton target,
) =>
    target.build;
Function _IconButton_debugFillProperties$(
  m.Scope scope,
  IconButton target,
) =>
    target.debugFillProperties;
