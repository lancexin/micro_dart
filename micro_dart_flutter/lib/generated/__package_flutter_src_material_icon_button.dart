// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/material/icon_button.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/button_style_button.dart';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/colors.dart';
import 'package:flutter/src/material/constants.dart';
import 'package:flutter/src/material/debug.dart';
import 'package:flutter/src/material/icon_button_theme.dart';
import 'package:flutter/src/material/icons.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/material/tooltip.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/material/icon_button.dart',
  {
    'IconButton.': _IconButton__$,
    'IconButton.filled': _IconButton_filled_$,
    'IconButton.filledTonal': _IconButton_filledTonal_$,
    'IconButton.outlined': _IconButton_outlined_$,
    'IconButton.styleFrom': _IconButton_styleFrom$,
  },
  {},
  {
    'IconButton': m.ClassMirror(
      'IconButton',
      {
        '#as': IconButton_as$,
        '#is': IconButton_is$,
        'iconSize': _IconButton_iconSize$,
        'visualDensity': _IconButton_visualDensity$,
        'padding': _IconButton_padding$,
        'alignment': _IconButton_alignment$,
        'splashRadius': _IconButton_splashRadius$,
        'icon': _IconButton_icon$,
        'focusColor': _IconButton_focusColor$,
        'hoverColor': _IconButton_hoverColor$,
        'color': _IconButton_color$,
        'splashColor': _IconButton_splashColor$,
        'highlightColor': _IconButton_highlightColor$,
        'disabledColor': _IconButton_disabledColor$,
        'onPressed': _IconButton_onPressed$,
        'mouseCursor': _IconButton_mouseCursor$,
        'focusNode': _IconButton_focusNode$,
        'autofocus': _IconButton_autofocus$,
        'tooltip': _IconButton_tooltip$,
        'enableFeedback': _IconButton_enableFeedback$,
        'constraints': _IconButton_constraints$,
        'style': _IconButton_style$,
        'isSelected': _IconButton_isSelected$,
        'selectedIcon': _IconButton_selectedIcon$,
        'build': _IconButton_build$,
        'debugFillProperties': _IconButton_debugFillProperties$,
      },
      {},
    )
  },
);
Function IconButton_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as IconButton;
Function IconButton_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is IconButton;
Function _IconButton_iconSize$(
  m.Scope scope$,
  IconButton target$,
) =>
    () {
      return target$.iconSize;
    };
Function _IconButton_visualDensity$(
  m.Scope scope$,
  IconButton target$,
) =>
    () {
      return target$.visualDensity;
    };
Function _IconButton_padding$(
  m.Scope scope$,
  IconButton target$,
) =>
    () {
      return target$.padding;
    };
Function _IconButton_alignment$(
  m.Scope scope$,
  IconButton target$,
) =>
    () {
      return target$.alignment;
    };
Function _IconButton_splashRadius$(
  m.Scope scope$,
  IconButton target$,
) =>
    () {
      return target$.splashRadius;
    };
Function _IconButton_icon$(
  m.Scope scope$,
  IconButton target$,
) =>
    () {
      return target$.icon;
    };
Function _IconButton_focusColor$(
  m.Scope scope$,
  IconButton target$,
) =>
    () {
      return target$.focusColor;
    };
Function _IconButton_hoverColor$(
  m.Scope scope$,
  IconButton target$,
) =>
    () {
      return target$.hoverColor;
    };
Function _IconButton_color$(
  m.Scope scope$,
  IconButton target$,
) =>
    () {
      return target$.color;
    };
Function _IconButton_splashColor$(
  m.Scope scope$,
  IconButton target$,
) =>
    () {
      return target$.splashColor;
    };
Function _IconButton_highlightColor$(
  m.Scope scope$,
  IconButton target$,
) =>
    () {
      return target$.highlightColor;
    };
Function _IconButton_disabledColor$(
  m.Scope scope$,
  IconButton target$,
) =>
    () {
      return target$.disabledColor;
    };
Function _IconButton_onPressed$(
  m.Scope scope$,
  IconButton target$,
) =>
    () {
      return target$.onPressed;
    };
Function _IconButton_mouseCursor$(
  m.Scope scope$,
  IconButton target$,
) =>
    () {
      return target$.mouseCursor;
    };
Function _IconButton_focusNode$(
  m.Scope scope$,
  IconButton target$,
) =>
    () {
      return target$.focusNode;
    };
Function _IconButton_autofocus$(
  m.Scope scope$,
  IconButton target$,
) =>
    () {
      return target$.autofocus;
    };
Function _IconButton_tooltip$(
  m.Scope scope$,
  IconButton target$,
) =>
    () {
      return target$.tooltip;
    };
Function _IconButton_enableFeedback$(
  m.Scope scope$,
  IconButton target$,
) =>
    () {
      return target$.enableFeedback;
    };
Function _IconButton_constraints$(
  m.Scope scope$,
  IconButton target$,
) =>
    () {
      return target$.constraints;
    };
Function _IconButton_style$(
  m.Scope scope$,
  IconButton target$,
) =>
    () {
      return target$.style;
    };
Function _IconButton_isSelected$(
  m.Scope scope$,
  IconButton target$,
) =>
    () {
      return target$.isSelected;
    };
Function _IconButton_selectedIcon$(
  m.Scope scope$,
  IconButton target$,
) =>
    () {
      return target$.selectedIcon;
    };
Function _IconButton__$(m.Scope scope$) => ({
      Key? key,
      double? iconSize,
      VisualDensity? visualDensity,
      EdgeInsetsGeometry? padding,
      AlignmentGeometry? alignment,
      double? splashRadius,
      Color? color,
      Color? focusColor,
      Color? hoverColor,
      Color? highlightColor,
      Color? splashColor,
      Color? disabledColor,
      required m.FunctionPointer? onPressed,
      MouseCursor? mouseCursor,
      FocusNode? focusNode,
      bool? autofocus,
      String? tooltip,
      bool? enableFeedback,
      BoxConstraints? constraints,
      ButtonStyle? style,
      bool? isSelected,
      Widget? selectedIcon,
      required Widget icon,
    }) {
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return IconButton(
        alignment: alignment,
        autofocus: autofocus ?? false,
        color: color,
        constraints: constraints,
        disabledColor: disabledColor,
        enableFeedback: enableFeedback,
        focusColor: focusColor,
        focusNode: focusNode,
        highlightColor: highlightColor,
        hoverColor: hoverColor,
        icon: icon,
        iconSize: iconSize,
        isSelected: isSelected,
        key: key,
        mouseCursor: mouseCursor,
        onPressed: onPressed == null ? null : onPressedProxy,
        padding: padding,
        selectedIcon: selectedIcon,
        splashColor: splashColor,
        splashRadius: splashRadius,
        style: style,
        tooltip: tooltip,
        visualDensity: visualDensity,
      );
    };
Function _IconButton_filled_$(m.Scope scope$) => ({
      Key? key,
      double? iconSize,
      VisualDensity? visualDensity,
      EdgeInsetsGeometry? padding,
      AlignmentGeometry? alignment,
      double? splashRadius,
      Color? color,
      Color? focusColor,
      Color? hoverColor,
      Color? highlightColor,
      Color? splashColor,
      Color? disabledColor,
      required m.FunctionPointer? onPressed,
      MouseCursor? mouseCursor,
      FocusNode? focusNode,
      bool? autofocus,
      String? tooltip,
      bool? enableFeedback,
      BoxConstraints? constraints,
      ButtonStyle? style,
      bool? isSelected,
      Widget? selectedIcon,
      required Widget icon,
    }) {
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return IconButton.filled(
        alignment: alignment,
        autofocus: autofocus ?? false,
        color: color,
        constraints: constraints,
        disabledColor: disabledColor,
        enableFeedback: enableFeedback,
        focusColor: focusColor,
        focusNode: focusNode,
        highlightColor: highlightColor,
        hoverColor: hoverColor,
        icon: icon,
        iconSize: iconSize,
        isSelected: isSelected,
        key: key,
        mouseCursor: mouseCursor,
        onPressed: onPressed == null ? null : onPressedProxy,
        padding: padding,
        selectedIcon: selectedIcon,
        splashColor: splashColor,
        splashRadius: splashRadius,
        style: style,
        tooltip: tooltip,
        visualDensity: visualDensity,
      );
    };
Function _IconButton_filledTonal_$(m.Scope scope$) => ({
      Key? key,
      double? iconSize,
      VisualDensity? visualDensity,
      EdgeInsetsGeometry? padding,
      AlignmentGeometry? alignment,
      double? splashRadius,
      Color? color,
      Color? focusColor,
      Color? hoverColor,
      Color? highlightColor,
      Color? splashColor,
      Color? disabledColor,
      required m.FunctionPointer? onPressed,
      MouseCursor? mouseCursor,
      FocusNode? focusNode,
      bool? autofocus,
      String? tooltip,
      bool? enableFeedback,
      BoxConstraints? constraints,
      ButtonStyle? style,
      bool? isSelected,
      Widget? selectedIcon,
      required Widget icon,
    }) {
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return IconButton.filledTonal(
        alignment: alignment,
        autofocus: autofocus ?? false,
        color: color,
        constraints: constraints,
        disabledColor: disabledColor,
        enableFeedback: enableFeedback,
        focusColor: focusColor,
        focusNode: focusNode,
        highlightColor: highlightColor,
        hoverColor: hoverColor,
        icon: icon,
        iconSize: iconSize,
        isSelected: isSelected,
        key: key,
        mouseCursor: mouseCursor,
        onPressed: onPressed == null ? null : onPressedProxy,
        padding: padding,
        selectedIcon: selectedIcon,
        splashColor: splashColor,
        splashRadius: splashRadius,
        style: style,
        tooltip: tooltip,
        visualDensity: visualDensity,
      );
    };
Function _IconButton_outlined_$(m.Scope scope$) => ({
      Key? key,
      double? iconSize,
      VisualDensity? visualDensity,
      EdgeInsetsGeometry? padding,
      AlignmentGeometry? alignment,
      double? splashRadius,
      Color? color,
      Color? focusColor,
      Color? hoverColor,
      Color? highlightColor,
      Color? splashColor,
      Color? disabledColor,
      required m.FunctionPointer? onPressed,
      MouseCursor? mouseCursor,
      FocusNode? focusNode,
      bool? autofocus,
      String? tooltip,
      bool? enableFeedback,
      BoxConstraints? constraints,
      ButtonStyle? style,
      bool? isSelected,
      Widget? selectedIcon,
      required Widget icon,
    }) {
      void onPressedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onPressed!,
            [],
            {},
          );
      return IconButton.outlined(
        alignment: alignment,
        autofocus: autofocus ?? false,
        color: color,
        constraints: constraints,
        disabledColor: disabledColor,
        enableFeedback: enableFeedback,
        focusColor: focusColor,
        focusNode: focusNode,
        highlightColor: highlightColor,
        hoverColor: hoverColor,
        icon: icon,
        iconSize: iconSize,
        isSelected: isSelected,
        key: key,
        mouseCursor: mouseCursor,
        onPressed: onPressed == null ? null : onPressedProxy,
        padding: padding,
        selectedIcon: selectedIcon,
        splashColor: splashColor,
        splashRadius: splashRadius,
        style: style,
        tooltip: tooltip,
        visualDensity: visualDensity,
      );
    };
Function _IconButton_styleFrom$(m.Scope scope$) => IconButton.styleFrom;
Function _IconButton_build$(
  m.Scope scope$,
  IconButton target$,
) =>
    target$.build;
Function _IconButton_debugFillProperties$(
  m.Scope scope$,
  IconButton target$,
) =>
    target$.debugFillProperties;
