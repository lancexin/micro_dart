// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/rendering/performance_overlay.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/rendering/layer.dart';
import 'package:flutter/src/rendering/object.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/rendering/performance_overlay.dart',
  {
    'PerformanceOverlayOption.displayRasterizerStatistics':
        _PerformanceOverlayOption_displayRasterizerStatistics$,
    'PerformanceOverlayOption.visualizeRasterizerStatistics':
        _PerformanceOverlayOption_visualizeRasterizerStatistics$,
    'PerformanceOverlayOption.displayEngineStatistics':
        _PerformanceOverlayOption_displayEngineStatistics$,
    'PerformanceOverlayOption.visualizeEngineStatistics':
        _PerformanceOverlayOption_visualizeEngineStatistics$,
    'PerformanceOverlayOption.values': _PerformanceOverlayOption_values$,
  },
  {},
  {
    'RenderPerformanceOverlay': m.ClassMirror(
      'RenderPerformanceOverlay',
      {
        '#as': RenderPerformanceOverlay_as$,
        '#is': RenderPerformanceOverlay_is$,
        'optionsMask': _RenderPerformanceOverlay_optionsMask$,
        'rasterizerThreshold': _RenderPerformanceOverlay_rasterizerThreshold$,
        'checkerboardRasterCacheImages':
            _RenderPerformanceOverlay_checkerboardRasterCacheImages$,
        'checkerboardOffscreenLayers':
            _RenderPerformanceOverlay_checkerboardOffscreenLayers$,
        'sizedByParent': _RenderPerformanceOverlay_sizedByParent$,
        'alwaysNeedsCompositing':
            _RenderPerformanceOverlay_alwaysNeedsCompositing$,
        'computeMinIntrinsicWidth':
            _RenderPerformanceOverlay_computeMinIntrinsicWidth$,
        'computeMaxIntrinsicWidth':
            _RenderPerformanceOverlay_computeMaxIntrinsicWidth$,
        'computeMinIntrinsicHeight':
            _RenderPerformanceOverlay_computeMinIntrinsicHeight$,
        'computeMaxIntrinsicHeight':
            _RenderPerformanceOverlay_computeMaxIntrinsicHeight$,
        'computeDryLayout': _RenderPerformanceOverlay_computeDryLayout$,
        'paint': _RenderPerformanceOverlay_paint$,
      },
      {
        'optionsMask': _RenderPerformanceOverlay_optionsMask_set$,
        'rasterizerThreshold':
            _RenderPerformanceOverlay_rasterizerThreshold_set$,
        'checkerboardRasterCacheImages':
            _RenderPerformanceOverlay_checkerboardRasterCacheImages_set$,
        'checkerboardOffscreenLayers':
            _RenderPerformanceOverlay_checkerboardOffscreenLayers_set$,
      },
    ),
    'PerformanceOverlayOption': m.ClassMirror(
      'PerformanceOverlayOption',
      {},
      {},
    ),
  },
);
Function RenderPerformanceOverlay_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as RenderPerformanceOverlay;
Function RenderPerformanceOverlay_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is RenderPerformanceOverlay;
int _RenderPerformanceOverlay_optionsMask$(RenderPerformanceOverlay target) {
  return target.optionsMask;
}

void _RenderPerformanceOverlay_optionsMask_set$(
  RenderPerformanceOverlay target,
  int other,
) {
  target.optionsMask = other;
}

int _RenderPerformanceOverlay_rasterizerThreshold$(
    RenderPerformanceOverlay target) {
  return target.rasterizerThreshold;
}

void _RenderPerformanceOverlay_rasterizerThreshold_set$(
  RenderPerformanceOverlay target,
  int other,
) {
  target.rasterizerThreshold = other;
}

bool _RenderPerformanceOverlay_checkerboardRasterCacheImages$(
    RenderPerformanceOverlay target) {
  return target.checkerboardRasterCacheImages;
}

void _RenderPerformanceOverlay_checkerboardRasterCacheImages_set$(
  RenderPerformanceOverlay target,
  bool other,
) {
  target.checkerboardRasterCacheImages = other;
}

bool _RenderPerformanceOverlay_checkerboardOffscreenLayers$(
    RenderPerformanceOverlay target) {
  return target.checkerboardOffscreenLayers;
}

void _RenderPerformanceOverlay_checkerboardOffscreenLayers_set$(
  RenderPerformanceOverlay target,
  bool other,
) {
  target.checkerboardOffscreenLayers = other;
}

bool _RenderPerformanceOverlay_sizedByParent$(RenderPerformanceOverlay target) {
  return target.sizedByParent;
}

bool _RenderPerformanceOverlay_alwaysNeedsCompositing$(
    RenderPerformanceOverlay target) {
  return target.alwaysNeedsCompositing;
}

Function _RenderPerformanceOverlay_computeMinIntrinsicWidth$(
  m.Scope scope,
  RenderPerformanceOverlay target,
) =>
    target.computeMinIntrinsicWidth;
Function _RenderPerformanceOverlay_computeMaxIntrinsicWidth$(
  m.Scope scope,
  RenderPerformanceOverlay target,
) =>
    target.computeMaxIntrinsicWidth;
Function _RenderPerformanceOverlay_computeMinIntrinsicHeight$(
  m.Scope scope,
  RenderPerformanceOverlay target,
) =>
    target.computeMinIntrinsicHeight;
Function _RenderPerformanceOverlay_computeMaxIntrinsicHeight$(
  m.Scope scope,
  RenderPerformanceOverlay target,
) =>
    target.computeMaxIntrinsicHeight;
Function _RenderPerformanceOverlay_computeDryLayout$(
  m.Scope scope,
  RenderPerformanceOverlay target,
) =>
    target.computeDryLayout;
Function _RenderPerformanceOverlay_paint$(
  m.Scope scope,
  RenderPerformanceOverlay target,
) =>
    target.paint;
PerformanceOverlayOption
    _PerformanceOverlayOption_displayRasterizerStatistics$() {
  return PerformanceOverlayOption.displayRasterizerStatistics;
}

PerformanceOverlayOption
    _PerformanceOverlayOption_visualizeRasterizerStatistics$() {
  return PerformanceOverlayOption.visualizeRasterizerStatistics;
}

PerformanceOverlayOption _PerformanceOverlayOption_displayEngineStatistics$() {
  return PerformanceOverlayOption.displayEngineStatistics;
}

PerformanceOverlayOption
    _PerformanceOverlayOption_visualizeEngineStatistics$() {
  return PerformanceOverlayOption.visualizeEngineStatistics;
}

List<PerformanceOverlayOption> _PerformanceOverlayOption_values$() {
  return PerformanceOverlayOption.values;
}
