// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/text.dart';
import 'dart:ui' show TextHeightBehavior;
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/default_selection_style.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/inherited_theme.dart';
import 'package:flutter/src/widgets/media_query.dart';
import 'package:flutter/src/widgets/selection_container.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/text.dart',
  {
    'DefaultTextStyle.merge': _DefaultTextStyle_merge$,
    'DefaultTextStyle.of': _DefaultTextStyle_of$,
    'DefaultTextHeightBehavior.maybeOf': _DefaultTextHeightBehavior_maybeOf$,
    'DefaultTextHeightBehavior.of': _DefaultTextHeightBehavior_of$,
  },
  {},
  {
    'DefaultTextStyle': m.ClassMirror(
      'DefaultTextStyle',
      {
        '#as': DefaultTextStyle_as$,
        '#is': DefaultTextStyle_is$,
        'style': _DefaultTextStyle_style$,
        'textAlign': _DefaultTextStyle_textAlign$,
        'softWrap': _DefaultTextStyle_softWrap$,
        'overflow': _DefaultTextStyle_overflow$,
        'maxLines': _DefaultTextStyle_maxLines$,
        'textWidthBasis': _DefaultTextStyle_textWidthBasis$,
        'textHeightBehavior': _DefaultTextStyle_textHeightBehavior$,
        'updateShouldNotify': _DefaultTextStyle_updateShouldNotify$,
        'wrap': _DefaultTextStyle_wrap$,
        'debugFillProperties': _DefaultTextStyle_debugFillProperties$,
      },
      {},
    ),
    'DefaultTextHeightBehavior': m.ClassMirror(
      'DefaultTextHeightBehavior',
      {
        '#as': DefaultTextHeightBehavior_as$,
        '#is': DefaultTextHeightBehavior_is$,
        'textHeightBehavior': _DefaultTextHeightBehavior_textHeightBehavior$,
        'updateShouldNotify': _DefaultTextHeightBehavior_updateShouldNotify$,
        'wrap': _DefaultTextHeightBehavior_wrap$,
        'debugFillProperties': _DefaultTextHeightBehavior_debugFillProperties$,
      },
      {},
    ),
    'Text': m.ClassMirror(
      'Text',
      {
        '#as': Text_as$,
        '#is': Text_is$,
        'data': _Text_data$,
        'textSpan': _Text_textSpan$,
        'style': _Text_style$,
        'strutStyle': _Text_strutStyle$,
        'textAlign': _Text_textAlign$,
        'textDirection': _Text_textDirection$,
        'locale': _Text_locale$,
        'softWrap': _Text_softWrap$,
        'overflow': _Text_overflow$,
        'textScaleFactor': _Text_textScaleFactor$,
        'maxLines': _Text_maxLines$,
        'semanticsLabel': _Text_semanticsLabel$,
        'textWidthBasis': _Text_textWidthBasis$,
        'textHeightBehavior': _Text_textHeightBehavior$,
        'selectionColor': _Text_selectionColor$,
        'build': _Text_build$,
        'debugFillProperties': _Text_debugFillProperties$,
      },
      {},
    ),
  },
);
Function DefaultTextStyle_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DefaultTextStyle;
Function DefaultTextStyle_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DefaultTextStyle;
TextStyle _DefaultTextStyle_style$(DefaultTextStyle target) {
  return target.style;
}

TextAlign? _DefaultTextStyle_textAlign$(DefaultTextStyle target) {
  return target.textAlign;
}

bool _DefaultTextStyle_softWrap$(DefaultTextStyle target) {
  return target.softWrap;
}

TextOverflow _DefaultTextStyle_overflow$(DefaultTextStyle target) {
  return target.overflow;
}

int? _DefaultTextStyle_maxLines$(DefaultTextStyle target) {
  return target.maxLines;
}

TextWidthBasis _DefaultTextStyle_textWidthBasis$(DefaultTextStyle target) {
  return target.textWidthBasis;
}

TextHeightBehavior? _DefaultTextStyle_textHeightBehavior$(
    DefaultTextStyle target) {
  return target.textHeightBehavior;
}

Function _DefaultTextStyle_merge$(m.Scope scope) => DefaultTextStyle.merge;
Function _DefaultTextStyle_of$(m.Scope scope) => DefaultTextStyle.of;
Function _DefaultTextStyle_updateShouldNotify$(
  m.Scope scope,
  DefaultTextStyle target,
) =>
    target.updateShouldNotify;
Function _DefaultTextStyle_wrap$(
  m.Scope scope,
  DefaultTextStyle target,
) =>
    target.wrap;
Function _DefaultTextStyle_debugFillProperties$(
  m.Scope scope,
  DefaultTextStyle target,
) =>
    target.debugFillProperties;
Function DefaultTextHeightBehavior_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as DefaultTextHeightBehavior;
Function DefaultTextHeightBehavior_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is DefaultTextHeightBehavior;
TextHeightBehavior _DefaultTextHeightBehavior_textHeightBehavior$(
    DefaultTextHeightBehavior target) {
  return target.textHeightBehavior;
}

Function _DefaultTextHeightBehavior_maybeOf$(m.Scope scope) =>
    DefaultTextHeightBehavior.maybeOf;
Function _DefaultTextHeightBehavior_of$(m.Scope scope) =>
    DefaultTextHeightBehavior.of;
Function _DefaultTextHeightBehavior_updateShouldNotify$(
  m.Scope scope,
  DefaultTextHeightBehavior target,
) =>
    target.updateShouldNotify;
Function _DefaultTextHeightBehavior_wrap$(
  m.Scope scope,
  DefaultTextHeightBehavior target,
) =>
    target.wrap;
Function _DefaultTextHeightBehavior_debugFillProperties$(
  m.Scope scope,
  DefaultTextHeightBehavior target,
) =>
    target.debugFillProperties;
Function Text_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as Text;
Function Text_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is Text;
String? _Text_data$(Text target) {
  return target.data;
}

InlineSpan? _Text_textSpan$(Text target) {
  return target.textSpan;
}

TextStyle? _Text_style$(Text target) {
  return target.style;
}

StrutStyle? _Text_strutStyle$(Text target) {
  return target.strutStyle;
}

TextAlign? _Text_textAlign$(Text target) {
  return target.textAlign;
}

TextDirection? _Text_textDirection$(Text target) {
  return target.textDirection;
}

Locale? _Text_locale$(Text target) {
  return target.locale;
}

bool? _Text_softWrap$(Text target) {
  return target.softWrap;
}

TextOverflow? _Text_overflow$(Text target) {
  return target.overflow;
}

double? _Text_textScaleFactor$(Text target) {
  return target.textScaleFactor;
}

int? _Text_maxLines$(Text target) {
  return target.maxLines;
}

String? _Text_semanticsLabel$(Text target) {
  return target.semanticsLabel;
}

TextWidthBasis? _Text_textWidthBasis$(Text target) {
  return target.textWidthBasis;
}

TextHeightBehavior? _Text_textHeightBehavior$(Text target) {
  return target.textHeightBehavior;
}

Color? _Text_selectionColor$(Text target) {
  return target.selectionColor;
}

Function _Text_build$(
  m.Scope scope,
  Text target,
) =>
    target.build;
Function _Text_debugFillProperties$(
  m.Scope scope,
  Text target,
) =>
    target.debugFillProperties;
