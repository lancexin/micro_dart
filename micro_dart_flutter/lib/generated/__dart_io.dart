// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'dart:io';
import 'dart:async';
import 'dart:collection'
    show HashMap, HashSet, Queue, ListQueue, MapBase, UnmodifiableMapView;
import 'dart:convert';
import 'dart:developer' hide log;
import 'dart:isolate';
import 'dart:math';
import 'dart:typed_data';

const libraryMirror = m.LibraryMirror(
  'dart:io',
  {
    'OSError.noErrorCode': _OSError_noErrorCode$,
    'zlib': _zlib$,
    'gzip': _gzip$,
    'ZLibOption.minWindowBits': _ZLibOption_minWindowBits$,
    'ZLibOption.maxWindowBits': _ZLibOption_maxWindowBits$,
    'ZLibOption.defaultWindowBits': _ZLibOption_defaultWindowBits$,
    'ZLibOption.minLevel': _ZLibOption_minLevel$,
    'ZLibOption.maxLevel': _ZLibOption_maxLevel$,
    'ZLibOption.defaultLevel': _ZLibOption_defaultLevel$,
    'ZLibOption.minMemLevel': _ZLibOption_minMemLevel$,
    'ZLibOption.maxMemLevel': _ZLibOption_maxMemLevel$,
    'ZLibOption.defaultMemLevel': _ZLibOption_defaultMemLevel$,
    'ZLibOption.strategyFiltered': _ZLibOption_strategyFiltered$,
    'ZLibOption.strategyHuffmanOnly': _ZLibOption_strategyHuffmanOnly$,
    'ZLibOption.strategyRle': _ZLibOption_strategyRle$,
    'ZLibOption.strategyFixed': _ZLibOption_strategyFixed$,
    'ZLibOption.strategyDefault': _ZLibOption_strategyDefault$,
    'Directory.current': _Directory_current$,
    'Directory.systemTemp': _Directory_systemTemp$,
    'FileMode.read': _FileMode_read$,
    'FileMode.write': _FileMode_write$,
    'FileMode.append': _FileMode_append$,
    'FileMode.writeOnly': _FileMode_writeOnly$,
    'FileMode.writeOnlyAppend': _FileMode_writeOnlyAppend$,
    'FileLock.shared': _FileLock_shared$,
    'FileLock.exclusive': _FileLock_exclusive$,
    'FileLock.blockingShared': _FileLock_blockingShared$,
    'FileLock.blockingExclusive': _FileLock_blockingExclusive$,
    'Pipe.create': _Pipe_create$,
    'FileSystemEntityType.file': _FileSystemEntityType_file$,
    'FileSystemEntityType.directory': _FileSystemEntityType_directory$,
    'FileSystemEntityType.link': _FileSystemEntityType_link$,
    'FileSystemEntityType.unixDomainSock':
        _FileSystemEntityType_unixDomainSock$,
    'FileSystemEntityType.pipe': _FileSystemEntityType_pipe$,
    'FileSystemEntityType.notFound': _FileSystemEntityType_notFound$,
    'FileSystemEntityType.NOT_FOUND': _FileSystemEntityType_NOT_FOUND$,
    'FileStat.statSync': _FileStat_statSync$,
    'FileStat.stat': _FileStat_stat$,
    'FileSystemEntity.isWatchSupported': _FileSystemEntity_isWatchSupported$,
    'FileSystemEntity.identical': _FileSystemEntity_identical$,
    'FileSystemEntity.identicalSync': _FileSystemEntity_identicalSync$,
    'FileSystemEntity.type': _FileSystemEntity_type$,
    'FileSystemEntity.typeSync': _FileSystemEntity_typeSync$,
    'FileSystemEntity.isLink': _FileSystemEntity_isLink$,
    'FileSystemEntity.isFile': _FileSystemEntity_isFile$,
    'FileSystemEntity.isDirectory': _FileSystemEntity_isDirectory$,
    'FileSystemEntity.isLinkSync': _FileSystemEntity_isLinkSync$,
    'FileSystemEntity.isFileSync': _FileSystemEntity_isFileSync$,
    'FileSystemEntity.isDirectorySync': _FileSystemEntity_isDirectorySync$,
    'FileSystemEntity.parentOf': _FileSystemEntity_parentOf$,
    'FileSystemEvent.create': _FileSystemEvent_create$,
    'FileSystemEvent.modify': _FileSystemEvent_modify$,
    'FileSystemEvent.delete': _FileSystemEvent_delete$,
    'FileSystemEvent.move': _FileSystemEvent_move$,
    'FileSystemEvent.all': _FileSystemEvent_all$,
    'IOOverrides.current': _IOOverrides_current$,
    'Platform.isLinux': _Platform_isLinux$,
    'Platform.isMacOS': _Platform_isMacOS$,
    'Platform.isWindows': _Platform_isWindows$,
    'Platform.isAndroid': _Platform_isAndroid$,
    'Platform.isIOS': _Platform_isIOS$,
    'Platform.isFuchsia': _Platform_isFuchsia$,
    'Platform.numberOfProcessors': _Platform_numberOfProcessors$,
    'Platform.pathSeparator': _Platform_pathSeparator$,
    'Platform.localeName': _Platform_localeName$,
    'Platform.operatingSystem': _Platform_operatingSystem$,
    'Platform.operatingSystemVersion': _Platform_operatingSystemVersion$,
    'Platform.localHostname': _Platform_localHostname$,
    'Platform.environment': _Platform_environment$,
    'Platform.executable': _Platform_executable$,
    'Platform.resolvedExecutable': _Platform_resolvedExecutable$,
    'Platform.script': _Platform_script$,
    'Platform.executableArguments': _Platform_executableArguments$,
    'Platform.packageConfig': _Platform_packageConfig$,
    'Platform.version': _Platform_version$,
    'exitCode': _exitCode$,
    'pid': _pid$,
    'ProcessInfo.currentRss': _ProcessInfo_currentRss$,
    'ProcessInfo.maxRss': _ProcessInfo_maxRss$,
    'ProcessStartMode.normal': _ProcessStartMode_normal$,
    'ProcessStartMode.inheritStdio': _ProcessStartMode_inheritStdio$,
    'ProcessStartMode.detached': _ProcessStartMode_detached$,
    'ProcessStartMode.detachedWithStdio': _ProcessStartMode_detachedWithStdio$,
    'ProcessStartMode.values': _ProcessStartMode_values$,
    'Process.start': _Process_start$,
    'Process.run': _Process_run$,
    'Process.runSync': _Process_runSync$,
    'Process.killPid': _Process_killPid$,
    'ProcessSignal.sighup': _ProcessSignal_sighup$,
    'ProcessSignal.sigint': _ProcessSignal_sigint$,
    'ProcessSignal.sigquit': _ProcessSignal_sigquit$,
    'ProcessSignal.sigill': _ProcessSignal_sigill$,
    'ProcessSignal.sigtrap': _ProcessSignal_sigtrap$,
    'ProcessSignal.sigabrt': _ProcessSignal_sigabrt$,
    'ProcessSignal.sigbus': _ProcessSignal_sigbus$,
    'ProcessSignal.sigfpe': _ProcessSignal_sigfpe$,
    'ProcessSignal.sigkill': _ProcessSignal_sigkill$,
    'ProcessSignal.sigusr1': _ProcessSignal_sigusr1$,
    'ProcessSignal.sigsegv': _ProcessSignal_sigsegv$,
    'ProcessSignal.sigusr2': _ProcessSignal_sigusr2$,
    'ProcessSignal.sigpipe': _ProcessSignal_sigpipe$,
    'ProcessSignal.sigalrm': _ProcessSignal_sigalrm$,
    'ProcessSignal.sigterm': _ProcessSignal_sigterm$,
    'ProcessSignal.sigchld': _ProcessSignal_sigchld$,
    'ProcessSignal.sigcont': _ProcessSignal_sigcont$,
    'ProcessSignal.sigstop': _ProcessSignal_sigstop$,
    'ProcessSignal.sigtstp': _ProcessSignal_sigtstp$,
    'ProcessSignal.sigttin': _ProcessSignal_sigttin$,
    'ProcessSignal.sigttou': _ProcessSignal_sigttou$,
    'ProcessSignal.sigurg': _ProcessSignal_sigurg$,
    'ProcessSignal.sigxcpu': _ProcessSignal_sigxcpu$,
    'ProcessSignal.sigxfsz': _ProcessSignal_sigxfsz$,
    'ProcessSignal.sigvtalrm': _ProcessSignal_sigvtalrm$,
    'ProcessSignal.sigprof': _ProcessSignal_sigprof$,
    'ProcessSignal.sigwinch': _ProcessSignal_sigwinch$,
    'ProcessSignal.sigpoll': _ProcessSignal_sigpoll$,
    'ProcessSignal.sigsys': _ProcessSignal_sigsys$,
    'exit': _exit$,
    'sleep': _sleep$,
    'SecureServerSocket.bind': _SecureServerSocket_bind$,
    'RawSecureServerSocket.bind': _RawSecureServerSocket_bind$,
    'SecureSocket.secureServer': _SecureSocket_secureServer$,
    'RawSecureSocket.secureServer': _RawSecureSocket_secureServer$,
    'SecurityContext.defaultContext': _SecurityContext_defaultContext$,
    'InternetAddressType.IPv4': _InternetAddressType_IPv4$,
    'InternetAddressType.IPv6': _InternetAddressType_IPv6$,
    'InternetAddressType.unix': _InternetAddressType_unix$,
    'InternetAddressType.any': _InternetAddressType_any$,
    'InternetAddress.loopbackIPv4': _InternetAddress_loopbackIPv4$,
    'InternetAddress.loopbackIPv6': _InternetAddress_loopbackIPv6$,
    'InternetAddress.anyIPv4': _InternetAddress_anyIPv4$,
    'InternetAddress.anyIPv6': _InternetAddress_anyIPv6$,
    'InternetAddress.lookup': _InternetAddress_lookup$,
    'InternetAddress.tryParse': _InternetAddress_tryParse$,
    'NetworkInterface.list': _NetworkInterface_list$,
    'RawServerSocket.bind': _RawServerSocket_bind$,
    'ServerSocket.bind': _ServerSocket_bind$,
    'SocketDirection.receive': _SocketDirection_receive$,
    'SocketDirection.send': _SocketDirection_send$,
    'SocketDirection.both': _SocketDirection_both$,
    'SocketOption.tcpNoDelay': _SocketOption_tcpNoDelay$,
    'RawSocketOption.levelSocket': _RawSocketOption_levelSocket$,
    'RawSocketOption.levelIPv4': _RawSocketOption_levelIPv4$,
    'RawSocketOption.IPv4MulticastInterface':
        _RawSocketOption_IPv4MulticastInterface$,
    'RawSocketOption.levelIPv6': _RawSocketOption_levelIPv6$,
    'RawSocketOption.IPv6MulticastInterface':
        _RawSocketOption_IPv6MulticastInterface$,
    'RawSocketOption.levelTcp': _RawSocketOption_levelTcp$,
    'RawSocketOption.levelUdp': _RawSocketOption_levelUdp$,
    'RawSocketEvent.read': _RawSocketEvent_read$,
    'RawSocketEvent.write': _RawSocketEvent_write$,
    'RawSocketEvent.readClosed': _RawSocketEvent_readClosed$,
    'RawSocketEvent.closed': _RawSocketEvent_closed$,
    'RawSocket.connect': _RawSocket_connect$,
    'RawSocket.startConnect': _RawSocket_startConnect$,
    'Socket.connect': _Socket_connect$,
    'Socket.startConnect': _Socket_startConnect$,
    'RawDatagramSocket.bind': _RawDatagramSocket_bind$,
    'stdin': _stdin$,
    'stdout': _stdout$,
    'stderr': _stderr$,
    'StdioType.terminal': _StdioType_terminal$,
    'StdioType.pipe': _StdioType_pipe$,
    'StdioType.file': _StdioType_file$,
    'StdioType.other': _StdioType_other$,
    'stdioType': _stdioType$,
    'systemEncoding': _systemEncoding$,
    'RawSynchronousSocket.connectSync': _RawSynchronousSocket_connectSync$,
  },
  {
    'Directory.current': _Directory_current_set$,
    'IOOverrides.global': _IOOverrides_global_set$,
    'exitCode': _exitCode_set$,
  },
  {
    'IOException': m.ClassMirror(
      'IOException',
      {'toString': _IOException_toString$},
      {},
    ),
    'OSError': m.ClassMirror(
      'OSError',
      {
        'message': _OSError_message$,
        'errorCode': _OSError_errorCode$,
        'toString': _OSError_toString$,
      },
      {},
    ),
    'ZLibOption': m.ClassMirror(
      'ZLibOption',
      {},
      {},
    ),
    'ZLibCodec': m.ClassMirror(
      'ZLibCodec',
      {
        'gzip': _ZLibCodec_gzip$,
        'level': _ZLibCodec_level$,
        'memLevel': _ZLibCodec_memLevel$,
        'strategy': _ZLibCodec_strategy$,
        'windowBits': _ZLibCodec_windowBits$,
        'raw': _ZLibCodec_raw$,
        'dictionary': _ZLibCodec_dictionary$,
        'encoder': _ZLibCodec_encoder$,
        'decoder': _ZLibCodec_decoder$,
      },
      {},
    ),
    'GZipCodec': m.ClassMirror(
      'GZipCodec',
      {
        'gzip': _GZipCodec_gzip$,
        'level': _GZipCodec_level$,
        'memLevel': _GZipCodec_memLevel$,
        'strategy': _GZipCodec_strategy$,
        'windowBits': _GZipCodec_windowBits$,
        'dictionary': _GZipCodec_dictionary$,
        'raw': _GZipCodec_raw$,
        'encoder': _GZipCodec_encoder$,
        'decoder': _GZipCodec_decoder$,
      },
      {},
    ),
    'ZLibEncoder': m.ClassMirror(
      'ZLibEncoder',
      {
        'gzip': _ZLibEncoder_gzip$,
        'level': _ZLibEncoder_level$,
        'memLevel': _ZLibEncoder_memLevel$,
        'strategy': _ZLibEncoder_strategy$,
        'windowBits': _ZLibEncoder_windowBits$,
        'dictionary': _ZLibEncoder_dictionary$,
        'raw': _ZLibEncoder_raw$,
        'convert': _ZLibEncoder_convert$,
        'startChunkedConversion': _ZLibEncoder_startChunkedConversion$,
      },
      {},
    ),
    'ZLibDecoder': m.ClassMirror(
      'ZLibDecoder',
      {
        'windowBits': _ZLibDecoder_windowBits$,
        'dictionary': _ZLibDecoder_dictionary$,
        'raw': _ZLibDecoder_raw$,
        'convert': _ZLibDecoder_convert$,
        'startChunkedConversion': _ZLibDecoder_startChunkedConversion$,
      },
      {},
    ),
    'RawZLibFilter': m.ClassMirror(
      'RawZLibFilter',
      {
        'process': _RawZLibFilter_process$,
        'processed': _RawZLibFilter_processed$,
      },
      {},
    ),
    'Directory': m.ClassMirror(
      'Directory',
      {
        'path': _Directory_path$,
        'uri': _Directory_uri$,
        'absolute': _Directory_absolute$,
        'create': _Directory_create$,
        'createSync': _Directory_createSync$,
        'createTemp': _Directory_createTemp$,
        'createTempSync': _Directory_createTempSync$,
        'resolveSymbolicLinks': _Directory_resolveSymbolicLinks$,
        'resolveSymbolicLinksSync': _Directory_resolveSymbolicLinksSync$,
        'rename': _Directory_rename$,
        'renameSync': _Directory_renameSync$,
        'list': _Directory_list$,
        'listSync': _Directory_listSync$,
        'toString': _Directory_toString$,
      },
      {},
    ),
    'FileMode': m.ClassMirror(
      'FileMode',
      {},
      {},
    ),
    'FileLock': m.ClassMirror(
      'FileLock',
      {},
      {},
    ),
    'File': m.ClassMirror(
      'File',
      {
        'absolute': _File_absolute$,
        'path': _File_path$,
        'create': _File_create$,
        'createSync': _File_createSync$,
        'rename': _File_rename$,
        'renameSync': _File_renameSync$,
        'copy': _File_copy$,
        'copySync': _File_copySync$,
        'length': _File_length$,
        'lengthSync': _File_lengthSync$,
        'lastAccessed': _File_lastAccessed$,
        'lastAccessedSync': _File_lastAccessedSync$,
        'setLastAccessed': _File_setLastAccessed$,
        'setLastAccessedSync': _File_setLastAccessedSync$,
        'lastModified': _File_lastModified$,
        'lastModifiedSync': _File_lastModifiedSync$,
        'setLastModified': _File_setLastModified$,
        'setLastModifiedSync': _File_setLastModifiedSync$,
        'open': _File_open$,
        'openSync': _File_openSync$,
        'openRead': _File_openRead$,
        'openWrite': _File_openWrite$,
        'readAsBytes': _File_readAsBytes$,
        'readAsBytesSync': _File_readAsBytesSync$,
        'readAsString': _File_readAsString$,
        'readAsStringSync': _File_readAsStringSync$,
        'readAsLines': _File_readAsLines$,
        'readAsLinesSync': _File_readAsLinesSync$,
        'writeAsBytes': _File_writeAsBytes$,
        'writeAsBytesSync': _File_writeAsBytesSync$,
        'writeAsString': _File_writeAsString$,
        'writeAsStringSync': _File_writeAsStringSync$,
      },
      {},
    ),
    'RandomAccessFile': m.ClassMirror(
      'RandomAccessFile',
      {
        'path': _RandomAccessFile_path$,
        'close': _RandomAccessFile_close$,
        'closeSync': _RandomAccessFile_closeSync$,
        'readByte': _RandomAccessFile_readByte$,
        'readByteSync': _RandomAccessFile_readByteSync$,
        'read': _RandomAccessFile_read$,
        'readSync': _RandomAccessFile_readSync$,
        'readInto': _RandomAccessFile_readInto$,
        'readIntoSync': _RandomAccessFile_readIntoSync$,
        'writeByte': _RandomAccessFile_writeByte$,
        'writeByteSync': _RandomAccessFile_writeByteSync$,
        'writeFrom': _RandomAccessFile_writeFrom$,
        'writeFromSync': _RandomAccessFile_writeFromSync$,
        'writeString': _RandomAccessFile_writeString$,
        'writeStringSync': _RandomAccessFile_writeStringSync$,
        'position': _RandomAccessFile_position$,
        'positionSync': _RandomAccessFile_positionSync$,
        'setPosition': _RandomAccessFile_setPosition$,
        'setPositionSync': _RandomAccessFile_setPositionSync$,
        'truncate': _RandomAccessFile_truncate$,
        'truncateSync': _RandomAccessFile_truncateSync$,
        'length': _RandomAccessFile_length$,
        'lengthSync': _RandomAccessFile_lengthSync$,
        'flush': _RandomAccessFile_flush$,
        'flushSync': _RandomAccessFile_flushSync$,
        'lock': _RandomAccessFile_lock$,
        'lockSync': _RandomAccessFile_lockSync$,
        'unlock': _RandomAccessFile_unlock$,
        'unlockSync': _RandomAccessFile_unlockSync$,
        'toString': _RandomAccessFile_toString$,
      },
      {},
    ),
    'FileSystemException': m.ClassMirror(
      'FileSystemException',
      {
        'message': _FileSystemException_message$,
        'path': _FileSystemException_path$,
        'osError': _FileSystemException_osError$,
        'toString': _FileSystemException_toString$,
      },
      {},
    ),
    'PathAccessException': m.ClassMirror(
      'PathAccessException',
      {'toString': _PathAccessException_toString$},
      {},
    ),
    'PathExistsException': m.ClassMirror(
      'PathExistsException',
      {'toString': _PathExistsException_toString$},
      {},
    ),
    'PathNotFoundException': m.ClassMirror(
      'PathNotFoundException',
      {'toString': _PathNotFoundException_toString$},
      {},
    ),
    'ReadPipe': m.ClassMirror(
      'ReadPipe',
      {},
      {},
    ),
    'WritePipe': m.ClassMirror(
      'WritePipe',
      {},
      {},
    ),
    'Pipe': m.ClassMirror(
      'Pipe',
      {
        'read': _Pipe_read$,
        'write': _Pipe_write$,
      },
      {},
    ),
    'FileSystemEntityType': m.ClassMirror(
      'FileSystemEntityType',
      {'toString': _FileSystemEntityType_toString$},
      {},
    ),
    'FileStat': m.ClassMirror(
      'FileStat',
      {
        'changed': _FileStat_changed$,
        'modified': _FileStat_modified$,
        'accessed': _FileStat_accessed$,
        'type': _FileStat_type$,
        'mode': _FileStat_mode$,
        'size': _FileStat_size$,
        'toString': _FileStat_toString$,
        'modeString': _FileStat_modeString$,
      },
      {},
    ),
    'FileSystemEntity': m.ClassMirror(
      'FileSystemEntity',
      {
        'path': _FileSystemEntity_path$,
        'uri': _FileSystemEntity_uri$,
        'isAbsolute': _FileSystemEntity_isAbsolute$,
        'absolute': _FileSystemEntity_absolute$,
        'parent': _FileSystemEntity_parent$,
        'exists': _FileSystemEntity_exists$,
        'existsSync': _FileSystemEntity_existsSync$,
        'rename': _FileSystemEntity_rename$,
        'renameSync': _FileSystemEntity_renameSync$,
        'resolveSymbolicLinks': _FileSystemEntity_resolveSymbolicLinks$,
        'resolveSymbolicLinksSync': _FileSystemEntity_resolveSymbolicLinksSync$,
        'stat': _FileSystemEntity_stat$,
        'statSync': _FileSystemEntity_statSync$,
        'delete': _FileSystemEntity_delete$,
        'deleteSync': _FileSystemEntity_deleteSync$,
        'watch': _FileSystemEntity_watch$,
      },
      {},
    ),
    'FileSystemEvent': m.ClassMirror(
      'FileSystemEvent',
      {
        'type': _FileSystemEvent_type$,
        'path': _FileSystemEvent_path$,
        'isDirectory': _FileSystemEvent_isDirectory$,
      },
      {},
    ),
    'FileSystemCreateEvent': m.ClassMirror(
      'FileSystemCreateEvent',
      {'toString': _FileSystemCreateEvent_toString$},
      {},
    ),
    'FileSystemModifyEvent': m.ClassMirror(
      'FileSystemModifyEvent',
      {
        'contentChanged': _FileSystemModifyEvent_contentChanged$,
        'toString': _FileSystemModifyEvent_toString$,
      },
      {},
    ),
    'FileSystemDeleteEvent': m.ClassMirror(
      'FileSystemDeleteEvent',
      {'toString': _FileSystemDeleteEvent_toString$},
      {},
    ),
    'FileSystemMoveEvent': m.ClassMirror(
      'FileSystemMoveEvent',
      {
        'destination': _FileSystemMoveEvent_destination$,
        'toString': _FileSystemMoveEvent_toString$,
      },
      {},
    ),
    'IOSink': m.ClassMirror(
      'IOSink',
      {
        'encoding': _IOSink_encoding$,
        'done': _IOSink_done$,
        'add': _IOSink_add$,
        'write': _IOSink_write$,
        'writeAll': _IOSink_writeAll$,
        'writeln': _IOSink_writeln$,
        'writeCharCode': _IOSink_writeCharCode$,
        'addError': _IOSink_addError$,
        'addStream': _IOSink_addStream$,
        'flush': _IOSink_flush$,
        'close': _IOSink_close$,
      },
      {'encoding': _IOSink_encoding_set$},
    ),
    'Link': m.ClassMirror(
      'Link',
      {
        'absolute': _Link_absolute$,
        'create': _Link_create$,
        'createSync': _Link_createSync$,
        'updateSync': _Link_updateSync$,
        'update': _Link_update$,
        'resolveSymbolicLinks': _Link_resolveSymbolicLinks$,
        'resolveSymbolicLinksSync': _Link_resolveSymbolicLinksSync$,
        'rename': _Link_rename$,
        'renameSync': _Link_renameSync$,
        'target': _Link_target$,
        'targetSync': _Link_targetSync$,
      },
      {},
    ),
    'IOOverrides': m.ClassMirror(
      'IOOverrides',
      {
        'stdin': _IOOverrides_stdin$,
        'stdout': _IOOverrides_stdout$,
        'stderr': _IOOverrides_stderr$,
        'createDirectory': _IOOverrides_createDirectory$,
        'getCurrentDirectory': _IOOverrides_getCurrentDirectory$,
        'setCurrentDirectory': _IOOverrides_setCurrentDirectory$,
        'getSystemTempDirectory': _IOOverrides_getSystemTempDirectory$,
        'createFile': _IOOverrides_createFile$,
        'stat': _IOOverrides_stat$,
        'statSync': _IOOverrides_statSync$,
        'fseIdentical': _IOOverrides_fseIdentical$,
        'fseIdenticalSync': _IOOverrides_fseIdenticalSync$,
        'fseGetType': _IOOverrides_fseGetType$,
        'fseGetTypeSync': _IOOverrides_fseGetTypeSync$,
        'fsWatch': _IOOverrides_fsWatch$,
        'fsWatchIsSupported': _IOOverrides_fsWatchIsSupported$,
        'createLink': _IOOverrides_createLink$,
        'socketConnect': _IOOverrides_socketConnect$,
        'socketStartConnect': _IOOverrides_socketStartConnect$,
        'serverSocketBind': _IOOverrides_serverSocketBind$,
      },
      {},
    ),
    'Platform': m.ClassMirror(
      'Platform',
      {},
      {},
    ),
    'ProcessInfo': m.ClassMirror(
      'ProcessInfo',
      {},
      {},
    ),
    'ProcessStartMode': m.ClassMirror(
      'ProcessStartMode',
      {'toString': _ProcessStartMode_toString$},
      {},
    ),
    'Process': m.ClassMirror(
      'Process',
      {
        'exitCode': _Process_exitCode$,
        'stdout': _Process_stdout$,
        'stderr': _Process_stderr$,
        'stdin': _Process_stdin$,
        'pid': _Process_pid$,
        'kill': _Process_kill$,
      },
      {},
    ),
    'ProcessResult': m.ClassMirror(
      'ProcessResult',
      {
        'exitCode': _ProcessResult_exitCode$,
        'stdout': _ProcessResult_stdout$,
        'stderr': _ProcessResult_stderr$,
        'pid': _ProcessResult_pid$,
      },
      {},
    ),
    'ProcessSignal': m.ClassMirror(
      'ProcessSignal',
      {
        'signalNumber': _ProcessSignal_signalNumber$,
        'name': _ProcessSignal_name$,
        'toString': _ProcessSignal_toString$,
        'watch': _ProcessSignal_watch$,
      },
      {},
    ),
    'SignalException': m.ClassMirror(
      'SignalException',
      {
        'message': _SignalException_message$,
        'osError': _SignalException_osError$,
        'toString': _SignalException_toString$,
      },
      {},
    ),
    'ProcessException': m.ClassMirror(
      'ProcessException',
      {
        'executable': _ProcessException_executable$,
        'arguments': _ProcessException_arguments$,
        'message': _ProcessException_message$,
        'errorCode': _ProcessException_errorCode$,
        'toString': _ProcessException_toString$,
      },
      {},
    ),
    'SecureServerSocket': m.ClassMirror(
      'SecureServerSocket',
      {
        'port': _SecureServerSocket_port$,
        'address': _SecureServerSocket_address$,
        'close': _SecureServerSocket_close$,
      },
      {},
    ),
    'RawSecureServerSocket': m.ClassMirror(
      'RawSecureServerSocket',
      {
        'requestClientCertificate':
            _RawSecureServerSocket_requestClientCertificate$,
        'requireClientCertificate':
            _RawSecureServerSocket_requireClientCertificate$,
        'supportedProtocols': _RawSecureServerSocket_supportedProtocols$,
        'port': _RawSecureServerSocket_port$,
        'address': _RawSecureServerSocket_address$,
        'close': _RawSecureServerSocket_close$,
      },
      {},
    ),
    'SecureSocket': m.ClassMirror(
      'SecureSocket',
      {
        'peerCertificate': _SecureSocket_peerCertificate$,
        'selectedProtocol': _SecureSocket_selectedProtocol$,
      },
      {},
    ),
    'RawSecureSocket': m.ClassMirror(
      'RawSecureSocket',
      {
        'peerCertificate': _RawSecureSocket_peerCertificate$,
        'selectedProtocol': _RawSecureSocket_selectedProtocol$,
      },
      {},
    ),
    'X509Certificate': m.ClassMirror(
      'X509Certificate',
      {
        'der': _X509Certificate_der$,
        'pem': _X509Certificate_pem$,
        'sha1': _X509Certificate_sha1$,
        'subject': _X509Certificate_subject$,
        'issuer': _X509Certificate_issuer$,
        'startValidity': _X509Certificate_startValidity$,
        'endValidity': _X509Certificate_endValidity$,
      },
      {},
    ),
    'TlsException': m.ClassMirror(
      'TlsException',
      {
        'type': _TlsException_type$,
        'message': _TlsException_message$,
        'osError': _TlsException_osError$,
        'toString': _TlsException_toString$,
      },
      {},
    ),
    'HandshakeException': m.ClassMirror(
      'HandshakeException',
      {},
      {},
    ),
    'CertificateException': m.ClassMirror(
      'CertificateException',
      {},
      {},
    ),
    'SecurityContext': m.ClassMirror(
      'SecurityContext',
      {
        'allowLegacyUnsafeRenegotiation':
            _SecurityContext_allowLegacyUnsafeRenegotiation$,
        'usePrivateKey': _SecurityContext_usePrivateKey$,
        'usePrivateKeyBytes': _SecurityContext_usePrivateKeyBytes$,
        'setTrustedCertificates': _SecurityContext_setTrustedCertificates$,
        'setTrustedCertificatesBytes':
            _SecurityContext_setTrustedCertificatesBytes$,
        'useCertificateChain': _SecurityContext_useCertificateChain$,
        'useCertificateChainBytes': _SecurityContext_useCertificateChainBytes$,
        'setClientAuthorities': _SecurityContext_setClientAuthorities$,
        'setClientAuthoritiesBytes':
            _SecurityContext_setClientAuthoritiesBytes$,
        'setAlpnProtocols': _SecurityContext_setAlpnProtocols$,
      },
      {
        'allowLegacyUnsafeRenegotiation':
            _SecurityContext_allowLegacyUnsafeRenegotiation_set$
      },
    ),
    'InternetAddressType': m.ClassMirror(
      'InternetAddressType',
      {
        'name': _InternetAddressType_name$,
        'toString': _InternetAddressType_toString$,
      },
      {},
    ),
    'InternetAddress': m.ClassMirror(
      'InternetAddress',
      {
        'type': _InternetAddress_type$,
        'address': _InternetAddress_address$,
        'host': _InternetAddress_host$,
        'rawAddress': _InternetAddress_rawAddress$,
        'isLoopback': _InternetAddress_isLoopback$,
        'isLinkLocal': _InternetAddress_isLinkLocal$,
        'isMulticast': _InternetAddress_isMulticast$,
        'reverse': _InternetAddress_reverse$,
      },
      {},
    ),
    'NetworkInterface': m.ClassMirror(
      'NetworkInterface',
      {
        'name': _NetworkInterface_name$,
        'index': _NetworkInterface_index$,
        'addresses': _NetworkInterface_addresses$,
      },
      {},
    ),
    'RawServerSocket': m.ClassMirror(
      'RawServerSocket',
      {
        'port': _RawServerSocket_port$,
        'address': _RawServerSocket_address$,
        'close': _RawServerSocket_close$,
      },
      {},
    ),
    'ServerSocket': m.ClassMirror(
      'ServerSocket',
      {
        'port': _ServerSocket_port$,
        'address': _ServerSocket_address$,
        'close': _ServerSocket_close$,
      },
      {},
    ),
    'SocketDirection': m.ClassMirror(
      'SocketDirection',
      {},
      {},
    ),
    'SocketOption': m.ClassMirror(
      'SocketOption',
      {},
      {},
    ),
    'RawSocketOption': m.ClassMirror(
      'RawSocketOption',
      {
        'level': _RawSocketOption_level$,
        'option': _RawSocketOption_option$,
        'value': _RawSocketOption_value$,
      },
      {},
    ),
    'RawSocketEvent': m.ClassMirror(
      'RawSocketEvent',
      {'toString': _RawSocketEvent_toString$},
      {},
    ),
    'ConnectionTask': m.ClassMirror(
      'ConnectionTask',
      {
        'socket': _ConnectionTask_socket$,
        'cancel': _ConnectionTask_cancel$,
      },
      {},
    ),
    'RawSocket': m.ClassMirror(
      'RawSocket',
      {
        'readEventsEnabled': _RawSocket_readEventsEnabled$,
        'writeEventsEnabled': _RawSocket_writeEventsEnabled$,
        'port': _RawSocket_port$,
        'remotePort': _RawSocket_remotePort$,
        'address': _RawSocket_address$,
        'remoteAddress': _RawSocket_remoteAddress$,
        'available': _RawSocket_available$,
        'read': _RawSocket_read$,
        'readMessage': _RawSocket_readMessage$,
        'write': _RawSocket_write$,
        'sendMessage': _RawSocket_sendMessage$,
        'close': _RawSocket_close$,
        'shutdown': _RawSocket_shutdown$,
        'setOption': _RawSocket_setOption$,
        'getRawOption': _RawSocket_getRawOption$,
        'setRawOption': _RawSocket_setRawOption$,
      },
      {
        'readEventsEnabled': _RawSocket_readEventsEnabled_set$,
        'writeEventsEnabled': _RawSocket_writeEventsEnabled_set$,
      },
    ),
    'Socket': m.ClassMirror(
      'Socket',
      {
        'port': _Socket_port$,
        'remotePort': _Socket_remotePort$,
        'address': _Socket_address$,
        'remoteAddress': _Socket_remoteAddress$,
        'done': _Socket_done$,
        'destroy': _Socket_destroy$,
        'setOption': _Socket_setOption$,
        'getRawOption': _Socket_getRawOption$,
        'setRawOption': _Socket_setRawOption$,
        'close': _Socket_close$,
      },
      {},
    ),
    'Datagram': m.ClassMirror(
      'Datagram',
      {
        'data': _Datagram_data$,
        'address': _Datagram_address$,
        'port': _Datagram_port$,
      },
      {
        'data': _Datagram_data_set$,
        'address': _Datagram_address_set$,
        'port': _Datagram_port_set$,
      },
    ),
    'ResourceHandle': m.ClassMirror(
      'ResourceHandle',
      {
        'toFile': _ResourceHandle_toFile$,
        'toSocket': _ResourceHandle_toSocket$,
        'toRawSocket': _ResourceHandle_toRawSocket$,
        'toRawDatagramSocket': _ResourceHandle_toRawDatagramSocket$,
        'toReadPipe': _ResourceHandle_toReadPipe$,
        'toWritePipe': _ResourceHandle_toWritePipe$,
      },
      {},
    ),
    'SocketControlMessage': m.ClassMirror(
      'SocketControlMessage',
      {
        'level': _SocketControlMessage_level$,
        'type': _SocketControlMessage_type$,
        'data': _SocketControlMessage_data$,
        'extractHandles': _SocketControlMessage_extractHandles$,
      },
      {},
    ),
    'SocketMessage': m.ClassMirror(
      'SocketMessage',
      {
        'data': _SocketMessage_data$,
        'controlMessages': _SocketMessage_controlMessages$,
      },
      {},
    ),
    'RawDatagramSocket': m.ClassMirror(
      'RawDatagramSocket',
      {
        'readEventsEnabled': _RawDatagramSocket_readEventsEnabled$,
        'writeEventsEnabled': _RawDatagramSocket_writeEventsEnabled$,
        'multicastLoopback': _RawDatagramSocket_multicastLoopback$,
        'multicastHops': _RawDatagramSocket_multicastHops$,
        'multicastInterface': _RawDatagramSocket_multicastInterface$,
        'broadcastEnabled': _RawDatagramSocket_broadcastEnabled$,
        'port': _RawDatagramSocket_port$,
        'address': _RawDatagramSocket_address$,
        'close': _RawDatagramSocket_close$,
        'send': _RawDatagramSocket_send$,
        'receive': _RawDatagramSocket_receive$,
        'joinMulticast': _RawDatagramSocket_joinMulticast$,
        'leaveMulticast': _RawDatagramSocket_leaveMulticast$,
        'getRawOption': _RawDatagramSocket_getRawOption$,
        'setRawOption': _RawDatagramSocket_setRawOption$,
      },
      {
        'readEventsEnabled': _RawDatagramSocket_readEventsEnabled_set$,
        'writeEventsEnabled': _RawDatagramSocket_writeEventsEnabled_set$,
        'multicastLoopback': _RawDatagramSocket_multicastLoopback_set$,
        'multicastHops': _RawDatagramSocket_multicastHops_set$,
        'multicastInterface': _RawDatagramSocket_multicastInterface_set$,
        'broadcastEnabled': _RawDatagramSocket_broadcastEnabled_set$,
      },
    ),
    'SocketException': m.ClassMirror(
      'SocketException',
      {
        'message': _SocketException_message$,
        'osError': _SocketException_osError$,
        'address': _SocketException_address$,
        'port': _SocketException_port$,
        'toString': _SocketException_toString$,
      },
      {},
    ),
    'Stdin': m.ClassMirror(
      'Stdin',
      {
        'echoMode': _Stdin_echoMode$,
        'echoNewlineMode': _Stdin_echoNewlineMode$,
        'lineMode': _Stdin_lineMode$,
        'supportsAnsiEscapes': _Stdin_supportsAnsiEscapes$,
        'hasTerminal': _Stdin_hasTerminal$,
        'readLineSync': _Stdin_readLineSync$,
        'readByteSync': _Stdin_readByteSync$,
      },
      {
        'echoMode': _Stdin_echoMode_set$,
        'echoNewlineMode': _Stdin_echoNewlineMode_set$,
        'lineMode': _Stdin_lineMode_set$,
      },
    ),
    'Stdout': m.ClassMirror(
      'Stdout',
      {
        'hasTerminal': _Stdout_hasTerminal$,
        'terminalColumns': _Stdout_terminalColumns$,
        'terminalLines': _Stdout_terminalLines$,
        'supportsAnsiEscapes': _Stdout_supportsAnsiEscapes$,
        'nonBlocking': _Stdout_nonBlocking$,
      },
      {},
    ),
    'StdoutException': m.ClassMirror(
      'StdoutException',
      {
        'message': _StdoutException_message$,
        'osError': _StdoutException_osError$,
        'toString': _StdoutException_toString$,
      },
      {},
    ),
    'StdinException': m.ClassMirror(
      'StdinException',
      {
        'message': _StdinException_message$,
        'osError': _StdinException_osError$,
        'toString': _StdinException_toString$,
      },
      {},
    ),
    'StdioType': m.ClassMirror(
      'StdioType',
      {
        'name': _StdioType_name$,
        'toString': _StdioType_toString$,
      },
      {},
    ),
    'SystemEncoding': m.ClassMirror(
      'SystemEncoding',
      {
        'name': _SystemEncoding_name$,
        'encoder': _SystemEncoding_encoder$,
        'decoder': _SystemEncoding_decoder$,
        'encode': _SystemEncoding_encode$,
        'decode': _SystemEncoding_decode$,
      },
      {},
    ),
    'RawSynchronousSocket': m.ClassMirror(
      'RawSynchronousSocket',
      {
        'port': _RawSynchronousSocket_port$,
        'remotePort': _RawSynchronousSocket_remotePort$,
        'address': _RawSynchronousSocket_address$,
        'remoteAddress': _RawSynchronousSocket_remoteAddress$,
        'available': _RawSynchronousSocket_available$,
        'closeSync': _RawSynchronousSocket_closeSync$,
        'readIntoSync': _RawSynchronousSocket_readIntoSync$,
        'readSync': _RawSynchronousSocket_readSync$,
        'shutdown': _RawSynchronousSocket_shutdown$,
        'writeFromSync': _RawSynchronousSocket_writeFromSync$,
      },
      {},
    ),
  },
);
Function _IOException_toString$(
  m.Scope scope,
  IOException target,
) =>
    target.toString;
int _OSError_noErrorCode$() {
  return OSError.noErrorCode;
}

String _OSError_message$(OSError target) {
  return target.message;
}

int _OSError_errorCode$(OSError target) {
  return target.errorCode;
}

Function _OSError_toString$(
  m.Scope scope,
  OSError target,
) =>
    target.toString;
ZLibCodec _zlib$() {
  return zlib;
}

GZipCodec _gzip$() {
  return gzip;
}

int _ZLibOption_minWindowBits$() {
  return ZLibOption.minWindowBits;
}

int _ZLibOption_maxWindowBits$() {
  return ZLibOption.maxWindowBits;
}

int _ZLibOption_defaultWindowBits$() {
  return ZLibOption.defaultWindowBits;
}

int _ZLibOption_minLevel$() {
  return ZLibOption.minLevel;
}

int _ZLibOption_maxLevel$() {
  return ZLibOption.maxLevel;
}

int _ZLibOption_defaultLevel$() {
  return ZLibOption.defaultLevel;
}

int _ZLibOption_minMemLevel$() {
  return ZLibOption.minMemLevel;
}

int _ZLibOption_maxMemLevel$() {
  return ZLibOption.maxMemLevel;
}

int _ZLibOption_defaultMemLevel$() {
  return ZLibOption.defaultMemLevel;
}

int _ZLibOption_strategyFiltered$() {
  return ZLibOption.strategyFiltered;
}

int _ZLibOption_strategyHuffmanOnly$() {
  return ZLibOption.strategyHuffmanOnly;
}

int _ZLibOption_strategyRle$() {
  return ZLibOption.strategyRle;
}

int _ZLibOption_strategyFixed$() {
  return ZLibOption.strategyFixed;
}

int _ZLibOption_strategyDefault$() {
  return ZLibOption.strategyDefault;
}

bool _ZLibCodec_gzip$(ZLibCodec target) {
  return target.gzip;
}

int _ZLibCodec_level$(ZLibCodec target) {
  return target.level;
}

int _ZLibCodec_memLevel$(ZLibCodec target) {
  return target.memLevel;
}

int _ZLibCodec_strategy$(ZLibCodec target) {
  return target.strategy;
}

int _ZLibCodec_windowBits$(ZLibCodec target) {
  return target.windowBits;
}

bool _ZLibCodec_raw$(ZLibCodec target) {
  return target.raw;
}

List<int>? _ZLibCodec_dictionary$(ZLibCodec target) {
  return target.dictionary;
}

ZLibEncoder _ZLibCodec_encoder$(ZLibCodec target) {
  return target.encoder;
}

ZLibDecoder _ZLibCodec_decoder$(ZLibCodec target) {
  return target.decoder;
}

bool _GZipCodec_gzip$(GZipCodec target) {
  return target.gzip;
}

int _GZipCodec_level$(GZipCodec target) {
  return target.level;
}

int _GZipCodec_memLevel$(GZipCodec target) {
  return target.memLevel;
}

int _GZipCodec_strategy$(GZipCodec target) {
  return target.strategy;
}

int _GZipCodec_windowBits$(GZipCodec target) {
  return target.windowBits;
}

List<int>? _GZipCodec_dictionary$(GZipCodec target) {
  return target.dictionary;
}

bool _GZipCodec_raw$(GZipCodec target) {
  return target.raw;
}

ZLibEncoder _GZipCodec_encoder$(GZipCodec target) {
  return target.encoder;
}

ZLibDecoder _GZipCodec_decoder$(GZipCodec target) {
  return target.decoder;
}

bool _ZLibEncoder_gzip$(ZLibEncoder target) {
  return target.gzip;
}

int _ZLibEncoder_level$(ZLibEncoder target) {
  return target.level;
}

int _ZLibEncoder_memLevel$(ZLibEncoder target) {
  return target.memLevel;
}

int _ZLibEncoder_strategy$(ZLibEncoder target) {
  return target.strategy;
}

int _ZLibEncoder_windowBits$(ZLibEncoder target) {
  return target.windowBits;
}

List<int>? _ZLibEncoder_dictionary$(ZLibEncoder target) {
  return target.dictionary;
}

bool _ZLibEncoder_raw$(ZLibEncoder target) {
  return target.raw;
}

Function _ZLibEncoder_convert$(
  m.Scope scope,
  ZLibEncoder target,
) =>
    target.convert;
Function _ZLibEncoder_startChunkedConversion$(
  m.Scope scope,
  ZLibEncoder target,
) =>
    target.startChunkedConversion;
int _ZLibDecoder_windowBits$(ZLibDecoder target) {
  return target.windowBits;
}

List<int>? _ZLibDecoder_dictionary$(ZLibDecoder target) {
  return target.dictionary;
}

bool _ZLibDecoder_raw$(ZLibDecoder target) {
  return target.raw;
}

Function _ZLibDecoder_convert$(
  m.Scope scope,
  ZLibDecoder target,
) =>
    target.convert;
Function _ZLibDecoder_startChunkedConversion$(
  m.Scope scope,
  ZLibDecoder target,
) =>
    target.startChunkedConversion;
Function _RawZLibFilter_process$(
  m.Scope scope,
  RawZLibFilter target,
) =>
    target.process;
Function _RawZLibFilter_processed$(
  m.Scope scope,
  RawZLibFilter target,
) =>
    target.processed;
String _Directory_path$(Directory target) {
  return target.path;
}

Directory _Directory_current$() {
  return Directory.current;
}

Uri _Directory_uri$(Directory target) {
  return target.uri;
}

void _Directory_current_set$(dynamic other) {
  Directory.current = other;
}

Directory _Directory_systemTemp$() {
  return Directory.systemTemp;
}

Directory _Directory_absolute$(Directory target) {
  return target.absolute;
}

Function _Directory_create$(
  m.Scope scope,
  Directory target,
) =>
    target.create;
Function _Directory_createSync$(
  m.Scope scope,
  Directory target,
) =>
    target.createSync;
Function _Directory_createTemp$(
  m.Scope scope,
  Directory target,
) =>
    target.createTemp;
Function _Directory_createTempSync$(
  m.Scope scope,
  Directory target,
) =>
    target.createTempSync;
Function _Directory_resolveSymbolicLinks$(
  m.Scope scope,
  Directory target,
) =>
    target.resolveSymbolicLinks;
Function _Directory_resolveSymbolicLinksSync$(
  m.Scope scope,
  Directory target,
) =>
    target.resolveSymbolicLinksSync;
Function _Directory_rename$(
  m.Scope scope,
  Directory target,
) =>
    target.rename;
Function _Directory_renameSync$(
  m.Scope scope,
  Directory target,
) =>
    target.renameSync;
Function _Directory_list$(
  m.Scope scope,
  Directory target,
) =>
    target.list;
Function _Directory_listSync$(
  m.Scope scope,
  Directory target,
) =>
    target.listSync;
Function _Directory_toString$(
  m.Scope scope,
  Directory target,
) =>
    target.toString;
FileMode _FileMode_read$() {
  return FileMode.read;
}

FileMode _FileMode_write$() {
  return FileMode.write;
}

FileMode _FileMode_append$() {
  return FileMode.append;
}

FileMode _FileMode_writeOnly$() {
  return FileMode.writeOnly;
}

FileMode _FileMode_writeOnlyAppend$() {
  return FileMode.writeOnlyAppend;
}

FileLock _FileLock_shared$() {
  return FileLock.shared;
}

FileLock _FileLock_exclusive$() {
  return FileLock.exclusive;
}

FileLock _FileLock_blockingShared$() {
  return FileLock.blockingShared;
}

FileLock _FileLock_blockingExclusive$() {
  return FileLock.blockingExclusive;
}

File _File_absolute$(File target) {
  return target.absolute;
}

String _File_path$(File target) {
  return target.path;
}

Function _File_create$(
  m.Scope scope,
  File target,
) =>
    target.create;
Function _File_createSync$(
  m.Scope scope,
  File target,
) =>
    target.createSync;
Function _File_rename$(
  m.Scope scope,
  File target,
) =>
    target.rename;
Function _File_renameSync$(
  m.Scope scope,
  File target,
) =>
    target.renameSync;
Function _File_copy$(
  m.Scope scope,
  File target,
) =>
    target.copy;
Function _File_copySync$(
  m.Scope scope,
  File target,
) =>
    target.copySync;
Function _File_length$(
  m.Scope scope,
  File target,
) =>
    target.length;
Function _File_lengthSync$(
  m.Scope scope,
  File target,
) =>
    target.lengthSync;
Function _File_lastAccessed$(
  m.Scope scope,
  File target,
) =>
    target.lastAccessed;
Function _File_lastAccessedSync$(
  m.Scope scope,
  File target,
) =>
    target.lastAccessedSync;
Function _File_setLastAccessed$(
  m.Scope scope,
  File target,
) =>
    target.setLastAccessed;
Function _File_setLastAccessedSync$(
  m.Scope scope,
  File target,
) =>
    target.setLastAccessedSync;
Function _File_lastModified$(
  m.Scope scope,
  File target,
) =>
    target.lastModified;
Function _File_lastModifiedSync$(
  m.Scope scope,
  File target,
) =>
    target.lastModifiedSync;
Function _File_setLastModified$(
  m.Scope scope,
  File target,
) =>
    target.setLastModified;
Function _File_setLastModifiedSync$(
  m.Scope scope,
  File target,
) =>
    target.setLastModifiedSync;
Function _File_open$(
  m.Scope scope,
  File target,
) =>
    target.open;
Function _File_openSync$(
  m.Scope scope,
  File target,
) =>
    target.openSync;
Function _File_openRead$(
  m.Scope scope,
  File target,
) =>
    target.openRead;
Function _File_openWrite$(
  m.Scope scope,
  File target,
) =>
    target.openWrite;
Function _File_readAsBytes$(
  m.Scope scope,
  File target,
) =>
    target.readAsBytes;
Function _File_readAsBytesSync$(
  m.Scope scope,
  File target,
) =>
    target.readAsBytesSync;
Function _File_readAsString$(
  m.Scope scope,
  File target,
) =>
    target.readAsString;
Function _File_readAsStringSync$(
  m.Scope scope,
  File target,
) =>
    target.readAsStringSync;
Function _File_readAsLines$(
  m.Scope scope,
  File target,
) =>
    target.readAsLines;
Function _File_readAsLinesSync$(
  m.Scope scope,
  File target,
) =>
    target.readAsLinesSync;
Function _File_writeAsBytes$(
  m.Scope scope,
  File target,
) =>
    target.writeAsBytes;
Function _File_writeAsBytesSync$(
  m.Scope scope,
  File target,
) =>
    target.writeAsBytesSync;
Function _File_writeAsString$(
  m.Scope scope,
  File target,
) =>
    target.writeAsString;
Function _File_writeAsStringSync$(
  m.Scope scope,
  File target,
) =>
    target.writeAsStringSync;
String _RandomAccessFile_path$(RandomAccessFile target) {
  return target.path;
}

Function _RandomAccessFile_close$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.close;
Function _RandomAccessFile_closeSync$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.closeSync;
Function _RandomAccessFile_readByte$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.readByte;
Function _RandomAccessFile_readByteSync$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.readByteSync;
Function _RandomAccessFile_read$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.read;
Function _RandomAccessFile_readSync$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.readSync;
Function _RandomAccessFile_readInto$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.readInto;
Function _RandomAccessFile_readIntoSync$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.readIntoSync;
Function _RandomAccessFile_writeByte$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.writeByte;
Function _RandomAccessFile_writeByteSync$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.writeByteSync;
Function _RandomAccessFile_writeFrom$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.writeFrom;
Function _RandomAccessFile_writeFromSync$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.writeFromSync;
Function _RandomAccessFile_writeString$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.writeString;
Function _RandomAccessFile_writeStringSync$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.writeStringSync;
Function _RandomAccessFile_position$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.position;
Function _RandomAccessFile_positionSync$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.positionSync;
Function _RandomAccessFile_setPosition$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.setPosition;
Function _RandomAccessFile_setPositionSync$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.setPositionSync;
Function _RandomAccessFile_truncate$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.truncate;
Function _RandomAccessFile_truncateSync$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.truncateSync;
Function _RandomAccessFile_length$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.length;
Function _RandomAccessFile_lengthSync$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.lengthSync;
Function _RandomAccessFile_flush$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.flush;
Function _RandomAccessFile_flushSync$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.flushSync;
Function _RandomAccessFile_lock$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.lock;
Function _RandomAccessFile_lockSync$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.lockSync;
Function _RandomAccessFile_unlock$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.unlock;
Function _RandomAccessFile_unlockSync$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.unlockSync;
Function _RandomAccessFile_toString$(
  m.Scope scope,
  RandomAccessFile target,
) =>
    target.toString;
String _FileSystemException_message$(FileSystemException target) {
  return target.message;
}

String? _FileSystemException_path$(FileSystemException target) {
  return target.path;
}

OSError? _FileSystemException_osError$(FileSystemException target) {
  return target.osError;
}

Function _FileSystemException_toString$(
  m.Scope scope,
  FileSystemException target,
) =>
    target.toString;
Function _PathAccessException_toString$(
  m.Scope scope,
  PathAccessException target,
) =>
    target.toString;
Function _PathExistsException_toString$(
  m.Scope scope,
  PathExistsException target,
) =>
    target.toString;
Function _PathNotFoundException_toString$(
  m.Scope scope,
  PathNotFoundException target,
) =>
    target.toString;
ReadPipe _Pipe_read$(Pipe target) {
  return target.read;
}

WritePipe _Pipe_write$(Pipe target) {
  return target.write;
}

Function _Pipe_create$(m.Scope scope) => Pipe.create;
FileSystemEntityType _FileSystemEntityType_file$() {
  return FileSystemEntityType.file;
}

FileSystemEntityType _FileSystemEntityType_directory$() {
  return FileSystemEntityType.directory;
}

FileSystemEntityType _FileSystemEntityType_link$() {
  return FileSystemEntityType.link;
}

FileSystemEntityType _FileSystemEntityType_unixDomainSock$() {
  return FileSystemEntityType.unixDomainSock;
}

FileSystemEntityType _FileSystemEntityType_pipe$() {
  return FileSystemEntityType.pipe;
}

FileSystemEntityType _FileSystemEntityType_notFound$() {
  return FileSystemEntityType.notFound;
}

FileSystemEntityType _FileSystemEntityType_NOT_FOUND$() {
  return FileSystemEntityType.NOT_FOUND;
}

Function _FileSystemEntityType_toString$(
  m.Scope scope,
  FileSystemEntityType target,
) =>
    target.toString;
DateTime _FileStat_changed$(FileStat target) {
  return target.changed;
}

DateTime _FileStat_modified$(FileStat target) {
  return target.modified;
}

DateTime _FileStat_accessed$(FileStat target) {
  return target.accessed;
}

FileSystemEntityType _FileStat_type$(FileStat target) {
  return target.type;
}

int _FileStat_mode$(FileStat target) {
  return target.mode;
}

int _FileStat_size$(FileStat target) {
  return target.size;
}

Function _FileStat_statSync$(m.Scope scope) => FileStat.statSync;
Function _FileStat_stat$(m.Scope scope) => FileStat.stat;
Function _FileStat_toString$(
  m.Scope scope,
  FileStat target,
) =>
    target.toString;
Function _FileStat_modeString$(
  m.Scope scope,
  FileStat target,
) =>
    target.modeString;
String _FileSystemEntity_path$(FileSystemEntity target) {
  return target.path;
}

Uri _FileSystemEntity_uri$(FileSystemEntity target) {
  return target.uri;
}

bool _FileSystemEntity_isAbsolute$(FileSystemEntity target) {
  return target.isAbsolute;
}

FileSystemEntity _FileSystemEntity_absolute$(FileSystemEntity target) {
  return target.absolute;
}

bool _FileSystemEntity_isWatchSupported$() {
  return FileSystemEntity.isWatchSupported;
}

Directory _FileSystemEntity_parent$(FileSystemEntity target) {
  return target.parent;
}

Function _FileSystemEntity_exists$(
  m.Scope scope,
  FileSystemEntity target,
) =>
    target.exists;
Function _FileSystemEntity_existsSync$(
  m.Scope scope,
  FileSystemEntity target,
) =>
    target.existsSync;
Function _FileSystemEntity_rename$(
  m.Scope scope,
  FileSystemEntity target,
) =>
    target.rename;
Function _FileSystemEntity_renameSync$(
  m.Scope scope,
  FileSystemEntity target,
) =>
    target.renameSync;
Function _FileSystemEntity_resolveSymbolicLinks$(
  m.Scope scope,
  FileSystemEntity target,
) =>
    target.resolveSymbolicLinks;
Function _FileSystemEntity_resolveSymbolicLinksSync$(
  m.Scope scope,
  FileSystemEntity target,
) =>
    target.resolveSymbolicLinksSync;
Function _FileSystemEntity_stat$(
  m.Scope scope,
  FileSystemEntity target,
) =>
    target.stat;
Function _FileSystemEntity_statSync$(
  m.Scope scope,
  FileSystemEntity target,
) =>
    target.statSync;
Function _FileSystemEntity_delete$(
  m.Scope scope,
  FileSystemEntity target,
) =>
    target.delete;
Function _FileSystemEntity_deleteSync$(
  m.Scope scope,
  FileSystemEntity target,
) =>
    target.deleteSync;
Function _FileSystemEntity_watch$(
  m.Scope scope,
  FileSystemEntity target,
) =>
    target.watch;
Function _FileSystemEntity_identical$(m.Scope scope) =>
    FileSystemEntity.identical;
Function _FileSystemEntity_identicalSync$(m.Scope scope) =>
    FileSystemEntity.identicalSync;
Function _FileSystemEntity_type$(m.Scope scope) => FileSystemEntity.type;
Function _FileSystemEntity_typeSync$(m.Scope scope) =>
    FileSystemEntity.typeSync;
Function _FileSystemEntity_isLink$(m.Scope scope) => FileSystemEntity.isLink;
Function _FileSystemEntity_isFile$(m.Scope scope) => FileSystemEntity.isFile;
Function _FileSystemEntity_isDirectory$(m.Scope scope) =>
    FileSystemEntity.isDirectory;
Function _FileSystemEntity_isLinkSync$(m.Scope scope) =>
    FileSystemEntity.isLinkSync;
Function _FileSystemEntity_isFileSync$(m.Scope scope) =>
    FileSystemEntity.isFileSync;
Function _FileSystemEntity_isDirectorySync$(m.Scope scope) =>
    FileSystemEntity.isDirectorySync;
Function _FileSystemEntity_parentOf$(m.Scope scope) =>
    FileSystemEntity.parentOf;
int _FileSystemEvent_create$() {
  return FileSystemEvent.create;
}

int _FileSystemEvent_modify$() {
  return FileSystemEvent.modify;
}

int _FileSystemEvent_delete$() {
  return FileSystemEvent.delete;
}

int _FileSystemEvent_move$() {
  return FileSystemEvent.move;
}

int _FileSystemEvent_all$() {
  return FileSystemEvent.all;
}

int _FileSystemEvent_type$(FileSystemEvent target) {
  return target.type;
}

String _FileSystemEvent_path$(FileSystemEvent target) {
  return target.path;
}

bool _FileSystemEvent_isDirectory$(FileSystemEvent target) {
  return target.isDirectory;
}

Function _FileSystemCreateEvent_toString$(
  m.Scope scope,
  FileSystemCreateEvent target,
) =>
    target.toString;
bool _FileSystemModifyEvent_contentChanged$(FileSystemModifyEvent target) {
  return target.contentChanged;
}

Function _FileSystemModifyEvent_toString$(
  m.Scope scope,
  FileSystemModifyEvent target,
) =>
    target.toString;
Function _FileSystemDeleteEvent_toString$(
  m.Scope scope,
  FileSystemDeleteEvent target,
) =>
    target.toString;
String? _FileSystemMoveEvent_destination$(FileSystemMoveEvent target) {
  return target.destination;
}

Function _FileSystemMoveEvent_toString$(
  m.Scope scope,
  FileSystemMoveEvent target,
) =>
    target.toString;
Encoding _IOSink_encoding$(IOSink target) {
  return target.encoding;
}

void _IOSink_encoding_set$(
  IOSink target,
  Encoding other,
) {
  target.encoding = other;
}

Future<dynamic> _IOSink_done$(IOSink target) {
  return target.done;
}

Function _IOSink_add$(
  m.Scope scope,
  IOSink target,
) =>
    target.add;
Function _IOSink_write$(
  m.Scope scope,
  IOSink target,
) =>
    target.write;
Function _IOSink_writeAll$(
  m.Scope scope,
  IOSink target,
) =>
    target.writeAll;
Function _IOSink_writeln$(
  m.Scope scope,
  IOSink target,
) =>
    target.writeln;
Function _IOSink_writeCharCode$(
  m.Scope scope,
  IOSink target,
) =>
    target.writeCharCode;
Function _IOSink_addError$(
  m.Scope scope,
  IOSink target,
) =>
    target.addError;
Function _IOSink_addStream$(
  m.Scope scope,
  IOSink target,
) =>
    target.addStream;
Function _IOSink_flush$(
  m.Scope scope,
  IOSink target,
) =>
    target.flush;
Function _IOSink_close$(
  m.Scope scope,
  IOSink target,
) =>
    target.close;
Link _Link_absolute$(Link target) {
  return target.absolute;
}

Function _Link_create$(
  m.Scope scope,
  Link target,
) =>
    target.create;
Function _Link_createSync$(
  m.Scope scope,
  Link target,
) =>
    target.createSync;
Function _Link_updateSync$(
  m.Scope scope,
  Link target,
) =>
    target.updateSync;
Function _Link_update$(
  m.Scope scope,
  Link target,
) =>
    target.update;
Function _Link_resolveSymbolicLinks$(
  m.Scope scope,
  Link target,
) =>
    target.resolveSymbolicLinks;
Function _Link_resolveSymbolicLinksSync$(
  m.Scope scope,
  Link target,
) =>
    target.resolveSymbolicLinksSync;
Function _Link_rename$(
  m.Scope scope,
  Link target,
) =>
    target.rename;
Function _Link_renameSync$(
  m.Scope scope,
  Link target,
) =>
    target.renameSync;
Function _Link_target$(
  m.Scope scope,
  Link target,
) =>
    target.target;
Function _Link_targetSync$(
  m.Scope scope,
  Link target,
) =>
    target.targetSync;
IOOverrides? _IOOverrides_current$() {
  return IOOverrides.current;
}

void _IOOverrides_global_set$(IOOverrides? other) {
  IOOverrides.global = other;
}

Stdin _IOOverrides_stdin$(IOOverrides target) {
  return target.stdin;
}

Stdout _IOOverrides_stdout$(IOOverrides target) {
  return target.stdout;
}

Stdout _IOOverrides_stderr$(IOOverrides target) {
  return target.stderr;
}

Function _IOOverrides_createDirectory$(
  m.Scope scope,
  IOOverrides target,
) =>
    target.createDirectory;
Function _IOOverrides_getCurrentDirectory$(
  m.Scope scope,
  IOOverrides target,
) =>
    target.getCurrentDirectory;
Function _IOOverrides_setCurrentDirectory$(
  m.Scope scope,
  IOOverrides target,
) =>
    target.setCurrentDirectory;
Function _IOOverrides_getSystemTempDirectory$(
  m.Scope scope,
  IOOverrides target,
) =>
    target.getSystemTempDirectory;
Function _IOOverrides_createFile$(
  m.Scope scope,
  IOOverrides target,
) =>
    target.createFile;
Function _IOOverrides_stat$(
  m.Scope scope,
  IOOverrides target,
) =>
    target.stat;
Function _IOOverrides_statSync$(
  m.Scope scope,
  IOOverrides target,
) =>
    target.statSync;
Function _IOOverrides_fseIdentical$(
  m.Scope scope,
  IOOverrides target,
) =>
    target.fseIdentical;
Function _IOOverrides_fseIdenticalSync$(
  m.Scope scope,
  IOOverrides target,
) =>
    target.fseIdenticalSync;
Function _IOOverrides_fseGetType$(
  m.Scope scope,
  IOOverrides target,
) =>
    target.fseGetType;
Function _IOOverrides_fseGetTypeSync$(
  m.Scope scope,
  IOOverrides target,
) =>
    target.fseGetTypeSync;
Function _IOOverrides_fsWatch$(
  m.Scope scope,
  IOOverrides target,
) =>
    target.fsWatch;
Function _IOOverrides_fsWatchIsSupported$(
  m.Scope scope,
  IOOverrides target,
) =>
    target.fsWatchIsSupported;
Function _IOOverrides_createLink$(
  m.Scope scope,
  IOOverrides target,
) =>
    target.createLink;
Function _IOOverrides_socketConnect$(
  m.Scope scope,
  IOOverrides target,
) =>
    target.socketConnect;
Function _IOOverrides_socketStartConnect$(
  m.Scope scope,
  IOOverrides target,
) =>
    target.socketStartConnect;
Function _IOOverrides_serverSocketBind$(
  m.Scope scope,
  IOOverrides target,
) =>
    target.serverSocketBind;
bool _Platform_isLinux$() {
  return Platform.isLinux;
}

bool _Platform_isMacOS$() {
  return Platform.isMacOS;
}

bool _Platform_isWindows$() {
  return Platform.isWindows;
}

bool _Platform_isAndroid$() {
  return Platform.isAndroid;
}

bool _Platform_isIOS$() {
  return Platform.isIOS;
}

bool _Platform_isFuchsia$() {
  return Platform.isFuchsia;
}

int _Platform_numberOfProcessors$() {
  return Platform.numberOfProcessors;
}

String _Platform_pathSeparator$() {
  return Platform.pathSeparator;
}

String _Platform_localeName$() {
  return Platform.localeName;
}

String _Platform_operatingSystem$() {
  return Platform.operatingSystem;
}

String _Platform_operatingSystemVersion$() {
  return Platform.operatingSystemVersion;
}

String _Platform_localHostname$() {
  return Platform.localHostname;
}

Map<String, String> _Platform_environment$() {
  return Platform.environment;
}

String _Platform_executable$() {
  return Platform.executable;
}

String _Platform_resolvedExecutable$() {
  return Platform.resolvedExecutable;
}

Uri _Platform_script$() {
  return Platform.script;
}

List<String> _Platform_executableArguments$() {
  return Platform.executableArguments;
}

String? _Platform_packageConfig$() {
  return Platform.packageConfig;
}

String _Platform_version$() {
  return Platform.version;
}

void _exitCode_set$(int other) {
  exitCode = other;
}

int _exitCode$() {
  return exitCode;
}

int _pid$() {
  return pid;
}

int _ProcessInfo_currentRss$() {
  return ProcessInfo.currentRss;
}

int _ProcessInfo_maxRss$() {
  return ProcessInfo.maxRss;
}

ProcessStartMode _ProcessStartMode_normal$() {
  return ProcessStartMode.normal;
}

ProcessStartMode _ProcessStartMode_inheritStdio$() {
  return ProcessStartMode.inheritStdio;
}

ProcessStartMode _ProcessStartMode_detached$() {
  return ProcessStartMode.detached;
}

ProcessStartMode _ProcessStartMode_detachedWithStdio$() {
  return ProcessStartMode.detachedWithStdio;
}

List<ProcessStartMode> _ProcessStartMode_values$() {
  return ProcessStartMode.values;
}

Function _ProcessStartMode_toString$(
  m.Scope scope,
  ProcessStartMode target,
) =>
    target.toString;
Future<int> _Process_exitCode$(Process target) {
  return target.exitCode;
}

Stream<List<int>> _Process_stdout$(Process target) {
  return target.stdout;
}

Stream<List<int>> _Process_stderr$(Process target) {
  return target.stderr;
}

IOSink _Process_stdin$(Process target) {
  return target.stdin;
}

int _Process_pid$(Process target) {
  return target.pid;
}

Function _Process_start$(m.Scope scope) => Process.start;
Function _Process_run$(m.Scope scope) => Process.run;
Function _Process_runSync$(m.Scope scope) => Process.runSync;
Function _Process_killPid$(m.Scope scope) => Process.killPid;
Function _Process_kill$(
  m.Scope scope,
  Process target,
) =>
    target.kill;
int _ProcessResult_exitCode$(ProcessResult target) {
  return target.exitCode;
}

dynamic _ProcessResult_stdout$(ProcessResult target) {
  return target.stdout;
}

dynamic _ProcessResult_stderr$(ProcessResult target) {
  return target.stderr;
}

int _ProcessResult_pid$(ProcessResult target) {
  return target.pid;
}

ProcessSignal _ProcessSignal_sighup$() {
  return ProcessSignal.sighup;
}

ProcessSignal _ProcessSignal_sigint$() {
  return ProcessSignal.sigint;
}

ProcessSignal _ProcessSignal_sigquit$() {
  return ProcessSignal.sigquit;
}

ProcessSignal _ProcessSignal_sigill$() {
  return ProcessSignal.sigill;
}

ProcessSignal _ProcessSignal_sigtrap$() {
  return ProcessSignal.sigtrap;
}

ProcessSignal _ProcessSignal_sigabrt$() {
  return ProcessSignal.sigabrt;
}

ProcessSignal _ProcessSignal_sigbus$() {
  return ProcessSignal.sigbus;
}

ProcessSignal _ProcessSignal_sigfpe$() {
  return ProcessSignal.sigfpe;
}

ProcessSignal _ProcessSignal_sigkill$() {
  return ProcessSignal.sigkill;
}

ProcessSignal _ProcessSignal_sigusr1$() {
  return ProcessSignal.sigusr1;
}

ProcessSignal _ProcessSignal_sigsegv$() {
  return ProcessSignal.sigsegv;
}

ProcessSignal _ProcessSignal_sigusr2$() {
  return ProcessSignal.sigusr2;
}

ProcessSignal _ProcessSignal_sigpipe$() {
  return ProcessSignal.sigpipe;
}

ProcessSignal _ProcessSignal_sigalrm$() {
  return ProcessSignal.sigalrm;
}

ProcessSignal _ProcessSignal_sigterm$() {
  return ProcessSignal.sigterm;
}

ProcessSignal _ProcessSignal_sigchld$() {
  return ProcessSignal.sigchld;
}

ProcessSignal _ProcessSignal_sigcont$() {
  return ProcessSignal.sigcont;
}

ProcessSignal _ProcessSignal_sigstop$() {
  return ProcessSignal.sigstop;
}

ProcessSignal _ProcessSignal_sigtstp$() {
  return ProcessSignal.sigtstp;
}

ProcessSignal _ProcessSignal_sigttin$() {
  return ProcessSignal.sigttin;
}

ProcessSignal _ProcessSignal_sigttou$() {
  return ProcessSignal.sigttou;
}

ProcessSignal _ProcessSignal_sigurg$() {
  return ProcessSignal.sigurg;
}

ProcessSignal _ProcessSignal_sigxcpu$() {
  return ProcessSignal.sigxcpu;
}

ProcessSignal _ProcessSignal_sigxfsz$() {
  return ProcessSignal.sigxfsz;
}

ProcessSignal _ProcessSignal_sigvtalrm$() {
  return ProcessSignal.sigvtalrm;
}

ProcessSignal _ProcessSignal_sigprof$() {
  return ProcessSignal.sigprof;
}

ProcessSignal _ProcessSignal_sigwinch$() {
  return ProcessSignal.sigwinch;
}

ProcessSignal _ProcessSignal_sigpoll$() {
  return ProcessSignal.sigpoll;
}

ProcessSignal _ProcessSignal_sigsys$() {
  return ProcessSignal.sigsys;
}

int _ProcessSignal_signalNumber$(ProcessSignal target) {
  return target.signalNumber;
}

String _ProcessSignal_name$(ProcessSignal target) {
  return target.name;
}

Function _ProcessSignal_toString$(
  m.Scope scope,
  ProcessSignal target,
) =>
    target.toString;
Function _ProcessSignal_watch$(
  m.Scope scope,
  ProcessSignal target,
) =>
    target.watch;
String _SignalException_message$(SignalException target) {
  return target.message;
}

dynamic _SignalException_osError$(SignalException target) {
  return target.osError;
}

Function _SignalException_toString$(
  m.Scope scope,
  SignalException target,
) =>
    target.toString;
String _ProcessException_executable$(ProcessException target) {
  return target.executable;
}

List<String> _ProcessException_arguments$(ProcessException target) {
  return target.arguments;
}

String _ProcessException_message$(ProcessException target) {
  return target.message;
}

int _ProcessException_errorCode$(ProcessException target) {
  return target.errorCode;
}

Function _ProcessException_toString$(
  m.Scope scope,
  ProcessException target,
) =>
    target.toString;
Function _exit$(m.Scope scope) => exit;
Function _sleep$(m.Scope scope) => sleep;
int _SecureServerSocket_port$(SecureServerSocket target) {
  return target.port;
}

InternetAddress _SecureServerSocket_address$(SecureServerSocket target) {
  return target.address;
}

Function _SecureServerSocket_bind$(m.Scope scope) => SecureServerSocket.bind;
Function _SecureServerSocket_close$(
  m.Scope scope,
  SecureServerSocket target,
) =>
    target.close;
bool _RawSecureServerSocket_requestClientCertificate$(
    RawSecureServerSocket target) {
  return target.requestClientCertificate;
}

bool _RawSecureServerSocket_requireClientCertificate$(
    RawSecureServerSocket target) {
  return target.requireClientCertificate;
}

List<String>? _RawSecureServerSocket_supportedProtocols$(
    RawSecureServerSocket target) {
  return target.supportedProtocols;
}

int _RawSecureServerSocket_port$(RawSecureServerSocket target) {
  return target.port;
}

InternetAddress _RawSecureServerSocket_address$(RawSecureServerSocket target) {
  return target.address;
}

Function _RawSecureServerSocket_bind$(m.Scope scope) =>
    RawSecureServerSocket.bind;
Function _RawSecureServerSocket_close$(
  m.Scope scope,
  RawSecureServerSocket target,
) =>
    target.close;
X509Certificate? _SecureSocket_peerCertificate$(SecureSocket target) {
  return target.peerCertificate;
}

String? _SecureSocket_selectedProtocol$(SecureSocket target) {
  return target.selectedProtocol;
}

Function _SecureSocket_secureServer$(m.Scope scope) =>
    SecureSocket.secureServer;
X509Certificate? _RawSecureSocket_peerCertificate$(RawSecureSocket target) {
  return target.peerCertificate;
}

String? _RawSecureSocket_selectedProtocol$(RawSecureSocket target) {
  return target.selectedProtocol;
}

Function _RawSecureSocket_secureServer$(m.Scope scope) =>
    RawSecureSocket.secureServer;
Uint8List _X509Certificate_der$(X509Certificate target) {
  return target.der;
}

String _X509Certificate_pem$(X509Certificate target) {
  return target.pem;
}

Uint8List _X509Certificate_sha1$(X509Certificate target) {
  return target.sha1;
}

String _X509Certificate_subject$(X509Certificate target) {
  return target.subject;
}

String _X509Certificate_issuer$(X509Certificate target) {
  return target.issuer;
}

DateTime _X509Certificate_startValidity$(X509Certificate target) {
  return target.startValidity;
}

DateTime _X509Certificate_endValidity$(X509Certificate target) {
  return target.endValidity;
}

String _TlsException_type$(TlsException target) {
  return target.type;
}

String _TlsException_message$(TlsException target) {
  return target.message;
}

OSError? _TlsException_osError$(TlsException target) {
  return target.osError;
}

Function _TlsException_toString$(
  m.Scope scope,
  TlsException target,
) =>
    target.toString;
bool _SecurityContext_allowLegacyUnsafeRenegotiation$(SecurityContext target) {
  return target.allowLegacyUnsafeRenegotiation;
}

void _SecurityContext_allowLegacyUnsafeRenegotiation_set$(
  SecurityContext target,
  bool other,
) {
  target.allowLegacyUnsafeRenegotiation = other;
}

SecurityContext _SecurityContext_defaultContext$() {
  return SecurityContext.defaultContext;
}

Function _SecurityContext_usePrivateKey$(
  m.Scope scope,
  SecurityContext target,
) =>
    target.usePrivateKey;
Function _SecurityContext_usePrivateKeyBytes$(
  m.Scope scope,
  SecurityContext target,
) =>
    target.usePrivateKeyBytes;
Function _SecurityContext_setTrustedCertificates$(
  m.Scope scope,
  SecurityContext target,
) =>
    target.setTrustedCertificates;
Function _SecurityContext_setTrustedCertificatesBytes$(
  m.Scope scope,
  SecurityContext target,
) =>
    target.setTrustedCertificatesBytes;
Function _SecurityContext_useCertificateChain$(
  m.Scope scope,
  SecurityContext target,
) =>
    target.useCertificateChain;
Function _SecurityContext_useCertificateChainBytes$(
  m.Scope scope,
  SecurityContext target,
) =>
    target.useCertificateChainBytes;
Function _SecurityContext_setClientAuthorities$(
  m.Scope scope,
  SecurityContext target,
) =>
    target.setClientAuthorities;
Function _SecurityContext_setClientAuthoritiesBytes$(
  m.Scope scope,
  SecurityContext target,
) =>
    target.setClientAuthoritiesBytes;
Function _SecurityContext_setAlpnProtocols$(
  m.Scope scope,
  SecurityContext target,
) =>
    target.setAlpnProtocols;
InternetAddressType _InternetAddressType_IPv4$() {
  return InternetAddressType.IPv4;
}

InternetAddressType _InternetAddressType_IPv6$() {
  return InternetAddressType.IPv6;
}

InternetAddressType _InternetAddressType_unix$() {
  return InternetAddressType.unix;
}

InternetAddressType _InternetAddressType_any$() {
  return InternetAddressType.any;
}

String _InternetAddressType_name$(InternetAddressType target) {
  return target.name;
}

Function _InternetAddressType_toString$(
  m.Scope scope,
  InternetAddressType target,
) =>
    target.toString;
InternetAddress _InternetAddress_loopbackIPv4$() {
  return InternetAddress.loopbackIPv4;
}

InternetAddress _InternetAddress_loopbackIPv6$() {
  return InternetAddress.loopbackIPv6;
}

InternetAddress _InternetAddress_anyIPv4$() {
  return InternetAddress.anyIPv4;
}

InternetAddress _InternetAddress_anyIPv6$() {
  return InternetAddress.anyIPv6;
}

InternetAddressType _InternetAddress_type$(InternetAddress target) {
  return target.type;
}

String _InternetAddress_address$(InternetAddress target) {
  return target.address;
}

String _InternetAddress_host$(InternetAddress target) {
  return target.host;
}

Uint8List _InternetAddress_rawAddress$(InternetAddress target) {
  return target.rawAddress;
}

bool _InternetAddress_isLoopback$(InternetAddress target) {
  return target.isLoopback;
}

bool _InternetAddress_isLinkLocal$(InternetAddress target) {
  return target.isLinkLocal;
}

bool _InternetAddress_isMulticast$(InternetAddress target) {
  return target.isMulticast;
}

Function _InternetAddress_reverse$(
  m.Scope scope,
  InternetAddress target,
) =>
    target.reverse;
Function _InternetAddress_lookup$(m.Scope scope) => InternetAddress.lookup;
Function _InternetAddress_tryParse$(m.Scope scope) => InternetAddress.tryParse;
String _NetworkInterface_name$(NetworkInterface target) {
  return target.name;
}

int _NetworkInterface_index$(NetworkInterface target) {
  return target.index;
}

List<InternetAddress> _NetworkInterface_addresses$(NetworkInterface target) {
  return target.addresses;
}

Function _NetworkInterface_list$(m.Scope scope) => NetworkInterface.list;
int _RawServerSocket_port$(RawServerSocket target) {
  return target.port;
}

InternetAddress _RawServerSocket_address$(RawServerSocket target) {
  return target.address;
}

Function _RawServerSocket_bind$(m.Scope scope) => RawServerSocket.bind;
Function _RawServerSocket_close$(
  m.Scope scope,
  RawServerSocket target,
) =>
    target.close;
int _ServerSocket_port$(ServerSocket target) {
  return target.port;
}

InternetAddress _ServerSocket_address$(ServerSocket target) {
  return target.address;
}

Function _ServerSocket_bind$(m.Scope scope) => ServerSocket.bind;
Function _ServerSocket_close$(
  m.Scope scope,
  ServerSocket target,
) =>
    target.close;
SocketDirection _SocketDirection_receive$() {
  return SocketDirection.receive;
}

SocketDirection _SocketDirection_send$() {
  return SocketDirection.send;
}

SocketDirection _SocketDirection_both$() {
  return SocketDirection.both;
}

SocketOption _SocketOption_tcpNoDelay$() {
  return SocketOption.tcpNoDelay;
}

int _RawSocketOption_level$(RawSocketOption target) {
  return target.level;
}

int _RawSocketOption_option$(RawSocketOption target) {
  return target.option;
}

Uint8List _RawSocketOption_value$(RawSocketOption target) {
  return target.value;
}

int _RawSocketOption_levelSocket$() {
  return RawSocketOption.levelSocket;
}

int _RawSocketOption_levelIPv4$() {
  return RawSocketOption.levelIPv4;
}

int _RawSocketOption_IPv4MulticastInterface$() {
  return RawSocketOption.IPv4MulticastInterface;
}

int _RawSocketOption_levelIPv6$() {
  return RawSocketOption.levelIPv6;
}

int _RawSocketOption_IPv6MulticastInterface$() {
  return RawSocketOption.IPv6MulticastInterface;
}

int _RawSocketOption_levelTcp$() {
  return RawSocketOption.levelTcp;
}

int _RawSocketOption_levelUdp$() {
  return RawSocketOption.levelUdp;
}

RawSocketEvent _RawSocketEvent_read$() {
  return RawSocketEvent.read;
}

RawSocketEvent _RawSocketEvent_write$() {
  return RawSocketEvent.write;
}

RawSocketEvent _RawSocketEvent_readClosed$() {
  return RawSocketEvent.readClosed;
}

RawSocketEvent _RawSocketEvent_closed$() {
  return RawSocketEvent.closed;
}

Function _RawSocketEvent_toString$(
  m.Scope scope,
  RawSocketEvent target,
) =>
    target.toString;
Future<S> _ConnectionTask_socket$<S>(ConnectionTask<S> target) {
  return target.socket;
}

Function _ConnectionTask_cancel$<S>(
  m.Scope scope,
  ConnectionTask<S> target,
) =>
    target.cancel;
bool _RawSocket_readEventsEnabled$(RawSocket target) {
  return target.readEventsEnabled;
}

void _RawSocket_readEventsEnabled_set$(
  RawSocket target,
  bool other,
) {
  target.readEventsEnabled = other;
}

bool _RawSocket_writeEventsEnabled$(RawSocket target) {
  return target.writeEventsEnabled;
}

void _RawSocket_writeEventsEnabled_set$(
  RawSocket target,
  bool other,
) {
  target.writeEventsEnabled = other;
}

int _RawSocket_port$(RawSocket target) {
  return target.port;
}

int _RawSocket_remotePort$(RawSocket target) {
  return target.remotePort;
}

InternetAddress _RawSocket_address$(RawSocket target) {
  return target.address;
}

InternetAddress _RawSocket_remoteAddress$(RawSocket target) {
  return target.remoteAddress;
}

Function _RawSocket_connect$(m.Scope scope) => RawSocket.connect;
Function _RawSocket_startConnect$(m.Scope scope) => RawSocket.startConnect;
Function _RawSocket_available$(
  m.Scope scope,
  RawSocket target,
) =>
    target.available;
Function _RawSocket_read$(
  m.Scope scope,
  RawSocket target,
) =>
    target.read;
Function _RawSocket_readMessage$(
  m.Scope scope,
  RawSocket target,
) =>
    target.readMessage;
Function _RawSocket_write$(
  m.Scope scope,
  RawSocket target,
) =>
    target.write;
Function _RawSocket_sendMessage$(
  m.Scope scope,
  RawSocket target,
) =>
    target.sendMessage;
Function _RawSocket_close$(
  m.Scope scope,
  RawSocket target,
) =>
    target.close;
Function _RawSocket_shutdown$(
  m.Scope scope,
  RawSocket target,
) =>
    target.shutdown;
Function _RawSocket_setOption$(
  m.Scope scope,
  RawSocket target,
) =>
    target.setOption;
Function _RawSocket_getRawOption$(
  m.Scope scope,
  RawSocket target,
) =>
    target.getRawOption;
Function _RawSocket_setRawOption$(
  m.Scope scope,
  RawSocket target,
) =>
    target.setRawOption;
int _Socket_port$(Socket target) {
  return target.port;
}

int _Socket_remotePort$(Socket target) {
  return target.remotePort;
}

InternetAddress _Socket_address$(Socket target) {
  return target.address;
}

InternetAddress _Socket_remoteAddress$(Socket target) {
  return target.remoteAddress;
}

Future<dynamic> _Socket_done$(Socket target) {
  return target.done;
}

Function _Socket_connect$(m.Scope scope) => Socket.connect;
Function _Socket_startConnect$(m.Scope scope) => Socket.startConnect;
Function _Socket_destroy$(
  m.Scope scope,
  Socket target,
) =>
    target.destroy;
Function _Socket_setOption$(
  m.Scope scope,
  Socket target,
) =>
    target.setOption;
Function _Socket_getRawOption$(
  m.Scope scope,
  Socket target,
) =>
    target.getRawOption;
Function _Socket_setRawOption$(
  m.Scope scope,
  Socket target,
) =>
    target.setRawOption;
Function _Socket_close$(
  m.Scope scope,
  Socket target,
) =>
    target.close;
Uint8List _Datagram_data$(Datagram target) {
  return target.data;
}

void _Datagram_data_set$(
  Datagram target,
  Uint8List other,
) {
  target.data = other;
}

InternetAddress _Datagram_address$(Datagram target) {
  return target.address;
}

void _Datagram_address_set$(
  Datagram target,
  InternetAddress other,
) {
  target.address = other;
}

int _Datagram_port$(Datagram target) {
  return target.port;
}

void _Datagram_port_set$(
  Datagram target,
  int other,
) {
  target.port = other;
}

Function _ResourceHandle_toFile$(
  m.Scope scope,
  ResourceHandle target,
) =>
    target.toFile;
Function _ResourceHandle_toSocket$(
  m.Scope scope,
  ResourceHandle target,
) =>
    target.toSocket;
Function _ResourceHandle_toRawSocket$(
  m.Scope scope,
  ResourceHandle target,
) =>
    target.toRawSocket;
Function _ResourceHandle_toRawDatagramSocket$(
  m.Scope scope,
  ResourceHandle target,
) =>
    target.toRawDatagramSocket;
Function _ResourceHandle_toReadPipe$(
  m.Scope scope,
  ResourceHandle target,
) =>
    target.toReadPipe;
Function _ResourceHandle_toWritePipe$(
  m.Scope scope,
  ResourceHandle target,
) =>
    target.toWritePipe;
int _SocketControlMessage_level$(SocketControlMessage target) {
  return target.level;
}

int _SocketControlMessage_type$(SocketControlMessage target) {
  return target.type;
}

Uint8List _SocketControlMessage_data$(SocketControlMessage target) {
  return target.data;
}

Function _SocketControlMessage_extractHandles$(
  m.Scope scope,
  SocketControlMessage target,
) =>
    target.extractHandles;
Uint8List _SocketMessage_data$(SocketMessage target) {
  return target.data;
}

List<SocketControlMessage> _SocketMessage_controlMessages$(
    SocketMessage target) {
  return target.controlMessages;
}

bool _RawDatagramSocket_readEventsEnabled$(RawDatagramSocket target) {
  return target.readEventsEnabled;
}

void _RawDatagramSocket_readEventsEnabled_set$(
  RawDatagramSocket target,
  bool other,
) {
  target.readEventsEnabled = other;
}

bool _RawDatagramSocket_writeEventsEnabled$(RawDatagramSocket target) {
  return target.writeEventsEnabled;
}

void _RawDatagramSocket_writeEventsEnabled_set$(
  RawDatagramSocket target,
  bool other,
) {
  target.writeEventsEnabled = other;
}

bool _RawDatagramSocket_multicastLoopback$(RawDatagramSocket target) {
  return target.multicastLoopback;
}

void _RawDatagramSocket_multicastLoopback_set$(
  RawDatagramSocket target,
  bool other,
) {
  target.multicastLoopback = other;
}

int _RawDatagramSocket_multicastHops$(RawDatagramSocket target) {
  return target.multicastHops;
}

void _RawDatagramSocket_multicastHops_set$(
  RawDatagramSocket target,
  int other,
) {
  target.multicastHops = other;
}

NetworkInterface? _RawDatagramSocket_multicastInterface$(
    RawDatagramSocket target) {
  return target.multicastInterface;
}

void _RawDatagramSocket_multicastInterface_set$(
  RawDatagramSocket target,
  NetworkInterface? other,
) {
  target.multicastInterface = other;
}

bool _RawDatagramSocket_broadcastEnabled$(RawDatagramSocket target) {
  return target.broadcastEnabled;
}

void _RawDatagramSocket_broadcastEnabled_set$(
  RawDatagramSocket target,
  bool other,
) {
  target.broadcastEnabled = other;
}

int _RawDatagramSocket_port$(RawDatagramSocket target) {
  return target.port;
}

InternetAddress _RawDatagramSocket_address$(RawDatagramSocket target) {
  return target.address;
}

Function _RawDatagramSocket_bind$(m.Scope scope) => RawDatagramSocket.bind;
Function _RawDatagramSocket_close$(
  m.Scope scope,
  RawDatagramSocket target,
) =>
    target.close;
Function _RawDatagramSocket_send$(
  m.Scope scope,
  RawDatagramSocket target,
) =>
    target.send;
Function _RawDatagramSocket_receive$(
  m.Scope scope,
  RawDatagramSocket target,
) =>
    target.receive;
Function _RawDatagramSocket_joinMulticast$(
  m.Scope scope,
  RawDatagramSocket target,
) =>
    target.joinMulticast;
Function _RawDatagramSocket_leaveMulticast$(
  m.Scope scope,
  RawDatagramSocket target,
) =>
    target.leaveMulticast;
Function _RawDatagramSocket_getRawOption$(
  m.Scope scope,
  RawDatagramSocket target,
) =>
    target.getRawOption;
Function _RawDatagramSocket_setRawOption$(
  m.Scope scope,
  RawDatagramSocket target,
) =>
    target.setRawOption;
String _SocketException_message$(SocketException target) {
  return target.message;
}

OSError? _SocketException_osError$(SocketException target) {
  return target.osError;
}

InternetAddress? _SocketException_address$(SocketException target) {
  return target.address;
}

int? _SocketException_port$(SocketException target) {
  return target.port;
}

Function _SocketException_toString$(
  m.Scope scope,
  SocketException target,
) =>
    target.toString;
Stdin _stdin$() {
  return stdin;
}

Stdout _stdout$() {
  return stdout;
}

Stdout _stderr$() {
  return stderr;
}

bool _Stdin_echoMode$(Stdin target) {
  return target.echoMode;
}

void _Stdin_echoMode_set$(
  Stdin target,
  bool other,
) {
  target.echoMode = other;
}

bool _Stdin_echoNewlineMode$(Stdin target) {
  return target.echoNewlineMode;
}

void _Stdin_echoNewlineMode_set$(
  Stdin target,
  bool other,
) {
  target.echoNewlineMode = other;
}

bool _Stdin_lineMode$(Stdin target) {
  return target.lineMode;
}

void _Stdin_lineMode_set$(
  Stdin target,
  bool other,
) {
  target.lineMode = other;
}

bool _Stdin_supportsAnsiEscapes$(Stdin target) {
  return target.supportsAnsiEscapes;
}

bool _Stdin_hasTerminal$(Stdin target) {
  return target.hasTerminal;
}

Function _Stdin_readLineSync$(
  m.Scope scope,
  Stdin target,
) =>
    target.readLineSync;
Function _Stdin_readByteSync$(
  m.Scope scope,
  Stdin target,
) =>
    target.readByteSync;
bool _Stdout_hasTerminal$(Stdout target) {
  return target.hasTerminal;
}

int _Stdout_terminalColumns$(Stdout target) {
  return target.terminalColumns;
}

int _Stdout_terminalLines$(Stdout target) {
  return target.terminalLines;
}

bool _Stdout_supportsAnsiEscapes$(Stdout target) {
  return target.supportsAnsiEscapes;
}

IOSink _Stdout_nonBlocking$(Stdout target) {
  return target.nonBlocking;
}

String _StdoutException_message$(StdoutException target) {
  return target.message;
}

OSError? _StdoutException_osError$(StdoutException target) {
  return target.osError;
}

Function _StdoutException_toString$(
  m.Scope scope,
  StdoutException target,
) =>
    target.toString;
String _StdinException_message$(StdinException target) {
  return target.message;
}

OSError? _StdinException_osError$(StdinException target) {
  return target.osError;
}

Function _StdinException_toString$(
  m.Scope scope,
  StdinException target,
) =>
    target.toString;
StdioType _StdioType_terminal$() {
  return StdioType.terminal;
}

StdioType _StdioType_pipe$() {
  return StdioType.pipe;
}

StdioType _StdioType_file$() {
  return StdioType.file;
}

StdioType _StdioType_other$() {
  return StdioType.other;
}

String _StdioType_name$(StdioType target) {
  return target.name;
}

Function _StdioType_toString$(
  m.Scope scope,
  StdioType target,
) =>
    target.toString;
Function _stdioType$(m.Scope scope) => stdioType;
SystemEncoding _systemEncoding$() {
  return systemEncoding;
}

String _SystemEncoding_name$(SystemEncoding target) {
  return target.name;
}

Converter<String, List<int>> _SystemEncoding_encoder$(SystemEncoding target) {
  return target.encoder;
}

Converter<List<int>, String> _SystemEncoding_decoder$(SystemEncoding target) {
  return target.decoder;
}

Function _SystemEncoding_encode$(
  m.Scope scope,
  SystemEncoding target,
) =>
    target.encode;
Function _SystemEncoding_decode$(
  m.Scope scope,
  SystemEncoding target,
) =>
    target.decode;
int _RawSynchronousSocket_port$(RawSynchronousSocket target) {
  return target.port;
}

int _RawSynchronousSocket_remotePort$(RawSynchronousSocket target) {
  return target.remotePort;
}

InternetAddress _RawSynchronousSocket_address$(RawSynchronousSocket target) {
  return target.address;
}

InternetAddress _RawSynchronousSocket_remoteAddress$(
    RawSynchronousSocket target) {
  return target.remoteAddress;
}

Function _RawSynchronousSocket_connectSync$(m.Scope scope) =>
    RawSynchronousSocket.connectSync;
Function _RawSynchronousSocket_available$(
  m.Scope scope,
  RawSynchronousSocket target,
) =>
    target.available;
Function _RawSynchronousSocket_closeSync$(
  m.Scope scope,
  RawSynchronousSocket target,
) =>
    target.closeSync;
Function _RawSynchronousSocket_readIntoSync$(
  m.Scope scope,
  RawSynchronousSocket target,
) =>
    target.readIntoSync;
Function _RawSynchronousSocket_readSync$(
  m.Scope scope,
  RawSynchronousSocket target,
) =>
    target.readSync;
Function _RawSynchronousSocket_shutdown$(
  m.Scope scope,
  RawSynchronousSocket target,
) =>
    target.shutdown;
Function _RawSynchronousSocket_writeFromSync$(
  m.Scope scope,
  RawSynchronousSocket target,
) =>
    target.writeFromSync;
