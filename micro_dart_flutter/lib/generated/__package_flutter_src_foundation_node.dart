// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/foundation/node.dart';
import 'package:meta/meta.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/foundation/node.dart',
  {},
  {},
  {
    'AbstractNode': m.ClassMirror(
      'AbstractNode',
      {
        'depth': _AbstractNode_depth$,
        'owner': _AbstractNode_owner$,
        'attached': _AbstractNode_attached$,
        'parent': _AbstractNode_parent$,
        'redepthChild': _AbstractNode_redepthChild$,
        'redepthChildren': _AbstractNode_redepthChildren$,
        'attach': _AbstractNode_attach$,
        'detach': _AbstractNode_detach$,
        'adoptChild': _AbstractNode_adoptChild$,
        'dropChild': _AbstractNode_dropChild$,
      },
      {},
    )
  },
);
int _AbstractNode_depth$(AbstractNode target) {
  return target.depth;
}

Object? _AbstractNode_owner$(AbstractNode target) {
  return target.owner;
}

bool _AbstractNode_attached$(AbstractNode target) {
  return target.attached;
}

AbstractNode? _AbstractNode_parent$(AbstractNode target) {
  return target.parent;
}

Function _AbstractNode_redepthChild$(
  m.Scope scope,
  AbstractNode target,
) =>
    target.redepthChild;
Function _AbstractNode_redepthChildren$(
  m.Scope scope,
  AbstractNode target,
) =>
    target.redepthChildren;
Function _AbstractNode_attach$(
  m.Scope scope,
  AbstractNode target,
) =>
    target.attach;
Function _AbstractNode_detach$(
  m.Scope scope,
  AbstractNode target,
) =>
    target.detach;
Function _AbstractNode_adoptChild$(
  m.Scope scope,
  AbstractNode target,
) =>
    target.adoptChild;
Function _AbstractNode_dropChild$(
  m.Scope scope,
  AbstractNode target,
) =>
    target.dropChild;
