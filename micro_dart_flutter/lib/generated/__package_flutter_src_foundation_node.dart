// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/foundation/node.dart';
import 'package:meta/meta.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/foundation/node.dart',
  {'AbstractNode.': _AbstractNode__$},
  {},
  {
    'AbstractNode': m.ClassMirror(
      'AbstractNode',
      {
        '#as': AbstractNode_as$,
        '#is': AbstractNode_is$,
        'depth': _AbstractNode_depth$,
        'owner': _AbstractNode_owner$,
        'attached': _AbstractNode_attached$,
        'parent': _AbstractNode_parent$,
        'redepthChild': _AbstractNode_redepthChild$,
        'redepthChildren': _AbstractNode_redepthChildren$,
        'attach': _AbstractNode_attach$,
        'detach': _AbstractNode_detach$,
        'adoptChild': _AbstractNode_adoptChild$,
        'dropChild': _AbstractNode_dropChild$,
      },
      {},
    )
  },
);
Function AbstractNode_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as AbstractNode;
Function AbstractNode_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is AbstractNode;
Function _AbstractNode_depth$(
  m.Scope scope$,
  AbstractNode target$,
) =>
    () {
      return target$.depth;
    };
Function _AbstractNode_owner$(
  m.Scope scope$,
  AbstractNode target$,
) =>
    () {
      return target$.owner;
    };
Function _AbstractNode_attached$(
  m.Scope scope$,
  AbstractNode target$,
) =>
    () {
      return target$.attached;
    };
Function _AbstractNode_parent$(
  m.Scope scope$,
  AbstractNode target$,
) =>
    () {
      return target$.parent;
    };
Function _AbstractNode__$(m.Scope scope$) => () {
      return AbstractNode();
    };
Function _AbstractNode_redepthChild$(
  m.Scope scope$,
  AbstractNode target$,
) =>
    target$.redepthChild;
Function _AbstractNode_redepthChildren$(
  m.Scope scope$,
  AbstractNode target$,
) =>
    target$.redepthChildren;
Function _AbstractNode_attach$(
  m.Scope scope$,
  AbstractNode target$,
) =>
    target$.attach;
Function _AbstractNode_detach$(
  m.Scope scope$,
  AbstractNode target$,
) =>
    target$.detach;
Function _AbstractNode_adoptChild$(
  m.Scope scope$,
  AbstractNode target$,
) =>
    target$.adoptChild;
Function _AbstractNode_dropChild$(
  m.Scope scope$,
  AbstractNode target$,
) =>
    target$.dropChild;
