// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/keyboard_maps.g.dart';
import 'package:flutter/src/services/keyboard_key.g.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/keyboard_maps.g.dart',
  {
    'kAndroidToLogicalKey': _kAndroidToLogicalKey$,
    'kAndroidToPhysicalKey': _kAndroidToPhysicalKey$,
    'kAndroidNumPadMap': _kAndroidNumPadMap$,
    'kFuchsiaToLogicalKey': _kFuchsiaToLogicalKey$,
    'kFuchsiaToPhysicalKey': _kFuchsiaToPhysicalKey$,
    'kMacOsToPhysicalKey': _kMacOsToPhysicalKey$,
    'kMacOsNumPadMap': _kMacOsNumPadMap$,
    'kMacOsFunctionKeyMap': _kMacOsFunctionKeyMap$,
    'kMacOsToLogicalKey': _kMacOsToLogicalKey$,
    'kIosToPhysicalKey': _kIosToPhysicalKey$,
    'kIosSpecialLogicalMap': _kIosSpecialLogicalMap$,
    'kIosNumPadMap': _kIosNumPadMap$,
    'kIosToLogicalKey': _kIosToLogicalKey$,
    'kGlfwToLogicalKey': _kGlfwToLogicalKey$,
    'kGlfwNumpadMap': _kGlfwNumpadMap$,
    'kGtkToLogicalKey': _kGtkToLogicalKey$,
    'kGtkNumpadMap': _kGtkNumpadMap$,
    'kLinuxToPhysicalKey': _kLinuxToPhysicalKey$,
    'kWebToLogicalKey': _kWebToLogicalKey$,
    'kWebToPhysicalKey': _kWebToPhysicalKey$,
    'kWebNumPadMap': _kWebNumPadMap$,
    'kWebLocationMap': _kWebLocationMap$,
    'kWindowsToLogicalKey': _kWindowsToLogicalKey$,
    'kWindowsToPhysicalKey': _kWindowsToPhysicalKey$,
    'kWindowsNumPadMap': _kWindowsNumPadMap$,
  },
  {},
  {},
);
Map<int, LogicalKeyboardKey> _kAndroidToLogicalKey$() {
  return kAndroidToLogicalKey;
}

Map<int, PhysicalKeyboardKey> _kAndroidToPhysicalKey$() {
  return kAndroidToPhysicalKey;
}

Map<int, LogicalKeyboardKey> _kAndroidNumPadMap$() {
  return kAndroidNumPadMap;
}

Map<int, LogicalKeyboardKey> _kFuchsiaToLogicalKey$() {
  return kFuchsiaToLogicalKey;
}

Map<int, PhysicalKeyboardKey> _kFuchsiaToPhysicalKey$() {
  return kFuchsiaToPhysicalKey;
}

Map<int, PhysicalKeyboardKey> _kMacOsToPhysicalKey$() {
  return kMacOsToPhysicalKey;
}

Map<int, LogicalKeyboardKey> _kMacOsNumPadMap$() {
  return kMacOsNumPadMap;
}

Map<int, LogicalKeyboardKey> _kMacOsFunctionKeyMap$() {
  return kMacOsFunctionKeyMap;
}

Map<int, LogicalKeyboardKey> _kMacOsToLogicalKey$() {
  return kMacOsToLogicalKey;
}

Map<int, PhysicalKeyboardKey> _kIosToPhysicalKey$() {
  return kIosToPhysicalKey;
}

Map<String, LogicalKeyboardKey> _kIosSpecialLogicalMap$() {
  return kIosSpecialLogicalMap;
}

Map<int, LogicalKeyboardKey> _kIosNumPadMap$() {
  return kIosNumPadMap;
}

Map<int, LogicalKeyboardKey> _kIosToLogicalKey$() {
  return kIosToLogicalKey;
}

Map<int, LogicalKeyboardKey> _kGlfwToLogicalKey$() {
  return kGlfwToLogicalKey;
}

Map<int, LogicalKeyboardKey> _kGlfwNumpadMap$() {
  return kGlfwNumpadMap;
}

Map<int, LogicalKeyboardKey> _kGtkToLogicalKey$() {
  return kGtkToLogicalKey;
}

Map<int, LogicalKeyboardKey> _kGtkNumpadMap$() {
  return kGtkNumpadMap;
}

Map<int, PhysicalKeyboardKey> _kLinuxToPhysicalKey$() {
  return kLinuxToPhysicalKey;
}

Map<String, LogicalKeyboardKey> _kWebToLogicalKey$() {
  return kWebToLogicalKey;
}

Map<String, PhysicalKeyboardKey> _kWebToPhysicalKey$() {
  return kWebToPhysicalKey;
}

Map<String, LogicalKeyboardKey> _kWebNumPadMap$() {
  return kWebNumPadMap;
}

Map<String, List<LogicalKeyboardKey?>> _kWebLocationMap$() {
  return kWebLocationMap;
}

Map<int, LogicalKeyboardKey> _kWindowsToLogicalKey$() {
  return kWindowsToLogicalKey;
}

Map<int, PhysicalKeyboardKey> _kWindowsToPhysicalKey$() {
  return kWindowsToPhysicalKey;
}

Map<int, LogicalKeyboardKey> _kWindowsNumPadMap$() {
  return kWindowsNumPadMap;
}
