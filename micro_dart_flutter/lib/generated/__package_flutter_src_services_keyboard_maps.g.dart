// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/services/keyboard_maps.g.dart';
import 'package:flutter/src/services/keyboard_key.g.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/services/keyboard_maps.g.dart',
  {
    'kAndroidToLogicalKey': _kAndroidToLogicalKey$,
    'kAndroidToPhysicalKey': _kAndroidToPhysicalKey$,
    'kAndroidNumPadMap': _kAndroidNumPadMap$,
    'kFuchsiaToLogicalKey': _kFuchsiaToLogicalKey$,
    'kFuchsiaToPhysicalKey': _kFuchsiaToPhysicalKey$,
    'kMacOsToPhysicalKey': _kMacOsToPhysicalKey$,
    'kMacOsNumPadMap': _kMacOsNumPadMap$,
    'kMacOsFunctionKeyMap': _kMacOsFunctionKeyMap$,
    'kMacOsToLogicalKey': _kMacOsToLogicalKey$,
    'kIosToPhysicalKey': _kIosToPhysicalKey$,
    'kIosSpecialLogicalMap': _kIosSpecialLogicalMap$,
    'kIosNumPadMap': _kIosNumPadMap$,
    'kIosToLogicalKey': _kIosToLogicalKey$,
    'kGlfwToLogicalKey': _kGlfwToLogicalKey$,
    'kGlfwNumpadMap': _kGlfwNumpadMap$,
    'kGtkToLogicalKey': _kGtkToLogicalKey$,
    'kGtkNumpadMap': _kGtkNumpadMap$,
    'kLinuxToPhysicalKey': _kLinuxToPhysicalKey$,
    'kWebToLogicalKey': _kWebToLogicalKey$,
    'kWebToPhysicalKey': _kWebToPhysicalKey$,
    'kWebNumPadMap': _kWebNumPadMap$,
    'kWebLocationMap': _kWebLocationMap$,
    'kWindowsToLogicalKey': _kWindowsToLogicalKey$,
    'kWindowsToPhysicalKey': _kWindowsToPhysicalKey$,
    'kWindowsNumPadMap': _kWindowsNumPadMap$,
  },
  {},
  {},
);
Function _kAndroidToLogicalKey$(m.Scope scope$) => () => kAndroidToLogicalKey;
Function _kAndroidToPhysicalKey$(m.Scope scope$) => () => kAndroidToPhysicalKey;
Function _kAndroidNumPadMap$(m.Scope scope$) => () => kAndroidNumPadMap;
Function _kFuchsiaToLogicalKey$(m.Scope scope$) => () => kFuchsiaToLogicalKey;
Function _kFuchsiaToPhysicalKey$(m.Scope scope$) => () => kFuchsiaToPhysicalKey;
Function _kMacOsToPhysicalKey$(m.Scope scope$) => () => kMacOsToPhysicalKey;
Function _kMacOsNumPadMap$(m.Scope scope$) => () => kMacOsNumPadMap;
Function _kMacOsFunctionKeyMap$(m.Scope scope$) => () => kMacOsFunctionKeyMap;
Function _kMacOsToLogicalKey$(m.Scope scope$) => () => kMacOsToLogicalKey;
Function _kIosToPhysicalKey$(m.Scope scope$) => () => kIosToPhysicalKey;
Function _kIosSpecialLogicalMap$(m.Scope scope$) => () => kIosSpecialLogicalMap;
Function _kIosNumPadMap$(m.Scope scope$) => () => kIosNumPadMap;
Function _kIosToLogicalKey$(m.Scope scope$) => () => kIosToLogicalKey;
Function _kGlfwToLogicalKey$(m.Scope scope$) => () => kGlfwToLogicalKey;
Function _kGlfwNumpadMap$(m.Scope scope$) => () => kGlfwNumpadMap;
Function _kGtkToLogicalKey$(m.Scope scope$) => () => kGtkToLogicalKey;
Function _kGtkNumpadMap$(m.Scope scope$) => () => kGtkNumpadMap;
Function _kLinuxToPhysicalKey$(m.Scope scope$) => () => kLinuxToPhysicalKey;
Function _kWebToLogicalKey$(m.Scope scope$) => () => kWebToLogicalKey;
Function _kWebToPhysicalKey$(m.Scope scope$) => () => kWebToPhysicalKey;
Function _kWebNumPadMap$(m.Scope scope$) => () => kWebNumPadMap;
Function _kWebLocationMap$(m.Scope scope$) => () => kWebLocationMap;
Function _kWindowsToLogicalKey$(m.Scope scope$) => () => kWindowsToLogicalKey;
Function _kWindowsToPhysicalKey$(m.Scope scope$) => () => kWindowsToPhysicalKey;
Function _kWindowsNumPadMap$(m.Scope scope$) => () => kWindowsNumPadMap;
