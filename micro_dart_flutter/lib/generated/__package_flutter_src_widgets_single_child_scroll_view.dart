// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/single_child_scroll_view.dart';
import 'dart:math';
import 'package:flutter/gestures.dart' show DragStartBehavior;
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/focus_scope.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/notification_listener.dart';
import 'package:flutter/src/widgets/primary_scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/scroll_view.dart';
import 'package:flutter/src/widgets/scrollable.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/single_child_scroll_view.dart',
  {},
  {},
  {
    'SingleChildScrollView': m.ClassMirror(
      'SingleChildScrollView',
      {
        '#as': SingleChildScrollView_as$,
        '#is': SingleChildScrollView_is$,
        'scrollDirection': _SingleChildScrollView_scrollDirection$,
        'reverse': _SingleChildScrollView_reverse$,
        'padding': _SingleChildScrollView_padding$,
        'controller': _SingleChildScrollView_controller$,
        'primary': _SingleChildScrollView_primary$,
        'physics': _SingleChildScrollView_physics$,
        'child': _SingleChildScrollView_child$,
        'dragStartBehavior': _SingleChildScrollView_dragStartBehavior$,
        'clipBehavior': _SingleChildScrollView_clipBehavior$,
        'restorationId': _SingleChildScrollView_restorationId$,
        'keyboardDismissBehavior':
            _SingleChildScrollView_keyboardDismissBehavior$,
        'build': _SingleChildScrollView_build$,
      },
      {},
    )
  },
);
Function SingleChildScrollView_as$(
  m.Scope scope,
  dynamic target,
) =>
    () => target as SingleChildScrollView;
Function SingleChildScrollView_is$(
  m.Scope scope,
  dynamic target,
) =>
    () => target is SingleChildScrollView;
Axis _SingleChildScrollView_scrollDirection$(SingleChildScrollView target) {
  return target.scrollDirection;
}

bool _SingleChildScrollView_reverse$(SingleChildScrollView target) {
  return target.reverse;
}

EdgeInsetsGeometry? _SingleChildScrollView_padding$(
    SingleChildScrollView target) {
  return target.padding;
}

ScrollController? _SingleChildScrollView_controller$(
    SingleChildScrollView target) {
  return target.controller;
}

bool? _SingleChildScrollView_primary$(SingleChildScrollView target) {
  return target.primary;
}

ScrollPhysics? _SingleChildScrollView_physics$(SingleChildScrollView target) {
  return target.physics;
}

Widget? _SingleChildScrollView_child$(SingleChildScrollView target) {
  return target.child;
}

DragStartBehavior _SingleChildScrollView_dragStartBehavior$(
    SingleChildScrollView target) {
  return target.dragStartBehavior;
}

Clip _SingleChildScrollView_clipBehavior$(SingleChildScrollView target) {
  return target.clipBehavior;
}

String? _SingleChildScrollView_restorationId$(SingleChildScrollView target) {
  return target.restorationId;
}

ScrollViewKeyboardDismissBehavior
    _SingleChildScrollView_keyboardDismissBehavior$(
        SingleChildScrollView target) {
  return target.keyboardDismissBehavior;
}

Function _SingleChildScrollView_build$(
  m.Scope scope,
  SingleChildScrollView target,
) =>
    target.build;
