// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'package:flutter/src/widgets/single_child_scroll_view.dart';
import 'dart:math';
import 'package:flutter/gestures.dart' show DragStartBehavior;
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/basic.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/focus_scope.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/notification_listener.dart';
import 'package:flutter/src/widgets/primary_scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/scroll_view.dart';
import 'package:flutter/src/widgets/scrollable.dart';

const libraryMirror = m.LibraryMirror(
  'package:flutter/src/widgets/single_child_scroll_view.dart',
  {'SingleChildScrollView.': _SingleChildScrollView__$},
  {},
  {
    'SingleChildScrollView': m.ClassMirror(
      'SingleChildScrollView',
      {
        '#as': SingleChildScrollView_as$,
        '#is': SingleChildScrollView_is$,
        'scrollDirection': _SingleChildScrollView_scrollDirection$,
        'reverse': _SingleChildScrollView_reverse$,
        'padding': _SingleChildScrollView_padding$,
        'controller': _SingleChildScrollView_controller$,
        'primary': _SingleChildScrollView_primary$,
        'physics': _SingleChildScrollView_physics$,
        'child': _SingleChildScrollView_child$,
        'dragStartBehavior': _SingleChildScrollView_dragStartBehavior$,
        'clipBehavior': _SingleChildScrollView_clipBehavior$,
        'restorationId': _SingleChildScrollView_restorationId$,
        'keyboardDismissBehavior':
            _SingleChildScrollView_keyboardDismissBehavior$,
        'build': _SingleChildScrollView_build$,
      },
      {},
    )
  },
);
Function SingleChildScrollView_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SingleChildScrollView;
Function SingleChildScrollView_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SingleChildScrollView;
Function _SingleChildScrollView_scrollDirection$(
  m.Scope scope$,
  SingleChildScrollView target$,
) =>
    () {
      return target$.scrollDirection;
    };
Function _SingleChildScrollView_reverse$(
  m.Scope scope$,
  SingleChildScrollView target$,
) =>
    () {
      return target$.reverse;
    };
Function _SingleChildScrollView_padding$(
  m.Scope scope$,
  SingleChildScrollView target$,
) =>
    () {
      return target$.padding;
    };
Function _SingleChildScrollView_controller$(
  m.Scope scope$,
  SingleChildScrollView target$,
) =>
    () {
      return target$.controller;
    };
Function _SingleChildScrollView_primary$(
  m.Scope scope$,
  SingleChildScrollView target$,
) =>
    () {
      return target$.primary;
    };
Function _SingleChildScrollView_physics$(
  m.Scope scope$,
  SingleChildScrollView target$,
) =>
    () {
      return target$.physics;
    };
Function _SingleChildScrollView_child$(
  m.Scope scope$,
  SingleChildScrollView target$,
) =>
    () {
      return target$.child;
    };
Function _SingleChildScrollView_dragStartBehavior$(
  m.Scope scope$,
  SingleChildScrollView target$,
) =>
    () {
      return target$.dragStartBehavior;
    };
Function _SingleChildScrollView_clipBehavior$(
  m.Scope scope$,
  SingleChildScrollView target$,
) =>
    () {
      return target$.clipBehavior;
    };
Function _SingleChildScrollView_restorationId$(
  m.Scope scope$,
  SingleChildScrollView target$,
) =>
    () {
      return target$.restorationId;
    };
Function _SingleChildScrollView_keyboardDismissBehavior$(
  m.Scope scope$,
  SingleChildScrollView target$,
) =>
    () {
      return target$.keyboardDismissBehavior;
    };
Function _SingleChildScrollView__$(m.Scope scope$) => ({
      Key? key,
      Axis? scrollDirection,
      bool? reverse,
      EdgeInsetsGeometry? padding,
      bool? primary,
      ScrollPhysics? physics,
      ScrollController? controller,
      Widget? child,
      DragStartBehavior? dragStartBehavior,
      Clip? clipBehavior,
      String? restorationId,
      ScrollViewKeyboardDismissBehavior? keyboardDismissBehavior,
    }) {
      return SingleChildScrollView(
        child: child,
        clipBehavior: clipBehavior ?? Clip.hardEdge,
        controller: controller,
        dragStartBehavior: dragStartBehavior ?? DragStartBehavior.start,
        key: key,
        keyboardDismissBehavior:
            keyboardDismissBehavior ?? ScrollViewKeyboardDismissBehavior.manual,
        padding: padding,
        physics: physics,
        primary: primary,
        restorationId: restorationId,
        reverse: reverse ?? false,
        scrollDirection: scrollDirection ?? Axis.vertical,
      );
    };
Function _SingleChildScrollView_build$(
  m.Scope scope$,
  SingleChildScrollView target$,
) =>
    target$.build;
