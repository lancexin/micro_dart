main = main::main;
library from "test:///main.dart" as main {

  abstract class Interface extends dart.core::Object {
    synthetic constructor •() → main::Interface
      : super dart.core::Object::•()
      ;
    get getter() → dart.core::int
      return 41;
  }
  abstract class Mixin extends main::Interface /*isMixinDeclaration*/  {
    get getter() → dart.core::int {
      dart.core::print("getter1");
      return super.{main::Interface::getter};
    }
  }
  abstract class Mixin2 extends main::Interface /*isMixinDeclaration*/  {
    get getter() → dart.core::int {
      dart.core::print("getter2");
      return super.{main::Interface::getter};
    }
  }
  class Super extends main::Interface {
    synthetic constructor •() → main::Super
      : super main::Interface::•()
      ;
    get getter() → dart.core::int
      return 42;
  }
  abstract class _Class&Super&Mixin = main::Super with main::Mixin /*isAnonymousMixin*/  {
    synthetic constructor •() → main::_Class&Super&Mixin
      : super main::Super::•()
      ;
    mixin-super-stub get getter() → dart.core::int
      return super.{main::Mixin::getter};
  }
  abstract class _Class&Super&Mixin&Mixin2 = main::_Class&Super&Mixin with main::Mixin2 /*isAnonymousMixin*/  {
    synthetic constructor •() → main::_Class&Super&Mixin&Mixin2
      : super main::_Class&Super&Mixin::•()
      ;
    mixin-super-stub get getter() → dart.core::int
      return super.{main::Mixin2::getter};
  }
  class Class extends main::_Class&Super&Mixin&Mixin2 {
    synthetic constructor •() → main::Class
      : super main::_Class&Super&Mixin&Mixin2::•()
      ;
  }
  static method main() → dart.core::int {
    dart.core::int a = new main::Class::•().{main::_Class&Super&Mixin&Mixin2::getter}{dart.core::int};
    dart.core::print(a);
    return a;
  }
}
