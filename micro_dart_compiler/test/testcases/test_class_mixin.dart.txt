main = main::main;
library from "test:///main.dart" as main {

  class A extends dart.core::Object {
    field dart.core::int a;
    field dart.core::int b = 1;
    constructor •(dart.core::int a) → main::A
      : main::A::a = a, super dart.core::Object::•()
      ;
    constructor c1(dart.core::int a) → main::A
      : main::A::a = a, super dart.core::Object::•()
      ;
  }
  abstract class _B&A&MixinB = main::A with main::MixinB /*isAnonymousMixin*/  {
    synthetic constructor •(dart.core::int a) → main::_B&A&MixinB
      : super main::A::•(a)
      ;
    synthetic constructor c1(dart.core::int a) → main::_B&A&MixinB
      : super main::A::c1(a)
      ;
    mixin-super-stub method testA() → void
      return super.{main::MixinB::testA}();
  }
  class B extends main::_B&A&MixinB {
    field dart.core::int c;
    field dart.core::int d = 2;
    constructor c1(dart.core::int a, dart.core::int c) → main::B
      : main::B::c = c, super main::_B&A&MixinB::c1(a)
      ;
    method fn1(dart.core::int n) → dart.core::int {
      return this.{main::A::a}{dart.core::int}.{dart.core::num::+}(this.{main::A::b}{dart.core::int}){(dart.core::num) → dart.core::int}.{dart.core::num::+}(this.{main::B::c}{dart.core::int}){(dart.core::num) → dart.core::int}.{dart.core::num::+}(n){(dart.core::num) → dart.core::int};
    }
  }
  abstract class MixinB extends main::A /*isMixinDeclaration*/  {
    method testA() → void {
      dart.core::print("testA");
    }
  }
  static method main() → dart.core::int {
    main::B v1 = new main::B::c1(3, 2);
    v1.{main::_B&A&MixinB::testA}(){() → void};
    dart.core::int r = v1.{main::B::fn1}(4){(dart.core::int) → dart.core::int};
    dart.core::print(r);
    return r;
  }
}
