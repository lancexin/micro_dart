main = main::main;
library from "test:///main.dart" as main {

  class A extends dart.core::Object {
    field dart.core::int a;
    field dart.core::int b = 1;
    constructor •(dart.core::int a) → main::A
      : main::A::a = a, super dart.core::Object::•()
      ;
    constructor c1(dart.core::int a) → main::A
      : main::A::a = a, super dart.core::Object::•()
      ;
  }
  class B extends main::A {
    field dart.core::int c;
    field dart.core::int d = 2;
    constructor c1(dart.core::int a, dart.core::int c) → main::B
      : main::B::c = c, super main::A::c1(a)
      ;
    method fn1(dart.core::int n) → dart.core::int {
      return this.{main::A::a}{dart.core::int}.{dart.core::num::+}(this.{main::A::b}{dart.core::int}){(dart.core::num) → dart.core::int}.{dart.core::num::+}(this.{main::B::c}{dart.core::int}){(dart.core::num) → dart.core::int}.{dart.core::num::+}(n){(dart.core::num) → dart.core::int};
    }
  }
  extension Bext on main::A {
    method testA = main::Bext|testA;
    tearoff testA = main::Bext|get#testA;
  }
  static extension-member method Bext|testA(lowered final main::A #this) → void {
    dart.core::print("testA");
  }
  static extension-member method Bext|get#testA(lowered final main::A #this) → () → void
    return () → void => main::Bext|testA(#this);
  static method main() → dart.core::int {
    main::B v1 = new main::B::c1(3, 2);
    main::Bext|testA(v1);
    dart.core::int r = v1.{main::B::fn1}(4){(dart.core::int) → dart.core::int};
    dart.core::print(r);
    return r;
  }
}
