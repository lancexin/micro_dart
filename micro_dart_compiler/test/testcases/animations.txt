main = <No Member>;
library from "package:animations/main.dart" as main {

  import "package:flutter/material.dart";
  import "package:animations/src/basics/basics.dart";
  import "package:animations/src/misc/misc.dart";

  class Demo extends dart.core::Object /*hasConstConstructor*/  {
    final field dart.core::String name;
    final field dart.core::String route;
    final field (#lib1::BuildContext) → #lib1::Widget builder;
    const constructor •({required dart.core::String name = null, required dart.core::String route = null, required (#lib1::BuildContext) → #lib1::Widget builder = null}) → main::Demo
      : main::Demo::name = name, main::Demo::route = route, main::Demo::builder = builder, super dart.core::Object::•()
      ;
  }
  class AnimationSamples extends #lib1::StatelessWidget /*hasConstConstructor*/  {
    const constructor •({#lib2::Key? key = null}) → main::AnimationSamples
      : super #lib1::StatelessWidget::•(key: key)
      ;
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib3::MaterialApp::•(title: "Animation Samples", theme: #lib4::ThemeData::•(colorSchemeSeed: #lib5::Colors::deepPurple, useMaterial3: true), routes: main::routes);
    }
  }
  class HomePage extends #lib1::StatelessWidget /*hasConstConstructor*/  {
    const constructor •({#lib2::Key? key = null}) → main::HomePage
      : super #lib1::StatelessWidget::•(key: key)
      ;
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      final #lib6::TextStyle? headerStyle = #lib7::Theme::of(context).{#lib4::ThemeData::textTheme}{#lib8::TextTheme}.{#lib8::TextTheme::titleLarge}{#lib6::TextStyle?};
      return new #lib9::Scaffold::•(appBar: new #lib10::AppBar::•(title: const #lib11::Text::•("Animation Samples")), body: new #lib12::ListView::•(children: block {
        final dart.core::List<#lib1::Widget> #t1 = <#lib1::Widget>[new #lib13::ListTile::•(title: new #lib11::Text::•("Basics", style: headerStyle))];
        #t1.{dart.core::List::addAll}{Invariant}(main::basicDemos.{dart.core::Iterable::map}<#lib1::Widget>((main::Demo d) → main::DemoTile => new main::DemoTile::•(demo: d)){((main::Demo) → #lib1::Widget) → dart.core::Iterable<#lib1::Widget>}){(dart.core::Iterable<#lib1::Widget>) → void};
        #t1.{dart.core::List::add}{Invariant}(new #lib13::ListTile::•(title: new #lib11::Text::•("Misc", style: headerStyle))){(#lib1::Widget) → void};
        #t1.{dart.core::List::addAll}{Invariant}(main::miscDemos.{dart.core::Iterable::map}<#lib1::Widget>((main::Demo d) → main::DemoTile => new main::DemoTile::•(demo: d)){((main::Demo) → #lib1::Widget) → dart.core::Iterable<#lib1::Widget>}){(dart.core::Iterable<#lib1::Widget>) → void};
      } =>#t1));
    }
  }
  class DemoTile extends #lib1::StatelessWidget /*hasConstConstructor*/  {
    final field main::Demo demo;
    const constructor •({required main::Demo demo = null, #lib2::Key? key = null}) → main::DemoTile
      : main::DemoTile::demo = demo, super #lib1::StatelessWidget::•(key: key)
      ;
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib13::ListTile::•(title: new #lib11::Text::•(this.{main::DemoTile::demo}{main::Demo}.{main::Demo::name}{dart.core::String}), onTap: () → void {
        #lib14::Navigator::of(context).{#lib14::NavigatorState::pushNamed}<dart.core::Object?>(this.{main::DemoTile::demo}{main::Demo}.{main::Demo::route}{dart.core::String}){(dart.core::String, {arguments: dart.core::Object?}) → dart.async::Future<dart.core::Object?>};
      });
    }
  }
  static final field dart.core::Map<dart.core::String, (dynamic) → #lib1::Widget> routes = <dart.core::String, (dynamic) → #lib1::Widget>{"/": (dynamic context) → main::HomePage => const main::HomePage::•(), ani::AnimatedContainerDemo::routeName: (dynamic context) → ani::AnimatedContainerDemo => const ani::AnimatedContainerDemo::•(), pag::PageRouteBuilderDemo::routeName: (dynamic context) → pag::PageRouteBuilderDemo => const pag::PageRouteBuilderDemo::•(), ani2::AnimationControllerDemo::routeName: (dynamic context) → ani2::AnimationControllerDemo => const ani2::AnimationControllerDemo::•(), twe::TweenDemo::routeName: (dynamic context) → twe::TweenDemo => const twe::TweenDemo::•(), ani3::AnimatedBuilderDemo::routeName: (dynamic context) → ani3::AnimatedBuilderDemo => const ani3::AnimatedBuilderDemo::•(), cus::CustomTweenDemo::routeName: (dynamic context) → cus::CustomTweenDemo => const cus::CustomTweenDemo::•(), twe2::TweenSequenceDemo::routeName: (dynamic context) → twe2::TweenSequenceDemo => const twe2::TweenSequenceDemo::•(), fad::FadeTransitionDemo::routeName: (dynamic context) → fad::FadeTransitionDemo => const fad::FadeTransitionDemo::•(), exp::ExpandCardDemo::routeName: (dynamic context) → exp::ExpandCardDemo => const exp::ExpandCardDemo::•(), car::CarouselDemo::routeName: (dynamic context) → car::CarouselDemo => new car::CarouselDemo::•(), foc::FocusImageDemo::routeName: (dynamic context) → foc::FocusImageDemo => const foc::FocusImageDemo::•(), car2::CardSwipeDemo::routeName: (dynamic context) → car2::CardSwipeDemo => const car2::CardSwipeDemo::•(), rep::RepeatingAnimationDemo::routeName: (dynamic context) → rep::RepeatingAnimationDemo => const rep::RepeatingAnimationDemo::•(), phy::PhysicsCardDragDemo::routeName: (dynamic context) → phy::PhysicsCardDragDemo => const phy::PhysicsCardDragDemo::•(), ani4::AnimatedListDemo::routeName: (dynamic context) → ani4::AnimatedListDemo => const ani4::AnimatedListDemo::•(), ani5::AnimatedPositionedDemo::routeName: (dynamic context) → ani5::AnimatedPositionedDemo => const ani5::AnimatedPositionedDemo::•(), ani6::AnimatedSwitcherDemo::routeName: (dynamic context) → ani6::AnimatedSwitcherDemo => const ani6::AnimatedSwitcherDemo::•(), her::HeroAnimationDemo::routeName: (dynamic context) → her::HeroAnimationDemo => const her::HeroAnimationDemo::•(), cur::CurvedAnimationDemo::routeName: (dynamic context) → cur::CurvedAnimationDemo => const cur::CurvedAnimationDemo::•()};
  static final field dart.core::List<main::Demo> basicDemos = <main::Demo>[new main::Demo::•(name: "Animation Controller", route: ani2::AnimationControllerDemo::routeName, builder: (#lib1::BuildContext context) → ani2::AnimationControllerDemo => const ani2::AnimationControllerDemo::•()), new main::Demo::•(name: "Tweens", route: twe::TweenDemo::routeName, builder: (#lib1::BuildContext context) → twe::TweenDemo => const twe::TweenDemo::•()), new main::Demo::•(name: "AnimatedBuilder", route: ani3::AnimatedBuilderDemo::routeName, builder: (#lib1::BuildContext context) → ani3::AnimatedBuilderDemo => const ani3::AnimatedBuilderDemo::•()), new main::Demo::•(name: "Fade Transition", route: fad::FadeTransitionDemo::routeName, builder: (#lib1::BuildContext context) → fad::FadeTransitionDemo => const fad::FadeTransitionDemo::•())];
  static final field dart.core::List<main::Demo> miscDemos = <main::Demo>[new main::Demo::•(name: "Expandable Card", route: exp::ExpandCardDemo::routeName, builder: (#lib1::BuildContext context) → exp::ExpandCardDemo => const exp::ExpandCardDemo::•()), new main::Demo::•(name: "Focus Image", route: foc::FocusImageDemo::routeName, builder: (#lib1::BuildContext context) → foc::FocusImageDemo => const foc::FocusImageDemo::•()), new main::Demo::•(name: "Repeating Animation", route: rep::RepeatingAnimationDemo::routeName, builder: (#lib1::BuildContext context) → rep::RepeatingAnimationDemo => const rep::RepeatingAnimationDemo::•()), new main::Demo::•(name: "Spring Physics", route: phy::PhysicsCardDragDemo::routeName, builder: (#lib1::BuildContext context) → phy::PhysicsCardDragDemo => const phy::PhysicsCardDragDemo::•()), new main::Demo::•(name: "AnimatedList", route: ani4::AnimatedListDemo::routeName, builder: (#lib1::BuildContext context) → ani4::AnimatedListDemo => const ani4::AnimatedListDemo::•()), new main::Demo::•(name: "AnimatedPositioned", route: ani5::AnimatedPositionedDemo::routeName, builder: (#lib1::BuildContext context) → ani5::AnimatedPositionedDemo => const ani5::AnimatedPositionedDemo::•()), new main::Demo::•(name: "Hero Animation", route: her::HeroAnimationDemo::routeName, builder: (#lib1::BuildContext context) → her::HeroAnimationDemo => const her::HeroAnimationDemo::•()), new main::Demo::•(name: "Curved Animation", route: cur::CurvedAnimationDemo::routeName, builder: (#lib1::BuildContext context) → cur::CurvedAnimationDemo => const cur::CurvedAnimationDemo::•())];
  static method myApp() → #lib1::Widget {
    return const main::AnimationSamples::•();
  }
}
library from "package:animations/src/basics/basics.dart" as bas {
additionalExports = (ani3::AnimatedBuilderDemo,
  ani::generateBorderRadius,
  ani::generateMargin,
  ani::generateColor,
  ani::AnimatedContainerDemo,
  ani2::AnimationControllerDemo,
  cus::TypewriterTween,
  cus::CustomTweenDemo,
  cus::loremIpsum,
  fad::FadeTransitionDemo,
  pag::PageRouteBuilderDemo,
  twe2::TweenSequenceDemo,
  twe::TweenDemo)

  export "package:animations/src/basics/animated_builder.dart";
  export "package:animations/src/basics/animated_container.dart";
  export "package:animations/src/basics/animation_controller.dart";
  export "package:animations/src/basics/custom_tween.dart";
  export "package:animations/src/basics/fade_transition.dart";
  export "package:animations/src/basics/page_route_builder.dart";
  export "package:animations/src/basics/tween_sequence.dart";
  export "package:animations/src/basics/tweens.dart";

}
library from "package:animations/src/misc/misc.dart" as misc {
additionalExports = (ani4::AnimatedListDemo,
  ani4::UserModel,
  ani5::AnimatedPositionedDemo,
  ani6::generateColor,
  ani6::generateContainer,
  ani6::AnimatedSwitcherDemo,
  car2::CardSwipeDemo,
  car2::Card,
  car2::SwipeableCard,
  car::CarouselDemo,
  car::OnCurrentItemChangedCallback,
  car::Carousel,
  cur::CurvedAnimationDemo,
  cur::CurveChoice,
  exp::ExpandCardDemo,
  exp::ExpandCard,
  foc::FocusImageDemo,
  foc::Grid,
  foc::SmallCard,
  her::HeroAnimationDemo,
  her::HeroPage,
  phy::PhysicsCardDragDemo,
  phy::DraggableCard,
  rep::RepeatingAnimationDemo)

  export "package:animations/src/misc/animated_list.dart";
  export "package:animations/src/misc/animated_positioned.dart";
  export "package:animations/src/misc/animated_switcher.dart";
  export "package:animations/src/misc/card_swipe.dart";
  export "package:animations/src/misc/carousel.dart";
  export "package:animations/src/misc/curved_animation.dart";
  export "package:animations/src/misc/expand_card.dart";
  export "package:animations/src/misc/focus_image.dart";
  export "package:animations/src/misc/hero_animation.dart";
  export "package:animations/src/misc/physics_card_drag.dart";
  export "package:animations/src/misc/repeating_animation.dart";

}
library from "package:animations/src/basics/animated_builder.dart" as ani3 {

  import "package:flutter/material.dart";

  class AnimatedBuilderDemo extends #lib1::StatefulWidget /*hasConstConstructor*/  {
    static const field dart.core::String routeName = "basics/animated_builder";
    const constructor •({#lib2::Key? key = null}) → ani3::AnimatedBuilderDemo
      : super #lib1::StatefulWidget::•(key: key)
      ;
    @dart.core::override
    method createState() → #lib1::State<ani3::AnimatedBuilderDemo>
      return new ani3::_AnimatedBuilderDemoState::•();
  }
  abstract class __AnimatedBuilderDemoState&State&SingleTickerProviderStateMixin = #lib1::State<ani3::AnimatedBuilderDemo> with #lib15::SingleTickerProviderStateMixin<ani3::AnimatedBuilderDemo> /*isAnonymousMixin*/  {
    synthetic constructor •() → ani3::__AnimatedBuilderDemoState&State&SingleTickerProviderStateMixin
      : super #lib1::State::•()
      ;
    mixin-super-stub method dispose() → void
      return super.{#lib15::SingleTickerProviderStateMixin::dispose}();
    mixin-super-stub get _ticker() → #lib16::Ticker?
      return super.{#lib15::SingleTickerProviderStateMixin::_ticker};
    mixin-super-stub set _ticker(#lib16::Ticker? value) → void
      return super.{#lib15::SingleTickerProviderStateMixin::_ticker} = value;
    mixin-super-stub get _tickerModeNotifier() → #lib17::ValueNotifier<dart.core::bool>?
      return super.{#lib15::SingleTickerProviderStateMixin::_tickerModeNotifier};
    mixin-super-stub set _tickerModeNotifier(#lib17::ValueNotifier<dart.core::bool>? value) → void
      return super.{#lib15::SingleTickerProviderStateMixin::_tickerModeNotifier} = value;
    mixin-super-stub method createTicker((dart.core::Duration) → void onTick) → #lib16::Ticker
      return super.{#lib15::SingleTickerProviderStateMixin::createTicker}(onTick);
    mixin-super-stub method activate() → void
      return super.{#lib15::SingleTickerProviderStateMixin::activate}();
    mixin-super-stub method _updateTicker() → void
      return super.{#lib15::SingleTickerProviderStateMixin::_updateTicker}();
    mixin-super-stub method _updateTickerModeNotifier() → void
      return super.{#lib15::SingleTickerProviderStateMixin::_updateTickerModeNotifier}();
    mixin-super-stub method debugFillProperties(#lib18::DiagnosticPropertiesBuilder properties) → void
      return super.{#lib15::SingleTickerProviderStateMixin::debugFillProperties}(properties);
  }
  class _AnimatedBuilderDemoState extends ani3::__AnimatedBuilderDemoState&State&SingleTickerProviderStateMixin {
    static const field dart.ui::Color beginColor = #lib5::Colors::deepPurple;
    static const field dart.ui::Color endColor = #lib5::Colors::deepOrange;
    field dart.core::Duration duration = const dart.core::Duration::•(milliseconds: 800);
    late field #lib19::AnimationController controller;
    late field #lib20::Animation<dart.ui::Color?> animation;
    synthetic constructor •() → ani3::_AnimatedBuilderDemoState
      : super ani3::__AnimatedBuilderDemoState&State&SingleTickerProviderStateMixin::•()
      ;
    @dart.core::override
    method initState() → void {
      super.{#lib1::State::initState}();
      this.{ani3::_AnimatedBuilderDemoState::controller} = new #lib19::AnimationController::•(vsync: this, duration: this.{ani3::_AnimatedBuilderDemoState::duration}{dart.core::Duration});
      this.{ani3::_AnimatedBuilderDemoState::animation} = new #lib21::ColorTween::•(begin: ani3::_AnimatedBuilderDemoState::beginColor, end: ani3::_AnimatedBuilderDemoState::endColor).{#lib21::Animatable::animate}(this.{ani3::_AnimatedBuilderDemoState::controller}{#lib19::AnimationController}){(#lib20::Animation<dart.core::double>) → #lib20::Animation<dart.ui::Color?>};
    }
    @dart.core::override
    method dispose() → void {
      this.{ani3::_AnimatedBuilderDemoState::controller}{#lib19::AnimationController}.{#lib19::AnimationController::dispose}(){() → void};
      super.{ani3::__AnimatedBuilderDemoState&State&SingleTickerProviderStateMixin::dispose}();
    }
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib9::Scaffold::•(appBar: new #lib10::AppBar::•(title: const #lib11::Text::•("AnimatedBuilder")), body: new #lib22::Center::•(child: new #lib23::AnimatedBuilder::•(animation: this.{ani3::_AnimatedBuilderDemoState::animation}{#lib20::Animation<dart.ui::Color?>}, builder: (#lib1::BuildContext context, #lib1::Widget? child) → #lib24::ElevatedButton {
        return new #lib24::ElevatedButton::•(style: #lib24::ElevatedButton::styleFrom(backgroundColor: this.{ani3::_AnimatedBuilderDemoState::animation}{#lib20::Animation<dart.ui::Color?>}.{#lib20::Animation::value}{dart.ui::Color?}), child: child, onPressed: () → void {
          #L1:
          PatternSwitchStatement
        });
      }, child: const #lib11::Text::•("Change Color", style: const #lib6::TextStyle::•(color: #lib5::Colors::white)))));
    }
  }
}
library from "package:animations/src/basics/animated_container.dart" as ani {

  import "dart:math";
  import "package:flutter/material.dart";

  class AnimatedContainerDemo extends #lib1::StatefulWidget /*hasConstConstructor*/  {
    static field dart.core::String routeName = "basics/animated_container";
    const constructor •({#lib2::Key? key = null}) → ani::AnimatedContainerDemo
      : super #lib1::StatefulWidget::•(key: key)
      ;
    @dart.core::override
    method createState() → #lib1::State<ani::AnimatedContainerDemo>
      return new ani::_AnimatedContainerDemoState::•();
  }
  class _AnimatedContainerDemoState extends #lib1::State<ani::AnimatedContainerDemo> {
    late field dart.ui::Color color;
    late field dart.core::double borderRadius;
    late field dart.core::double margin;
    synthetic constructor •() → ani::_AnimatedContainerDemoState
      : super #lib1::State::•()
      ;
    @dart.core::override
    method initState() → void {
      super.{#lib1::State::initState}();
      this.{ani::_AnimatedContainerDemoState::color} = #lib5::Colors::deepPurple;
      this.{ani::_AnimatedContainerDemoState::borderRadius} = ani::generateBorderRadius();
      this.{ani::_AnimatedContainerDemoState::margin} = ani::generateMargin();
    }
    method change() → void {
      this.{#lib1::State::setState}(() → void {
        this.{ani::_AnimatedContainerDemoState::color} = ani::generateColor();
        this.{ani::_AnimatedContainerDemoState::borderRadius} = ani::generateBorderRadius();
        this.{ani::_AnimatedContainerDemoState::margin} = ani::generateMargin();
      }){(() → void) → void};
    }
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib9::Scaffold::•(appBar: new #lib10::AppBar::•(title: const #lib11::Text::•("AnimatedContainer")), body: new #lib22::Center::•(child: new #lib22::Column::•(children: <#lib1::Widget>[new #lib22::Padding::•(padding: const #lib25::EdgeInsets::all(8.0), child: new #lib22::SizedBox::•(width: 128.0, height: 128.0, child: new #lib26::AnimatedContainer::•(margin: new #lib25::EdgeInsets::all(this.{ani::_AnimatedContainerDemoState::margin}{dart.core::double}), decoration: new #lib27::BoxDecoration::•(color: this.{ani::_AnimatedContainerDemoState::color}{dart.ui::Color}, borderRadius: new #lib28::BorderRadius::circular(this.{ani::_AnimatedContainerDemoState::borderRadius}{dart.core::double})), duration: const dart.core::Duration::•(milliseconds: 400)))), new #lib24::ElevatedButton::•(child: const #lib11::Text::•("change"), onPressed: () → void => this.{ani::_AnimatedContainerDemoState::change}(){() → void})])));
    }
  }
  static method generateBorderRadius() → dart.core::double
    return dart.math::Random::•().{dart.math::Random::nextDouble}(){() → dart.core::double}.{dart.core::double::*}(64){(dart.core::num) → dart.core::double};
  static method generateMargin() → dart.core::double
    return dart.math::Random::•().{dart.math::Random::nextDouble}(){() → dart.core::double}.{dart.core::double::*}(64){(dart.core::num) → dart.core::double};
  static method generateColor() → dart.ui::Color
    return new dart.ui::Color::•(4294967295.{dart.core::int::&}(dart.math::Random::•().{dart.math::Random::nextInt}(4294967295){(dart.core::int) → dart.core::int}){(dart.core::int) → dart.core::int});
}
library from "package:animations/src/basics/animation_controller.dart" as ani2 {

  import "package:flutter/material.dart";

  class AnimationControllerDemo extends #lib1::StatefulWidget /*hasConstConstructor*/  {
    static const field dart.core::String routeName = "basics/animation_controller";
    const constructor •({#lib2::Key? key = null}) → ani2::AnimationControllerDemo
      : super #lib1::StatefulWidget::•(key: key)
      ;
    @dart.core::override
    method createState() → #lib1::State<ani2::AnimationControllerDemo>
      return new ani2::_AnimationControllerDemoState::•();
  }
  abstract class __AnimationControllerDemoState&State&SingleTickerProviderStateMixin = #lib1::State<ani2::AnimationControllerDemo> with #lib15::SingleTickerProviderStateMixin<ani2::AnimationControllerDemo> /*isAnonymousMixin*/  {
    synthetic constructor •() → ani2::__AnimationControllerDemoState&State&SingleTickerProviderStateMixin
      : super #lib1::State::•()
      ;
    mixin-super-stub method dispose() → void
      return super.{#lib15::SingleTickerProviderStateMixin::dispose}();
    mixin-super-stub get _ticker() → #lib16::Ticker?
      return super.{#lib15::SingleTickerProviderStateMixin::_ticker};
    mixin-super-stub set _ticker(#lib16::Ticker? value) → void
      return super.{#lib15::SingleTickerProviderStateMixin::_ticker} = value;
    mixin-super-stub get _tickerModeNotifier() → #lib17::ValueNotifier<dart.core::bool>?
      return super.{#lib15::SingleTickerProviderStateMixin::_tickerModeNotifier};
    mixin-super-stub set _tickerModeNotifier(#lib17::ValueNotifier<dart.core::bool>? value) → void
      return super.{#lib15::SingleTickerProviderStateMixin::_tickerModeNotifier} = value;
    mixin-super-stub method createTicker((dart.core::Duration) → void onTick) → #lib16::Ticker
      return super.{#lib15::SingleTickerProviderStateMixin::createTicker}(onTick);
    mixin-super-stub method activate() → void
      return super.{#lib15::SingleTickerProviderStateMixin::activate}();
    mixin-super-stub method _updateTicker() → void
      return super.{#lib15::SingleTickerProviderStateMixin::_updateTicker}();
    mixin-super-stub method _updateTickerModeNotifier() → void
      return super.{#lib15::SingleTickerProviderStateMixin::_updateTickerModeNotifier}();
    mixin-super-stub method debugFillProperties(#lib18::DiagnosticPropertiesBuilder properties) → void
      return super.{#lib15::SingleTickerProviderStateMixin::debugFillProperties}(properties);
  }
  class _AnimationControllerDemoState extends ani2::__AnimationControllerDemoState&State&SingleTickerProviderStateMixin {
    static const field dart.core::Duration _duration = const dart.core::Duration::•(seconds: 1);
    late final [setter] field #lib19::AnimationController controller;
    synthetic constructor •() → ani2::_AnimationControllerDemoState
      : super ani2::__AnimationControllerDemoState&State&SingleTickerProviderStateMixin::•()
      ;
    @dart.core::override
    method initState() → void {
      super.{#lib1::State::initState}();
      this.{ani2::_AnimationControllerDemoState::controller} = let final #lib19::AnimationController #t2 = new #lib19::AnimationController::•(vsync: this, duration: ani2::_AnimationControllerDemoState::_duration) in block {
        #t2.{#lib19::_AnimationController&Animation&AnimationEagerListenerMixin&AnimationLocalListenersMixin::addListener}(() → void {
          this.{#lib1::State::setState}(() → void {}){(() → void) → void};
        }){(() → void) → void};
      } =>#t2;
    }
    @dart.core::override
    method dispose() → void {
      this.{ani2::_AnimationControllerDemoState::controller}{#lib19::AnimationController}.{#lib19::AnimationController::dispose}(){() → void};
      super.{ani2::__AnimationControllerDemoState&State&SingleTickerProviderStateMixin::dispose}();
    }
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib9::Scaffold::•(appBar: new #lib10::AppBar::•(title: const #lib11::Text::•("Animation Controller")), body: new #lib22::Center::•(child: new #lib22::Column::•(mainAxisSize: #lib29::MainAxisSize::min, children: <#lib1::Widget>[new #lib22::ConstrainedBox::•(constraints: const #lib30::BoxConstraints::•(maxWidth: 200.0), child: new #lib11::Text::•(this.{ani2::_AnimationControllerDemoState::controller}{#lib19::AnimationController}.{#lib19::AnimationController::value}{dart.core::double}.{dart.core::num::toStringAsFixed}(2){(dart.core::int) → dart.core::String}, style: #lib7::Theme::of(context).{#lib4::ThemeData::textTheme}{#lib8::TextTheme}.{#lib8::TextTheme::displaySmall}{#lib6::TextStyle?}, textScaleFactor: 1.{dart.core::num::+}(this.{ani2::_AnimationControllerDemoState::controller}{#lib19::AnimationController}.{#lib19::AnimationController::value}{dart.core::double}){(dart.core::num) → dart.core::double})), new #lib24::ElevatedButton::•(child: const #lib11::Text::•("animate"), onPressed: () → void {
        #L2:
        PatternSwitchStatement
      })])));
    }
  }
}
library from "package:animations/src/basics/custom_tween.dart" as cus {

  import "package:flutter/material.dart";

  class TypewriterTween extends #lib21::Tween<dart.core::String> {
    constructor •({dart.core::String begin = "", dart.core::String end = ""}) → cus::TypewriterTween
      : super #lib21::Tween::•(begin: begin, end: end)
      ;
    @dart.core::override
    method lerp(dart.core::double t) → dart.core::String {
      dart.core::int cutoff = this.{#lib21::Tween::end}{dart.core::String?}!.{dart.core::String::length}{dart.core::int}.{dart.core::num::*}(t){(dart.core::num) → dart.core::double}.{dart.core::double::round}(){() → dart.core::int};
      return this.{#lib21::Tween::end}{dart.core::String?}!.{dart.core::String::substring}(0, cutoff){(dart.core::int, [dart.core::int?]) → dart.core::String};
    }
  }
  class CustomTweenDemo extends #lib1::StatefulWidget /*hasConstConstructor*/  {
    static const field dart.core::String routeName = "basics/custom_tweens";
    const constructor •({#lib2::Key? key = null}) → cus::CustomTweenDemo
      : super #lib1::StatefulWidget::•(key: key)
      ;
    @dart.core::override
    method createState() → #lib1::State<cus::CustomTweenDemo>
      return new cus::_CustomTweenDemoState::•();
  }
  abstract class __CustomTweenDemoState&State&SingleTickerProviderStateMixin = #lib1::State<cus::CustomTweenDemo> with #lib15::SingleTickerProviderStateMixin<cus::CustomTweenDemo> /*isAnonymousMixin*/  {
    synthetic constructor •() → cus::__CustomTweenDemoState&State&SingleTickerProviderStateMixin
      : super #lib1::State::•()
      ;
    mixin-super-stub method dispose() → void
      return super.{#lib15::SingleTickerProviderStateMixin::dispose}();
    mixin-super-stub get _ticker() → #lib16::Ticker?
      return super.{#lib15::SingleTickerProviderStateMixin::_ticker};
    mixin-super-stub set _ticker(#lib16::Ticker? value) → void
      return super.{#lib15::SingleTickerProviderStateMixin::_ticker} = value;
    mixin-super-stub get _tickerModeNotifier() → #lib17::ValueNotifier<dart.core::bool>?
      return super.{#lib15::SingleTickerProviderStateMixin::_tickerModeNotifier};
    mixin-super-stub set _tickerModeNotifier(#lib17::ValueNotifier<dart.core::bool>? value) → void
      return super.{#lib15::SingleTickerProviderStateMixin::_tickerModeNotifier} = value;
    mixin-super-stub method createTicker((dart.core::Duration) → void onTick) → #lib16::Ticker
      return super.{#lib15::SingleTickerProviderStateMixin::createTicker}(onTick);
    mixin-super-stub method activate() → void
      return super.{#lib15::SingleTickerProviderStateMixin::activate}();
    mixin-super-stub method _updateTicker() → void
      return super.{#lib15::SingleTickerProviderStateMixin::_updateTicker}();
    mixin-super-stub method _updateTickerModeNotifier() → void
      return super.{#lib15::SingleTickerProviderStateMixin::_updateTickerModeNotifier}();
    mixin-super-stub method debugFillProperties(#lib18::DiagnosticPropertiesBuilder properties) → void
      return super.{#lib15::SingleTickerProviderStateMixin::debugFillProperties}(properties);
  }
  class _CustomTweenDemoState extends cus::__CustomTweenDemoState&State&SingleTickerProviderStateMixin {
    static const field dart.core::Duration _duration = const dart.core::Duration::•(seconds: 3);
    static const field dart.core::String message = cus::loremIpsum;
    late final [setter] field #lib19::AnimationController controller;
    late final [setter] field #lib20::Animation<dart.core::String> animation;
    synthetic constructor •() → cus::_CustomTweenDemoState
      : super cus::__CustomTweenDemoState&State&SingleTickerProviderStateMixin::•()
      ;
    @dart.core::override
    method initState() → void {
      super.{#lib1::State::initState}();
      this.{cus::_CustomTweenDemoState::controller} = new #lib19::AnimationController::•(vsync: this, duration: cus::_CustomTweenDemoState::_duration);
      this.{cus::_CustomTweenDemoState::animation} = new cus::TypewriterTween::•(end: cus::_CustomTweenDemoState::message).{#lib21::Animatable::animate}(this.{cus::_CustomTweenDemoState::controller}{#lib19::AnimationController}){(#lib20::Animation<dart.core::double>) → #lib20::Animation<dart.core::String>};
    }
    @dart.core::override
    method dispose() → void {
      this.{cus::_CustomTweenDemoState::controller}{#lib19::AnimationController}.{#lib19::AnimationController::dispose}(){() → void};
      super.{cus::__CustomTweenDemoState&State&SingleTickerProviderStateMixin::dispose}();
    }
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib9::Scaffold::•(appBar: new #lib10::AppBar::•(title: const #lib11::Text::•("Custom Tween"), actions: <#lib1::Widget>[new #lib31::TextButton::•(onPressed: () → void {
        if(this.{cus::_CustomTweenDemoState::controller}{#lib19::AnimationController}.{#lib19::AnimationController::status}{#lib20::AnimationStatus} =={dart.core::Object::==}{(dart.core::Object) → dart.core::bool} #lib20::AnimationStatus::completed) {
          this.{cus::_CustomTweenDemoState::controller}{#lib19::AnimationController}.{#lib19::AnimationController::reverse}(){({from: dart.core::double?}) → #lib16::TickerFuture}.{#lib16::TickerFuture::whenComplete}(() → Null {
            this.{#lib1::State::setState}(() → void {}){(() → void) → void};
          }){(() → dynamic) → dart.async::Future<void>};
        }
        else {
          this.{cus::_CustomTweenDemoState::controller}{#lib19::AnimationController}.{#lib19::AnimationController::forward}(){({from: dart.core::double?}) → #lib16::TickerFuture}.{#lib16::TickerFuture::whenComplete}(() → Null {
            this.{#lib1::State::setState}(() → void {}){(() → void) → void};
          }){(() → dynamic) → dart.async::Future<void>};
        }
      }, child: new #lib11::Text::•(this.{cus::_CustomTweenDemoState::controller}{#lib19::AnimationController}.{#lib19::AnimationController::status}{#lib20::AnimationStatus} =={dart.core::Object::==}{(dart.core::Object) → dart.core::bool} #lib20::AnimationStatus::completed ?{dart.core::String} "Delete Essay" : "Write Essay"))]), body: new #lib32::SafeArea::•(child: new #lib33::Container::•(alignment: #lib34::Alignment::bottomCenter, child: new #lib35::SingleChildScrollView::•(child: new #lib22::Column::•(mainAxisAlignment: #lib29::MainAxisAlignment::end, crossAxisAlignment: #lib29::CrossAxisAlignment::stretch, children: <#lib1::Widget>[new #lib22::Padding::•(padding: const #lib25::EdgeInsets::all(8.0), child: new #lib36::Card::•(child: new #lib33::Container::•(padding: const #lib25::EdgeInsets::all(8.0), child: new #lib23::AnimatedBuilder::•(animation: this.{cus::_CustomTweenDemoState::animation}{#lib20::Animation<dart.core::String>}, builder: (#lib1::BuildContext context, #lib1::Widget? child) → #lib11::Text {
        return new #lib11::Text::•(this.{cus::_CustomTweenDemoState::animation}{#lib20::Animation<dart.core::String>}.{#lib20::Animation::value}{dart.core::String}, style: const #lib6::TextStyle::•(fontSize: 16.0, fontFamily: "SpecialElite"));
      }))))])))));
    }
  }
  static const field dart.core::String loremIpsum = "Sed ut perspiciatis, unde omnis iste natus error sit voluptatem accusantium\ndoloremque laudantium, totam rem aperiam eaque ipsa, quae ab illo inventore\nveritatis et quasi architecto beatae vitae dicta sunt, explicabo. Nemo enim\nipsam voluptatem, quia voluptas sit, aspernatur aut odit aut fugit, sed quia\nconsequuntur magni dolores eos, qui ratione voluptatem sequi nesciunt, neque\nporro quisquam est, qui dolorem ipsum, quia dolor sit amet consectetur\nadipisci[ng] velit, sed quia non-numquam [do] eius modi tempora inci[di]dunt, ut\nlabore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam,\nquis nostrum[d] exercitationem ullam corporis suscipit laboriosam, nisi ut\naliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit, qui in\nea voluptate velit esse, quam nihil molestiae consequatur, vel illum, qui\ndolorem eum fugiat, quo voluptas nulla pariatur?\n";
}
library from "package:animations/src/basics/fade_transition.dart" as fad {

  import "package:flutter/material.dart";

  class FadeTransitionDemo extends #lib1::StatefulWidget /*hasConstConstructor*/  {
    static const field dart.core::String routeName = "basics/fade_transition";
    const constructor •({#lib2::Key? key = null}) → fad::FadeTransitionDemo
      : super #lib1::StatefulWidget::•(key: key)
      ;
    @dart.core::override
    method createState() → #lib1::State<fad::FadeTransitionDemo>
      return new fad::_FadeTransitionDemoState::•();
  }
  abstract class __FadeTransitionDemoState&State&SingleTickerProviderStateMixin = #lib1::State<fad::FadeTransitionDemo> with #lib15::SingleTickerProviderStateMixin<fad::FadeTransitionDemo> /*isAnonymousMixin*/  {
    synthetic constructor •() → fad::__FadeTransitionDemoState&State&SingleTickerProviderStateMixin
      : super #lib1::State::•()
      ;
    mixin-super-stub method dispose() → void
      return super.{#lib15::SingleTickerProviderStateMixin::dispose}();
    mixin-super-stub get _ticker() → #lib16::Ticker?
      return super.{#lib15::SingleTickerProviderStateMixin::_ticker};
    mixin-super-stub set _ticker(#lib16::Ticker? value) → void
      return super.{#lib15::SingleTickerProviderStateMixin::_ticker} = value;
    mixin-super-stub get _tickerModeNotifier() → #lib17::ValueNotifier<dart.core::bool>?
      return super.{#lib15::SingleTickerProviderStateMixin::_tickerModeNotifier};
    mixin-super-stub set _tickerModeNotifier(#lib17::ValueNotifier<dart.core::bool>? value) → void
      return super.{#lib15::SingleTickerProviderStateMixin::_tickerModeNotifier} = value;
    mixin-super-stub method createTicker((dart.core::Duration) → void onTick) → #lib16::Ticker
      return super.{#lib15::SingleTickerProviderStateMixin::createTicker}(onTick);
    mixin-super-stub method activate() → void
      return super.{#lib15::SingleTickerProviderStateMixin::activate}();
    mixin-super-stub method _updateTicker() → void
      return super.{#lib15::SingleTickerProviderStateMixin::_updateTicker}();
    mixin-super-stub method _updateTickerModeNotifier() → void
      return super.{#lib15::SingleTickerProviderStateMixin::_updateTickerModeNotifier}();
    mixin-super-stub method debugFillProperties(#lib18::DiagnosticPropertiesBuilder properties) → void
      return super.{#lib15::SingleTickerProviderStateMixin::debugFillProperties}(properties);
  }
  class _FadeTransitionDemoState extends fad::__FadeTransitionDemoState&State&SingleTickerProviderStateMixin {
    late final [setter] field #lib19::AnimationController _controller;
    late final [setter] field #lib20::Animation<dart.core::double> _animation;
    late final [setter] field #lib37::CurvedAnimation _curve;
    synthetic constructor •() → fad::_FadeTransitionDemoState
      : super fad::__FadeTransitionDemoState&State&SingleTickerProviderStateMixin::•()
      ;
    @dart.core::override
    method initState() → void {
      super.{#lib1::State::initState}();
      this.{fad::_FadeTransitionDemoState::_controller} = new #lib19::AnimationController::•(vsync: this, duration: const dart.core::Duration::•(milliseconds: 500));
      this.{fad::_FadeTransitionDemoState::_curve} = new #lib37::CurvedAnimation::•(parent: this.{fad::_FadeTransitionDemoState::_controller}{#lib19::AnimationController}, curve: #lib38::Curves::easeIn);
      this.{fad::_FadeTransitionDemoState::_animation} = new #lib21::Tween::•<dart.core::double>(begin: 1.0, end: 0.0).{#lib21::Animatable::animate}(this.{fad::_FadeTransitionDemoState::_curve}{#lib37::CurvedAnimation}){(#lib20::Animation<dart.core::double>) → #lib20::Animation<dart.core::double>};
    }
    @dart.core::override
    method dispose() → void {
      this.{fad::_FadeTransitionDemoState::_controller}{#lib19::AnimationController}.{#lib19::AnimationController::dispose}(){() → void};
      super.{fad::__FadeTransitionDemoState&State&SingleTickerProviderStateMixin::dispose}();
    }
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib9::Scaffold::•(appBar: new #lib10::AppBar::•(title: const #lib11::Text::•("Fade Transition")), body: new #lib22::Center::•(child: new #lib22::Column::•(mainAxisSize: #lib29::MainAxisSize::min, children: <#lib1::Widget>[new #lib23::FadeTransition::•(opacity: this.{fad::_FadeTransitionDemoState::_animation}{#lib20::Animation<dart.core::double>}, child: const #lib39::Icon::•(#lib40::Icons::star, color: #lib5::Colors::amber, size: 300.0)), new #lib24::ElevatedButton::•(child: const #lib11::Text::•("animate"), onPressed: () → void => this.{#lib1::State::setState}(() → void {
        this.{fad::_FadeTransitionDemoState::_controller}{#lib19::AnimationController}.{#lib19::AnimationController::animateTo}(1.0){(dart.core::double, {curve: #lib38::Curve, duration: dart.core::Duration?}) → #lib16::TickerFuture}.{#lib16::TickerFuture::then}<#lib16::TickerFuture>((void value) → #lib16::TickerFuture => this.{fad::_FadeTransitionDemoState::_controller}{#lib19::AnimationController}.{#lib19::AnimationController::animateBack}(0.0){(dart.core::double, {curve: #lib38::Curve, duration: dart.core::Duration?}) → #lib16::TickerFuture}){((void) → FutureOr<#lib16::TickerFuture>, {onError: dart.core::Function?}) → dart.async::Future<#lib16::TickerFuture>};
      }){(() → void) → void})])));
    }
  }
}
library from "package:animations/src/basics/page_route_builder.dart" as pag {

  import "package:flutter/material.dart";

  class PageRouteBuilderDemo extends #lib1::StatelessWidget /*hasConstConstructor*/  {
    static const field dart.core::String routeName = "basics/page_route_builder";
    const constructor •({#lib2::Key? key = null}) → pag::PageRouteBuilderDemo
      : super #lib1::StatelessWidget::•(key: key)
      ;
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib9::Scaffold::•(appBar: new #lib10::AppBar::•(title: const #lib11::Text::•("Page 1")), body: new #lib22::Center::•(child: new #lib24::ElevatedButton::•(child: const #lib11::Text::•("Go!"), onPressed: () → void {
        #lib14::Navigator::of(context).{#lib14::NavigatorState::push}<void>(pag::_createRoute()){(#lib14::Route<void>) → dart.async::Future<void>};
      })));
    }
  }
  class _Page2 extends #lib1::StatelessWidget {
    synthetic constructor •() → pag::_Page2
      : super #lib1::StatelessWidget::•()
      ;
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib9::Scaffold::•(appBar: new #lib10::AppBar::•(title: const #lib11::Text::•("Page 2")), body: new #lib22::Center::•(child: new #lib11::Text::•("Page 2!", style: #lib7::Theme::of(context).{#lib4::ThemeData::textTheme}{#lib8::TextTheme}.{#lib8::TextTheme::headlineMedium}{#lib6::TextStyle?})));
    }
  }
  static method _createRoute() → #lib14::Route<dynamic> {
    return new #lib41::PageRouteBuilder::•<#lib23::SlideTransition>(pageBuilder: (#lib1::BuildContext context, #lib20::Animation<dart.core::double> animation, #lib20::Animation<dart.core::double> secondaryAnimation) → pag::_Page2 => new pag::_Page2::•(), transitionsBuilder: (#lib1::BuildContext context, #lib20::Animation<dart.core::double> animation, #lib20::Animation<dart.core::double> secondaryAnimation, #lib1::Widget child) → #lib23::SlideTransition {
      #lib21::Tween<dart.ui::Offset> tween = new #lib21::Tween::•<dart.ui::Offset>(begin: const dart.ui::Offset::•(0.0, 1.0), end: dart.ui::Offset::zero);
      #lib21::CurveTween curveTween = new #lib21::CurveTween::•(curve: #lib38::Curves::ease);
      return new #lib23::SlideTransition::•(position: animation.{#lib20::Animation::drive}<dart.core::double>(curveTween){(#lib21::Animatable<dart.core::double>) → #lib20::Animation<dart.core::double>}.{#lib20::Animation::drive}<dart.ui::Offset>(tween){(#lib21::Animatable<dart.ui::Offset>) → #lib20::Animation<dart.ui::Offset>}, child: child);
    });
  }
}
library from "package:animations/src/basics/tween_sequence.dart" as twe2 {

  import "package:flutter/material.dart";

  class TweenSequenceDemo extends #lib1::StatefulWidget /*hasConstConstructor*/  {
    static const field dart.core::String routeName = "basics/chaining_tweens";
    const constructor •({#lib2::Key? key = null}) → twe2::TweenSequenceDemo
      : super #lib1::StatefulWidget::•(key: key)
      ;
    @dart.core::override
    method createState() → #lib1::State<twe2::TweenSequenceDemo>
      return new twe2::_TweenSequenceDemoState::•();
  }
  abstract class __TweenSequenceDemoState&State&SingleTickerProviderStateMixin = #lib1::State<twe2::TweenSequenceDemo> with #lib15::SingleTickerProviderStateMixin<twe2::TweenSequenceDemo> /*isAnonymousMixin*/  {
    synthetic constructor •() → twe2::__TweenSequenceDemoState&State&SingleTickerProviderStateMixin
      : super #lib1::State::•()
      ;
    mixin-super-stub method dispose() → void
      return super.{#lib15::SingleTickerProviderStateMixin::dispose}();
    mixin-super-stub get _ticker() → #lib16::Ticker?
      return super.{#lib15::SingleTickerProviderStateMixin::_ticker};
    mixin-super-stub set _ticker(#lib16::Ticker? value) → void
      return super.{#lib15::SingleTickerProviderStateMixin::_ticker} = value;
    mixin-super-stub get _tickerModeNotifier() → #lib17::ValueNotifier<dart.core::bool>?
      return super.{#lib15::SingleTickerProviderStateMixin::_tickerModeNotifier};
    mixin-super-stub set _tickerModeNotifier(#lib17::ValueNotifier<dart.core::bool>? value) → void
      return super.{#lib15::SingleTickerProviderStateMixin::_tickerModeNotifier} = value;
    mixin-super-stub method createTicker((dart.core::Duration) → void onTick) → #lib16::Ticker
      return super.{#lib15::SingleTickerProviderStateMixin::createTicker}(onTick);
    mixin-super-stub method activate() → void
      return super.{#lib15::SingleTickerProviderStateMixin::activate}();
    mixin-super-stub method _updateTicker() → void
      return super.{#lib15::SingleTickerProviderStateMixin::_updateTicker}();
    mixin-super-stub method _updateTickerModeNotifier() → void
      return super.{#lib15::SingleTickerProviderStateMixin::_updateTickerModeNotifier}();
    mixin-super-stub method debugFillProperties(#lib18::DiagnosticPropertiesBuilder properties) → void
      return super.{#lib15::SingleTickerProviderStateMixin::debugFillProperties}(properties);
  }
  class _TweenSequenceDemoState extends twe2::__TweenSequenceDemoState&State&SingleTickerProviderStateMixin {
    static const field dart.core::Duration duration = const dart.core::Duration::•(seconds: 3);
    late final [setter] field #lib19::AnimationController controller;
    late final [setter] field #lib20::Animation<dart.ui::Color?> animation;
    static final field dart.core::List<#lib5::MaterialColor> colors = <#lib5::MaterialColor>[#lib5::Colors::red, #lib5::Colors::orange, #lib5::Colors::yellow, #lib5::Colors::green, #lib5::Colors::blue, #lib5::Colors::indigo, #lib5::Colors::purple];
    synthetic constructor •() → twe2::_TweenSequenceDemoState
      : super twe2::__TweenSequenceDemoState&State&SingleTickerProviderStateMixin::•()
      ;
    @dart.core::override
    method initState() → void {
      super.{#lib1::State::initState}();
      final dart.core::List<#lib42::TweenSequenceItem<dart.ui::Color?>> sequenceItems = <#lib42::TweenSequenceItem<dart.ui::Color?>>[];
      for (dart.core::int i = 0; i.{dart.core::num::<}(twe2::_TweenSequenceDemoState::colors.{dart.core::List::length}{dart.core::int}){(dart.core::num) → dart.core::bool}; i = i.{dart.core::num::+}(1){(dart.core::num) → dart.core::int}) {
        final #lib5::MaterialColor beginColor = twe2::_TweenSequenceDemoState::colors.{dart.core::List::[]}(i){(dart.core::int) → #lib5::MaterialColor};
        final #lib5::MaterialColor endColor = twe2::_TweenSequenceDemoState::colors.{dart.core::List::[]}(i.{dart.core::num::+}(1){(dart.core::num) → dart.core::int}.{dart.core::num::%}(twe2::_TweenSequenceDemoState::colors.{dart.core::List::length}{dart.core::int}){(dart.core::num) → dart.core::int}){(dart.core::int) → #lib5::MaterialColor};
        final dart.core::double weight = 1.{dart.core::num::/}(twe2::_TweenSequenceDemoState::colors.{dart.core::List::length}{dart.core::int}){(dart.core::num) → dart.core::double};
        sequenceItems.{dart.core::List::add}(new #lib42::TweenSequenceItem::•<dart.ui::Color?>(tween: new #lib21::ColorTween::•(begin: beginColor, end: endColor), weight: weight)){(#lib42::TweenSequenceItem<dart.ui::Color?>) → void};
      }
      this.{twe2::_TweenSequenceDemoState::controller} = new #lib19::AnimationController::•(duration: twe2::_TweenSequenceDemoState::duration, vsync: this);
      this.{twe2::_TweenSequenceDemoState::animation} = new #lib42::TweenSequence::•<dart.ui::Color?>(sequenceItems).{#lib21::Animatable::animate}(this.{twe2::_TweenSequenceDemoState::controller}{#lib19::AnimationController}){(#lib20::Animation<dart.core::double>) → #lib20::Animation<dart.ui::Color?>};
    }
    @dart.core::override
    method dispose() → void {
      this.{twe2::_TweenSequenceDemoState::controller}{#lib19::AnimationController}.{#lib19::AnimationController::dispose}(){() → void};
      super.{twe2::__TweenSequenceDemoState&State&SingleTickerProviderStateMixin::dispose}();
    }
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib9::Scaffold::•(appBar: new #lib10::AppBar::•(title: const #lib11::Text::•("Tween Sequences")), body: new #lib22::Center::•(child: new #lib23::AnimatedBuilder::•(animation: this.{twe2::_TweenSequenceDemoState::animation}{#lib20::Animation<dart.ui::Color?>}, builder: (#lib1::BuildContext context, #lib1::Widget? child) → #lib43::MaterialButton {
        return new #lib43::MaterialButton::•(color: this.{twe2::_TweenSequenceDemoState::animation}{#lib20::Animation<dart.ui::Color?>}.{#lib20::Animation::value}{dart.ui::Color?}, onPressed: () → dart.async::Future<void> async /* futureValueType= void */ {
          await this.{twe2::_TweenSequenceDemoState::controller}{#lib19::AnimationController}.{#lib19::AnimationController::forward}(){({from: dart.core::double?}) → #lib16::TickerFuture};
          this.{twe2::_TweenSequenceDemoState::controller}{#lib19::AnimationController}.{#lib19::AnimationController::reset}(){() → void};
        }, child: child);
      }, child: const #lib11::Text::•("Animate", style: const #lib6::TextStyle::•(color: #lib5::Colors::white)))));
    }
  }
}
library from "package:animations/src/basics/tweens.dart" as twe {

  import "package:flutter/material.dart";

  class TweenDemo extends #lib1::StatefulWidget /*hasConstConstructor*/  {
    static const field dart.core::String routeName = "basics/tweens";
    const constructor •({#lib2::Key? key = null}) → twe::TweenDemo
      : super #lib1::StatefulWidget::•(key: key)
      ;
    @dart.core::override
    method createState() → #lib1::State<twe::TweenDemo>
      return new twe::_TweenDemoState::•();
  }
  abstract class __TweenDemoState&State&SingleTickerProviderStateMixin = #lib1::State<twe::TweenDemo> with #lib15::SingleTickerProviderStateMixin<twe::TweenDemo> /*isAnonymousMixin*/  {
    synthetic constructor •() → twe::__TweenDemoState&State&SingleTickerProviderStateMixin
      : super #lib1::State::•()
      ;
    mixin-super-stub method dispose() → void
      return super.{#lib15::SingleTickerProviderStateMixin::dispose}();
    mixin-super-stub get _ticker() → #lib16::Ticker?
      return super.{#lib15::SingleTickerProviderStateMixin::_ticker};
    mixin-super-stub set _ticker(#lib16::Ticker? value) → void
      return super.{#lib15::SingleTickerProviderStateMixin::_ticker} = value;
    mixin-super-stub get _tickerModeNotifier() → #lib17::ValueNotifier<dart.core::bool>?
      return super.{#lib15::SingleTickerProviderStateMixin::_tickerModeNotifier};
    mixin-super-stub set _tickerModeNotifier(#lib17::ValueNotifier<dart.core::bool>? value) → void
      return super.{#lib15::SingleTickerProviderStateMixin::_tickerModeNotifier} = value;
    mixin-super-stub method createTicker((dart.core::Duration) → void onTick) → #lib16::Ticker
      return super.{#lib15::SingleTickerProviderStateMixin::createTicker}(onTick);
    mixin-super-stub method activate() → void
      return super.{#lib15::SingleTickerProviderStateMixin::activate}();
    mixin-super-stub method _updateTicker() → void
      return super.{#lib15::SingleTickerProviderStateMixin::_updateTicker}();
    mixin-super-stub method _updateTickerModeNotifier() → void
      return super.{#lib15::SingleTickerProviderStateMixin::_updateTickerModeNotifier}();
    mixin-super-stub method debugFillProperties(#lib18::DiagnosticPropertiesBuilder properties) → void
      return super.{#lib15::SingleTickerProviderStateMixin::debugFillProperties}(properties);
  }
  class _TweenDemoState extends twe::__TweenDemoState&State&SingleTickerProviderStateMixin {
    static const field dart.core::Duration _duration = const dart.core::Duration::•(seconds: 1);
    static const field dart.core::double accountBalance = 1000000.0;
    late final [setter] field #lib19::AnimationController controller;
    late final [setter] field #lib20::Animation<dart.core::double> animation;
    synthetic constructor •() → twe::_TweenDemoState
      : super twe::__TweenDemoState&State&SingleTickerProviderStateMixin::•()
      ;
    @dart.core::override
    method initState() → void {
      super.{#lib1::State::initState}();
      this.{twe::_TweenDemoState::controller} = let final #lib19::AnimationController #t3 = new #lib19::AnimationController::•(vsync: this, duration: twe::_TweenDemoState::_duration) in block {
        #t3.{#lib19::_AnimationController&Animation&AnimationEagerListenerMixin&AnimationLocalListenersMixin::addListener}(() → void {
          this.{#lib1::State::setState}(() → void {}){(() → void) → void};
        }){(() → void) → void};
      } =>#t3;
      this.{twe::_TweenDemoState::animation} = new #lib21::Tween::•<dart.core::double>(begin: 0.0, end: twe::_TweenDemoState::accountBalance).{#lib21::Animatable::animate}(this.{twe::_TweenDemoState::controller}{#lib19::AnimationController}){(#lib20::Animation<dart.core::double>) → #lib20::Animation<dart.core::double>};
    }
    @dart.core::override
    method dispose() → void {
      this.{twe::_TweenDemoState::controller}{#lib19::AnimationController}.{#lib19::AnimationController::dispose}(){() → void};
      super.{twe::__TweenDemoState&State&SingleTickerProviderStateMixin::dispose}();
    }
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib9::Scaffold::•(appBar: new #lib10::AppBar::•(title: const #lib11::Text::•("Tweens")), body: new #lib22::Center::•(child: new #lib22::Column::•(mainAxisSize: #lib29::MainAxisSize::min, children: <#lib1::Widget>[new #lib22::ConstrainedBox::•(constraints: const #lib30::BoxConstraints::•(maxWidth: 200.0), child: new #lib11::Text::•("\$${this.{twe::_TweenDemoState::animation}{#lib20::Animation<dart.core::double>}.{#lib20::Animation::value}{dart.core::double}.{dart.core::num::toStringAsFixed}(2){(dart.core::int) → dart.core::String}}", style: const #lib6::TextStyle::•(fontSize: 24.0))), new #lib24::ElevatedButton::•(child: new #lib11::Text::•("Win the lottery"), onPressed: () → void {
        #L3:
        PatternSwitchStatement
      })])));
    }
  }
}
library from "package:animations/src/misc/animated_list.dart" as ani4 {

  import "package:flutter/material.dart";

  class AnimatedListDemo extends #lib1::StatefulWidget /*hasConstConstructor*/  {
    static field dart.core::String routeName = "misc/animated_list";
    const constructor •({#lib2::Key? key = null}) → ani4::AnimatedListDemo
      : super #lib1::StatefulWidget::•(key: key)
      ;
    @dart.core::override
    method createState() → #lib1::State<ani4::AnimatedListDemo>
      return new ani4::_AnimatedListDemoState::•();
  }
  class _AnimatedListDemoState extends #lib1::State<ani4::AnimatedListDemo> {
    final field #lib1::GlobalKey<#lib44::AnimatedListState> _listKey = #lib1::GlobalKey::•<#lib44::AnimatedListState>();
    final field dart.core::List<ani4::UserModel> listData = <ani4::UserModel>[new ani4::UserModel::•(0, "Govind", "Dixit"), new ani4::UserModel::•(1, "Greta", "Stoll"), new ani4::UserModel::•(2, "Monty", "Carlo"), new ani4::UserModel::•(3, "Petey", "Cruiser"), new ani4::UserModel::•(4, "Barry", "Cade")];
    final field dart.core::int initialListSize = 5;
    synthetic constructor •() → ani4::_AnimatedListDemoState
      : super #lib1::State::•()
      ;
    method addUser() → void {
      this.{#lib1::State::setState}(() → void {
        dart.core::int index = this.{ani4::_AnimatedListDemoState::listData}{dart.core::List<ani4::UserModel>}.{dart.core::List::length}{dart.core::int};
        this.{ani4::_AnimatedListDemoState::listData}{dart.core::List<ani4::UserModel>}.{dart.core::List::add}(new ani4::UserModel::•(ani4::_maxIdValue = ani4::_maxIdValue.{dart.core::num::+}(1){(dart.core::num) → dart.core::int}, "New", "Person")){(ani4::UserModel) → void};
        this.{ani4::_AnimatedListDemoState::_listKey}{#lib1::GlobalKey<#lib44::AnimatedListState>}.{#lib1::GlobalKey::currentState}{#lib44::AnimatedListState?}!.{#lib44::_AnimatedScrollViewState::insertItem}(index, duration: const dart.core::Duration::•(milliseconds: 300)){(dart.core::int, {duration: dart.core::Duration}) → void};
      }){(() → void) → void};
    }
    method deleteUser(dart.core::int id) → void {
      this.{#lib1::State::setState}(() → void {
        final dart.core::int index = this.{ani4::_AnimatedListDemoState::listData}{dart.core::List<ani4::UserModel>}.{dart.core::List::indexWhere}((ani4::UserModel u) → dart.core::bool => u.{ani4::UserModel::id}{dart.core::int} =={dart.core::num::==}{(dart.core::Object) → dart.core::bool} id){((ani4::UserModel) → dart.core::bool, [dart.core::int]) → dart.core::int};
        ani4::UserModel user = this.{ani4::_AnimatedListDemoState::listData}{dart.core::List<ani4::UserModel>}.{dart.core::List::removeAt}(index){(dart.core::int) → ani4::UserModel};
        this.{ani4::_AnimatedListDemoState::_listKey}{#lib1::GlobalKey<#lib44::AnimatedListState>}.{#lib1::GlobalKey::currentState}{#lib44::AnimatedListState?}!.{#lib44::_AnimatedScrollViewState::removeItem}(index, (#lib1::BuildContext context, #lib20::Animation<dart.core::double> animation) → #lib23::FadeTransition {
          return new #lib23::FadeTransition::•(opacity: new #lib37::CurvedAnimation::•(parent: animation, curve: const #lib38::Interval::•(0.5, 1.0)), child: new #lib23::SizeTransition::•(sizeFactor: new #lib37::CurvedAnimation::•(parent: animation, curve: const #lib38::Interval::•(0.0, 1.0)), axisAlignment: 0.0, child: this.{ani4::_AnimatedListDemoState::_buildItem}(user){(ani4::UserModel) → #lib1::Widget}));
        }, duration: const dart.core::Duration::•(milliseconds: 600)){(dart.core::int, (#lib1::BuildContext, #lib20::Animation<dart.core::double>) → #lib1::Widget, {duration: dart.core::Duration}) → void};
      }){(() → void) → void};
    }
    method _buildItem(ani4::UserModel user) → #lib1::Widget {
      return new #lib13::ListTile::•(key: new #lib2::ValueKey::•<ani4::UserModel>(user), title: new #lib11::Text::•(user.{ani4::UserModel::firstName}{dart.core::String}), subtitle: new #lib11::Text::•(user.{ani4::UserModel::lastName}{dart.core::String}), leading: const #lib45::CircleAvatar::•(child: const #lib39::Icon::•(#lib40::Icons::person)), trailing: new #lib46::IconButton::•(icon: const #lib39::Icon::•(#lib40::Icons::delete), onPressed: () → void => this.{ani4::_AnimatedListDemoState::deleteUser}(user.{ani4::UserModel::id}{dart.core::int}){(dart.core::int) → void}));
    }
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib9::Scaffold::•(appBar: new #lib10::AppBar::•(title: const #lib11::Text::•("AnimatedList"), actions: <#lib1::Widget>[new #lib46::IconButton::•(icon: const #lib39::Icon::•(#lib40::Icons::add), onPressed: this.{ani4::_AnimatedListDemoState::addUser}{() → void})]), body: new #lib32::SafeArea::•(child: new #lib44::AnimatedList::•(key: this.{ani4::_AnimatedListDemoState::_listKey}{#lib1::GlobalKey<#lib44::AnimatedListState>}, initialItemCount: 5, itemBuilder: (#lib1::BuildContext context, dart.core::int index, #lib20::Animation<dart.core::double> animation) → #lib23::FadeTransition {
        return new #lib23::FadeTransition::•(opacity: animation, child: this.{ani4::_AnimatedListDemoState::_buildItem}(this.{ani4::_AnimatedListDemoState::listData}{dart.core::List<ani4::UserModel>}.{dart.core::List::[]}(index){(dart.core::int) → ani4::UserModel}){(ani4::UserModel) → #lib1::Widget});
      })));
    }
  }
  class UserModel extends dart.core::Object {
    final field dart.core::int id;
    final field dart.core::String firstName;
    final field dart.core::String lastName;
    constructor •(dart.core::int id, dart.core::String firstName, dart.core::String lastName) → ani4::UserModel
      : ani4::UserModel::id = id, ani4::UserModel::firstName = firstName, ani4::UserModel::lastName = lastName, super dart.core::Object::•()
      ;
  }
  static field dart.core::int _maxIdValue = 4;
}
library from "package:animations/src/misc/animated_positioned.dart" as ani5 {

  import "dart:math";
  import "package:flutter/material.dart";

  class AnimatedPositionedDemo extends #lib1::StatefulWidget /*hasConstConstructor*/  {
    static field dart.core::String routeName = "misc/animated_positioned";
    const constructor •({#lib2::Key? key = null}) → ani5::AnimatedPositionedDemo
      : super #lib1::StatefulWidget::•(key: key)
      ;
    @dart.core::override
    method createState() → #lib1::State<ani5::AnimatedPositionedDemo>
      return new ani5::_AnimatedPositionedDemoState::•();
  }
  class _AnimatedPositionedDemoState extends #lib1::State<ani5::AnimatedPositionedDemo> {
    late field dart.core::double topPosition;
    late field dart.core::double leftPosition;
    synthetic constructor •() → ani5::_AnimatedPositionedDemoState
      : super #lib1::State::•()
      ;
    method generateTopPosition(dart.core::double top) → dart.core::double
      return dart.math::Random::•().{dart.math::Random::nextDouble}(){() → dart.core::double}.{dart.core::double::*}(top){(dart.core::num) → dart.core::double};
    method generateLeftPosition(dart.core::double left) → dart.core::double
      return dart.math::Random::•().{dart.math::Random::nextDouble}(){() → dart.core::double}.{dart.core::double::*}(left){(dart.core::num) → dart.core::double};
    @dart.core::override
    method initState() → void {
      super.{#lib1::State::initState}();
      this.{ani5::_AnimatedPositionedDemoState::topPosition} = this.{ani5::_AnimatedPositionedDemoState::generateTopPosition}(30.0){(dart.core::double) → dart.core::double};
      this.{ani5::_AnimatedPositionedDemoState::leftPosition} = this.{ani5::_AnimatedPositionedDemoState::generateLeftPosition}(30.0){(dart.core::double) → dart.core::double};
    }
    method changePosition(dart.core::double top, dart.core::double left) → void {
      this.{#lib1::State::setState}(() → void {
        this.{ani5::_AnimatedPositionedDemoState::topPosition} = this.{ani5::_AnimatedPositionedDemoState::generateTopPosition}(top){(dart.core::double) → dart.core::double};
        this.{ani5::_AnimatedPositionedDemoState::leftPosition} = this.{ani5::_AnimatedPositionedDemoState::generateLeftPosition}(left){(dart.core::double) → dart.core::double};
      }){(() → void) → void};
    }
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      final dart.ui::Size size = #lib47::MediaQuery::of(context).{#lib47::MediaQueryData::size}{dart.ui::Size};
      final #lib10::AppBar appBar = new #lib10::AppBar::•(title: const #lib11::Text::•("AnimatedPositioned"));
      final dart.core::double topPadding = #lib47::MediaQuery::of(context).{#lib47::MediaQueryData::padding}{#lib25::EdgeInsets}.{#lib25::EdgeInsets::top}{dart.core::double};
      return new #lib9::Scaffold::•(appBar: appBar, body: new #lib22::SizedBox::•(height: size.{dart.ui::Size::height}{dart.core::double}, width: size.{dart.ui::Size::width}{dart.core::double}, child: new #lib22::Stack::•(children: <#lib1::Widget>[new #lib26::AnimatedPositioned::•(top: this.{ani5::_AnimatedPositionedDemoState::topPosition}{dart.core::double}, left: this.{ani5::_AnimatedPositionedDemoState::leftPosition}{dart.core::double}, duration: const dart.core::Duration::•(seconds: 1), child: new #lib48::InkWell::•(onTap: () → void => this.{ani5::_AnimatedPositionedDemoState::changePosition}(size.{dart.ui::Size::height}{dart.core::double}.{dart.core::double::-}(appBar.{#lib10::AppBar::preferredSize}{dart.ui::Size}.{dart.ui::Size::height}{dart.core::double}.{dart.core::double::+}(topPadding){(dart.core::num) → dart.core::double}.{dart.core::double::+}(50){(dart.core::num) → dart.core::double}){(dart.core::num) → dart.core::double}, size.{dart.ui::Size::width}{dart.core::double}.{dart.core::double::-}(150){(dart.core::num) → dart.core::double}){(dart.core::double, dart.core::double) → void}, child: new #lib33::Container::•(alignment: #lib34::Alignment::center, width: 150.0, height: 50.0, color: #lib7::Theme::of(context).{#lib4::ThemeData::primaryColor}{dart.ui::Color}, child: new #lib11::Text::•("Click Me", style: new #lib6::TextStyle::•(color: #lib7::Theme::of(context).{#lib4::ThemeData::buttonTheme}{#lib49::ButtonThemeData}.{#lib49::ButtonThemeData::colorScheme}{#lib50::ColorScheme?}!.{#lib50::ColorScheme::onPrimary}{dart.ui::Color})))))])));
    }
  }
}
library from "package:animations/src/misc/animated_switcher.dart" as ani6 {

  import "dart:math";
  import "package:flutter/material.dart";

  class AnimatedSwitcherDemo extends #lib1::StatefulWidget /*hasConstConstructor*/  {
    static field dart.core::String routeName = "misc/animated_switcher";
    const constructor •({#lib2::Key? key = null}) → ani6::AnimatedSwitcherDemo
      : super #lib1::StatefulWidget::•(key: key)
      ;
    @dart.core::override
    method createState() → #lib1::State<ani6::AnimatedSwitcherDemo>
      return new ani6::_AnimatedSwitcherDemoState::•();
  }
  class _AnimatedSwitcherDemoState extends #lib1::State<ani6::AnimatedSwitcherDemo> {
    late field #lib1::Widget container;
    late field dart.core::int keyCount;
    synthetic constructor •() → ani6::_AnimatedSwitcherDemoState
      : super #lib1::State::•()
      ;
    @dart.core::override
    method initState() → void {
      super.{#lib1::State::initState}();
      this.{ani6::_AnimatedSwitcherDemoState::keyCount} = 0;
      this.{ani6::_AnimatedSwitcherDemoState::container} = ani6::generateContainer(this.{ani6::_AnimatedSwitcherDemoState::keyCount}{dart.core::int});
    }
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib9::Scaffold::•(appBar: new #lib10::AppBar::•(title: const #lib11::Text::•("AnimatedSwitcher"), actions: <#lib1::Widget>[new #lib31::TextButton::•(onPressed: () → void => this.{#lib1::State::setState}(() → void => this.{ani6::_AnimatedSwitcherDemoState::container} = ani6::generateContainer(this.{ani6::_AnimatedSwitcherDemoState::keyCount} = this.{ani6::_AnimatedSwitcherDemoState::keyCount}{dart.core::int}.{dart.core::num::+}(1){(dart.core::num) → dart.core::int})){(() → void) → void}, child: const #lib11::Text::•("Change Widget"))]), body: new #lib22::Center::•(child: new #lib51::AnimatedSwitcher::•(duration: const dart.core::Duration::•(seconds: 1), child: this.{ani6::_AnimatedSwitcherDemoState::container}{#lib1::Widget}, transitionBuilder: (#lib1::Widget child, #lib20::Animation<dart.core::double> animation) → #lib23::ScaleTransition => new #lib23::ScaleTransition::•(scale: animation, child: child))));
    }
  }
  static method generateColor() → dart.ui::Color
    return new dart.ui::Color::•(4294967295.{dart.core::int::&}(dart.math::Random::•().{dart.math::Random::nextInt}(4294967295){(dart.core::int) → dart.core::int}){(dart.core::int) → dart.core::int});
  static method generateContainer(dart.core::int keyCount) → #lib1::Widget
    return new #lib33::Container::•(key: new #lib2::ValueKey::•<dart.core::int>(keyCount), height: dart.math::Random::•().{dart.math::Random::nextDouble}(){() → dart.core::double}.{dart.core::double::*}(200){(dart.core::num) → dart.core::double}, width: dart.math::Random::•().{dart.math::Random::nextDouble}(){() → dart.core::double}.{dart.core::double::*}(200){(dart.core::num) → dart.core::double}, decoration: new #lib27::BoxDecoration::•(color: ani6::generateColor(), borderRadius: new #lib28::BorderRadius::circular(dart.math::Random::•().{dart.math::Random::nextDouble}(){() → dart.core::double}.{dart.core::double::*}(100){(dart.core::num) → dart.core::double}), border: #lib52::Border::all(color: ani6::generateColor(), width: dart.math::Random::•().{dart.math::Random::nextDouble}(){() → dart.core::double}.{dart.core::double::*}(5){(dart.core::num) → dart.core::double})));
}
library from "package:animations/src/misc/card_swipe.dart" as car2 {

  import "package:flutter/material.dart";
  import "package:flutter/physics.dart";

  class CardSwipeDemo extends #lib1::StatefulWidget /*hasConstConstructor*/  {
    static field dart.core::String routeName = "misc/card_swipe";
    const constructor •({#lib2::Key? key = null}) → car2::CardSwipeDemo
      : super #lib1::StatefulWidget::•(key: key)
      ;
    @dart.core::override
    method createState() → #lib1::State<car2::CardSwipeDemo>
      return new car2::_CardSwipeDemoState::•();
  }
  class _CardSwipeDemoState extends #lib1::State<car2::CardSwipeDemo> {
    late field dart.core::List<dart.core::String> fileNames;
    synthetic constructor •() → car2::_CardSwipeDemoState
      : super #lib1::State::•()
      ;
    @dart.core::override
    method initState() → void {
      super.{#lib1::State::initState}();
      this.{car2::_CardSwipeDemoState::_resetCards}(){() → void};
    }
    method _resetCards() → void {
      this.{car2::_CardSwipeDemoState::fileNames} = <dart.core::String>["assets/eat_cape_town_sm.jpg", "assets/eat_new_orleans_sm.jpg", "assets/eat_sydney_sm.jpg"];
    }
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib9::Scaffold::•(appBar: new #lib10::AppBar::•(title: const #lib11::Text::•("Card Swipe")), body: new #lib22::Padding::•(padding: const #lib25::EdgeInsets::all(12.0), child: new #lib22::Center::•(child: new #lib22::Column::•(children: <#lib1::Widget>[new #lib22::Expanded::•(child: new #lib22::ClipRect::•(child: new #lib22::Stack::•(children: block {
        final dart.core::List<#lib1::Widget> #t4 = <#lib1::Widget>[];
        for (final dart.core::String fileName in this.{car2::_CardSwipeDemoState::fileNames}{dart.core::List<dart.core::String>})
          #t4.{dart.core::List::add}{Invariant}(new car2::SwipeableCard::•(imageAssetName: fileName, onSwiped: () → void {
            this.{#lib1::State::setState}(() → void {
              this.{car2::_CardSwipeDemoState::fileNames}{dart.core::List<dart.core::String>}.{dart.core::List::remove}(fileName){(dart.core::Object?) → dart.core::bool};
            }){(() → void) → void};
          })){(#lib1::Widget) → void};
      } =>#t4))), new #lib24::ElevatedButton::•(child: const #lib11::Text::•("Refill"), onPressed: () → void {
        this.{#lib1::State::setState}(() → void {
          this.{car2::_CardSwipeDemoState::_resetCards}(){() → void};
        }){(() → void) → void};
      })]))));
    }
  }
  class Card extends #lib1::StatelessWidget /*hasConstConstructor*/  {
    final field dart.core::String imageAssetName;
    const constructor •({required dart.core::String imageAssetName = null, #lib2::Key? key = null}) → car2::Card
      : car2::Card::imageAssetName = imageAssetName, super #lib1::StatelessWidget::•(key: key)
      ;
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib22::AspectRatio::•(aspectRatio: 3.{dart.core::num::/}(5){(dart.core::num) → dart.core::double}, child: new #lib33::DecoratedBox::•(decoration: new #lib27::BoxDecoration::•(borderRadius: new #lib28::BorderRadius::circular(20.0), image: new #lib53::DecorationImage::•(image: new #lib54::AssetImage::•(this.{car2::Card::imageAssetName}{dart.core::String}), fit: #lib55::BoxFit::cover))));
    }
  }
  class SwipeableCard extends #lib1::StatefulWidget /*hasConstConstructor*/  {
    final field dart.core::String imageAssetName;
    final field () → void onSwiped;
    const constructor •({required () → void onSwiped = null, required dart.core::String imageAssetName = null, #lib2::Key? key = null}) → car2::SwipeableCard
      : car2::SwipeableCard::onSwiped = onSwiped, car2::SwipeableCard::imageAssetName = imageAssetName, super #lib1::StatefulWidget::•(key: key)
      ;
    @dart.core::override
    method createState() → #lib1::State<car2::SwipeableCard>
      return new car2::_SwipeableCardState::•();
  }
  abstract class __SwipeableCardState&State&SingleTickerProviderStateMixin = #lib1::State<car2::SwipeableCard> with #lib15::SingleTickerProviderStateMixin<car2::SwipeableCard> /*isAnonymousMixin*/  {
    synthetic constructor •() → car2::__SwipeableCardState&State&SingleTickerProviderStateMixin
      : super #lib1::State::•()
      ;
    mixin-super-stub method dispose() → void
      return super.{#lib15::SingleTickerProviderStateMixin::dispose}();
    mixin-super-stub get _ticker() → #lib16::Ticker?
      return super.{#lib15::SingleTickerProviderStateMixin::_ticker};
    mixin-super-stub set _ticker(#lib16::Ticker? value) → void
      return super.{#lib15::SingleTickerProviderStateMixin::_ticker} = value;
    mixin-super-stub get _tickerModeNotifier() → #lib17::ValueNotifier<dart.core::bool>?
      return super.{#lib15::SingleTickerProviderStateMixin::_tickerModeNotifier};
    mixin-super-stub set _tickerModeNotifier(#lib17::ValueNotifier<dart.core::bool>? value) → void
      return super.{#lib15::SingleTickerProviderStateMixin::_tickerModeNotifier} = value;
    mixin-super-stub method createTicker((dart.core::Duration) → void onTick) → #lib16::Ticker
      return super.{#lib15::SingleTickerProviderStateMixin::createTicker}(onTick);
    mixin-super-stub method activate() → void
      return super.{#lib15::SingleTickerProviderStateMixin::activate}();
    mixin-super-stub method _updateTicker() → void
      return super.{#lib15::SingleTickerProviderStateMixin::_updateTicker}();
    mixin-super-stub method _updateTickerModeNotifier() → void
      return super.{#lib15::SingleTickerProviderStateMixin::_updateTickerModeNotifier}();
    mixin-super-stub method debugFillProperties(#lib18::DiagnosticPropertiesBuilder properties) → void
      return super.{#lib15::SingleTickerProviderStateMixin::debugFillProperties}(properties);
  }
  class _SwipeableCardState extends car2::__SwipeableCardState&State&SingleTickerProviderStateMixin {
    late field #lib19::AnimationController _controller;
    late field #lib20::Animation<dart.ui::Offset> _animation;
    late field dart.core::double _dragStartX;
    field dart.core::bool _isSwipingLeft = false;
    synthetic constructor •() → car2::_SwipeableCardState
      : super car2::__SwipeableCardState&State&SingleTickerProviderStateMixin::•()
      ;
    @dart.core::override
    method initState() → void {
      super.{#lib1::State::initState}();
      this.{car2::_SwipeableCardState::_controller} = new #lib19::AnimationController::unbounded(vsync: this);
      this.{car2::_SwipeableCardState::_animation} = this.{car2::_SwipeableCardState::_controller}{#lib19::AnimationController}.{#lib20::Animation::drive}<dart.ui::Offset>(new #lib21::Tween::•<dart.ui::Offset>(begin: dart.ui::Offset::zero, end: const dart.ui::Offset::•(1.0, 0.0))){(#lib21::Animatable<dart.ui::Offset>) → #lib20::Animation<dart.ui::Offset>};
    }
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib23::SlideTransition::•(position: this.{car2::_SwipeableCardState::_animation}{#lib20::Animation<dart.ui::Offset>}, child: new #lib56::GestureDetector::•(onHorizontalDragStart: this.{car2::_SwipeableCardState::_dragStart}{(#lib57::DragStartDetails) → void}, onHorizontalDragUpdate: this.{car2::_SwipeableCardState::_dragUpdate}{(#lib57::DragUpdateDetails) → void}, onHorizontalDragEnd: this.{car2::_SwipeableCardState::_dragEnd}{(#lib57::DragEndDetails) → void}, child: new car2::Card::•(imageAssetName: this.{#lib1::State::widget}{car2::SwipeableCard}.{car2::SwipeableCard::imageAssetName}{dart.core::String})));
    }
    method _dragStart(#lib57::DragStartDetails details) → void {
      this.{car2::_SwipeableCardState::_dragStartX} = details.{#lib57::DragStartDetails::localPosition}{dart.ui::Offset}.{dart.ui::Offset::dx}{dart.core::double};
    }
    method _dragUpdate(#lib57::DragUpdateDetails details) → void {
      dart.core::bool isSwipingLeft = details.{#lib57::DragUpdateDetails::localPosition}{dart.ui::Offset}.{dart.ui::Offset::dx}{dart.core::double}.{dart.core::double::-}(this.{car2::_SwipeableCardState::_dragStartX}{dart.core::double}){(dart.core::num) → dart.core::double}.{dart.core::num::<}(0){(dart.core::num) → dart.core::bool};
      if(!(isSwipingLeft =={dart.core::Object::==}{(dart.core::Object) → dart.core::bool} this.{car2::_SwipeableCardState::_isSwipingLeft}{dart.core::bool})) {
        this.{car2::_SwipeableCardState::_isSwipingLeft} = isSwipingLeft;
        this.{car2::_SwipeableCardState::_updateAnimation}(details.{#lib57::DragUpdateDetails::localPosition}{dart.ui::Offset}.{dart.ui::Offset::dx}{dart.core::double}){(dart.core::double) → void};
      }
      this.{#lib1::State::setState}(() → void {
        final dart.ui::Size? size = this.{#lib1::State::context}{#lib1::BuildContext}.{#lib1::BuildContext::size}{dart.ui::Size?};
        if(size == null) {
          return;
        }
        this.{car2::_SwipeableCardState::_controller}{#lib19::AnimationController}.{#lib19::AnimationController::value} = details.{#lib57::DragUpdateDetails::localPosition}{dart.ui::Offset}.{dart.ui::Offset::dx}{dart.core::double}.{dart.core::double::-}(this.{car2::_SwipeableCardState::_dragStartX}{dart.core::double}){(dart.core::num) → dart.core::double}.{dart.core::double::abs}(){() → dart.core::double}.{dart.core::double::/}(size{dart.ui::Size}.{dart.ui::Size::width}{dart.core::double}){(dart.core::num) → dart.core::double};
      }){(() → void) → void};
    }
    method _dragEnd(#lib57::DragEndDetails details) → void {
      final dart.ui::Size? size = this.{#lib1::State::context}{#lib1::BuildContext}.{#lib1::BuildContext::size}{dart.ui::Size?};
      if(size == null) {
        return;
      }
      dart.core::double velocity = details.{#lib57::DragEndDetails::velocity}{#lib58::Velocity}.{#lib58::Velocity::pixelsPerSecond}{dart.ui::Offset}.{dart.ui::Offset::dx}{dart.core::double}.{dart.core::double::/}(size{dart.ui::Size}.{dart.ui::Size::width}{dart.core::double}){(dart.core::num) → dart.core::double}.{dart.core::double::abs}(){() → dart.core::double};
      this.{car2::_SwipeableCardState::_animate}(velocity: velocity){({velocity: dart.core::double}) → void};
    }
    method _updateAnimation(dart.core::double dragPosition) → void {
      this.{car2::_SwipeableCardState::_animation} = this.{car2::_SwipeableCardState::_controller}{#lib19::AnimationController}.{#lib20::Animation::drive}<dart.ui::Offset>(new #lib21::Tween::•<dart.ui::Offset>(begin: dart.ui::Offset::zero, end: this.{car2::_SwipeableCardState::_isSwipingLeft}{dart.core::bool} ?{dart.ui::Offset} const dart.ui::Offset::•(-1.0, 0.0) : const dart.ui::Offset::•(1.0, 0.0))){(#lib21::Animatable<dart.ui::Offset>) → #lib20::Animation<dart.ui::Offset>};
    }
    method _animate({dart.core::double velocity = 0.0}) → void {
      #lib59::SpringDescription description = const #lib59::SpringDescription::•(mass: 50.0, stiffness: 1.0, damping: 1.0);
      #lib59::SpringSimulation simulation = new #lib59::SpringSimulation::•(description, this.{car2::_SwipeableCardState::_controller}{#lib19::AnimationController}.{#lib19::AnimationController::value}{dart.core::double}, 1.0, velocity);
      this.{car2::_SwipeableCardState::_controller}{#lib19::AnimationController}.{#lib19::AnimationController::animateWith}(simulation){(#lib60::Simulation) → #lib16::TickerFuture}.{#lib16::TickerFuture::then}<void>((void _) → Null {
        this.{#lib1::State::widget}{car2::SwipeableCard}.{car2::SwipeableCard::onSwiped}{() → void}(){() → void};
      }){((void) → FutureOr<void>, {onError: dart.core::Function?}) → dart.async::Future<void>};
    }
    @dart.core::override
    method dispose() → void {
      this.{car2::_SwipeableCardState::_controller}{#lib19::AnimationController}.{#lib19::AnimationController::dispose}(){() → void};
      super.{car2::__SwipeableCardState&State&SingleTickerProviderStateMixin::dispose}();
    }
  }
}
library from "package:animations/src/misc/carousel.dart" as car {

  import "dart:ui" as ui;
  import "package:flutter/material.dart";

  typedef OnCurrentItemChangedCallback = (dart.core::int) → void;
  class CarouselDemo extends #lib1::StatelessWidget {
    static field dart.core::String routeName = "misc/carousel";
    static const field dart.core::List<dart.core::String> fileNames = const <dart.core::String>["assets/eat_cape_town_sm.jpg", "assets/eat_new_orleans_sm.jpg", "assets/eat_sydney_sm.jpg"];
    final field dart.core::List<#lib1::Widget> images = car::CarouselDemo::fileNames.{dart.core::Iterable::map}<#lib61::Image>((dart.core::String file) → #lib61::Image => new #lib61::Image::asset(file, fit: #lib55::BoxFit::cover)){((dart.core::String) → #lib61::Image) → dart.core::Iterable<#lib61::Image>}.{dart.core::Iterable::toList}(){({growable: dart.core::bool}) → dart.core::List<#lib61::Image>};
    constructor •({#lib2::Key? key = null}) → car::CarouselDemo
      : super #lib1::StatelessWidget::•(key: key)
      ;
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib9::Scaffold::•(appBar: new #lib10::AppBar::•(title: const #lib11::Text::•("Carousel Demo")), body: new #lib22::Center::•(child: new #lib22::Padding::•(padding: const #lib25::EdgeInsets::all(16.0), child: new #lib22::AspectRatio::•(aspectRatio: 1.0, child: new car::Carousel::•(itemBuilder: this.{car::CarouselDemo::widgetBuilder}{(#lib1::BuildContext, dart.core::int) → #lib1::Widget})))));
    }
    method widgetBuilder(#lib1::BuildContext context, dart.core::int index) → #lib1::Widget {
      return this.{car::CarouselDemo::images}{dart.core::List<#lib1::Widget>}.{dart.core::List::[]}(index.{dart.core::num::%}(this.{car::CarouselDemo::images}{dart.core::List<#lib1::Widget>}.{dart.core::List::length}{dart.core::int}){(dart.core::num) → dart.core::int}){(dart.core::int) → #lib1::Widget};
    }
  }
  class Carousel extends #lib1::StatefulWidget /*hasConstConstructor*/  {
    final field (#lib1::BuildContext, dart.core::int) → #lib1::Widget itemBuilder;
    const constructor •({#lib2::Key? key = null, required (#lib1::BuildContext, dart.core::int) → #lib1::Widget itemBuilder = null}) → car::Carousel
      : car::Carousel::itemBuilder = itemBuilder, super #lib1::StatefulWidget::•(key: key)
      ;
    @dart.core::override
    method createState() → #lib1::State<car::Carousel>
      return new car::_CarouselState::•();
  }
  class _CarouselState extends #lib1::State<car::Carousel> {
    late final [setter] field #lib62::PageController _controller;
    late field dart.core::int _currentPage;
    field dart.core::bool _pageHasChanged = false;
    synthetic constructor •() → car::_CarouselState
      : super #lib1::State::•()
      ;
    @dart.core::override
    method initState() → void {
      super.{#lib1::State::initState}();
      this.{car::_CarouselState::_currentPage} = 0;
      this.{car::_CarouselState::_controller} = new #lib62::PageController::•(viewportFraction: 0.85, initialPage: this.{car::_CarouselState::_currentPage}{dart.core::int});
    }
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      dart.ui::Size size = #lib47::MediaQuery::of(context).{#lib47::MediaQueryData::size}{dart.ui::Size};
      return new #lib62::PageView::builder(onPageChanged: (dart.core::int value) → void {
        this.{#lib1::State::setState}(() → void {
          this.{car::_CarouselState::_pageHasChanged} = true;
          this.{car::_CarouselState::_currentPage} = value;
        }){(() → void) → void};
      }, controller: this.{car::_CarouselState::_controller}{#lib62::PageController}, scrollBehavior: #lib63::ScrollConfiguration::of(context).{#lib63::ScrollBehavior::copyWith}(dragDevices: <dart.ui::PointerDeviceKind>{dart.ui::PointerDeviceKind::touch, dart.ui::PointerDeviceKind::mouse}){({androidOverscrollIndicator: #lib63::AndroidOverscrollIndicator?, dragDevices: dart.core::Set<dart.ui::PointerDeviceKind>?, overscroll: dart.core::bool?, physics: #lib64::ScrollPhysics?, platform: #lib65::TargetPlatform?, pointerAxisModifiers: dart.core::Set<#lib66::LogicalKeyboardKey>?, scrollbars: dart.core::bool?}) → #lib63::ScrollBehavior}, itemBuilder: (#lib1::BuildContext context, dart.core::int index) → #lib23::AnimatedBuilder => new #lib23::AnimatedBuilder::•(animation: this.{car::_CarouselState::_controller}{#lib62::PageController}, builder: (#lib1::BuildContext context, #lib1::Widget? child) → #lib22::Center {
        dart.core::double result = this.{car::_CarouselState::_pageHasChanged}{dart.core::bool} ?{dart.core::double} this.{car::_CarouselState::_controller}{#lib62::PageController}.{#lib62::PageController::page}{dart.core::double?}! : this.{car::_CarouselState::_currentPage}{dart.core::int}.{dart.core::num::*}(1.0){(dart.core::num) → dart.core::double};
        dart.core::double value = result.{dart.core::double::-}(index){(dart.core::num) → dart.core::double};
        value = 1.{dart.core::num::-}(value.{dart.core::double::abs}(){() → dart.core::double}.{dart.core::double::*}(0.5){(dart.core::num) → dart.core::double}){(dart.core::num) → dart.core::double}.{dart.core::num::clamp}(0.0, 1.0){(dart.core::num, dart.core::num) → dart.core::double};
        return new #lib22::Center::•(child: new #lib22::SizedBox::•(height: #lib38::Curves::easeOut.{#lib38::Curve::transform}(value){(dart.core::double) → dart.core::double}.{dart.core::double::*}(size.{dart.ui::Size::height}{dart.core::double}){(dart.core::num) → dart.core::double}, width: #lib38::Curves::easeOut.{#lib38::Curve::transform}(value){(dart.core::double) → dart.core::double}.{dart.core::double::*}(size.{dart.ui::Size::width}{dart.core::double}){(dart.core::num) → dart.core::double}, child: child));
      }, child: let final car::Carousel #t5 = this.{#lib1::State::widget}{car::Carousel} in let final #lib1::BuildContext #t6 = context in let final dart.core::int #t7 = index in #t5.{car::Carousel::itemBuilder}{(#lib1::BuildContext, dart.core::int) → #lib1::Widget}(#t6, #t7){(#lib1::BuildContext, dart.core::int) → #lib1::Widget}));
    }
    @dart.core::override
    method dispose() → void {
      this.{car::_CarouselState::_controller}{#lib62::PageController}.{#lib67::ScrollController::dispose}(){() → void};
      super.{#lib1::State::dispose}();
    }
  }
}
library from "package:animations/src/misc/curved_animation.dart" as cur {

  import "dart:math" as math;
  import "package:flutter/material.dart";

  class CurvedAnimationDemo extends #lib1::StatefulWidget /*hasConstConstructor*/  {
    static const field dart.core::String routeName = "misc/curved_animation";
    const constructor •({#lib2::Key? key = null}) → cur::CurvedAnimationDemo
      : super #lib1::StatefulWidget::•(key: key)
      ;
    @dart.core::override
    method createState() → #lib1::State<cur::CurvedAnimationDemo>
      return new cur::_CurvedAnimationDemoState::•();
  }
  class CurveChoice extends dart.core::Object /*hasConstConstructor*/  {
    final field #lib38::Curve curve;
    final field dart.core::String name;
    const constructor •({required #lib38::Curve curve = null, required dart.core::String name = null}) → cur::CurveChoice
      : cur::CurveChoice::curve = curve, cur::CurveChoice::name = name, super dart.core::Object::•()
      ;
  }
  abstract class __CurvedAnimationDemoState&State&SingleTickerProviderStateMixin = #lib1::State<cur::CurvedAnimationDemo> with #lib15::SingleTickerProviderStateMixin<cur::CurvedAnimationDemo> /*isAnonymousMixin*/  {
    synthetic constructor •() → cur::__CurvedAnimationDemoState&State&SingleTickerProviderStateMixin
      : super #lib1::State::•()
      ;
    mixin-super-stub method dispose() → void
      return super.{#lib15::SingleTickerProviderStateMixin::dispose}();
    mixin-super-stub get _ticker() → #lib16::Ticker?
      return super.{#lib15::SingleTickerProviderStateMixin::_ticker};
    mixin-super-stub set _ticker(#lib16::Ticker? value) → void
      return super.{#lib15::SingleTickerProviderStateMixin::_ticker} = value;
    mixin-super-stub get _tickerModeNotifier() → #lib17::ValueNotifier<dart.core::bool>?
      return super.{#lib15::SingleTickerProviderStateMixin::_tickerModeNotifier};
    mixin-super-stub set _tickerModeNotifier(#lib17::ValueNotifier<dart.core::bool>? value) → void
      return super.{#lib15::SingleTickerProviderStateMixin::_tickerModeNotifier} = value;
    mixin-super-stub method createTicker((dart.core::Duration) → void onTick) → #lib16::Ticker
      return super.{#lib15::SingleTickerProviderStateMixin::createTicker}(onTick);
    mixin-super-stub method activate() → void
      return super.{#lib15::SingleTickerProviderStateMixin::activate}();
    mixin-super-stub method _updateTicker() → void
      return super.{#lib15::SingleTickerProviderStateMixin::_updateTicker}();
    mixin-super-stub method _updateTickerModeNotifier() → void
      return super.{#lib15::SingleTickerProviderStateMixin::_updateTickerModeNotifier}();
    mixin-super-stub method debugFillProperties(#lib18::DiagnosticPropertiesBuilder properties) → void
      return super.{#lib15::SingleTickerProviderStateMixin::debugFillProperties}(properties);
  }
  class _CurvedAnimationDemoState extends cur::__CurvedAnimationDemoState&State&SingleTickerProviderStateMixin {
    late final [setter] field #lib19::AnimationController controller;
    late final [setter] field #lib20::Animation<dart.core::double> animationRotation;
    late final [setter] field #lib20::Animation<dart.ui::Offset> animationTranslation;
    static const field dart.core::Duration _duration = const dart.core::Duration::•(seconds: 4);
    field dart.core::List<cur::CurveChoice> curves = const <cur::CurveChoice>[const cur::CurveChoice::•(curve: #lib38::Curves::bounceIn, name: "Bounce In"), const cur::CurveChoice::•(curve: #lib38::Curves::bounceOut, name: "Bounce Out"), const cur::CurveChoice::•(curve: #lib38::Curves::easeInCubic, name: "Ease In Cubic"), const cur::CurveChoice::•(curve: #lib38::Curves::easeOutCubic, name: "Ease Out Cubic"), const cur::CurveChoice::•(curve: #lib38::Curves::easeInExpo, name: "Ease In Expo"), const cur::CurveChoice::•(curve: #lib38::Curves::easeOutExpo, name: "Ease Out Expo"), const cur::CurveChoice::•(curve: #lib38::Curves::elasticIn, name: "Elastic In"), const cur::CurveChoice::•(curve: #lib38::Curves::elasticOut, name: "Elastic Out"), const cur::CurveChoice::•(curve: #lib38::Curves::easeInQuart, name: "Ease In Quart"), const cur::CurveChoice::•(curve: #lib38::Curves::easeOutQuart, name: "Ease Out Quart"), const cur::CurveChoice::•(curve: #lib38::Curves::easeInCirc, name: "Ease In Circle"), const cur::CurveChoice::•(curve: #lib38::Curves::easeOutCirc, name: "Ease Out Circle")];
    late field cur::CurveChoice selectedForwardCurve;
    late field cur::CurveChoice selectedReverseCurve;
    late final [setter] field #lib37::CurvedAnimation curvedAnimation;
    synthetic constructor •() → cur::_CurvedAnimationDemoState
      : super cur::__CurvedAnimationDemoState&State&SingleTickerProviderStateMixin::•()
      ;
    @dart.core::override
    method initState() → void {
      super.{#lib1::State::initState}();
      this.{cur::_CurvedAnimationDemoState::controller} = new #lib19::AnimationController::•(duration: cur::_CurvedAnimationDemoState::_duration, vsync: this);
      this.{cur::_CurvedAnimationDemoState::selectedForwardCurve} = this.{cur::_CurvedAnimationDemoState::curves}{dart.core::List<cur::CurveChoice>}.{dart.core::List::[]}(0){(dart.core::int) → cur::CurveChoice};
      this.{cur::_CurvedAnimationDemoState::selectedReverseCurve} = this.{cur::_CurvedAnimationDemoState::curves}{dart.core::List<cur::CurveChoice>}.{dart.core::List::[]}(0){(dart.core::int) → cur::CurveChoice};
      this.{cur::_CurvedAnimationDemoState::curvedAnimation} = new #lib37::CurvedAnimation::•(parent: this.{cur::_CurvedAnimationDemoState::controller}{#lib19::AnimationController}, curve: this.{cur::_CurvedAnimationDemoState::selectedForwardCurve}{cur::CurveChoice}.{cur::CurveChoice::curve}{#lib38::Curve}, reverseCurve: this.{cur::_CurvedAnimationDemoState::selectedReverseCurve}{cur::CurveChoice}.{cur::CurveChoice::curve}{#lib38::Curve});
      this.{cur::_CurvedAnimationDemoState::animationRotation} = let final #lib20::Animation<dart.core::double> #t8 = new #lib21::Tween::•<dart.core::double>(begin: 0.0, end: 2.{dart.core::num::*}(dart.math::pi){(dart.core::num) → dart.core::double}).{#lib21::Animatable::animate}(this.{cur::_CurvedAnimationDemoState::curvedAnimation}{#lib37::CurvedAnimation}){(#lib20::Animation<dart.core::double>) → #lib20::Animation<dart.core::double>} in block {
        #t8.{#lib20::Animation::addListener}(() → void {
          this.{#lib1::State::setState}(() → void {}){(() → void) → void};
        }){(() → void) → void};
        #t8.{#lib20::Animation::addStatusListener}((#lib20::AnimationStatus status) → void {
          if(status =={dart.core::Object::==}{(dart.core::Object) → dart.core::bool} #lib20::AnimationStatus::completed) {
            this.{cur::_CurvedAnimationDemoState::controller}{#lib19::AnimationController}.{#lib19::AnimationController::reverse}(){({from: dart.core::double?}) → #lib16::TickerFuture};
          }
        }){((#lib20::AnimationStatus) → void) → void};
      } =>#t8;
      this.{cur::_CurvedAnimationDemoState::animationTranslation} = let final #lib20::Animation<dart.ui::Offset> #t9 = new #lib21::Tween::•<dart.ui::Offset>(begin: const dart.ui::Offset::•(-1.0, 0.0), end: const dart.ui::Offset::•(1.0, 0.0)).{#lib21::Animatable::animate}(this.{cur::_CurvedAnimationDemoState::curvedAnimation}{#lib37::CurvedAnimation}){(#lib20::Animation<dart.core::double>) → #lib20::Animation<dart.ui::Offset>} in block {
        #t9.{#lib20::Animation::addListener}(() → void {
          this.{#lib1::State::setState}(() → void {}){(() → void) → void};
        }){(() → void) → void};
        #t9.{#lib20::Animation::addStatusListener}((#lib20::AnimationStatus status) → void {
          if(status =={dart.core::Object::==}{(dart.core::Object) → dart.core::bool} #lib20::AnimationStatus::completed) {
            this.{cur::_CurvedAnimationDemoState::controller}{#lib19::AnimationController}.{#lib19::AnimationController::reverse}(){({from: dart.core::double?}) → #lib16::TickerFuture};
          }
        }){((#lib20::AnimationStatus) → void) → void};
      } =>#t9;
    }
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib9::Scaffold::•(appBar: new #lib10::AppBar::•(title: const #lib11::Text::•("Curved Animation")), body: new #lib22::Column::•(children: <#lib1::Widget>[const #lib22::SizedBox::•(height: 20.0), new #lib11::Text::•("Select Curve for forward motion", style: #lib7::Theme::of(context).{#lib4::ThemeData::textTheme}{#lib8::TextTheme}.{#lib8::TextTheme::titleLarge}{#lib6::TextStyle?}), new #lib68::DropdownButton::•<cur::CurveChoice>(items: this.{cur::_CurvedAnimationDemoState::curves}{dart.core::List<cur::CurveChoice>}.{dart.core::Iterable::map}<#lib68::DropdownMenuItem<cur::CurveChoice>>((cur::CurveChoice curve) → #lib68::DropdownMenuItem<cur::CurveChoice> {
        return new #lib68::DropdownMenuItem::•<cur::CurveChoice>(value: curve, child: new #lib11::Text::•(curve.{cur::CurveChoice::name}{dart.core::String}));
      }){((cur::CurveChoice) → #lib68::DropdownMenuItem<cur::CurveChoice>) → dart.core::Iterable<#lib68::DropdownMenuItem<cur::CurveChoice>>}.{dart.core::Iterable::toList}(){({growable: dart.core::bool}) → dart.core::List<#lib68::DropdownMenuItem<cur::CurveChoice>>}, onChanged: (cur::CurveChoice? newCurve) → void {
        if(!(newCurve == null)) {
          this.{#lib1::State::setState}(() → void {
            this.{cur::_CurvedAnimationDemoState::selectedForwardCurve} = newCurve{cur::CurveChoice};
            this.{cur::_CurvedAnimationDemoState::curvedAnimation}{#lib37::CurvedAnimation}.{#lib37::CurvedAnimation::curve} = this.{cur::_CurvedAnimationDemoState::selectedForwardCurve}{cur::CurveChoice}.{cur::CurveChoice::curve}{#lib38::Curve};
          }){(() → void) → void};
        }
      }, value: this.{cur::_CurvedAnimationDemoState::selectedForwardCurve}{cur::CurveChoice}), const #lib22::SizedBox::•(height: 15.0), new #lib11::Text::•("Select Curve for reverse motion", style: #lib7::Theme::of(context).{#lib4::ThemeData::textTheme}{#lib8::TextTheme}.{#lib8::TextTheme::titleLarge}{#lib6::TextStyle?}), new #lib68::DropdownButton::•<cur::CurveChoice>(items: this.{cur::_CurvedAnimationDemoState::curves}{dart.core::List<cur::CurveChoice>}.{dart.core::Iterable::map}<#lib68::DropdownMenuItem<cur::CurveChoice>>((cur::CurveChoice curve) → #lib68::DropdownMenuItem<cur::CurveChoice> {
        return new #lib68::DropdownMenuItem::•<cur::CurveChoice>(value: curve, child: new #lib11::Text::•(curve.{cur::CurveChoice::name}{dart.core::String}));
      }){((cur::CurveChoice) → #lib68::DropdownMenuItem<cur::CurveChoice>) → dart.core::Iterable<#lib68::DropdownMenuItem<cur::CurveChoice>>}.{dart.core::Iterable::toList}(){({growable: dart.core::bool}) → dart.core::List<#lib68::DropdownMenuItem<cur::CurveChoice>>}, onChanged: (cur::CurveChoice? newCurve) → void {
        if(!(newCurve == null)) {
          this.{#lib1::State::setState}(() → void {
            this.{cur::_CurvedAnimationDemoState::selectedReverseCurve} = newCurve{cur::CurveChoice};
            this.{cur::_CurvedAnimationDemoState::curvedAnimation}{#lib37::CurvedAnimation}.{#lib37::CurvedAnimation::reverseCurve} = this.{cur::_CurvedAnimationDemoState::selectedReverseCurve}{cur::CurveChoice}.{cur::CurveChoice::curve}{#lib38::Curve};
          }){(() → void) → void};
        }
      }, value: this.{cur::_CurvedAnimationDemoState::selectedReverseCurve}{cur::CurveChoice}), const #lib22::SizedBox::•(height: 35.0), new #lib22::Transform::rotate(angle: this.{cur::_CurvedAnimationDemoState::animationRotation}{#lib20::Animation<dart.core::double>}.{#lib20::Animation::value}{dart.core::double}, child: const #lib22::Center::•(child: const #lib69::FlutterLogo::•(size: 100.0))), const #lib22::SizedBox::•(height: 35.0), new #lib22::FractionalTranslation::•(translation: this.{cur::_CurvedAnimationDemoState::animationTranslation}{#lib20::Animation<dart.ui::Offset>}.{#lib20::Animation::value}{dart.ui::Offset}, child: const #lib69::FlutterLogo::•(size: 100.0)), const #lib22::SizedBox::•(height: 25.0), new #lib24::ElevatedButton::•(onPressed: () → void {
        this.{cur::_CurvedAnimationDemoState::controller}{#lib19::AnimationController}.{#lib19::AnimationController::forward}(){({from: dart.core::double?}) → #lib16::TickerFuture};
      }, child: const #lib11::Text::•("Animate"))]));
    }
    @dart.core::override
    method dispose() → void {
      this.{cur::_CurvedAnimationDemoState::controller}{#lib19::AnimationController}.{#lib19::AnimationController::dispose}(){() → void};
      super.{cur::__CurvedAnimationDemoState&State&SingleTickerProviderStateMixin::dispose}();
    }
  }
}
library from "package:animations/src/misc/expand_card.dart" as exp {

  import "package:flutter/material.dart";

  class ExpandCardDemo extends #lib1::StatelessWidget /*hasConstConstructor*/  {
    static const field dart.core::String routeName = "misc/expand_card";
    const constructor •({#lib2::Key? key = null}) → exp::ExpandCardDemo
      : super #lib1::StatelessWidget::•(key: key)
      ;
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib9::Scaffold::•(appBar: new #lib10::AppBar::•(title: const #lib11::Text::•("Expandable Card")), body: const #lib22::Center::•(child: const exp::ExpandCard::•()));
    }
  }
  class ExpandCard extends #lib1::StatefulWidget /*hasConstConstructor*/  {
    const constructor •({#lib2::Key? key = null}) → exp::ExpandCard
      : super #lib1::StatefulWidget::•(key: key)
      ;
    @dart.core::override
    method createState() → #lib1::State<exp::ExpandCard>
      return new exp::_ExpandCardState::•();
  }
  abstract class __ExpandCardState&State&SingleTickerProviderStateMixin = #lib1::State<exp::ExpandCard> with #lib15::SingleTickerProviderStateMixin<exp::ExpandCard> /*isAnonymousMixin*/  {
    synthetic constructor •() → exp::__ExpandCardState&State&SingleTickerProviderStateMixin
      : super #lib1::State::•()
      ;
    mixin-super-stub get _ticker() → #lib16::Ticker?
      return super.{#lib15::SingleTickerProviderStateMixin::_ticker};
    mixin-super-stub set _ticker(#lib16::Ticker? value) → void
      return super.{#lib15::SingleTickerProviderStateMixin::_ticker} = value;
    mixin-super-stub get _tickerModeNotifier() → #lib17::ValueNotifier<dart.core::bool>?
      return super.{#lib15::SingleTickerProviderStateMixin::_tickerModeNotifier};
    mixin-super-stub set _tickerModeNotifier(#lib17::ValueNotifier<dart.core::bool>? value) → void
      return super.{#lib15::SingleTickerProviderStateMixin::_tickerModeNotifier} = value;
    mixin-super-stub method createTicker((dart.core::Duration) → void onTick) → #lib16::Ticker
      return super.{#lib15::SingleTickerProviderStateMixin::createTicker}(onTick);
    mixin-super-stub method dispose() → void
      return super.{#lib15::SingleTickerProviderStateMixin::dispose}();
    mixin-super-stub method activate() → void
      return super.{#lib15::SingleTickerProviderStateMixin::activate}();
    mixin-super-stub method _updateTicker() → void
      return super.{#lib15::SingleTickerProviderStateMixin::_updateTicker}();
    mixin-super-stub method _updateTickerModeNotifier() → void
      return super.{#lib15::SingleTickerProviderStateMixin::_updateTickerModeNotifier}();
    mixin-super-stub method debugFillProperties(#lib18::DiagnosticPropertiesBuilder properties) → void
      return super.{#lib15::SingleTickerProviderStateMixin::debugFillProperties}(properties);
  }
  class _ExpandCardState extends exp::__ExpandCardState&State&SingleTickerProviderStateMixin {
    static const field dart.core::Duration duration = const dart.core::Duration::•(milliseconds: 300);
    field dart.core::bool selected = false;
    synthetic constructor •() → exp::_ExpandCardState
      : super exp::__ExpandCardState&State&SingleTickerProviderStateMixin::•()
      ;
    get size() → dart.core::double
      return this.{exp::_ExpandCardState::selected}{dart.core::bool} ?{dart.core::double} 256.0 : 128.0;
    method toggleExpanded() → void {
      this.{#lib1::State::setState}(() → void {
        this.{exp::_ExpandCardState::selected} = !this.{exp::_ExpandCardState::selected}{dart.core::bool};
      }){(() → void) → void};
    }
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib56::GestureDetector::•(onTap: () → void => this.{exp::_ExpandCardState::toggleExpanded}(){() → void}, child: new #lib36::Card::•(child: new #lib22::Padding::•(padding: const #lib25::EdgeInsets::all(8.0), child: new #lib26::AnimatedContainer::•(duration: exp::_ExpandCardState::duration, width: this.{exp::_ExpandCardState::size}{dart.core::double}, height: this.{exp::_ExpandCardState::size}{dart.core::double}, curve: #lib38::Curves::ease, child: new #lib70::AnimatedCrossFade::•(duration: exp::_ExpandCardState::duration, firstCurve: #lib38::Curves::easeInOutCubic, secondCurve: #lib38::Curves::easeInOutCubic, crossFadeState: this.{exp::_ExpandCardState::selected}{dart.core::bool} ?{#lib70::CrossFadeState} #lib70::CrossFadeState::showSecond : #lib70::CrossFadeState::showFirst, layoutBuilder: (#lib1::Widget topChild, #lib2::Key topChildKey, #lib1::Widget bottomChild, #lib2::Key bottomChildKey) → #lib22::Stack {
        return new #lib22::Stack::•(children: <#lib1::Widget>[new #lib22::Positioned::fill(key: bottomChildKey, child: bottomChild), new #lib22::Positioned::fill(key: topChildKey, child: topChild)]);
      }, firstChild: new #lib61::Image::asset("assets/eat_cape_town_sm.jpg", fit: #lib55::BoxFit::cover), secondChild: new #lib61::Image::asset("assets/eat_new_orleans_sm.jpg", fit: #lib55::BoxFit::cover))))));
    }
  }
}
library from "package:animations/src/misc/focus_image.dart" as foc {

  import "package:flutter/material.dart";

  class FocusImageDemo extends #lib1::StatelessWidget /*hasConstConstructor*/  {
    static field dart.core::String routeName = "misc/focus_image";
    const constructor •({#lib2::Key? key = null}) → foc::FocusImageDemo
      : super #lib1::StatelessWidget::•(key: key)
      ;
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib9::Scaffold::•(appBar: new #lib10::AppBar::•(title: const #lib11::Text::•("Focus Image")), body: const foc::Grid::•());
    }
  }
  class Grid extends #lib1::StatelessWidget /*hasConstConstructor*/  {
    const constructor •({#lib2::Key? key = null}) → foc::Grid
      : super #lib1::StatelessWidget::•(key: key)
      ;
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib9::Scaffold::•(body: new #lib12::GridView::builder(itemCount: 40, gridDelegate: const #lib71::SliverGridDelegateWithFixedCrossAxisCount::•(crossAxisCount: 4), itemBuilder: (#lib1::BuildContext context, dart.core::int index) → foc::SmallCard {
        return index.{dart.core::num::>=}(20){(dart.core::num) → dart.core::bool} ?{foc::SmallCard} const foc::SmallCard::•(imageAssetName: "assets/eat_cape_town_sm.jpg") : const foc::SmallCard::•(imageAssetName: "assets/eat_new_orleans_sm.jpg");
      }));
    }
  }
  class SmallCard extends #lib1::StatelessWidget /*hasConstConstructor*/  {
    final field dart.core::String imageAssetName;
    const constructor •({required dart.core::String imageAssetName = null, #lib2::Key? key = null}) → foc::SmallCard
      : foc::SmallCard::imageAssetName = imageAssetName, super #lib1::StatelessWidget::•(key: key)
      ;
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib36::Card::•(child: new #lib72::Material::•(child: new #lib48::InkWell::•(onTap: () → void {
        #lib14::NavigatorState nav = #lib14::Navigator::of(context);
        nav.{#lib14::NavigatorState::push}<void>(foc::_createRoute(context, this.{foc::SmallCard::imageAssetName}{dart.core::String})){(#lib14::Route<void>) → dart.async::Future<void>};
      }, child: new #lib61::Image::asset(this.{foc::SmallCard::imageAssetName}{dart.core::String}, fit: #lib55::BoxFit::cover))));
    }
  }
  class _SecondPage extends #lib1::StatelessWidget /*hasConstConstructor*/  {
    final field dart.core::String imageAssetName;
    const constructor •(dart.core::String imageAssetName) → foc::_SecondPage
      : foc::_SecondPage::imageAssetName = imageAssetName, super #lib1::StatelessWidget::•()
      ;
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib9::Scaffold::•(backgroundColor: #lib5::Colors::black, body: new #lib22::Center::•(child: new #lib72::Material::•(child: new #lib48::InkWell::•(onTap: () → void => #lib14::Navigator::of(context).{#lib14::NavigatorState::pop}<dart.core::Object?>(){([dart.core::Object?]) → void}, child: new #lib22::AspectRatio::•(aspectRatio: 1.0, child: new #lib61::Image::asset(this.{foc::_SecondPage::imageAssetName}{dart.core::String}, fit: #lib55::BoxFit::cover))))));
    }
  }
  static method _createRoute(#lib1::BuildContext parentContext, dart.core::String image) → #lib14::Route<dynamic> {
    return new #lib41::PageRouteBuilder::•<void>(pageBuilder: (#lib1::BuildContext context, #lib20::Animation<dart.core::double> animation, #lib20::Animation<dart.core::double> secondaryAnimation) → foc::_SecondPage {
      return new foc::_SecondPage::•(image);
    }, transitionsBuilder: (#lib1::BuildContext context, #lib20::Animation<dart.core::double> animation, #lib20::Animation<dart.core::double> secondaryAnimation, #lib1::Widget child) → #lib22::Stack {
      #lib20::Animation<#lib73::RelativeRect> rectAnimation = foc::_createTween(parentContext).{#lib21::Animatable::chain}(new #lib21::CurveTween::•(curve: #lib38::Curves::ease)){(#lib21::Animatable<dart.core::double>) → #lib21::Animatable<#lib73::RelativeRect>}.{#lib21::Animatable::animate}(animation){(#lib20::Animation<dart.core::double>) → #lib20::Animation<#lib73::RelativeRect>};
      return new #lib22::Stack::•(children: <#lib1::Widget>[new #lib23::PositionedTransition::•(rect: rectAnimation, child: child)]);
    });
  }
  static method _createTween(#lib1::BuildContext context) → #lib21::Tween<#lib73::RelativeRect> {
    dart.ui::Size windowSize = #lib47::MediaQuery::of(context).{#lib47::MediaQueryData::size}{dart.ui::Size};
    #lib30::RenderBox box = context.{#lib1::BuildContext::findRenderObject}(){() → #lib74::RenderObject?} as{ForNonNullableByDefault} #lib30::RenderBox;
    dart.ui::Rect rect = box.{#lib30::RenderBox::localToGlobal}(dart.ui::Offset::zero){(dart.ui::Offset, {ancestor: #lib74::RenderObject?}) → dart.ui::Offset}.{dart.ui::Offset::&}(box.{#lib30::RenderBox::size}{dart.ui::Size}){(dart.ui::Size) → dart.ui::Rect};
    #lib73::RelativeRect relativeRect = #lib73::RelativeRect::fromSize(rect, windowSize);
    return new #lib23::RelativeRectTween::•(begin: relativeRect, end: #lib73::RelativeRect::fill);
  }
}
library from "package:animations/src/misc/hero_animation.dart" as her {

  import "package:flutter/material.dart";

  class HeroAnimationDemo extends #lib1::StatelessWidget /*hasConstConstructor*/  {
    static const field dart.core::String routeName = "misc/hero_animation";
    const constructor •({#lib2::Key? key = null}) → her::HeroAnimationDemo
      : super #lib1::StatelessWidget::•(key: key)
      ;
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib9::Scaffold::•(appBar: new #lib10::AppBar::•(title: const #lib11::Text::•("Hero Animation")), body: new #lib56::GestureDetector::•(child: new #lib75::Hero::•(tag: "hero-page-child", child: her::_createHeroContainer(size: 50.0, color: #lib5::Colors::grey.{#lib5::MaterialColor::shade300}{dart.ui::Color})), onTap: () → void => #lib14::Navigator::of(context).{#lib14::NavigatorState::push}<void>(new #lib76::MaterialPageRoute::•<void>(builder: (#lib1::BuildContext context) → her::HeroPage => const her::HeroPage::•())){(#lib14::Route<void>) → dart.async::Future<void>}));
    }
  }
  class HeroPage extends #lib1::StatelessWidget /*hasConstConstructor*/  {
    const constructor •({#lib2::Key? key = null}) → her::HeroPage
      : super #lib1::StatelessWidget::•(key: key)
      ;
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib9::Scaffold::•(backgroundColor: #lib5::Colors::lightBlue, appBar: new #lib10::AppBar::•(), body: new #lib22::Center::•(child: new #lib75::Hero::•(tag: "hero-page-child", child: her::_createHeroContainer(size: 100.0, color: #lib5::Colors::white))));
    }
  }
  static method _createHeroContainer({required dart.core::double size = null, required dart.ui::Color color = null}) → #lib1::StatelessWidget {
    return new #lib33::Container::•(height: size, width: size, padding: const #lib25::EdgeInsets::all(10.0), margin: size.{dart.core::num::<}(100.0){(dart.core::num) → dart.core::bool} ?{#lib25::EdgeInsets} const #lib25::EdgeInsets::all(10.0) : const #lib25::EdgeInsets::all(0.0), decoration: new #lib27::BoxDecoration::•(shape: #lib52::BoxShape::circle, color: color), child: const #lib69::FlutterLogo::•());
  }
}
library from "package:animations/src/misc/physics_card_drag.dart" as phy {

  import "package:flutter/material.dart";
  import "package:flutter/physics.dart";

  class PhysicsCardDragDemo extends #lib1::StatelessWidget /*hasConstConstructor*/  {
    static const field dart.core::String routeName = "misc/physics_card";
    const constructor •({#lib2::Key? key = null}) → phy::PhysicsCardDragDemo
      : super #lib1::StatelessWidget::•(key: key)
      ;
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib9::Scaffold::•(appBar: new #lib10::AppBar::•(title: const #lib11::Text::•("Spring Physics")), body: const phy::DraggableCard::•(child: const #lib69::FlutterLogo::•(size: 128.0)));
    }
  }
  class DraggableCard extends #lib1::StatefulWidget /*hasConstConstructor*/  {
    final field #lib1::Widget child;
    const constructor •({required #lib1::Widget child = null, #lib2::Key? key = null}) → phy::DraggableCard
      : phy::DraggableCard::child = child, super #lib1::StatefulWidget::•(key: key)
      ;
    @dart.core::override
    method createState() → #lib1::State<phy::DraggableCard>
      return new phy::_DraggableCardState::•();
  }
  abstract class __DraggableCardState&State&SingleTickerProviderStateMixin = #lib1::State<phy::DraggableCard> with #lib15::SingleTickerProviderStateMixin<phy::DraggableCard> /*isAnonymousMixin*/  {
    synthetic constructor •() → phy::__DraggableCardState&State&SingleTickerProviderStateMixin
      : super #lib1::State::•()
      ;
    mixin-super-stub method dispose() → void
      return super.{#lib15::SingleTickerProviderStateMixin::dispose}();
    mixin-super-stub get _ticker() → #lib16::Ticker?
      return super.{#lib15::SingleTickerProviderStateMixin::_ticker};
    mixin-super-stub set _ticker(#lib16::Ticker? value) → void
      return super.{#lib15::SingleTickerProviderStateMixin::_ticker} = value;
    mixin-super-stub get _tickerModeNotifier() → #lib17::ValueNotifier<dart.core::bool>?
      return super.{#lib15::SingleTickerProviderStateMixin::_tickerModeNotifier};
    mixin-super-stub set _tickerModeNotifier(#lib17::ValueNotifier<dart.core::bool>? value) → void
      return super.{#lib15::SingleTickerProviderStateMixin::_tickerModeNotifier} = value;
    mixin-super-stub method createTicker((dart.core::Duration) → void onTick) → #lib16::Ticker
      return super.{#lib15::SingleTickerProviderStateMixin::createTicker}(onTick);
    mixin-super-stub method activate() → void
      return super.{#lib15::SingleTickerProviderStateMixin::activate}();
    mixin-super-stub method _updateTicker() → void
      return super.{#lib15::SingleTickerProviderStateMixin::_updateTicker}();
    mixin-super-stub method _updateTickerModeNotifier() → void
      return super.{#lib15::SingleTickerProviderStateMixin::_updateTickerModeNotifier}();
    mixin-super-stub method debugFillProperties(#lib18::DiagnosticPropertiesBuilder properties) → void
      return super.{#lib15::SingleTickerProviderStateMixin::debugFillProperties}(properties);
  }
  class _DraggableCardState extends phy::__DraggableCardState&State&SingleTickerProviderStateMixin {
    late final [setter] field #lib19::AnimationController _controller;
    field #lib34::Alignment _dragAlignment = #lib34::Alignment::center;
    late field #lib20::Animation<#lib34::Alignment> _animation;
    final field #lib59::SpringDescription _spring = const #lib59::SpringDescription::•(mass: 10.0, stiffness: 1000.0, damping: 0.7);
    synthetic constructor •() → phy::_DraggableCardState
      : super phy::__DraggableCardState&State&SingleTickerProviderStateMixin::•()
      ;
    method _normalizeVelocity(dart.ui::Offset velocity, dart.ui::Size size) → dart.core::double {
      final dart.ui::Offset normalizedVelocity = new dart.ui::Offset::•(velocity.{dart.ui::Offset::dx}{dart.core::double}.{dart.core::double::/}(size.{dart.ui::Size::width}{dart.core::double}){(dart.core::num) → dart.core::double}, velocity.{dart.ui::Offset::dy}{dart.core::double}.{dart.core::double::/}(size.{dart.ui::Size::height}{dart.core::double}){(dart.core::num) → dart.core::double});
      return normalizedVelocity.{dart.ui::Offset::distance}{dart.core::double}.{dart.core::double::unary-}(){() → dart.core::double};
    }
    method _runAnimation(dart.ui::Offset velocity, dart.ui::Size size) → void {
      this.{phy::_DraggableCardState::_animation} = this.{phy::_DraggableCardState::_controller}{#lib19::AnimationController}.{#lib20::Animation::drive}<#lib34::Alignment>(new #lib77::AlignmentTween::•(begin: this.{phy::_DraggableCardState::_dragAlignment}{#lib34::Alignment}, end: #lib34::Alignment::center)){(#lib21::Animatable<#lib34::Alignment>) → #lib20::Animation<#lib34::Alignment>};
      final #lib59::SpringSimulation simulation = new #lib59::SpringSimulation::•(this.{phy::_DraggableCardState::_spring}{#lib59::SpringDescription}, 0.0, 1.0, this.{phy::_DraggableCardState::_normalizeVelocity}(velocity, size){(dart.ui::Offset, dart.ui::Size) → dart.core::double});
      this.{phy::_DraggableCardState::_controller}{#lib19::AnimationController}.{#lib19::AnimationController::animateWith}(simulation){(#lib60::Simulation) → #lib16::TickerFuture};
    }
    @dart.core::override
    method initState() → void {
      super.{#lib1::State::initState}();
      this.{phy::_DraggableCardState::_controller} = let final #lib19::AnimationController #t10 = new #lib19::AnimationController::unbounded(vsync: this) in block {
        #t10.{#lib19::_AnimationController&Animation&AnimationEagerListenerMixin&AnimationLocalListenersMixin::addListener}(() → void => this.{#lib1::State::setState}(() → void => this.{phy::_DraggableCardState::_dragAlignment} = this.{phy::_DraggableCardState::_animation}{#lib20::Animation<#lib34::Alignment>}.{#lib20::Animation::value}{#lib34::Alignment}){(() → void) → void}){(() → void) → void};
      } =>#t10;
    }
    @dart.core::override
    method dispose() → void {
      this.{phy::_DraggableCardState::_controller}{#lib19::AnimationController}.{#lib19::AnimationController::dispose}(){() → void};
      super.{phy::__DraggableCardState&State&SingleTickerProviderStateMixin::dispose}();
    }
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      final dart.ui::Size size = #lib47::MediaQuery::of(context).{#lib47::MediaQueryData::size}{dart.ui::Size};
      return new #lib56::GestureDetector::•(onPanStart: (#lib57::DragStartDetails details) → void => this.{phy::_DraggableCardState::_controller}{#lib19::AnimationController}.{#lib19::AnimationController::stop}(canceled: true){({canceled: dart.core::bool}) → void}, onPanUpdate: (#lib57::DragUpdateDetails details) → void => this.{#lib1::State::setState}(() → void => this.{phy::_DraggableCardState::_dragAlignment} = this.{phy::_DraggableCardState::_dragAlignment}{#lib34::Alignment}.{#lib34::Alignment::+}(new #lib34::Alignment::•(details.{#lib57::DragUpdateDetails::delta}{dart.ui::Offset}.{dart.ui::Offset::dx}{dart.core::double}.{dart.core::double::/}(size.{dart.ui::Size::width}{dart.core::double}.{dart.core::double::/}(2){(dart.core::num) → dart.core::double}){(dart.core::num) → dart.core::double}, details.{#lib57::DragUpdateDetails::delta}{dart.ui::Offset}.{dart.ui::Offset::dy}{dart.core::double}.{dart.core::double::/}(size.{dart.ui::Size::height}{dart.core::double}.{dart.core::double::/}(2){(dart.core::num) → dart.core::double}){(dart.core::num) → dart.core::double})){(#lib34::Alignment) → #lib34::Alignment}){(() → void) → void}, onPanEnd: (#lib57::DragEndDetails details) → void => this.{phy::_DraggableCardState::_runAnimation}(details.{#lib57::DragEndDetails::velocity}{#lib58::Velocity}.{#lib58::Velocity::pixelsPerSecond}{dart.ui::Offset}, size){(dart.ui::Offset, dart.ui::Size) → void}, child: new #lib22::Align::•(alignment: this.{phy::_DraggableCardState::_dragAlignment}{#lib34::Alignment}, child: new #lib36::Card::•(child: this.{#lib1::State::widget}{phy::DraggableCard}.{phy::DraggableCard::child}{#lib1::Widget})));
    }
  }
}
library from "package:animations/src/misc/repeating_animation.dart" as rep {

  import "package:flutter/material.dart";

  class RepeatingAnimationDemo extends #lib1::StatefulWidget /*hasConstConstructor*/  {
    static field dart.core::String routeName = "misc/repeating_animation";
    const constructor •({#lib2::Key? key = null}) → rep::RepeatingAnimationDemo
      : super #lib1::StatefulWidget::•(key: key)
      ;
    @dart.core::override
    method createState() → #lib1::State<rep::RepeatingAnimationDemo>
      return new rep::_RepeatingAnimationDemoState::•();
  }
  abstract class __RepeatingAnimationDemoState&State&SingleTickerProviderStateMixin = #lib1::State<rep::RepeatingAnimationDemo> with #lib15::SingleTickerProviderStateMixin<rep::RepeatingAnimationDemo> /*isAnonymousMixin*/  {
    synthetic constructor •() → rep::__RepeatingAnimationDemoState&State&SingleTickerProviderStateMixin
      : super #lib1::State::•()
      ;
    mixin-super-stub method dispose() → void
      return super.{#lib15::SingleTickerProviderStateMixin::dispose}();
    mixin-super-stub get _ticker() → #lib16::Ticker?
      return super.{#lib15::SingleTickerProviderStateMixin::_ticker};
    mixin-super-stub set _ticker(#lib16::Ticker? value) → void
      return super.{#lib15::SingleTickerProviderStateMixin::_ticker} = value;
    mixin-super-stub get _tickerModeNotifier() → #lib17::ValueNotifier<dart.core::bool>?
      return super.{#lib15::SingleTickerProviderStateMixin::_tickerModeNotifier};
    mixin-super-stub set _tickerModeNotifier(#lib17::ValueNotifier<dart.core::bool>? value) → void
      return super.{#lib15::SingleTickerProviderStateMixin::_tickerModeNotifier} = value;
    mixin-super-stub method createTicker((dart.core::Duration) → void onTick) → #lib16::Ticker
      return super.{#lib15::SingleTickerProviderStateMixin::createTicker}(onTick);
    mixin-super-stub method activate() → void
      return super.{#lib15::SingleTickerProviderStateMixin::activate}();
    mixin-super-stub method _updateTicker() → void
      return super.{#lib15::SingleTickerProviderStateMixin::_updateTicker}();
    mixin-super-stub method _updateTickerModeNotifier() → void
      return super.{#lib15::SingleTickerProviderStateMixin::_updateTickerModeNotifier}();
    mixin-super-stub method debugFillProperties(#lib18::DiagnosticPropertiesBuilder properties) → void
      return super.{#lib15::SingleTickerProviderStateMixin::debugFillProperties}(properties);
  }
  class _RepeatingAnimationDemoState extends rep::__RepeatingAnimationDemoState&State&SingleTickerProviderStateMixin {
    late final [setter] field #lib19::AnimationController _controller;
    late final [setter] field #lib20::Animation<#lib28::BorderRadius?> _borderRadius;
    synthetic constructor •() → rep::_RepeatingAnimationDemoState
      : super rep::__RepeatingAnimationDemoState&State&SingleTickerProviderStateMixin::•()
      ;
    @dart.core::override
    method initState() → void {
      super.{#lib1::State::initState}();
      this.{rep::_RepeatingAnimationDemoState::_controller} = let final #lib19::AnimationController #t11 = new #lib19::AnimationController::•(duration: const dart.core::Duration::•(seconds: 2), vsync: this) in block {
        #t11.{#lib19::AnimationController::repeat}(reverse: true){({max: dart.core::double?, min: dart.core::double?, period: dart.core::Duration?, reverse: dart.core::bool}) → #lib16::TickerFuture};
      } =>#t11;
      this.{rep::_RepeatingAnimationDemoState::_borderRadius} = new #lib26::BorderRadiusTween::•(begin: new #lib28::BorderRadius::circular(100.0), end: new #lib28::BorderRadius::circular(0.0)).{#lib21::Animatable::animate}(this.{rep::_RepeatingAnimationDemoState::_controller}{#lib19::AnimationController}){(#lib20::Animation<dart.core::double>) → #lib20::Animation<#lib28::BorderRadius?>};
    }
    @dart.core::override
    method build(#lib1::BuildContext context) → #lib1::Widget {
      return new #lib9::Scaffold::•(appBar: new #lib10::AppBar::•(title: const #lib11::Text::•("Repeating Animation")), body: new #lib22::Center::•(child: new #lib23::AnimatedBuilder::•(animation: this.{rep::_RepeatingAnimationDemoState::_borderRadius}{#lib20::Animation<#lib28::BorderRadius?>}, builder: (#lib1::BuildContext context, #lib1::Widget? child) → #lib33::Container {
        return new #lib33::Container::•(width: 200.0, height: 200.0, decoration: new #lib27::BoxDecoration::•(color: #lib5::Colors::deepPurple, borderRadius: this.{rep::_RepeatingAnimationDemoState::_borderRadius}{#lib20::Animation<#lib28::BorderRadius?>}.{#lib20::Animation::value}{#lib28::BorderRadius?}));
      })));
    }
    @dart.core::override
    method dispose() → void {
      this.{rep::_RepeatingAnimationDemoState::_controller}{#lib19::AnimationController}.{#lib19::AnimationController::dispose}(){() → void};
      super.{rep::__RepeatingAnimationDemoState&State&SingleTickerProviderStateMixin::dispose}();
    }
  }
}
